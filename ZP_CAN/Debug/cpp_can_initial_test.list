
cpp_can_initial_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066c8  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080068c0  080068c0  000078c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006990  08006990  00008084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006990  08006990  00007990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006998  08006998  00008084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006998  08006998  00007998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800699c  0800699c  0000799c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  080069a0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000778  20000084  08006a24  00008084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007fc  08006a24  000087fc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f5f  00000000  00000000  000080ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003094  00000000  00000000  0001d019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  000200b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc3  00000000  00000000  00021168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b9b3  00000000  00000000  00021e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017563  00000000  00000000  0004d7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011552a  00000000  00000000  00064d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017a26b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004914  00000000  00000000  0017a2b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  0017ebc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000084 	.word	0x20000084
 8000214:	00000000 	.word	0x00000000
 8000218:	080068a8 	.word	0x080068a8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000088 	.word	0x20000088
 8000234:	080068a8 	.word	0x080068a8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b9b0 	b.w	80005b0 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800026c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800026e:	4688      	mov	r8, r1
 8000270:	4604      	mov	r4, r0
 8000272:	468e      	mov	lr, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d95f      	bls.n	800033e <__udivmoddi4+0xd6>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 fe06 	lsl.w	lr, r1, r6
 800028c:	40b7      	lsls	r7, r6
 800028e:	40b4      	lsls	r4, r6
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	ea43 0e0e 	orr.w	lr, r3, lr
 8000298:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	0c23      	lsrs	r3, r4, #16
 80002a2:	fbbe f1f8 	udiv	r1, lr, r8
 80002a6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002aa:	fb01 f20c 	mul.w	r2, r1, ip
 80002ae:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d907      	bls.n	80002c6 <__udivmoddi4+0x5e>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	d202      	bcs.n	80002c4 <__udivmoddi4+0x5c>
 80002be:	429a      	cmp	r2, r3
 80002c0:	f200 8154 	bhi.w	800056c <__udivmoddi4+0x304>
 80002c4:	4601      	mov	r1, r0
 80002c6:	1a9b      	subs	r3, r3, r2
 80002c8:	b2a2      	uxth	r2, r4
 80002ca:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ce:	fb08 3310 	mls	r3, r8, r0, r3
 80002d2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80002da:	4594      	cmp	ip, r2
 80002dc:	d90b      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002de:	18ba      	adds	r2, r7, r2
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	bf2c      	ite	cs
 80002e6:	2401      	movcs	r4, #1
 80002e8:	2400      	movcc	r4, #0
 80002ea:	4594      	cmp	ip, r2
 80002ec:	d902      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002ee:	2c00      	cmp	r4, #0
 80002f0:	f000 813f 	beq.w	8000572 <__udivmoddi4+0x30a>
 80002f4:	4618      	mov	r0, r3
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba2 020c 	sub.w	r2, r2, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f2      	lsrs	r2, r6
 8000304:	2300      	movs	r3, #0
 8000306:	e9c5 2300 	strd	r2, r3, [r5]
 800030a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d14e      	bne.n	80003c4 <__udivmoddi4+0x15c>
 8000326:	4543      	cmp	r3, r8
 8000328:	f0c0 8112 	bcc.w	8000550 <__udivmoddi4+0x2e8>
 800032c:	4282      	cmp	r2, r0
 800032e:	f240 810f 	bls.w	8000550 <__udivmoddi4+0x2e8>
 8000332:	4608      	mov	r0, r1
 8000334:	2d00      	cmp	r5, #0
 8000336:	d0e8      	beq.n	800030a <__udivmoddi4+0xa2>
 8000338:	e9c5 4e00 	strd	r4, lr, [r5]
 800033c:	e7e5      	b.n	800030a <__udivmoddi4+0xa2>
 800033e:	2a00      	cmp	r2, #0
 8000340:	f000 80ac 	beq.w	800049c <__udivmoddi4+0x234>
 8000344:	fab2 f682 	clz	r6, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	f040 80bb 	bne.w	80004c4 <__udivmoddi4+0x25c>
 800034e:	1a8b      	subs	r3, r1, r2
 8000350:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000354:	b2bc      	uxth	r4, r7
 8000356:	2101      	movs	r1, #1
 8000358:	0c02      	lsrs	r2, r0, #16
 800035a:	b280      	uxth	r0, r0
 800035c:	fbb3 fcfe 	udiv	ip, r3, lr
 8000360:	fb0e 331c 	mls	r3, lr, ip, r3
 8000364:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000368:	fb04 f20c 	mul.w	r2, r4, ip
 800036c:	429a      	cmp	r2, r3
 800036e:	d90e      	bls.n	800038e <__udivmoddi4+0x126>
 8000370:	18fb      	adds	r3, r7, r3
 8000372:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000376:	bf2c      	ite	cs
 8000378:	f04f 0901 	movcs.w	r9, #1
 800037c:	f04f 0900 	movcc.w	r9, #0
 8000380:	429a      	cmp	r2, r3
 8000382:	d903      	bls.n	800038c <__udivmoddi4+0x124>
 8000384:	f1b9 0f00 	cmp.w	r9, #0
 8000388:	f000 80ec 	beq.w	8000564 <__udivmoddi4+0x2fc>
 800038c:	46c4      	mov	ip, r8
 800038e:	1a9b      	subs	r3, r3, r2
 8000390:	fbb3 f8fe 	udiv	r8, r3, lr
 8000394:	fb0e 3318 	mls	r3, lr, r8, r3
 8000398:	fb04 f408 	mul.w	r4, r4, r8
 800039c:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003a0:	4294      	cmp	r4, r2
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x154>
 80003a4:	18ba      	adds	r2, r7, r2
 80003a6:	f108 33ff 	add.w	r3, r8, #4294967295
 80003aa:	bf2c      	ite	cs
 80003ac:	2001      	movcs	r0, #1
 80003ae:	2000      	movcc	r0, #0
 80003b0:	4294      	cmp	r4, r2
 80003b2:	d902      	bls.n	80003ba <__udivmoddi4+0x152>
 80003b4:	2800      	cmp	r0, #0
 80003b6:	f000 80d1 	beq.w	800055c <__udivmoddi4+0x2f4>
 80003ba:	4698      	mov	r8, r3
 80003bc:	1b12      	subs	r2, r2, r4
 80003be:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 80003c2:	e79d      	b.n	8000300 <__udivmoddi4+0x98>
 80003c4:	f1c1 0620 	rsb	r6, r1, #32
 80003c8:	408b      	lsls	r3, r1
 80003ca:	fa08 f401 	lsl.w	r4, r8, r1
 80003ce:	fa00 f901 	lsl.w	r9, r0, r1
 80003d2:	fa22 f706 	lsr.w	r7, r2, r6
 80003d6:	fa28 f806 	lsr.w	r8, r8, r6
 80003da:	408a      	lsls	r2, r1
 80003dc:	431f      	orrs	r7, r3
 80003de:	fa20 f306 	lsr.w	r3, r0, r6
 80003e2:	0c38      	lsrs	r0, r7, #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fa1f fc87 	uxth.w	ip, r7
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	fbb8 fef0 	udiv	lr, r8, r0
 80003f0:	fb00 881e 	mls	r8, r0, lr, r8
 80003f4:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80003f8:	fb0e f80c 	mul.w	r8, lr, ip
 80003fc:	45a0      	cmp	r8, r4
 80003fe:	d90e      	bls.n	800041e <__udivmoddi4+0x1b6>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000406:	bf2c      	ite	cs
 8000408:	f04f 0b01 	movcs.w	fp, #1
 800040c:	f04f 0b00 	movcc.w	fp, #0
 8000410:	45a0      	cmp	r8, r4
 8000412:	d903      	bls.n	800041c <__udivmoddi4+0x1b4>
 8000414:	f1bb 0f00 	cmp.w	fp, #0
 8000418:	f000 80b8 	beq.w	800058c <__udivmoddi4+0x324>
 800041c:	46d6      	mov	lr, sl
 800041e:	eba4 0408 	sub.w	r4, r4, r8
 8000422:	fa1f f883 	uxth.w	r8, r3
 8000426:	fbb4 f3f0 	udiv	r3, r4, r0
 800042a:	fb00 4413 	mls	r4, r0, r3, r4
 800042e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000432:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000436:	45a4      	cmp	ip, r4
 8000438:	d90e      	bls.n	8000458 <__udivmoddi4+0x1f0>
 800043a:	193c      	adds	r4, r7, r4
 800043c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000440:	bf2c      	ite	cs
 8000442:	f04f 0801 	movcs.w	r8, #1
 8000446:	f04f 0800 	movcc.w	r8, #0
 800044a:	45a4      	cmp	ip, r4
 800044c:	d903      	bls.n	8000456 <__udivmoddi4+0x1ee>
 800044e:	f1b8 0f00 	cmp.w	r8, #0
 8000452:	f000 809f 	beq.w	8000594 <__udivmoddi4+0x32c>
 8000456:	4603      	mov	r3, r0
 8000458:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800045c:	eba4 040c 	sub.w	r4, r4, ip
 8000460:	fba0 ec02 	umull	lr, ip, r0, r2
 8000464:	4564      	cmp	r4, ip
 8000466:	4673      	mov	r3, lr
 8000468:	46e0      	mov	r8, ip
 800046a:	d302      	bcc.n	8000472 <__udivmoddi4+0x20a>
 800046c:	d107      	bne.n	800047e <__udivmoddi4+0x216>
 800046e:	45f1      	cmp	r9, lr
 8000470:	d205      	bcs.n	800047e <__udivmoddi4+0x216>
 8000472:	ebbe 0302 	subs.w	r3, lr, r2
 8000476:	eb6c 0c07 	sbc.w	ip, ip, r7
 800047a:	3801      	subs	r0, #1
 800047c:	46e0      	mov	r8, ip
 800047e:	b15d      	cbz	r5, 8000498 <__udivmoddi4+0x230>
 8000480:	ebb9 0203 	subs.w	r2, r9, r3
 8000484:	eb64 0408 	sbc.w	r4, r4, r8
 8000488:	fa04 f606 	lsl.w	r6, r4, r6
 800048c:	fa22 f301 	lsr.w	r3, r2, r1
 8000490:	40cc      	lsrs	r4, r1
 8000492:	431e      	orrs	r6, r3
 8000494:	e9c5 6400 	strd	r6, r4, [r5]
 8000498:	2100      	movs	r1, #0
 800049a:	e736      	b.n	800030a <__udivmoddi4+0xa2>
 800049c:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a0:	0c01      	lsrs	r1, r0, #16
 80004a2:	4614      	mov	r4, r2
 80004a4:	b280      	uxth	r0, r0
 80004a6:	4696      	mov	lr, r2
 80004a8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ac:	2620      	movs	r6, #32
 80004ae:	4690      	mov	r8, r2
 80004b0:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004b4:	4610      	mov	r0, r2
 80004b6:	fbb1 f1f2 	udiv	r1, r1, r2
 80004ba:	eba3 0308 	sub.w	r3, r3, r8
 80004be:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004c2:	e74b      	b.n	800035c <__udivmoddi4+0xf4>
 80004c4:	40b7      	lsls	r7, r6
 80004c6:	f1c6 0320 	rsb	r3, r6, #32
 80004ca:	fa01 f206 	lsl.w	r2, r1, r6
 80004ce:	fa21 f803 	lsr.w	r8, r1, r3
 80004d2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d6:	fa20 f303 	lsr.w	r3, r0, r3
 80004da:	b2bc      	uxth	r4, r7
 80004dc:	40b0      	lsls	r0, r6
 80004de:	4313      	orrs	r3, r2
 80004e0:	0c02      	lsrs	r2, r0, #16
 80004e2:	0c19      	lsrs	r1, r3, #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	fbb8 f9fe 	udiv	r9, r8, lr
 80004ea:	fb0e 8819 	mls	r8, lr, r9, r8
 80004ee:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	4588      	cmp	r8, r1
 80004f8:	d951      	bls.n	800059e <__udivmoddi4+0x336>
 80004fa:	1879      	adds	r1, r7, r1
 80004fc:	f109 3cff 	add.w	ip, r9, #4294967295
 8000500:	bf2c      	ite	cs
 8000502:	f04f 0a01 	movcs.w	sl, #1
 8000506:	f04f 0a00 	movcc.w	sl, #0
 800050a:	4588      	cmp	r8, r1
 800050c:	d902      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800050e:	f1ba 0f00 	cmp.w	sl, #0
 8000512:	d031      	beq.n	8000578 <__udivmoddi4+0x310>
 8000514:	eba1 0108 	sub.w	r1, r1, r8
 8000518:	fbb1 f9fe 	udiv	r9, r1, lr
 800051c:	fb09 f804 	mul.w	r8, r9, r4
 8000520:	fb0e 1119 	mls	r1, lr, r9, r1
 8000524:	b29b      	uxth	r3, r3
 8000526:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052a:	4543      	cmp	r3, r8
 800052c:	d235      	bcs.n	800059a <__udivmoddi4+0x332>
 800052e:	18fb      	adds	r3, r7, r3
 8000530:	f109 31ff 	add.w	r1, r9, #4294967295
 8000534:	bf2c      	ite	cs
 8000536:	f04f 0a01 	movcs.w	sl, #1
 800053a:	f04f 0a00 	movcc.w	sl, #0
 800053e:	4543      	cmp	r3, r8
 8000540:	d2bb      	bcs.n	80004ba <__udivmoddi4+0x252>
 8000542:	f1ba 0f00 	cmp.w	sl, #0
 8000546:	d1b8      	bne.n	80004ba <__udivmoddi4+0x252>
 8000548:	f1a9 0102 	sub.w	r1, r9, #2
 800054c:	443b      	add	r3, r7
 800054e:	e7b4      	b.n	80004ba <__udivmoddi4+0x252>
 8000550:	1a84      	subs	r4, r0, r2
 8000552:	eb68 0203 	sbc.w	r2, r8, r3
 8000556:	2001      	movs	r0, #1
 8000558:	4696      	mov	lr, r2
 800055a:	e6eb      	b.n	8000334 <__udivmoddi4+0xcc>
 800055c:	443a      	add	r2, r7
 800055e:	f1a8 0802 	sub.w	r8, r8, #2
 8000562:	e72b      	b.n	80003bc <__udivmoddi4+0x154>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	443b      	add	r3, r7
 800056a:	e710      	b.n	800038e <__udivmoddi4+0x126>
 800056c:	3902      	subs	r1, #2
 800056e:	443b      	add	r3, r7
 8000570:	e6a9      	b.n	80002c6 <__udivmoddi4+0x5e>
 8000572:	443a      	add	r2, r7
 8000574:	3802      	subs	r0, #2
 8000576:	e6be      	b.n	80002f6 <__udivmoddi4+0x8e>
 8000578:	eba7 0808 	sub.w	r8, r7, r8
 800057c:	f1a9 0c02 	sub.w	ip, r9, #2
 8000580:	4441      	add	r1, r8
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	e7c9      	b.n	8000520 <__udivmoddi4+0x2b8>
 800058c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000590:	443c      	add	r4, r7
 8000592:	e744      	b.n	800041e <__udivmoddi4+0x1b6>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e75e      	b.n	8000458 <__udivmoddi4+0x1f0>
 800059a:	4649      	mov	r1, r9
 800059c:	e78d      	b.n	80004ba <__udivmoddi4+0x252>
 800059e:	eba1 0108 	sub.w	r1, r1, r8
 80005a2:	46cc      	mov	ip, r9
 80005a4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a8:	fb09 f804 	mul.w	r8, r9, r4
 80005ac:	e7b8      	b.n	8000520 <__udivmoddi4+0x2b8>
 80005ae:	bf00      	nop

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <_uavcan_protocol_NodeStatus_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
static inline bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
 80005c0:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->uptime_sec);
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	6819      	ldr	r1, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2220      	movs	r2, #32
 80005ca:	68f8      	ldr	r0, [r7, #12]
 80005cc:	f000 ffbd 	bl	800154a <canardEncodeScalar>

    *bit_ofs += 32;
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f103 0220 	add.w	r2, r3, #32
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 2, &msg->health);
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	6819      	ldr	r1, [r3, #0]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3304      	adds	r3, #4
 80005e4:	2202      	movs	r2, #2
 80005e6:	68f8      	ldr	r0, [r7, #12]
 80005e8:	f000 ffaf 	bl	800154a <canardEncodeScalar>

    *bit_ofs += 2;
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	1c9a      	adds	r2, r3, #2
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->mode);
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	6819      	ldr	r1, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	3305      	adds	r3, #5
 80005fe:	2203      	movs	r2, #3
 8000600:	68f8      	ldr	r0, [r7, #12]
 8000602:	f000 ffa2 	bl	800154a <canardEncodeScalar>

    *bit_ofs += 3;
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	1cda      	adds	r2, r3, #3
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->sub_mode);
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	6819      	ldr	r1, [r3, #0]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	3306      	adds	r3, #6
 8000618:	2203      	movs	r2, #3
 800061a:	68f8      	ldr	r0, [r7, #12]
 800061c:	f000 ff95 	bl	800154a <canardEncodeScalar>

    *bit_ofs += 3;
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	1cda      	adds	r2, r3, #3
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->vendor_specific_status_code);
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	6819      	ldr	r1, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3308      	adds	r3, #8
 8000632:	2210      	movs	r2, #16
 8000634:	68f8      	ldr	r0, [r7, #12]
 8000636:	f000 ff88 	bl	800154a <canardEncodeScalar>

    *bit_ofs += 16;
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f103 0210 	add.w	r2, r3, #16
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	601a      	str	r2, [r3, #0]





}
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <_uavcan_protocol_NodeStatus_decode>:

/*
 decode uavcan_protocol_NodeStatus, return true on failure, false on success
*/
bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 800064e:	b580      	push	{r7, lr}
 8000650:	b086      	sub	sp, #24
 8000652:	af02      	add	r7, sp, #8
 8000654:	60f8      	str	r0, [r7, #12]
 8000656:	60b9      	str	r1, [r7, #8]
 8000658:	607a      	str	r2, [r7, #4]
 800065a:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 32, false, &msg->uptime_sec);
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	6819      	ldr	r1, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2300      	movs	r3, #0
 8000666:	2220      	movs	r2, #32
 8000668:	68f8      	ldr	r0, [r7, #12]
 800066a:	f000 fde5 	bl	8001238 <canardDecodeScalar>

    *bit_ofs += 32;
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f103 0220 	add.w	r2, r3, #32
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 2, false, &msg->health);
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	6819      	ldr	r1, [r3, #0]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	3304      	adds	r3, #4
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2300      	movs	r3, #0
 8000686:	2202      	movs	r2, #2
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	f000 fdd5 	bl	8001238 <canardDecodeScalar>

    *bit_ofs += 2;
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	1c9a      	adds	r2, r3, #2
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->mode);
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	6819      	ldr	r1, [r3, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3305      	adds	r3, #5
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2300      	movs	r3, #0
 80006a4:	2203      	movs	r2, #3
 80006a6:	68f8      	ldr	r0, [r7, #12]
 80006a8:	f000 fdc6 	bl	8001238 <canardDecodeScalar>

    *bit_ofs += 3;
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	1cda      	adds	r2, r3, #3
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->sub_mode);
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	6819      	ldr	r1, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	3306      	adds	r3, #6
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2300      	movs	r3, #0
 80006c2:	2203      	movs	r2, #3
 80006c4:	68f8      	ldr	r0, [r7, #12]
 80006c6:	f000 fdb7 	bl	8001238 <canardDecodeScalar>

    *bit_ofs += 3;
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	1cda      	adds	r2, r3, #3
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 16, false, &msg->vendor_specific_status_code);
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	6819      	ldr	r1, [r3, #0]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3308      	adds	r3, #8
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2300      	movs	r3, #0
 80006e0:	2210      	movs	r2, #16
 80006e2:	68f8      	ldr	r0, [r7, #12]
 80006e4:	f000 fda8 	bl	8001238 <canardDecodeScalar>

    *bit_ofs += 16;
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f103 0210 	add.w	r2, r3, #16
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	601a      	str	r2, [r3, #0]





    return false; /* success */
 80006f4:	2300      	movs	r3, #0

}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <uavcan_protocol_NodeStatus_encode>:

uint32_t uavcan_protocol_NodeStatus_encode(struct uavcan_protocol_NodeStatus* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 80006fe:	b580      	push	{r7, lr}
 8000700:	b084      	sub	sp, #16
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
 8000706:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE);
 800070c:	2207      	movs	r2, #7
 800070e:	2100      	movs	r1, #0
 8000710:	6838      	ldr	r0, [r7, #0]
 8000712:	f006 f843 	bl	800679c <memset>
    _uavcan_protocol_NodeStatus_encode(buffer, &bit_ofs, msg, 
 8000716:	f107 010c 	add.w	r1, r7, #12
 800071a:	2301      	movs	r3, #1
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	6838      	ldr	r0, [r7, #0]
 8000720:	f7ff ff48 	bl	80005b4 <_uavcan_protocol_NodeStatus_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	3307      	adds	r3, #7
 8000728:	08db      	lsrs	r3, r3, #3
}
 800072a:	4618      	mov	r0, r3
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <uavcan_protocol_NodeStatus_decode>:

/*
  return true if the decode is invalid
 */
bool uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, struct uavcan_protocol_NodeStatus* msg) {
 8000732:	b580      	push	{r7, lr}
 8000734:	b084      	sub	sp, #16
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
 800073a:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
    if (_uavcan_protocol_NodeStatus_decode(transfer, &bit_ofs, msg,
 8000740:	f107 0108 	add.w	r1, r7, #8
 8000744:	2301      	movs	r3, #1
 8000746:	683a      	ldr	r2, [r7, #0]
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ff80 	bl	800064e <_uavcan_protocol_NodeStatus_decode>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <uavcan_protocol_NodeStatus_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 8000754:	2301      	movs	r3, #1
 8000756:	e00c      	b.n	8000772 <uavcan_protocol_NodeStatus_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	3307      	adds	r3, #7
 800075c:	08db      	lsrs	r3, r3, #3
 800075e:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	8a9b      	ldrh	r3, [r3, #20]
 8000764:	461a      	mov	r2, r3
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4293      	cmp	r3, r2
 800076a:	bf14      	ite	ne
 800076c:	2301      	movne	r3, #1
 800076e:	2300      	moveq	r3, #0
 8000770:	b2db      	uxtb	r3, r3
}
 8000772:	4618      	mov	r0, r3
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <_uavcan_protocol_dynamic_node_id_Allocation_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_dynamic_node_id_Allocation_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_dynamic_node_id_Allocation* msg, bool tao);
static inline bool _uavcan_protocol_dynamic_node_id_Allocation_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_dynamic_node_id_Allocation* msg, bool tao);
void _uavcan_protocol_dynamic_node_id_Allocation_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_dynamic_node_id_Allocation* msg, bool tao) {
 800077a:	b580      	push	{r7, lr}
 800077c:	b086      	sub	sp, #24
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 7, &msg->node_id);
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	6819      	ldr	r1, [r3, #0]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2207      	movs	r2, #7
 8000790:	68f8      	ldr	r0, [r7, #12]
 8000792:	f000 feda 	bl	800154a <canardEncodeScalar>

    *bit_ofs += 7;
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	1dda      	adds	r2, r3, #7
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 1, &msg->first_part_of_unique_id);
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	6819      	ldr	r1, [r3, #0]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3301      	adds	r3, #1
 80007a8:	2201      	movs	r2, #1
 80007aa:	68f8      	ldr	r0, [r7, #12]
 80007ac:	f000 fecd 	bl	800154a <canardEncodeScalar>

    *bit_ofs += 1;
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	1c5a      	adds	r2, r3, #1
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	601a      	str	r2, [r3, #0]





    if (!tao) {
 80007ba:	78fb      	ldrb	r3, [r7, #3]
 80007bc:	f083 0301 	eor.w	r3, r3, #1
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00c      	beq.n	80007e0 <_uavcan_protocol_dynamic_node_id_Allocation_encode+0x66>


        canardEncodeScalar(buffer, *bit_ofs, 5, &msg->unique_id.len);
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	6819      	ldr	r1, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3302      	adds	r3, #2
 80007ce:	2205      	movs	r2, #5
 80007d0:	68f8      	ldr	r0, [r7, #12]
 80007d2:	f000 feba 	bl	800154a <canardEncodeScalar>
        *bit_ofs += 5;
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	1d5a      	adds	r2, r3, #5
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	601a      	str	r2, [r3, #0]

    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const size_t unique_id_len = msg->unique_id.len > 16 ? 16 : msg->unique_id.len;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	789b      	ldrb	r3, [r3, #2]
 80007e4:	2b10      	cmp	r3, #16
 80007e6:	bf28      	it	cs
 80007e8:	2310      	movcs	r3, #16
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	613b      	str	r3, [r7, #16]
#pragma GCC diagnostic pop
    for (size_t i=0; i < unique_id_len; i++) {
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	e012      	b.n	800081a <_uavcan_protocol_dynamic_node_id_Allocation_encode+0xa0>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->unique_id.data[i]);
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	6819      	ldr	r1, [r3, #0]
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	4413      	add	r3, r2
 80007fe:	3303      	adds	r3, #3
 8000800:	2208      	movs	r2, #8
 8000802:	68f8      	ldr	r0, [r7, #12]
 8000804:	f000 fea1 	bl	800154a <canardEncodeScalar>

        *bit_ofs += 8;
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f103 0208 	add.w	r2, r3, #8
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < unique_id_len; i++) {
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	3301      	adds	r3, #1
 8000818:	617b      	str	r3, [r7, #20]
 800081a:	697a      	ldr	r2, [r7, #20]
 800081c:	693b      	ldr	r3, [r7, #16]
 800081e:	429a      	cmp	r2, r3
 8000820:	d3e8      	bcc.n	80007f4 <_uavcan_protocol_dynamic_node_id_Allocation_encode+0x7a>





}
 8000822:	bf00      	nop
 8000824:	bf00      	nop
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <_uavcan_protocol_dynamic_node_id_Allocation_decode>:

/*
 decode uavcan_protocol_dynamic_node_id_Allocation, return true on failure, false on success
*/
bool _uavcan_protocol_dynamic_node_id_Allocation_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_dynamic_node_id_Allocation* msg, bool tao) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af02      	add	r7, sp, #8
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
 8000838:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 7, false, &msg->node_id);
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	6819      	ldr	r1, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	2300      	movs	r3, #0
 8000844:	2207      	movs	r2, #7
 8000846:	68f8      	ldr	r0, [r7, #12]
 8000848:	f000 fcf6 	bl	8001238 <canardDecodeScalar>

    *bit_ofs += 7;
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	1dda      	adds	r2, r3, #7
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 1, false, &msg->first_part_of_unique_id);
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	6819      	ldr	r1, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3301      	adds	r3, #1
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	2300      	movs	r3, #0
 8000862:	2201      	movs	r2, #1
 8000864:	68f8      	ldr	r0, [r7, #12]
 8000866:	f000 fce7 	bl	8001238 <canardDecodeScalar>

    *bit_ofs += 1;
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	1c5a      	adds	r2, r3, #1
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	601a      	str	r2, [r3, #0]





    if (!tao) {
 8000874:	78fb      	ldrb	r3, [r7, #3]
 8000876:	f083 0301 	eor.w	r3, r3, #1
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d00f      	beq.n	80008a0 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x74>


        canardDecodeScalar(transfer, *bit_ofs, 5, false, &msg->unique_id.len);
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	6819      	ldr	r1, [r3, #0]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3302      	adds	r3, #2
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	2300      	movs	r3, #0
 800088c:	2205      	movs	r2, #5
 800088e:	68f8      	ldr	r0, [r7, #12]
 8000890:	f000 fcd2 	bl	8001238 <canardDecodeScalar>
        *bit_ofs += 5;
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	1d5a      	adds	r2, r3, #5
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	e00a      	b.n	80008b6 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x8a>



    } else {

        msg->unique_id.len = ((transfer->payload_len*8)-*bit_ofs)/8;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	8a9b      	ldrh	r3, [r3, #20]
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	461a      	mov	r2, r3
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	08db      	lsrs	r3, r3, #3
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	709a      	strb	r2, [r3, #2]



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    if (msg->unique_id.len > 16) {
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	789b      	ldrb	r3, [r3, #2]
 80008ba:	2b10      	cmp	r3, #16
 80008bc:	d901      	bls.n	80008c2 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x96>
        return true; /* invalid value */
 80008be:	2301      	movs	r3, #1
 80008c0:	e01e      	b.n	8000900 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0xd4>
    }
#pragma GCC diagnostic pop
    for (size_t i=0; i < msg->unique_id.len; i++) {
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	e014      	b.n	80008f2 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0xc6>




        canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->unique_id.data[i]);
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	6819      	ldr	r1, [r3, #0]
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	4413      	add	r3, r2
 80008d2:	3303      	adds	r3, #3
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	2300      	movs	r3, #0
 80008d8:	2208      	movs	r2, #8
 80008da:	68f8      	ldr	r0, [r7, #12]
 80008dc:	f000 fcac 	bl	8001238 <canardDecodeScalar>

        *bit_ofs += 8;
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f103 0208 	add.w	r2, r3, #8
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < msg->unique_id.len; i++) {
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	3301      	adds	r3, #1
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	789b      	ldrb	r3, [r3, #2]
 80008f6:	461a      	mov	r2, r3
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d3e4      	bcc.n	80008c8 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x9c>





    return false; /* success */
 80008fe:	2300      	movs	r3, #0

}
 8000900:	4618      	mov	r0, r3
 8000902:	3718      	adds	r7, #24
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <uavcan_protocol_dynamic_node_id_Allocation_encode>:

uint32_t uavcan_protocol_dynamic_node_id_Allocation_encode(struct uavcan_protocol_dynamic_node_id_Allocation* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MAX_SIZE);
 8000916:	2212      	movs	r2, #18
 8000918:	2100      	movs	r1, #0
 800091a:	6838      	ldr	r0, [r7, #0]
 800091c:	f005 ff3e 	bl	800679c <memset>
    _uavcan_protocol_dynamic_node_id_Allocation_encode(buffer, &bit_ofs, msg, 
 8000920:	f107 010c 	add.w	r1, r7, #12
 8000924:	2301      	movs	r3, #1
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	6838      	ldr	r0, [r7, #0]
 800092a:	f7ff ff26 	bl	800077a <_uavcan_protocol_dynamic_node_id_Allocation_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	3307      	adds	r3, #7
 8000932:	08db      	lsrs	r3, r3, #3
}
 8000934:	4618      	mov	r0, r3
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <uavcan_protocol_dynamic_node_id_Allocation_decode>:

/*
  return true if the decode is invalid
 */
bool uavcan_protocol_dynamic_node_id_Allocation_decode(const CanardRxTransfer* transfer, struct uavcan_protocol_dynamic_node_id_Allocation* msg) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
    if (_uavcan_protocol_dynamic_node_id_Allocation_decode(transfer, &bit_ofs, msg,
 800094a:	f107 0108 	add.w	r1, r7, #8
 800094e:	2301      	movs	r3, #1
 8000950:	683a      	ldr	r2, [r7, #0]
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff ff6a 	bl	800082c <_uavcan_protocol_dynamic_node_id_Allocation_decode>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <uavcan_protocol_dynamic_node_id_Allocation_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 800095e:	2301      	movs	r3, #1
 8000960:	e00c      	b.n	800097c <uavcan_protocol_dynamic_node_id_Allocation_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	3307      	adds	r3, #7
 8000966:	08db      	lsrs	r3, r3, #3
 8000968:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	8a9b      	ldrh	r3, [r3, #20]
 800096e:	461a      	mov	r2, r3
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4293      	cmp	r3, r2
 8000974:	bf14      	ite	ne
 8000976:	2301      	movne	r3, #1
 8000978:	2300      	moveq	r3, #0
 800097a:	b2db      	uxtb	r3, r3
}
 800097c:	4618      	mov	r0, r3
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <_ZL25StaticOnTransferReceptionP14CanardInstanceP16CanardRxTransfer>:

#include "can.hpp"

static void StaticOnTransferReception(CanardInstance* ins, CanardRxTransfer* transfer) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
    CAN* self = static_cast<CAN*>(ins->user_reference);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000992:	60fb      	str	r3, [r7, #12]
    self->CanardOnTransferReception(ins, transfer);
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	68f8      	ldr	r0, [r7, #12]
 800099a:	f000 f8f5 	bl	8000b88 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer>
}
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <_ZL26StaticShouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh>:

static bool StaticShouldAcceptTransfer(const CanardInstance* ins, uint64_t* out_sig, uint16_t id, CanardTransferType type, uint8_t src) {
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af02      	add	r7, sp, #8
 80009ac:	60f8      	str	r0, [r7, #12]
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	4611      	mov	r1, r2
 80009b2:	461a      	mov	r2, r3
 80009b4:	460b      	mov	r3, r1
 80009b6:	80fb      	strh	r3, [r7, #6]
 80009b8:	4613      	mov	r3, r2
 80009ba:	717b      	strb	r3, [r7, #5]

	return static_cast<CAN*>(ins->user_reference)->CanardShouldAcceptTransfer(ins, out_sig, id, type, src);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80009c0:	88fa      	ldrh	r2, [r7, #6]
 80009c2:	7e3b      	ldrb	r3, [r7, #24]
 80009c4:	9301      	str	r3, [sp, #4]
 80009c6:	797b      	ldrb	r3, [r7, #5]
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	4613      	mov	r3, r2
 80009cc:	68ba      	ldr	r2, [r7, #8]
 80009ce:	68f9      	ldr	r1, [r7, #12]
 80009d0:	f000 f89a 	bl	8000b08 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh>
 80009d4:	4603      	mov	r3, r0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <_ZN4ICANC1Ev>:
#pragma once

class ICAN {

protected:
	ICAN() = default;
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	4a04      	ldr	r2, [pc, #16]	@ (80009fc <_ZN4ICANC1Ev+0x1c>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4618      	mov	r0, r3
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	08006904 	.word	0x08006904

08000a00 <_ZN4ICAND1Ev>:

public:
	virtual ~ICAN() = default;
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	4a04      	ldr	r2, [pc, #16]	@ (8000a1c <_ZN4ICAND1Ev+0x1c>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4618      	mov	r0, r3
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	08006904 	.word	0x08006904

08000a20 <_ZN4ICAND0Ev>:
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff ffe9 	bl	8000a00 <_ZN4ICAND1Ev>
 8000a2e:	2104      	movs	r1, #4
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f005 fe9a 	bl	800676a <_ZdlPvj>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <_ZN3CANC1EP19FDCAN_HandleTypeDef>:

CAN::CAN(FDCAN_HandleTypeDef *hfdcan) : hfdcan(hfdcan) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af02      	add	r7, sp, #8
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ffc7 	bl	80009e0 <_ZN4ICANC1Ev>
 8000a52:	4a16      	ldr	r2, [pc, #88]	@ (8000aac <_ZN3CANC1EP19FDCAN_HandleTypeDef+0x6c>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	f883 2c08 	strb.w	r2, [r3, #3080]	@ 0xc08
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	683a      	ldr	r2, [r7, #0]
 8000a64:	f8c3 2c0c 	str.w	r2, [r3, #3084]	@ 0xc0c
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f8c3 2c48 	str.w	r2, [r3, #3144]	@ 0xc48
	static uint8_t canardMemoryPool[1024];

	canardInit(&canard,
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f503 6041 	add.w	r0, r3, #3088	@ 0xc10
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	9301      	str	r3, [sp, #4]
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab0 <_ZN3CANC1EP19FDCAN_HandleTypeDef+0x70>)
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <_ZN3CANC1EP19FDCAN_HandleTypeDef+0x74>)
 8000a80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a84:	490c      	ldr	r1, [pc, #48]	@ (8000ab8 <_ZN3CANC1EP19FDCAN_HandleTypeDef+0x78>)
 8000a86:	f000 fac3 	bl	8001010 <canardInit>
			&StaticOnTransferReception,
			&StaticShouldAcceptTransfer,
			this
	);

	nodeStatus = {0};
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f603 433c 	addw	r3, r3, #3132	@ 0xc3c
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]

	canard.node_id = NODE_ID;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f883 2c10 	strb.w	r2, [r3, #3088]	@ 0xc10
}
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	080068f4 	.word	0x080068f4
 8000ab0:	080009a7 	.word	0x080009a7
 8000ab4:	08000985 	.word	0x08000985
 8000ab8:	200000a0 	.word	0x200000a0

08000abc <_ZN3CAND1Ev>:

CAN::~CAN() {}
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	4a05      	ldr	r2, [pc, #20]	@ (8000adc <_ZN3CAND1Ev+0x20>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff97 	bl	8000a00 <_ZN4ICAND1Ev>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	080068f4 	.word	0x080068f4

08000ae0 <_ZN3CAND0Ev>:
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff ffe7 	bl	8000abc <_ZN3CAND1Ev>
 8000aee:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f005 fe39 	bl	800676a <_ZdlPvj>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	0000      	movs	r0, r0
 8000b04:	0000      	movs	r0, r0
	...

08000b08 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh>:
	const CanardInstance *ins,
	uint64_t *out_data_type_signature,
	uint16_t data_type_id,
	CanardTransferType transfer_type,
	uint8_t source_node_id)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
 8000b14:	807b      	strh	r3, [r7, #2]
	if (transfer_type == CanardTransferTypeRequest) {
 8000b16:	7e3b      	ldrb	r3, [r7, #24]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d124      	bne.n	8000b66 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x5e>
		// check if we want to handle a specific service request
		switch (data_type_id) {
 8000b1c:	887b      	ldrh	r3, [r7, #2]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d004      	beq.n	8000b2c <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x24>
 8000b22:	f240 1255 	movw	r2, #341	@ 0x155
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d01b      	beq.n	8000b62 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x5a>
 8000b2a:	e01c      	b.n	8000b66 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x5e>
			case UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_ID:
			/* case UAVCAN_PROTOCOL_GETNODEINFO_ID: */ {
				if (transfer_type == CanardTransferTypeResponse || transfer_type == CanardTransferTypeRequest) {
 8000b2c:	7e3b      	ldrb	r3, [r7, #24]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d002      	beq.n	8000b38 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x30>
 8000b32:	7e3b      	ldrb	r3, [r7, #24]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d107      	bne.n	8000b48 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x40>
					*out_data_type_signature = UAVCAN_PROTOCOL_GETNODEINFO_REQUEST_SIGNATURE;
 8000b38:	6879      	ldr	r1, [r7, #4]
 8000b3a:	a30f      	add	r3, pc, #60	@ (adr r3, 8000b78 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x70>)
 8000b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b40:	e9c1 2300 	strd	r2, r3, [r1]
					return true;
 8000b44:	2301      	movs	r3, #1
 8000b46:	e00f      	b.n	8000b68 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x60>
				}
				else if (transfer_type == CanardTransferTypeBroadcast) {
 8000b48:	7e3b      	ldrb	r3, [r7, #24]
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d107      	bne.n	8000b5e <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x56>
					*out_data_type_signature = UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_SIGNATURE;
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	a30b      	add	r3, pc, #44	@ (adr r3, 8000b80 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x78>)
 8000b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b56:	e9c1 2300 	strd	r2, r3, [r1]
					return true;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e004      	b.n	8000b68 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x60>
				}
				else {
					return false;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e002      	b.n	8000b68 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x60>
				}
			}
			case UAVCAN_PROTOCOL_NODESTATUS_ID: {
				return true;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e000      	b.n	8000b68 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x60>
			}
		}
	}
	return false;
 8000b66:	2300      	movs	r3, #0
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	f3af 8000 	nop.w
 8000b78:	21c46a9e 	.word	0x21c46a9e
 8000b7c:	ee468a81 	.word	0xee468a81
 8000b80:	20a11d40 	.word	0x20a11d40
 8000b84:	0b2a8126 	.word	0x0b2a8126

08000b88 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer>:

void CAN::CanardOnTransferReception(CanardInstance *ins, CanardRxTransfer *transfer)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
	switch (transfer->data_type_id) {
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	8adb      	ldrh	r3, [r3, #22]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d004      	beq.n	8000ba6 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x1e>
 8000b9c:	f240 1255 	movw	r2, #341	@ 0x155
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d00d      	beq.n	8000bc0 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x38>
			handleNodeStatus(transfer);
			break;
		}
	}

}
 8000ba4:	e012      	b.n	8000bcc <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x44>
			if (transfer->transfer_type == CanardTransferTypeResponse) {
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	7e1b      	ldrb	r3, [r3, #24]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d00d      	beq.n	8000bca <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x42>
			else if (transfer->transfer_type == CanardTransferTypeBroadcast) {
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	7e1b      	ldrb	r3, [r3, #24]
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d109      	bne.n	8000bca <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x42>
				handleNodeAllocation(transfer);
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	f000 f859 	bl	8000c70 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer>
			break;
 8000bbe:	e004      	b.n	8000bca <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x42>
			handleNodeStatus(transfer);
 8000bc0:	6879      	ldr	r1, [r7, #4]
 8000bc2:	68f8      	ldr	r0, [r7, #12]
 8000bc4:	f000 f806 	bl	8000bd4 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer>
			break;
 8000bc8:	e000      	b.n	8000bcc <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x44>
			break;
 8000bca:	bf00      	nop
}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer>:


void CAN::handleNodeStatus(CanardRxTransfer *transfer) {
 8000bd4:	b5b0      	push	{r4, r5, r7, lr}
 8000bd6:	b08a      	sub	sp, #40	@ 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
	uint32_t tick = HAL_GetTick();
 8000bde:	f002 f8db 	bl	8002d98 <HAL_GetTick>
 8000be2:	6278      	str	r0, [r7, #36]	@ 0x24

	canNode node {0};
 8000be4:	f107 0308 	add.w	r3, r7, #8
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
 8000bf4:	615a      	str	r2, [r3, #20]

	node.lastSeenTick = tick;
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	461c      	mov	r4, r3
 8000bfc:	4615      	mov	r5, r2
 8000bfe:	e9c7 4502 	strd	r4, r5, [r7, #8]

	bool success = uavcan_protocol_NodeStatus_decode(transfer, &node.status);
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	3308      	adds	r3, #8
 8000c08:	4619      	mov	r1, r3
 8000c0a:	6838      	ldr	r0, [r7, #0]
 8000c0c:	f7ff fd91 	bl	8000732 <uavcan_protocol_NodeStatus_decode>
 8000c10:	4603      	mov	r3, r0
 8000c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	if (!success) return;
 8000c16:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000c1a:	f083 0301 	eor.w	r3, r3, #1
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d11c      	bne.n	8000c5e <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x8a>

	// Node ID out of bounds or is anonymous
	if (transfer->source_node_id > CANARD_MAX_NODE_ID) return;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	7edb      	ldrb	r3, [r3, #27]
 8000c28:	b25b      	sxtb	r3, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db19      	blt.n	8000c62 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x8e>
	if (transfer->source_node_id == 0) return;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	7edb      	ldrb	r3, [r3, #27]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d017      	beq.n	8000c66 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x92>

	canNodes[transfer->source_node_id] = node;
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	7edb      	ldrb	r3, [r3, #27]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	460b      	mov	r3, r1
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	440b      	add	r3, r1
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	4413      	add	r3, r2
 8000c48:	3308      	adds	r3, #8
 8000c4a:	461d      	mov	r5, r3
 8000c4c:	f107 0408 	add.w	r4, r7, #8
 8000c50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c58:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c5c:	e004      	b.n	8000c68 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x94>
	if (!success) return;
 8000c5e:	bf00      	nop
 8000c60:	e002      	b.n	8000c68 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x94>
	if (transfer->source_node_id > CANARD_MAX_NODE_ID) return;
 8000c62:	bf00      	nop
 8000c64:	e000      	b.n	8000c68 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x94>
	if (transfer->source_node_id == 0) return;
 8000c66:	bf00      	nop
}
 8000c68:	3728      	adds	r7, #40	@ 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000c70 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer>:

void CAN::handleNodeAllocation(CanardRxTransfer *transfer){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b094      	sub	sp, #80	@ 0x50
 8000c74:	af06      	add	r7, sp, #24
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]

	uint8_t first_half_unique_id[8];

 	if (transfer->source_node_id != 0) // the source node is not 0, it is not anonymous
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	7edb      	ldrb	r3, [r3, #27]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d142      	bne.n	8000d08 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0x98>
	{
		return;
	}

    struct uavcan_protocol_dynamic_node_id_Allocation msg = {};
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	f8c3 200f 	str.w	r2, [r3, #15]
	uavcan_protocol_dynamic_node_id_Allocation_decode(transfer, &msg);
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	6838      	ldr	r0, [r7, #0]
 8000c9c:	f7ff fe4e 	bl	800093c <uavcan_protocol_dynamic_node_id_Allocation_decode>

	if (msg.node_id != 0) // the node id is not 0, it is not anonymous
 8000ca0:	7f3b      	ldrb	r3, [r7, #28]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d132      	bne.n	8000d0c <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0x9c>
	{
		return;
	}

	memcpy(first_half_unique_id, msg.unique_id.data, 8);
 8000ca6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000caa:	f107 021f 	add.w	r2, r7, #31
 8000cae:	6810      	ldr	r0, [r2, #0]
 8000cb0:	6851      	ldr	r1, [r2, #4]
 8000cb2:	c303      	stmia	r3!, {r0, r1}

	// Generate the node id and allocate it
	msg.node_id = allocateNode();
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f000 f833 	bl	8000d20 <_ZN3CAN12allocateNodeEv>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	773b      	strb	r3, [r7, #28]

	if (msg.node_id == -1){
		return;
	}

	msg = {};
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	f8c3 200f 	str.w	r2, [r3, #15]

	// Send message back
	uint8_t decode_buffer[UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MAX_SIZE];
	uavcan_protocol_dynamic_node_id_Allocation_encode(&msg, decode_buffer);
 8000cd2:	f107 0208 	add.w	r2, r7, #8
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fe13 	bl	8000908 <uavcan_protocol_dynamic_node_id_Allocation_encode>


	broadcast(
 8000ce2:	2312      	movs	r3, #18
 8000ce4:	9304      	str	r3, [sp, #16]
 8000ce6:	f107 0308 	add.w	r3, r7, #8
 8000cea:	9303      	str	r3, [sp, #12]
 8000cec:	2318      	movs	r3, #24
 8000cee:	9302      	str	r3, [sp, #8]
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	9301      	str	r3, [sp, #4]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	a307      	add	r3, pc, #28	@ (adr r3, 8000d18 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0xa8>)
 8000cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cfe:	2100      	movs	r1, #0
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f000 f95e 	bl	8000fc2 <_ZN3CAN9broadcastE18CanardTransferTypeytPhhPKht>
 8000d06:	e002      	b.n	8000d0e <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0x9e>
		return;
 8000d08:	bf00      	nop
 8000d0a:	e000      	b.n	8000d0e <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0x9e>
		return;
 8000d0c:	bf00      	nop
		CANARD_TRANSFER_PRIORITY_LOW,
		decode_buffer,
		sizeof(decode_buffer)
	);

}
 8000d0e:	3738      	adds	r7, #56	@ 0x38
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	f3af 8000 	nop.w
 8000d18:	20a11d40 	.word	0x20a11d40
 8000d1c:	0b2a8126 	.word	0x0b2a8126

08000d20 <_ZN3CAN12allocateNodeEv>:

int8_t CAN::allocateNode() {
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	// check if the node id is already allocated
	int currId = nextAvailableID;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f893 3c08 	ldrb.w	r3, [r3, #3080]	@ 0xc08
 8000d2e:	60fb      	str	r3, [r7, #12]

	if (currId > CANARD_MAX_NODE_ID) {
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d34:	dd02      	ble.n	8000d3c <_ZN3CAN12allocateNodeEv+0x1c>
		return -1; // no more node ids available
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	e009      	b.n	8000d50 <_ZN3CAN12allocateNodeEv+0x30>
	}

	nextAvailableID++;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f893 3c08 	ldrb.w	r3, [r3, #3080]	@ 0xc08
 8000d42:	3301      	adds	r3, #1
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f883 2c08 	strb.w	r2, [r3, #3080]	@ 0xc08

	return currId;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	b25b      	sxtb	r3, r3
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <_ZN3CAN9sendCANTxEv>:
/*
Function to convert all canard CAN frames and send them through HAL

Consider removing for loop
*/
void CAN::sendCANTx() {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08e      	sub	sp, #56	@ 0x38
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	CanardCANFrame* frame = canardPeekTxQueue(&canard);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f503 6341 	add.w	r3, r3, #3088	@ 0xc10
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 fa3c 	bl	80011e8 <canardPeekTxQueue>
 8000d70:	6378      	str	r0, [r7, #52]	@ 0x34
	if (frame == nullptr) return;
 8000d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d03b      	beq.n	8000df0 <_ZN3CAN9sendCANTxEv+0x94>

	if (HAL_FDCAN_GetTxFifoFreeLevel(hfdcan) > 0) {
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	@ 0xc0c
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f002 fcce 	bl	8003720 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	bf14      	ite	ne
 8000d8a:	2301      	movne	r3, #1
 8000d8c:	2300      	moveq	r3, #0
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d02e      	beq.n	8000df2 <_ZN3CAN9sendCANTxEv+0x96>
		FDCAN_TxHeaderTypeDef txHeader;

		txHeader.Identifier = frame->id;
 8000d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	60bb      	str	r3, [r7, #8]
		txHeader.IdType = FDCAN_EXTENDED_ID;
 8000d9a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d9e:	60fb      	str	r3, [r7, #12]
		txHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000da0:	2300      	movs	r3, #0
 8000da2:	613b      	str	r3, [r7, #16]
		txHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000da4:	2308      	movs	r3, #8
 8000da6:	617b      	str	r3, [r7, #20]
		txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61bb      	str	r3, [r7, #24]
		txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
		txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]

		const uint8_t *txData = frame->data;
 8000db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000db6:	3304      	adds	r3, #4
 8000db8:	633b      	str	r3, [r7, #48]	@ 0x30

		bool success = HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &txHeader, txData) == HAL_OK;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	@ 0xc0c
 8000dc0:	f107 0108 	add.w	r1, r7, #8
 8000dc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f002 fb5e 	bl	8003488 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	bf0c      	ite	eq
 8000dd2:	2301      	moveq	r3, #1
 8000dd4:	2300      	movne	r3, #0
 8000dd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		if (success) {
 8000dda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d007      	beq.n	8000df2 <_ZN3CAN9sendCANTxEv+0x96>
			canardPopTxQueue(&canard);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f503 6341 	add.w	r3, r3, #3088	@ 0xc10
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 fa10 	bl	800120e <canardPopTxQueue>
 8000dee:	e000      	b.n	8000df2 <_ZN3CAN9sendCANTxEv+0x96>
	if (frame == nullptr) return;
 8000df0:	bf00      	nop
		}
	}

}
 8000df2:	3738      	adds	r7, #56	@ 0x38
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <_ZN3CAN12routineTasksEv>:

bool CAN::routineTasks() {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	sendCANTx();
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ffab 	bl	8000d5c <_ZN3CAN9sendCANTxEv>

	uint32_t tick = HAL_GetTick();
 8000e06:	f001 ffc7 	bl	8002d98 <HAL_GetTick>
 8000e0a:	60f8      	str	r0, [r7, #12]

	if (tick > last1HzTick + UAVCAN_PROTOCOL_NODESTATUS_MAX_BROADCASTING_PERIOD_MS/2) {
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f8d3 3c48 	ldr.w	r3, [r3, #3144]	@ 0xc48
 8000e12:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d906      	bls.n	8000e2a <_ZN3CAN12routineTasksEv+0x32>
		last1HzTick = tick;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	f8c3 2c48 	str.w	r2, [r3, #3144]	@ 0xc48
		process1HzTasks();
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f000 f873 	bl	8000f10 <_ZN3CAN15process1HzTasksEv>
	}

	return true;
 8000e2a:	2301      	movs	r3, #1
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	0000      	movs	r0, r0
	...

08000e38 <_ZN3CAN14sendNodeStatusEv>:

void CAN::sendNodeStatus() {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b0e8      	sub	sp, #416	@ 0x1a0
 8000e3c:	af06      	add	r7, sp, #24
 8000e3e:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000e42:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000e46:	6018      	str	r0, [r3, #0]
	uint8_t buffer[UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE];

    nodeStatus.uptime_sec = HAL_GetTick()/1000LL;
 8000e48:	f001 ffa6 	bl	8002d98 <HAL_GetTick>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	4a2e      	ldr	r2, [pc, #184]	@ (8000f08 <_ZN3CAN14sendNodeStatusEv+0xd0>)
 8000e50:	fba2 2303 	umull	r2, r3, r2, r3
 8000e54:	099a      	lsrs	r2, r3, #6
 8000e56:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000e5a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f8c3 2c3c 	str.w	r2, [r3, #3132]	@ 0xc3c
    nodeStatus.health = UAVCAN_PROTOCOL_NODESTATUS_HEALTH_OK;
 8000e64:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000e68:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 2c40 	strb.w	r2, [r3, #3136]	@ 0xc40
    nodeStatus.mode = UAVCAN_PROTOCOL_NODESTATUS_MODE_OPERATIONAL;
 8000e74:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000e78:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2c41 	strb.w	r2, [r3, #3137]	@ 0xc41
    nodeStatus.sub_mode = 0;
 8000e84:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000e88:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 2c42 	strb.w	r2, [r3, #3138]	@ 0xc42
    // put whatever you like in here for display in GUI
    nodeStatus.vendor_specific_status_code = 1234;
 8000e94:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000e98:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f240 42d2 	movw	r2, #1234	@ 0x4d2
 8000ea2:	f8a3 2c44 	strh.w	r2, [r3, #3140]	@ 0xc44

    uint32_t len = uavcan_protocol_NodeStatus_encode(&nodeStatus, buffer);
 8000ea6:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000eaa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f603 433c 	addw	r3, r3, #3132	@ 0xc3c
 8000eb4:	f107 0208 	add.w	r2, r7, #8
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fc1f 	bl	80006fe <uavcan_protocol_NodeStatus_encode>
 8000ec0:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
    // incremeneted on each transfer, allowing for detection of packet
    // loss
    static uint8_t transfer_id;


    broadcast(CanardTransferTypeBroadcast,
 8000ec4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
 8000ece:	f5a2 70c2 	sub.w	r0, r2, #388	@ 0x184
 8000ed2:	9304      	str	r3, [sp, #16]
 8000ed4:	f107 0308 	add.w	r3, r7, #8
 8000ed8:	9303      	str	r3, [sp, #12]
 8000eda:	2318      	movs	r3, #24
 8000edc:	9302      	str	r3, [sp, #8]
 8000ede:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <_ZN3CAN14sendNodeStatusEv+0xd4>)
 8000ee0:	9301      	str	r3, [sp, #4]
 8000ee2:	f240 1355 	movw	r3, #341	@ 0x155
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	a305      	add	r3, pc, #20	@ (adr r3, 8000f00 <_ZN3CAN14sendNodeStatusEv+0xc8>)
 8000eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eee:	2102      	movs	r1, #2
 8000ef0:	6800      	ldr	r0, [r0, #0]
 8000ef2:	f000 f866 	bl	8000fc2 <_ZN3CAN9broadcastE18CanardTransferTypeytPhhPKht>
			&transfer_id,
			CANARD_TRANSFER_PRIORITY_LOW,
			buffer,
			len
	);
}
 8000ef6:	bf00      	nop
 8000ef8:	f507 77c4 	add.w	r7, r7, #392	@ 0x188
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	c1a7c6f1 	.word	0xc1a7c6f1
 8000f04:	0f0868d0 	.word	0x0f0868d0
 8000f08:	10624dd3 	.word	0x10624dd3
 8000f0c:	200004a0 	.word	0x200004a0

08000f10 <_ZN3CAN15process1HzTasksEv>:

void CAN::process1HzTasks() {
 8000f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f14:	b08b      	sub	sp, #44	@ 0x2c
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]

	uint32_t timestamp_msec = HAL_GetTick();
 8000f1a:	f001 ff3d 	bl	8002d98 <HAL_GetTick>
 8000f1e:	6238      	str	r0, [r7, #32]

	// Check if nodes invalid
	for (int i = CANARD_MIN_NODE_ID; i <= CANARD_MAX_NODE_ID; i++) {
 8000f20:	2301      	movs	r3, #1
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f24:	e02e      	b.n	8000f84 <_ZN3CAN15process1HzTasksEv+0x74>
		// Make copy of status in case it changes
		canNode node = canNodes[i];
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	4413      	add	r3, r2
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	440b      	add	r3, r1
 8000f34:	3308      	adds	r3, #8
 8000f36:	f107 0608 	add.w	r6, r7, #8
 8000f3a:	469c      	mov	ip, r3
 8000f3c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000f40:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f42:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8000f46:	e886 0003 	stmia.w	r6, {r0, r1}

		if (timestamp_msec-node.lastSeenTick > UAVCAN_PROTOCOL_NODESTATUS_OFFLINE_TIMEOUT_MS) {
 8000f4a:	6a3b      	ldr	r3, [r7, #32]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	4698      	mov	r8, r3
 8000f50:	4691      	mov	r9, r2
 8000f52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f56:	ebb8 0402 	subs.w	r4, r8, r2
 8000f5a:	eb69 0503 	sbc.w	r5, r9, r3
 8000f5e:	f640 33b9 	movw	r3, #3001	@ 0xbb9
 8000f62:	429c      	cmp	r4, r3
 8000f64:	f175 0300 	sbcs.w	r3, r5, #0
 8000f68:	d309      	bcc.n	8000f7e <_ZN3CAN15process1HzTasksEv+0x6e>
			canNodes[i].status.mode = UAVCAN_PROTOCOL_NODESTATUS_MODE_OFFLINE;
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f6e:	4613      	mov	r3, r2
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	4413      	add	r3, r2
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	440b      	add	r3, r1
 8000f78:	3315      	adds	r3, #21
 8000f7a:	2207      	movs	r2, #7
 8000f7c:	701a      	strb	r2, [r3, #0]
	for (int i = CANARD_MIN_NODE_ID; i <= CANARD_MAX_NODE_ID; i++) {
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f80:	3301      	adds	r3, #1
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f86:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f88:	ddcd      	ble.n	8000f26 <_ZN3CAN15process1HzTasksEv+0x16>
		}
	}

	// Transmit NodeStatus
	sendNodeStatus();
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ff54 	bl	8000e38 <_ZN3CAN14sendNodeStatusEv>
}
 8000f90:	bf00      	nop
 8000f92:	372c      	adds	r7, #44	@ 0x2c
 8000f94:	46bd      	mov	sp, r7
 8000f96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000f9a <_ZN3CAN12broadcastObjEP16CanardTxTransfer>:


/*
Wrapper function with mutex
*/
int16_t CAN::broadcastObj(CanardTxTransfer* transfer) {
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b084      	sub	sp, #16
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	6039      	str	r1, [r7, #0]

//	if (status != osOK){
//		return -1; // handle failure
//	}

	int16_t res = canardBroadcastObj(&canard, transfer);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f503 6341 	add.w	r3, r3, #3088	@ 0xc10
 8000faa:	6839      	ldr	r1, [r7, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 f86f 	bl	8001090 <canardBroadcastObj>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	81fb      	strh	r3, [r7, #14]
//	osMutexRelease(canBroadcastMutex);

	return res;
 8000fb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_ZN3CAN9broadcastE18CanardTransferTypeytPhhPKht>:
	#endif
	#if CANARD_ENABLE_TAO_OPTION
		, bool tao; ///< True if tail array optimization is enabled
	#endif
)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b08e      	sub	sp, #56	@ 0x38
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	e9c7 2300 	strd	r2, r3, [r7]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	72fb      	strb	r3, [r7, #11]
			iface_mask = iface_mask, ///< Bitmask of interfaces to send the transfer on
		#endif
		#if CANARD_ENABLE_TAO_OPTION
			tao = tao, ///< True if tail array optimization is enabled
		#endif
	};
 8000fd2:	7afb      	ldrb	r3, [r7, #11]
 8000fd4:	743b      	strb	r3, [r7, #16]
 8000fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fda:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000fde:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000fe2:	843b      	strh	r3, [r7, #32]
 8000fe4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fe8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000fec:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000ff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ff4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8000ff8:	863b      	strh	r3, [r7, #48]	@ 0x30

	return broadcastObj(&transfer_object);
 8000ffa:	f107 0310 	add.w	r3, r7, #16
 8000ffe:	4619      	mov	r1, r3
 8001000:	68f8      	ldr	r0, [r7, #12]
 8001002:	f7ff ffca 	bl	8000f9a <_ZN3CAN12broadcastObjEP16CanardTxTransfer>
 8001006:	4603      	mov	r3, r0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3738      	adds	r7, #56	@ 0x38
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <canardInit>:
                 void* mem_arena,
                 size_t mem_arena_size,
                 CanardOnTransferReception on_reception,
                 CanardShouldAcceptTransfer should_accept,
                 void* user_reference)
 {
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
 800101c:	603b      	str	r3, [r7, #0]
      * If your application fails here, make sure it's not built in 64-bit mode.
      * Refer to the design documentation for more info.
      */
     CANARD_ASSERT(CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE >= 5);

     memset(out_ins, 0, sizeof(*out_ins));
 800101e:	222c      	movs	r2, #44	@ 0x2c
 8001020:	2100      	movs	r1, #0
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f005 fbba 	bl	800679c <memset>

     out_ins->node_id = CANARD_BROADCAST_NODE_ID;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
     out_ins->on_reception = on_reception;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	609a      	str	r2, [r3, #8]
     out_ins->should_accept = should_accept;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6a3a      	ldr	r2, [r7, #32]
 8001038:	605a      	str	r2, [r3, #4]
     out_ins->rx_states = NULL;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2200      	movs	r2, #0
 800103e:	621a      	str	r2, [r3, #32]
     out_ins->tx_queue = NULL;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2200      	movs	r2, #0
 8001044:	625a      	str	r2, [r3, #36]	@ 0x24
     out_ins->user_reference = user_reference;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800104a:	629a      	str	r2, [r3, #40]	@ 0x28
 #if CANARD_ENABLE_TAO_OPTION
     out_ins->tao_disabled = false;
 #endif
     size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	617b      	str	r3, [r7, #20]
     if (pool_capacity > 0xFFFFU)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001058:	d302      	bcc.n	8001060 <canardInit+0x50>
     {
         pool_capacity = 0xFFFFU;
 800105a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800105e:	617b      	str	r3, [r7, #20]
     }

     initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	330c      	adds	r3, #12
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	b292      	uxth	r2, r2
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	4618      	mov	r0, r3
 800106c:	f000 ff6f 	bl	8001f4e <initPoolAllocator>
 }
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <canardGetLocalNodeID>:
         CANARD_ASSERT(false);
     }
 }

 uint8_t canardGetLocalNodeID(const CanardInstance* ins)
 {
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
     return ins->node_id;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	781b      	ldrb	r3, [r3, #0]
 }
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <canardBroadcastObj>:

     return canardBroadcastObj(ins, &transfer_object);
 }

 int16_t canardBroadcastObj(CanardInstance* ins, CanardTxTransfer* transfer_object)
 {
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b087      	sub	sp, #28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
     if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d106      	bne.n	80010b0 <canardBroadcastObj+0x20>
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	8c1b      	ldrh	r3, [r3, #32]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d002      	beq.n	80010b0 <canardBroadcastObj+0x20>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 80010aa:	f06f 0301 	mvn.w	r3, #1
 80010ae:	e070      	b.n	8001192 <canardBroadcastObj+0x102>
     }
     if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	7e1b      	ldrb	r3, [r3, #24]
 80010b4:	2b1f      	cmp	r3, #31
 80010b6:	d902      	bls.n	80010be <canardBroadcastObj+0x2e>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 80010b8:	f06f 0301 	mvn.w	r3, #1
 80010bc:	e069      	b.n	8001192 <canardBroadcastObj+0x102>
     }

     uint32_t can_id = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
     uint16_t crc = 0xFFFFU;
 80010c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010c6:	827b      	strh	r3, [r7, #18]

     if (canardGetLocalNodeID(ins) == 0)
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ffd5 	bl	8001078 <canardGetLocalNodeID>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d138      	bne.n	8001146 <canardBroadcastObj+0xb6>
     {
         if (transfer_object->payload_len > 7)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	8c1b      	ldrh	r3, [r3, #32]
 80010d8:	2b07      	cmp	r3, #7
 80010da:	d902      	bls.n	80010e2 <canardBroadcastObj+0x52>
         {
             return -CANARD_ERROR_NODE_ID_NOT_SET;
 80010dc:	f06f 0303 	mvn.w	r3, #3
 80010e0:	e057      	b.n	8001192 <canardBroadcastObj+0x102>
         }

         static const uint16_t DTIDMask = (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;

         if ((transfer_object->data_type_id & DTIDMask) != transfer_object->data_type_id)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	8a1a      	ldrh	r2, [r3, #16]
 80010e6:	4b2d      	ldr	r3, [pc, #180]	@ (800119c <canardBroadcastObj+0x10c>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	4013      	ands	r3, r2
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	8a1b      	ldrh	r3, [r3, #16]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d002      	beq.n	80010fc <canardBroadcastObj+0x6c>
         {
             return -CANARD_ERROR_INVALID_ARGUMENT;
 80010f6:	f06f 0301 	mvn.w	r3, #1
 80010fa:	e04a      	b.n	8001192 <canardBroadcastObj+0x102>
         }

         // anonymous transfer, random discriminator
         const uint16_t discriminator = (uint16_t)((crcAdd(0xFFFFU, transfer_object->payload, transfer_object->payload_len)) & 0x7FFEU);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	69d9      	ldr	r1, [r3, #28]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	8c1b      	ldrh	r3, [r3, #32]
 8001104:	461a      	mov	r2, r3
 8001106:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800110a:	f000 ff03 	bl	8001f14 <crcAdd>
 800110e:	4603      	mov	r3, r0
 8001110:	461a      	mov	r2, r3
 8001112:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 8001116:	4013      	ands	r3, r2
 8001118:	823b      	strh	r3, [r7, #16]
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	7e1b      	ldrb	r3, [r3, #24]
 800111e:	061a      	lsls	r2, r3, #24
 8001120:	8a3b      	ldrh	r3, [r7, #16]
 8001122:	025b      	lsls	r3, r3, #9
 8001124:	431a      	orrs	r2, r3
                  ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	8a19      	ldrh	r1, [r3, #16]
 800112a:	4b1c      	ldr	r3, [pc, #112]	@ (800119c <canardBroadcastObj+0x10c>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	400b      	ands	r3, r1
 8001130:	b29b      	uxth	r3, r3
 8001132:	021b      	lsls	r3, r3, #8
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8001134:	ea42 0403 	orr.w	r4, r2, r3
                  ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff9d 	bl	8001078 <canardGetLocalNodeID>
 800113e:	4603      	mov	r3, r0
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8001140:	4323      	orrs	r3, r4
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	e012      	b.n	800116c <canardBroadcastObj+0xdc>
     }
     else
     {
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	7e1b      	ldrb	r3, [r3, #24]
 800114a:	061a      	lsls	r2, r3, #24
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	8a1b      	ldrh	r3, [r3, #16]
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	ea42 0403 	orr.w	r4, r2, r3
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ff8e 	bl	8001078 <canardGetLocalNodeID>
 800115c:	4603      	mov	r3, r0
 800115e:	4323      	orrs	r3, r4
 8001160:	617b      	str	r3, [r7, #20]
         crc = calculateCRC(transfer_object);
 8001162:	6838      	ldr	r0, [r7, #0]
 8001164:	f000 f81c 	bl	80011a0 <calculateCRC>
 8001168:	4603      	mov	r3, r0
 800116a:	827b      	strh	r3, [r7, #18]
     }

     const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 800116c:	8a7a      	ldrh	r2, [r7, #18]
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	6979      	ldr	r1, [r7, #20]
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 fadb 	bl	800172e <enqueueTxFrames>
 8001178:	4603      	mov	r3, r0
 800117a:	81fb      	strh	r3, [r7, #14]

     if (result > 0) {
 800117c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001180:	2b00      	cmp	r3, #0
 8001182:	dd04      	ble.n	800118e <canardBroadcastObj+0xfe>
         incrementTransferID(transfer_object->inout_transfer_id);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	4618      	mov	r0, r3
 800118a:	f000 fa5b 	bl	8001644 <incrementTransferID>
     }

     return result;
 800118e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 }
 8001192:	4618      	mov	r0, r3
 8001194:	371c      	adds	r7, #28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd90      	pop	{r4, r7, pc}
 800119a:	bf00      	nop
 800119c:	0800690c 	.word	0x0800690c

080011a0 <calculateCRC>:
     return (canard_buffer_idx_t)rx;
 #endif
 }

 CANARD_INTERNAL uint16_t calculateCRC(const CanardTxTransfer* transfer_object)
 {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
     uint16_t crc = 0xFFFFU;
 80011a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011ac:	81fb      	strh	r3, [r7, #14]
 #if CANARD_ENABLE_CANFD
     if ((transfer_object->payload_len > 7 && !transfer_object->canfd) ||
         (transfer_object->payload_len > 63 && transfer_object->canfd))
 #else
     if (transfer_object->payload_len > 7)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	8c1b      	ldrh	r3, [r3, #32]
 80011b2:	2b07      	cmp	r3, #7
 80011b4:	d913      	bls.n	80011de <calculateCRC+0x3e>
 #endif
     {
         crc = crcAddSignature(crc, transfer_object->data_type_signature);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80011bc:	89f9      	ldrh	r1, [r7, #14]
 80011be:	4608      	mov	r0, r1
 80011c0:	f000 fe79 	bl	8001eb6 <crcAddSignature>
 80011c4:	4603      	mov	r3, r0
 80011c6:	81fb      	strh	r3, [r7, #14]
         crc = crcAdd(crc, transfer_object->payload, transfer_object->payload_len);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69d9      	ldr	r1, [r3, #28]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	8c1b      	ldrh	r3, [r3, #32]
 80011d0:	461a      	mov	r2, r3
 80011d2:	89fb      	ldrh	r3, [r7, #14]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 fe9d 	bl	8001f14 <crcAdd>
 80011da:	4603      	mov	r3, r0
 80011dc:	81fb      	strh	r3, [r7, #14]
                 crc = crcAddByte(crc, empty);
             }
         }
 #endif
     }
     return crc;
 80011de:	89fb      	ldrh	r3, [r7, #14]
 }
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <canardPeekTxQueue>:

     return result;
 }

 CanardCANFrame* canardPeekTxQueue(const CanardInstance* ins)
 {
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
     if (ins->tx_queue == NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d101      	bne.n	80011fc <canardPeekTxQueue+0x14>
     {
         return NULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	e002      	b.n	8001202 <canardPeekTxQueue+0x1a>
     }
     return &ins->tx_queue->frame;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001200:	3304      	adds	r3, #4
 }
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <canardPopTxQueue>:

 void canardPopTxQueue(CanardInstance* ins)
 {
 800120e:	b580      	push	{r7, lr}
 8001210:	b084      	sub	sp, #16
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
     CanardTxQueueItem* item = ins->tx_queue;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121a:	60fb      	str	r3, [r7, #12]
     ins->tx_queue = item->next;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	625a      	str	r2, [r3, #36]	@ 0x24
     freeBlock(&ins->allocator, item);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	330c      	adds	r3, #12
 8001228:	68f9      	ldr	r1, [r7, #12]
 800122a:	4618      	mov	r0, r3
 800122c:	f000 feef 	bl	800200e <freeBlock>
 }
 8001230:	bf00      	nop
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <canardDecodeScalar>:
 int16_t canardDecodeScalar(const CanardRxTransfer* transfer,
                            uint32_t bit_offset,
                            uint8_t bit_length,
                            bool value_is_signed,
                            void* out_value)
 {
 8001238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800123c:	b08d      	sub	sp, #52	@ 0x34
 800123e:	af00      	add	r7, sp, #0
 8001240:	61f8      	str	r0, [r7, #28]
 8001242:	61b9      	str	r1, [r7, #24]
 8001244:	4611      	mov	r1, r2
 8001246:	461a      	mov	r2, r3
 8001248:	460b      	mov	r3, r1
 800124a:	75fb      	strb	r3, [r7, #23]
 800124c:	4613      	mov	r3, r2
 800124e:	75bb      	strb	r3, [r7, #22]
     if (transfer == NULL || out_value == NULL)
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d002      	beq.n	800125c <canardDecodeScalar+0x24>
 8001256:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <canardDecodeScalar+0x2a>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 800125c:	f06f 0301 	mvn.w	r3, #1
 8001260:	e16e      	b.n	8001540 <canardDecodeScalar+0x308>
     }

     if (bit_length < 1 || bit_length > 64)
 8001262:	7dfb      	ldrb	r3, [r7, #23]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <canardDecodeScalar+0x36>
 8001268:	7dfb      	ldrb	r3, [r7, #23]
 800126a:	2b40      	cmp	r3, #64	@ 0x40
 800126c:	d902      	bls.n	8001274 <canardDecodeScalar+0x3c>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 800126e:	f06f 0301 	mvn.w	r3, #1
 8001272:	e165      	b.n	8001540 <canardDecodeScalar+0x308>
     }

     if (bit_length == 1 && value_is_signed)
 8001274:	7dfb      	ldrb	r3, [r7, #23]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d105      	bne.n	8001286 <canardDecodeScalar+0x4e>
 800127a:	7dbb      	ldrb	r3, [r7, #22]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <canardDecodeScalar+0x4e>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 8001280:	f06f 0301 	mvn.w	r3, #1
 8001284:	e15c      	b.n	8001540 <canardDecodeScalar+0x308>
         uint64_t u64;
         int64_t  s64;           ///< Also double, possibly float, possibly long double (depends on implementation)
         uint8_t bytes[8];
     } storage;

     memset(&storage, 0, sizeof(storage));   // This is important
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	2208      	movs	r2, #8
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f005 fa84 	bl	800679c <memset>

     const int16_t result = descatterTransferPayload(transfer, bit_offset, bit_length, &storage.bytes[0]);
 8001294:	f107 0320 	add.w	r3, r7, #32
 8001298:	7dfa      	ldrb	r2, [r7, #23]
 800129a:	69b9      	ldr	r1, [r7, #24]
 800129c:	69f8      	ldr	r0, [r7, #28]
 800129e:	f000 fca5 	bl	8001bec <descatterTransferPayload>
 80012a2:	4603      	mov	r3, r0
 80012a4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
     if (result <= 0)
 80012a6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	dc02      	bgt.n	80012b4 <canardDecodeScalar+0x7c>
     {
         return result;
 80012ae:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80012b2:	e145      	b.n	8001540 <canardDecodeScalar+0x308>
      * The bit copy algorithm assumes that more significant bits have lower index, so we need to shift some.
      * Extra most significant bits will be filled with zeroes, which is fine.
      * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
      * not be taken if bit_length == 64, because 64 % 8 == 0.
      */
     if ((bit_length % 8) != 0)
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d018      	beq.n	80012f2 <canardDecodeScalar+0xba>
     {
         // coverity[overrun-local]
         storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] >> ((8U - (bit_length % 8U)) & 7U));
 80012c0:	7dfb      	ldrb	r3, [r7, #23]
 80012c2:	08db      	lsrs	r3, r3, #3
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	3320      	adds	r3, #32
 80012c8:	f107 0210 	add.w	r2, r7, #16
 80012cc:	4413      	add	r3, r2
 80012ce:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80012d2:	461a      	mov	r2, r3
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	425b      	negs	r3, r3
 80012d8:	f003 0307 	and.w	r3, r3, #7
 80012dc:	411a      	asrs	r2, r3
 80012de:	7dfb      	ldrb	r3, [r7, #23]
 80012e0:	08db      	lsrs	r3, r3, #3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	3320      	adds	r3, #32
 80012e8:	f107 0110 	add.w	r1, r7, #16
 80012ec:	440b      	add	r3, r1
 80012ee:	f803 2c10 	strb.w	r2, [r3, #-16]
     }

     /*
      * Determining the closest standard byte length - this will be needed for byte reordering and sign bit extension.
      */
     uint8_t std_byte_length = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
     if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d103      	bne.n	8001306 <canardDecodeScalar+0xce>
 80012fe:	2301      	movs	r3, #1
 8001300:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001304:	e01e      	b.n	8001344 <canardDecodeScalar+0x10c>
     else if (bit_length <= 8)   { std_byte_length = 1; }
 8001306:	7dfb      	ldrb	r3, [r7, #23]
 8001308:	2b08      	cmp	r3, #8
 800130a:	d803      	bhi.n	8001314 <canardDecodeScalar+0xdc>
 800130c:	2301      	movs	r3, #1
 800130e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001312:	e017      	b.n	8001344 <canardDecodeScalar+0x10c>
     else if (bit_length <= 16)  { std_byte_length = 2; }
 8001314:	7dfb      	ldrb	r3, [r7, #23]
 8001316:	2b10      	cmp	r3, #16
 8001318:	d803      	bhi.n	8001322 <canardDecodeScalar+0xea>
 800131a:	2302      	movs	r3, #2
 800131c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001320:	e010      	b.n	8001344 <canardDecodeScalar+0x10c>
     else if (bit_length <= 32)  { std_byte_length = 4; }
 8001322:	7dfb      	ldrb	r3, [r7, #23]
 8001324:	2b20      	cmp	r3, #32
 8001326:	d803      	bhi.n	8001330 <canardDecodeScalar+0xf8>
 8001328:	2304      	movs	r3, #4
 800132a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800132e:	e009      	b.n	8001344 <canardDecodeScalar+0x10c>
     else if (bit_length <= 64)  { std_byte_length = 8; }
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	2b40      	cmp	r3, #64	@ 0x40
 8001334:	d803      	bhi.n	800133e <canardDecodeScalar+0x106>
 8001336:	2308      	movs	r3, #8
 8001338:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800133c:	e002      	b.n	8001344 <canardDecodeScalar+0x10c>
     else
     {
         CANARD_ASSERT(false);
         return -CANARD_ERROR_INTERNAL;
 800133e:	f06f 0308 	mvn.w	r3, #8
 8001342:	e0fd      	b.n	8001540 <canardDecodeScalar+0x308>
     CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));

     /*
      * Flipping the byte order if needed.
      */
     if (isBigEndian())
 8001344:	f000 fd47 	bl	8001dd6 <isBigEndian>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d007      	beq.n	800135e <canardDecodeScalar+0x126>
     {
         swapByteOrder(&storage.bytes[0], std_byte_length);
 800134e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001352:	f107 0320 	add.w	r3, r7, #32
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f000 fd4d 	bl	8001df8 <swapByteOrder>

     /*
      * Extending the sign bit if needed. I miss templates.
      * Note that we operate on unsigned values in order to avoid undefined behaviors.
      */
     if (value_is_signed && (std_byte_length * 8 != bit_length))
 800135e:	7dbb      	ldrb	r3, [r7, #22]
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 809b 	beq.w	800149c <canardDecodeScalar+0x264>
 8001366:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800136a:	00da      	lsls	r2, r3, #3
 800136c:	7dfb      	ldrb	r3, [r7, #23]
 800136e:	429a      	cmp	r2, r3
 8001370:	f000 8094 	beq.w	800149c <canardDecodeScalar+0x264>
     {
         if (bit_length <= 8)
 8001374:	7dfb      	ldrb	r3, [r7, #23]
 8001376:	2b08      	cmp	r3, #8
 8001378:	d819      	bhi.n	80013ae <canardDecodeScalar+0x176>
         {
             if ((storage.u8 & (1U << (bit_length - 1U))) != 0)                           // If the sign bit is set...
 800137a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800137e:	461a      	mov	r2, r3
 8001380:	7dfb      	ldrb	r3, [r7, #23]
 8001382:	3b01      	subs	r3, #1
 8001384:	fa22 f303 	lsr.w	r3, r2, r3
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 8085 	beq.w	800149c <canardDecodeScalar+0x264>
             {
                 storage.u8 |= (uint8_t) 0xFFU & (uint8_t) ~((1U << bit_length) - 1U);   // ...set all bits above it.
 8001392:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001396:	7dfb      	ldrb	r3, [r7, #23]
 8001398:	2101      	movs	r1, #1
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	425b      	negs	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4313      	orrs	r3, r2
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	f887 3020 	strb.w	r3, [r7, #32]
 80013ac:	e076      	b.n	800149c <canardDecodeScalar+0x264>
             }
         }
         else if (bit_length <= 16)
 80013ae:	7dfb      	ldrb	r3, [r7, #23]
 80013b0:	2b10      	cmp	r3, #16
 80013b2:	d815      	bhi.n	80013e0 <canardDecodeScalar+0x1a8>
         {
             if ((storage.u16 & (1U << (bit_length - 1U))) != 0)
 80013b4:	8c3b      	ldrh	r3, [r7, #32]
 80013b6:	461a      	mov	r2, r3
 80013b8:	7dfb      	ldrb	r3, [r7, #23]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	fa22 f303 	lsr.w	r3, r2, r3
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d069      	beq.n	800149c <canardDecodeScalar+0x264>
             {
                 storage.u16 |= (uint16_t) 0xFFFFU & (uint16_t) ~((1U << bit_length) - 1U);
 80013c8:	8c3a      	ldrh	r2, [r7, #32]
 80013ca:	7dfb      	ldrb	r3, [r7, #23]
 80013cc:	2101      	movs	r1, #1
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	425b      	negs	r3, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4313      	orrs	r3, r2
 80013da:	b29b      	uxth	r3, r3
 80013dc:	843b      	strh	r3, [r7, #32]
 80013de:	e05d      	b.n	800149c <canardDecodeScalar+0x264>
             }
         }
         else if (bit_length <= 32)
 80013e0:	7dfb      	ldrb	r3, [r7, #23]
 80013e2:	2b20      	cmp	r3, #32
 80013e4:	d811      	bhi.n	800140a <canardDecodeScalar+0x1d2>
         {
             if ((storage.u32 & (((uint32_t) 1) << (bit_length - 1U))) != 0)
 80013e6:	6a3a      	ldr	r2, [r7, #32]
 80013e8:	7dfb      	ldrb	r3, [r7, #23]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	fa22 f303 	lsr.w	r3, r2, r3
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d051      	beq.n	800149c <canardDecodeScalar+0x264>
             {
                 storage.u32 |= (uint32_t) 0xFFFFFFFFUL & (uint32_t) ~((((uint32_t) 1) << bit_length) - 1U);
 80013f8:	6a3a      	ldr	r2, [r7, #32]
 80013fa:	7dfb      	ldrb	r3, [r7, #23]
 80013fc:	2101      	movs	r1, #1
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	425b      	negs	r3, r3
 8001404:	4313      	orrs	r3, r2
 8001406:	623b      	str	r3, [r7, #32]
 8001408:	e048      	b.n	800149c <canardDecodeScalar+0x264>
             }
         }
         else if (bit_length < 64)   // Strictly less, this is not a typo
 800140a:	7dfb      	ldrb	r3, [r7, #23]
 800140c:	2b3f      	cmp	r3, #63	@ 0x3f
 800140e:	d842      	bhi.n	8001496 <canardDecodeScalar+0x25e>
         {
             if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 8001410:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001414:	7df9      	ldrb	r1, [r7, #23]
 8001416:	1e48      	subs	r0, r1, #1
 8001418:	f1c0 0620 	rsb	r6, r0, #32
 800141c:	f1a0 0120 	sub.w	r1, r0, #32
 8001420:	fa22 f400 	lsr.w	r4, r2, r0
 8001424:	fa03 f606 	lsl.w	r6, r3, r6
 8001428:	4334      	orrs	r4, r6
 800142a:	fa23 f101 	lsr.w	r1, r3, r1
 800142e:	430c      	orrs	r4, r1
 8001430:	fa23 f500 	lsr.w	r5, r3, r0
 8001434:	f004 0301 	and.w	r3, r4, #1
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001442:	460b      	mov	r3, r1
 8001444:	4313      	orrs	r3, r2
 8001446:	d029      	beq.n	800149c <canardDecodeScalar+0x264>
             {
                 storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << bit_length) - 1U);
 8001448:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800144c:	7df9      	ldrb	r1, [r7, #23]
 800144e:	f04f 0201 	mov.w	r2, #1
 8001452:	f04f 0300 	mov.w	r3, #0
 8001456:	f1a1 0620 	sub.w	r6, r1, #32
 800145a:	f1c1 0020 	rsb	r0, r1, #32
 800145e:	fa03 f901 	lsl.w	r9, r3, r1
 8001462:	fa02 f606 	lsl.w	r6, r2, r6
 8001466:	ea49 0906 	orr.w	r9, r9, r6
 800146a:	fa22 f000 	lsr.w	r0, r2, r0
 800146e:	ea49 0900 	orr.w	r9, r9, r0
 8001472:	fa02 f801 	lsl.w	r8, r2, r1
 8001476:	2300      	movs	r3, #0
 8001478:	f1d8 0a00 	rsbs	sl, r8, #0
 800147c:	eb63 0b09 	sbc.w	fp, r3, r9
 8001480:	ea44 030a 	orr.w	r3, r4, sl
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	ea45 030b 	orr.w	r3, r5, fp
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001490:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001494:	e002      	b.n	800149c <canardDecodeScalar+0x264>
             }
         }
         else
         {
             CANARD_ASSERT(false);
             return -CANARD_ERROR_INTERNAL;
 8001496:	f06f 0308 	mvn.w	r3, #8
 800149a:	e051      	b.n	8001540 <canardDecodeScalar+0x308>
     }

     /*
      * Copying the result out.
      */
     if (value_is_signed)
 800149c:	7dbb      	ldrb	r3, [r7, #22]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d022      	beq.n	80014e8 <canardDecodeScalar+0x2b0>
     {
         if      (bit_length <= 8)   { *( (int8_t*) out_value) = storage.s8;  }
 80014a2:	7dfb      	ldrb	r3, [r7, #23]
 80014a4:	2b08      	cmp	r3, #8
 80014a6:	d804      	bhi.n	80014b2 <canardDecodeScalar+0x27a>
 80014a8:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80014ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014ae:	701a      	strb	r2, [r3, #0]
 80014b0:	e044      	b.n	800153c <canardDecodeScalar+0x304>
         else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 80014b2:	7dfb      	ldrb	r3, [r7, #23]
 80014b4:	2b10      	cmp	r3, #16
 80014b6:	d804      	bhi.n	80014c2 <canardDecodeScalar+0x28a>
 80014b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80014bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014be:	801a      	strh	r2, [r3, #0]
 80014c0:	e03c      	b.n	800153c <canardDecodeScalar+0x304>
         else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 80014c2:	7dfb      	ldrb	r3, [r7, #23]
 80014c4:	2b20      	cmp	r3, #32
 80014c6:	d803      	bhi.n	80014d0 <canardDecodeScalar+0x298>
 80014c8:	6a3a      	ldr	r2, [r7, #32]
 80014ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	e035      	b.n	800153c <canardDecodeScalar+0x304>
         else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 80014d0:	7dfb      	ldrb	r3, [r7, #23]
 80014d2:	2b40      	cmp	r3, #64	@ 0x40
 80014d4:	d805      	bhi.n	80014e2 <canardDecodeScalar+0x2aa>
 80014d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014da:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80014dc:	e9c1 2300 	strd	r2, r3, [r1]
 80014e0:	e02c      	b.n	800153c <canardDecodeScalar+0x304>
         else
         {
             CANARD_ASSERT(false);
             return -CANARD_ERROR_INTERNAL;
 80014e2:	f06f 0308 	mvn.w	r3, #8
 80014e6:	e02b      	b.n	8001540 <canardDecodeScalar+0x308>
         }
     }
     else
     {
         if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 80014e8:	7dfb      	ldrb	r3, [r7, #23]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d104      	bne.n	80014f8 <canardDecodeScalar+0x2c0>
 80014ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 80014f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014f4:	701a      	strb	r2, [r3, #0]
 80014f6:	e021      	b.n	800153c <canardDecodeScalar+0x304>
         else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d804      	bhi.n	8001508 <canardDecodeScalar+0x2d0>
 80014fe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001502:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001504:	701a      	strb	r2, [r3, #0]
 8001506:	e019      	b.n	800153c <canardDecodeScalar+0x304>
         else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 8001508:	7dfb      	ldrb	r3, [r7, #23]
 800150a:	2b10      	cmp	r3, #16
 800150c:	d803      	bhi.n	8001516 <canardDecodeScalar+0x2de>
 800150e:	8c3a      	ldrh	r2, [r7, #32]
 8001510:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001512:	801a      	strh	r2, [r3, #0]
 8001514:	e012      	b.n	800153c <canardDecodeScalar+0x304>
         else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 8001516:	7dfb      	ldrb	r3, [r7, #23]
 8001518:	2b20      	cmp	r3, #32
 800151a:	d803      	bhi.n	8001524 <canardDecodeScalar+0x2ec>
 800151c:	6a3a      	ldr	r2, [r7, #32]
 800151e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	e00b      	b.n	800153c <canardDecodeScalar+0x304>
         else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 8001524:	7dfb      	ldrb	r3, [r7, #23]
 8001526:	2b40      	cmp	r3, #64	@ 0x40
 8001528:	d805      	bhi.n	8001536 <canardDecodeScalar+0x2fe>
 800152a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800152e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001530:	e9c1 2300 	strd	r2, r3, [r1]
 8001534:	e002      	b.n	800153c <canardDecodeScalar+0x304>
         else
         {
             CANARD_ASSERT(false);
             return -CANARD_ERROR_INTERNAL;
 8001536:	f06f 0308 	mvn.w	r3, #8
 800153a:	e001      	b.n	8001540 <canardDecodeScalar+0x308>
         }
     }

     CANARD_ASSERT(result <= bit_length);
     CANARD_ASSERT(result > 0);
     return result;
 800153c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 }
 8001540:	4618      	mov	r0, r3
 8001542:	3734      	adds	r7, #52	@ 0x34
 8001544:	46bd      	mov	sp, r7
 8001546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800154a <canardEncodeScalar>:

 void canardEncodeScalar(void* destination,
                         uint32_t bit_offset,
                         uint8_t bit_length,
                         const void* value)
 {
 800154a:	b580      	push	{r7, lr}
 800154c:	b08a      	sub	sp, #40	@ 0x28
 800154e:	af02      	add	r7, sp, #8
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	4613      	mov	r3, r2
 8001558:	71fb      	strb	r3, [r7, #7]
      * Maybe not the best solution, but it simplifies the API.
      */
     CANARD_ASSERT(destination != NULL);
     CANARD_ASSERT(value != NULL);

     if (bit_length > 64)
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	2b40      	cmp	r3, #64	@ 0x40
 800155e:	d901      	bls.n	8001564 <canardEncodeScalar+0x1a>
     {
         CANARD_ASSERT(false);
         bit_length = 64;
 8001560:	2340      	movs	r3, #64	@ 0x40
 8001562:	71fb      	strb	r3, [r7, #7]
     }

     if (bit_length < 1)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <canardEncodeScalar+0x24>
     {
         CANARD_ASSERT(false);
         bit_length = 1;
 800156a:	2301      	movs	r3, #1
 800156c:	71fb      	strb	r3, [r7, #7]
         uint32_t u32;
         uint64_t u64;
         uint8_t bytes[8];
     } storage;

     memset(&storage, 0, sizeof(storage));
 800156e:	f107 0310 	add.w	r3, r7, #16
 8001572:	2208      	movs	r2, #8
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f005 f910 	bl	800679c <memset>

     uint8_t std_byte_length = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	77fb      	strb	r3, [r7, #31]

     // Extra most significant bits can be safely ignored here.
     if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) value) != 0); }
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d105      	bne.n	8001592 <canardEncodeScalar+0x48>
 8001586:	2301      	movs	r3, #1
 8001588:	77fb      	strb	r3, [r7, #31]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	743b      	strb	r3, [r7, #16]
 8001590:	e024      	b.n	80015dc <canardEncodeScalar+0x92>
     else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) value);  }
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	2b08      	cmp	r3, #8
 8001596:	d805      	bhi.n	80015a4 <canardEncodeScalar+0x5a>
 8001598:	2301      	movs	r3, #1
 800159a:	77fb      	strb	r3, [r7, #31]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	743b      	strb	r3, [r7, #16]
 80015a2:	e01b      	b.n	80015dc <canardEncodeScalar+0x92>
     else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) value); }
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	2b10      	cmp	r3, #16
 80015a8:	d805      	bhi.n	80015b6 <canardEncodeScalar+0x6c>
 80015aa:	2302      	movs	r3, #2
 80015ac:	77fb      	strb	r3, [r7, #31]
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	823b      	strh	r3, [r7, #16]
 80015b4:	e012      	b.n	80015dc <canardEncodeScalar+0x92>
     else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) value); }
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b20      	cmp	r3, #32
 80015ba:	d805      	bhi.n	80015c8 <canardEncodeScalar+0x7e>
 80015bc:	2304      	movs	r3, #4
 80015be:	77fb      	strb	r3, [r7, #31]
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	e009      	b.n	80015dc <canardEncodeScalar+0x92>
     else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) value); }
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	2b40      	cmp	r3, #64	@ 0x40
 80015cc:	d806      	bhi.n	80015dc <canardEncodeScalar+0x92>
 80015ce:	2308      	movs	r3, #8
 80015d0:	77fb      	strb	r3, [r7, #31]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
             storage.bytes[i] = (temp >> (8*i)) & 0xFFU;
         }
     }
 #endif

     if (isBigEndian())
 80015dc:	f000 fbfb 	bl	8001dd6 <isBigEndian>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d006      	beq.n	80015f4 <canardEncodeScalar+0xaa>
     {
         swapByteOrder(&storage.bytes[0], std_byte_length);
 80015e6:	7ffa      	ldrb	r2, [r7, #31]
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 fc02 	bl	8001df8 <swapByteOrder>
      * Extra least significant bits will be filled with zeroes, which is fine.
      * Extra most significant bits will be discarded here.
      * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
      * not be taken if bit_length == 64, because 64 % 8 == 0.
      */
     if ((bit_length % 8) != 0)
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d014      	beq.n	800162a <canardEncodeScalar+0xe0>
     {
         // coverity[overrun-local]
         storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] << ((8U - (bit_length % 8U)) & 7U));
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	08db      	lsrs	r3, r3, #3
 8001604:	b2db      	uxtb	r3, r3
 8001606:	3320      	adds	r3, #32
 8001608:	443b      	add	r3, r7
 800160a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800160e:	461a      	mov	r2, r3
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	425b      	negs	r3, r3
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	409a      	lsls	r2, r3
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	08db      	lsrs	r3, r3, #3
 800161e:	b2db      	uxtb	r3, r3
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	3320      	adds	r3, #32
 8001624:	443b      	add	r3, r7
 8001626:	f803 2c10 	strb.w	r2, [r3, #-16]
     }

     /*
      * Now, the storage contains properly serialized scalar. Copying it out.
      */
     copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
 800162a:	79fa      	ldrb	r2, [r7, #7]
 800162c:	f107 0010 	add.w	r0, r7, #16
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2100      	movs	r1, #0
 8001638:	f000 fa61 	bl	8001afe <copyBitArray>
 }
 800163c:	bf00      	nop
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <incrementTransferID>:
     }
     return d;
 }

 CANARD_INTERNAL void incrementTransferID(uint8_t* transfer_id)
 {
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
     CANARD_ASSERT(transfer_id != NULL);

     (*transfer_id)++;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	3301      	adds	r3, #1
 8001652:	b2da      	uxtb	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	701a      	strb	r2, [r3, #0]
     if (*transfer_id >= 32)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b1f      	cmp	r3, #31
 800165e:	d902      	bls.n	8001666 <incrementTransferID+0x22>
     {
         *transfer_id = 0;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
     }
 }
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <dlcToDataLength>:

 CANARD_INTERNAL uint16_t dlcToDataLength(uint16_t dlc) {
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	80fb      	strh	r3, [r7, #6]
     /*
     Data Length Code      9  10  11  12  13  14  15
     Number of data bytes 12  16  20  24  32  48  64
     */
     if (dlc <= 8) {
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	2b08      	cmp	r3, #8
 8001680:	d801      	bhi.n	8001686 <dlcToDataLength+0x14>
         return dlc;
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	e01e      	b.n	80016c4 <dlcToDataLength+0x52>
     } else if (dlc == 9) {
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	2b09      	cmp	r3, #9
 800168a:	d101      	bne.n	8001690 <dlcToDataLength+0x1e>
         return 12;
 800168c:	230c      	movs	r3, #12
 800168e:	e019      	b.n	80016c4 <dlcToDataLength+0x52>
     } else if (dlc == 10) {
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	2b0a      	cmp	r3, #10
 8001694:	d101      	bne.n	800169a <dlcToDataLength+0x28>
         return 16;
 8001696:	2310      	movs	r3, #16
 8001698:	e014      	b.n	80016c4 <dlcToDataLength+0x52>
     } else if (dlc == 11) {
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	2b0b      	cmp	r3, #11
 800169e:	d101      	bne.n	80016a4 <dlcToDataLength+0x32>
         return 20;
 80016a0:	2314      	movs	r3, #20
 80016a2:	e00f      	b.n	80016c4 <dlcToDataLength+0x52>
     } else if (dlc == 12) {
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	2b0c      	cmp	r3, #12
 80016a8:	d101      	bne.n	80016ae <dlcToDataLength+0x3c>
         return 24;
 80016aa:	2318      	movs	r3, #24
 80016ac:	e00a      	b.n	80016c4 <dlcToDataLength+0x52>
     } else if (dlc == 13) {
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	2b0d      	cmp	r3, #13
 80016b2:	d101      	bne.n	80016b8 <dlcToDataLength+0x46>
         return 32;
 80016b4:	2320      	movs	r3, #32
 80016b6:	e005      	b.n	80016c4 <dlcToDataLength+0x52>
     } else if (dlc == 14) {
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	2b0e      	cmp	r3, #14
 80016bc:	d101      	bne.n	80016c2 <dlcToDataLength+0x50>
         return 48;
 80016be:	2330      	movs	r3, #48	@ 0x30
 80016c0:	e000      	b.n	80016c4 <dlcToDataLength+0x52>
     }
     return 64;
 80016c2:	2340      	movs	r3, #64	@ 0x40
 }
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <dataLengthToDlc>:

 CANARD_INTERNAL uint16_t dataLengthToDlc(uint16_t data_length) {
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	80fb      	strh	r3, [r7, #6]
     if (data_length <= 8) {
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d801      	bhi.n	80016e4 <dataLengthToDlc+0x14>
         return data_length;
 80016e0:	88fb      	ldrh	r3, [r7, #6]
 80016e2:	e01e      	b.n	8001722 <dataLengthToDlc+0x52>
     } else if (data_length <= 12) {
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	2b0c      	cmp	r3, #12
 80016e8:	d801      	bhi.n	80016ee <dataLengthToDlc+0x1e>
         return 9;
 80016ea:	2309      	movs	r3, #9
 80016ec:	e019      	b.n	8001722 <dataLengthToDlc+0x52>
     } else if (data_length <= 16) {
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	2b10      	cmp	r3, #16
 80016f2:	d801      	bhi.n	80016f8 <dataLengthToDlc+0x28>
         return 10;
 80016f4:	230a      	movs	r3, #10
 80016f6:	e014      	b.n	8001722 <dataLengthToDlc+0x52>
     } else if (data_length <= 20) {
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	2b14      	cmp	r3, #20
 80016fc:	d801      	bhi.n	8001702 <dataLengthToDlc+0x32>
         return 11;
 80016fe:	230b      	movs	r3, #11
 8001700:	e00f      	b.n	8001722 <dataLengthToDlc+0x52>
     } else if (data_length <= 24) {
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	2b18      	cmp	r3, #24
 8001706:	d801      	bhi.n	800170c <dataLengthToDlc+0x3c>
         return 12;
 8001708:	230c      	movs	r3, #12
 800170a:	e00a      	b.n	8001722 <dataLengthToDlc+0x52>
     } else if (data_length <= 32) {
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	2b20      	cmp	r3, #32
 8001710:	d801      	bhi.n	8001716 <dataLengthToDlc+0x46>
         return 13;
 8001712:	230d      	movs	r3, #13
 8001714:	e005      	b.n	8001722 <dataLengthToDlc+0x52>
     } else if (data_length <= 48) {
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	2b30      	cmp	r3, #48	@ 0x30
 800171a:	d801      	bhi.n	8001720 <dataLengthToDlc+0x50>
         return 14;
 800171c:	230e      	movs	r3, #14
 800171e:	e000      	b.n	8001722 <dataLengthToDlc+0x52>
     }
     return 15;
 8001720:	230f      	movs	r3, #15
 }
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <enqueueTxFrames>:
 CANARD_INTERNAL int16_t enqueueTxFrames(CanardInstance* ins,
                                         uint32_t can_id,
                                         uint16_t crc,
                                         CanardTxTransfer* transfer
 )
 {
 800172e:	b580      	push	{r7, lr}
 8001730:	b08c      	sub	sp, #48	@ 0x30
 8001732:	af00      	add	r7, sp, #0
 8001734:	60f8      	str	r0, [r7, #12]
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	4613      	mov	r3, r2
 800173c:	80fb      	strh	r3, [r7, #6]
     CANARD_ASSERT(ins != NULL);
     CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared

     if (transfer->inout_transfer_id == NULL)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d102      	bne.n	800174c <enqueueTxFrames+0x1e>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 8001746:	f06f 0301 	mvn.w	r3, #1
 800174a:	e11c      	b.n	8001986 <enqueueTxFrames+0x258>
     }

     if ((transfer->payload_len > 0) && (transfer->payload == NULL))
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	8c1b      	ldrh	r3, [r3, #32]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <enqueueTxFrames+0x34>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d102      	bne.n	8001762 <enqueueTxFrames+0x34>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 800175c:	f06f 0301 	mvn.w	r3, #1
 8001760:	e111      	b.n	8001986 <enqueueTxFrames+0x258>
     }

     int16_t result = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 #if CANARD_ENABLE_CANFD
     uint8_t frame_max_data_len = transfer->canfd ? CANARD_CANFD_FRAME_MAX_DATA_LEN:CANARD_CAN_FRAME_MAX_DATA_LEN;
 #else
     uint8_t frame_max_data_len = CANARD_CAN_FRAME_MAX_DATA_LEN;
 8001766:	2308      	movs	r3, #8
 8001768:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 #endif
     if (transfer->payload_len < frame_max_data_len)                        // Single frame transfer
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	8c1a      	ldrh	r2, [r3, #32]
 8001770:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001774:	b29b      	uxth	r3, r3
 8001776:	429a      	cmp	r2, r3
 8001778:	d24b      	bcs.n	8001812 <enqueueTxFrames+0xe4>
     {
         CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	330c      	adds	r3, #12
 800177e:	4618      	mov	r0, r3
 8001780:	f000 f94a 	bl	8001a18 <createTxItem>
 8001784:	6178      	str	r0, [r7, #20]
         if (queue_item == NULL)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <enqueueTxFrames+0x64>
         {
             return -CANARD_ERROR_OUT_OF_MEMORY;
 800178c:	f06f 0302 	mvn.w	r3, #2
 8001790:	e0f9      	b.n	8001986 <enqueueTxFrames+0x258>
         }

         memcpy(queue_item->frame.data, transfer->payload, transfer->payload_len);
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f103 0008 	add.w	r0, r3, #8
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	69d9      	ldr	r1, [r3, #28]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	8c1b      	ldrh	r3, [r3, #32]
 80017a0:	461a      	mov	r2, r3
 80017a2:	f005 f829 	bl	80067f8 <memcpy>

         transfer->payload_len = dlcToDataLength(dataLengthToDlc(transfer->payload_len+1))-1;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	8c1b      	ldrh	r3, [r3, #32]
 80017aa:	3301      	adds	r3, #1
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ff8e 	bl	80016d0 <dataLengthToDlc>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff ff5b 	bl	8001672 <dlcToDataLength>
 80017bc:	4603      	mov	r3, r0
 80017be:	3b01      	subs	r3, #1
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	841a      	strh	r2, [r3, #32]
         queue_item->frame.data_len = (uint8_t)(transfer->payload_len + 1);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	8c1b      	ldrh	r3, [r3, #32]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	3301      	adds	r3, #1
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	741a      	strb	r2, [r3, #16]
         queue_item->frame.data[transfer->payload_len] = (uint8_t)(0xC0U | (*transfer->inout_transfer_id & 31U));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	f003 031f 	and.w	r3, r3, #31
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	8c12      	ldrh	r2, [r2, #32]
 80017e4:	4611      	mov	r1, r2
 80017e6:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	440b      	add	r3, r1
 80017f0:	721a      	strb	r2, [r3, #8]
         queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	605a      	str	r2, [r3, #4]
         queue_item->frame.iface_mask = transfer->iface_mask;
 #endif
 #if CANARD_ENABLE_CANFD
         queue_item->frame.canfd = transfer->canfd;
 #endif
         pushTxQueue(ins, queue_item);
 80017fc:	6979      	ldr	r1, [r7, #20]
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 f8c5 	bl	800198e <pushTxQueue>
         result++;
 8001804:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001808:	b29b      	uxth	r3, r3
 800180a:	3301      	adds	r3, #1
 800180c:	b29b      	uxth	r3, r3
 800180e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001810:	e0b7      	b.n	8001982 <enqueueTxFrames+0x254>
     }
     else                                                                    // Multi frame transfer
     {
         uint16_t data_index = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	85bb      	strh	r3, [r7, #44]	@ 0x2c
         uint8_t toggle = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
         uint8_t sot_eot = 0x80;
 800181c:	2380      	movs	r3, #128	@ 0x80
 800181e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
           see if we are going to be able to allocate enough blocks for
           this transfer. If not then stop now, otherwise we will end
           up doing a partial (corrupt) transfer which will just make
           the situation worse as it will waste bus bandwidth
          */
         const uint16_t total_bytes = transfer->payload_len + 2; // including CRC
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	8c1b      	ldrh	r3, [r3, #32]
 8001826:	3302      	adds	r3, #2
 8001828:	84bb      	strh	r3, [r7, #36]	@ 0x24
         const uint8_t bytes_per_frame = frame_max_data_len-1; // sot/eot byte consumes one byte
 800182a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800182e:	3b01      	subs	r3, #1
 8001830:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
         const uint16_t frames_needed = (total_bytes + (bytes_per_frame-1)) / bytes_per_frame;
 8001834:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001836:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800183a:	3b01      	subs	r3, #1
 800183c:	441a      	add	r2, r3
 800183e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001842:	fb92 f3f3 	sdiv	r3, r2, r3
 8001846:	843b      	strh	r3, [r7, #32]
         const uint16_t blocks_available = ins->allocator.statistics.capacity_blocks - ins->allocator.statistics.current_usage_blocks;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8a9a      	ldrh	r2, [r3, #20]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8adb      	ldrh	r3, [r3, #22]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	83fb      	strh	r3, [r7, #30]
         if (blocks_available < frames_needed) {
 8001854:	8bfa      	ldrh	r2, [r7, #30]
 8001856:	8c3b      	ldrh	r3, [r7, #32]
 8001858:	429a      	cmp	r2, r3
 800185a:	d202      	bcs.n	8001862 <enqueueTxFrames+0x134>
             return -CANARD_ERROR_OUT_OF_MEMORY;
 800185c:	f06f 0302 	mvn.w	r3, #2
 8001860:	e091      	b.n	8001986 <enqueueTxFrames+0x258>
         }

         CanardTxQueueItem* queue_item = NULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]

         while (transfer->payload_len - data_index != 0)
 8001866:	e086      	b.n	8001976 <enqueueTxFrames+0x248>
         {
             queue_item = createTxItem(&ins->allocator);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	330c      	adds	r3, #12
 800186c:	4618      	mov	r0, r3
 800186e:	f000 f8d3 	bl	8001a18 <createTxItem>
 8001872:	61b8      	str	r0, [r7, #24]
             if (queue_item == NULL)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d102      	bne.n	8001880 <enqueueTxFrames+0x152>
             {
                 CANARD_ASSERT(false);
                 return -CANARD_ERROR_OUT_OF_MEMORY;
 800187a:	f06f 0302 	mvn.w	r3, #2
 800187e:	e082      	b.n	8001986 <enqueueTxFrames+0x258>
             }

             uint16_t i = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	853b      	strh	r3, [r7, #40]	@ 0x28
             if (data_index == 0)
 8001884:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10c      	bne.n	80018a4 <enqueueTxFrames+0x176>
             {
                 // add crc
                 queue_item->frame.data[0] = (uint8_t) (crc);
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	721a      	strb	r2, [r3, #8]
                 queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	b29b      	uxth	r3, r3
 8001898:	b2da      	uxtb	r2, r3
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	725a      	strb	r2, [r3, #9]
                 i = 2;
 800189e:	2302      	movs	r3, #2
 80018a0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80018a2:	e012      	b.n	80018ca <enqueueTxFrames+0x19c>
             }
             else
             {
                 i = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	853b      	strh	r3, [r7, #40]	@ 0x28
             }

             for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 80018a8:	e00f      	b.n	80018ca <enqueueTxFrames+0x19c>
             {
                 queue_item->frame.data[i] = transfer->payload[data_index];
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	69da      	ldr	r2, [r3, #28]
 80018ae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80018b0:	441a      	add	r2, r3
 80018b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80018b4:	7811      	ldrb	r1, [r2, #0]
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4413      	add	r3, r2
 80018ba:	460a      	mov	r2, r1
 80018bc:	721a      	strb	r2, [r3, #8]
             for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 80018be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80018c0:	3301      	adds	r3, #1
 80018c2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80018c4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80018c6:	3301      	adds	r3, #1
 80018c8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80018ca:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80018cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018d0:	3b01      	subs	r3, #1
 80018d2:	429a      	cmp	r2, r3
 80018d4:	da04      	bge.n	80018e0 <enqueueTxFrames+0x1b2>
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	8c1b      	ldrh	r3, [r3, #32]
 80018da:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80018dc:	429a      	cmp	r2, r3
 80018de:	d3e4      	bcc.n	80018aa <enqueueTxFrames+0x17c>
             }
             // tail byte
             sot_eot = (data_index == transfer->payload_len) ? (uint8_t)0x40 : sot_eot;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	8c1b      	ldrh	r3, [r3, #32]
 80018e4:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d002      	beq.n	80018f0 <enqueueTxFrames+0x1c2>
 80018ea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80018ee:	e000      	b.n	80018f2 <enqueueTxFrames+0x1c4>
 80018f0:	2340      	movs	r3, #64	@ 0x40
 80018f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

             i = dlcToDataLength(dataLengthToDlc(i+1))-1;
 80018f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80018f8:	3301      	adds	r3, #1
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fee7 	bl	80016d0 <dataLengthToDlc>
 8001902:	4603      	mov	r3, r0
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff feb4 	bl	8001672 <dlcToDataLength>
 800190a:	4603      	mov	r3, r0
 800190c:	3b01      	subs	r3, #1
 800190e:	853b      	strh	r3, [r7, #40]	@ 0x28
             queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*transfer->inout_transfer_id & 31U));
 8001910:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001914:	015b      	lsls	r3, r3, #5
 8001916:	b2da      	uxtb	r2, r3
 8001918:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800191c:	4313      	orrs	r3, r2
 800191e:	b2d9      	uxtb	r1, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	f003 031f 	and.w	r3, r3, #31
 800192a:	b2da      	uxtb	r2, r3
 800192c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800192e:	430a      	orrs	r2, r1
 8001930:	b2d1      	uxtb	r1, r2
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4413      	add	r3, r2
 8001936:	460a      	mov	r2, r1
 8001938:	721a      	strb	r2, [r3, #8]
             queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	605a      	str	r2, [r3, #4]
             queue_item->frame.data_len = (uint8_t)(i + 1);
 8001944:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001946:	b2db      	uxtb	r3, r3
 8001948:	3301      	adds	r3, #1
 800194a:	b2da      	uxtb	r2, r3
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	741a      	strb	r2, [r3, #16]
             queue_item->frame.iface_mask = transfer->iface_mask;
 #endif
 #if CANARD_ENABLE_CANFD
             queue_item->frame.canfd = transfer->canfd;
 #endif
             pushTxQueue(ins, queue_item);
 8001950:	69b9      	ldr	r1, [r7, #24]
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f000 f81b 	bl	800198e <pushTxQueue>

             result++;
 8001958:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800195c:	b29b      	uxth	r3, r3
 800195e:	3301      	adds	r3, #1
 8001960:	b29b      	uxth	r3, r3
 8001962:	85fb      	strh	r3, [r7, #46]	@ 0x2e
             toggle ^= 1;
 8001964:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001968:	f083 0301 	eor.w	r3, r3, #1
 800196c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
             sot_eot = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
         while (transfer->payload_len - data_index != 0)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	8c1b      	ldrh	r3, [r3, #32]
 800197a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800197c:	429a      	cmp	r2, r3
 800197e:	f47f af73 	bne.w	8001868 <enqueueTxFrames+0x13a>
         }
     }

     return result;
 8001982:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 }
 8001986:	4618      	mov	r0, r3
 8001988:	3730      	adds	r7, #48	@ 0x30
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <pushTxQueue>:

 /**
  * Puts frame on on the TX queue. Higher priority placed first
  */
 CANARD_INTERNAL void pushTxQueue(CanardInstance* ins, CanardTxQueueItem* item)
 {
 800198e:	b580      	push	{r7, lr}
 8001990:	b084      	sub	sp, #16
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	6039      	str	r1, [r7, #0]
     CANARD_ASSERT(ins != NULL);
     CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames

     if (ins->tx_queue == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199c:	2b00      	cmp	r3, #0
 800199e:	d103      	bne.n	80019a8 <pushTxQueue+0x1a>
     {
         ins->tx_queue = item;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	625a      	str	r2, [r3, #36]	@ 0x24
         return;
 80019a6:	e034      	b.n	8001a12 <pushTxQueue+0x84>
     }

     CanardTxQueueItem* queue = ins->tx_queue;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ac:	60fb      	str	r3, [r7, #12]
     CanardTxQueueItem* previous = ins->tx_queue;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b2:	60bb      	str	r3, [r7, #8]

     while (queue != NULL)
 80019b4:	e02a      	b.n	8001a0c <pushTxQueue+0x7e>
     {
         if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4619      	mov	r1, r3
 80019c0:	4610      	mov	r0, r2
 80019c2:	f000 f840 	bl	8001a46 <isPriorityHigher>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d012      	beq.n	80019f2 <pushTxQueue+0x64>
         {
             if (queue == ins->tx_queue)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d106      	bne.n	80019e4 <pushTxQueue+0x56>
             {
                 item->next = queue;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	601a      	str	r2, [r3, #0]
                 ins->tx_queue = item;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	625a      	str	r2, [r3, #36]	@ 0x24
             else
             {
                 previous->next = item;
                 item->next = queue;
             }
             return;
 80019e2:	e016      	b.n	8001a12 <pushTxQueue+0x84>
                 previous->next = item;
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	601a      	str	r2, [r3, #0]
                 item->next = queue;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	601a      	str	r2, [r3, #0]
             return;
 80019f0:	e00f      	b.n	8001a12 <pushTxQueue+0x84>
         }
         else
         {
             if (queue->next == NULL)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d103      	bne.n	8001a02 <pushTxQueue+0x74>
             {
                 queue->next = item;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	601a      	str	r2, [r3, #0]
                 return;
 8001a00:	e007      	b.n	8001a12 <pushTxQueue+0x84>
             }
             else
             {
                 previous = queue;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	60bb      	str	r3, [r7, #8]
                 queue = queue->next;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	60fb      	str	r3, [r7, #12]
     while (queue != NULL)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1d1      	bne.n	80019b6 <pushTxQueue+0x28>
             }
         }
     }
 }
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <createTxItem>:

 /**
  * Creates new tx queue item from allocator
  */
 CANARD_INTERNAL CanardTxQueueItem* createTxItem(CanardPoolAllocator* allocator)
 {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
     CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 facb 	bl	8001fbc <allocateBlock>
 8001a26:	60f8      	str	r0, [r7, #12]
     if (item == NULL)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <createTxItem+0x1a>
     {
         return NULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e005      	b.n	8001a3e <createTxItem+0x26>
     }
     memset(item, 0, sizeof(*item));
 8001a32:	2214      	movs	r2, #20
 8001a34:	2100      	movs	r1, #0
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f004 feb0 	bl	800679c <memset>
     return item;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 }
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <isPriorityHigher>:

 /**
  * Returns true if priority of rhs is higher than id
  */
 CANARD_INTERNAL bool isPriorityHigher(uint32_t rhs, uint32_t id)
 {
 8001a46:	b480      	push	{r7}
 8001a48:	b089      	sub	sp, #36	@ 0x24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	6039      	str	r1, [r7, #0]
     const uint32_t clean_id = id & CANARD_CAN_EXT_ID_MASK;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8001a56:	61fb      	str	r3, [r7, #28]
     const uint32_t rhs_clean_id = rhs & CANARD_CAN_EXT_ID_MASK;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8001a5e:	61bb      	str	r3, [r7, #24]

     /*
      * STD vs EXT - if 11 most significant bits are the same, EXT loses.
      */
     const bool ext = (id & CANARD_CAN_FRAME_EFF) != 0;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	0fdb      	lsrs	r3, r3, #31
 8001a64:	75fb      	strb	r3, [r7, #23]
     const bool rhs_ext = (rhs & CANARD_CAN_FRAME_EFF) != 0;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	0fdb      	lsrs	r3, r3, #31
 8001a6a:	75bb      	strb	r3, [r7, #22]
     if (ext != rhs_ext)
 8001a6c:	7dfa      	ldrb	r2, [r7, #23]
 8001a6e:	7dbb      	ldrb	r3, [r7, #22]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d01d      	beq.n	8001ab0 <isPriorityHigher+0x6a>
     {
         uint32_t arb11 = ext ? (clean_id >> 18U) : clean_id;
 8001a74:	7dfb      	ldrb	r3, [r7, #23]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d002      	beq.n	8001a80 <isPriorityHigher+0x3a>
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	0c9b      	lsrs	r3, r3, #18
 8001a7e:	e000      	b.n	8001a82 <isPriorityHigher+0x3c>
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	613b      	str	r3, [r7, #16]
         uint32_t rhs_arb11 = rhs_ext ? (rhs_clean_id >> 18U) : rhs_clean_id;
 8001a84:	7dbb      	ldrb	r3, [r7, #22]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d002      	beq.n	8001a90 <isPriorityHigher+0x4a>
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	0c9b      	lsrs	r3, r3, #18
 8001a8e:	e000      	b.n	8001a92 <isPriorityHigher+0x4c>
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	60fb      	str	r3, [r7, #12]
         if (arb11 != rhs_arb11)
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d007      	beq.n	8001aac <isPriorityHigher+0x66>
         {
             return arb11 < rhs_arb11;
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	bf34      	ite	cc
 8001aa4:	2301      	movcc	r3, #1
 8001aa6:	2300      	movcs	r3, #0
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	e022      	b.n	8001af2 <isPriorityHigher+0xac>
         }
         else
         {
             return rhs_ext;
 8001aac:	7dbb      	ldrb	r3, [r7, #22]
 8001aae:	e020      	b.n	8001af2 <isPriorityHigher+0xac>
     }

     /*
      * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
      */
     const bool rtr = (id & CANARD_CAN_FRAME_RTR) != 0;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	bf14      	ite	ne
 8001aba:	2301      	movne	r3, #1
 8001abc:	2300      	moveq	r3, #0
 8001abe:	757b      	strb	r3, [r7, #21]
     const bool rhs_rtr = (rhs & CANARD_CAN_FRAME_RTR) != 0;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	bf14      	ite	ne
 8001aca:	2301      	movne	r3, #1
 8001acc:	2300      	moveq	r3, #0
 8001ace:	753b      	strb	r3, [r7, #20]
     if (clean_id == rhs_clean_id && rtr != rhs_rtr)
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d105      	bne.n	8001ae4 <isPriorityHigher+0x9e>
 8001ad8:	7d7a      	ldrb	r2, [r7, #21]
 8001ada:	7d3b      	ldrb	r3, [r7, #20]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <isPriorityHigher+0x9e>
     {
         return rhs_rtr;
 8001ae0:	7d3b      	ldrb	r3, [r7, #20]
 8001ae2:	e006      	b.n	8001af2 <isPriorityHigher+0xac>
     }

     /*
      * Plain ID arbitration - greater value loses.
      */
     return clean_id < rhs_clean_id;
 8001ae4:	69fa      	ldr	r2, [r7, #28]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	bf34      	ite	cc
 8001aec:	2301      	movcc	r3, #1
 8001aee:	2300      	movcs	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 }
 8001af2:	4618      	mov	r0, r3
 8001af4:	3724      	adds	r7, #36	@ 0x24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <copyBitArray>:
 /**
  * Bit array copy routine, originally developed by Ben Dyer for Libuavcan. Thanks Ben.
  */
 void copyBitArray(const uint8_t* src, uint32_t src_offset, uint32_t src_len,
                         uint8_t* dst, uint32_t dst_offset)
 {
 8001afe:	b480      	push	{r7}
 8001b00:	b089      	sub	sp, #36	@ 0x24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	603b      	str	r3, [r7, #0]
     CANARD_ASSERT(src_len > 0U);

     // Normalizing inputs
     src += src_offset / 8U;
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	08db      	lsrs	r3, r3, #3
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	4413      	add	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
     dst += dst_offset / 8U;
 8001b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b18:	08db      	lsrs	r3, r3, #3
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	603b      	str	r3, [r7, #0]

     src_offset %= 8U;
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60bb      	str	r3, [r7, #8]
     dst_offset %= 8U;
 8001b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	62bb      	str	r3, [r7, #40]	@ 0x28

     const size_t last_bit = src_offset + src_len;
 8001b30:	68ba      	ldr	r2, [r7, #8]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	61fb      	str	r3, [r7, #28]
     while (last_bit - src_offset)
 8001b38:	e04d      	b.n	8001bd6 <copyBitArray+0xd8>
     {
         const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	76fb      	strb	r3, [r7, #27]
         const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 8001b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	76bb      	strb	r3, [r7, #26]

         const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
 8001b4e:	7eba      	ldrb	r2, [r7, #26]
 8001b50:	7efb      	ldrb	r3, [r7, #27]
 8001b52:	4293      	cmp	r3, r2
 8001b54:	bf38      	it	cc
 8001b56:	4613      	movcc	r3, r2
 8001b58:	767b      	strb	r3, [r7, #25]
         const uint32_t copy_bits = (uint32_t)MIN(last_bit - src_offset, 8U - max_offset);
 8001b5a:	7e7b      	ldrb	r3, [r7, #25]
 8001b5c:	f1c3 0208 	rsb	r2, r3, #8
 8001b60:	69f9      	ldr	r1, [r7, #28]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	1acb      	subs	r3, r1, r3
 8001b66:	4293      	cmp	r3, r2
 8001b68:	bf28      	it	cs
 8001b6a:	4613      	movcs	r3, r2
 8001b6c:	617b      	str	r3, [r7, #20]
         const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset)&0xFF;

         dst[dst_offset / 8U] =
             (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask))&0xFF;
 #else
         const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
 8001b6e:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	7ebb      	ldrb	r3, [r7, #26]
 8001b7e:	fa42 f303 	asr.w	r3, r2, r3
 8001b82:	74fb      	strb	r3, [r7, #19]
         const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset);
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	08db      	lsrs	r3, r3, #3
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	7efb      	ldrb	r3, [r7, #27]
 8001b92:	409a      	lsls	r2, r3
 8001b94:	7ebb      	ldrb	r3, [r7, #26]
 8001b96:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9a:	74bb      	strb	r3, [r7, #18]

         dst[dst_offset / 8U] =
             (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8001b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b9e:	08db      	lsrs	r3, r3, #3
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	781a      	ldrb	r2, [r3, #0]
 8001ba6:	7cfb      	ldrb	r3, [r7, #19]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	4013      	ands	r3, r2
 8001bae:	b2d9      	uxtb	r1, r3
 8001bb0:	7cba      	ldrb	r2, [r7, #18]
 8001bb2:	7cfb      	ldrb	r3, [r7, #19]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	b2da      	uxtb	r2, r3
         dst[dst_offset / 8U] =
 8001bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bba:	08db      	lsrs	r3, r3, #3
 8001bbc:	6838      	ldr	r0, [r7, #0]
 8001bbe:	4403      	add	r3, r0
             (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	b2d2      	uxtb	r2, r2
         dst[dst_offset / 8U] =
 8001bc4:	701a      	strb	r2, [r3, #0]
 #endif

         src_offset += copy_bits;
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	4413      	add	r3, r2
 8001bcc:	60bb      	str	r3, [r7, #8]
         dst_offset += copy_bits;
 8001bce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
     while (last_bit - src_offset)
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d1ad      	bne.n	8001b3a <copyBitArray+0x3c>
     }
 }
 8001bde:	bf00      	nop
 8001be0:	bf00      	nop
 8001be2:	3724      	adds	r7, #36	@ 0x24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <descatterTransferPayload>:

 CANARD_INTERNAL int16_t descatterTransferPayload(const CanardRxTransfer* transfer,
                                                  uint32_t bit_offset,
                                                  uint8_t bit_length,
                                                  void* output)
 {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b090      	sub	sp, #64	@ 0x40
 8001bf0:	af02      	add	r7, sp, #8
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	71fb      	strb	r3, [r7, #7]
     CANARD_ASSERT(transfer != 0);

     if (bit_offset >= transfer->payload_len * 8)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8a9b      	ldrh	r3, [r3, #20]
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	461a      	mov	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d301      	bcc.n	8001c0e <descatterTransferPayload+0x22>
     {
         return 0;       // Out of range, reading zero bits
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e0df      	b.n	8001dce <descatterTransferPayload+0x1e2>
     }

     if (bit_offset + bit_length > transfer->payload_len * 8)
 8001c0e:	79fa      	ldrb	r2, [r7, #7]
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	4413      	add	r3, r2
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	8a92      	ldrh	r2, [r2, #20]
 8001c18:	00d2      	lsls	r2, r2, #3
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d908      	bls.n	8001c30 <descatterTransferPayload+0x44>
     {
         bit_length = (uint8_t)(transfer->payload_len * 8U - bit_offset);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8a9b      	ldrh	r3, [r3, #20]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	71fb      	strb	r3, [r7, #7]
     }

     CANARD_ASSERT(bit_length > 0);

     if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d104      	bne.n	8001c42 <descatterTransferPayload+0x56>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 80b9 	beq.w	8001db4 <descatterTransferPayload+0x1c8>
         /*
          * This part is hideously complicated and probably should be redesigned.
          * The objective here is to copy the requested number of bits from scattered storage into the temporary
          * local storage. We go through great pains to ensure that all corner cases are handled correctly.
          */
         uint32_t input_bit_offset = bit_offset;
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	637b      	str	r3, [r7, #52]	@ 0x34
         uint8_t output_bit_offset = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
         uint8_t remaining_bit_length = bit_length;
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

         // Reading head
         if (input_bit_offset < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8)
 8001c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c54:	2b27      	cmp	r3, #39	@ 0x27
 8001c56:	d82d      	bhi.n	8001cb4 <descatterTransferPayload+0xc8>
         {
             const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
 8001c58:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c5e:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d305      	bcc.n	8001c72 <descatterTransferPayload+0x86>
 8001c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	e001      	b.n	8001c76 <descatterTransferPayload+0x8a>
 8001c72:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                                 CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input_bit_offset);

             copyBitArray(&transfer->payload_head[0], input_bit_offset, amount, (uint8_t*) output, 0);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6898      	ldr	r0, [r3, #8]
 8001c7e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001c82:	2300      	movs	r3, #0
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001c8a:	f7ff ff38 	bl	8001afe <copyBitArray>

             input_bit_offset += amount;
 8001c8e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001c94:	4413      	add	r3, r2
 8001c96:	637b      	str	r3, [r7, #52]	@ 0x34
             output_bit_offset = (uint8_t)(output_bit_offset + amount);
 8001c98:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001c9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
             remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 8001ca6:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001caa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
         }

         // Reading middle
         uint32_t remaining_bits = (uint32_t)(transfer->payload_len * 8U - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8a9b      	ldrh	r3, [r3, #20]
 8001cb8:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8001cbc:	3b05      	subs	r3, #5
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
         uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 8001cc2:	2328      	movs	r3, #40	@ 0x28
 8001cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
         const CanardBufferBlock* block = transfer->payload_middle;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	627b      	str	r3, [r7, #36]	@ 0x24

         while ((block != NULL) && (remaining_bit_length > 0))
 8001ccc:	e044      	b.n	8001d58 <descatterTransferPayload+0x16c>
         {
             CANARD_ASSERT(remaining_bits > 0);
             const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_SIZE * 8,
 8001cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cd0:	2be0      	cmp	r3, #224	@ 0xe0
 8001cd2:	bf28      	it	cs
 8001cd4:	23e0      	movcs	r3, #224	@ 0xe0
 8001cd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001cd8:	4413      	add	r3, r2
 8001cda:	61fb      	str	r3, [r7, #28]
                                                                          remaining_bits);

             // Perform copy if we've reached the requested offset, otherwise jump over this block and try next
             if (block_end_bit_offset > input_bit_offset)
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d92e      	bls.n	8001d42 <descatterTransferPayload+0x156>
             {
                 const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - input_bit_offset);
 8001ce4:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001ce8:	69f9      	ldr	r1, [r7, #28]
 8001cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cec:	1acb      	subs	r3, r1, r3
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d306      	bcc.n	8001d00 <descatterTransferPayload+0x114>
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	e001      	b.n	8001d04 <descatterTransferPayload+0x118>
 8001d00:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001d04:	76fb      	strb	r3, [r7, #27]

                 CANARD_ASSERT(input_bit_offset >= block_bit_offset);
                 const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 8001d06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	617b      	str	r3, [r7, #20]

                 copyBitArray(&block->data[0], bit_offset_within_block, amount, (uint8_t*) output, output_bit_offset);
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d10:	1d18      	adds	r0, r3, #4
 8001d12:	7efa      	ldrb	r2, [r7, #27]
 8001d14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	6979      	ldr	r1, [r7, #20]
 8001d1e:	f7ff feee 	bl	8001afe <copyBitArray>

                 input_bit_offset += amount;
 8001d22:	7efb      	ldrb	r3, [r7, #27]
 8001d24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d26:	4413      	add	r3, r2
 8001d28:	637b      	str	r3, [r7, #52]	@ 0x34
                 output_bit_offset = (uint8_t)(output_bit_offset + amount);
 8001d2a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001d2e:	7efb      	ldrb	r3, [r7, #27]
 8001d30:	4413      	add	r3, r2
 8001d32:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                 remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 8001d36:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001d3a:	7efb      	ldrb	r3, [r7, #27]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
             }

             CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
             remaining_bits -= block_end_bit_offset - block_bit_offset;
 8001d42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d4a:	4413      	add	r3, r2
 8001d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
             block_bit_offset = block_end_bit_offset;
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	62bb      	str	r3, [r7, #40]	@ 0x28
             block = block->next;
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	627b      	str	r3, [r7, #36]	@ 0x24
         while ((block != NULL) && (remaining_bit_length > 0))
 8001d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <descatterTransferPayload+0x17a>
 8001d5e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1b3      	bne.n	8001cce <descatterTransferPayload+0xe2>
         }

         CANARD_ASSERT(remaining_bit_length <= remaining_bits);

         // Reading tail
         if ((transfer->payload_tail != NULL) && (remaining_bit_length > 0))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d02c      	beq.n	8001dc8 <descatterTransferPayload+0x1dc>
 8001d6e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d028      	beq.n	8001dc8 <descatterTransferPayload+0x1dc>
         {
             CANARD_ASSERT(input_bit_offset >= block_bit_offset);
             const uint32_t offset = input_bit_offset - block_bit_offset;
 8001d76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	613b      	str	r3, [r7, #16]

             copyBitArray(&transfer->payload_tail[0], offset, remaining_bit_length, (uint8_t*) output,
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6918      	ldr	r0, [r3, #16]
 8001d82:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001d86:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	6939      	ldr	r1, [r7, #16]
 8001d90:	f7ff feb5 	bl	8001afe <copyBitArray>
                          output_bit_offset);

             input_bit_offset += remaining_bit_length;
 8001d94:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001d98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d9a:	4413      	add	r3, r2
 8001d9c:	637b      	str	r3, [r7, #52]	@ 0x34
             output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
 8001d9e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001da2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001da6:	4413      	add	r3, r2
 8001da8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
             remaining_bit_length = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
     {
 8001db2:	e009      	b.n	8001dc8 <descatterTransferPayload+0x1dc>
         CANARD_ASSERT(output_bit_offset <= 64);
         CANARD_ASSERT(remaining_bit_length == 0);
     }
     else                                                                    // Single frame
     {
         copyBitArray(&transfer->payload_head[0], bit_offset, bit_length, (uint8_t*) output, 0);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6898      	ldr	r0, [r3, #8]
 8001db8:	79fa      	ldrb	r2, [r7, #7]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	f7ff fe9c 	bl	8001afe <copyBitArray>
 8001dc6:	e000      	b.n	8001dca <descatterTransferPayload+0x1de>
     {
 8001dc8:	bf00      	nop
     }

     return bit_length;
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	b21b      	sxth	r3, r3
 }
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3738      	adds	r7, #56	@ 0x38
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <isBigEndian>:

 CANARD_INTERNAL bool isBigEndian(void)
 {
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 #else
         uint16_t a;
         uint8_t b[2];
 #endif
     } u;
     u.a = 1;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	80bb      	strh	r3, [r7, #4]
     return u.b[1] == 1;                             // Some don't...
 8001de0:	797b      	ldrb	r3, [r7, #5]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	bf0c      	ite	eq
 8001de6:	2301      	moveq	r3, #1
 8001de8:	2300      	movne	r3, #0
 8001dea:	b2db      	uxtb	r3, r3
 #endif
 }
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <swapByteOrder>:

 CANARD_INTERNAL void swapByteOrder(void* data, unsigned size)
 {
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
     CANARD_ASSERT(data != NULL);

     uint8_t* const bytes = (uint8_t*) data;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	60fb      	str	r3, [r7, #12]

     size_t fwd = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
     size_t rev = size - 1;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	613b      	str	r3, [r7, #16]

     while (fwd < rev)
 8001e10:	e017      	b.n	8001e42 <swapByteOrder+0x4a>
     {
         const uint8_t x = bytes[fwd];
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	4413      	add	r3, r2
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	72fb      	strb	r3, [r7, #11]
         bytes[fwd] = bytes[rev];
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	441a      	add	r2, r3
 8001e22:	68f9      	ldr	r1, [r7, #12]
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	440b      	add	r3, r1
 8001e28:	7812      	ldrb	r2, [r2, #0]
 8001e2a:	701a      	strb	r2, [r3, #0]
         bytes[rev] = x;
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4413      	add	r3, r2
 8001e32:	7afa      	ldrb	r2, [r7, #11]
 8001e34:	701a      	strb	r2, [r3, #0]
         fwd++;
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	617b      	str	r3, [r7, #20]
         rev--;
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	613b      	str	r3, [r7, #16]
     while (fwd < rev)
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d3e3      	bcc.n	8001e12 <swapByteOrder+0x1a>
     }
 }
 8001e4a:	bf00      	nop
 8001e4c:	bf00      	nop
 8001e4e:	371c      	adds	r7, #28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <crcAddByte>:

 /*
  * CRC functions
  */
 CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
 {
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	460a      	mov	r2, r1
 8001e62:	80fb      	strh	r3, [r7, #6]
 8001e64:	4613      	mov	r3, r2
 8001e66:	717b      	strb	r3, [r7, #5]
     crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 8001e68:	797b      	ldrb	r3, [r7, #5]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	021b      	lsls	r3, r3, #8
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	88fb      	ldrh	r3, [r7, #6]
 8001e72:	4053      	eors	r3, r2
 8001e74:	80fb      	strh	r3, [r7, #6]
     for (uint8_t j = 0; j < 8; j++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	73fb      	strb	r3, [r7, #15]
 8001e7a:	e012      	b.n	8001ea2 <crcAddByte+0x4a>
     {
         if (crc_val & 0x8000U)
 8001e7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	da08      	bge.n	8001e96 <crcAddByte+0x3e>
         {
             crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8001e8e:	f083 0301 	eor.w	r3, r3, #1
 8001e92:	80fb      	strh	r3, [r7, #6]
 8001e94:	e002      	b.n	8001e9c <crcAddByte+0x44>
         }
         else
         {
             crc_val = (uint16_t) (crc_val << 1U);
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	80fb      	strh	r3, [r7, #6]
     for (uint8_t j = 0; j < 8; j++)
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	73fb      	strb	r3, [r7, #15]
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	2b07      	cmp	r3, #7
 8001ea6:	d9e9      	bls.n	8001e7c <crcAddByte+0x24>
         }
     }
     return crc_val;
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 }
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <crcAddSignature>:

 CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
 {
 8001eb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eb8:	b087      	sub	sp, #28
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4601      	mov	r1, r0
 8001ebe:	e9c7 2300 	strd	r2, r3, [r7]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	81fb      	strh	r3, [r7, #14]
     for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	82fb      	strh	r3, [r7, #22]
 8001eca:	e01b      	b.n	8001f04 <crcAddSignature+0x4e>
     {
         crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 8001ecc:	8af9      	ldrh	r1, [r7, #22]
 8001ece:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ed2:	f1c1 0620 	rsb	r6, r1, #32
 8001ed6:	f1a1 0020 	sub.w	r0, r1, #32
 8001eda:	fa22 f401 	lsr.w	r4, r2, r1
 8001ede:	fa03 f606 	lsl.w	r6, r3, r6
 8001ee2:	4334      	orrs	r4, r6
 8001ee4:	fa23 f000 	lsr.w	r0, r3, r0
 8001ee8:	4304      	orrs	r4, r0
 8001eea:	fa23 f501 	lsr.w	r5, r3, r1
 8001eee:	b2e2      	uxtb	r2, r4
 8001ef0:	89fb      	ldrh	r3, [r7, #14]
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ffaf 	bl	8001e58 <crcAddByte>
 8001efa:	4603      	mov	r3, r0
 8001efc:	81fb      	strh	r3, [r7, #14]
     for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8001efe:	8afb      	ldrh	r3, [r7, #22]
 8001f00:	3308      	adds	r3, #8
 8001f02:	82fb      	strh	r3, [r7, #22]
 8001f04:	8afb      	ldrh	r3, [r7, #22]
 8001f06:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f08:	d9e0      	bls.n	8001ecc <crcAddSignature+0x16>
     }
     return crc_val;
 8001f0a:	89fb      	ldrh	r3, [r7, #14]
 }
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	371c      	adds	r7, #28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f14 <crcAdd>:

 CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
 {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
 8001f20:	81fb      	strh	r3, [r7, #14]
     while (len--)
 8001f22:	e00a      	b.n	8001f3a <crcAdd+0x26>
     {
         crc_val = crcAddByte(crc_val, *bytes++);
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	60ba      	str	r2, [r7, #8]
 8001f2a:	781a      	ldrb	r2, [r3, #0]
 8001f2c:	89fb      	ldrh	r3, [r7, #14]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff91 	bl	8001e58 <crcAddByte>
 8001f36:	4603      	mov	r3, r0
 8001f38:	81fb      	strh	r3, [r7, #14]
     while (len--)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	1e5a      	subs	r2, r3, #1
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1ef      	bne.n	8001f24 <crcAdd+0x10>
     }
     return crc_val;
 8001f44:	89fb      	ldrh	r3, [r7, #14]
 }
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <initPoolAllocator>:
  *  Pool Allocator functions
  */
 CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
                                        void* buf,
                                        uint16_t buf_len)
 {
 8001f4e:	b480      	push	{r7}
 8001f50:	b089      	sub	sp, #36	@ 0x24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	80fb      	strh	r3, [r7, #6]
     size_t current_index = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61fb      	str	r3, [r7, #28]
     CanardPoolAllocatorBlock *abuf = buf;
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	617b      	str	r3, [r7, #20]
     allocator->arena = buf;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	611a      	str	r2, [r3, #16]
     CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	61bb      	str	r3, [r7, #24]
     while (current_index < buf_len)
 8001f70:	e00b      	b.n	8001f8a <initPoolAllocator+0x3c>
     {
         *current_block = &abuf[current_index];
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	015b      	lsls	r3, r3, #5
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	441a      	add	r2, r3
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	601a      	str	r2, [r3, #0]
         current_block = &((*current_block)->next);
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	61bb      	str	r3, [r7, #24]
         current_index++;
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	3301      	adds	r3, #1
 8001f88:	61fb      	str	r3, [r7, #28]
     while (current_index < buf_len)
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	69fa      	ldr	r2, [r7, #28]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d3ef      	bcc.n	8001f72 <initPoolAllocator+0x24>
     }
     *current_block = NULL;
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]

     allocator->statistics.capacity_blocks = buf_len;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	88fa      	ldrh	r2, [r7, #6]
 8001f9c:	811a      	strh	r2, [r3, #8]
     allocator->statistics.current_usage_blocks = 0;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	815a      	strh	r2, [r3, #10]
     allocator->statistics.peak_usage_blocks = 0;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	819a      	strh	r2, [r3, #12]
     // user should initialize semaphore after the canardInit
     // or at first call of canard_allocate_sem_take
     allocator->semaphore = NULL;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 }
 8001fb0:	bf00      	nop
 8001fb2:	3724      	adds	r7, #36	@ 0x24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <allocateBlock>:

 CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
 {
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_take(allocator);
 #endif
     // Check if there are any blocks available in the free list.
     if (allocator->free_list == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <allocateBlock+0x14>
     {
 #if CANARD_ALLOCATE_SEM
         canard_allocate_sem_give(allocator);
 #endif
         return NULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e018      	b.n	8002002 <allocateBlock+0x46>
     }

     // Take first available block and prepares next block for use.
     void* result = allocator->free_list;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	60fb      	str	r3, [r7, #12]
     allocator->free_list = allocator->free_list->next;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	605a      	str	r2, [r3, #4]

     // Update statistics
     allocator->statistics.current_usage_blocks++;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	895b      	ldrh	r3, [r3, #10]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	815a      	strh	r2, [r3, #10]
     if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	899a      	ldrh	r2, [r3, #12]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	895b      	ldrh	r3, [r3, #10]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d203      	bcs.n	8002000 <allocateBlock+0x44>
     {
         allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	895a      	ldrh	r2, [r3, #10]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	819a      	strh	r2, [r3, #12]
     }
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_give(allocator);
 #endif
     return result;
 8002000:	68fb      	ldr	r3, [r7, #12]
 }
 8002002:	4618      	mov	r0, r3
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <freeBlock>:

 CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
 {
 800200e:	b480      	push	{r7}
 8002010:	b085      	sub	sp, #20
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	6039      	str	r1, [r7, #0]
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_take(allocator);
 #endif
     CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	60fb      	str	r3, [r7, #12]

     block->next = allocator->free_list;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	601a      	str	r2, [r3, #0]
     allocator->free_list = block;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	605a      	str	r2, [r3, #4]

     CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
     allocator->statistics.current_usage_blocks--;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	895b      	ldrh	r3, [r3, #10]
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	815a      	strh	r2, [r3, #10]
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_give(allocator);
 #endif
 }
 8002036:	bf00      	nop
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <_Z12FDCAN_Configv>:
FDCAN_RxHeaderTypeDef RxHeader;
uint8_t RxData[8];

FDCAN_FilterTypeDef sFilterConfig;

void FDCAN_Config(void) {
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0


    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8002048:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <_Z12FDCAN_Configv+0x4c>)
 800204a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800204e:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIndex = 0;
 8002050:	4b0f      	ldr	r3, [pc, #60]	@ (8002090 <_Z12FDCAN_Configv+0x4c>)
 8002052:	2200      	movs	r2, #0
 8002054:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8002056:	4b0e      	ldr	r3, [pc, #56]	@ (8002090 <_Z12FDCAN_Configv+0x4c>)
 8002058:	2202      	movs	r2, #2
 800205a:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800205c:	4b0c      	ldr	r3, [pc, #48]	@ (8002090 <_Z12FDCAN_Configv+0x4c>)
 800205e:	2201      	movs	r2, #1
 8002060:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterID1 = NODE_ID;
 8002062:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <_Z12FDCAN_Configv+0x4c>)
 8002064:	2201      	movs	r2, #1
 8002066:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterID2 = 0x0; // receive messages from all ids
 8002068:	4b09      	ldr	r3, [pc, #36]	@ (8002090 <_Z12FDCAN_Configv+0x4c>)
 800206a:	2200      	movs	r2, #0
 800206c:	615a      	str	r2, [r3, #20]

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 800206e:	4908      	ldr	r1, [pc, #32]	@ (8002090 <_Z12FDCAN_Configv+0x4c>)
 8002070:	4808      	ldr	r0, [pc, #32]	@ (8002094 <_Z12FDCAN_Configv+0x50>)
 8002072:	f001 f987 	bl	8003384 <HAL_FDCAN_ConfigFilter>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	bf14      	ite	ne
 800207c:	2301      	movne	r3, #1
 800207e:	2300      	moveq	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <_Z12FDCAN_Configv+0x46>
        Error_Handler();
 8002086:	f000 f9b9 	bl	80023fc <Error_Handler>
    }
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	2000056c 	.word	0x2000056c
 8002094:	200004b4 	.word	0x200004b4

08002098 <_Z14FDCAN_Activatev>:

void FDCAN_Activate(void) {
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 800209c:	2200      	movs	r2, #0
 800209e:	2101      	movs	r1, #1
 80020a0:	4807      	ldr	r0, [pc, #28]	@ (80020c0 <_Z14FDCAN_Activatev+0x28>)
 80020a2:	f001 fb4f 	bl	8003744 <HAL_FDCAN_ActivateNotification>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bf14      	ite	ne
 80020ac:	2301      	movne	r3, #1
 80020ae:	2300      	moveq	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <_Z14FDCAN_Activatev+0x22>
        Error_Handler();
 80020b6:	f000 f9a1 	bl	80023fc <Error_Handler>
    }
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	200004b4 	.word	0x200004b4

080020c4 <HAL_FDCAN_RxFifo0Callback>:
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
        Error_Handler();
    }
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]

//    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80020ce:	4b0b      	ldr	r3, [pc, #44]	@ (80020fc <HAL_FDCAN_RxFifo0Callback+0x38>)
 80020d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002100 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 80020d2:	2140      	movs	r1, #64	@ 0x40
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f001 fa1b 	bl	8003510 <HAL_FDCAN_GetRxMessage>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	bf14      	ite	ne
 80020e0:	2301      	movne	r3, #1
 80020e2:	2300      	moveq	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_FDCAN_RxFifo0Callback+0x2a>
            // Process received data (e.g., print it)
        	Error_Handler();
 80020ea:	f000 f987 	bl	80023fc <Error_Handler>
        }

        FDCAN_Activate(); // test with and without this re-activation
 80020ee:	f7ff ffd3 	bl	8002098 <_Z14FDCAN_Activatev>
//    }
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000564 	.word	0x20000564
 8002100:	2000053c 	.word	0x2000053c

08002104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	f5ad 6d45 	sub.w	sp, sp, #3152	@ 0xc50
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800210c:	f000 fdda 	bl	8002cc4 <HAL_Init>

  /* USER CODE BEGIN Init */
  CAN can(&hfdcan1);
 8002110:	463b      	mov	r3, r7
 8002112:	4933      	ldr	r1, [pc, #204]	@ (80021e0 <main+0xdc>)
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe fc93 	bl	8000a40 <_ZN3CANC1EP19FDCAN_HandleTypeDef>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800211a:	f000 f867 	bl	80021ec <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800211e:	f000 f931 	bl	8002384 <_ZL12MX_GPIO_Initv>
  MX_ICACHE_Init();
 8002122:	f000 f911 	bl	8002348 <_ZL14MX_ICACHE_Initv>
  MX_FDCAN1_Init();
 8002126:	f000 f8c1 	bl	80022ac <_ZL14MX_FDCAN1_Initv>
  /* USER CODE BEGIN 2 */
  FDCAN_Activate();
 800212a:	f7ff ffb5 	bl	8002098 <_Z14FDCAN_Activatev>
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 800212e:	482c      	ldr	r0, [pc, #176]	@ (80021e0 <main+0xdc>)
 8002130:	f001 f982 	bl	8003438 <HAL_FDCAN_Start>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	bf14      	ite	ne
 800213a:	2301      	movne	r3, #1
 800213c:	2300      	moveq	r3, #0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <main+0x44>
	  Error_Handler();
 8002144:	f000 f95a 	bl	80023fc <Error_Handler>
  }

  TxHeader.Identifier = NODE_ID;
 8002148:	4b26      	ldr	r3, [pc, #152]	@ (80021e4 <main+0xe0>)
 800214a:	2201      	movs	r2, #1
 800214c:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_EXTENDED_ID;
 800214e:	4b25      	ldr	r3, [pc, #148]	@ (80021e4 <main+0xe0>)
 8002150:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002154:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002156:	4b23      	ldr	r3, [pc, #140]	@ (80021e4 <main+0xe0>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800215c:	4b21      	ldr	r3, [pc, #132]	@ (80021e4 <main+0xe0>)
 800215e:	2208      	movs	r2, #8
 8002160:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002162:	4b20      	ldr	r3, [pc, #128]	@ (80021e4 <main+0xe0>)
 8002164:	2200      	movs	r2, #0
 8002166:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8002168:	4b1e      	ldr	r3, [pc, #120]	@ (80021e4 <main+0xe0>)
 800216a:	2200      	movs	r2, #0
 800216c:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800216e:	4b1d      	ldr	r3, [pc, #116]	@ (80021e4 <main+0xe0>)
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8002174:	4b1b      	ldr	r3, [pc, #108]	@ (80021e4 <main+0xe0>)
 8002176:	2200      	movs	r2, #0
 8002178:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 800217a:	4b1a      	ldr	r3, [pc, #104]	@ (80021e4 <main+0xe0>)
 800217c:	2200      	movs	r2, #0
 800217e:	621a      	str	r2, [r3, #32]
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8002180:	2000      	movs	r0, #0
 8002182:	f000 faf7 	bl	8002774 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8002186:	2001      	movs	r0, #1
 8002188:	f000 faf4 	bl	8002774 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800218c:	2002      	movs	r0, #2
 800218e:	f000 faf1 	bl	8002774 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8002192:	2101      	movs	r1, #1
 8002194:	2000      	movs	r0, #0
 8002196:	f000 fb4b 	bl	8002830 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800219a:	4b13      	ldr	r3, [pc, #76]	@ (80021e8 <main+0xe4>)
 800219c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021a0:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80021a2:	4b11      	ldr	r3, [pc, #68]	@ (80021e8 <main+0xe4>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80021a8:	4b0f      	ldr	r3, [pc, #60]	@ (80021e8 <main+0xe4>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80021ae:	4b0e      	ldr	r3, [pc, #56]	@ (80021e8 <main+0xe4>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80021b4:	4b0c      	ldr	r3, [pc, #48]	@ (80021e8 <main+0xe4>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80021ba:	490b      	ldr	r1, [pc, #44]	@ (80021e8 <main+0xe4>)
 80021bc:	2000      	movs	r0, #0
 80021be:	f000 fbf3 	bl	80029a8 <BSP_COM_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf14      	ite	ne
 80021c8:	2301      	movne	r3, #1
 80021ca:	2300      	moveq	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <main+0xd2>
  {
    Error_Handler();
 80021d2:	f000 f913 	bl	80023fc <Error_Handler>
//			  UAVCAN_PROTOCOL_NODESTATUS_ID,
//			  &transfer_id,
//			  CANARD_TRANSFER_PRIORITY_HIGH,
//			  heartbeat_payload,
//			  sizeof(heartbeat_payload));
	  can.routineTasks();
 80021d6:	463b      	mov	r3, r7
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe fe0d 	bl	8000df8 <_ZN3CAN12routineTasksEv>
 80021de:	e7fa      	b.n	80021d6 <main+0xd2>
 80021e0:	200004b4 	.word	0x200004b4
 80021e4:	20000518 	.word	0x20000518
 80021e8:	200004a4 	.word	0x200004a4

080021ec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b098      	sub	sp, #96	@ 0x60
 80021f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021f2:	f107 0318 	add.w	r3, r7, #24
 80021f6:	2248      	movs	r2, #72	@ 0x48
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f004 face 	bl	800679c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	60da      	str	r2, [r3, #12]
 800220c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800220e:	2000      	movs	r0, #0
 8002210:	f001 ffc2 	bl	8004198 <HAL_PWREx_ControlVoltageScaling>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	bf14      	ite	ne
 800221a:	2301      	movne	r3, #1
 800221c:	2300      	moveq	r3, #0
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8002224:	f000 f8ea 	bl	80023fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002228:	2310      	movs	r3, #16
 800222a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800222c:	2301      	movs	r3, #1
 800222e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002230:	2300      	movs	r3, #0
 8002232:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002234:	2360      	movs	r3, #96	@ 0x60
 8002236:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002238:	2302      	movs	r3, #2
 800223a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800223c:	2301      	movs	r3, #1
 800223e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002240:	2301      	movs	r3, #1
 8002242:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8002244:	2337      	movs	r3, #55	@ 0x37
 8002246:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002248:	2307      	movs	r3, #7
 800224a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800224c:	2302      	movs	r3, #2
 800224e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002250:	2302      	movs	r3, #2
 8002252:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002254:	f107 0318 	add.w	r3, r7, #24
 8002258:	4618      	mov	r0, r3
 800225a:	f002 f83d 	bl	80042d8 <HAL_RCC_OscConfig>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf14      	ite	ne
 8002264:	2301      	movne	r3, #1
 8002266:	2300      	moveq	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 800226e:	f000 f8c5 	bl	80023fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002272:	230f      	movs	r3, #15
 8002274:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002276:	2303      	movs	r3, #3
 8002278:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002286:	1d3b      	adds	r3, r7, #4
 8002288:	2105      	movs	r1, #5
 800228a:	4618      	mov	r0, r3
 800228c:	f002 fcfa 	bl	8004c84 <HAL_RCC_ClockConfig>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	bf14      	ite	ne
 8002296:	2301      	movne	r3, #1
 8002298:	2300      	moveq	r3, #0
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 80022a0:	f000 f8ac 	bl	80023fc <Error_Handler>
  }
}
 80022a4:	bf00      	nop
 80022a6:	3760      	adds	r7, #96	@ 0x60
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80022b0:	4b23      	ldr	r3, [pc, #140]	@ (8002340 <_ZL14MX_FDCAN1_Initv+0x94>)
 80022b2:	4a24      	ldr	r2, [pc, #144]	@ (8002344 <_ZL14MX_FDCAN1_Initv+0x98>)
 80022b4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV4;
 80022b6:	4b22      	ldr	r3, [pc, #136]	@ (8002340 <_ZL14MX_FDCAN1_Initv+0x94>)
 80022b8:	2202      	movs	r2, #2
 80022ba:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80022bc:	4b20      	ldr	r3, [pc, #128]	@ (8002340 <_ZL14MX_FDCAN1_Initv+0x94>)
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80022c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002340 <_ZL14MX_FDCAN1_Initv+0x94>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80022c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002340 <_ZL14MX_FDCAN1_Initv+0x94>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80022ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002340 <_ZL14MX_FDCAN1_Initv+0x94>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80022d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002340 <_ZL14MX_FDCAN1_Initv+0x94>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 80022da:	4b19      	ldr	r3, [pc, #100]	@ (8002340 <_ZL14MX_FDCAN1_Initv+0x94>)
 80022dc:	2204      	movs	r2, #4
 80022de:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80022e0:	4b17      	ldr	r3, [pc, #92]	@ (8002340 <_ZL14MX_FDCAN1_Initv+0x94>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 80022e6:	4b16      	ldr	r3, [pc, #88]	@ (8002340 <_ZL14MX_FDCAN1_Initv+0x94>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 80022ec:	4b14      	ldr	r3, [pc, #80]	@ (8002340 <_ZL14MX_FDCAN1_Initv+0x94>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 80022f2:	4b13      	ldr	r3, [pc, #76]	@ (8002340 <_ZL14MX_FDCAN1_Initv+0x94>)
 80022f4:	2204      	movs	r2, #4
 80022f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80022f8:	4b11      	ldr	r3, [pc, #68]	@ (8002340 <_ZL14MX_FDCAN1_Initv+0x94>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80022fe:	4b10      	ldr	r3, [pc, #64]	@ (8002340 <_ZL14MX_FDCAN1_Initv+0x94>)
 8002300:	2201      	movs	r2, #1
 8002302:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002304:	4b0e      	ldr	r3, [pc, #56]	@ (8002340 <_ZL14MX_FDCAN1_Initv+0x94>)
 8002306:	2201      	movs	r2, #1
 8002308:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800230a:	4b0d      	ldr	r3, [pc, #52]	@ (8002340 <_ZL14MX_FDCAN1_Initv+0x94>)
 800230c:	2200      	movs	r2, #0
 800230e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 8002310:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <_ZL14MX_FDCAN1_Initv+0x94>)
 8002312:	2201      	movs	r2, #1
 8002314:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002316:	4b0a      	ldr	r3, [pc, #40]	@ (8002340 <_ZL14MX_FDCAN1_Initv+0x94>)
 8002318:	2200      	movs	r2, #0
 800231a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800231c:	4808      	ldr	r0, [pc, #32]	@ (8002340 <_ZL14MX_FDCAN1_Initv+0x94>)
 800231e:	f000 fedf 	bl	80030e0 <HAL_FDCAN_Init>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	bf14      	ite	ne
 8002328:	2301      	movne	r3, #1
 800232a:	2300      	moveq	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 8002332:	f000 f863 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_Config();
 8002336:	f7ff fe85 	bl	8002044 <_Z12FDCAN_Configv>

  /* USER CODE END FDCAN1_Init 2 */

}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	200004b4 	.word	0x200004b4
 8002344:	4000a400 	.word	0x4000a400

08002348 <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800234c:	2000      	movs	r0, #0
 800234e:	f001 fee5 	bl	800411c <HAL_ICACHE_ConfigAssociativityMode>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	bf14      	ite	ne
 8002358:	2301      	movne	r3, #1
 800235a:	2300      	moveq	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <_ZL14MX_ICACHE_Initv+0x1e>
  {
    Error_Handler();
 8002362:	f000 f84b 	bl	80023fc <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8002366:	f001 fef9 	bl	800415c <HAL_ICACHE_Enable>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	bf14      	ite	ne
 8002370:	2301      	movne	r3, #1
 8002372:	2300      	moveq	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <_ZL14MX_ICACHE_Initv+0x36>
  {
    Error_Handler();
 800237a:	f000 f83f 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800238a:	4b1b      	ldr	r3, [pc, #108]	@ (80023f8 <_ZL12MX_GPIO_Initv+0x74>)
 800238c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238e:	4a1a      	ldr	r2, [pc, #104]	@ (80023f8 <_ZL12MX_GPIO_Initv+0x74>)
 8002390:	f043 0304 	orr.w	r3, r3, #4
 8002394:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002396:	4b18      	ldr	r3, [pc, #96]	@ (80023f8 <_ZL12MX_GPIO_Initv+0x74>)
 8002398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a2:	4b15      	ldr	r3, [pc, #84]	@ (80023f8 <_ZL12MX_GPIO_Initv+0x74>)
 80023a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a6:	4a14      	ldr	r2, [pc, #80]	@ (80023f8 <_ZL12MX_GPIO_Initv+0x74>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023ae:	4b12      	ldr	r3, [pc, #72]	@ (80023f8 <_ZL12MX_GPIO_Initv+0x74>)
 80023b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ba:	4b0f      	ldr	r3, [pc, #60]	@ (80023f8 <_ZL12MX_GPIO_Initv+0x74>)
 80023bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023be:	4a0e      	ldr	r2, [pc, #56]	@ (80023f8 <_ZL12MX_GPIO_Initv+0x74>)
 80023c0:	f043 0308 	orr.w	r3, r3, #8
 80023c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023c6:	4b0c      	ldr	r3, [pc, #48]	@ (80023f8 <_ZL12MX_GPIO_Initv+0x74>)
 80023c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d2:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <_ZL12MX_GPIO_Initv+0x74>)
 80023d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d6:	4a08      	ldr	r2, [pc, #32]	@ (80023f8 <_ZL12MX_GPIO_Initv+0x74>)
 80023d8:	f043 0302 	orr.w	r3, r3, #2
 80023dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023de:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <_ZL12MX_GPIO_Initv+0x74>)
 80023e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000

080023fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002400:	b672      	cpsid	i
}
 8002402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002404:	bf00      	nop
 8002406:	e7fd      	b.n	8002404 <Error_Handler+0x8>

08002408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240e:	4b0f      	ldr	r3, [pc, #60]	@ (800244c <HAL_MspInit+0x44>)
 8002410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002412:	4a0e      	ldr	r2, [pc, #56]	@ (800244c <HAL_MspInit+0x44>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6613      	str	r3, [r2, #96]	@ 0x60
 800241a:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <HAL_MspInit+0x44>)
 800241c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	4b09      	ldr	r3, [pc, #36]	@ (800244c <HAL_MspInit+0x44>)
 8002428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800242a:	4a08      	ldr	r2, [pc, #32]	@ (800244c <HAL_MspInit+0x44>)
 800242c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002430:	6593      	str	r3, [r2, #88]	@ 0x58
 8002432:	4b06      	ldr	r3, [pc, #24]	@ (800244c <HAL_MspInit+0x44>)
 8002434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800243e:	f001 ff17 	bl	8004270 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000

08002450 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b0ae      	sub	sp, #184	@ 0xb8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002458:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002468:	f107 0310 	add.w	r3, r7, #16
 800246c:	2294      	movs	r2, #148	@ 0x94
 800246e:	2100      	movs	r1, #0
 8002470:	4618      	mov	r0, r3
 8002472:	f004 f993 	bl	800679c <memset>
  if(hfdcan->Instance==FDCAN1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a26      	ldr	r2, [pc, #152]	@ (8002514 <HAL_FDCAN_MspInit+0xc4>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d144      	bne.n	800250a <HAL_FDCAN_MspInit+0xba>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002480:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002484:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002486:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800248a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800248c:	f107 0310 	add.w	r3, r7, #16
 8002490:	4618      	mov	r0, r3
 8002492:	f002 fedb 	bl	800524c <HAL_RCCEx_PeriphCLKConfig>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800249c:	f7ff ffae 	bl	80023fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN1_CLK_ENABLE();
 80024a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002518 <HAL_FDCAN_MspInit+0xc8>)
 80024a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002518 <HAL_FDCAN_MspInit+0xc8>)
 80024a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024aa:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80024ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002518 <HAL_FDCAN_MspInit+0xc8>)
 80024ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024b8:	4b17      	ldr	r3, [pc, #92]	@ (8002518 <HAL_FDCAN_MspInit+0xc8>)
 80024ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024bc:	4a16      	ldr	r2, [pc, #88]	@ (8002518 <HAL_FDCAN_MspInit+0xc8>)
 80024be:	f043 0308 	orr.w	r3, r3, #8
 80024c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024c4:	4b14      	ldr	r3, [pc, #80]	@ (8002518 <HAL_FDCAN_MspInit+0xc8>)
 80024c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024d0:	2303      	movs	r3, #3
 80024d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d6:	2302      	movs	r3, #2
 80024d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e2:	2300      	movs	r3, #0
 80024e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80024e8:	2309      	movs	r3, #9
 80024ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80024f2:	4619      	mov	r1, r3
 80024f4:	4809      	ldr	r0, [pc, #36]	@ (800251c <HAL_FDCAN_MspInit+0xcc>)
 80024f6:	f001 fc79 	bl	8003dec <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80024fa:	2200      	movs	r2, #0
 80024fc:	2100      	movs	r1, #0
 80024fe:	2027      	movs	r0, #39	@ 0x27
 8002500:	f000 fd31 	bl	8002f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002504:	2027      	movs	r0, #39	@ 0x27
 8002506:	f000 fd48 	bl	8002f9a <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 800250a:	bf00      	nop
 800250c:	37b8      	adds	r7, #184	@ 0xb8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	4000a400 	.word	0x4000a400
 8002518:	40021000 	.word	0x40021000
 800251c:	42020c00 	.word	0x42020c00

08002520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002524:	bf00      	nop
 8002526:	e7fd      	b.n	8002524 <NMI_Handler+0x4>

08002528 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <HardFault_Handler+0x4>

08002530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <MemManage_Handler+0x4>

08002538 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <BusFault_Handler+0x4>

08002540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <UsageFault_Handler+0x4>

08002548 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002576:	f000 fbfb 	bl	8002d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}

0800257e <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8002582:	2000      	movs	r0, #0
 8002584:	f000 f9fa 	bl	800297c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8002588:	bf00      	nop
 800258a:	bd80      	pop	{r7, pc}

0800258c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002590:	4802      	ldr	r0, [pc, #8]	@ (800259c <FDCAN1_IT0_IRQHandler+0x10>)
 8002592:	f001 f9bd 	bl	8003910 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	200004b4 	.word	0x200004b4

080025a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80025a4:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <SystemInit+0x20>)
 80025a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025aa:	4a05      	ldr	r2, [pc, #20]	@ (80025c0 <SystemInit+0x20>)
 80025ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80025ca:	4b4f      	ldr	r3, [pc, #316]	@ (8002708 <SystemCoreClockUpdate+0x144>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d107      	bne.n	80025e6 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80025d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002708 <SystemCoreClockUpdate+0x144>)
 80025d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025dc:	0a1b      	lsrs	r3, r3, #8
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	e005      	b.n	80025f2 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80025e6:	4b48      	ldr	r3, [pc, #288]	@ (8002708 <SystemCoreClockUpdate+0x144>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	091b      	lsrs	r3, r3, #4
 80025ec:	f003 030f 	and.w	r3, r3, #15
 80025f0:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80025f2:	4a46      	ldr	r2, [pc, #280]	@ (800270c <SystemCoreClockUpdate+0x148>)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fa:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025fc:	4b42      	ldr	r3, [pc, #264]	@ (8002708 <SystemCoreClockUpdate+0x144>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 030c 	and.w	r3, r3, #12
 8002604:	2b0c      	cmp	r3, #12
 8002606:	d866      	bhi.n	80026d6 <SystemCoreClockUpdate+0x112>
 8002608:	a201      	add	r2, pc, #4	@ (adr r2, 8002610 <SystemCoreClockUpdate+0x4c>)
 800260a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260e:	bf00      	nop
 8002610:	08002645 	.word	0x08002645
 8002614:	080026d7 	.word	0x080026d7
 8002618:	080026d7 	.word	0x080026d7
 800261c:	080026d7 	.word	0x080026d7
 8002620:	0800264d 	.word	0x0800264d
 8002624:	080026d7 	.word	0x080026d7
 8002628:	080026d7 	.word	0x080026d7
 800262c:	080026d7 	.word	0x080026d7
 8002630:	08002655 	.word	0x08002655
 8002634:	080026d7 	.word	0x080026d7
 8002638:	080026d7 	.word	0x080026d7
 800263c:	080026d7 	.word	0x080026d7
 8002640:	0800265d 	.word	0x0800265d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8002644:	4a32      	ldr	r2, [pc, #200]	@ (8002710 <SystemCoreClockUpdate+0x14c>)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	6013      	str	r3, [r2, #0]
      break;
 800264a:	e048      	b.n	80026de <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800264c:	4b30      	ldr	r3, [pc, #192]	@ (8002710 <SystemCoreClockUpdate+0x14c>)
 800264e:	4a31      	ldr	r2, [pc, #196]	@ (8002714 <SystemCoreClockUpdate+0x150>)
 8002650:	601a      	str	r2, [r3, #0]
      break;
 8002652:	e044      	b.n	80026de <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002654:	4b2e      	ldr	r3, [pc, #184]	@ (8002710 <SystemCoreClockUpdate+0x14c>)
 8002656:	4a30      	ldr	r2, [pc, #192]	@ (8002718 <SystemCoreClockUpdate+0x154>)
 8002658:	601a      	str	r2, [r3, #0]
      break;
 800265a:	e040      	b.n	80026de <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800265c:	4b2a      	ldr	r3, [pc, #168]	@ (8002708 <SystemCoreClockUpdate+0x144>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8002666:	4b28      	ldr	r3, [pc, #160]	@ (8002708 <SystemCoreClockUpdate+0x144>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	091b      	lsrs	r3, r3, #4
 800266c:	f003 030f 	and.w	r3, r3, #15
 8002670:	3301      	adds	r3, #1
 8002672:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d003      	beq.n	8002682 <SystemCoreClockUpdate+0xbe>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2b03      	cmp	r3, #3
 800267e:	d006      	beq.n	800268e <SystemCoreClockUpdate+0xca>
 8002680:	e00b      	b.n	800269a <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8002682:	4a24      	ldr	r2, [pc, #144]	@ (8002714 <SystemCoreClockUpdate+0x150>)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	fbb2 f3f3 	udiv	r3, r2, r3
 800268a:	613b      	str	r3, [r7, #16]
          break;
 800268c:	e00b      	b.n	80026a6 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800268e:	4a22      	ldr	r2, [pc, #136]	@ (8002718 <SystemCoreClockUpdate+0x154>)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	fbb2 f3f3 	udiv	r3, r2, r3
 8002696:	613b      	str	r3, [r7, #16]
          break;
 8002698:	e005      	b.n	80026a6 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a2:	613b      	str	r3, [r7, #16]
          break;
 80026a4:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80026a6:	4b18      	ldr	r3, [pc, #96]	@ (8002708 <SystemCoreClockUpdate+0x144>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	0a1b      	lsrs	r3, r3, #8
 80026ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	fb02 f303 	mul.w	r3, r2, r3
 80026b6:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80026b8:	4b13      	ldr	r3, [pc, #76]	@ (8002708 <SystemCoreClockUpdate+0x144>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	0e5b      	lsrs	r3, r3, #25
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	3301      	adds	r3, #1
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002710 <SystemCoreClockUpdate+0x14c>)
 80026d2:	6013      	str	r3, [r2, #0]
      break;
 80026d4:	e003      	b.n	80026de <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80026d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002710 <SystemCoreClockUpdate+0x14c>)
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	6013      	str	r3, [r2, #0]
      break;
 80026dc:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80026de:	4b0a      	ldr	r3, [pc, #40]	@ (8002708 <SystemCoreClockUpdate+0x144>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	091b      	lsrs	r3, r3, #4
 80026e4:	f003 030f 	and.w	r3, r3, #15
 80026e8:	4a0c      	ldr	r2, [pc, #48]	@ (800271c <SystemCoreClockUpdate+0x158>)
 80026ea:	5cd3      	ldrb	r3, [r2, r3]
 80026ec:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80026ee:	4b08      	ldr	r3, [pc, #32]	@ (8002710 <SystemCoreClockUpdate+0x14c>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
 80026f8:	4a05      	ldr	r2, [pc, #20]	@ (8002710 <SystemCoreClockUpdate+0x14c>)
 80026fa:	6013      	str	r3, [r2, #0]
}
 80026fc:	bf00      	nop
 80026fe:	371c      	adds	r7, #28
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	40021000 	.word	0x40021000
 800270c:	08006928 	.word	0x08006928
 8002710:	20000000 	.word	0x20000000
 8002714:	00f42400 	.word	0x00f42400
 8002718:	007a1200 	.word	0x007a1200
 800271c:	08006910 	.word	0x08006910

08002720 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002720:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002758 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002724:	f7ff ff3c 	bl	80025a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002728:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800272a:	e003      	b.n	8002734 <LoopCopyDataInit>

0800272c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800272c:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800272e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002730:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002732:	3104      	adds	r1, #4

08002734 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002734:	480a      	ldr	r0, [pc, #40]	@ (8002760 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002736:	4b0b      	ldr	r3, [pc, #44]	@ (8002764 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002738:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800273a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800273c:	d3f6      	bcc.n	800272c <CopyDataInit>
	ldr	r2, =_sbss
 800273e:	4a0a      	ldr	r2, [pc, #40]	@ (8002768 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002740:	e002      	b.n	8002748 <LoopFillZerobss>

08002742 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002742:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002744:	f842 3b04 	str.w	r3, [r2], #4

08002748 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002748:	4b08      	ldr	r3, [pc, #32]	@ (800276c <LoopForever+0x16>)
	cmp	r2, r3
 800274a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800274c:	d3f9      	bcc.n	8002742 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800274e:	f004 f82d 	bl	80067ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002752:	f7ff fcd7 	bl	8002104 <main>

08002756 <LoopForever>:

LoopForever:
    b LoopForever
 8002756:	e7fe      	b.n	8002756 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002758:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800275c:	080069a0 	.word	0x080069a0
	ldr	r0, =_sdata
 8002760:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002764:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8002768:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 800276c:	200007fc 	.word	0x200007fc

08002770 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002770:	e7fe      	b.n	8002770 <ADC1_2_IRQHandler>
	...

08002774 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	@ 0x28
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LED1)
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10c      	bne.n	800279e <BSP_LED_Init+0x2a>
  {
    LED1_GPIO_CLK_ENABLE();
 8002784:	4b27      	ldr	r3, [pc, #156]	@ (8002824 <BSP_LED_Init+0xb0>)
 8002786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002788:	4a26      	ldr	r2, [pc, #152]	@ (8002824 <BSP_LED_Init+0xb0>)
 800278a:	f043 0304 	orr.w	r3, r3, #4
 800278e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002790:	4b24      	ldr	r3, [pc, #144]	@ (8002824 <BSP_LED_Init+0xb0>)
 8002792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	e01b      	b.n	80027d6 <BSP_LED_Init+0x62>
  }
  else if (Led == LED2)
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d10c      	bne.n	80027be <BSP_LED_Init+0x4a>
  {
    LED2_GPIO_CLK_ENABLE();
 80027a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002824 <BSP_LED_Init+0xb0>)
 80027a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002824 <BSP_LED_Init+0xb0>)
 80027aa:	f043 0302 	orr.w	r3, r3, #2
 80027ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002824 <BSP_LED_Init+0xb0>)
 80027b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	e00b      	b.n	80027d6 <BSP_LED_Init+0x62>
  }
  else /* Led = LED3 */
  {
    LED3_GPIO_CLK_ENABLE();
 80027be:	4b19      	ldr	r3, [pc, #100]	@ (8002824 <BSP_LED_Init+0xb0>)
 80027c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c2:	4a18      	ldr	r2, [pc, #96]	@ (8002824 <BSP_LED_Init+0xb0>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027ca:	4b16      	ldr	r3, [pc, #88]	@ (8002824 <BSP_LED_Init+0xb0>)
 80027cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	68bb      	ldr	r3, [r7, #8]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	4a13      	ldr	r2, [pc, #76]	@ (8002828 <BSP_LED_Init+0xb4>)
 80027da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027de:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 80027e0:	2301      	movs	r3, #1
 80027e2:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_PULLUP;
 80027e4:	2301      	movs	r3, #1
 80027e6:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e8:	2303      	movs	r3, #3
 80027ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	4a0f      	ldr	r2, [pc, #60]	@ (800282c <BSP_LED_Init+0xb8>)
 80027f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f4:	f107 0214 	add.w	r2, r7, #20
 80027f8:	4611      	mov	r1, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f001 faf6 	bl	8003dec <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	4a0a      	ldr	r2, [pc, #40]	@ (800282c <BSP_LED_Init+0xb8>)
 8002804:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	4a07      	ldr	r2, [pc, #28]	@ (8002828 <BSP_LED_Init+0xb4>)
 800280c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002810:	2200      	movs	r2, #0
 8002812:	4619      	mov	r1, r3
 8002814:	f001 fc6a 	bl	80040ec <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3728      	adds	r7, #40	@ 0x28
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40021000 	.word	0x40021000
 8002828:	20000004 	.word	0x20000004
 800282c:	2000000c 	.word	0x2000000c

08002830 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08c      	sub	sp, #48	@ 0x30
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	460a      	mov	r2, r1
 800283a:	71fb      	strb	r3, [r7, #7]
 800283c:	4613      	mov	r3, r2
 800283e:	71bb      	strb	r3, [r7, #6]
  int32_t               status = BSP_ERROR_NONE;
 8002840:	2300      	movs	r3, #0
 8002842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef      GPIO_Init;
  uint32_t              BSP_BUTTON_IT_PRIO[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
 8002844:	230f      	movs	r3, #15
 8002846:	617b      	str	r3, [r7, #20]
  uint32_t              BUTTON_EXTI_LINE[BUTTONn]   = {BUTTON_USER_EXTI_LINE};
 8002848:	4b3f      	ldr	r3, [pc, #252]	@ (8002948 <BSP_PB_Init+0x118>)
 800284a:	613b      	str	r3, [r7, #16]
  BSP_EXTI_LineCallback ButtonCallback[BUTTONn]     = {BUTTON_USER_EXTI_Callback};
 800284c:	4b3f      	ldr	r3, [pc, #252]	@ (800294c <BSP_PB_Init+0x11c>)
 800284e:	60fb      	str	r3, [r7, #12]

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002850:	4b3f      	ldr	r3, [pc, #252]	@ (8002950 <BSP_PB_Init+0x120>)
 8002852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002854:	4a3e      	ldr	r2, [pc, #248]	@ (8002950 <BSP_PB_Init+0x120>)
 8002856:	f043 0304 	orr.w	r3, r3, #4
 800285a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800285c:	4b3c      	ldr	r3, [pc, #240]	@ (8002950 <BSP_PB_Init+0x120>)
 800285e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	68bb      	ldr	r3, [r7, #8]

  GPIO_Init.Pin   = BUTTON_PIN[Button];
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	4a3a      	ldr	r2, [pc, #232]	@ (8002954 <BSP_PB_Init+0x124>)
 800286c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002870:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	623b      	str	r3, [r7, #32]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8002876:	2302      	movs	r3, #2
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ButtonMode == BUTTON_MODE_GPIO)
 800287a:	79bb      	ldrb	r3, [r7, #6]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10b      	bne.n	8002898 <BSP_PB_Init+0x68>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
 8002880:	2300      	movs	r3, #0
 8002882:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	4a34      	ldr	r2, [pc, #208]	@ (8002958 <BSP_PB_Init+0x128>)
 8002888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288c:	f107 0218 	add.w	r2, r7, #24
 8002890:	4611      	mov	r1, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f001 faaa 	bl	8003dec <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8002898:	79bb      	ldrb	r3, [r7, #6]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d14f      	bne.n	800293e <BSP_PB_Init+0x10e>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_RISING;
 800289e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80028a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	4a2c      	ldr	r2, [pc, #176]	@ (8002958 <BSP_PB_Init+0x128>)
 80028a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ac:	f107 0218 	add.w	r2, r7, #24
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f001 fa9a 	bl	8003dec <HAL_GPIO_Init>

    if (HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) == HAL_OK)
 80028b8:	79fa      	ldrb	r2, [r7, #7]
 80028ba:	4613      	mov	r3, r2
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	4413      	add	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4a26      	ldr	r2, [pc, #152]	@ (800295c <BSP_PB_Init+0x12c>)
 80028c4:	441a      	add	r2, r3
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	3330      	adds	r3, #48	@ 0x30
 80028cc:	443b      	add	r3, r7
 80028ce:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80028d2:	4619      	mov	r1, r3
 80028d4:	4610      	mov	r0, r2
 80028d6:	f000 fba6 	bl	8003026 <HAL_EXTI_GetHandle>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d12b      	bne.n	8002938 <BSP_PB_Init+0x108>
    {
      if (HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_RISING_CB_ID, ButtonCallback[Button]) == HAL_OK)
 80028e0:	79fa      	ldrb	r2, [r7, #7]
 80028e2:	4613      	mov	r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4a1c      	ldr	r2, [pc, #112]	@ (800295c <BSP_PB_Init+0x12c>)
 80028ec:	1898      	adds	r0, r3, r2
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	3330      	adds	r3, #48	@ 0x30
 80028f4:	443b      	add	r3, r7
 80028f6:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80028fa:	461a      	mov	r2, r3
 80028fc:	2101      	movs	r1, #1
 80028fe:	f000 fb66 	bl	8002fce <HAL_EXTI_RegisterCallback>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d113      	bne.n	8002930 <BSP_PB_Init+0x100>
      {
        /* Enable and set Button EXTI Interrupt to the lowest priority */
        HAL_NVIC_SetPriority(BUTTON_IRQn[Button], BSP_BUTTON_IT_PRIO[Button], 0x00);
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	4a15      	ldr	r2, [pc, #84]	@ (8002960 <BSP_PB_Init+0x130>)
 800290c:	56d0      	ldrsb	r0, [r2, r3]
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	3330      	adds	r3, #48	@ 0x30
 8002914:	443b      	add	r3, r7
 8002916:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800291a:	2200      	movs	r2, #0
 800291c:	4619      	mov	r1, r3
 800291e:	f000 fb22 	bl	8002f66 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	4a0e      	ldr	r2, [pc, #56]	@ (8002960 <BSP_PB_Init+0x130>)
 8002926:	56d3      	ldrsb	r3, [r2, r3]
 8002928:	4618      	mov	r0, r3
 800292a:	f000 fb36 	bl	8002f9a <HAL_NVIC_EnableIRQ>
 800292e:	e006      	b.n	800293e <BSP_PB_Init+0x10e>
      }
      else
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8002930:	f06f 0303 	mvn.w	r3, #3
 8002934:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002936:	e002      	b.n	800293e <BSP_PB_Init+0x10e>
      }
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 8002938:	f06f 0303 	mvn.w	r3, #3
 800293c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }

  return status;
 800293e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002940:	4618      	mov	r0, r3
 8002942:	3730      	adds	r7, #48	@ 0x30
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	0600000d 	.word	0x0600000d
 800294c:	08002b15 	.word	0x08002b15
 8002950:	40021000 	.word	0x40021000
 8002954:	20000018 	.word	0x20000018
 8002958:	2000001c 	.word	0x2000001c
 800295c:	200006ac 	.word	0x200006ac
 8002960:	20000020 	.word	0x20000020

08002964 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <BSP_PB_IRQHandler>:
  *   This parameter should be:
  *     @arg BUTTON_USER
  * @retval None.
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002986:	79fa      	ldrb	r2, [r7, #7]
 8002988:	4613      	mov	r3, r2
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4a04      	ldr	r2, [pc, #16]	@ (80029a4 <BSP_PB_IRQHandler+0x28>)
 8002992:	4413      	add	r3, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f000 fb5b 	bl	8003050 <HAL_EXTI_IRQHandler>
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	200006ac 	.word	0x200006ac

080029a8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                configuration information for the specified COM peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	6039      	str	r1, [r7, #0]
 80029b2:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d103      	bne.n	80029c6 <BSP_COM_Init+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80029be:	f06f 0301 	mvn.w	r3, #1
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	e03a      	b.n	8002a3c <BSP_COM_Init+0x94>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
 80029c6:	79fa      	ldrb	r2, [r7, #7]
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	491f      	ldr	r1, [pc, #124]	@ (8002a48 <BSP_COM_Init+0xa0>)
 80029cc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80029d0:	491e      	ldr	r1, [pc, #120]	@ (8002a4c <BSP_COM_Init+0xa4>)
 80029d2:	2094      	movs	r0, #148	@ 0x94
 80029d4:	fb00 f303 	mul.w	r3, r0, r3
 80029d8:	440b      	add	r3, r1
 80029da:	601a      	str	r2, [r3, #0]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	2294      	movs	r2, #148	@ 0x94
 80029e0:	fb02 f303 	mul.w	r3, r2, r3
 80029e4:	4a19      	ldr	r2, [pc, #100]	@ (8002a4c <BSP_COM_Init+0xa4>)
 80029e6:	4413      	add	r3, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 f89b 	bl	8002b24 <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d123      	bne.n	8002a3c <BSP_COM_Init+0x94>
    {
      if (COM == COM1)
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d110      	bne.n	8002a1c <BSP_COM_Init+0x74>
      {
        if (MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	2294      	movs	r2, #148	@ 0x94
 80029fe:	fb02 f303 	mul.w	r3, r2, r3
 8002a02:	4a12      	ldr	r2, [pc, #72]	@ (8002a4c <BSP_COM_Init+0xa4>)
 8002a04:	4413      	add	r3, r2
 8002a06:	6839      	ldr	r1, [r7, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 f821 	bl	8002a50 <MX_LPUART1_Init>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d013      	beq.n	8002a3c <BSP_COM_Init+0x94>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 8002a14:	f06f 0303 	mvn.w	r3, #3
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	e00f      	b.n	8002a3c <BSP_COM_Init+0x94>
        }
      }
      else /* COM = COM2 */
      {
        if (MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	2294      	movs	r2, #148	@ 0x94
 8002a20:	fb02 f303 	mul.w	r3, r2, r3
 8002a24:	4a09      	ldr	r2, [pc, #36]	@ (8002a4c <BSP_COM_Init+0xa4>)
 8002a26:	4413      	add	r3, r2
 8002a28:	6839      	ldr	r1, [r7, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 f841 	bl	8002ab2 <MX_USART3_Init>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <BSP_COM_Init+0x94>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 8002a36:	f06f 0303 	mvn.w	r3, #3
 8002a3a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return status;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000024 	.word	0x20000024
 8002a4c:	20000584 	.word	0x20000584

08002a50 <MX_LPUART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	891b      	ldrh	r3, [r3, #8]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	895b      	ldrh	r3, [r3, #10]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	220c      	movs	r2, #12
 8002a82:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	899b      	ldrh	r3, [r3, #12]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002a94:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f003 f8e8 	bl	8005c78 <HAL_UART_Init>
 8002aa8:	4603      	mov	r3, r0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <MX_USART3_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	891b      	ldrh	r3, [r3, #8]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	895b      	ldrh	r3, [r3, #10]
 8002ada:	461a      	mov	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	220c      	movs	r2, #12
 8002ae4:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	899b      	ldrh	r3, [r3, #12]
 8002aea:	461a      	mov	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002af6:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f003 f8b7 	bl	8005c78 <HAL_UART_Init>
 8002b0a:	4603      	mov	r3, r0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f7ff ff23 	bl	8002964 <BSP_PB_Callback>
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b098      	sub	sp, #96	@ 0x60
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init;
  GPIO_TypeDef    *COM_TX_PORT[COMn] = {COM1_TX_GPIO_PORT, COM2_TX_GPIO_PORT};
 8002b2c:	4a60      	ldr	r2, [pc, #384]	@ (8002cb0 <UART_MspInit+0x18c>)
 8002b2e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002b32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b36:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIO_TypeDef    *COM_RX_PORT[COMn] = {COM1_RX_GPIO_PORT, COM2_RX_GPIO_PORT};
 8002b3a:	4a5d      	ldr	r2, [pc, #372]	@ (8002cb0 <UART_MspInit+0x18c>)
 8002b3c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002b40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b44:	e883 0003 	stmia.w	r3, {r0, r1}
  uint16_t         COM_TX_PIN[COMn]  = {COM1_TX_PIN, COM2_TX_PIN};
 8002b48:	4b5a      	ldr	r3, [pc, #360]	@ (8002cb4 <UART_MspInit+0x190>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint16_t         COM_RX_PIN[COMn]  = {COM1_RX_PIN, COM2_RX_PIN};
 8002b4e:	4b5a      	ldr	r3, [pc, #360]	@ (8002cb8 <UART_MspInit+0x194>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t          COM_TX_AF[COMn]   = {COM1_TX_AF, COM2_TX_AF};
 8002b54:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8002b58:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint8_t          COM_RX_AF[COMn]   = {COM1_RX_AF, COM2_RX_AF};
 8002b5a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8002b5e:	853b      	strh	r3, [r7, #40]	@ 0x28
  COM_TypeDef      COM;

  /* Get COM according instance */
  COM = (huart->Instance == COM1_UART) ? COM1 : COM2;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a55      	ldr	r2, [pc, #340]	@ (8002cbc <UART_MspInit+0x198>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	bf14      	ite	ne
 8002b6a:	2301      	movne	r3, #1
 8002b6c:	2300      	moveq	r3, #0
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  /* Enable COM and GPIO clocks */
  if (COM == COM1)
 8002b74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d132      	bne.n	8002be2 <UART_MspInit+0xbe>
  {
    /* Enable VddIO2 for GPIOG */
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b7c:	4b50      	ldr	r3, [pc, #320]	@ (8002cc0 <UART_MspInit+0x19c>)
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b80:	4a4f      	ldr	r2, [pc, #316]	@ (8002cc0 <UART_MspInit+0x19c>)
 8002b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b86:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b88:	4b4d      	ldr	r3, [pc, #308]	@ (8002cc0 <UART_MspInit+0x19c>)
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_PWREx_EnableVddIO2();
 8002b94:	f001 fb5c 	bl	8004250 <HAL_PWREx_EnableVddIO2>
    COM1_TX_GPIO_CLK_ENABLE();
 8002b98:	4b49      	ldr	r3, [pc, #292]	@ (8002cc0 <UART_MspInit+0x19c>)
 8002b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b9c:	4a48      	ldr	r2, [pc, #288]	@ (8002cc0 <UART_MspInit+0x19c>)
 8002b9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ba2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ba4:	4b46      	ldr	r3, [pc, #280]	@ (8002cc0 <UART_MspInit+0x19c>)
 8002ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bac:	623b      	str	r3, [r7, #32]
 8002bae:	6a3b      	ldr	r3, [r7, #32]
    COM1_RX_GPIO_CLK_ENABLE();
 8002bb0:	4b43      	ldr	r3, [pc, #268]	@ (8002cc0 <UART_MspInit+0x19c>)
 8002bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb4:	4a42      	ldr	r2, [pc, #264]	@ (8002cc0 <UART_MspInit+0x19c>)
 8002bb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bbc:	4b40      	ldr	r3, [pc, #256]	@ (8002cc0 <UART_MspInit+0x19c>)
 8002bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	69fb      	ldr	r3, [r7, #28]
    COM1_CLK_ENABLE();
 8002bc8:	4b3d      	ldr	r3, [pc, #244]	@ (8002cc0 <UART_MspInit+0x19c>)
 8002bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bcc:	4a3c      	ldr	r2, [pc, #240]	@ (8002cc0 <UART_MspInit+0x19c>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002bd4:	4b3a      	ldr	r3, [pc, #232]	@ (8002cc0 <UART_MspInit+0x19c>)
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	61bb      	str	r3, [r7, #24]
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	e023      	b.n	8002c2a <UART_MspInit+0x106>
  }
  else /* COM = COM2 */
  {
    COM2_TX_GPIO_CLK_ENABLE();
 8002be2:	4b37      	ldr	r3, [pc, #220]	@ (8002cc0 <UART_MspInit+0x19c>)
 8002be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be6:	4a36      	ldr	r2, [pc, #216]	@ (8002cc0 <UART_MspInit+0x19c>)
 8002be8:	f043 0308 	orr.w	r3, r3, #8
 8002bec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bee:	4b34      	ldr	r3, [pc, #208]	@ (8002cc0 <UART_MspInit+0x19c>)
 8002bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	697b      	ldr	r3, [r7, #20]
    COM2_RX_GPIO_CLK_ENABLE();
 8002bfa:	4b31      	ldr	r3, [pc, #196]	@ (8002cc0 <UART_MspInit+0x19c>)
 8002bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfe:	4a30      	ldr	r2, [pc, #192]	@ (8002cc0 <UART_MspInit+0x19c>)
 8002c00:	f043 0308 	orr.w	r3, r3, #8
 8002c04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c06:	4b2e      	ldr	r3, [pc, #184]	@ (8002cc0 <UART_MspInit+0x19c>)
 8002c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	693b      	ldr	r3, [r7, #16]
    COM2_CLK_ENABLE();
 8002c12:	4b2b      	ldr	r3, [pc, #172]	@ (8002cc0 <UART_MspInit+0x19c>)
 8002c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c16:	4a2a      	ldr	r2, [pc, #168]	@ (8002cc0 <UART_MspInit+0x19c>)
 8002c18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c1e:	4b28      	ldr	r3, [pc, #160]	@ (8002cc0 <UART_MspInit+0x19c>)
 8002c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
  }

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
 8002c2a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	3360      	adds	r3, #96	@ 0x60
 8002c32:	443b      	add	r3, r7
 8002c34:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8002c38:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	657b      	str	r3, [r7, #84]	@ 0x54
  GPIO_Init.Pull      = GPIO_PULLUP;
 8002c42:	2301      	movs	r3, #1
 8002c44:	653b      	str	r3, [r7, #80]	@ 0x50
  GPIO_Init.Alternate = COM_TX_AF[COM];
 8002c46:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002c4a:	3360      	adds	r3, #96	@ 0x60
 8002c4c:	443b      	add	r3, r7
 8002c4e:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8002c52:	65bb      	str	r3, [r7, #88]	@ 0x58
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
 8002c54:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	3360      	adds	r3, #96	@ 0x60
 8002c5c:	443b      	add	r3, r7
 8002c5e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002c62:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002c66:	4611      	mov	r1, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f001 f8bf 	bl	8003dec <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
 8002c6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	3360      	adds	r3, #96	@ 0x60
 8002c76:	443b      	add	r3, r7
 8002c78:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8002c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_Init.Alternate = COM_RX_AF[COM];
 8002c7e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002c82:	3360      	adds	r3, #96	@ 0x60
 8002c84:	443b      	add	r3, r7
 8002c86:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002c8a:	65bb      	str	r3, [r7, #88]	@ 0x58
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
 8002c8c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	3360      	adds	r3, #96	@ 0x60
 8002c94:	443b      	add	r3, r7
 8002c96:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002c9a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f001 f8a3 	bl	8003dec <HAL_GPIO_Init>
}
 8002ca6:	bf00      	nop
 8002ca8:	3760      	adds	r7, #96	@ 0x60
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	080068dc 	.word	0x080068dc
 8002cb4:	080068e4 	.word	0x080068e4
 8002cb8:	080068e8 	.word	0x080068e8
 8002cbc:	40008000 	.word	0x40008000
 8002cc0:	40021000 	.word	0x40021000

08002cc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002cce:	2004      	movs	r0, #4
 8002cd0:	f000 f93e 	bl	8002f50 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8002cd4:	f7ff fc76 	bl	80025c4 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cd8:	2007      	movs	r0, #7
 8002cda:	f000 f80d 	bl	8002cf8 <HAL_InitTick>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	71fb      	strb	r3, [r7, #7]
 8002ce8:	e001      	b.n	8002cee <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002cea:	f7ff fb8d 	bl	8002408 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002cee:	79fb      	ldrb	r3, [r7, #7]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002d04:	4b17      	ldr	r3, [pc, #92]	@ (8002d64 <HAL_InitTick+0x6c>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d023      	beq.n	8002d54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002d0c:	4b16      	ldr	r3, [pc, #88]	@ (8002d68 <HAL_InitTick+0x70>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	4b14      	ldr	r3, [pc, #80]	@ (8002d64 <HAL_InitTick+0x6c>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	4619      	mov	r1, r3
 8002d16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 f947 	bl	8002fb6 <HAL_SYSTICK_Config>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10f      	bne.n	8002d4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b07      	cmp	r3, #7
 8002d32:	d809      	bhi.n	8002d48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d34:	2200      	movs	r2, #0
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3c:	f000 f913 	bl	8002f66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d40:	4a0a      	ldr	r2, [pc, #40]	@ (8002d6c <HAL_InitTick+0x74>)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	e007      	b.n	8002d58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
 8002d4c:	e004      	b.n	8002d58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
 8002d52:	e001      	b.n	8002d58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000030 	.word	0x20000030
 8002d68:	20000000 	.word	0x20000000
 8002d6c:	2000002c 	.word	0x2000002c

08002d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d74:	4b06      	ldr	r3, [pc, #24]	@ (8002d90 <HAL_IncTick+0x20>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4b06      	ldr	r3, [pc, #24]	@ (8002d94 <HAL_IncTick+0x24>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4413      	add	r3, r2
 8002d80:	4a04      	ldr	r2, [pc, #16]	@ (8002d94 <HAL_IncTick+0x24>)
 8002d82:	6013      	str	r3, [r2, #0]
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	20000030 	.word	0x20000030
 8002d94:	200006b8 	.word	0x200006b8

08002d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d9c:	4b03      	ldr	r3, [pc, #12]	@ (8002dac <HAL_GetTick+0x14>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	200006b8 	.word	0x200006b8

08002db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002df4 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dcc:	4013      	ands	r3, r2
 8002dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002de2:	4a04      	ldr	r2, [pc, #16]	@ (8002df4 <__NVIC_SetPriorityGrouping+0x44>)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	60d3      	str	r3, [r2, #12]
}
 8002de8:	bf00      	nop
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dfc:	4b04      	ldr	r3, [pc, #16]	@ (8002e10 <__NVIC_GetPriorityGrouping+0x18>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	0a1b      	lsrs	r3, r3, #8
 8002e02:	f003 0307 	and.w	r3, r3, #7
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	db0b      	blt.n	8002e3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	f003 021f 	and.w	r2, r3, #31
 8002e2c:	4907      	ldr	r1, [pc, #28]	@ (8002e4c <__NVIC_EnableIRQ+0x38>)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	2001      	movs	r0, #1
 8002e36:	fa00 f202 	lsl.w	r2, r0, r2
 8002e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	e000e100 	.word	0xe000e100

08002e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	6039      	str	r1, [r7, #0]
 8002e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	db0a      	blt.n	8002e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	490c      	ldr	r1, [pc, #48]	@ (8002e9c <__NVIC_SetPriority+0x4c>)
 8002e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6e:	0152      	lsls	r2, r2, #5
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	440b      	add	r3, r1
 8002e74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e78:	e00a      	b.n	8002e90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	4908      	ldr	r1, [pc, #32]	@ (8002ea0 <__NVIC_SetPriority+0x50>)
 8002e80:	79fb      	ldrb	r3, [r7, #7]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	3b04      	subs	r3, #4
 8002e88:	0152      	lsls	r2, r2, #5
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	761a      	strb	r2, [r3, #24]
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	e000e100 	.word	0xe000e100
 8002ea0:	e000ed00 	.word	0xe000ed00

08002ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b089      	sub	sp, #36	@ 0x24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f1c3 0307 	rsb	r3, r3, #7
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	bf28      	it	cs
 8002ec2:	2303      	movcs	r3, #3
 8002ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	3303      	adds	r3, #3
 8002eca:	2b06      	cmp	r3, #6
 8002ecc:	d902      	bls.n	8002ed4 <NVIC_EncodePriority+0x30>
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	3b04      	subs	r3, #4
 8002ed2:	e000      	b.n	8002ed6 <NVIC_EncodePriority+0x32>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43da      	mvns	r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eec:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef6:	43d9      	mvns	r1, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002efc:	4313      	orrs	r3, r2
         );
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3724      	adds	r7, #36	@ 0x24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f1c:	d301      	bcc.n	8002f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e00f      	b.n	8002f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f22:	4a0a      	ldr	r2, [pc, #40]	@ (8002f4c <SysTick_Config+0x40>)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f2a:	2107      	movs	r1, #7
 8002f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f30:	f7ff ff8e 	bl	8002e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f34:	4b05      	ldr	r3, [pc, #20]	@ (8002f4c <SysTick_Config+0x40>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f3a:	4b04      	ldr	r3, [pc, #16]	@ (8002f4c <SysTick_Config+0x40>)
 8002f3c:	2207      	movs	r2, #7
 8002f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	e000e010 	.word	0xe000e010

08002f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff ff29 	bl	8002db0 <__NVIC_SetPriorityGrouping>
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b086      	sub	sp, #24
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
 8002f72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f74:	f7ff ff40 	bl	8002df8 <__NVIC_GetPriorityGrouping>
 8002f78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	68b9      	ldr	r1, [r7, #8]
 8002f7e:	6978      	ldr	r0, [r7, #20]
 8002f80:	f7ff ff90 	bl	8002ea4 <NVIC_EncodePriority>
 8002f84:	4602      	mov	r2, r0
 8002f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ff5f 	bl	8002e50 <__NVIC_SetPriority>
}
 8002f92:	bf00      	nop
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff33 	bl	8002e14 <__NVIC_EnableIRQ>
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7ff ffa4 	bl	8002f0c <SysTick_Config>
 8002fc4:	4603      	mov	r3, r0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b087      	sub	sp, #28
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002fe0:	7afb      	ldrb	r3, [r7, #11]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d011      	beq.n	800300a <HAL_EXTI_RegisterCallback+0x3c>
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	dc13      	bgt.n	8003012 <HAL_EXTI_RegisterCallback+0x44>
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <HAL_EXTI_RegisterCallback+0x26>
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d007      	beq.n	8003002 <HAL_EXTI_RegisterCallback+0x34>
 8002ff2:	e00e      	b.n	8003012 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
      break;
 8003000:	e00a      	b.n	8003018 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	605a      	str	r2, [r3, #4]
      break;
 8003008:	e006      	b.n	8003018 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	609a      	str	r2, [r3, #8]
      break;
 8003010:	e002      	b.n	8003018 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	75fb      	strb	r3, [r7, #23]
      break;
 8003016:	bf00      	nop
  }

  return status;
 8003018:	7dfb      	ldrb	r3, [r7, #23]
}
 800301a:	4618      	mov	r0, r3
 800301c:	371c      	adds	r7, #28
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	6039      	str	r1, [r7, #0]
  /* Check null pointer */
  if(hexti == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e003      	b.n	8003042 <HAL_EXTI_GetHandle+0x1c>

  /* Check parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Store line number as handle private field */
  hexti->Line = ExtiLine;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	0c1b      	lsrs	r3, r3, #16
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	2201      	movs	r2, #1
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	4b17      	ldr	r3, [pc, #92]	@ (80030d8 <HAL_EXTI_IRQHandler+0x88>)
 800307a:	4413      	add	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4013      	ands	r3, r2
 8003086:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->RisingCallback != NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	4b0d      	ldr	r3, [pc, #52]	@ (80030dc <HAL_EXTI_IRQHandler+0x8c>)
 80030a8:	4413      	add	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4013      	ands	r3, r2
 80030b4:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d009      	beq.n	80030d0 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->FallingCallback != NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	4798      	blx	r3
    }
  }
}
 80030d0:	bf00      	nop
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	4002f40c 	.word	0x4002f40c
 80030dc:	4002f410 	.word	0x4002f410

080030e0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e142      	b.n	8003378 <HAL_FDCAN_Init+0x298>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff f9a2 	bl	8002450 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699a      	ldr	r2, [r3, #24]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0210 	bic.w	r2, r2, #16
 800311a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800311c:	f7ff fe3c 	bl	8002d98 <HAL_GetTick>
 8003120:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003122:	e012      	b.n	800314a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003124:	f7ff fe38 	bl	8002d98 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b0a      	cmp	r3, #10
 8003130:	d90b      	bls.n	800314a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003136:	f043 0201 	orr.w	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2203      	movs	r2, #3
 8003142:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e116      	b.n	8003378 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b08      	cmp	r3, #8
 8003156:	d0e5      	beq.n	8003124 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003168:	f7ff fe16 	bl	8002d98 <HAL_GetTick>
 800316c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800316e:	e012      	b.n	8003196 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003170:	f7ff fe12 	bl	8002d98 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b0a      	cmp	r3, #10
 800317c:	d90b      	bls.n	8003196 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003182:	f043 0201 	orr.w	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2203      	movs	r2, #3
 800318e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e0f0      	b.n	8003378 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0e5      	beq.n	8003170 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0202 	orr.w	r2, r2, #2
 80031b2:	619a      	str	r2, [r3, #24]

  /* Configure Clock divider */
  FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80031b4:	4a72      	ldr	r2, [pc, #456]	@ (8003380 <HAL_FDCAN_Init+0x2a0>)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	6013      	str	r3, [r2, #0]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	7c1b      	ldrb	r3, [r3, #16]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d108      	bne.n	80031d6 <HAL_FDCAN_Init+0xf6>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	699a      	ldr	r2, [r3, #24]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031d2:	619a      	str	r2, [r3, #24]
 80031d4:	e007      	b.n	80031e6 <HAL_FDCAN_Init+0x106>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699a      	ldr	r2, [r3, #24]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031e4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	7c5b      	ldrb	r3, [r3, #17]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d108      	bne.n	8003200 <HAL_FDCAN_Init+0x120>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	699a      	ldr	r2, [r3, #24]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031fc:	619a      	str	r2, [r3, #24]
 80031fe:	e007      	b.n	8003210 <HAL_FDCAN_Init+0x130>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800320e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	7c9b      	ldrb	r3, [r3, #18]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d108      	bne.n	800322a <HAL_FDCAN_Init+0x14a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003226:	619a      	str	r2, [r3, #24]
 8003228:	e007      	b.n	800323a <HAL_FDCAN_Init+0x15a>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699a      	ldr	r2, [r3, #24]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003238:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699a      	ldr	r2, [r3, #24]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800325e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691a      	ldr	r2, [r3, #16]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0210 	bic.w	r2, r2, #16
 800326e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d108      	bne.n	800328a <HAL_FDCAN_Init+0x1aa>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0204 	orr.w	r2, r2, #4
 8003286:	619a      	str	r2, [r3, #24]
 8003288:	e02c      	b.n	80032e4 <HAL_FDCAN_Init+0x204>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d028      	beq.n	80032e4 <HAL_FDCAN_Init+0x204>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d01c      	beq.n	80032d4 <HAL_FDCAN_Init+0x1f4>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	699a      	ldr	r2, [r3, #24]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80032a8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0210 	orr.w	r2, r2, #16
 80032b8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d110      	bne.n	80032e4 <HAL_FDCAN_Init+0x204>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	699a      	ldr	r2, [r3, #24]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 0220 	orr.w	r2, r2, #32
 80032d0:	619a      	str	r2, [r3, #24]
 80032d2:	e007      	b.n	80032e4 <HAL_FDCAN_Init+0x204>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0220 	orr.w	r2, r2, #32
 80032e2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	3b01      	subs	r3, #1
 80032ea:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032f4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80032fc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	3b01      	subs	r3, #1
 8003306:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800330c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800330e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003318:	d115      	bne.n	8003346 <HAL_FDCAN_Init+0x266>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800331e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003324:	3b01      	subs	r3, #1
 8003326:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003328:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332e:	3b01      	subs	r3, #1
 8003330:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003332:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333a:	3b01      	subs	r3, #1
 800333c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003342:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003344:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 fc73 	bl	8003c48 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	4000a500 	.word	0x4000a500

08003384 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003394:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003396:	7dfb      	ldrb	r3, [r7, #23]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d002      	beq.n	80033a2 <HAL_FDCAN_ConfigFilter+0x1e>
 800339c:	7dfb      	ldrb	r3, [r7, #23]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d13d      	bne.n	800341e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d119      	bne.n	80033de <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80033b6:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80033be:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	e01d      	b.n	800341a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	075a      	lsls	r2, r3, #29
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	079a      	lsls	r2, r3, #30
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4413      	add	r3, r2
 8003406:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	3304      	adds	r3, #4
 8003412:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	e006      	b.n	800342c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003422:	f043 0202 	orr.w	r2, r3, #2
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
  }
}
 800342c:	4618      	mov	r0, r3
 800342e:	371c      	adds	r7, #28
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b01      	cmp	r3, #1
 800344a:	d110      	bne.n	800346e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699a      	ldr	r2, [r3, #24]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0201 	bic.w	r2, r2, #1
 8003462:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	e006      	b.n	800347c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003472:	f043 0204 	orr.w	r2, r3, #4
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
  }
}
 800347c:	4618      	mov	r0, r3
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d12c      	bne.n	80034fa <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80034a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d007      	beq.n	80034c0 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e023      	b.n	8003508 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80034c8:	0c1b      	lsrs	r3, r3, #16
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	68b9      	ldr	r1, [r7, #8]
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 fc0c 	bl	8003cf4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2101      	movs	r1, #1
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	fa01 f202 	lsl.w	r2, r1, r2
 80034e8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80034ec:	2201      	movs	r2, #1
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	409a      	lsls	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80034f6:	2300      	movs	r3, #0
 80034f8:	e006      	b.n	8003508 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034fe:	f043 0208 	orr.w	r2, r3, #8
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
  }
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003510:	b480      	push	{r7}
 8003512:	b08b      	sub	sp, #44	@ 0x2c
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003528:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800352a:	7efb      	ldrb	r3, [r7, #27]
 800352c:	2b02      	cmp	r3, #2
 800352e:	f040 80e8 	bne.w	8003702 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b40      	cmp	r3, #64	@ 0x40
 8003536:	d137      	bne.n	80035a8 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003540:	f003 030f 	and.w	r3, r3, #15
 8003544:	2b00      	cmp	r3, #0
 8003546:	d107      	bne.n	8003558 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800354c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0db      	b.n	8003710 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003560:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003564:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003568:	d10a      	bne.n	8003580 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003572:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003576:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800357a:	d101      	bne.n	8003580 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800357c:	2301      	movs	r3, #1
 800357e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003588:	0a1b      	lsrs	r3, r3, #8
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	69fa      	ldr	r2, [r7, #28]
 8003590:	4413      	add	r3, r2
 8003592:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4413      	add	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	440b      	add	r3, r1
 80035a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035a6:	e036      	b.n	8003616 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d107      	bne.n	80035c8 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0a3      	b.n	8003710 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035d8:	d10a      	bne.n	80035f0 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035ea:	d101      	bne.n	80035f0 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80035ec:	2301      	movs	r3, #1
 80035ee:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035f8:	0a1b      	lsrs	r3, r3, #8
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	4413      	add	r3, r2
 8003602:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003608:	69fa      	ldr	r2, [r7, #28]
 800360a:	4613      	mov	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	4413      	add	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	440b      	add	r3, r1
 8003614:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d107      	bne.n	800363a <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800362a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	0c9b      	lsrs	r3, r3, #18
 8003630:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	e005      	b.n	8003646 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800363a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003660:	3304      	adds	r3, #4
 8003662:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	b29a      	uxth	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800366e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	0c1b      	lsrs	r3, r3, #16
 8003674:	f003 020f 	and.w	r2, r3, #15
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800367c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	0e1b      	lsrs	r3, r3, #24
 800369a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80036a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	0fda      	lsrs	r2, r3, #31
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80036ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ae:	3304      	adds	r3, #4
 80036b0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80036b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80036b6:	2300      	movs	r3, #0
 80036b8:	623b      	str	r3, [r7, #32]
 80036ba:	e00a      	b.n	80036d2 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	441a      	add	r2, r3
 80036c2:	6839      	ldr	r1, [r7, #0]
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	440b      	add	r3, r1
 80036c8:	7812      	ldrb	r2, [r2, #0]
 80036ca:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	3301      	adds	r3, #1
 80036d0:	623b      	str	r3, [r7, #32]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	4a11      	ldr	r2, [pc, #68]	@ (800371c <HAL_FDCAN_GetRxMessage+0x20c>)
 80036d8:	5cd3      	ldrb	r3, [r2, r3]
 80036da:	461a      	mov	r2, r3
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	4293      	cmp	r3, r2
 80036e0:	d3ec      	bcc.n	80036bc <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b40      	cmp	r3, #64	@ 0x40
 80036e6:	d105      	bne.n	80036f4 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80036f2:	e004      	b.n	80036fe <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	69fa      	ldr	r2, [r7, #28]
 80036fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	e006      	b.n	8003710 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003706:	f043 0208 	orr.w	r2, r3, #8
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
  }
}
 8003710:	4618      	mov	r0, r3
 8003712:	372c      	adds	r7, #44	@ 0x2c
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	08006968 	.word	0x08006968

08003720 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8003736:	68fb      	ldr	r3, [r7, #12]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003756:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003758:	7dfb      	ldrb	r3, [r7, #23]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d003      	beq.n	8003766 <HAL_FDCAN_ActivateNotification+0x22>
 800375e:	7dfb      	ldrb	r3, [r7, #23]
 8003760:	2b02      	cmp	r3, #2
 8003762:	f040 80c8 	bne.w	80038f6 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800376c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	2b00      	cmp	r3, #0
 8003776:	d004      	beq.n	8003782 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d03b      	beq.n	80037fa <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003788:	2b00      	cmp	r3, #0
 800378a:	d004      	beq.n	8003796 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d031      	beq.n	80037fa <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800379c:	2b00      	cmp	r3, #0
 800379e:	d004      	beq.n	80037aa <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d027      	beq.n	80037fa <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d004      	beq.n	80037be <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d01d      	beq.n	80037fa <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d004      	beq.n	80037d2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d013      	beq.n	80037fa <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d004      	beq.n	80037e6 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d009      	beq.n	80037fa <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00c      	beq.n	800380a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d107      	bne.n	800380a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 0201 	orr.w	r2, r2, #1
 8003808:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	2b00      	cmp	r3, #0
 8003812:	d004      	beq.n	800381e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d13b      	bne.n	8003896 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003824:	2b00      	cmp	r3, #0
 8003826:	d004      	beq.n	8003832 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d131      	bne.n	8003896 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003838:	2b00      	cmp	r3, #0
 800383a:	d004      	beq.n	8003846 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b00      	cmp	r3, #0
 8003844:	d127      	bne.n	8003896 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800384c:	2b00      	cmp	r3, #0
 800384e:	d004      	beq.n	800385a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d11d      	bne.n	8003896 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003860:	2b00      	cmp	r3, #0
 8003862:	d004      	beq.n	800386e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b00      	cmp	r3, #0
 800386c:	d113      	bne.n	8003896 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003874:	2b00      	cmp	r3, #0
 8003876:	d004      	beq.n	8003882 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f003 0320 	and.w	r3, r3, #32
 800387e:	2b00      	cmp	r3, #0
 8003880:	d109      	bne.n	8003896 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00c      	beq.n	80038a6 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003892:	2b00      	cmp	r3, #0
 8003894:	d007      	beq.n	80038a6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f042 0202 	orr.w	r2, r2, #2
 80038a4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d009      	beq.n	80038c4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	430a      	orrs	r2, r1
 80038c0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d009      	beq.n	80038e2 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	430a      	orrs	r2, r1
 80038de:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	e006      	b.n	8003904 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038fa:	f043 0202 	orr.w	r2, r3, #2
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
  }
}
 8003904:	4618      	mov	r0, r3
 8003906:	371c      	adds	r7, #28
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08c      	sub	sp, #48	@ 0x30
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800391e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8003922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800392a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800392c:	4013      	ands	r3, r2
 800392e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003942:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003944:	4013      	ands	r3, r2
 8003946:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800394e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003952:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800395a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800395c:	4013      	ands	r3, r2
 800395e:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003966:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800396a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003972:	6a3a      	ldr	r2, [r7, #32]
 8003974:	4013      	ands	r3, r2
 8003976:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800397e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003982:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	4013      	ands	r3, r2
 800398e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003996:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800399e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	099b      	lsrs	r3, r3, #6
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00c      	beq.n	80039c6 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	099b      	lsrs	r3, r3, #6
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d006      	beq.n	80039c6 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2240      	movs	r2, #64	@ 0x40
 80039be:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f922 	bl	8003c0a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	0a1b      	lsrs	r3, r3, #8
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d01a      	beq.n	8003a08 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	0a1b      	lsrs	r3, r3, #8
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d014      	beq.n	8003a08 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80039e6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4013      	ands	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039fe:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003a00:	6939      	ldr	r1, [r7, #16]
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f8e2 	bl	8003bcc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d007      	beq.n	8003a1e <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a14:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003a16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f8ac 	bl	8003b76 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d007      	beq.n	8003a34 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a2a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003a2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fe fb48 	bl	80020c4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d007      	beq.n	8003a4a <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a40:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003a42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f8a1 	bl	8003b8c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	0a5b      	lsrs	r3, r3, #9
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00d      	beq.n	8003a72 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	0a5b      	lsrs	r3, r3, #9
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d007      	beq.n	8003a72 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a6a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f898 	bl	8003ba2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	09db      	lsrs	r3, r3, #7
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d019      	beq.n	8003ab2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	09db      	lsrs	r3, r3, #7
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d013      	beq.n	8003ab2 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003a92:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2280      	movs	r2, #128	@ 0x80
 8003aa8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003aaa:	68f9      	ldr	r1, [r7, #12]
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f882 	bl	8003bb6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	0b5b      	lsrs	r3, r3, #13
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00d      	beq.n	8003ada <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	0b5b      	lsrs	r3, r3, #13
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d007      	beq.n	8003ada <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ad2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f884 	bl	8003be2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	0bdb      	lsrs	r3, r3, #15
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00d      	beq.n	8003b02 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	0bdb      	lsrs	r3, r3, #15
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d007      	beq.n	8003b02 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003afa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f87a 	bl	8003bf6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	0b9b      	lsrs	r3, r3, #14
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d010      	beq.n	8003b30 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	0b9b      	lsrs	r3, r3, #14
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003b22:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b28:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d007      	beq.n	8003b46 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69fa      	ldr	r2, [r7, #28]
 8003b3c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003b3e:	69f9      	ldr	r1, [r7, #28]
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f876 	bl	8003c32 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d009      	beq.n	8003b60 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6a3a      	ldr	r2, [r7, #32]
 8003b52:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f858 	bl	8003c1e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003b6e:	bf00      	nop
 8003b70:	3730      	adds	r7, #48	@ 0x30
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003c50:	4b27      	ldr	r3, [pc, #156]	@ (8003cf0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003c52:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c62:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c6a:	041a      	lsls	r2, r3, #16
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c88:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c90:	061a      	lsls	r2, r3, #24
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	e005      	b.n	8003cd6 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d3f3      	bcc.n	8003cca <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003ce2:	bf00      	nop
 8003ce4:	bf00      	nop
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	4000ac00 	.word	0x4000ac00

08003cf4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b089      	sub	sp, #36	@ 0x24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10a      	bne.n	8003d20 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003d12:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	e00a      	b.n	8003d36 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003d28:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003d2e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003d30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d34:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003d40:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003d46:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003d4c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4413      	add	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	440b      	add	r3, r1
 8003d68:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	3304      	adds	r3, #4
 8003d74:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	3304      	adds	r3, #4
 8003d80:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	e020      	b.n	8003dca <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	3303      	adds	r3, #3
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	4413      	add	r3, r2
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	3302      	adds	r3, #2
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	440b      	add	r3, r1
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003da0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	3301      	adds	r3, #1
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	440b      	add	r3, r1
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003dae:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	440a      	add	r2, r1
 8003db6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003db8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	4a06      	ldr	r2, [pc, #24]	@ (8003de8 <FDCAN_CopyMessageToRAM+0xf4>)
 8003dd0:	5cd3      	ldrb	r3, [r2, r3]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d3d6      	bcc.n	8003d88 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8003dda:	bf00      	nop
 8003ddc:	bf00      	nop
 8003dde:	3724      	adds	r7, #36	@ 0x24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	08006968 	.word	0x08006968

08003dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003dfa:	e158      	b.n	80040ae <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	2101      	movs	r1, #1
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	fa01 f303 	lsl.w	r3, r1, r3
 8003e08:	4013      	ands	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 814a 	beq.w	80040a8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d005      	beq.n	8003e2c <HAL_GPIO_Init+0x40>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d130      	bne.n	8003e8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	2203      	movs	r2, #3
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4013      	ands	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e62:	2201      	movs	r2, #1
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	091b      	lsrs	r3, r3, #4
 8003e78:	f003 0201 	and.w	r2, r3, #1
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d017      	beq.n	8003eca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	43db      	mvns	r3, r3
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d123      	bne.n	8003f1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	08da      	lsrs	r2, r3, #3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3208      	adds	r2, #8
 8003ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	220f      	movs	r2, #15
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	43db      	mvns	r3, r3
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	08da      	lsrs	r2, r3, #3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3208      	adds	r2, #8
 8003f18:	6939      	ldr	r1, [r7, #16]
 8003f1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	2203      	movs	r2, #3
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4013      	ands	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f003 0203 	and.w	r2, r3, #3
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 80a4 	beq.w	80040a8 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8003f60:	4a5a      	ldr	r2, [pc, #360]	@ (80040cc <HAL_GPIO_Init+0x2e0>)
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	089b      	lsrs	r3, r3, #2
 8003f66:	3318      	adds	r3, #24
 8003f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f6c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f003 0303 	and.w	r3, r3, #3
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	220f      	movs	r2, #15
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	4013      	ands	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a52      	ldr	r2, [pc, #328]	@ (80040d0 <HAL_GPIO_Init+0x2e4>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d025      	beq.n	8003fd8 <HAL_GPIO_Init+0x1ec>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a51      	ldr	r2, [pc, #324]	@ (80040d4 <HAL_GPIO_Init+0x2e8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d01f      	beq.n	8003fd4 <HAL_GPIO_Init+0x1e8>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a50      	ldr	r2, [pc, #320]	@ (80040d8 <HAL_GPIO_Init+0x2ec>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d019      	beq.n	8003fd0 <HAL_GPIO_Init+0x1e4>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a4f      	ldr	r2, [pc, #316]	@ (80040dc <HAL_GPIO_Init+0x2f0>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d013      	beq.n	8003fcc <HAL_GPIO_Init+0x1e0>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a4e      	ldr	r2, [pc, #312]	@ (80040e0 <HAL_GPIO_Init+0x2f4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00d      	beq.n	8003fc8 <HAL_GPIO_Init+0x1dc>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a4d      	ldr	r2, [pc, #308]	@ (80040e4 <HAL_GPIO_Init+0x2f8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d007      	beq.n	8003fc4 <HAL_GPIO_Init+0x1d8>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a4c      	ldr	r2, [pc, #304]	@ (80040e8 <HAL_GPIO_Init+0x2fc>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d101      	bne.n	8003fc0 <HAL_GPIO_Init+0x1d4>
 8003fbc:	2306      	movs	r3, #6
 8003fbe:	e00c      	b.n	8003fda <HAL_GPIO_Init+0x1ee>
 8003fc0:	2307      	movs	r3, #7
 8003fc2:	e00a      	b.n	8003fda <HAL_GPIO_Init+0x1ee>
 8003fc4:	2305      	movs	r3, #5
 8003fc6:	e008      	b.n	8003fda <HAL_GPIO_Init+0x1ee>
 8003fc8:	2304      	movs	r3, #4
 8003fca:	e006      	b.n	8003fda <HAL_GPIO_Init+0x1ee>
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e004      	b.n	8003fda <HAL_GPIO_Init+0x1ee>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e002      	b.n	8003fda <HAL_GPIO_Init+0x1ee>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e000      	b.n	8003fda <HAL_GPIO_Init+0x1ee>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	f002 0203 	and.w	r2, r2, #3
 8003fe0:	00d2      	lsls	r2, r2, #3
 8003fe2:	4093      	lsls	r3, r2
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8003fea:	4938      	ldr	r1, [pc, #224]	@ (80040cc <HAL_GPIO_Init+0x2e0>)
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	089b      	lsrs	r3, r3, #2
 8003ff0:	3318      	adds	r3, #24
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ff8:	4b34      	ldr	r3, [pc, #208]	@ (80040cc <HAL_GPIO_Init+0x2e0>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	43db      	mvns	r3, r3
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4013      	ands	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800401c:	4a2b      	ldr	r2, [pc, #172]	@ (80040cc <HAL_GPIO_Init+0x2e0>)
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004022:	4b2a      	ldr	r3, [pc, #168]	@ (80040cc <HAL_GPIO_Init+0x2e0>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	43db      	mvns	r3, r3
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4013      	ands	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004046:	4a21      	ldr	r2, [pc, #132]	@ (80040cc <HAL_GPIO_Init+0x2e0>)
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800404c:	4b1f      	ldr	r3, [pc, #124]	@ (80040cc <HAL_GPIO_Init+0x2e0>)
 800404e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	43db      	mvns	r3, r3
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4013      	ands	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004072:	4a16      	ldr	r2, [pc, #88]	@ (80040cc <HAL_GPIO_Init+0x2e0>)
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 800407a:	4b14      	ldr	r3, [pc, #80]	@ (80040cc <HAL_GPIO_Init+0x2e0>)
 800407c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	43db      	mvns	r3, r3
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4013      	ands	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040a0:	4a0a      	ldr	r2, [pc, #40]	@ (80040cc <HAL_GPIO_Init+0x2e0>)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	3301      	adds	r3, #1
 80040ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	fa22 f303 	lsr.w	r3, r2, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f47f ae9f 	bne.w	8003dfc <HAL_GPIO_Init+0x10>
  }
}
 80040be:	bf00      	nop
 80040c0:	bf00      	nop
 80040c2:	371c      	adds	r7, #28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	4002f400 	.word	0x4002f400
 80040d0:	42020000 	.word	0x42020000
 80040d4:	42020400 	.word	0x42020400
 80040d8:	42020800 	.word	0x42020800
 80040dc:	42020c00 	.word	0x42020c00
 80040e0:	42021000 	.word	0x42021000
 80040e4:	42021400 	.word	0x42021400
 80040e8:	42021800 	.word	0x42021800

080040ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	460b      	mov	r3, r1
 80040f6:	807b      	strh	r3, [r7, #2]
 80040f8:	4613      	mov	r3, r2
 80040fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040fc:	787b      	ldrb	r3, [r7, #1]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004102:	887a      	ldrh	r2, [r7, #2]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004108:	e002      	b.n	8004110 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800410a:	887a      	ldrh	r2, [r7, #2]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004128:	4b0b      	ldr	r3, [pc, #44]	@ (8004158 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
 8004138:	e007      	b.n	800414a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800413a:	4b07      	ldr	r3, [pc, #28]	@ (8004158 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f023 0204 	bic.w	r2, r3, #4
 8004142:	4905      	ldr	r1, [pc, #20]	@ (8004158 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4313      	orrs	r3, r2
 8004148:	600b      	str	r3, [r1, #0]
  }

  return status;
 800414a:	7bfb      	ldrb	r3, [r7, #15]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	40030400 	.word	0x40030400

0800415c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004160:	4b05      	ldr	r3, [pc, #20]	@ (8004178 <HAL_ICACHE_Enable+0x1c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a04      	ldr	r2, [pc, #16]	@ (8004178 <HAL_ICACHE_Enable+0x1c>)
 8004166:	f043 0301 	orr.w	r3, r3, #1
 800416a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	40030400 	.word	0x40030400

0800417c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004180:	4b04      	ldr	r3, [pc, #16]	@ (8004194 <HAL_PWREx_GetVoltageRange+0x18>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004188:	4618      	mov	r0, r3
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40007000 	.word	0x40007000

08004198 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80041a0:	4b27      	ldr	r3, [pc, #156]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80041a8:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80041aa:	f000 f871 	bl	8004290 <HAL_PWREx_SMPS_GetEffectiveMode>
 80041ae:	4603      	mov	r3, r0
 80041b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041b4:	d101      	bne.n	80041ba <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e03e      	b.n	8004238 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80041ba:	4b21      	ldr	r3, [pc, #132]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041c6:	d101      	bne.n	80041cc <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e035      	b.n	8004238 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d101      	bne.n	80041d8 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	e02f      	b.n	8004238 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80041d8:	4b19      	ldr	r3, [pc, #100]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80041e0:	4917      	ldr	r1, [pc, #92]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80041e8:	4b16      	ldr	r3, [pc, #88]	@ (8004244 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	095b      	lsrs	r3, r3, #5
 80041ee:	4a16      	ldr	r2, [pc, #88]	@ (8004248 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80041f0:	fba2 2303 	umull	r2, r3, r2, r3
 80041f4:	09db      	lsrs	r3, r3, #7
 80041f6:	2232      	movs	r2, #50	@ 0x32
 80041f8:	fb02 f303 	mul.w	r3, r2, r3
 80041fc:	4a13      	ldr	r2, [pc, #76]	@ (800424c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80041fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004202:	08db      	lsrs	r3, r3, #3
 8004204:	3301      	adds	r3, #1
 8004206:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004208:	e002      	b.n	8004210 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	3b01      	subs	r3, #1
 800420e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004210:	4b0b      	ldr	r3, [pc, #44]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004218:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800421c:	d102      	bne.n	8004224 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1f2      	bne.n	800420a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004224:	4b06      	ldr	r3, [pc, #24]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800422c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004230:	d101      	bne.n	8004236 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e000      	b.n	8004238 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40007000 	.word	0x40007000
 8004244:	20000000 	.word	0x20000000
 8004248:	0a7c5ac5 	.word	0x0a7c5ac5
 800424c:	cccccccd 	.word	0xcccccccd

08004250 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004254:	4b05      	ldr	r3, [pc, #20]	@ (800426c <HAL_PWREx_EnableVddIO2+0x1c>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	4a04      	ldr	r2, [pc, #16]	@ (800426c <HAL_PWREx_EnableVddIO2+0x1c>)
 800425a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800425e:	6053      	str	r3, [r2, #4]
}
 8004260:	bf00      	nop
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40007000 	.word	0x40007000

08004270 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004274:	4b05      	ldr	r3, [pc, #20]	@ (800428c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	4a04      	ldr	r2, [pc, #16]	@ (800428c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800427a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800427e:	6093      	str	r3, [r2, #8]
}
 8004280:	bf00      	nop
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40007000 	.word	0x40007000

08004290 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8004296:	4b0f      	ldr	r3, [pc, #60]	@ (80042d4 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80042a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042aa:	607b      	str	r3, [r7, #4]
 80042ac:	e00a      	b.n	80042c4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d103      	bne.n	80042c0 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80042b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042bc:	607b      	str	r3, [r7, #4]
 80042be:	e001      	b.n	80042c4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80042c0:	2300      	movs	r3, #0
 80042c2:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80042c4:	687b      	ldr	r3, [r7, #4]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40007000 	.word	0x40007000

080042d8 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b088      	sub	sp, #32
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d102      	bne.n	80042ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	f000 bcc2 	b.w	8004c70 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ec:	4b99      	ldr	r3, [pc, #612]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 030c 	and.w	r3, r3, #12
 80042f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042f6:	4b97      	ldr	r3, [pc, #604]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0310 	and.w	r3, r3, #16
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 80e9 	beq.w	80044e0 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d006      	beq.n	8004322 <HAL_RCC_OscConfig+0x4a>
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	2b0c      	cmp	r3, #12
 8004318:	f040 8083 	bne.w	8004422 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d17f      	bne.n	8004422 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004322:	4b8c      	ldr	r3, [pc, #560]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d006      	beq.n	800433c <HAL_RCC_OscConfig+0x64>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d102      	bne.n	800433c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	f000 bc9a 	b.w	8004c70 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004340:	4b84      	ldr	r3, [pc, #528]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b00      	cmp	r3, #0
 800434a:	d004      	beq.n	8004356 <HAL_RCC_OscConfig+0x7e>
 800434c:	4b81      	ldr	r3, [pc, #516]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004354:	e005      	b.n	8004362 <HAL_RCC_OscConfig+0x8a>
 8004356:	4b7f      	ldr	r3, [pc, #508]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 8004358:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004362:	4293      	cmp	r3, r2
 8004364:	d224      	bcs.n	80043b0 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fe9c 	bl	80050a8 <RCC_SetFlashLatencyFromMSIRange>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	f000 bc7a 	b.w	8004c70 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800437c:	4b75      	ldr	r3, [pc, #468]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a74      	ldr	r2, [pc, #464]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 8004382:	f043 0308 	orr.w	r3, r3, #8
 8004386:	6013      	str	r3, [r2, #0]
 8004388:	4b72      	ldr	r3, [pc, #456]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004394:	496f      	ldr	r1, [pc, #444]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 8004396:	4313      	orrs	r3, r2
 8004398:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800439a:	4b6e      	ldr	r3, [pc, #440]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	021b      	lsls	r3, r3, #8
 80043a8:	496a      	ldr	r1, [pc, #424]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	604b      	str	r3, [r1, #4]
 80043ae:	e026      	b.n	80043fe <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043b0:	4b68      	ldr	r3, [pc, #416]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a67      	ldr	r2, [pc, #412]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 80043b6:	f043 0308 	orr.w	r3, r3, #8
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	4b65      	ldr	r3, [pc, #404]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c8:	4962      	ldr	r1, [pc, #392]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043ce:	4b61      	ldr	r3, [pc, #388]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	021b      	lsls	r3, r3, #8
 80043dc:	495d      	ldr	r1, [pc, #372]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10a      	bne.n	80043fe <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fe5b 	bl	80050a8 <RCC_SetFlashLatencyFromMSIRange>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d002      	beq.n	80043fe <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	f000 bc39 	b.w	8004c70 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80043fe:	f000 fe17 	bl	8005030 <HAL_RCC_GetHCLKFreq>
 8004402:	4603      	mov	r3, r0
 8004404:	4a54      	ldr	r2, [pc, #336]	@ (8004558 <HAL_RCC_OscConfig+0x280>)
 8004406:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004408:	4b54      	ldr	r3, [pc, #336]	@ (800455c <HAL_RCC_OscConfig+0x284>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f7fe fc73 	bl	8002cf8 <HAL_InitTick>
 8004412:	4603      	mov	r3, r0
 8004414:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8004416:	7bfb      	ldrb	r3, [r7, #15]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d060      	beq.n	80044de <HAL_RCC_OscConfig+0x206>
        {
          return status;
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	f000 bc27 	b.w	8004c70 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d039      	beq.n	800449e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800442a:	4b4a      	ldr	r3, [pc, #296]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a49      	ldr	r2, [pc, #292]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 8004430:	f043 0301 	orr.w	r3, r3, #1
 8004434:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004436:	f7fe fcaf 	bl	8002d98 <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800443c:	e00f      	b.n	800445e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800443e:	f7fe fcab 	bl	8002d98 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d908      	bls.n	800445e <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800444c:	4b41      	ldr	r3, [pc, #260]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d102      	bne.n	800445e <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	f000 bc09 	b.w	8004c70 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800445e:	4b3d      	ldr	r3, [pc, #244]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0e9      	beq.n	800443e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800446a:	4b3a      	ldr	r3, [pc, #232]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a39      	ldr	r2, [pc, #228]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 8004470:	f043 0308 	orr.w	r3, r3, #8
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	4b37      	ldr	r3, [pc, #220]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004482:	4934      	ldr	r1, [pc, #208]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 8004484:	4313      	orrs	r3, r2
 8004486:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004488:	4b32      	ldr	r3, [pc, #200]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	021b      	lsls	r3, r3, #8
 8004496:	492f      	ldr	r1, [pc, #188]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 8004498:	4313      	orrs	r3, r2
 800449a:	604b      	str	r3, [r1, #4]
 800449c:	e020      	b.n	80044e0 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800449e:	4b2d      	ldr	r3, [pc, #180]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 80044a4:	f023 0301 	bic.w	r3, r3, #1
 80044a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044aa:	f7fe fc75 	bl	8002d98 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044b0:	e00e      	b.n	80044d0 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044b2:	f7fe fc71 	bl	8002d98 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d907      	bls.n	80044d0 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044c0:	4b24      	ldr	r3, [pc, #144]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e3cf      	b.n	8004c70 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044d0:	4b20      	ldr	r3, [pc, #128]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1ea      	bne.n	80044b2 <HAL_RCC_OscConfig+0x1da>
 80044dc:	e000      	b.n	80044e0 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d07e      	beq.n	80045ea <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	2b08      	cmp	r3, #8
 80044f0:	d005      	beq.n	80044fe <HAL_RCC_OscConfig+0x226>
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	2b0c      	cmp	r3, #12
 80044f6:	d10e      	bne.n	8004516 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	d10b      	bne.n	8004516 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044fe:	4b15      	ldr	r3, [pc, #84]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d06e      	beq.n	80045e8 <HAL_RCC_OscConfig+0x310>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d16a      	bne.n	80045e8 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e3ac      	b.n	8004c70 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800451e:	d106      	bne.n	800452e <HAL_RCC_OscConfig+0x256>
 8004520:	4b0c      	ldr	r3, [pc, #48]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a0b      	ldr	r2, [pc, #44]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 8004526:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	e024      	b.n	8004578 <HAL_RCC_OscConfig+0x2a0>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004536:	d113      	bne.n	8004560 <HAL_RCC_OscConfig+0x288>
 8004538:	4b06      	ldr	r3, [pc, #24]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a05      	ldr	r2, [pc, #20]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 800453e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	4b03      	ldr	r3, [pc, #12]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a02      	ldr	r2, [pc, #8]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 800454a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	e012      	b.n	8004578 <HAL_RCC_OscConfig+0x2a0>
 8004552:	bf00      	nop
 8004554:	40021000 	.word	0x40021000
 8004558:	20000000 	.word	0x20000000
 800455c:	2000002c 	.word	0x2000002c
 8004560:	4b8b      	ldr	r3, [pc, #556]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a8a      	ldr	r2, [pc, #552]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 8004566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	4b88      	ldr	r3, [pc, #544]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a87      	ldr	r2, [pc, #540]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 8004572:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d019      	beq.n	80045b4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004580:	f7fe fc0a 	bl	8002d98 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004586:	e00e      	b.n	80045a6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004588:	f7fe fc06 	bl	8002d98 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b64      	cmp	r3, #100	@ 0x64
 8004594:	d907      	bls.n	80045a6 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004596:	4b7e      	ldr	r3, [pc, #504]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e364      	b.n	8004c70 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045a6:	4b7a      	ldr	r3, [pc, #488]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0ea      	beq.n	8004588 <HAL_RCC_OscConfig+0x2b0>
 80045b2:	e01a      	b.n	80045ea <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b4:	f7fe fbf0 	bl	8002d98 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045ba:	e00e      	b.n	80045da <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045bc:	f7fe fbec 	bl	8002d98 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b64      	cmp	r3, #100	@ 0x64
 80045c8:	d907      	bls.n	80045da <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045ca:	4b71      	ldr	r3, [pc, #452]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e34a      	b.n	8004c70 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045da:	4b6d      	ldr	r3, [pc, #436]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1ea      	bne.n	80045bc <HAL_RCC_OscConfig+0x2e4>
 80045e6:	e000      	b.n	80045ea <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d06c      	beq.n	80046d0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d005      	beq.n	8004608 <HAL_RCC_OscConfig+0x330>
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	2b0c      	cmp	r3, #12
 8004600:	d119      	bne.n	8004636 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2b02      	cmp	r3, #2
 8004606:	d116      	bne.n	8004636 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004608:	4b61      	ldr	r3, [pc, #388]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_RCC_OscConfig+0x348>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e327      	b.n	8004c70 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004620:	4b5b      	ldr	r3, [pc, #364]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	061b      	lsls	r3, r3, #24
 800462e:	4958      	ldr	r1, [pc, #352]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 8004630:	4313      	orrs	r3, r2
 8004632:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004634:	e04c      	b.n	80046d0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d029      	beq.n	8004692 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800463e:	4b54      	ldr	r3, [pc, #336]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a53      	ldr	r2, [pc, #332]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 8004644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464a:	f7fe fba5 	bl	8002d98 <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004650:	e00e      	b.n	8004670 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004652:	f7fe fba1 	bl	8002d98 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d907      	bls.n	8004670 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004660:	4b4b      	ldr	r3, [pc, #300]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e2ff      	b.n	8004c70 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004670:	4b47      	ldr	r3, [pc, #284]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0ea      	beq.n	8004652 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467c:	4b44      	ldr	r3, [pc, #272]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	061b      	lsls	r3, r3, #24
 800468a:	4941      	ldr	r1, [pc, #260]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 800468c:	4313      	orrs	r3, r2
 800468e:	604b      	str	r3, [r1, #4]
 8004690:	e01e      	b.n	80046d0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004692:	4b3f      	ldr	r3, [pc, #252]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a3e      	ldr	r2, [pc, #248]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 8004698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800469c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469e:	f7fe fb7b 	bl	8002d98 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046a4:	e00e      	b.n	80046c4 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a6:	f7fe fb77 	bl	8002d98 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d907      	bls.n	80046c4 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046b4:	4b36      	ldr	r3, [pc, #216]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e2d5      	b.n	8004c70 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046c4:	4b32      	ldr	r3, [pc, #200]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1ea      	bne.n	80046a6 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d062      	beq.n	80047a2 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d038      	beq.n	8004756 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d108      	bne.n	80046fe <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80046ec:	4b28      	ldr	r3, [pc, #160]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 80046ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046f2:	4a27      	ldr	r2, [pc, #156]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 80046f4:	f023 0310 	bic.w	r3, r3, #16
 80046f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80046fc:	e007      	b.n	800470e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80046fe:	4b24      	ldr	r3, [pc, #144]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 8004700:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004704:	4a22      	ldr	r2, [pc, #136]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 8004706:	f043 0310 	orr.w	r3, r3, #16
 800470a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800470e:	4b20      	ldr	r3, [pc, #128]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 8004710:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004714:	4a1e      	ldr	r2, [pc, #120]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471e:	f7fe fb3b 	bl	8002d98 <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004724:	e00f      	b.n	8004746 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004726:	f7fe fb37 	bl	8002d98 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b07      	cmp	r3, #7
 8004732:	d908      	bls.n	8004746 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004734:	4b16      	ldr	r3, [pc, #88]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 8004736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e294      	b.n	8004c70 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004746:	4b12      	ldr	r3, [pc, #72]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 8004748:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0e8      	beq.n	8004726 <HAL_RCC_OscConfig+0x44e>
 8004754:	e025      	b.n	80047a2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004756:	4b0e      	ldr	r3, [pc, #56]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 8004758:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800475c:	4a0c      	ldr	r2, [pc, #48]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 800475e:	f023 0301 	bic.w	r3, r3, #1
 8004762:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004766:	f7fe fb17 	bl	8002d98 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800476c:	e012      	b.n	8004794 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800476e:	f7fe fb13 	bl	8002d98 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b07      	cmp	r3, #7
 800477a:	d90b      	bls.n	8004794 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800477c:	4b04      	ldr	r3, [pc, #16]	@ (8004790 <HAL_RCC_OscConfig+0x4b8>)
 800477e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d004      	beq.n	8004794 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e270      	b.n	8004c70 <HAL_RCC_OscConfig+0x998>
 800478e:	bf00      	nop
 8004790:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004794:	4ba8      	ldr	r3, [pc, #672]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 8004796:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1e5      	bne.n	800476e <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 812d 	beq.w	8004a0a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047b0:	2300      	movs	r3, #0
 80047b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047b4:	4ba0      	ldr	r3, [pc, #640]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 80047b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10d      	bne.n	80047dc <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047c0:	4b9d      	ldr	r3, [pc, #628]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 80047c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c4:	4a9c      	ldr	r2, [pc, #624]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 80047c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80047cc:	4b9a      	ldr	r3, [pc, #616]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 80047ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047d8:	2301      	movs	r3, #1
 80047da:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047dc:	4b97      	ldr	r3, [pc, #604]	@ (8004a3c <HAL_RCC_OscConfig+0x764>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d11e      	bne.n	8004826 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047e8:	4b94      	ldr	r3, [pc, #592]	@ (8004a3c <HAL_RCC_OscConfig+0x764>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a93      	ldr	r2, [pc, #588]	@ (8004a3c <HAL_RCC_OscConfig+0x764>)
 80047ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047f4:	f7fe fad0 	bl	8002d98 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047fa:	e00e      	b.n	800481a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047fc:	f7fe facc 	bl	8002d98 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d907      	bls.n	800481a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800480a:	4b8c      	ldr	r3, [pc, #560]	@ (8004a3c <HAL_RCC_OscConfig+0x764>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e22a      	b.n	8004c70 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800481a:	4b88      	ldr	r3, [pc, #544]	@ (8004a3c <HAL_RCC_OscConfig+0x764>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0ea      	beq.n	80047fc <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d01f      	beq.n	8004872 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 0304 	and.w	r3, r3, #4
 800483a:	2b00      	cmp	r3, #0
 800483c:	d010      	beq.n	8004860 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800483e:	4b7e      	ldr	r3, [pc, #504]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 8004840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004844:	4a7c      	ldr	r2, [pc, #496]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 8004846:	f043 0304 	orr.w	r3, r3, #4
 800484a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800484e:	4b7a      	ldr	r3, [pc, #488]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 8004850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004854:	4a78      	ldr	r2, [pc, #480]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 8004856:	f043 0301 	orr.w	r3, r3, #1
 800485a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800485e:	e018      	b.n	8004892 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004860:	4b75      	ldr	r3, [pc, #468]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004866:	4a74      	ldr	r2, [pc, #464]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004870:	e00f      	b.n	8004892 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004872:	4b71      	ldr	r3, [pc, #452]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 8004874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004878:	4a6f      	ldr	r2, [pc, #444]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 800487a:	f023 0301 	bic.w	r3, r3, #1
 800487e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004882:	4b6d      	ldr	r3, [pc, #436]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004888:	4a6b      	ldr	r2, [pc, #428]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 800488a:	f023 0304 	bic.w	r3, r3, #4
 800488e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d068      	beq.n	800496c <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489a:	f7fe fa7d 	bl	8002d98 <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a0:	e011      	b.n	80048c6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a2:	f7fe fa79 	bl	8002d98 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d908      	bls.n	80048c6 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048b4:	4b60      	ldr	r3, [pc, #384]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 80048b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e1d4      	b.n	8004c70 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048c6:	4b5c      	ldr	r3, [pc, #368]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 80048c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0e6      	beq.n	80048a2 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d022      	beq.n	8004926 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80048e0:	4b55      	ldr	r3, [pc, #340]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 80048e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e6:	4a54      	ldr	r2, [pc, #336]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 80048e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80048f0:	e011      	b.n	8004916 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f2:	f7fe fa51 	bl	8002d98 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004900:	4293      	cmp	r3, r2
 8004902:	d908      	bls.n	8004916 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004904:	4b4c      	ldr	r3, [pc, #304]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800490a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e1ac      	b.n	8004c70 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004916:	4b48      	ldr	r3, [pc, #288]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 8004918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0e6      	beq.n	80048f2 <HAL_RCC_OscConfig+0x61a>
 8004924:	e068      	b.n	80049f8 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004926:	4b44      	ldr	r3, [pc, #272]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 8004928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800492c:	4a42      	ldr	r2, [pc, #264]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 800492e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004932:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004936:	e011      	b.n	800495c <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004938:	f7fe fa2e 	bl	8002d98 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004946:	4293      	cmp	r3, r2
 8004948:	d908      	bls.n	800495c <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800494a:	4b3b      	ldr	r3, [pc, #236]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 800494c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004950:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e189      	b.n	8004c70 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800495c:	4b36      	ldr	r3, [pc, #216]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004962:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1e6      	bne.n	8004938 <HAL_RCC_OscConfig+0x660>
 800496a:	e045      	b.n	80049f8 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496c:	f7fe fa14 	bl	8002d98 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004972:	e011      	b.n	8004998 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004974:	f7fe fa10 	bl	8002d98 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004982:	4293      	cmp	r3, r2
 8004984:	d908      	bls.n	8004998 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004986:	4b2c      	ldr	r3, [pc, #176]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 8004988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e16b      	b.n	8004c70 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004998:	4b27      	ldr	r3, [pc, #156]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 800499a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1e6      	bne.n	8004974 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80049a6:	4b24      	ldr	r3, [pc, #144]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 80049a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d021      	beq.n	80049f8 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80049b4:	4b20      	ldr	r3, [pc, #128]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 80049bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049c4:	e011      	b.n	80049ea <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c6:	f7fe f9e7 	bl	8002d98 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d908      	bls.n	80049ea <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049d8:	4b17      	ldr	r3, [pc, #92]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 80049da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e142      	b.n	8004c70 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049ea:	4b13      	ldr	r3, [pc, #76]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 80049ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1e6      	bne.n	80049c6 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049f8:	7ffb      	ldrb	r3, [r7, #31]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d105      	bne.n	8004a0a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 8004a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a02:	4a0d      	ldr	r2, [pc, #52]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 8004a04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a08:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0320 	and.w	r3, r3, #32
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d04f      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d028      	beq.n	8004a70 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a1e:	4b06      	ldr	r3, [pc, #24]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 8004a20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a24:	4a04      	ldr	r2, [pc, #16]	@ (8004a38 <HAL_RCC_OscConfig+0x760>)
 8004a26:	f043 0301 	orr.w	r3, r3, #1
 8004a2a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a2e:	f7fe f9b3 	bl	8002d98 <HAL_GetTick>
 8004a32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a34:	e014      	b.n	8004a60 <HAL_RCC_OscConfig+0x788>
 8004a36:	bf00      	nop
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a40:	f7fe f9aa 	bl	8002d98 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d908      	bls.n	8004a60 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a4e:	4b8a      	ldr	r3, [pc, #552]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004a50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e107      	b.n	8004c70 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a60:	4b85      	ldr	r3, [pc, #532]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004a62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0e8      	beq.n	8004a40 <HAL_RCC_OscConfig+0x768>
 8004a6e:	e022      	b.n	8004ab6 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a70:	4b81      	ldr	r3, [pc, #516]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004a72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a76:	4a80      	ldr	r2, [pc, #512]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004a78:	f023 0301 	bic.w	r3, r3, #1
 8004a7c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a80:	f7fe f98a 	bl	8002d98 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a86:	e00f      	b.n	8004aa8 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a88:	f7fe f986 	bl	8002d98 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d908      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a96:	4b78      	ldr	r3, [pc, #480]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004a98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e0e3      	b.n	8004c70 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004aa8:	4b73      	ldr	r3, [pc, #460]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004aaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1e8      	bne.n	8004a88 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 80d7 	beq.w	8004c6e <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ac0:	4b6d      	ldr	r3, [pc, #436]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 030c 	and.w	r3, r3, #12
 8004ac8:	2b0c      	cmp	r3, #12
 8004aca:	f000 8091 	beq.w	8004bf0 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d166      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad6:	4b68      	ldr	r3, [pc, #416]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a67      	ldr	r2, [pc, #412]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004adc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae2:	f7fe f959 	bl	8002d98 <HAL_GetTick>
 8004ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ae8:	e00e      	b.n	8004b08 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aea:	f7fe f955 	bl	8002d98 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d907      	bls.n	8004b08 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004af8:	4b5f      	ldr	r3, [pc, #380]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e0b3      	b.n	8004c70 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b08:	4b5b      	ldr	r3, [pc, #364]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1ea      	bne.n	8004aea <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b14:	4b58      	ldr	r3, [pc, #352]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	4b58      	ldr	r3, [pc, #352]	@ (8004c7c <HAL_RCC_OscConfig+0x9a4>)
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b24:	3a01      	subs	r2, #1
 8004b26:	0112      	lsls	r2, r2, #4
 8004b28:	4311      	orrs	r1, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b2e:	0212      	lsls	r2, r2, #8
 8004b30:	4311      	orrs	r1, r2
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004b36:	0852      	lsrs	r2, r2, #1
 8004b38:	3a01      	subs	r2, #1
 8004b3a:	0552      	lsls	r2, r2, #21
 8004b3c:	4311      	orrs	r1, r2
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004b42:	0852      	lsrs	r2, r2, #1
 8004b44:	3a01      	subs	r2, #1
 8004b46:	0652      	lsls	r2, r2, #25
 8004b48:	4311      	orrs	r1, r2
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b4e:	06d2      	lsls	r2, r2, #27
 8004b50:	430a      	orrs	r2, r1
 8004b52:	4949      	ldr	r1, [pc, #292]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b58:	4b47      	ldr	r3, [pc, #284]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a46      	ldr	r2, [pc, #280]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004b5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b62:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b64:	4b44      	ldr	r3, [pc, #272]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	4a43      	ldr	r2, [pc, #268]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004b6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b6e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b70:	f7fe f912 	bl	8002d98 <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b76:	e00e      	b.n	8004b96 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b78:	f7fe f90e 	bl	8002d98 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d907      	bls.n	8004b96 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b86:	4b3c      	ldr	r3, [pc, #240]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e06c      	b.n	8004c70 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b96:	4b38      	ldr	r3, [pc, #224]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0ea      	beq.n	8004b78 <HAL_RCC_OscConfig+0x8a0>
 8004ba2:	e064      	b.n	8004c6e <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ba4:	4b34      	ldr	r3, [pc, #208]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a33      	ldr	r2, [pc, #204]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004baa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb0:	f7fe f8f2 	bl	8002d98 <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bb6:	e00e      	b.n	8004bd6 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb8:	f7fe f8ee 	bl	8002d98 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d907      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bc6:	4b2c      	ldr	r3, [pc, #176]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e04c      	b.n	8004c70 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bd6:	4b28      	ldr	r3, [pc, #160]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1ea      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004be2:	4b25      	ldr	r3, [pc, #148]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004be4:	68da      	ldr	r2, [r3, #12]
 8004be6:	4924      	ldr	r1, [pc, #144]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004be8:	4b25      	ldr	r3, [pc, #148]	@ (8004c80 <HAL_RCC_OscConfig+0x9a8>)
 8004bea:	4013      	ands	r3, r2
 8004bec:	60cb      	str	r3, [r1, #12]
 8004bee:	e03e      	b.n	8004c6e <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e039      	b.n	8004c70 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8004c78 <HAL_RCC_OscConfig+0x9a0>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f003 0203 	and.w	r2, r3, #3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d12c      	bne.n	8004c6a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d123      	bne.n	8004c6a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c2c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d11b      	bne.n	8004c6a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c3c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d113      	bne.n	8004c6a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4c:	085b      	lsrs	r3, r3, #1
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d109      	bne.n	8004c6a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c60:	085b      	lsrs	r3, r3, #1
 8004c62:	3b01      	subs	r3, #1
 8004c64:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d001      	beq.n	8004c6e <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e000      	b.n	8004c70 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3720      	adds	r7, #32
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	019f800c 	.word	0x019f800c
 8004c80:	feeefffc 	.word	0xfeeefffc

08004c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e11c      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c9c:	4b90      	ldr	r3, [pc, #576]	@ (8004ee0 <HAL_RCC_ClockConfig+0x25c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 030f 	and.w	r3, r3, #15
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d910      	bls.n	8004ccc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004caa:	4b8d      	ldr	r3, [pc, #564]	@ (8004ee0 <HAL_RCC_ClockConfig+0x25c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f023 020f 	bic.w	r2, r3, #15
 8004cb2:	498b      	ldr	r1, [pc, #556]	@ (8004ee0 <HAL_RCC_ClockConfig+0x25c>)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cba:	4b89      	ldr	r3, [pc, #548]	@ (8004ee0 <HAL_RCC_ClockConfig+0x25c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d001      	beq.n	8004ccc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e104      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d010      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	4b81      	ldr	r3, [pc, #516]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d908      	bls.n	8004cfa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce8:	4b7e      	ldr	r3, [pc, #504]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	497b      	ldr	r1, [pc, #492]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 8085 	beq.w	8004e12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2b03      	cmp	r3, #3
 8004d0e:	d11f      	bne.n	8004d50 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d10:	4b74      	ldr	r3, [pc, #464]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e0da      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004d20:	f000 fa26 	bl	8005170 <RCC_GetSysClockFreqFromPLLSource>
 8004d24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	4a6f      	ldr	r2, [pc, #444]	@ (8004ee8 <HAL_RCC_ClockConfig+0x264>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d947      	bls.n	8004dbe <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004d2e:	4b6d      	ldr	r3, [pc, #436]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d141      	bne.n	8004dbe <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d3a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d42:	4a68      	ldr	r2, [pc, #416]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004d44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d4a:	2380      	movs	r3, #128	@ 0x80
 8004d4c:	617b      	str	r3, [r7, #20]
 8004d4e:	e036      	b.n	8004dbe <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d107      	bne.n	8004d68 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d58:	4b62      	ldr	r3, [pc, #392]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d115      	bne.n	8004d90 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0b6      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d107      	bne.n	8004d80 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d70:	4b5c      	ldr	r3, [pc, #368]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d109      	bne.n	8004d90 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e0aa      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d80:	4b58      	ldr	r3, [pc, #352]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0a2      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004d90:	f000 f8b0 	bl	8004ef4 <HAL_RCC_GetSysClockFreq>
 8004d94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	4a53      	ldr	r2, [pc, #332]	@ (8004ee8 <HAL_RCC_ClockConfig+0x264>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d90f      	bls.n	8004dbe <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004d9e:	4b51      	ldr	r3, [pc, #324]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d109      	bne.n	8004dbe <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004daa:	4b4e      	ldr	r3, [pc, #312]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004db2:	4a4c      	ldr	r2, [pc, #304]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004db4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004db8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004dba:	2380      	movs	r3, #128	@ 0x80
 8004dbc:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004dbe:	4b49      	ldr	r3, [pc, #292]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f023 0203 	bic.w	r2, r3, #3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	4946      	ldr	r1, [pc, #280]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dd0:	f7fd ffe2 	bl	8002d98 <HAL_GetTick>
 8004dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dd6:	e013      	b.n	8004e00 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dd8:	f7fd ffde 	bl	8002d98 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d90a      	bls.n	8004e00 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dea:	4b3e      	ldr	r3, [pc, #248]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 020c 	and.w	r2, r3, #12
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d001      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e06a      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e00:	4b38      	ldr	r3, [pc, #224]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 020c 	and.w	r2, r3, #12
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d1e2      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2b80      	cmp	r3, #128	@ 0x80
 8004e16:	d105      	bne.n	8004e24 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e18:	4b32      	ldr	r3, [pc, #200]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	4a31      	ldr	r2, [pc, #196]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004e1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e22:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d010      	beq.n	8004e52 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	4b2b      	ldr	r3, [pc, #172]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d208      	bcs.n	8004e52 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e40:	4b28      	ldr	r3, [pc, #160]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	4925      	ldr	r1, [pc, #148]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e52:	4b23      	ldr	r3, [pc, #140]	@ (8004ee0 <HAL_RCC_ClockConfig+0x25c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d210      	bcs.n	8004e82 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e60:	4b1f      	ldr	r3, [pc, #124]	@ (8004ee0 <HAL_RCC_ClockConfig+0x25c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f023 020f 	bic.w	r2, r3, #15
 8004e68:	491d      	ldr	r1, [pc, #116]	@ (8004ee0 <HAL_RCC_ClockConfig+0x25c>)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e70:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee0 <HAL_RCC_ClockConfig+0x25c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 030f 	and.w	r3, r3, #15
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d001      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e029      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d008      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e8e:	4b15      	ldr	r3, [pc, #84]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	4912      	ldr	r1, [pc, #72]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0308 	and.w	r3, r3, #8
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d009      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eac:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	490a      	ldr	r1, [pc, #40]	@ (8004ee4 <HAL_RCC_ClockConfig+0x260>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004ec0:	f000 f8b6 	bl	8005030 <HAL_RCC_GetHCLKFreq>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	4a09      	ldr	r2, [pc, #36]	@ (8004eec <HAL_RCC_ClockConfig+0x268>)
 8004ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004eca:	4b09      	ldr	r3, [pc, #36]	@ (8004ef0 <HAL_RCC_ClockConfig+0x26c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fd ff12 	bl	8002cf8 <HAL_InitTick>
 8004ed4:	4603      	mov	r3, r0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	40022000 	.word	0x40022000
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	04c4b400 	.word	0x04c4b400
 8004eec:	20000000 	.word	0x20000000
 8004ef0:	2000002c 	.word	0x2000002c

08004ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b089      	sub	sp, #36	@ 0x24
 8004ef8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	61fb      	str	r3, [r7, #28]
 8004efe:	2300      	movs	r3, #0
 8004f00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f02:	4b47      	ldr	r3, [pc, #284]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 030c 	and.w	r3, r3, #12
 8004f0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f0c:	4b44      	ldr	r3, [pc, #272]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f003 0303 	and.w	r3, r3, #3
 8004f14:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <HAL_RCC_GetSysClockFreq+0x34>
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	2b0c      	cmp	r3, #12
 8004f20:	d121      	bne.n	8004f66 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d11e      	bne.n	8004f66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f28:	4b3d      	ldr	r3, [pc, #244]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0308 	and.w	r3, r3, #8
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d107      	bne.n	8004f44 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f34:	4b3a      	ldr	r3, [pc, #232]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f3a:	0a1b      	lsrs	r3, r3, #8
 8004f3c:	f003 030f 	and.w	r3, r3, #15
 8004f40:	61fb      	str	r3, [r7, #28]
 8004f42:	e005      	b.n	8004f50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f44:	4b36      	ldr	r3, [pc, #216]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	091b      	lsrs	r3, r3, #4
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004f50:	4a34      	ldr	r2, [pc, #208]	@ (8005024 <HAL_RCC_GetSysClockFreq+0x130>)
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f58:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10d      	bne.n	8004f7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f64:	e00a      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d102      	bne.n	8004f72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f6c:	4b2e      	ldr	r3, [pc, #184]	@ (8005028 <HAL_RCC_GetSysClockFreq+0x134>)
 8004f6e:	61bb      	str	r3, [r7, #24]
 8004f70:	e004      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d101      	bne.n	8004f7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f78:	4b2c      	ldr	r3, [pc, #176]	@ (800502c <HAL_RCC_GetSysClockFreq+0x138>)
 8004f7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	2b0c      	cmp	r3, #12
 8004f80:	d146      	bne.n	8005010 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004f82:	4b27      	ldr	r3, [pc, #156]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f8c:	4b24      	ldr	r3, [pc, #144]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	091b      	lsrs	r3, r3, #4
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	3301      	adds	r3, #1
 8004f98:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d003      	beq.n	8004fa8 <HAL_RCC_GetSysClockFreq+0xb4>
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	d00d      	beq.n	8004fc2 <HAL_RCC_GetSysClockFreq+0xce>
 8004fa6:	e019      	b.n	8004fdc <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fa8:	4a1f      	ldr	r2, [pc, #124]	@ (8005028 <HAL_RCC_GetSysClockFreq+0x134>)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb0:	4a1b      	ldr	r2, [pc, #108]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004fb2:	68d2      	ldr	r2, [r2, #12]
 8004fb4:	0a12      	lsrs	r2, r2, #8
 8004fb6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004fba:	fb02 f303 	mul.w	r3, r2, r3
 8004fbe:	617b      	str	r3, [r7, #20]
        break;
 8004fc0:	e019      	b.n	8004ff6 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fc2:	4a1a      	ldr	r2, [pc, #104]	@ (800502c <HAL_RCC_GetSysClockFreq+0x138>)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fca:	4a15      	ldr	r2, [pc, #84]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004fcc:	68d2      	ldr	r2, [r2, #12]
 8004fce:	0a12      	lsrs	r2, r2, #8
 8004fd0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004fd4:	fb02 f303 	mul.w	r3, r2, r3
 8004fd8:	617b      	str	r3, [r7, #20]
        break;
 8004fda:	e00c      	b.n	8004ff6 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fdc:	69fa      	ldr	r2, [r7, #28]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe4:	4a0e      	ldr	r2, [pc, #56]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004fe6:	68d2      	ldr	r2, [r2, #12]
 8004fe8:	0a12      	lsrs	r2, r2, #8
 8004fea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004fee:	fb02 f303 	mul.w	r3, r2, r3
 8004ff2:	617b      	str	r3, [r7, #20]
        break;
 8004ff4:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	0e5b      	lsrs	r3, r3, #25
 8004ffc:	f003 0303 	and.w	r3, r3, #3
 8005000:	3301      	adds	r3, #1
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	fbb2 f3f3 	udiv	r3, r2, r3
 800500e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005010:	69bb      	ldr	r3, [r7, #24]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3724      	adds	r7, #36	@ 0x24
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40021000 	.word	0x40021000
 8005024:	08006928 	.word	0x08006928
 8005028:	00f42400 	.word	0x00f42400
 800502c:	007a1200 	.word	0x007a1200

08005030 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8005034:	f7ff ff5e 	bl	8004ef4 <HAL_RCC_GetSysClockFreq>
 8005038:	4602      	mov	r2, r0
 800503a:	4b05      	ldr	r3, [pc, #20]	@ (8005050 <HAL_RCC_GetHCLKFreq+0x20>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	091b      	lsrs	r3, r3, #4
 8005040:	f003 030f 	and.w	r3, r3, #15
 8005044:	4903      	ldr	r1, [pc, #12]	@ (8005054 <HAL_RCC_GetHCLKFreq+0x24>)
 8005046:	5ccb      	ldrb	r3, [r1, r3]
 8005048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800504c:	4618      	mov	r0, r3
 800504e:	bd80      	pop	{r7, pc}
 8005050:	40021000 	.word	0x40021000
 8005054:	08006910 	.word	0x08006910

08005058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800505c:	f7ff ffe8 	bl	8005030 <HAL_RCC_GetHCLKFreq>
 8005060:	4602      	mov	r2, r0
 8005062:	4b05      	ldr	r3, [pc, #20]	@ (8005078 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	0a1b      	lsrs	r3, r3, #8
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	4903      	ldr	r1, [pc, #12]	@ (800507c <HAL_RCC_GetPCLK1Freq+0x24>)
 800506e:	5ccb      	ldrb	r3, [r1, r3]
 8005070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005074:	4618      	mov	r0, r3
 8005076:	bd80      	pop	{r7, pc}
 8005078:	40021000 	.word	0x40021000
 800507c:	08006920 	.word	0x08006920

08005080 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005084:	f7ff ffd4 	bl	8005030 <HAL_RCC_GetHCLKFreq>
 8005088:	4602      	mov	r2, r0
 800508a:	4b05      	ldr	r3, [pc, #20]	@ (80050a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	0adb      	lsrs	r3, r3, #11
 8005090:	f003 0307 	and.w	r3, r3, #7
 8005094:	4903      	ldr	r1, [pc, #12]	@ (80050a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005096:	5ccb      	ldrb	r3, [r1, r3]
 8005098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800509c:	4618      	mov	r0, r3
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	40021000 	.word	0x40021000
 80050a4:	08006920 	.word	0x08006920

080050a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80050b0:	2300      	movs	r3, #0
 80050b2:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80050b4:	4b2c      	ldr	r3, [pc, #176]	@ (8005168 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80050b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80050c0:	f7ff f85c 	bl	800417c <HAL_PWREx_GetVoltageRange>
 80050c4:	6138      	str	r0, [r7, #16]
 80050c6:	e014      	b.n	80050f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050c8:	4b27      	ldr	r3, [pc, #156]	@ (8005168 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80050ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050cc:	4a26      	ldr	r2, [pc, #152]	@ (8005168 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80050ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80050d4:	4b24      	ldr	r3, [pc, #144]	@ (8005168 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80050d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050e0:	f7ff f84c 	bl	800417c <HAL_PWREx_GetVoltageRange>
 80050e4:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050e6:	4b20      	ldr	r3, [pc, #128]	@ (8005168 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80050e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ea:	4a1f      	ldr	r2, [pc, #124]	@ (8005168 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80050ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <RCC_SetFlashLatencyFromMSIRange+0x58>
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050fe:	d10b      	bne.n	8005118 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b80      	cmp	r3, #128	@ 0x80
 8005104:	d919      	bls.n	800513a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2ba0      	cmp	r3, #160	@ 0xa0
 800510a:	d902      	bls.n	8005112 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800510c:	2302      	movs	r3, #2
 800510e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005110:	e013      	b.n	800513a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005112:	2301      	movs	r3, #1
 8005114:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005116:	e010      	b.n	800513a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b80      	cmp	r3, #128	@ 0x80
 800511c:	d902      	bls.n	8005124 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800511e:	2303      	movs	r3, #3
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	e00a      	b.n	800513a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b80      	cmp	r3, #128	@ 0x80
 8005128:	d102      	bne.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800512a:	2302      	movs	r3, #2
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	e004      	b.n	800513a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b70      	cmp	r3, #112	@ 0x70
 8005134:	d101      	bne.n	800513a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005136:	2301      	movs	r3, #1
 8005138:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800513a:	4b0c      	ldr	r3, [pc, #48]	@ (800516c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f023 020f 	bic.w	r2, r3, #15
 8005142:	490a      	ldr	r1, [pc, #40]	@ (800516c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800514a:	4b08      	ldr	r3, [pc, #32]	@ (800516c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	429a      	cmp	r2, r3
 8005156:	d001      	beq.n	800515c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e000      	b.n	800515e <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	40021000 	.word	0x40021000
 800516c:	40022000 	.word	0x40022000

08005170 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005176:	4b31      	ldr	r3, [pc, #196]	@ (800523c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005180:	4b2e      	ldr	r3, [pc, #184]	@ (800523c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	091b      	lsrs	r3, r3, #4
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	3301      	adds	r3, #1
 800518c:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b03      	cmp	r3, #3
 8005192:	d015      	beq.n	80051c0 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b03      	cmp	r3, #3
 8005198:	d839      	bhi.n	800520e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d01c      	beq.n	80051da <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d133      	bne.n	800520e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051a6:	4a26      	ldr	r2, [pc, #152]	@ (8005240 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ae:	4a23      	ldr	r2, [pc, #140]	@ (800523c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80051b0:	68d2      	ldr	r2, [r2, #12]
 80051b2:	0a12      	lsrs	r2, r2, #8
 80051b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051b8:	fb02 f303 	mul.w	r3, r2, r3
 80051bc:	613b      	str	r3, [r7, #16]
      break;
 80051be:	e029      	b.n	8005214 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051c0:	4a20      	ldr	r2, [pc, #128]	@ (8005244 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c8:	4a1c      	ldr	r2, [pc, #112]	@ (800523c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80051ca:	68d2      	ldr	r2, [r2, #12]
 80051cc:	0a12      	lsrs	r2, r2, #8
 80051ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051d2:	fb02 f303 	mul.w	r3, r2, r3
 80051d6:	613b      	str	r3, [r7, #16]
      break;
 80051d8:	e01c      	b.n	8005214 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80051da:	4b18      	ldr	r3, [pc, #96]	@ (800523c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d107      	bne.n	80051f6 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80051e6:	4b15      	ldr	r3, [pc, #84]	@ (800523c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80051e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051ec:	0a1b      	lsrs	r3, r3, #8
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	e005      	b.n	8005202 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80051f6:	4b11      	ldr	r3, [pc, #68]	@ (800523c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	091b      	lsrs	r3, r3, #4
 80051fc:	f003 030f 	and.w	r3, r3, #15
 8005200:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8005202:	4a11      	ldr	r2, [pc, #68]	@ (8005248 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800520a:	613b      	str	r3, [r7, #16]
        break;
 800520c:	e002      	b.n	8005214 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800520e:	2300      	movs	r3, #0
 8005210:	613b      	str	r3, [r7, #16]
      break;
 8005212:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005214:	4b09      	ldr	r3, [pc, #36]	@ (800523c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	0e5b      	lsrs	r3, r3, #25
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	3301      	adds	r3, #1
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	fbb2 f3f3 	udiv	r3, r2, r3
 800522c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800522e:	683b      	ldr	r3, [r7, #0]
}
 8005230:	4618      	mov	r0, r3
 8005232:	371c      	adds	r7, #28
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	40021000 	.word	0x40021000
 8005240:	00f42400 	.word	0x00f42400
 8005244:	007a1200 	.word	0x007a1200
 8005248:	08006928 	.word	0x08006928

0800524c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005254:	2300      	movs	r3, #0
 8005256:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005258:	2300      	movs	r3, #0
 800525a:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005264:	2b00      	cmp	r3, #0
 8005266:	d040      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800526c:	2b80      	cmp	r3, #128	@ 0x80
 800526e:	d02a      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005270:	2b80      	cmp	r3, #128	@ 0x80
 8005272:	d825      	bhi.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005274:	2b60      	cmp	r3, #96	@ 0x60
 8005276:	d026      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005278:	2b60      	cmp	r3, #96	@ 0x60
 800527a:	d821      	bhi.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800527c:	2b40      	cmp	r3, #64	@ 0x40
 800527e:	d006      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005280:	2b40      	cmp	r3, #64	@ 0x40
 8005282:	d81d      	bhi.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005284:	2b00      	cmp	r3, #0
 8005286:	d009      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005288:	2b20      	cmp	r3, #32
 800528a:	d010      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x62>
 800528c:	e018      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800528e:	4b8f      	ldr	r3, [pc, #572]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	4a8e      	ldr	r2, [pc, #568]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005298:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800529a:	e015      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3304      	adds	r3, #4
 80052a0:	2100      	movs	r1, #0
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 fb56 	bl	8005954 <RCCEx_PLLSAI1_Config>
 80052a8:	4603      	mov	r3, r0
 80052aa:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80052ac:	e00c      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3320      	adds	r3, #32
 80052b2:	2100      	movs	r1, #0
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 fc33 	bl	8005b20 <RCCEx_PLLSAI2_Config>
 80052ba:	4603      	mov	r3, r0
 80052bc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80052be:	e003      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	77fb      	strb	r3, [r7, #31]
        break;
 80052c4:	e000      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80052c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052c8:	7ffb      	ldrb	r3, [r7, #31]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10b      	bne.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052ce:	4b7f      	ldr	r3, [pc, #508]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052d4:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052dc:	497b      	ldr	r1, [pc, #492]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80052e4:	e001      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052e6:	7ffb      	ldrb	r3, [r7, #31]
 80052e8:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d047      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052fe:	d030      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005300:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005304:	d82a      	bhi.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005306:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800530a:	d02a      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800530c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005310:	d824      	bhi.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005312:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005316:	d008      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005318:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800531c:	d81e      	bhi.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005326:	d010      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005328:	e018      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800532a:	4b68      	ldr	r3, [pc, #416]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	4a67      	ldr	r2, [pc, #412]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005334:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005336:	e015      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3304      	adds	r3, #4
 800533c:	2100      	movs	r1, #0
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fb08 	bl	8005954 <RCCEx_PLLSAI1_Config>
 8005344:	4603      	mov	r3, r0
 8005346:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005348:	e00c      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	3320      	adds	r3, #32
 800534e:	2100      	movs	r1, #0
 8005350:	4618      	mov	r0, r3
 8005352:	f000 fbe5 	bl	8005b20 <RCCEx_PLLSAI2_Config>
 8005356:	4603      	mov	r3, r0
 8005358:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800535a:	e003      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	77fb      	strb	r3, [r7, #31]
        break;
 8005360:	e000      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8005362:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005364:	7ffb      	ldrb	r3, [r7, #31]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10b      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800536a:	4b58      	ldr	r3, [pc, #352]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800536c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005370:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005378:	4954      	ldr	r1, [pc, #336]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800537a:	4313      	orrs	r3, r2
 800537c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005380:	e001      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005382:	7ffb      	ldrb	r3, [r7, #31]
 8005384:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 80ab 	beq.w	80054ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005394:	2300      	movs	r3, #0
 8005396:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005398:	4b4c      	ldr	r3, [pc, #304]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800539a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800539c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10d      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053a4:	4b49      	ldr	r3, [pc, #292]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a8:	4a48      	ldr	r2, [pc, #288]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80053b0:	4b46      	ldr	r3, [pc, #280]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80053bc:	2301      	movs	r3, #1
 80053be:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053c0:	4b43      	ldr	r3, [pc, #268]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a42      	ldr	r2, [pc, #264]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80053c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053cc:	f7fd fce4 	bl	8002d98 <HAL_GetTick>
 80053d0:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053d2:	e00f      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053d4:	f7fd fce0 	bl	8002d98 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d908      	bls.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053e2:	4b3b      	ldr	r3, [pc, #236]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d109      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	77fb      	strb	r3, [r7, #31]
        }
        break;
 80053f2:	e006      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053f4:	4b36      	ldr	r3, [pc, #216]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0e9      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8005400:	e000      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8005402:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8005404:	7ffb      	ldrb	r3, [r7, #31]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d164      	bne.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800540a:	4b30      	ldr	r3, [pc, #192]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800540c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005410:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005414:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d01f      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x210>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	429a      	cmp	r2, r3
 8005426:	d019      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005428:	4b28      	ldr	r3, [pc, #160]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800542a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800542e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005432:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005434:	4b25      	ldr	r3, [pc, #148]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800543a:	4a24      	ldr	r2, [pc, #144]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800543c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005440:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005444:	4b21      	ldr	r3, [pc, #132]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800544a:	4a20      	ldr	r2, [pc, #128]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800544c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005450:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005454:	4a1d      	ldr	r2, [pc, #116]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d01f      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005466:	f7fd fc97 	bl	8002d98 <HAL_GetTick>
 800546a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800546c:	e012      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800546e:	f7fd fc93 	bl	8002d98 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800547c:	4293      	cmp	r3, r2
 800547e:	d909      	bls.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005480:	4b12      	ldr	r3, [pc, #72]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10a      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8005492:	e007      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005494:	4b0d      	ldr	r3, [pc, #52]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0e5      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x222>
 80054a2:	e000      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80054a4:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80054a6:	7ffb      	ldrb	r3, [r7, #31]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10c      	bne.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054ac:	4b07      	ldr	r3, [pc, #28]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054bc:	4903      	ldr	r1, [pc, #12]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80054c4:	e008      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054c6:	7ffb      	ldrb	r3, [r7, #31]
 80054c8:	77bb      	strb	r3, [r7, #30]
 80054ca:	e005      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80054cc:	40021000 	.word	0x40021000
 80054d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d4:	7ffb      	ldrb	r3, [r7, #31]
 80054d6:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054d8:	7dfb      	ldrb	r3, [r7, #23]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d105      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054de:	4b9c      	ldr	r3, [pc, #624]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e2:	4a9b      	ldr	r2, [pc, #620]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00a      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054f6:	4b96      	ldr	r3, [pc, #600]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fc:	f023 0203 	bic.w	r2, r3, #3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005504:	4992      	ldr	r1, [pc, #584]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00a      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005518:	4b8d      	ldr	r3, [pc, #564]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800551a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800551e:	f023 020c 	bic.w	r2, r3, #12
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005526:	498a      	ldr	r1, [pc, #552]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005528:	4313      	orrs	r3, r2
 800552a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0304 	and.w	r3, r3, #4
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00a      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800553a:	4b85      	ldr	r3, [pc, #532]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800553c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005540:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005548:	4981      	ldr	r1, [pc, #516]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0308 	and.w	r3, r3, #8
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00a      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800555c:	4b7c      	ldr	r3, [pc, #496]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800555e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005562:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556a:	4979      	ldr	r1, [pc, #484]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800556c:	4313      	orrs	r3, r2
 800556e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0310 	and.w	r3, r3, #16
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800557e:	4b74      	ldr	r3, [pc, #464]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005584:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800558c:	4970      	ldr	r1, [pc, #448]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800558e:	4313      	orrs	r3, r2
 8005590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0320 	and.w	r3, r3, #32
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00a      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055a0:	4b6b      	ldr	r3, [pc, #428]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055ae:	4968      	ldr	r1, [pc, #416]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00a      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055c2:	4b63      	ldr	r3, [pc, #396]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055d0:	495f      	ldr	r1, [pc, #380]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055e4:	4b5a      	ldr	r3, [pc, #360]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055f2:	4957      	ldr	r1, [pc, #348]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005606:	4b52      	ldr	r3, [pc, #328]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800560c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005614:	494e      	ldr	r1, [pc, #312]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005616:	4313      	orrs	r3, r2
 8005618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d031      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800562c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005630:	d00e      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005632:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005636:	d814      	bhi.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005638:	2b00      	cmp	r3, #0
 800563a:	d015      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800563c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005640:	d10f      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005642:	4b43      	ldr	r3, [pc, #268]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	4a42      	ldr	r2, [pc, #264]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005648:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800564c:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800564e:	e00c      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3304      	adds	r3, #4
 8005654:	2100      	movs	r1, #0
 8005656:	4618      	mov	r0, r3
 8005658:	f000 f97c 	bl	8005954 <RCCEx_PLLSAI1_Config>
 800565c:	4603      	mov	r3, r0
 800565e:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005660:	e003      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	77fb      	strb	r3, [r7, #31]
        break;
 8005666:	e000      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8005668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800566a:	7ffb      	ldrb	r3, [r7, #31]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10b      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005670:	4b37      	ldr	r3, [pc, #220]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005676:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800567e:	4934      	ldr	r1, [pc, #208]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005686:	e001      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005688:	7ffb      	ldrb	r3, [r7, #31]
 800568a:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005698:	4b2d      	ldr	r3, [pc, #180]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800569a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800569e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056a6:	492a      	ldr	r1, [pc, #168]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056ba:	4b25      	ldr	r3, [pc, #148]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80056bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056c8:	4921      	ldr	r1, [pc, #132]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056dc:	4b1c      	ldr	r3, [pc, #112]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ea:	4919      	ldr	r1, [pc, #100]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056fe:	4b14      	ldr	r3, [pc, #80]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005700:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005704:	f023 0203 	bic.w	r2, r3, #3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800570c:	4910      	ldr	r1, [pc, #64]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d02b      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005720:	4b0b      	ldr	r3, [pc, #44]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005726:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800572e:	4908      	ldr	r1, [pc, #32]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005730:	4313      	orrs	r3, r2
 8005732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800573a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800573e:	d109      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005740:	4b03      	ldr	r3, [pc, #12]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	4a02      	ldr	r2, [pc, #8]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800574a:	60d3      	str	r3, [r2, #12]
 800574c:	e014      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800574e:	bf00      	nop
 8005750:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005758:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800575c:	d10c      	bne.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3304      	adds	r3, #4
 8005762:	2101      	movs	r1, #1
 8005764:	4618      	mov	r0, r3
 8005766:	f000 f8f5 	bl	8005954 <RCCEx_PLLSAI1_Config>
 800576a:	4603      	mov	r3, r0
 800576c:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 800576e:	7ffb      	ldrb	r3, [r7, #31]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8005774:	7ffb      	ldrb	r3, [r7, #31]
 8005776:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d04a      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005788:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800578c:	d108      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x554>
 800578e:	4b70      	ldr	r3, [pc, #448]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005790:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005794:	4a6e      	ldr	r2, [pc, #440]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005796:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800579a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800579e:	e012      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80057a0:	4b6b      	ldr	r3, [pc, #428]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057ae:	4968      	ldr	r1, [pc, #416]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80057b6:	4b66      	ldr	r3, [pc, #408]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057bc:	4a64      	ldr	r2, [pc, #400]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057c2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057ce:	d10d      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3304      	adds	r3, #4
 80057d4:	2101      	movs	r1, #1
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 f8bc 	bl	8005954 <RCCEx_PLLSAI1_Config>
 80057dc:	4603      	mov	r3, r0
 80057de:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80057e0:	7ffb      	ldrb	r3, [r7, #31]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d019      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80057e6:	7ffb      	ldrb	r3, [r7, #31]
 80057e8:	77bb      	strb	r3, [r7, #30]
 80057ea:	e016      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057f4:	d106      	bne.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057f6:	4b56      	ldr	r3, [pc, #344]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	4a55      	ldr	r2, [pc, #340]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005800:	60d3      	str	r3, [r2, #12]
 8005802:	e00a      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005808:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800580c:	d105      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800580e:	4b50      	ldr	r3, [pc, #320]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	4a4f      	ldr	r2, [pc, #316]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005818:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d028      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005826:	4b4a      	ldr	r3, [pc, #296]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800582c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005834:	4946      	ldr	r1, [pc, #280]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005836:	4313      	orrs	r3, r2
 8005838:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005840:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005844:	d106      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005846:	4b42      	ldr	r3, [pc, #264]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	4a41      	ldr	r2, [pc, #260]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800584c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005850:	60d3      	str	r3, [r2, #12]
 8005852:	e011      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005858:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800585c:	d10c      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	3304      	adds	r3, #4
 8005862:	2101      	movs	r1, #1
 8005864:	4618      	mov	r0, r3
 8005866:	f000 f875 	bl	8005954 <RCCEx_PLLSAI1_Config>
 800586a:	4603      	mov	r3, r0
 800586c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800586e:	7ffb      	ldrb	r3, [r7, #31]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8005874:	7ffb      	ldrb	r3, [r7, #31]
 8005876:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01e      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005884:	4b32      	ldr	r3, [pc, #200]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005894:	492e      	ldr	r1, [pc, #184]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005896:	4313      	orrs	r3, r2
 8005898:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058a6:	d10c      	bne.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3304      	adds	r3, #4
 80058ac:	2102      	movs	r1, #2
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 f850 	bl	8005954 <RCCEx_PLLSAI1_Config>
 80058b4:	4603      	mov	r3, r0
 80058b6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80058b8:	7ffb      	ldrb	r3, [r7, #31]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80058be:	7ffb      	ldrb	r3, [r7, #31]
 80058c0:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00b      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058ce:	4b20      	ldr	r3, [pc, #128]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80058d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058d4:	f023 0204 	bic.w	r2, r3, #4
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058de:	491c      	ldr	r1, [pc, #112]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00b      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80058f2:	4b17      	ldr	r3, [pc, #92]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80058f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058f8:	f023 0218 	bic.w	r2, r3, #24
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005902:	4913      	ldr	r1, [pc, #76]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005904:	4313      	orrs	r3, r2
 8005906:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d017      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005916:	4b0e      	ldr	r3, [pc, #56]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005918:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800591c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005926:	490a      	ldr	r1, [pc, #40]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005928:	4313      	orrs	r3, r2
 800592a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005934:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005938:	d105      	bne.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800593a:	4b05      	ldr	r3, [pc, #20]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	4a04      	ldr	r2, [pc, #16]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005940:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005944:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005946:	7fbb      	ldrb	r3, [r7, #30]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3720      	adds	r7, #32
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40021000 	.word	0x40021000

08005954 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800595e:	2300      	movs	r3, #0
 8005960:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b03      	cmp	r3, #3
 8005968:	d018      	beq.n	800599c <RCCEx_PLLSAI1_Config+0x48>
 800596a:	2b03      	cmp	r3, #3
 800596c:	d81f      	bhi.n	80059ae <RCCEx_PLLSAI1_Config+0x5a>
 800596e:	2b01      	cmp	r3, #1
 8005970:	d002      	beq.n	8005978 <RCCEx_PLLSAI1_Config+0x24>
 8005972:	2b02      	cmp	r3, #2
 8005974:	d009      	beq.n	800598a <RCCEx_PLLSAI1_Config+0x36>
 8005976:	e01a      	b.n	80059ae <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005978:	4b65      	ldr	r3, [pc, #404]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1bc>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d117      	bne.n	80059b4 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005988:	e014      	b.n	80059b4 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800598a:	4b61      	ldr	r3, [pc, #388]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1bc>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005992:	2b00      	cmp	r3, #0
 8005994:	d110      	bne.n	80059b8 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800599a:	e00d      	b.n	80059b8 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800599c:	4b5c      	ldr	r3, [pc, #368]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1bc>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d109      	bne.n	80059bc <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059ac:	e006      	b.n	80059bc <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	73fb      	strb	r3, [r7, #15]
      break;
 80059b2:	e004      	b.n	80059be <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80059b4:	bf00      	nop
 80059b6:	e002      	b.n	80059be <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80059b8:	bf00      	nop
 80059ba:	e000      	b.n	80059be <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80059bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f040 809f 	bne.w	8005b04 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80059c6:	4b52      	ldr	r3, [pc, #328]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1bc>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a51      	ldr	r2, [pc, #324]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1bc>)
 80059cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80059d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059d2:	f7fd f9e1 	bl	8002d98 <HAL_GetTick>
 80059d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059d8:	e00f      	b.n	80059fa <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059da:	f7fd f9dd 	bl	8002d98 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d908      	bls.n	80059fa <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059e8:	4b49      	ldr	r3, [pc, #292]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1bc>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d009      	beq.n	8005a08 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80059f8:	e006      	b.n	8005a08 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059fa:	4b45      	ldr	r3, [pc, #276]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1bc>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1e9      	bne.n	80059da <RCCEx_PLLSAI1_Config+0x86>
 8005a06:	e000      	b.n	8005a0a <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8005a08:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d179      	bne.n	8005b04 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d116      	bne.n	8005a44 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a16:	4b3e      	ldr	r3, [pc, #248]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005a18:	691a      	ldr	r2, [r3, #16]
 8005a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8005b14 <RCCEx_PLLSAI1_Config+0x1c0>)
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6892      	ldr	r2, [r2, #8]
 8005a22:	0211      	lsls	r1, r2, #8
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	68d2      	ldr	r2, [r2, #12]
 8005a28:	06d2      	lsls	r2, r2, #27
 8005a2a:	4311      	orrs	r1, r2
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	6852      	ldr	r2, [r2, #4]
 8005a30:	3a01      	subs	r2, #1
 8005a32:	0112      	lsls	r2, r2, #4
 8005a34:	4311      	orrs	r1, r2
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	6812      	ldr	r2, [r2, #0]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	4934      	ldr	r1, [pc, #208]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	610b      	str	r3, [r1, #16]
 8005a42:	e033      	b.n	8005aac <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d118      	bne.n	8005a7c <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a4a:	4b31      	ldr	r3, [pc, #196]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005a4c:	691a      	ldr	r2, [r3, #16]
 8005a4e:	4b32      	ldr	r3, [pc, #200]	@ (8005b18 <RCCEx_PLLSAI1_Config+0x1c4>)
 8005a50:	4013      	ands	r3, r2
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	6892      	ldr	r2, [r2, #8]
 8005a56:	0211      	lsls	r1, r2, #8
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6912      	ldr	r2, [r2, #16]
 8005a5c:	0852      	lsrs	r2, r2, #1
 8005a5e:	3a01      	subs	r2, #1
 8005a60:	0552      	lsls	r2, r2, #21
 8005a62:	4311      	orrs	r1, r2
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6852      	ldr	r2, [r2, #4]
 8005a68:	3a01      	subs	r2, #1
 8005a6a:	0112      	lsls	r2, r2, #4
 8005a6c:	4311      	orrs	r1, r2
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	6812      	ldr	r2, [r2, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	4926      	ldr	r1, [pc, #152]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	610b      	str	r3, [r1, #16]
 8005a7a:	e017      	b.n	8005aac <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a7c:	4b24      	ldr	r3, [pc, #144]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005a7e:	691a      	ldr	r2, [r3, #16]
 8005a80:	4b26      	ldr	r3, [pc, #152]	@ (8005b1c <RCCEx_PLLSAI1_Config+0x1c8>)
 8005a82:	4013      	ands	r3, r2
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6892      	ldr	r2, [r2, #8]
 8005a88:	0211      	lsls	r1, r2, #8
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6952      	ldr	r2, [r2, #20]
 8005a8e:	0852      	lsrs	r2, r2, #1
 8005a90:	3a01      	subs	r2, #1
 8005a92:	0652      	lsls	r2, r2, #25
 8005a94:	4311      	orrs	r1, r2
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	6852      	ldr	r2, [r2, #4]
 8005a9a:	3a01      	subs	r2, #1
 8005a9c:	0112      	lsls	r2, r2, #4
 8005a9e:	4311      	orrs	r1, r2
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6812      	ldr	r2, [r2, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	491a      	ldr	r1, [pc, #104]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005aac:	4b18      	ldr	r3, [pc, #96]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a17      	ldr	r2, [pc, #92]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005ab2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ab6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab8:	f7fd f96e 	bl	8002d98 <HAL_GetTick>
 8005abc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005abe:	e00f      	b.n	8005ae0 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ac0:	f7fd f96a 	bl	8002d98 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d908      	bls.n	8005ae0 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ace:	4b10      	ldr	r3, [pc, #64]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d109      	bne.n	8005aee <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005ade:	e006      	b.n	8005aee <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d0e9      	beq.n	8005ac0 <RCCEx_PLLSAI1_Config+0x16c>
 8005aec:	e000      	b.n	8005af0 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8005aee:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d106      	bne.n	8005b04 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8005af6:	4b06      	ldr	r3, [pc, #24]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005af8:	691a      	ldr	r2, [r3, #16]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	4904      	ldr	r1, [pc, #16]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	40021000 	.word	0x40021000
 8005b14:	07ff800c 	.word	0x07ff800c
 8005b18:	ff9f800c 	.word	0xff9f800c
 8005b1c:	f9ff800c 	.word	0xf9ff800c

08005b20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	d018      	beq.n	8005b68 <RCCEx_PLLSAI2_Config+0x48>
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d81f      	bhi.n	8005b7a <RCCEx_PLLSAI2_Config+0x5a>
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d002      	beq.n	8005b44 <RCCEx_PLLSAI2_Config+0x24>
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d009      	beq.n	8005b56 <RCCEx_PLLSAI2_Config+0x36>
 8005b42:	e01a      	b.n	8005b7a <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b44:	4b4a      	ldr	r3, [pc, #296]	@ (8005c70 <RCCEx_PLLSAI2_Config+0x150>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d117      	bne.n	8005b80 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b54:	e014      	b.n	8005b80 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b56:	4b46      	ldr	r3, [pc, #280]	@ (8005c70 <RCCEx_PLLSAI2_Config+0x150>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d110      	bne.n	8005b84 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b66:	e00d      	b.n	8005b84 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005b68:	4b41      	ldr	r3, [pc, #260]	@ (8005c70 <RCCEx_PLLSAI2_Config+0x150>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d109      	bne.n	8005b88 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b78:	e006      	b.n	8005b88 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b7e:	e004      	b.n	8005b8a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005b80:	bf00      	nop
 8005b82:	e002      	b.n	8005b8a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005b84:	bf00      	nop
 8005b86:	e000      	b.n	8005b8a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005b88:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d169      	bne.n	8005c64 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b90:	4b37      	ldr	r3, [pc, #220]	@ (8005c70 <RCCEx_PLLSAI2_Config+0x150>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a36      	ldr	r2, [pc, #216]	@ (8005c70 <RCCEx_PLLSAI2_Config+0x150>)
 8005b96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b9c:	f7fd f8fc 	bl	8002d98 <HAL_GetTick>
 8005ba0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ba2:	e00f      	b.n	8005bc4 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ba4:	f7fd f8f8 	bl	8002d98 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d908      	bls.n	8005bc4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8005c70 <RCCEx_PLLSAI2_Config+0x150>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d009      	beq.n	8005bd2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005bc2:	e006      	b.n	8005bd2 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8005c70 <RCCEx_PLLSAI2_Config+0x150>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1e9      	bne.n	8005ba4 <RCCEx_PLLSAI2_Config+0x84>
 8005bd0:	e000      	b.n	8005bd4 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8005bd2:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d144      	bne.n	8005c64 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d115      	bne.n	8005c0c <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005be0:	4b23      	ldr	r3, [pc, #140]	@ (8005c70 <RCCEx_PLLSAI2_Config+0x150>)
 8005be2:	695a      	ldr	r2, [r3, #20]
 8005be4:	4b23      	ldr	r3, [pc, #140]	@ (8005c74 <RCCEx_PLLSAI2_Config+0x154>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	6892      	ldr	r2, [r2, #8]
 8005bec:	0211      	lsls	r1, r2, #8
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	68d2      	ldr	r2, [r2, #12]
 8005bf2:	06d2      	lsls	r2, r2, #27
 8005bf4:	4311      	orrs	r1, r2
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6852      	ldr	r2, [r2, #4]
 8005bfa:	3a01      	subs	r2, #1
 8005bfc:	0112      	lsls	r2, r2, #4
 8005bfe:	4311      	orrs	r1, r2
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6812      	ldr	r2, [r2, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	491a      	ldr	r1, [pc, #104]	@ (8005c70 <RCCEx_PLLSAI2_Config+0x150>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005c0c:	4b18      	ldr	r3, [pc, #96]	@ (8005c70 <RCCEx_PLLSAI2_Config+0x150>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a17      	ldr	r2, [pc, #92]	@ (8005c70 <RCCEx_PLLSAI2_Config+0x150>)
 8005c12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c18:	f7fd f8be 	bl	8002d98 <HAL_GetTick>
 8005c1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c1e:	e00f      	b.n	8005c40 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c20:	f7fd f8ba 	bl	8002d98 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d908      	bls.n	8005c40 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c2e:	4b10      	ldr	r3, [pc, #64]	@ (8005c70 <RCCEx_PLLSAI2_Config+0x150>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d109      	bne.n	8005c4e <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005c3e:	e006      	b.n	8005c4e <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c40:	4b0b      	ldr	r3, [pc, #44]	@ (8005c70 <RCCEx_PLLSAI2_Config+0x150>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0e9      	beq.n	8005c20 <RCCEx_PLLSAI2_Config+0x100>
 8005c4c:	e000      	b.n	8005c50 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8005c4e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d106      	bne.n	8005c64 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8005c56:	4b06      	ldr	r3, [pc, #24]	@ (8005c70 <RCCEx_PLLSAI2_Config+0x150>)
 8005c58:	695a      	ldr	r2, [r3, #20]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	4904      	ldr	r1, [pc, #16]	@ (8005c70 <RCCEx_PLLSAI2_Config+0x150>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	40021000 	.word	0x40021000
 8005c74:	07ff800c 	.word	0x07ff800c

08005c78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e042      	b.n	8005d10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d106      	bne.n	8005ca2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 f83b 	bl	8005d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2224      	movs	r2, #36	@ 0x24
 8005ca6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0201 	bic.w	r2, r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fb32 	bl	800632c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f82f 	bl	8005d2c <UART_SetConfig>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d101      	bne.n	8005cd8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e01b      	b.n	8005d10 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ce6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689a      	ldr	r2, [r3, #8]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005cf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 0201 	orr.w	r2, r2, #1
 8005d06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 fbb1 	bl	8006470 <UART_CheckIdleState>
 8005d0e:	4603      	mov	r3, r0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d30:	b08c      	sub	sp, #48	@ 0x30
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	431a      	orrs	r2, r3
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	4baa      	ldr	r3, [pc, #680]	@ (8006004 <UART_SetConfig+0x2d8>)
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	6812      	ldr	r2, [r2, #0]
 8005d62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d64:	430b      	orrs	r3, r1
 8005d66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a9f      	ldr	r2, [pc, #636]	@ (8006008 <UART_SetConfig+0x2dc>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d004      	beq.n	8005d98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d94:	4313      	orrs	r3, r2
 8005d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005da2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	6812      	ldr	r2, [r2, #0]
 8005daa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005dac:	430b      	orrs	r3, r1
 8005dae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db6:	f023 010f 	bic.w	r1, r3, #15
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a90      	ldr	r2, [pc, #576]	@ (800600c <UART_SetConfig+0x2e0>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d125      	bne.n	8005e1c <UART_SetConfig+0xf0>
 8005dd0:	4b8f      	ldr	r3, [pc, #572]	@ (8006010 <UART_SetConfig+0x2e4>)
 8005dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	d81a      	bhi.n	8005e14 <UART_SetConfig+0xe8>
 8005dde:	a201      	add	r2, pc, #4	@ (adr r2, 8005de4 <UART_SetConfig+0xb8>)
 8005de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de4:	08005df5 	.word	0x08005df5
 8005de8:	08005e05 	.word	0x08005e05
 8005dec:	08005dfd 	.word	0x08005dfd
 8005df0:	08005e0d 	.word	0x08005e0d
 8005df4:	2301      	movs	r3, #1
 8005df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dfa:	e116      	b.n	800602a <UART_SetConfig+0x2fe>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e02:	e112      	b.n	800602a <UART_SetConfig+0x2fe>
 8005e04:	2304      	movs	r3, #4
 8005e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e0a:	e10e      	b.n	800602a <UART_SetConfig+0x2fe>
 8005e0c:	2308      	movs	r3, #8
 8005e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e12:	e10a      	b.n	800602a <UART_SetConfig+0x2fe>
 8005e14:	2310      	movs	r3, #16
 8005e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e1a:	e106      	b.n	800602a <UART_SetConfig+0x2fe>
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a7c      	ldr	r2, [pc, #496]	@ (8006014 <UART_SetConfig+0x2e8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d138      	bne.n	8005e98 <UART_SetConfig+0x16c>
 8005e26:	4b7a      	ldr	r3, [pc, #488]	@ (8006010 <UART_SetConfig+0x2e4>)
 8005e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e2c:	f003 030c 	and.w	r3, r3, #12
 8005e30:	2b0c      	cmp	r3, #12
 8005e32:	d82d      	bhi.n	8005e90 <UART_SetConfig+0x164>
 8005e34:	a201      	add	r2, pc, #4	@ (adr r2, 8005e3c <UART_SetConfig+0x110>)
 8005e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3a:	bf00      	nop
 8005e3c:	08005e71 	.word	0x08005e71
 8005e40:	08005e91 	.word	0x08005e91
 8005e44:	08005e91 	.word	0x08005e91
 8005e48:	08005e91 	.word	0x08005e91
 8005e4c:	08005e81 	.word	0x08005e81
 8005e50:	08005e91 	.word	0x08005e91
 8005e54:	08005e91 	.word	0x08005e91
 8005e58:	08005e91 	.word	0x08005e91
 8005e5c:	08005e79 	.word	0x08005e79
 8005e60:	08005e91 	.word	0x08005e91
 8005e64:	08005e91 	.word	0x08005e91
 8005e68:	08005e91 	.word	0x08005e91
 8005e6c:	08005e89 	.word	0x08005e89
 8005e70:	2300      	movs	r3, #0
 8005e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e76:	e0d8      	b.n	800602a <UART_SetConfig+0x2fe>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e7e:	e0d4      	b.n	800602a <UART_SetConfig+0x2fe>
 8005e80:	2304      	movs	r3, #4
 8005e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e86:	e0d0      	b.n	800602a <UART_SetConfig+0x2fe>
 8005e88:	2308      	movs	r3, #8
 8005e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e8e:	e0cc      	b.n	800602a <UART_SetConfig+0x2fe>
 8005e90:	2310      	movs	r3, #16
 8005e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e96:	e0c8      	b.n	800602a <UART_SetConfig+0x2fe>
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a5e      	ldr	r2, [pc, #376]	@ (8006018 <UART_SetConfig+0x2ec>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d125      	bne.n	8005eee <UART_SetConfig+0x1c2>
 8005ea2:	4b5b      	ldr	r3, [pc, #364]	@ (8006010 <UART_SetConfig+0x2e4>)
 8005ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005eac:	2b30      	cmp	r3, #48	@ 0x30
 8005eae:	d016      	beq.n	8005ede <UART_SetConfig+0x1b2>
 8005eb0:	2b30      	cmp	r3, #48	@ 0x30
 8005eb2:	d818      	bhi.n	8005ee6 <UART_SetConfig+0x1ba>
 8005eb4:	2b20      	cmp	r3, #32
 8005eb6:	d00a      	beq.n	8005ece <UART_SetConfig+0x1a2>
 8005eb8:	2b20      	cmp	r3, #32
 8005eba:	d814      	bhi.n	8005ee6 <UART_SetConfig+0x1ba>
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <UART_SetConfig+0x19a>
 8005ec0:	2b10      	cmp	r3, #16
 8005ec2:	d008      	beq.n	8005ed6 <UART_SetConfig+0x1aa>
 8005ec4:	e00f      	b.n	8005ee6 <UART_SetConfig+0x1ba>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ecc:	e0ad      	b.n	800602a <UART_SetConfig+0x2fe>
 8005ece:	2302      	movs	r3, #2
 8005ed0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ed4:	e0a9      	b.n	800602a <UART_SetConfig+0x2fe>
 8005ed6:	2304      	movs	r3, #4
 8005ed8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005edc:	e0a5      	b.n	800602a <UART_SetConfig+0x2fe>
 8005ede:	2308      	movs	r3, #8
 8005ee0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ee4:	e0a1      	b.n	800602a <UART_SetConfig+0x2fe>
 8005ee6:	2310      	movs	r3, #16
 8005ee8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eec:	e09d      	b.n	800602a <UART_SetConfig+0x2fe>
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a4a      	ldr	r2, [pc, #296]	@ (800601c <UART_SetConfig+0x2f0>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d125      	bne.n	8005f44 <UART_SetConfig+0x218>
 8005ef8:	4b45      	ldr	r3, [pc, #276]	@ (8006010 <UART_SetConfig+0x2e4>)
 8005efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005efe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005f02:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f04:	d016      	beq.n	8005f34 <UART_SetConfig+0x208>
 8005f06:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f08:	d818      	bhi.n	8005f3c <UART_SetConfig+0x210>
 8005f0a:	2b80      	cmp	r3, #128	@ 0x80
 8005f0c:	d00a      	beq.n	8005f24 <UART_SetConfig+0x1f8>
 8005f0e:	2b80      	cmp	r3, #128	@ 0x80
 8005f10:	d814      	bhi.n	8005f3c <UART_SetConfig+0x210>
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d002      	beq.n	8005f1c <UART_SetConfig+0x1f0>
 8005f16:	2b40      	cmp	r3, #64	@ 0x40
 8005f18:	d008      	beq.n	8005f2c <UART_SetConfig+0x200>
 8005f1a:	e00f      	b.n	8005f3c <UART_SetConfig+0x210>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f22:	e082      	b.n	800602a <UART_SetConfig+0x2fe>
 8005f24:	2302      	movs	r3, #2
 8005f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f2a:	e07e      	b.n	800602a <UART_SetConfig+0x2fe>
 8005f2c:	2304      	movs	r3, #4
 8005f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f32:	e07a      	b.n	800602a <UART_SetConfig+0x2fe>
 8005f34:	2308      	movs	r3, #8
 8005f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f3a:	e076      	b.n	800602a <UART_SetConfig+0x2fe>
 8005f3c:	2310      	movs	r3, #16
 8005f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f42:	e072      	b.n	800602a <UART_SetConfig+0x2fe>
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a35      	ldr	r2, [pc, #212]	@ (8006020 <UART_SetConfig+0x2f4>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d12a      	bne.n	8005fa4 <UART_SetConfig+0x278>
 8005f4e:	4b30      	ldr	r3, [pc, #192]	@ (8006010 <UART_SetConfig+0x2e4>)
 8005f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f5c:	d01a      	beq.n	8005f94 <UART_SetConfig+0x268>
 8005f5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f62:	d81b      	bhi.n	8005f9c <UART_SetConfig+0x270>
 8005f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f68:	d00c      	beq.n	8005f84 <UART_SetConfig+0x258>
 8005f6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f6e:	d815      	bhi.n	8005f9c <UART_SetConfig+0x270>
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <UART_SetConfig+0x250>
 8005f74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f78:	d008      	beq.n	8005f8c <UART_SetConfig+0x260>
 8005f7a:	e00f      	b.n	8005f9c <UART_SetConfig+0x270>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f82:	e052      	b.n	800602a <UART_SetConfig+0x2fe>
 8005f84:	2302      	movs	r3, #2
 8005f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f8a:	e04e      	b.n	800602a <UART_SetConfig+0x2fe>
 8005f8c:	2304      	movs	r3, #4
 8005f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f92:	e04a      	b.n	800602a <UART_SetConfig+0x2fe>
 8005f94:	2308      	movs	r3, #8
 8005f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f9a:	e046      	b.n	800602a <UART_SetConfig+0x2fe>
 8005f9c:	2310      	movs	r3, #16
 8005f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fa2:	e042      	b.n	800602a <UART_SetConfig+0x2fe>
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a17      	ldr	r2, [pc, #92]	@ (8006008 <UART_SetConfig+0x2dc>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d13a      	bne.n	8006024 <UART_SetConfig+0x2f8>
 8005fae:	4b18      	ldr	r3, [pc, #96]	@ (8006010 <UART_SetConfig+0x2e4>)
 8005fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005fb8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fbc:	d01a      	beq.n	8005ff4 <UART_SetConfig+0x2c8>
 8005fbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fc2:	d81b      	bhi.n	8005ffc <UART_SetConfig+0x2d0>
 8005fc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fc8:	d00c      	beq.n	8005fe4 <UART_SetConfig+0x2b8>
 8005fca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fce:	d815      	bhi.n	8005ffc <UART_SetConfig+0x2d0>
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <UART_SetConfig+0x2b0>
 8005fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fd8:	d008      	beq.n	8005fec <UART_SetConfig+0x2c0>
 8005fda:	e00f      	b.n	8005ffc <UART_SetConfig+0x2d0>
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fe2:	e022      	b.n	800602a <UART_SetConfig+0x2fe>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fea:	e01e      	b.n	800602a <UART_SetConfig+0x2fe>
 8005fec:	2304      	movs	r3, #4
 8005fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ff2:	e01a      	b.n	800602a <UART_SetConfig+0x2fe>
 8005ff4:	2308      	movs	r3, #8
 8005ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ffa:	e016      	b.n	800602a <UART_SetConfig+0x2fe>
 8005ffc:	2310      	movs	r3, #16
 8005ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006002:	e012      	b.n	800602a <UART_SetConfig+0x2fe>
 8006004:	cfff69f3 	.word	0xcfff69f3
 8006008:	40008000 	.word	0x40008000
 800600c:	40013800 	.word	0x40013800
 8006010:	40021000 	.word	0x40021000
 8006014:	40004400 	.word	0x40004400
 8006018:	40004800 	.word	0x40004800
 800601c:	40004c00 	.word	0x40004c00
 8006020:	40005000 	.word	0x40005000
 8006024:	2310      	movs	r3, #16
 8006026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4ab0      	ldr	r2, [pc, #704]	@ (80062f0 <UART_SetConfig+0x5c4>)
 8006030:	4293      	cmp	r3, r2
 8006032:	f040 809b 	bne.w	800616c <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006036:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800603a:	2b08      	cmp	r3, #8
 800603c:	d827      	bhi.n	800608e <UART_SetConfig+0x362>
 800603e:	a201      	add	r2, pc, #4	@ (adr r2, 8006044 <UART_SetConfig+0x318>)
 8006040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006044:	08006069 	.word	0x08006069
 8006048:	08006071 	.word	0x08006071
 800604c:	08006079 	.word	0x08006079
 8006050:	0800608f 	.word	0x0800608f
 8006054:	0800607f 	.word	0x0800607f
 8006058:	0800608f 	.word	0x0800608f
 800605c:	0800608f 	.word	0x0800608f
 8006060:	0800608f 	.word	0x0800608f
 8006064:	08006087 	.word	0x08006087
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006068:	f7fe fff6 	bl	8005058 <HAL_RCC_GetPCLK1Freq>
 800606c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800606e:	e014      	b.n	800609a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006070:	f7ff f806 	bl	8005080 <HAL_RCC_GetPCLK2Freq>
 8006074:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006076:	e010      	b.n	800609a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006078:	4b9e      	ldr	r3, [pc, #632]	@ (80062f4 <UART_SetConfig+0x5c8>)
 800607a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800607c:	e00d      	b.n	800609a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800607e:	f7fe ff39 	bl	8004ef4 <HAL_RCC_GetSysClockFreq>
 8006082:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006084:	e009      	b.n	800609a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006086:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800608a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800608c:	e005      	b.n	800609a <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 800608e:	2300      	movs	r3, #0
 8006090:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006098:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800609a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 8130 	beq.w	8006302 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a6:	4a94      	ldr	r2, [pc, #592]	@ (80062f8 <UART_SetConfig+0x5cc>)
 80060a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060ac:	461a      	mov	r2, r3
 80060ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80060b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	4613      	mov	r3, r2
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	4413      	add	r3, r2
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d305      	bcc.n	80060d2 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d903      	bls.n	80060da <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80060d8:	e113      	b.n	8006302 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060dc:	2200      	movs	r2, #0
 80060de:	60bb      	str	r3, [r7, #8]
 80060e0:	60fa      	str	r2, [r7, #12]
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e6:	4a84      	ldr	r2, [pc, #528]	@ (80062f8 <UART_SetConfig+0x5cc>)
 80060e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	2200      	movs	r2, #0
 80060f0:	603b      	str	r3, [r7, #0]
 80060f2:	607a      	str	r2, [r7, #4]
 80060f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80060fc:	f7fa f89c 	bl	8000238 <__aeabi_uldivmod>
 8006100:	4602      	mov	r2, r0
 8006102:	460b      	mov	r3, r1
 8006104:	4610      	mov	r0, r2
 8006106:	4619      	mov	r1, r3
 8006108:	f04f 0200 	mov.w	r2, #0
 800610c:	f04f 0300 	mov.w	r3, #0
 8006110:	020b      	lsls	r3, r1, #8
 8006112:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006116:	0202      	lsls	r2, r0, #8
 8006118:	6979      	ldr	r1, [r7, #20]
 800611a:	6849      	ldr	r1, [r1, #4]
 800611c:	0849      	lsrs	r1, r1, #1
 800611e:	2000      	movs	r0, #0
 8006120:	460c      	mov	r4, r1
 8006122:	4605      	mov	r5, r0
 8006124:	eb12 0804 	adds.w	r8, r2, r4
 8006128:	eb43 0905 	adc.w	r9, r3, r5
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	469a      	mov	sl, r3
 8006134:	4693      	mov	fp, r2
 8006136:	4652      	mov	r2, sl
 8006138:	465b      	mov	r3, fp
 800613a:	4640      	mov	r0, r8
 800613c:	4649      	mov	r1, r9
 800613e:	f7fa f87b 	bl	8000238 <__aeabi_uldivmod>
 8006142:	4602      	mov	r2, r0
 8006144:	460b      	mov	r3, r1
 8006146:	4613      	mov	r3, r2
 8006148:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006150:	d308      	bcc.n	8006164 <UART_SetConfig+0x438>
 8006152:	6a3b      	ldr	r3, [r7, #32]
 8006154:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006158:	d204      	bcs.n	8006164 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6a3a      	ldr	r2, [r7, #32]
 8006160:	60da      	str	r2, [r3, #12]
 8006162:	e0ce      	b.n	8006302 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800616a:	e0ca      	b.n	8006302 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006174:	d166      	bne.n	8006244 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8006176:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800617a:	2b08      	cmp	r3, #8
 800617c:	d827      	bhi.n	80061ce <UART_SetConfig+0x4a2>
 800617e:	a201      	add	r2, pc, #4	@ (adr r2, 8006184 <UART_SetConfig+0x458>)
 8006180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006184:	080061a9 	.word	0x080061a9
 8006188:	080061b1 	.word	0x080061b1
 800618c:	080061b9 	.word	0x080061b9
 8006190:	080061cf 	.word	0x080061cf
 8006194:	080061bf 	.word	0x080061bf
 8006198:	080061cf 	.word	0x080061cf
 800619c:	080061cf 	.word	0x080061cf
 80061a0:	080061cf 	.word	0x080061cf
 80061a4:	080061c7 	.word	0x080061c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061a8:	f7fe ff56 	bl	8005058 <HAL_RCC_GetPCLK1Freq>
 80061ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061ae:	e014      	b.n	80061da <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061b0:	f7fe ff66 	bl	8005080 <HAL_RCC_GetPCLK2Freq>
 80061b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061b6:	e010      	b.n	80061da <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061b8:	4b4e      	ldr	r3, [pc, #312]	@ (80062f4 <UART_SetConfig+0x5c8>)
 80061ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80061bc:	e00d      	b.n	80061da <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061be:	f7fe fe99 	bl	8004ef4 <HAL_RCC_GetSysClockFreq>
 80061c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061c4:	e009      	b.n	80061da <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80061cc:	e005      	b.n	80061da <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 80061ce:	2300      	movs	r3, #0
 80061d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80061d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 8090 	beq.w	8006302 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e6:	4a44      	ldr	r2, [pc, #272]	@ (80062f8 <UART_SetConfig+0x5cc>)
 80061e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061ec:	461a      	mov	r2, r3
 80061ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80061f4:	005a      	lsls	r2, r3, #1
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	085b      	lsrs	r3, r3, #1
 80061fc:	441a      	add	r2, r3
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	fbb2 f3f3 	udiv	r3, r2, r3
 8006206:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	2b0f      	cmp	r3, #15
 800620c:	d916      	bls.n	800623c <UART_SetConfig+0x510>
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006214:	d212      	bcs.n	800623c <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	b29b      	uxth	r3, r3
 800621a:	f023 030f 	bic.w	r3, r3, #15
 800621e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	085b      	lsrs	r3, r3, #1
 8006224:	b29b      	uxth	r3, r3
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	b29a      	uxth	r2, r3
 800622c:	8bfb      	ldrh	r3, [r7, #30]
 800622e:	4313      	orrs	r3, r2
 8006230:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	8bfa      	ldrh	r2, [r7, #30]
 8006238:	60da      	str	r2, [r3, #12]
 800623a:	e062      	b.n	8006302 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006242:	e05e      	b.n	8006302 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006244:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006248:	2b08      	cmp	r3, #8
 800624a:	d828      	bhi.n	800629e <UART_SetConfig+0x572>
 800624c:	a201      	add	r2, pc, #4	@ (adr r2, 8006254 <UART_SetConfig+0x528>)
 800624e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006252:	bf00      	nop
 8006254:	08006279 	.word	0x08006279
 8006258:	08006281 	.word	0x08006281
 800625c:	08006289 	.word	0x08006289
 8006260:	0800629f 	.word	0x0800629f
 8006264:	0800628f 	.word	0x0800628f
 8006268:	0800629f 	.word	0x0800629f
 800626c:	0800629f 	.word	0x0800629f
 8006270:	0800629f 	.word	0x0800629f
 8006274:	08006297 	.word	0x08006297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006278:	f7fe feee 	bl	8005058 <HAL_RCC_GetPCLK1Freq>
 800627c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800627e:	e014      	b.n	80062aa <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006280:	f7fe fefe 	bl	8005080 <HAL_RCC_GetPCLK2Freq>
 8006284:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006286:	e010      	b.n	80062aa <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006288:	4b1a      	ldr	r3, [pc, #104]	@ (80062f4 <UART_SetConfig+0x5c8>)
 800628a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800628c:	e00d      	b.n	80062aa <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800628e:	f7fe fe31 	bl	8004ef4 <HAL_RCC_GetSysClockFreq>
 8006292:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006294:	e009      	b.n	80062aa <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800629a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800629c:	e005      	b.n	80062aa <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80062a8:	bf00      	nop
    }

    if (pclk != 0U)
 80062aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d028      	beq.n	8006302 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b4:	4a10      	ldr	r2, [pc, #64]	@ (80062f8 <UART_SetConfig+0x5cc>)
 80062b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062ba:	461a      	mov	r2, r3
 80062bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062be:	fbb3 f2f2 	udiv	r2, r3, r2
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	085b      	lsrs	r3, r3, #1
 80062c8:	441a      	add	r2, r3
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	2b0f      	cmp	r3, #15
 80062d8:	d910      	bls.n	80062fc <UART_SetConfig+0x5d0>
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062e0:	d20c      	bcs.n	80062fc <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60da      	str	r2, [r3, #12]
 80062ec:	e009      	b.n	8006302 <UART_SetConfig+0x5d6>
 80062ee:	bf00      	nop
 80062f0:	40008000 	.word	0x40008000
 80062f4:	00f42400 	.word	0x00f42400
 80062f8:	08006978 	.word	0x08006978
      }
      else
      {
        ret = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2201      	movs	r2, #1
 8006306:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	2201      	movs	r2, #1
 800630e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2200      	movs	r2, #0
 8006316:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	2200      	movs	r2, #0
 800631c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800631e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006322:	4618      	mov	r0, r3
 8006324:	3730      	adds	r7, #48	@ 0x30
 8006326:	46bd      	mov	sp, r7
 8006328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800632c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006338:	f003 0308 	and.w	r3, r3, #8
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00a      	beq.n	8006356 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00a      	beq.n	8006378 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00a      	beq.n	800639a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	430a      	orrs	r2, r1
 8006398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800639e:	f003 0304 	and.w	r3, r3, #4
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	430a      	orrs	r2, r1
 80063ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c0:	f003 0310 	and.w	r3, r3, #16
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00a      	beq.n	80063de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e2:	f003 0320 	and.w	r3, r3, #32
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00a      	beq.n	8006400 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006408:	2b00      	cmp	r3, #0
 800640a:	d01a      	beq.n	8006442 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	430a      	orrs	r2, r1
 8006420:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006426:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800642a:	d10a      	bne.n	8006442 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00a      	beq.n	8006464 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	605a      	str	r2, [r3, #4]
  }
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b098      	sub	sp, #96	@ 0x60
 8006474:	af02      	add	r7, sp, #8
 8006476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006480:	f7fc fc8a 	bl	8002d98 <HAL_GetTick>
 8006484:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0308 	and.w	r3, r3, #8
 8006490:	2b08      	cmp	r3, #8
 8006492:	d12f      	bne.n	80064f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006494:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800649c:	2200      	movs	r2, #0
 800649e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f88e 	bl	80065c4 <UART_WaitOnFlagUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d022      	beq.n	80064f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b6:	e853 3f00 	ldrex	r3, [r3]
 80064ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	461a      	mov	r2, r3
 80064ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80064ce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064d4:	e841 2300 	strex	r3, r2, [r1]
 80064d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e6      	bne.n	80064ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2220      	movs	r2, #32
 80064e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e063      	b.n	80065bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0304 	and.w	r3, r3, #4
 80064fe:	2b04      	cmp	r3, #4
 8006500:	d149      	bne.n	8006596 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006502:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800650a:	2200      	movs	r2, #0
 800650c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f857 	bl	80065c4 <UART_WaitOnFlagUntilTimeout>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d03c      	beq.n	8006596 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006524:	e853 3f00 	ldrex	r3, [r3]
 8006528:	623b      	str	r3, [r7, #32]
   return(result);
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006530:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	461a      	mov	r2, r3
 8006538:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800653a:	633b      	str	r3, [r7, #48]	@ 0x30
 800653c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006540:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006542:	e841 2300 	strex	r3, r2, [r1]
 8006546:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1e6      	bne.n	800651c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3308      	adds	r3, #8
 8006554:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	e853 3f00 	ldrex	r3, [r3]
 800655c:	60fb      	str	r3, [r7, #12]
   return(result);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f023 0301 	bic.w	r3, r3, #1
 8006564:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3308      	adds	r3, #8
 800656c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800656e:	61fa      	str	r2, [r7, #28]
 8006570:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006572:	69b9      	ldr	r1, [r7, #24]
 8006574:	69fa      	ldr	r2, [r7, #28]
 8006576:	e841 2300 	strex	r3, r2, [r1]
 800657a:	617b      	str	r3, [r7, #20]
   return(result);
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1e5      	bne.n	800654e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2220      	movs	r2, #32
 8006586:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e012      	b.n	80065bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2220      	movs	r2, #32
 800659a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2220      	movs	r2, #32
 80065a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3758      	adds	r7, #88	@ 0x58
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	603b      	str	r3, [r7, #0]
 80065d0:	4613      	mov	r3, r2
 80065d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065d4:	e04f      	b.n	8006676 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065dc:	d04b      	beq.n	8006676 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065de:	f7fc fbdb 	bl	8002d98 <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d302      	bcc.n	80065f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e04e      	b.n	8006696 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0304 	and.w	r3, r3, #4
 8006602:	2b00      	cmp	r3, #0
 8006604:	d037      	beq.n	8006676 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2b80      	cmp	r3, #128	@ 0x80
 800660a:	d034      	beq.n	8006676 <UART_WaitOnFlagUntilTimeout+0xb2>
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	2b40      	cmp	r3, #64	@ 0x40
 8006610:	d031      	beq.n	8006676 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	f003 0308 	and.w	r3, r3, #8
 800661c:	2b08      	cmp	r3, #8
 800661e:	d110      	bne.n	8006642 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2208      	movs	r2, #8
 8006626:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 f838 	bl	800669e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2208      	movs	r2, #8
 8006632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e029      	b.n	8006696 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800664c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006650:	d111      	bne.n	8006676 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800665a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 f81e 	bl	800669e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2220      	movs	r2, #32
 8006666:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e00f      	b.n	8006696 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	69da      	ldr	r2, [r3, #28]
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	4013      	ands	r3, r2
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	429a      	cmp	r2, r3
 8006684:	bf0c      	ite	eq
 8006686:	2301      	moveq	r3, #1
 8006688:	2300      	movne	r3, #0
 800668a:	b2db      	uxtb	r3, r3
 800668c:	461a      	mov	r2, r3
 800668e:	79fb      	ldrb	r3, [r7, #7]
 8006690:	429a      	cmp	r2, r3
 8006692:	d0a0      	beq.n	80065d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800669e:	b480      	push	{r7}
 80066a0:	b095      	sub	sp, #84	@ 0x54
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ae:	e853 3f00 	ldrex	r3, [r3]
 80066b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	461a      	mov	r2, r3
 80066c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80066c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066cc:	e841 2300 	strex	r3, r2, [r1]
 80066d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1e6      	bne.n	80066a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3308      	adds	r3, #8
 80066de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	e853 3f00 	ldrex	r3, [r3]
 80066e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066ee:	f023 0301 	bic.w	r3, r3, #1
 80066f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3308      	adds	r3, #8
 80066fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006700:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006702:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006704:	e841 2300 	strex	r3, r2, [r1]
 8006708:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800670a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1e3      	bne.n	80066d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006714:	2b01      	cmp	r3, #1
 8006716:	d118      	bne.n	800674a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	e853 3f00 	ldrex	r3, [r3]
 8006724:	60bb      	str	r3, [r7, #8]
   return(result);
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f023 0310 	bic.w	r3, r3, #16
 800672c:	647b      	str	r3, [r7, #68]	@ 0x44
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006736:	61bb      	str	r3, [r7, #24]
 8006738:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	6979      	ldr	r1, [r7, #20]
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	e841 2300 	strex	r3, r2, [r1]
 8006742:	613b      	str	r3, [r7, #16]
   return(result);
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1e6      	bne.n	8006718 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2220      	movs	r2, #32
 800674e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800675e:	bf00      	nop
 8006760:	3754      	adds	r7, #84	@ 0x54
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <_ZdlPvj>:
 800676a:	f000 b800 	b.w	800676e <_ZdlPv>

0800676e <_ZdlPv>:
 800676e:	f000 b801 	b.w	8006774 <free>
	...

08006774 <free>:
 8006774:	4b02      	ldr	r3, [pc, #8]	@ (8006780 <free+0xc>)
 8006776:	4601      	mov	r1, r0
 8006778:	6818      	ldr	r0, [r3, #0]
 800677a:	f000 b84b 	b.w	8006814 <_free_r>
 800677e:	bf00      	nop
 8006780:	20000034 	.word	0x20000034

08006784 <__malloc_lock>:
 8006784:	4801      	ldr	r0, [pc, #4]	@ (800678c <__malloc_lock+0x8>)
 8006786:	f000 b835 	b.w	80067f4 <__retarget_lock_acquire_recursive>
 800678a:	bf00      	nop
 800678c:	200007f8 	.word	0x200007f8

08006790 <__malloc_unlock>:
 8006790:	4801      	ldr	r0, [pc, #4]	@ (8006798 <__malloc_unlock+0x8>)
 8006792:	f000 b830 	b.w	80067f6 <__retarget_lock_release_recursive>
 8006796:	bf00      	nop
 8006798:	200007f8 	.word	0x200007f8

0800679c <memset>:
 800679c:	4402      	add	r2, r0
 800679e:	4603      	mov	r3, r0
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d100      	bne.n	80067a6 <memset+0xa>
 80067a4:	4770      	bx	lr
 80067a6:	f803 1b01 	strb.w	r1, [r3], #1
 80067aa:	e7f9      	b.n	80067a0 <memset+0x4>

080067ac <__libc_init_array>:
 80067ac:	b570      	push	{r4, r5, r6, lr}
 80067ae:	4d0d      	ldr	r5, [pc, #52]	@ (80067e4 <__libc_init_array+0x38>)
 80067b0:	2600      	movs	r6, #0
 80067b2:	4c0d      	ldr	r4, [pc, #52]	@ (80067e8 <__libc_init_array+0x3c>)
 80067b4:	1b64      	subs	r4, r4, r5
 80067b6:	10a4      	asrs	r4, r4, #2
 80067b8:	42a6      	cmp	r6, r4
 80067ba:	d109      	bne.n	80067d0 <__libc_init_array+0x24>
 80067bc:	4d0b      	ldr	r5, [pc, #44]	@ (80067ec <__libc_init_array+0x40>)
 80067be:	2600      	movs	r6, #0
 80067c0:	4c0b      	ldr	r4, [pc, #44]	@ (80067f0 <__libc_init_array+0x44>)
 80067c2:	f000 f871 	bl	80068a8 <_init>
 80067c6:	1b64      	subs	r4, r4, r5
 80067c8:	10a4      	asrs	r4, r4, #2
 80067ca:	42a6      	cmp	r6, r4
 80067cc:	d105      	bne.n	80067da <__libc_init_array+0x2e>
 80067ce:	bd70      	pop	{r4, r5, r6, pc}
 80067d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067d4:	3601      	adds	r6, #1
 80067d6:	4798      	blx	r3
 80067d8:	e7ee      	b.n	80067b8 <__libc_init_array+0xc>
 80067da:	f855 3b04 	ldr.w	r3, [r5], #4
 80067de:	3601      	adds	r6, #1
 80067e0:	4798      	blx	r3
 80067e2:	e7f2      	b.n	80067ca <__libc_init_array+0x1e>
 80067e4:	08006998 	.word	0x08006998
 80067e8:	08006998 	.word	0x08006998
 80067ec:	08006998 	.word	0x08006998
 80067f0:	0800699c 	.word	0x0800699c

080067f4 <__retarget_lock_acquire_recursive>:
 80067f4:	4770      	bx	lr

080067f6 <__retarget_lock_release_recursive>:
 80067f6:	4770      	bx	lr

080067f8 <memcpy>:
 80067f8:	440a      	add	r2, r1
 80067fa:	1e43      	subs	r3, r0, #1
 80067fc:	4291      	cmp	r1, r2
 80067fe:	d100      	bne.n	8006802 <memcpy+0xa>
 8006800:	4770      	bx	lr
 8006802:	b510      	push	{r4, lr}
 8006804:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006808:	4291      	cmp	r1, r2
 800680a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800680e:	d1f9      	bne.n	8006804 <memcpy+0xc>
 8006810:	bd10      	pop	{r4, pc}
	...

08006814 <_free_r>:
 8006814:	b538      	push	{r3, r4, r5, lr}
 8006816:	4605      	mov	r5, r0
 8006818:	2900      	cmp	r1, #0
 800681a:	d041      	beq.n	80068a0 <_free_r+0x8c>
 800681c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006820:	1f0c      	subs	r4, r1, #4
 8006822:	2b00      	cmp	r3, #0
 8006824:	bfb8      	it	lt
 8006826:	18e4      	addlt	r4, r4, r3
 8006828:	f7ff ffac 	bl	8006784 <__malloc_lock>
 800682c:	4a1d      	ldr	r2, [pc, #116]	@ (80068a4 <_free_r+0x90>)
 800682e:	6813      	ldr	r3, [r2, #0]
 8006830:	b933      	cbnz	r3, 8006840 <_free_r+0x2c>
 8006832:	6063      	str	r3, [r4, #4]
 8006834:	6014      	str	r4, [r2, #0]
 8006836:	4628      	mov	r0, r5
 8006838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800683c:	f7ff bfa8 	b.w	8006790 <__malloc_unlock>
 8006840:	42a3      	cmp	r3, r4
 8006842:	d908      	bls.n	8006856 <_free_r+0x42>
 8006844:	6820      	ldr	r0, [r4, #0]
 8006846:	1821      	adds	r1, r4, r0
 8006848:	428b      	cmp	r3, r1
 800684a:	bf01      	itttt	eq
 800684c:	6819      	ldreq	r1, [r3, #0]
 800684e:	685b      	ldreq	r3, [r3, #4]
 8006850:	1809      	addeq	r1, r1, r0
 8006852:	6021      	streq	r1, [r4, #0]
 8006854:	e7ed      	b.n	8006832 <_free_r+0x1e>
 8006856:	461a      	mov	r2, r3
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	b10b      	cbz	r3, 8006860 <_free_r+0x4c>
 800685c:	42a3      	cmp	r3, r4
 800685e:	d9fa      	bls.n	8006856 <_free_r+0x42>
 8006860:	6811      	ldr	r1, [r2, #0]
 8006862:	1850      	adds	r0, r2, r1
 8006864:	42a0      	cmp	r0, r4
 8006866:	d10b      	bne.n	8006880 <_free_r+0x6c>
 8006868:	6820      	ldr	r0, [r4, #0]
 800686a:	4401      	add	r1, r0
 800686c:	1850      	adds	r0, r2, r1
 800686e:	6011      	str	r1, [r2, #0]
 8006870:	4283      	cmp	r3, r0
 8006872:	d1e0      	bne.n	8006836 <_free_r+0x22>
 8006874:	6818      	ldr	r0, [r3, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	4408      	add	r0, r1
 800687a:	6053      	str	r3, [r2, #4]
 800687c:	6010      	str	r0, [r2, #0]
 800687e:	e7da      	b.n	8006836 <_free_r+0x22>
 8006880:	d902      	bls.n	8006888 <_free_r+0x74>
 8006882:	230c      	movs	r3, #12
 8006884:	602b      	str	r3, [r5, #0]
 8006886:	e7d6      	b.n	8006836 <_free_r+0x22>
 8006888:	6820      	ldr	r0, [r4, #0]
 800688a:	1821      	adds	r1, r4, r0
 800688c:	428b      	cmp	r3, r1
 800688e:	bf02      	ittt	eq
 8006890:	6819      	ldreq	r1, [r3, #0]
 8006892:	685b      	ldreq	r3, [r3, #4]
 8006894:	1809      	addeq	r1, r1, r0
 8006896:	6063      	str	r3, [r4, #4]
 8006898:	bf08      	it	eq
 800689a:	6021      	streq	r1, [r4, #0]
 800689c:	6054      	str	r4, [r2, #4]
 800689e:	e7ca      	b.n	8006836 <_free_r+0x22>
 80068a0:	bd38      	pop	{r3, r4, r5, pc}
 80068a2:	bf00      	nop
 80068a4:	200006bc 	.word	0x200006bc

080068a8 <_init>:
 80068a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068aa:	bf00      	nop
 80068ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ae:	bc08      	pop	{r3}
 80068b0:	469e      	mov	lr, r3
 80068b2:	4770      	bx	lr

080068b4 <_fini>:
 80068b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b6:	bf00      	nop
 80068b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ba:	bc08      	pop	{r3}
 80068bc:	469e      	mov	lr, r3
 80068be:	4770      	bx	lr
