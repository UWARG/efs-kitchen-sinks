
cpp_can_initial_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005128  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005320  08005320  00006320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053ac  080053ac  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080053ac  080053ac  0000705c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080053ac  080053ac  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053ac  080053ac  000063ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053b0  080053b0  000063b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080053b4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000644  2000005c  08005410  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a0  08005410  000076a0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffae  00000000  00000000  00007092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b01  00000000  00000000  00017040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00019b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a49  00000000  00000000  0001a908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b58a  00000000  00000000  0001b351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013491  00000000  00000000  000468db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114498  00000000  00000000  00059d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016e204  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b68  00000000  00000000  0016e248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  00171db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000005c 	.word	0x2000005c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005308 	.word	0x08005308

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000060 	.word	0x20000060
 8000234:	08005308 	.word	0x08005308

08000238 <_uavcan_protocol_NodeStatus_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
static inline bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0
 800023e:	60f8      	str	r0, [r7, #12]
 8000240:	60b9      	str	r1, [r7, #8]
 8000242:	607a      	str	r2, [r7, #4]
 8000244:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->uptime_sec);
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	6819      	ldr	r1, [r3, #0]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2220      	movs	r2, #32
 800024e:	68f8      	ldr	r0, [r7, #12]
 8000250:	f000 ffbb 	bl	80011ca <canardEncodeScalar>

    *bit_ofs += 32;
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	f103 0220 	add.w	r2, r3, #32
 800025c:	68bb      	ldr	r3, [r7, #8]
 800025e:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 2, &msg->health);
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	6819      	ldr	r1, [r3, #0]
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	3304      	adds	r3, #4
 8000268:	2202      	movs	r2, #2
 800026a:	68f8      	ldr	r0, [r7, #12]
 800026c:	f000 ffad 	bl	80011ca <canardEncodeScalar>

    *bit_ofs += 2;
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	1c9a      	adds	r2, r3, #2
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->mode);
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	6819      	ldr	r1, [r3, #0]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	3305      	adds	r3, #5
 8000282:	2203      	movs	r2, #3
 8000284:	68f8      	ldr	r0, [r7, #12]
 8000286:	f000 ffa0 	bl	80011ca <canardEncodeScalar>

    *bit_ofs += 3;
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	1cda      	adds	r2, r3, #3
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->sub_mode);
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	6819      	ldr	r1, [r3, #0]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	3306      	adds	r3, #6
 800029c:	2203      	movs	r2, #3
 800029e:	68f8      	ldr	r0, [r7, #12]
 80002a0:	f000 ff93 	bl	80011ca <canardEncodeScalar>

    *bit_ofs += 3;
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	1cda      	adds	r2, r3, #3
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->vendor_specific_status_code);
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	6819      	ldr	r1, [r3, #0]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	3308      	adds	r3, #8
 80002b6:	2210      	movs	r2, #16
 80002b8:	68f8      	ldr	r0, [r7, #12]
 80002ba:	f000 ff86 	bl	80011ca <canardEncodeScalar>

    *bit_ofs += 16;
 80002be:	68bb      	ldr	r3, [r7, #8]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f103 0210 	add.w	r2, r3, #16
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	601a      	str	r2, [r3, #0]





}
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}

080002d2 <_uavcan_protocol_NodeStatus_decode>:

/*
 decode uavcan_protocol_NodeStatus, return true on failure, false on success
*/
bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 80002d2:	b580      	push	{r7, lr}
 80002d4:	b086      	sub	sp, #24
 80002d6:	af02      	add	r7, sp, #8
 80002d8:	60f8      	str	r0, [r7, #12]
 80002da:	60b9      	str	r1, [r7, #8]
 80002dc:	607a      	str	r2, [r7, #4]
 80002de:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 32, false, &msg->uptime_sec);
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	6819      	ldr	r1, [r3, #0]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	9300      	str	r3, [sp, #0]
 80002e8:	2300      	movs	r3, #0
 80002ea:	2220      	movs	r2, #32
 80002ec:	68f8      	ldr	r0, [r7, #12]
 80002ee:	f000 fde3 	bl	8000eb8 <canardDecodeScalar>

    *bit_ofs += 32;
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f103 0220 	add.w	r2, r3, #32
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 2, false, &msg->health);
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	6819      	ldr	r1, [r3, #0]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	3304      	adds	r3, #4
 8000306:	9300      	str	r3, [sp, #0]
 8000308:	2300      	movs	r3, #0
 800030a:	2202      	movs	r2, #2
 800030c:	68f8      	ldr	r0, [r7, #12]
 800030e:	f000 fdd3 	bl	8000eb8 <canardDecodeScalar>

    *bit_ofs += 2;
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	1c9a      	adds	r2, r3, #2
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->mode);
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	6819      	ldr	r1, [r3, #0]
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	3305      	adds	r3, #5
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	2300      	movs	r3, #0
 8000328:	2203      	movs	r2, #3
 800032a:	68f8      	ldr	r0, [r7, #12]
 800032c:	f000 fdc4 	bl	8000eb8 <canardDecodeScalar>

    *bit_ofs += 3;
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	1cda      	adds	r2, r3, #3
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->sub_mode);
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	6819      	ldr	r1, [r3, #0]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	3306      	adds	r3, #6
 8000342:	9300      	str	r3, [sp, #0]
 8000344:	2300      	movs	r3, #0
 8000346:	2203      	movs	r2, #3
 8000348:	68f8      	ldr	r0, [r7, #12]
 800034a:	f000 fdb5 	bl	8000eb8 <canardDecodeScalar>

    *bit_ofs += 3;
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	1cda      	adds	r2, r3, #3
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 16, false, &msg->vendor_specific_status_code);
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	6819      	ldr	r1, [r3, #0]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	3308      	adds	r3, #8
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	2300      	movs	r3, #0
 8000364:	2210      	movs	r2, #16
 8000366:	68f8      	ldr	r0, [r7, #12]
 8000368:	f000 fda6 	bl	8000eb8 <canardDecodeScalar>

    *bit_ofs += 16;
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f103 0210 	add.w	r2, r3, #16
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	601a      	str	r2, [r3, #0]





    return false; /* success */
 8000378:	2300      	movs	r3, #0

}
 800037a:	4618      	mov	r0, r3
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}

08000382 <uavcan_protocol_NodeStatus_encode>:

uint32_t uavcan_protocol_NodeStatus_encode(struct uavcan_protocol_NodeStatus* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 8000382:	b580      	push	{r7, lr}
 8000384:	b084      	sub	sp, #16
 8000386:	af00      	add	r7, sp, #0
 8000388:	6078      	str	r0, [r7, #4]
 800038a:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 800038c:	2300      	movs	r3, #0
 800038e:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE);
 8000390:	2207      	movs	r2, #7
 8000392:	2100      	movs	r1, #0
 8000394:	6838      	ldr	r0, [r7, #0]
 8000396:	f004 ff31 	bl	80051fc <memset>
    _uavcan_protocol_NodeStatus_encode(buffer, &bit_ofs, msg, 
 800039a:	f107 010c 	add.w	r1, r7, #12
 800039e:	2301      	movs	r3, #1
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	6838      	ldr	r0, [r7, #0]
 80003a4:	f7ff ff48 	bl	8000238 <_uavcan_protocol_NodeStatus_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	3307      	adds	r3, #7
 80003ac:	08db      	lsrs	r3, r3, #3
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3710      	adds	r7, #16
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <uavcan_protocol_NodeStatus_decode>:

/*
  return true if the decode is invalid
 */
bool uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, struct uavcan_protocol_NodeStatus* msg) {
 80003b6:	b580      	push	{r7, lr}
 80003b8:	b084      	sub	sp, #16
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
 80003be:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60bb      	str	r3, [r7, #8]
    if (_uavcan_protocol_NodeStatus_decode(transfer, &bit_ofs, msg,
 80003c4:	f107 0108 	add.w	r1, r7, #8
 80003c8:	2301      	movs	r3, #1
 80003ca:	683a      	ldr	r2, [r7, #0]
 80003cc:	6878      	ldr	r0, [r7, #4]
 80003ce:	f7ff ff80 	bl	80002d2 <_uavcan_protocol_NodeStatus_decode>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <uavcan_protocol_NodeStatus_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 80003d8:	2301      	movs	r3, #1
 80003da:	e00c      	b.n	80003f6 <uavcan_protocol_NodeStatus_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	3307      	adds	r3, #7
 80003e0:	08db      	lsrs	r3, r3, #3
 80003e2:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	8a9b      	ldrh	r3, [r3, #20]
 80003e8:	461a      	mov	r2, r3
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	4293      	cmp	r3, r2
 80003ee:	bf14      	ite	ne
 80003f0:	2301      	movne	r3, #1
 80003f2:	2300      	moveq	r3, #0
 80003f4:	b2db      	uxtb	r3, r3
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <_uavcan_protocol_dynamic_node_id_Allocation_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_dynamic_node_id_Allocation_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_dynamic_node_id_Allocation* msg, bool tao);
static inline bool _uavcan_protocol_dynamic_node_id_Allocation_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_dynamic_node_id_Allocation* msg, bool tao);
void _uavcan_protocol_dynamic_node_id_Allocation_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_dynamic_node_id_Allocation* msg, bool tao) {
 80003fe:	b580      	push	{r7, lr}
 8000400:	b086      	sub	sp, #24
 8000402:	af00      	add	r7, sp, #0
 8000404:	60f8      	str	r0, [r7, #12]
 8000406:	60b9      	str	r1, [r7, #8]
 8000408:	607a      	str	r2, [r7, #4]
 800040a:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 7, &msg->node_id);
 800040c:	68bb      	ldr	r3, [r7, #8]
 800040e:	6819      	ldr	r1, [r3, #0]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	2207      	movs	r2, #7
 8000414:	68f8      	ldr	r0, [r7, #12]
 8000416:	f000 fed8 	bl	80011ca <canardEncodeScalar>

    *bit_ofs += 7;
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	1dda      	adds	r2, r3, #7
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 1, &msg->first_part_of_unique_id);
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	6819      	ldr	r1, [r3, #0]
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	3301      	adds	r3, #1
 800042c:	2201      	movs	r2, #1
 800042e:	68f8      	ldr	r0, [r7, #12]
 8000430:	f000 fecb 	bl	80011ca <canardEncodeScalar>

    *bit_ofs += 1;
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	1c5a      	adds	r2, r3, #1
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	601a      	str	r2, [r3, #0]





    if (!tao) {
 800043e:	78fb      	ldrb	r3, [r7, #3]
 8000440:	f083 0301 	eor.w	r3, r3, #1
 8000444:	b2db      	uxtb	r3, r3
 8000446:	2b00      	cmp	r3, #0
 8000448:	d00c      	beq.n	8000464 <_uavcan_protocol_dynamic_node_id_Allocation_encode+0x66>


        canardEncodeScalar(buffer, *bit_ofs, 5, &msg->unique_id.len);
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	6819      	ldr	r1, [r3, #0]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	3302      	adds	r3, #2
 8000452:	2205      	movs	r2, #5
 8000454:	68f8      	ldr	r0, [r7, #12]
 8000456:	f000 feb8 	bl	80011ca <canardEncodeScalar>
        *bit_ofs += 5;
 800045a:	68bb      	ldr	r3, [r7, #8]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	1d5a      	adds	r2, r3, #5
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	601a      	str	r2, [r3, #0]

    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const size_t unique_id_len = msg->unique_id.len > 16 ? 16 : msg->unique_id.len;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	789b      	ldrb	r3, [r3, #2]
 8000468:	2b10      	cmp	r3, #16
 800046a:	bf28      	it	cs
 800046c:	2310      	movcs	r3, #16
 800046e:	b2db      	uxtb	r3, r3
 8000470:	613b      	str	r3, [r7, #16]
#pragma GCC diagnostic pop
    for (size_t i=0; i < unique_id_len; i++) {
 8000472:	2300      	movs	r3, #0
 8000474:	617b      	str	r3, [r7, #20]
 8000476:	e012      	b.n	800049e <_uavcan_protocol_dynamic_node_id_Allocation_encode+0xa0>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->unique_id.data[i]);
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	6819      	ldr	r1, [r3, #0]
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	4413      	add	r3, r2
 8000482:	3303      	adds	r3, #3
 8000484:	2208      	movs	r2, #8
 8000486:	68f8      	ldr	r0, [r7, #12]
 8000488:	f000 fe9f 	bl	80011ca <canardEncodeScalar>

        *bit_ofs += 8;
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f103 0208 	add.w	r2, r3, #8
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < unique_id_len; i++) {
 8000498:	697b      	ldr	r3, [r7, #20]
 800049a:	3301      	adds	r3, #1
 800049c:	617b      	str	r3, [r7, #20]
 800049e:	697a      	ldr	r2, [r7, #20]
 80004a0:	693b      	ldr	r3, [r7, #16]
 80004a2:	429a      	cmp	r2, r3
 80004a4:	d3e8      	bcc.n	8000478 <_uavcan_protocol_dynamic_node_id_Allocation_encode+0x7a>





}
 80004a6:	bf00      	nop
 80004a8:	bf00      	nop
 80004aa:	3718      	adds	r7, #24
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <_uavcan_protocol_dynamic_node_id_Allocation_decode>:

/*
 decode uavcan_protocol_dynamic_node_id_Allocation, return true on failure, false on success
*/
bool _uavcan_protocol_dynamic_node_id_Allocation_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_dynamic_node_id_Allocation* msg, bool tao) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b088      	sub	sp, #32
 80004b4:	af02      	add	r7, sp, #8
 80004b6:	60f8      	str	r0, [r7, #12]
 80004b8:	60b9      	str	r1, [r7, #8]
 80004ba:	607a      	str	r2, [r7, #4]
 80004bc:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 7, false, &msg->node_id);
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	6819      	ldr	r1, [r3, #0]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	9300      	str	r3, [sp, #0]
 80004c6:	2300      	movs	r3, #0
 80004c8:	2207      	movs	r2, #7
 80004ca:	68f8      	ldr	r0, [r7, #12]
 80004cc:	f000 fcf4 	bl	8000eb8 <canardDecodeScalar>

    *bit_ofs += 7;
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	1dda      	adds	r2, r3, #7
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 1, false, &msg->first_part_of_unique_id);
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	6819      	ldr	r1, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	3301      	adds	r3, #1
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	2300      	movs	r3, #0
 80004e6:	2201      	movs	r2, #1
 80004e8:	68f8      	ldr	r0, [r7, #12]
 80004ea:	f000 fce5 	bl	8000eb8 <canardDecodeScalar>

    *bit_ofs += 1;
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	1c5a      	adds	r2, r3, #1
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	601a      	str	r2, [r3, #0]





    if (!tao) {
 80004f8:	78fb      	ldrb	r3, [r7, #3]
 80004fa:	f083 0301 	eor.w	r3, r3, #1
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	2b00      	cmp	r3, #0
 8000502:	d00f      	beq.n	8000524 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x74>


        canardDecodeScalar(transfer, *bit_ofs, 5, false, &msg->unique_id.len);
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	6819      	ldr	r1, [r3, #0]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	3302      	adds	r3, #2
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	2300      	movs	r3, #0
 8000510:	2205      	movs	r2, #5
 8000512:	68f8      	ldr	r0, [r7, #12]
 8000514:	f000 fcd0 	bl	8000eb8 <canardDecodeScalar>
        *bit_ofs += 5;
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	1d5a      	adds	r2, r3, #5
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	e00a      	b.n	800053a <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x8a>



    } else {

        msg->unique_id.len = ((transfer->payload_len*8)-*bit_ofs)/8;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	8a9b      	ldrh	r3, [r3, #20]
 8000528:	00db      	lsls	r3, r3, #3
 800052a:	461a      	mov	r2, r3
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	1ad3      	subs	r3, r2, r3
 8000532:	08db      	lsrs	r3, r3, #3
 8000534:	b2da      	uxtb	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	709a      	strb	r2, [r3, #2]



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    if (msg->unique_id.len > 16) {
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	789b      	ldrb	r3, [r3, #2]
 800053e:	2b10      	cmp	r3, #16
 8000540:	d901      	bls.n	8000546 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x96>
        return true; /* invalid value */
 8000542:	2301      	movs	r3, #1
 8000544:	e01e      	b.n	8000584 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0xd4>
    }
#pragma GCC diagnostic pop
    for (size_t i=0; i < msg->unique_id.len; i++) {
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
 800054a:	e014      	b.n	8000576 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0xc6>




        canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->unique_id.data[i]);
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	6819      	ldr	r1, [r3, #0]
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	4413      	add	r3, r2
 8000556:	3303      	adds	r3, #3
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	2208      	movs	r2, #8
 800055e:	68f8      	ldr	r0, [r7, #12]
 8000560:	f000 fcaa 	bl	8000eb8 <canardDecodeScalar>

        *bit_ofs += 8;
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f103 0208 	add.w	r2, r3, #8
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < msg->unique_id.len; i++) {
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	3301      	adds	r3, #1
 8000574:	617b      	str	r3, [r7, #20]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	789b      	ldrb	r3, [r3, #2]
 800057a:	461a      	mov	r2, r3
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	4293      	cmp	r3, r2
 8000580:	d3e4      	bcc.n	800054c <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x9c>





    return false; /* success */
 8000582:	2300      	movs	r3, #0

}
 8000584:	4618      	mov	r0, r3
 8000586:	3718      	adds	r7, #24
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <uavcan_protocol_dynamic_node_id_Allocation_encode>:

uint32_t uavcan_protocol_dynamic_node_id_Allocation_encode(struct uavcan_protocol_dynamic_node_id_Allocation* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MAX_SIZE);
 800059a:	2212      	movs	r2, #18
 800059c:	2100      	movs	r1, #0
 800059e:	6838      	ldr	r0, [r7, #0]
 80005a0:	f004 fe2c 	bl	80051fc <memset>
    _uavcan_protocol_dynamic_node_id_Allocation_encode(buffer, &bit_ofs, msg, 
 80005a4:	f107 010c 	add.w	r1, r7, #12
 80005a8:	2301      	movs	r3, #1
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	6838      	ldr	r0, [r7, #0]
 80005ae:	f7ff ff26 	bl	80003fe <_uavcan_protocol_dynamic_node_id_Allocation_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	3307      	adds	r3, #7
 80005b6:	08db      	lsrs	r3, r3, #3
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <uavcan_protocol_dynamic_node_id_Allocation_decode>:

/*
  return true if the decode is invalid
 */
bool uavcan_protocol_dynamic_node_id_Allocation_decode(const CanardRxTransfer* transfer, struct uavcan_protocol_dynamic_node_id_Allocation* msg) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
    if (_uavcan_protocol_dynamic_node_id_Allocation_decode(transfer, &bit_ofs, msg,
 80005ce:	f107 0108 	add.w	r1, r7, #8
 80005d2:	2301      	movs	r3, #1
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f7ff ff6a 	bl	80004b0 <_uavcan_protocol_dynamic_node_id_Allocation_decode>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <uavcan_protocol_dynamic_node_id_Allocation_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 80005e2:	2301      	movs	r3, #1
 80005e4:	e00c      	b.n	8000600 <uavcan_protocol_dynamic_node_id_Allocation_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	3307      	adds	r3, #7
 80005ea:	08db      	lsrs	r3, r3, #3
 80005ec:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	8a9b      	ldrh	r3, [r3, #20]
 80005f2:	461a      	mov	r2, r3
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	4293      	cmp	r3, r2
 80005f8:	bf14      	ite	ne
 80005fa:	2301      	movne	r3, #1
 80005fc:	2300      	moveq	r3, #0
 80005fe:	b2db      	uxtb	r3, r3
}
 8000600:	4618      	mov	r0, r3
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <_ZL25StaticOnTransferReceptionP14CanardInstanceP16CanardRxTransfer>:

#include "can.hpp"

static void StaticOnTransferReception(CanardInstance* ins, CanardRxTransfer* transfer) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
    CAN* self = static_cast<CAN*>(ins->user_reference);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000616:	60fb      	str	r3, [r7, #12]
    self->CanardOnTransferReception(ins, transfer);
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	68f8      	ldr	r0, [r7, #12]
 800061e:	f000 f8f3 	bl	8000808 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer>
}
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <_ZL26StaticShouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh>:

static bool StaticShouldAcceptTransfer(const CanardInstance* ins, uint64_t* out_sig, uint16_t id, CanardTransferType type, uint8_t src) {
 800062a:	b580      	push	{r7, lr}
 800062c:	b086      	sub	sp, #24
 800062e:	af02      	add	r7, sp, #8
 8000630:	60f8      	str	r0, [r7, #12]
 8000632:	60b9      	str	r1, [r7, #8]
 8000634:	4611      	mov	r1, r2
 8000636:	461a      	mov	r2, r3
 8000638:	460b      	mov	r3, r1
 800063a:	80fb      	strh	r3, [r7, #6]
 800063c:	4613      	mov	r3, r2
 800063e:	717b      	strb	r3, [r7, #5]

	return static_cast<CAN*>(ins->user_reference)->CanardShouldAcceptTransfer(ins, out_sig, id, type, src);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000644:	88fa      	ldrh	r2, [r7, #6]
 8000646:	7e3b      	ldrb	r3, [r7, #24]
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	797b      	ldrb	r3, [r7, #5]
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	4613      	mov	r3, r2
 8000650:	68ba      	ldr	r2, [r7, #8]
 8000652:	68f9      	ldr	r1, [r7, #12]
 8000654:	f000 f898 	bl	8000788 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh>
 8000658:	4603      	mov	r3, r0
}
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <_ZN4ICANC1Ev>:
#pragma once

class ICAN {

protected:
	ICAN() = default;
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	4a04      	ldr	r2, [pc, #16]	@ (8000680 <_ZN4ICANC1Ev+0x1c>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4618      	mov	r0, r3
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	08005340 	.word	0x08005340

08000684 <_ZN4ICAND1Ev>:

public:
	virtual ~ICAN() = default;
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	4a04      	ldr	r2, [pc, #16]	@ (80006a0 <_ZN4ICAND1Ev+0x1c>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4618      	mov	r0, r3
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	08005340 	.word	0x08005340

080006a4 <_ZN4ICAND0Ev>:
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff ffe9 	bl	8000684 <_ZN4ICAND1Ev>
 80006b2:	2104      	movs	r1, #4
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f004 fd89 	bl	80051cc <_ZdlPvj>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4618      	mov	r0, r3
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <_ZN3CANC1EP19FDCAN_HandleTypeDef>:

CAN::CAN(FDCAN_HandleTypeDef *hfdcan) : hfdcan(hfdcan) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af02      	add	r7, sp, #8
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	6039      	str	r1, [r7, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ffc7 	bl	8000664 <_ZN4ICANC1Ev>
 80006d6:	4a16      	ldr	r2, [pc, #88]	@ (8000730 <_ZN3CANC1EP19FDCAN_HandleTypeDef+0x6c>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2202      	movs	r2, #2
 80006e0:	f883 2c08 	strb.w	r2, [r3, #3080]	@ 0xc08
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	683a      	ldr	r2, [r7, #0]
 80006e8:	f8c3 2c0c 	str.w	r2, [r3, #3084]	@ 0xc0c
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2200      	movs	r2, #0
 80006f0:	f8c3 2c48 	str.w	r2, [r3, #3144]	@ 0xc48
	static uint8_t canardMemoryPool[1024];

	canardInit(&canard,
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f503 6041 	add.w	r0, r3, #3088	@ 0xc10
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	9301      	str	r3, [sp, #4]
 80006fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000734 <_ZN3CANC1EP19FDCAN_HandleTypeDef+0x70>)
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <_ZN3CANC1EP19FDCAN_HandleTypeDef+0x74>)
 8000704:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000708:	490c      	ldr	r1, [pc, #48]	@ (800073c <_ZN3CANC1EP19FDCAN_HandleTypeDef+0x78>)
 800070a:	f000 fac1 	bl	8000c90 <canardInit>
			&StaticOnTransferReception,
			&StaticShouldAcceptTransfer,
			this
	);

	nodeStatus = {0};
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f603 433c 	addw	r3, r3, #3132	@ 0xc3c
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]

	canard.node_id = NODE_ID;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2201      	movs	r2, #1
 8000720:	f883 2c10 	strb.w	r2, [r3, #3088]	@ 0xc10
}
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	08005330 	.word	0x08005330
 8000734:	0800062b 	.word	0x0800062b
 8000738:	08000609 	.word	0x08000609
 800073c:	20000078 	.word	0x20000078

08000740 <_ZN3CAND1Ev>:

CAN::~CAN() {}
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	4a05      	ldr	r2, [pc, #20]	@ (8000760 <_ZN3CAND1Ev+0x20>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff97 	bl	8000684 <_ZN4ICAND1Ev>
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	08005330 	.word	0x08005330

08000764 <_ZN3CAND0Ev>:
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff ffe7 	bl	8000740 <_ZN3CAND1Ev>
 8000772:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f004 fd28 	bl	80051cc <_ZdlPvj>
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh>:
	const CanardInstance *ins,
	uint64_t *out_data_type_signature,
	uint16_t data_type_id,
	CanardTransferType transfer_type,
	uint8_t source_node_id)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
 8000794:	807b      	strh	r3, [r7, #2]
	if (transfer_type == CanardTransferTypeRequest) {
 8000796:	7e3b      	ldrb	r3, [r7, #24]
 8000798:	2b01      	cmp	r3, #1
 800079a:	d124      	bne.n	80007e6 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x5e>
		// check if we want to handle a specific service request
		switch (data_type_id) {
 800079c:	887b      	ldrh	r3, [r7, #2]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d004      	beq.n	80007ac <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x24>
 80007a2:	f240 1255 	movw	r2, #341	@ 0x155
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d01b      	beq.n	80007e2 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x5a>
 80007aa:	e01c      	b.n	80007e6 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x5e>
			case UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_ID:
			/* case UAVCAN_PROTOCOL_GETNODEINFO_ID: */ {
				if (transfer_type == CanardTransferTypeResponse || transfer_type == CanardTransferTypeRequest) {
 80007ac:	7e3b      	ldrb	r3, [r7, #24]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d002      	beq.n	80007b8 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x30>
 80007b2:	7e3b      	ldrb	r3, [r7, #24]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d107      	bne.n	80007c8 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x40>
					*out_data_type_signature = UAVCAN_PROTOCOL_GETNODEINFO_REQUEST_SIGNATURE;
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	a30f      	add	r3, pc, #60	@ (adr r3, 80007f8 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x70>)
 80007bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007c0:	e9c1 2300 	strd	r2, r3, [r1]
					return true;
 80007c4:	2301      	movs	r3, #1
 80007c6:	e00f      	b.n	80007e8 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x60>
				}
				else if (transfer_type == CanardTransferTypeBroadcast) {
 80007c8:	7e3b      	ldrb	r3, [r7, #24]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d107      	bne.n	80007de <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x56>
					*out_data_type_signature = UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_SIGNATURE;
 80007ce:	6879      	ldr	r1, [r7, #4]
 80007d0:	a30b      	add	r3, pc, #44	@ (adr r3, 8000800 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x78>)
 80007d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007d6:	e9c1 2300 	strd	r2, r3, [r1]
					return true;
 80007da:	2301      	movs	r3, #1
 80007dc:	e004      	b.n	80007e8 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x60>
				}
				else {
					return false;
 80007de:	2300      	movs	r3, #0
 80007e0:	e002      	b.n	80007e8 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x60>
				}
			}
			case UAVCAN_PROTOCOL_NODESTATUS_ID: {
				return true;
 80007e2:	2301      	movs	r3, #1
 80007e4:	e000      	b.n	80007e8 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x60>
			}
		}
	}
	return false;
 80007e6:	2300      	movs	r3, #0
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	f3af 8000 	nop.w
 80007f8:	21c46a9e 	.word	0x21c46a9e
 80007fc:	ee468a81 	.word	0xee468a81
 8000800:	20a11d40 	.word	0x20a11d40
 8000804:	0b2a8126 	.word	0x0b2a8126

08000808 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer>:

void CAN::CanardOnTransferReception(CanardInstance *ins, CanardRxTransfer *transfer)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
	switch (transfer->data_type_id) {
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	8adb      	ldrh	r3, [r3, #22]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d004      	beq.n	8000826 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x1e>
 800081c:	f240 1255 	movw	r2, #341	@ 0x155
 8000820:	4293      	cmp	r3, r2
 8000822:	d00d      	beq.n	8000840 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x38>
			handleNodeStatus(transfer);
			break;
		}
	}

}
 8000824:	e012      	b.n	800084c <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x44>
			if (transfer->transfer_type == CanardTransferTypeResponse) {
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	7e1b      	ldrb	r3, [r3, #24]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d00d      	beq.n	800084a <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x42>
			else if (transfer->transfer_type == CanardTransferTypeBroadcast) {
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	7e1b      	ldrb	r3, [r3, #24]
 8000832:	2b02      	cmp	r3, #2
 8000834:	d109      	bne.n	800084a <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x42>
				handleNodeAllocation(transfer);
 8000836:	6879      	ldr	r1, [r7, #4]
 8000838:	68f8      	ldr	r0, [r7, #12]
 800083a:	f000 f859 	bl	80008f0 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer>
			break;
 800083e:	e004      	b.n	800084a <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x42>
			handleNodeStatus(transfer);
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	68f8      	ldr	r0, [r7, #12]
 8000844:	f000 f806 	bl	8000854 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer>
			break;
 8000848:	e000      	b.n	800084c <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x44>
			break;
 800084a:	bf00      	nop
}
 800084c:	bf00      	nop
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer>:


void CAN::handleNodeStatus(CanardRxTransfer *transfer) {
 8000854:	b5b0      	push	{r4, r5, r7, lr}
 8000856:	b08a      	sub	sp, #40	@ 0x28
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
	uint32_t tick = HAL_GetTick();
 800085e:	f001 fe05 	bl	800246c <HAL_GetTick>
 8000862:	6278      	str	r0, [r7, #36]	@ 0x24

	canNode node {0};
 8000864:	f107 0308 	add.w	r3, r7, #8
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
 8000874:	615a      	str	r2, [r3, #20]

	node.lastSeenTick = tick;
 8000876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000878:	2200      	movs	r2, #0
 800087a:	461c      	mov	r4, r3
 800087c:	4615      	mov	r5, r2
 800087e:	e9c7 4502 	strd	r4, r5, [r7, #8]

	bool success = uavcan_protocol_NodeStatus_decode(transfer, &node.status);
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	3308      	adds	r3, #8
 8000888:	4619      	mov	r1, r3
 800088a:	6838      	ldr	r0, [r7, #0]
 800088c:	f7ff fd93 	bl	80003b6 <uavcan_protocol_NodeStatus_decode>
 8000890:	4603      	mov	r3, r0
 8000892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	if (!success) return;
 8000896:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800089a:	f083 0301 	eor.w	r3, r3, #1
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d11c      	bne.n	80008de <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x8a>

	// Node ID out of bounds or is anonymous
	if (transfer->source_node_id > CANARD_MAX_NODE_ID) return;
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	7edb      	ldrb	r3, [r3, #27]
 80008a8:	b25b      	sxtb	r3, r3
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	db19      	blt.n	80008e2 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x8e>
	if (transfer->source_node_id == 0) return;
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	7edb      	ldrb	r3, [r3, #27]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d017      	beq.n	80008e6 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x92>

	canNodes[transfer->source_node_id] = node;
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	7edb      	ldrb	r3, [r3, #27]
 80008ba:	4619      	mov	r1, r3
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	460b      	mov	r3, r1
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	440b      	add	r3, r1
 80008c4:	00db      	lsls	r3, r3, #3
 80008c6:	4413      	add	r3, r2
 80008c8:	3308      	adds	r3, #8
 80008ca:	461d      	mov	r5, r3
 80008cc:	f107 0408 	add.w	r4, r7, #8
 80008d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80008dc:	e004      	b.n	80008e8 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x94>
	if (!success) return;
 80008de:	bf00      	nop
 80008e0:	e002      	b.n	80008e8 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x94>
	if (transfer->source_node_id > CANARD_MAX_NODE_ID) return;
 80008e2:	bf00      	nop
 80008e4:	e000      	b.n	80008e8 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x94>
	if (transfer->source_node_id == 0) return;
 80008e6:	bf00      	nop
}
 80008e8:	3728      	adds	r7, #40	@ 0x28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

080008f0 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer>:

void CAN::handleNodeAllocation(CanardRxTransfer *transfer){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b094      	sub	sp, #80	@ 0x50
 80008f4:	af06      	add	r7, sp, #24
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]

	uint8_t first_half_unique_id[8];

 	if (transfer->source_node_id != 0) // the source node is not 0, it is not anonymous
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	7edb      	ldrb	r3, [r3, #27]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d142      	bne.n	8000988 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0x98>
	{
		return;
	}

    struct uavcan_protocol_dynamic_node_id_Allocation msg = {};
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	f8c3 200f 	str.w	r2, [r3, #15]
	uavcan_protocol_dynamic_node_id_Allocation_decode(transfer, &msg);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	6838      	ldr	r0, [r7, #0]
 800091c:	f7ff fe50 	bl	80005c0 <uavcan_protocol_dynamic_node_id_Allocation_decode>

	if (msg.node_id != 0) // the node id is not 0, it is not anonymous
 8000920:	7f3b      	ldrb	r3, [r7, #28]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d132      	bne.n	800098c <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0x9c>
	{
		return;
	}

	memcpy(first_half_unique_id, msg.unique_id.data, 8);
 8000926:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800092a:	f107 021f 	add.w	r2, r7, #31
 800092e:	6810      	ldr	r0, [r2, #0]
 8000930:	6851      	ldr	r1, [r2, #4]
 8000932:	c303      	stmia	r3!, {r0, r1}

	// Generate the node id and allocate it
	msg.node_id = allocateNode();
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f000 f833 	bl	80009a0 <_ZN3CAN12allocateNodeEv>
 800093a:	4603      	mov	r3, r0
 800093c:	b2db      	uxtb	r3, r3
 800093e:	773b      	strb	r3, [r7, #28]

	if (msg.node_id == -1){
		return;
	}

	msg = {};
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	f8c3 200f 	str.w	r2, [r3, #15]

	// Send message back
	uint8_t decode_buffer[UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MAX_SIZE];
	uavcan_protocol_dynamic_node_id_Allocation_encode(&msg, decode_buffer);
 8000952:	f107 0208 	add.w	r2, r7, #8
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4611      	mov	r1, r2
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fe15 	bl	800058c <uavcan_protocol_dynamic_node_id_Allocation_encode>


	broadcast(
 8000962:	2312      	movs	r3, #18
 8000964:	9304      	str	r3, [sp, #16]
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	9303      	str	r3, [sp, #12]
 800096c:	2318      	movs	r3, #24
 800096e:	9302      	str	r3, [sp, #8]
 8000970:	2300      	movs	r3, #0
 8000972:	9301      	str	r3, [sp, #4]
 8000974:	2301      	movs	r3, #1
 8000976:	9300      	str	r3, [sp, #0]
 8000978:	a307      	add	r3, pc, #28	@ (adr r3, 8000998 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0xa8>)
 800097a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800097e:	2100      	movs	r1, #0
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f000 f95e 	bl	8000c42 <_ZN3CAN9broadcastE18CanardTransferTypeytPhhPKht>
 8000986:	e002      	b.n	800098e <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0x9e>
		return;
 8000988:	bf00      	nop
 800098a:	e000      	b.n	800098e <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0x9e>
		return;
 800098c:	bf00      	nop
		CANARD_TRANSFER_PRIORITY_LOW,
		decode_buffer,
		sizeof(decode_buffer)
	);

}
 800098e:	3738      	adds	r7, #56	@ 0x38
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	f3af 8000 	nop.w
 8000998:	20a11d40 	.word	0x20a11d40
 800099c:	0b2a8126 	.word	0x0b2a8126

080009a0 <_ZN3CAN12allocateNodeEv>:

int8_t CAN::allocateNode() {
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	// check if the node id is already allocated
	int currId = nextAvailableID;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f893 3c08 	ldrb.w	r3, [r3, #3080]	@ 0xc08
 80009ae:	60fb      	str	r3, [r7, #12]

	if (currId > CANARD_MAX_NODE_ID) {
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80009b4:	dd02      	ble.n	80009bc <_ZN3CAN12allocateNodeEv+0x1c>
		return -1; // no more node ids available
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	e009      	b.n	80009d0 <_ZN3CAN12allocateNodeEv+0x30>
	}

	nextAvailableID++;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f893 3c08 	ldrb.w	r3, [r3, #3080]	@ 0xc08
 80009c2:	3301      	adds	r3, #1
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f883 2c08 	strb.w	r2, [r3, #3080]	@ 0xc08

	return currId;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	b25b      	sxtb	r3, r3
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <_ZN3CAN9sendCANTxEv>:
/*
Function to convert all canard CAN frames and send them through HAL

Consider removing for loop
*/
void CAN::sendCANTx() {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08e      	sub	sp, #56	@ 0x38
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	CanardCANFrame* frame = canardPeekTxQueue(&canard);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f503 6341 	add.w	r3, r3, #3088	@ 0xc10
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 fa3c 	bl	8000e68 <canardPeekTxQueue>
 80009f0:	6378      	str	r0, [r7, #52]	@ 0x34
	if (frame == nullptr) return;
 80009f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d03b      	beq.n	8000a70 <_ZN3CAN9sendCANTxEv+0x94>

	if (HAL_FDCAN_GetTxFifoFreeLevel(hfdcan) > 0) {
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	@ 0xc0c
 80009fe:	4618      	mov	r0, r3
 8000a00:	f002 f9b8 	bl	8002d74 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	bf14      	ite	ne
 8000a0a:	2301      	movne	r3, #1
 8000a0c:	2300      	moveq	r3, #0
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d02e      	beq.n	8000a72 <_ZN3CAN9sendCANTxEv+0x96>
		FDCAN_TxHeaderTypeDef txHeader;

		txHeader.Identifier = frame->id;
 8000a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	60bb      	str	r3, [r7, #8]
		txHeader.IdType = FDCAN_EXTENDED_ID;
 8000a1a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a1e:	60fb      	str	r3, [r7, #12]
		txHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]
		txHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000a24:	2308      	movs	r3, #8
 8000a26:	617b      	str	r3, [r7, #20]
		txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61bb      	str	r3, [r7, #24]
		txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
		txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]

		const uint8_t *txData = frame->data;
 8000a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a36:	3304      	adds	r3, #4
 8000a38:	633b      	str	r3, [r7, #48]	@ 0x30

		bool success = HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &txHeader, txData) == HAL_OK;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	@ 0xc0c
 8000a40:	f107 0108 	add.w	r1, r7, #8
 8000a44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a46:	4618      	mov	r0, r3
 8000a48:	f002 f848 	bl	8002adc <HAL_FDCAN_AddMessageToTxFifoQ>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	bf0c      	ite	eq
 8000a52:	2301      	moveq	r3, #1
 8000a54:	2300      	movne	r3, #0
 8000a56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		if (success) {
 8000a5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d007      	beq.n	8000a72 <_ZN3CAN9sendCANTxEv+0x96>
			canardPopTxQueue(&canard);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f503 6341 	add.w	r3, r3, #3088	@ 0xc10
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 fa10 	bl	8000e8e <canardPopTxQueue>
 8000a6e:	e000      	b.n	8000a72 <_ZN3CAN9sendCANTxEv+0x96>
	if (frame == nullptr) return;
 8000a70:	bf00      	nop
		}
	}

}
 8000a72:	3738      	adds	r7, #56	@ 0x38
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_ZN3CAN12routineTasksEv>:

bool CAN::routineTasks() {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	sendCANTx();
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff ffab 	bl	80009dc <_ZN3CAN9sendCANTxEv>

	uint32_t tick = HAL_GetTick();
 8000a86:	f001 fcf1 	bl	800246c <HAL_GetTick>
 8000a8a:	60f8      	str	r0, [r7, #12]

	if (tick > last1HzTick + UAVCAN_PROTOCOL_NODESTATUS_MAX_BROADCASTING_PERIOD_MS/2) {
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f8d3 3c48 	ldr.w	r3, [r3, #3144]	@ 0xc48
 8000a92:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d906      	bls.n	8000aaa <_ZN3CAN12routineTasksEv+0x32>
		last1HzTick = tick;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	f8c3 2c48 	str.w	r2, [r3, #3144]	@ 0xc48
		process1HzTasks();
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f000 f873 	bl	8000b90 <_ZN3CAN15process1HzTasksEv>
	}

	return true;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	0000      	movs	r0, r0
	...

08000ab8 <_ZN3CAN14sendNodeStatusEv>:

void CAN::sendNodeStatus() {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b0e8      	sub	sp, #416	@ 0x1a0
 8000abc:	af06      	add	r7, sp, #24
 8000abe:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000ac2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000ac6:	6018      	str	r0, [r3, #0]
	uint8_t buffer[UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE];

    nodeStatus.uptime_sec = HAL_GetTick()/1000LL;
 8000ac8:	f001 fcd0 	bl	800246c <HAL_GetTick>
 8000acc:	4603      	mov	r3, r0
 8000ace:	4a2e      	ldr	r2, [pc, #184]	@ (8000b88 <_ZN3CAN14sendNodeStatusEv+0xd0>)
 8000ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad4:	099a      	lsrs	r2, r3, #6
 8000ad6:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000ada:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f8c3 2c3c 	str.w	r2, [r3, #3132]	@ 0xc3c
    nodeStatus.health = UAVCAN_PROTOCOL_NODESTATUS_HEALTH_OK;
 8000ae4:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000ae8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2200      	movs	r2, #0
 8000af0:	f883 2c40 	strb.w	r2, [r3, #3136]	@ 0xc40
    nodeStatus.mode = UAVCAN_PROTOCOL_NODESTATUS_MODE_OPERATIONAL;
 8000af4:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000af8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2200      	movs	r2, #0
 8000b00:	f883 2c41 	strb.w	r2, [r3, #3137]	@ 0xc41
    nodeStatus.sub_mode = 0;
 8000b04:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000b08:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f883 2c42 	strb.w	r2, [r3, #3138]	@ 0xc42
    // put whatever you like in here for display in GUI
    nodeStatus.vendor_specific_status_code = 1234;
 8000b14:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000b18:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f240 42d2 	movw	r2, #1234	@ 0x4d2
 8000b22:	f8a3 2c44 	strh.w	r2, [r3, #3140]	@ 0xc44

    uint32_t len = uavcan_protocol_NodeStatus_encode(&nodeStatus, buffer);
 8000b26:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000b2a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f603 433c 	addw	r3, r3, #3132	@ 0xc3c
 8000b34:	f107 0208 	add.w	r2, r7, #8
 8000b38:	4611      	mov	r1, r2
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fc21 	bl	8000382 <uavcan_protocol_NodeStatus_encode>
 8000b40:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
    // incremeneted on each transfer, allowing for detection of packet
    // loss
    static uint8_t transfer_id;


    broadcast(CanardTransferTypeBroadcast,
 8000b44:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
 8000b4e:	f5a2 70c2 	sub.w	r0, r2, #388	@ 0x184
 8000b52:	9304      	str	r3, [sp, #16]
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	9303      	str	r3, [sp, #12]
 8000b5a:	2318      	movs	r3, #24
 8000b5c:	9302      	str	r3, [sp, #8]
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <_ZN3CAN14sendNodeStatusEv+0xd4>)
 8000b60:	9301      	str	r3, [sp, #4]
 8000b62:	f240 1355 	movw	r3, #341	@ 0x155
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	a305      	add	r3, pc, #20	@ (adr r3, 8000b80 <_ZN3CAN14sendNodeStatusEv+0xc8>)
 8000b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b6e:	2102      	movs	r1, #2
 8000b70:	6800      	ldr	r0, [r0, #0]
 8000b72:	f000 f866 	bl	8000c42 <_ZN3CAN9broadcastE18CanardTransferTypeytPhhPKht>
			&transfer_id,
			CANARD_TRANSFER_PRIORITY_LOW,
			buffer,
			len
	);
}
 8000b76:	bf00      	nop
 8000b78:	f507 77c4 	add.w	r7, r7, #392	@ 0x188
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	c1a7c6f1 	.word	0xc1a7c6f1
 8000b84:	0f0868d0 	.word	0x0f0868d0
 8000b88:	10624dd3 	.word	0x10624dd3
 8000b8c:	20000478 	.word	0x20000478

08000b90 <_ZN3CAN15process1HzTasksEv>:

void CAN::process1HzTasks() {
 8000b90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b94:	b08b      	sub	sp, #44	@ 0x2c
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]

	uint32_t timestamp_msec = HAL_GetTick();
 8000b9a:	f001 fc67 	bl	800246c <HAL_GetTick>
 8000b9e:	6238      	str	r0, [r7, #32]

	// Check if nodes invalid
	for (int i = CANARD_MIN_NODE_ID; i <= CANARD_MAX_NODE_ID; i++) {
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ba4:	e02e      	b.n	8000c04 <_ZN3CAN15process1HzTasksEv+0x74>
		// Make copy of status in case it changes
		canNode node = canNodes[i];
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000baa:	4613      	mov	r3, r2
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	4413      	add	r3, r2
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	440b      	add	r3, r1
 8000bb4:	3308      	adds	r3, #8
 8000bb6:	f107 0608 	add.w	r6, r7, #8
 8000bba:	469c      	mov	ip, r3
 8000bbc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000bc0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000bc2:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8000bc6:	e886 0003 	stmia.w	r6, {r0, r1}

		if (timestamp_msec-node.lastSeenTick > UAVCAN_PROTOCOL_NODESTATUS_OFFLINE_TIMEOUT_MS) {
 8000bca:	6a3b      	ldr	r3, [r7, #32]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	4698      	mov	r8, r3
 8000bd0:	4691      	mov	r9, r2
 8000bd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000bd6:	ebb8 0402 	subs.w	r4, r8, r2
 8000bda:	eb69 0503 	sbc.w	r5, r9, r3
 8000bde:	f640 33b9 	movw	r3, #3001	@ 0xbb9
 8000be2:	429c      	cmp	r4, r3
 8000be4:	f175 0300 	sbcs.w	r3, r5, #0
 8000be8:	d309      	bcc.n	8000bfe <_ZN3CAN15process1HzTasksEv+0x6e>
			canNodes[i].status.mode = UAVCAN_PROTOCOL_NODESTATUS_MODE_OFFLINE;
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bee:	4613      	mov	r3, r2
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	4413      	add	r3, r2
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	440b      	add	r3, r1
 8000bf8:	3315      	adds	r3, #21
 8000bfa:	2207      	movs	r2, #7
 8000bfc:	701a      	strb	r2, [r3, #0]
	for (int i = CANARD_MIN_NODE_ID; i <= CANARD_MAX_NODE_ID; i++) {
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c00:	3301      	adds	r3, #1
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c06:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c08:	ddcd      	ble.n	8000ba6 <_ZN3CAN15process1HzTasksEv+0x16>
		}
	}

	// Transmit NodeStatus
	sendNodeStatus();
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff ff54 	bl	8000ab8 <_ZN3CAN14sendNodeStatusEv>
}
 8000c10:	bf00      	nop
 8000c12:	372c      	adds	r7, #44	@ 0x2c
 8000c14:	46bd      	mov	sp, r7
 8000c16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c1a <_ZN3CAN12broadcastObjEP16CanardTxTransfer>:


/*
Wrapper function with mutex
*/
int16_t CAN::broadcastObj(CanardTxTransfer* transfer) {
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b084      	sub	sp, #16
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	6039      	str	r1, [r7, #0]

//	if (status != osOK){
//		return -1; // handle failure
//	}

	int16_t res = canardBroadcastObj(&canard, transfer);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f503 6341 	add.w	r3, r3, #3088	@ 0xc10
 8000c2a:	6839      	ldr	r1, [r7, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 f86f 	bl	8000d10 <canardBroadcastObj>
 8000c32:	4603      	mov	r3, r0
 8000c34:	81fb      	strh	r3, [r7, #14]
//	osMutexRelease(canBroadcastMutex);

	return res;
 8000c36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <_ZN3CAN9broadcastE18CanardTransferTypeytPhhPKht>:
	#endif
	#if CANARD_ENABLE_TAO_OPTION
		, bool tao; ///< True if tail array optimization is enabled
	#endif
)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b08e      	sub	sp, #56	@ 0x38
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	60f8      	str	r0, [r7, #12]
 8000c4a:	e9c7 2300 	strd	r2, r3, [r7]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	72fb      	strb	r3, [r7, #11]
			iface_mask = iface_mask, ///< Bitmask of interfaces to send the transfer on
		#endif
		#if CANARD_ENABLE_TAO_OPTION
			tao = tao, ///< True if tail array optimization is enabled
		#endif
	};
 8000c52:	7afb      	ldrb	r3, [r7, #11]
 8000c54:	743b      	strb	r3, [r7, #16]
 8000c56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c5a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000c5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000c62:	843b      	strh	r3, [r7, #32]
 8000c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c68:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000c6c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000c70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8000c78:	863b      	strh	r3, [r7, #48]	@ 0x30

	return broadcastObj(&transfer_object);
 8000c7a:	f107 0310 	add.w	r3, r7, #16
 8000c7e:	4619      	mov	r1, r3
 8000c80:	68f8      	ldr	r0, [r7, #12]
 8000c82:	f7ff ffca 	bl	8000c1a <_ZN3CAN12broadcastObjEP16CanardTxTransfer>
 8000c86:	4603      	mov	r3, r0
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3738      	adds	r7, #56	@ 0x38
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <canardInit>:
                 void* mem_arena,
                 size_t mem_arena_size,
                 CanardOnTransferReception on_reception,
                 CanardShouldAcceptTransfer should_accept,
                 void* user_reference)
 {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
 8000c9c:	603b      	str	r3, [r7, #0]
      * If your application fails here, make sure it's not built in 64-bit mode.
      * Refer to the design documentation for more info.
      */
     CANARD_ASSERT(CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE >= 5);

     memset(out_ins, 0, sizeof(*out_ins));
 8000c9e:	222c      	movs	r2, #44	@ 0x2c
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	68f8      	ldr	r0, [r7, #12]
 8000ca4:	f004 faaa 	bl	80051fc <memset>

     out_ins->node_id = CANARD_BROADCAST_NODE_ID;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
     out_ins->on_reception = on_reception;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	683a      	ldr	r2, [r7, #0]
 8000cb2:	609a      	str	r2, [r3, #8]
     out_ins->should_accept = should_accept;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	6a3a      	ldr	r2, [r7, #32]
 8000cb8:	605a      	str	r2, [r3, #4]
     out_ins->rx_states = NULL;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
     out_ins->tx_queue = NULL;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	@ 0x24
     out_ins->user_reference = user_reference;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cca:	629a      	str	r2, [r3, #40]	@ 0x28
 #if CANARD_ENABLE_TAO_OPTION
     out_ins->tao_disabled = false;
 #endif
     size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	095b      	lsrs	r3, r3, #5
 8000cd0:	617b      	str	r3, [r7, #20]
     if (pool_capacity > 0xFFFFU)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cd8:	d302      	bcc.n	8000ce0 <canardInit+0x50>
     {
         pool_capacity = 0xFFFFU;
 8000cda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cde:	617b      	str	r3, [r7, #20]
     }

     initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	330c      	adds	r3, #12
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	b292      	uxth	r2, r2
 8000ce8:	68b9      	ldr	r1, [r7, #8]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 ff6f 	bl	8001bce <initPoolAllocator>
 }
 8000cf0:	bf00      	nop
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <canardGetLocalNodeID>:
         CANARD_ASSERT(false);
     }
 }

 uint8_t canardGetLocalNodeID(const CanardInstance* ins)
 {
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
     return ins->node_id;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	781b      	ldrb	r3, [r3, #0]
 }
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <canardBroadcastObj>:

     return canardBroadcastObj(ins, &transfer_object);
 }

 int16_t canardBroadcastObj(CanardInstance* ins, CanardTxTransfer* transfer_object)
 {
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
     if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d106      	bne.n	8000d30 <canardBroadcastObj+0x20>
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	8c1b      	ldrh	r3, [r3, #32]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d002      	beq.n	8000d30 <canardBroadcastObj+0x20>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 8000d2a:	f06f 0301 	mvn.w	r3, #1
 8000d2e:	e070      	b.n	8000e12 <canardBroadcastObj+0x102>
     }
     if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	7e1b      	ldrb	r3, [r3, #24]
 8000d34:	2b1f      	cmp	r3, #31
 8000d36:	d902      	bls.n	8000d3e <canardBroadcastObj+0x2e>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 8000d38:	f06f 0301 	mvn.w	r3, #1
 8000d3c:	e069      	b.n	8000e12 <canardBroadcastObj+0x102>
     }

     uint32_t can_id = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
     uint16_t crc = 0xFFFFU;
 8000d42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d46:	827b      	strh	r3, [r7, #18]

     if (canardGetLocalNodeID(ins) == 0)
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ffd5 	bl	8000cf8 <canardGetLocalNodeID>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d138      	bne.n	8000dc6 <canardBroadcastObj+0xb6>
     {
         if (transfer_object->payload_len > 7)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	8c1b      	ldrh	r3, [r3, #32]
 8000d58:	2b07      	cmp	r3, #7
 8000d5a:	d902      	bls.n	8000d62 <canardBroadcastObj+0x52>
         {
             return -CANARD_ERROR_NODE_ID_NOT_SET;
 8000d5c:	f06f 0303 	mvn.w	r3, #3
 8000d60:	e057      	b.n	8000e12 <canardBroadcastObj+0x102>
         }

         static const uint16_t DTIDMask = (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;

         if ((transfer_object->data_type_id & DTIDMask) != transfer_object->data_type_id)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	8a1a      	ldrh	r2, [r3, #16]
 8000d66:	4b2d      	ldr	r3, [pc, #180]	@ (8000e1c <canardBroadcastObj+0x10c>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	8a1b      	ldrh	r3, [r3, #16]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d002      	beq.n	8000d7c <canardBroadcastObj+0x6c>
         {
             return -CANARD_ERROR_INVALID_ARGUMENT;
 8000d76:	f06f 0301 	mvn.w	r3, #1
 8000d7a:	e04a      	b.n	8000e12 <canardBroadcastObj+0x102>
         }

         // anonymous transfer, random discriminator
         const uint16_t discriminator = (uint16_t)((crcAdd(0xFFFFU, transfer_object->payload, transfer_object->payload_len)) & 0x7FFEU);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	69d9      	ldr	r1, [r3, #28]
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	8c1b      	ldrh	r3, [r3, #32]
 8000d84:	461a      	mov	r2, r3
 8000d86:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000d8a:	f000 ff03 	bl	8001b94 <crcAdd>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 8000d96:	4013      	ands	r3, r2
 8000d98:	823b      	strh	r3, [r7, #16]
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	7e1b      	ldrb	r3, [r3, #24]
 8000d9e:	061a      	lsls	r2, r3, #24
 8000da0:	8a3b      	ldrh	r3, [r7, #16]
 8000da2:	025b      	lsls	r3, r3, #9
 8000da4:	431a      	orrs	r2, r3
                  ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	8a19      	ldrh	r1, [r3, #16]
 8000daa:	4b1c      	ldr	r3, [pc, #112]	@ (8000e1c <canardBroadcastObj+0x10c>)
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	400b      	ands	r3, r1
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	021b      	lsls	r3, r3, #8
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000db4:	ea42 0403 	orr.w	r4, r2, r3
                  ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff9d 	bl	8000cf8 <canardGetLocalNodeID>
 8000dbe:	4603      	mov	r3, r0
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000dc0:	4323      	orrs	r3, r4
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	e012      	b.n	8000dec <canardBroadcastObj+0xdc>
     }
     else
     {
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	7e1b      	ldrb	r3, [r3, #24]
 8000dca:	061a      	lsls	r2, r3, #24
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	8a1b      	ldrh	r3, [r3, #16]
 8000dd0:	021b      	lsls	r3, r3, #8
 8000dd2:	ea42 0403 	orr.w	r4, r2, r3
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ff8e 	bl	8000cf8 <canardGetLocalNodeID>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	4323      	orrs	r3, r4
 8000de0:	617b      	str	r3, [r7, #20]
         crc = calculateCRC(transfer_object);
 8000de2:	6838      	ldr	r0, [r7, #0]
 8000de4:	f000 f81c 	bl	8000e20 <calculateCRC>
 8000de8:	4603      	mov	r3, r0
 8000dea:	827b      	strh	r3, [r7, #18]
     }

     const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 8000dec:	8a7a      	ldrh	r2, [r7, #18]
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	6979      	ldr	r1, [r7, #20]
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f000 fadb 	bl	80013ae <enqueueTxFrames>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	81fb      	strh	r3, [r7, #14]

     if (result > 0) {
 8000dfc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	dd04      	ble.n	8000e0e <canardBroadcastObj+0xfe>
         incrementTransferID(transfer_object->inout_transfer_id);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 fa5b 	bl	80012c4 <incrementTransferID>
     }

     return result;
 8000e0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 }
 8000e12:	4618      	mov	r0, r3
 8000e14:	371c      	adds	r7, #28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd90      	pop	{r4, r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	08005348 	.word	0x08005348

08000e20 <calculateCRC>:
     return (canard_buffer_idx_t)rx;
 #endif
 }

 CANARD_INTERNAL uint16_t calculateCRC(const CanardTxTransfer* transfer_object)
 {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
     uint16_t crc = 0xFFFFU;
 8000e28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e2c:	81fb      	strh	r3, [r7, #14]
 #if CANARD_ENABLE_CANFD
     if ((transfer_object->payload_len > 7 && !transfer_object->canfd) ||
         (transfer_object->payload_len > 63 && transfer_object->canfd))
 #else
     if (transfer_object->payload_len > 7)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	8c1b      	ldrh	r3, [r3, #32]
 8000e32:	2b07      	cmp	r3, #7
 8000e34:	d913      	bls.n	8000e5e <calculateCRC+0x3e>
 #endif
     {
         crc = crcAddSignature(crc, transfer_object->data_type_signature);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e3c:	89f9      	ldrh	r1, [r7, #14]
 8000e3e:	4608      	mov	r0, r1
 8000e40:	f000 fe79 	bl	8001b36 <crcAddSignature>
 8000e44:	4603      	mov	r3, r0
 8000e46:	81fb      	strh	r3, [r7, #14]
         crc = crcAdd(crc, transfer_object->payload, transfer_object->payload_len);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	69d9      	ldr	r1, [r3, #28]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	8c1b      	ldrh	r3, [r3, #32]
 8000e50:	461a      	mov	r2, r3
 8000e52:	89fb      	ldrh	r3, [r7, #14]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 fe9d 	bl	8001b94 <crcAdd>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	81fb      	strh	r3, [r7, #14]
                 crc = crcAddByte(crc, empty);
             }
         }
 #endif
     }
     return crc;
 8000e5e:	89fb      	ldrh	r3, [r7, #14]
 }
 8000e60:	4618      	mov	r0, r3
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <canardPeekTxQueue>:

     return result;
 }

 CanardCANFrame* canardPeekTxQueue(const CanardInstance* ins)
 {
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
     if (ins->tx_queue == NULL)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d101      	bne.n	8000e7c <canardPeekTxQueue+0x14>
     {
         return NULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	e002      	b.n	8000e82 <canardPeekTxQueue+0x1a>
     }
     return &ins->tx_queue->frame;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e80:	3304      	adds	r3, #4
 }
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <canardPopTxQueue>:

 void canardPopTxQueue(CanardInstance* ins)
 {
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b084      	sub	sp, #16
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
     CanardTxQueueItem* item = ins->tx_queue;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e9a:	60fb      	str	r3, [r7, #12]
     ins->tx_queue = item->next;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	625a      	str	r2, [r3, #36]	@ 0x24
     freeBlock(&ins->allocator, item);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	330c      	adds	r3, #12
 8000ea8:	68f9      	ldr	r1, [r7, #12]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 feef 	bl	8001c8e <freeBlock>
 }
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <canardDecodeScalar>:
 int16_t canardDecodeScalar(const CanardRxTransfer* transfer,
                            uint32_t bit_offset,
                            uint8_t bit_length,
                            bool value_is_signed,
                            void* out_value)
 {
 8000eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ebc:	b08d      	sub	sp, #52	@ 0x34
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	61f8      	str	r0, [r7, #28]
 8000ec2:	61b9      	str	r1, [r7, #24]
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	460b      	mov	r3, r1
 8000eca:	75fb      	strb	r3, [r7, #23]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	75bb      	strb	r3, [r7, #22]
     if (transfer == NULL || out_value == NULL)
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d002      	beq.n	8000edc <canardDecodeScalar+0x24>
 8000ed6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <canardDecodeScalar+0x2a>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 8000edc:	f06f 0301 	mvn.w	r3, #1
 8000ee0:	e16e      	b.n	80011c0 <canardDecodeScalar+0x308>
     }

     if (bit_length < 1 || bit_length > 64)
 8000ee2:	7dfb      	ldrb	r3, [r7, #23]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d002      	beq.n	8000eee <canardDecodeScalar+0x36>
 8000ee8:	7dfb      	ldrb	r3, [r7, #23]
 8000eea:	2b40      	cmp	r3, #64	@ 0x40
 8000eec:	d902      	bls.n	8000ef4 <canardDecodeScalar+0x3c>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 8000eee:	f06f 0301 	mvn.w	r3, #1
 8000ef2:	e165      	b.n	80011c0 <canardDecodeScalar+0x308>
     }

     if (bit_length == 1 && value_is_signed)
 8000ef4:	7dfb      	ldrb	r3, [r7, #23]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d105      	bne.n	8000f06 <canardDecodeScalar+0x4e>
 8000efa:	7dbb      	ldrb	r3, [r7, #22]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <canardDecodeScalar+0x4e>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 8000f00:	f06f 0301 	mvn.w	r3, #1
 8000f04:	e15c      	b.n	80011c0 <canardDecodeScalar+0x308>
         uint64_t u64;
         int64_t  s64;           ///< Also double, possibly float, possibly long double (depends on implementation)
         uint8_t bytes[8];
     } storage;

     memset(&storage, 0, sizeof(storage));   // This is important
 8000f06:	f107 0320 	add.w	r3, r7, #32
 8000f0a:	2208      	movs	r2, #8
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f004 f974 	bl	80051fc <memset>

     const int16_t result = descatterTransferPayload(transfer, bit_offset, bit_length, &storage.bytes[0]);
 8000f14:	f107 0320 	add.w	r3, r7, #32
 8000f18:	7dfa      	ldrb	r2, [r7, #23]
 8000f1a:	69b9      	ldr	r1, [r7, #24]
 8000f1c:	69f8      	ldr	r0, [r7, #28]
 8000f1e:	f000 fca5 	bl	800186c <descatterTransferPayload>
 8000f22:	4603      	mov	r3, r0
 8000f24:	85bb      	strh	r3, [r7, #44]	@ 0x2c
     if (result <= 0)
 8000f26:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	dc02      	bgt.n	8000f34 <canardDecodeScalar+0x7c>
     {
         return result;
 8000f2e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8000f32:	e145      	b.n	80011c0 <canardDecodeScalar+0x308>
      * The bit copy algorithm assumes that more significant bits have lower index, so we need to shift some.
      * Extra most significant bits will be filled with zeroes, which is fine.
      * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
      * not be taken if bit_length == 64, because 64 % 8 == 0.
      */
     if ((bit_length % 8) != 0)
 8000f34:	7dfb      	ldrb	r3, [r7, #23]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d018      	beq.n	8000f72 <canardDecodeScalar+0xba>
     {
         // coverity[overrun-local]
         storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] >> ((8U - (bit_length % 8U)) & 7U));
 8000f40:	7dfb      	ldrb	r3, [r7, #23]
 8000f42:	08db      	lsrs	r3, r3, #3
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	3320      	adds	r3, #32
 8000f48:	f107 0210 	add.w	r2, r7, #16
 8000f4c:	4413      	add	r3, r2
 8000f4e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000f52:	461a      	mov	r2, r3
 8000f54:	7dfb      	ldrb	r3, [r7, #23]
 8000f56:	425b      	negs	r3, r3
 8000f58:	f003 0307 	and.w	r3, r3, #7
 8000f5c:	411a      	asrs	r2, r3
 8000f5e:	7dfb      	ldrb	r3, [r7, #23]
 8000f60:	08db      	lsrs	r3, r3, #3
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	3320      	adds	r3, #32
 8000f68:	f107 0110 	add.w	r1, r7, #16
 8000f6c:	440b      	add	r3, r1
 8000f6e:	f803 2c10 	strb.w	r2, [r3, #-16]
     }

     /*
      * Determining the closest standard byte length - this will be needed for byte reordering and sign bit extension.
      */
     uint8_t std_byte_length = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
     if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 8000f78:	7dfb      	ldrb	r3, [r7, #23]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d103      	bne.n	8000f86 <canardDecodeScalar+0xce>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000f84:	e01e      	b.n	8000fc4 <canardDecodeScalar+0x10c>
     else if (bit_length <= 8)   { std_byte_length = 1; }
 8000f86:	7dfb      	ldrb	r3, [r7, #23]
 8000f88:	2b08      	cmp	r3, #8
 8000f8a:	d803      	bhi.n	8000f94 <canardDecodeScalar+0xdc>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000f92:	e017      	b.n	8000fc4 <canardDecodeScalar+0x10c>
     else if (bit_length <= 16)  { std_byte_length = 2; }
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	2b10      	cmp	r3, #16
 8000f98:	d803      	bhi.n	8000fa2 <canardDecodeScalar+0xea>
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000fa0:	e010      	b.n	8000fc4 <canardDecodeScalar+0x10c>
     else if (bit_length <= 32)  { std_byte_length = 4; }
 8000fa2:	7dfb      	ldrb	r3, [r7, #23]
 8000fa4:	2b20      	cmp	r3, #32
 8000fa6:	d803      	bhi.n	8000fb0 <canardDecodeScalar+0xf8>
 8000fa8:	2304      	movs	r3, #4
 8000faa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000fae:	e009      	b.n	8000fc4 <canardDecodeScalar+0x10c>
     else if (bit_length <= 64)  { std_byte_length = 8; }
 8000fb0:	7dfb      	ldrb	r3, [r7, #23]
 8000fb2:	2b40      	cmp	r3, #64	@ 0x40
 8000fb4:	d803      	bhi.n	8000fbe <canardDecodeScalar+0x106>
 8000fb6:	2308      	movs	r3, #8
 8000fb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000fbc:	e002      	b.n	8000fc4 <canardDecodeScalar+0x10c>
     else
     {
         CANARD_ASSERT(false);
         return -CANARD_ERROR_INTERNAL;
 8000fbe:	f06f 0308 	mvn.w	r3, #8
 8000fc2:	e0fd      	b.n	80011c0 <canardDecodeScalar+0x308>
     CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));

     /*
      * Flipping the byte order if needed.
      */
     if (isBigEndian())
 8000fc4:	f000 fd47 	bl	8001a56 <isBigEndian>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d007      	beq.n	8000fde <canardDecodeScalar+0x126>
     {
         swapByteOrder(&storage.bytes[0], std_byte_length);
 8000fce:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000fd2:	f107 0320 	add.w	r3, r7, #32
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 fd4d 	bl	8001a78 <swapByteOrder>

     /*
      * Extending the sign bit if needed. I miss templates.
      * Note that we operate on unsigned values in order to avoid undefined behaviors.
      */
     if (value_is_signed && (std_byte_length * 8 != bit_length))
 8000fde:	7dbb      	ldrb	r3, [r7, #22]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 809b 	beq.w	800111c <canardDecodeScalar+0x264>
 8000fe6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fea:	00da      	lsls	r2, r3, #3
 8000fec:	7dfb      	ldrb	r3, [r7, #23]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	f000 8094 	beq.w	800111c <canardDecodeScalar+0x264>
     {
         if (bit_length <= 8)
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
 8000ff6:	2b08      	cmp	r3, #8
 8000ff8:	d819      	bhi.n	800102e <canardDecodeScalar+0x176>
         {
             if ((storage.u8 & (1U << (bit_length - 1U))) != 0)                           // If the sign bit is set...
 8000ffa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ffe:	461a      	mov	r2, r3
 8001000:	7dfb      	ldrb	r3, [r7, #23]
 8001002:	3b01      	subs	r3, #1
 8001004:	fa22 f303 	lsr.w	r3, r2, r3
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 8085 	beq.w	800111c <canardDecodeScalar+0x264>
             {
                 storage.u8 |= (uint8_t) 0xFFU & (uint8_t) ~((1U << bit_length) - 1U);   // ...set all bits above it.
 8001012:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001016:	7dfb      	ldrb	r3, [r7, #23]
 8001018:	2101      	movs	r1, #1
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	b2db      	uxtb	r3, r3
 8001020:	425b      	negs	r3, r3
 8001022:	b2db      	uxtb	r3, r3
 8001024:	4313      	orrs	r3, r2
 8001026:	b2db      	uxtb	r3, r3
 8001028:	f887 3020 	strb.w	r3, [r7, #32]
 800102c:	e076      	b.n	800111c <canardDecodeScalar+0x264>
             }
         }
         else if (bit_length <= 16)
 800102e:	7dfb      	ldrb	r3, [r7, #23]
 8001030:	2b10      	cmp	r3, #16
 8001032:	d815      	bhi.n	8001060 <canardDecodeScalar+0x1a8>
         {
             if ((storage.u16 & (1U << (bit_length - 1U))) != 0)
 8001034:	8c3b      	ldrh	r3, [r7, #32]
 8001036:	461a      	mov	r2, r3
 8001038:	7dfb      	ldrb	r3, [r7, #23]
 800103a:	3b01      	subs	r3, #1
 800103c:	fa22 f303 	lsr.w	r3, r2, r3
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b00      	cmp	r3, #0
 8001046:	d069      	beq.n	800111c <canardDecodeScalar+0x264>
             {
                 storage.u16 |= (uint16_t) 0xFFFFU & (uint16_t) ~((1U << bit_length) - 1U);
 8001048:	8c3a      	ldrh	r2, [r7, #32]
 800104a:	7dfb      	ldrb	r3, [r7, #23]
 800104c:	2101      	movs	r1, #1
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	b29b      	uxth	r3, r3
 8001054:	425b      	negs	r3, r3
 8001056:	b29b      	uxth	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b29b      	uxth	r3, r3
 800105c:	843b      	strh	r3, [r7, #32]
 800105e:	e05d      	b.n	800111c <canardDecodeScalar+0x264>
             }
         }
         else if (bit_length <= 32)
 8001060:	7dfb      	ldrb	r3, [r7, #23]
 8001062:	2b20      	cmp	r3, #32
 8001064:	d811      	bhi.n	800108a <canardDecodeScalar+0x1d2>
         {
             if ((storage.u32 & (((uint32_t) 1) << (bit_length - 1U))) != 0)
 8001066:	6a3a      	ldr	r2, [r7, #32]
 8001068:	7dfb      	ldrb	r3, [r7, #23]
 800106a:	3b01      	subs	r3, #1
 800106c:	fa22 f303 	lsr.w	r3, r2, r3
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b00      	cmp	r3, #0
 8001076:	d051      	beq.n	800111c <canardDecodeScalar+0x264>
             {
                 storage.u32 |= (uint32_t) 0xFFFFFFFFUL & (uint32_t) ~((((uint32_t) 1) << bit_length) - 1U);
 8001078:	6a3a      	ldr	r2, [r7, #32]
 800107a:	7dfb      	ldrb	r3, [r7, #23]
 800107c:	2101      	movs	r1, #1
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	425b      	negs	r3, r3
 8001084:	4313      	orrs	r3, r2
 8001086:	623b      	str	r3, [r7, #32]
 8001088:	e048      	b.n	800111c <canardDecodeScalar+0x264>
             }
         }
         else if (bit_length < 64)   // Strictly less, this is not a typo
 800108a:	7dfb      	ldrb	r3, [r7, #23]
 800108c:	2b3f      	cmp	r3, #63	@ 0x3f
 800108e:	d842      	bhi.n	8001116 <canardDecodeScalar+0x25e>
         {
             if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 8001090:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001094:	7df9      	ldrb	r1, [r7, #23]
 8001096:	1e48      	subs	r0, r1, #1
 8001098:	f1c0 0620 	rsb	r6, r0, #32
 800109c:	f1a0 0120 	sub.w	r1, r0, #32
 80010a0:	fa22 f400 	lsr.w	r4, r2, r0
 80010a4:	fa03 f606 	lsl.w	r6, r3, r6
 80010a8:	4334      	orrs	r4, r6
 80010aa:	fa23 f101 	lsr.w	r1, r3, r1
 80010ae:	430c      	orrs	r4, r1
 80010b0:	fa23 f500 	lsr.w	r5, r3, r0
 80010b4:	f004 0301 	and.w	r3, r4, #1
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80010c2:	460b      	mov	r3, r1
 80010c4:	4313      	orrs	r3, r2
 80010c6:	d029      	beq.n	800111c <canardDecodeScalar+0x264>
             {
                 storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << bit_length) - 1U);
 80010c8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80010cc:	7df9      	ldrb	r1, [r7, #23]
 80010ce:	f04f 0201 	mov.w	r2, #1
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	f1a1 0620 	sub.w	r6, r1, #32
 80010da:	f1c1 0020 	rsb	r0, r1, #32
 80010de:	fa03 f901 	lsl.w	r9, r3, r1
 80010e2:	fa02 f606 	lsl.w	r6, r2, r6
 80010e6:	ea49 0906 	orr.w	r9, r9, r6
 80010ea:	fa22 f000 	lsr.w	r0, r2, r0
 80010ee:	ea49 0900 	orr.w	r9, r9, r0
 80010f2:	fa02 f801 	lsl.w	r8, r2, r1
 80010f6:	2300      	movs	r3, #0
 80010f8:	f1d8 0a00 	rsbs	sl, r8, #0
 80010fc:	eb63 0b09 	sbc.w	fp, r3, r9
 8001100:	ea44 030a 	orr.w	r3, r4, sl
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	ea45 030b 	orr.w	r3, r5, fp
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001110:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001114:	e002      	b.n	800111c <canardDecodeScalar+0x264>
             }
         }
         else
         {
             CANARD_ASSERT(false);
             return -CANARD_ERROR_INTERNAL;
 8001116:	f06f 0308 	mvn.w	r3, #8
 800111a:	e051      	b.n	80011c0 <canardDecodeScalar+0x308>
     }

     /*
      * Copying the result out.
      */
     if (value_is_signed)
 800111c:	7dbb      	ldrb	r3, [r7, #22]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d022      	beq.n	8001168 <canardDecodeScalar+0x2b0>
     {
         if      (bit_length <= 8)   { *( (int8_t*) out_value) = storage.s8;  }
 8001122:	7dfb      	ldrb	r3, [r7, #23]
 8001124:	2b08      	cmp	r3, #8
 8001126:	d804      	bhi.n	8001132 <canardDecodeScalar+0x27a>
 8001128:	f997 2020 	ldrsb.w	r2, [r7, #32]
 800112c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800112e:	701a      	strb	r2, [r3, #0]
 8001130:	e044      	b.n	80011bc <canardDecodeScalar+0x304>
         else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 8001132:	7dfb      	ldrb	r3, [r7, #23]
 8001134:	2b10      	cmp	r3, #16
 8001136:	d804      	bhi.n	8001142 <canardDecodeScalar+0x28a>
 8001138:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800113c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800113e:	801a      	strh	r2, [r3, #0]
 8001140:	e03c      	b.n	80011bc <canardDecodeScalar+0x304>
         else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 8001142:	7dfb      	ldrb	r3, [r7, #23]
 8001144:	2b20      	cmp	r3, #32
 8001146:	d803      	bhi.n	8001150 <canardDecodeScalar+0x298>
 8001148:	6a3a      	ldr	r2, [r7, #32]
 800114a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	e035      	b.n	80011bc <canardDecodeScalar+0x304>
         else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 8001150:	7dfb      	ldrb	r3, [r7, #23]
 8001152:	2b40      	cmp	r3, #64	@ 0x40
 8001154:	d805      	bhi.n	8001162 <canardDecodeScalar+0x2aa>
 8001156:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800115a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800115c:	e9c1 2300 	strd	r2, r3, [r1]
 8001160:	e02c      	b.n	80011bc <canardDecodeScalar+0x304>
         else
         {
             CANARD_ASSERT(false);
             return -CANARD_ERROR_INTERNAL;
 8001162:	f06f 0308 	mvn.w	r3, #8
 8001166:	e02b      	b.n	80011c0 <canardDecodeScalar+0x308>
         }
     }
     else
     {
         if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 8001168:	7dfb      	ldrb	r3, [r7, #23]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d104      	bne.n	8001178 <canardDecodeScalar+0x2c0>
 800116e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001172:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001174:	701a      	strb	r2, [r3, #0]
 8001176:	e021      	b.n	80011bc <canardDecodeScalar+0x304>
         else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 8001178:	7dfb      	ldrb	r3, [r7, #23]
 800117a:	2b08      	cmp	r3, #8
 800117c:	d804      	bhi.n	8001188 <canardDecodeScalar+0x2d0>
 800117e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001182:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001184:	701a      	strb	r2, [r3, #0]
 8001186:	e019      	b.n	80011bc <canardDecodeScalar+0x304>
         else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 8001188:	7dfb      	ldrb	r3, [r7, #23]
 800118a:	2b10      	cmp	r3, #16
 800118c:	d803      	bhi.n	8001196 <canardDecodeScalar+0x2de>
 800118e:	8c3a      	ldrh	r2, [r7, #32]
 8001190:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001192:	801a      	strh	r2, [r3, #0]
 8001194:	e012      	b.n	80011bc <canardDecodeScalar+0x304>
         else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 8001196:	7dfb      	ldrb	r3, [r7, #23]
 8001198:	2b20      	cmp	r3, #32
 800119a:	d803      	bhi.n	80011a4 <canardDecodeScalar+0x2ec>
 800119c:	6a3a      	ldr	r2, [r7, #32]
 800119e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e00b      	b.n	80011bc <canardDecodeScalar+0x304>
         else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 80011a4:	7dfb      	ldrb	r3, [r7, #23]
 80011a6:	2b40      	cmp	r3, #64	@ 0x40
 80011a8:	d805      	bhi.n	80011b6 <canardDecodeScalar+0x2fe>
 80011aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011ae:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80011b0:	e9c1 2300 	strd	r2, r3, [r1]
 80011b4:	e002      	b.n	80011bc <canardDecodeScalar+0x304>
         else
         {
             CANARD_ASSERT(false);
             return -CANARD_ERROR_INTERNAL;
 80011b6:	f06f 0308 	mvn.w	r3, #8
 80011ba:	e001      	b.n	80011c0 <canardDecodeScalar+0x308>
         }
     }

     CANARD_ASSERT(result <= bit_length);
     CANARD_ASSERT(result > 0);
     return result;
 80011bc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 }
 80011c0:	4618      	mov	r0, r3
 80011c2:	3734      	adds	r7, #52	@ 0x34
 80011c4:	46bd      	mov	sp, r7
 80011c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080011ca <canardEncodeScalar>:

 void canardEncodeScalar(void* destination,
                         uint32_t bit_offset,
                         uint8_t bit_length,
                         const void* value)
 {
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b08a      	sub	sp, #40	@ 0x28
 80011ce:	af02      	add	r7, sp, #8
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	4613      	mov	r3, r2
 80011d8:	71fb      	strb	r3, [r7, #7]
      * Maybe not the best solution, but it simplifies the API.
      */
     CANARD_ASSERT(destination != NULL);
     CANARD_ASSERT(value != NULL);

     if (bit_length > 64)
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b40      	cmp	r3, #64	@ 0x40
 80011de:	d901      	bls.n	80011e4 <canardEncodeScalar+0x1a>
     {
         CANARD_ASSERT(false);
         bit_length = 64;
 80011e0:	2340      	movs	r3, #64	@ 0x40
 80011e2:	71fb      	strb	r3, [r7, #7]
     }

     if (bit_length < 1)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <canardEncodeScalar+0x24>
     {
         CANARD_ASSERT(false);
         bit_length = 1;
 80011ea:	2301      	movs	r3, #1
 80011ec:	71fb      	strb	r3, [r7, #7]
         uint32_t u32;
         uint64_t u64;
         uint8_t bytes[8];
     } storage;

     memset(&storage, 0, sizeof(storage));
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	2208      	movs	r2, #8
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f004 f800 	bl	80051fc <memset>

     uint8_t std_byte_length = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	77fb      	strb	r3, [r7, #31]

     // Extra most significant bits can be safely ignored here.
     if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) value) != 0); }
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d105      	bne.n	8001212 <canardEncodeScalar+0x48>
 8001206:	2301      	movs	r3, #1
 8001208:	77fb      	strb	r3, [r7, #31]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	743b      	strb	r3, [r7, #16]
 8001210:	e024      	b.n	800125c <canardEncodeScalar+0x92>
     else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) value);  }
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2b08      	cmp	r3, #8
 8001216:	d805      	bhi.n	8001224 <canardEncodeScalar+0x5a>
 8001218:	2301      	movs	r3, #1
 800121a:	77fb      	strb	r3, [r7, #31]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	743b      	strb	r3, [r7, #16]
 8001222:	e01b      	b.n	800125c <canardEncodeScalar+0x92>
     else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) value); }
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	2b10      	cmp	r3, #16
 8001228:	d805      	bhi.n	8001236 <canardEncodeScalar+0x6c>
 800122a:	2302      	movs	r3, #2
 800122c:	77fb      	strb	r3, [r7, #31]
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	823b      	strh	r3, [r7, #16]
 8001234:	e012      	b.n	800125c <canardEncodeScalar+0x92>
     else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) value); }
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	2b20      	cmp	r3, #32
 800123a:	d805      	bhi.n	8001248 <canardEncodeScalar+0x7e>
 800123c:	2304      	movs	r3, #4
 800123e:	77fb      	strb	r3, [r7, #31]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	e009      	b.n	800125c <canardEncodeScalar+0x92>
     else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) value); }
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	2b40      	cmp	r3, #64	@ 0x40
 800124c:	d806      	bhi.n	800125c <canardEncodeScalar+0x92>
 800124e:	2308      	movs	r3, #8
 8001250:	77fb      	strb	r3, [r7, #31]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	e9c7 2304 	strd	r2, r3, [r7, #16]
             storage.bytes[i] = (temp >> (8*i)) & 0xFFU;
         }
     }
 #endif

     if (isBigEndian())
 800125c:	f000 fbfb 	bl	8001a56 <isBigEndian>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d006      	beq.n	8001274 <canardEncodeScalar+0xaa>
     {
         swapByteOrder(&storage.bytes[0], std_byte_length);
 8001266:	7ffa      	ldrb	r2, [r7, #31]
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f000 fc02 	bl	8001a78 <swapByteOrder>
      * Extra least significant bits will be filled with zeroes, which is fine.
      * Extra most significant bits will be discarded here.
      * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
      * not be taken if bit_length == 64, because 64 % 8 == 0.
      */
     if ((bit_length % 8) != 0)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d014      	beq.n	80012aa <canardEncodeScalar+0xe0>
     {
         // coverity[overrun-local]
         storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] << ((8U - (bit_length % 8U)) & 7U));
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	08db      	lsrs	r3, r3, #3
 8001284:	b2db      	uxtb	r3, r3
 8001286:	3320      	adds	r3, #32
 8001288:	443b      	add	r3, r7
 800128a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800128e:	461a      	mov	r2, r3
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	425b      	negs	r3, r3
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	409a      	lsls	r2, r3
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	08db      	lsrs	r3, r3, #3
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	3320      	adds	r3, #32
 80012a4:	443b      	add	r3, r7
 80012a6:	f803 2c10 	strb.w	r2, [r3, #-16]
     }

     /*
      * Now, the storage contains properly serialized scalar. Copying it out.
      */
     copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
 80012aa:	79fa      	ldrb	r2, [r7, #7]
 80012ac:	f107 0010 	add.w	r0, r7, #16
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2100      	movs	r1, #0
 80012b8:	f000 fa61 	bl	800177e <copyBitArray>
 }
 80012bc:	bf00      	nop
 80012be:	3720      	adds	r7, #32
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <incrementTransferID>:
     }
     return d;
 }

 CANARD_INTERNAL void incrementTransferID(uint8_t* transfer_id)
 {
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
     CANARD_ASSERT(transfer_id != NULL);

     (*transfer_id)++;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	3301      	adds	r3, #1
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	701a      	strb	r2, [r3, #0]
     if (*transfer_id >= 32)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b1f      	cmp	r3, #31
 80012de:	d902      	bls.n	80012e6 <incrementTransferID+0x22>
     {
         *transfer_id = 0;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
     }
 }
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <dlcToDataLength>:

 CANARD_INTERNAL uint16_t dlcToDataLength(uint16_t dlc) {
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	80fb      	strh	r3, [r7, #6]
     /*
     Data Length Code      9  10  11  12  13  14  15
     Number of data bytes 12  16  20  24  32  48  64
     */
     if (dlc <= 8) {
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d801      	bhi.n	8001306 <dlcToDataLength+0x14>
         return dlc;
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	e01e      	b.n	8001344 <dlcToDataLength+0x52>
     } else if (dlc == 9) {
 8001306:	88fb      	ldrh	r3, [r7, #6]
 8001308:	2b09      	cmp	r3, #9
 800130a:	d101      	bne.n	8001310 <dlcToDataLength+0x1e>
         return 12;
 800130c:	230c      	movs	r3, #12
 800130e:	e019      	b.n	8001344 <dlcToDataLength+0x52>
     } else if (dlc == 10) {
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	2b0a      	cmp	r3, #10
 8001314:	d101      	bne.n	800131a <dlcToDataLength+0x28>
         return 16;
 8001316:	2310      	movs	r3, #16
 8001318:	e014      	b.n	8001344 <dlcToDataLength+0x52>
     } else if (dlc == 11) {
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	2b0b      	cmp	r3, #11
 800131e:	d101      	bne.n	8001324 <dlcToDataLength+0x32>
         return 20;
 8001320:	2314      	movs	r3, #20
 8001322:	e00f      	b.n	8001344 <dlcToDataLength+0x52>
     } else if (dlc == 12) {
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	2b0c      	cmp	r3, #12
 8001328:	d101      	bne.n	800132e <dlcToDataLength+0x3c>
         return 24;
 800132a:	2318      	movs	r3, #24
 800132c:	e00a      	b.n	8001344 <dlcToDataLength+0x52>
     } else if (dlc == 13) {
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	2b0d      	cmp	r3, #13
 8001332:	d101      	bne.n	8001338 <dlcToDataLength+0x46>
         return 32;
 8001334:	2320      	movs	r3, #32
 8001336:	e005      	b.n	8001344 <dlcToDataLength+0x52>
     } else if (dlc == 14) {
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	2b0e      	cmp	r3, #14
 800133c:	d101      	bne.n	8001342 <dlcToDataLength+0x50>
         return 48;
 800133e:	2330      	movs	r3, #48	@ 0x30
 8001340:	e000      	b.n	8001344 <dlcToDataLength+0x52>
     }
     return 64;
 8001342:	2340      	movs	r3, #64	@ 0x40
 }
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <dataLengthToDlc>:

 CANARD_INTERNAL uint16_t dataLengthToDlc(uint16_t data_length) {
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	80fb      	strh	r3, [r7, #6]
     if (data_length <= 8) {
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	2b08      	cmp	r3, #8
 800135e:	d801      	bhi.n	8001364 <dataLengthToDlc+0x14>
         return data_length;
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	e01e      	b.n	80013a2 <dataLengthToDlc+0x52>
     } else if (data_length <= 12) {
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	2b0c      	cmp	r3, #12
 8001368:	d801      	bhi.n	800136e <dataLengthToDlc+0x1e>
         return 9;
 800136a:	2309      	movs	r3, #9
 800136c:	e019      	b.n	80013a2 <dataLengthToDlc+0x52>
     } else if (data_length <= 16) {
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	2b10      	cmp	r3, #16
 8001372:	d801      	bhi.n	8001378 <dataLengthToDlc+0x28>
         return 10;
 8001374:	230a      	movs	r3, #10
 8001376:	e014      	b.n	80013a2 <dataLengthToDlc+0x52>
     } else if (data_length <= 20) {
 8001378:	88fb      	ldrh	r3, [r7, #6]
 800137a:	2b14      	cmp	r3, #20
 800137c:	d801      	bhi.n	8001382 <dataLengthToDlc+0x32>
         return 11;
 800137e:	230b      	movs	r3, #11
 8001380:	e00f      	b.n	80013a2 <dataLengthToDlc+0x52>
     } else if (data_length <= 24) {
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	2b18      	cmp	r3, #24
 8001386:	d801      	bhi.n	800138c <dataLengthToDlc+0x3c>
         return 12;
 8001388:	230c      	movs	r3, #12
 800138a:	e00a      	b.n	80013a2 <dataLengthToDlc+0x52>
     } else if (data_length <= 32) {
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	2b20      	cmp	r3, #32
 8001390:	d801      	bhi.n	8001396 <dataLengthToDlc+0x46>
         return 13;
 8001392:	230d      	movs	r3, #13
 8001394:	e005      	b.n	80013a2 <dataLengthToDlc+0x52>
     } else if (data_length <= 48) {
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	2b30      	cmp	r3, #48	@ 0x30
 800139a:	d801      	bhi.n	80013a0 <dataLengthToDlc+0x50>
         return 14;
 800139c:	230e      	movs	r3, #14
 800139e:	e000      	b.n	80013a2 <dataLengthToDlc+0x52>
     }
     return 15;
 80013a0:	230f      	movs	r3, #15
 }
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <enqueueTxFrames>:
 CANARD_INTERNAL int16_t enqueueTxFrames(CanardInstance* ins,
                                         uint32_t can_id,
                                         uint16_t crc,
                                         CanardTxTransfer* transfer
 )
 {
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b08c      	sub	sp, #48	@ 0x30
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	60f8      	str	r0, [r7, #12]
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	4613      	mov	r3, r2
 80013bc:	80fb      	strh	r3, [r7, #6]
     CANARD_ASSERT(ins != NULL);
     CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared

     if (transfer->inout_transfer_id == NULL)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d102      	bne.n	80013cc <enqueueTxFrames+0x1e>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 80013c6:	f06f 0301 	mvn.w	r3, #1
 80013ca:	e11c      	b.n	8001606 <enqueueTxFrames+0x258>
     }

     if ((transfer->payload_len > 0) && (transfer->payload == NULL))
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	8c1b      	ldrh	r3, [r3, #32]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d006      	beq.n	80013e2 <enqueueTxFrames+0x34>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	69db      	ldr	r3, [r3, #28]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <enqueueTxFrames+0x34>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 80013dc:	f06f 0301 	mvn.w	r3, #1
 80013e0:	e111      	b.n	8001606 <enqueueTxFrames+0x258>
     }

     int16_t result = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 #if CANARD_ENABLE_CANFD
     uint8_t frame_max_data_len = transfer->canfd ? CANARD_CANFD_FRAME_MAX_DATA_LEN:CANARD_CAN_FRAME_MAX_DATA_LEN;
 #else
     uint8_t frame_max_data_len = CANARD_CAN_FRAME_MAX_DATA_LEN;
 80013e6:	2308      	movs	r3, #8
 80013e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 #endif
     if (transfer->payload_len < frame_max_data_len)                        // Single frame transfer
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	8c1a      	ldrh	r2, [r3, #32]
 80013f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d24b      	bcs.n	8001492 <enqueueTxFrames+0xe4>
     {
         CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	330c      	adds	r3, #12
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 f94a 	bl	8001698 <createTxItem>
 8001404:	6178      	str	r0, [r7, #20]
         if (queue_item == NULL)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d102      	bne.n	8001412 <enqueueTxFrames+0x64>
         {
             return -CANARD_ERROR_OUT_OF_MEMORY;
 800140c:	f06f 0302 	mvn.w	r3, #2
 8001410:	e0f9      	b.n	8001606 <enqueueTxFrames+0x258>
         }

         memcpy(queue_item->frame.data, transfer->payload, transfer->payload_len);
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f103 0008 	add.w	r0, r3, #8
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	69d9      	ldr	r1, [r3, #28]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	8c1b      	ldrh	r3, [r3, #32]
 8001420:	461a      	mov	r2, r3
 8001422:	f003 ff19 	bl	8005258 <memcpy>

         transfer->payload_len = dlcToDataLength(dataLengthToDlc(transfer->payload_len+1))-1;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	8c1b      	ldrh	r3, [r3, #32]
 800142a:	3301      	adds	r3, #1
 800142c:	b29b      	uxth	r3, r3
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff ff8e 	bl	8001350 <dataLengthToDlc>
 8001434:	4603      	mov	r3, r0
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ff5b 	bl	80012f2 <dlcToDataLength>
 800143c:	4603      	mov	r3, r0
 800143e:	3b01      	subs	r3, #1
 8001440:	b29a      	uxth	r2, r3
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	841a      	strh	r2, [r3, #32]
         queue_item->frame.data_len = (uint8_t)(transfer->payload_len + 1);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	8c1b      	ldrh	r3, [r3, #32]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	3301      	adds	r3, #1
 800144e:	b2da      	uxtb	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	741a      	strb	r2, [r3, #16]
         queue_item->frame.data[transfer->payload_len] = (uint8_t)(0xC0U | (*transfer->inout_transfer_id & 31U));
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	f003 031f 	and.w	r3, r3, #31
 800145e:	b2db      	uxtb	r3, r3
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	8c12      	ldrh	r2, [r2, #32]
 8001464:	4611      	mov	r1, r2
 8001466:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800146a:	b2da      	uxtb	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	440b      	add	r3, r1
 8001470:	721a      	strb	r2, [r3, #8]
         queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	605a      	str	r2, [r3, #4]
         queue_item->frame.iface_mask = transfer->iface_mask;
 #endif
 #if CANARD_ENABLE_CANFD
         queue_item->frame.canfd = transfer->canfd;
 #endif
         pushTxQueue(ins, queue_item);
 800147c:	6979      	ldr	r1, [r7, #20]
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f000 f8c5 	bl	800160e <pushTxQueue>
         result++;
 8001484:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001488:	b29b      	uxth	r3, r3
 800148a:	3301      	adds	r3, #1
 800148c:	b29b      	uxth	r3, r3
 800148e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001490:	e0b7      	b.n	8001602 <enqueueTxFrames+0x254>
     }
     else                                                                    // Multi frame transfer
     {
         uint16_t data_index = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	85bb      	strh	r3, [r7, #44]	@ 0x2c
         uint8_t toggle = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
         uint8_t sot_eot = 0x80;
 800149c:	2380      	movs	r3, #128	@ 0x80
 800149e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
           see if we are going to be able to allocate enough blocks for
           this transfer. If not then stop now, otherwise we will end
           up doing a partial (corrupt) transfer which will just make
           the situation worse as it will waste bus bandwidth
          */
         const uint16_t total_bytes = transfer->payload_len + 2; // including CRC
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	8c1b      	ldrh	r3, [r3, #32]
 80014a6:	3302      	adds	r3, #2
 80014a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
         const uint8_t bytes_per_frame = frame_max_data_len-1; // sot/eot byte consumes one byte
 80014aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014ae:	3b01      	subs	r3, #1
 80014b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
         const uint16_t frames_needed = (total_bytes + (bytes_per_frame-1)) / bytes_per_frame;
 80014b4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80014b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014ba:	3b01      	subs	r3, #1
 80014bc:	441a      	add	r2, r3
 80014be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80014c6:	843b      	strh	r3, [r7, #32]
         const uint16_t blocks_available = ins->allocator.statistics.capacity_blocks - ins->allocator.statistics.current_usage_blocks;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	8a9a      	ldrh	r2, [r3, #20]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	8adb      	ldrh	r3, [r3, #22]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	83fb      	strh	r3, [r7, #30]
         if (blocks_available < frames_needed) {
 80014d4:	8bfa      	ldrh	r2, [r7, #30]
 80014d6:	8c3b      	ldrh	r3, [r7, #32]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d202      	bcs.n	80014e2 <enqueueTxFrames+0x134>
             return -CANARD_ERROR_OUT_OF_MEMORY;
 80014dc:	f06f 0302 	mvn.w	r3, #2
 80014e0:	e091      	b.n	8001606 <enqueueTxFrames+0x258>
         }

         CanardTxQueueItem* queue_item = NULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]

         while (transfer->payload_len - data_index != 0)
 80014e6:	e086      	b.n	80015f6 <enqueueTxFrames+0x248>
         {
             queue_item = createTxItem(&ins->allocator);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	330c      	adds	r3, #12
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 f8d3 	bl	8001698 <createTxItem>
 80014f2:	61b8      	str	r0, [r7, #24]
             if (queue_item == NULL)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d102      	bne.n	8001500 <enqueueTxFrames+0x152>
             {
                 CANARD_ASSERT(false);
                 return -CANARD_ERROR_OUT_OF_MEMORY;
 80014fa:	f06f 0302 	mvn.w	r3, #2
 80014fe:	e082      	b.n	8001606 <enqueueTxFrames+0x258>
             }

             uint16_t i = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	853b      	strh	r3, [r7, #40]	@ 0x28
             if (data_index == 0)
 8001504:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10c      	bne.n	8001524 <enqueueTxFrames+0x176>
             {
                 // add crc
                 queue_item->frame.data[0] = (uint8_t) (crc);
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	b2da      	uxtb	r2, r3
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	721a      	strb	r2, [r3, #8]
                 queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	b29b      	uxth	r3, r3
 8001518:	b2da      	uxtb	r2, r3
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	725a      	strb	r2, [r3, #9]
                 i = 2;
 800151e:	2302      	movs	r3, #2
 8001520:	853b      	strh	r3, [r7, #40]	@ 0x28
 8001522:	e012      	b.n	800154a <enqueueTxFrames+0x19c>
             }
             else
             {
                 i = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	853b      	strh	r3, [r7, #40]	@ 0x28
             }

             for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 8001528:	e00f      	b.n	800154a <enqueueTxFrames+0x19c>
             {
                 queue_item->frame.data[i] = transfer->payload[data_index];
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	69da      	ldr	r2, [r3, #28]
 800152e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001530:	441a      	add	r2, r3
 8001532:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001534:	7811      	ldrb	r1, [r2, #0]
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4413      	add	r3, r2
 800153a:	460a      	mov	r2, r1
 800153c:	721a      	strb	r2, [r3, #8]
             for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 800153e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001540:	3301      	adds	r3, #1
 8001542:	853b      	strh	r3, [r7, #40]	@ 0x28
 8001544:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001546:	3301      	adds	r3, #1
 8001548:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800154a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800154c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001550:	3b01      	subs	r3, #1
 8001552:	429a      	cmp	r2, r3
 8001554:	da04      	bge.n	8001560 <enqueueTxFrames+0x1b2>
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	8c1b      	ldrh	r3, [r3, #32]
 800155a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800155c:	429a      	cmp	r2, r3
 800155e:	d3e4      	bcc.n	800152a <enqueueTxFrames+0x17c>
             }
             // tail byte
             sot_eot = (data_index == transfer->payload_len) ? (uint8_t)0x40 : sot_eot;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	8c1b      	ldrh	r3, [r3, #32]
 8001564:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001566:	429a      	cmp	r2, r3
 8001568:	d002      	beq.n	8001570 <enqueueTxFrames+0x1c2>
 800156a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800156e:	e000      	b.n	8001572 <enqueueTxFrames+0x1c4>
 8001570:	2340      	movs	r3, #64	@ 0x40
 8001572:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

             i = dlcToDataLength(dataLengthToDlc(i+1))-1;
 8001576:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001578:	3301      	adds	r3, #1
 800157a:	b29b      	uxth	r3, r3
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fee7 	bl	8001350 <dataLengthToDlc>
 8001582:	4603      	mov	r3, r0
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff feb4 	bl	80012f2 <dlcToDataLength>
 800158a:	4603      	mov	r3, r0
 800158c:	3b01      	subs	r3, #1
 800158e:	853b      	strh	r3, [r7, #40]	@ 0x28
             queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*transfer->inout_transfer_id & 31U));
 8001590:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001594:	015b      	lsls	r3, r3, #5
 8001596:	b2da      	uxtb	r2, r3
 8001598:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800159c:	4313      	orrs	r3, r2
 800159e:	b2d9      	uxtb	r1, r3
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	f003 031f 	and.w	r3, r3, #31
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80015ae:	430a      	orrs	r2, r1
 80015b0:	b2d1      	uxtb	r1, r2
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4413      	add	r3, r2
 80015b6:	460a      	mov	r2, r1
 80015b8:	721a      	strb	r2, [r3, #8]
             queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	605a      	str	r2, [r3, #4]
             queue_item->frame.data_len = (uint8_t)(i + 1);
 80015c4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	3301      	adds	r3, #1
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	741a      	strb	r2, [r3, #16]
             queue_item->frame.iface_mask = transfer->iface_mask;
 #endif
 #if CANARD_ENABLE_CANFD
             queue_item->frame.canfd = transfer->canfd;
 #endif
             pushTxQueue(ins, queue_item);
 80015d0:	69b9      	ldr	r1, [r7, #24]
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f000 f81b 	bl	800160e <pushTxQueue>

             result++;
 80015d8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80015dc:	b29b      	uxth	r3, r3
 80015de:	3301      	adds	r3, #1
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
             toggle ^= 1;
 80015e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80015e8:	f083 0301 	eor.w	r3, r3, #1
 80015ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
             sot_eot = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
         while (transfer->payload_len - data_index != 0)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	8c1b      	ldrh	r3, [r3, #32]
 80015fa:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80015fc:	429a      	cmp	r2, r3
 80015fe:	f47f af73 	bne.w	80014e8 <enqueueTxFrames+0x13a>
         }
     }

     return result;
 8001602:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 }
 8001606:	4618      	mov	r0, r3
 8001608:	3730      	adds	r7, #48	@ 0x30
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <pushTxQueue>:

 /**
  * Puts frame on on the TX queue. Higher priority placed first
  */
 CANARD_INTERNAL void pushTxQueue(CanardInstance* ins, CanardTxQueueItem* item)
 {
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	6039      	str	r1, [r7, #0]
     CANARD_ASSERT(ins != NULL);
     CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames

     if (ins->tx_queue == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161c:	2b00      	cmp	r3, #0
 800161e:	d103      	bne.n	8001628 <pushTxQueue+0x1a>
     {
         ins->tx_queue = item;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	625a      	str	r2, [r3, #36]	@ 0x24
         return;
 8001626:	e034      	b.n	8001692 <pushTxQueue+0x84>
     }

     CanardTxQueueItem* queue = ins->tx_queue;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162c:	60fb      	str	r3, [r7, #12]
     CanardTxQueueItem* previous = ins->tx_queue;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001632:	60bb      	str	r3, [r7, #8]

     while (queue != NULL)
 8001634:	e02a      	b.n	800168c <pushTxQueue+0x7e>
     {
         if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	4619      	mov	r1, r3
 8001640:	4610      	mov	r0, r2
 8001642:	f000 f840 	bl	80016c6 <isPriorityHigher>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d012      	beq.n	8001672 <pushTxQueue+0x64>
         {
             if (queue == ins->tx_queue)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	429a      	cmp	r2, r3
 8001654:	d106      	bne.n	8001664 <pushTxQueue+0x56>
             {
                 item->next = queue;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	601a      	str	r2, [r3, #0]
                 ins->tx_queue = item;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	625a      	str	r2, [r3, #36]	@ 0x24
             else
             {
                 previous->next = item;
                 item->next = queue;
             }
             return;
 8001662:	e016      	b.n	8001692 <pushTxQueue+0x84>
                 previous->next = item;
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	601a      	str	r2, [r3, #0]
                 item->next = queue;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	601a      	str	r2, [r3, #0]
             return;
 8001670:	e00f      	b.n	8001692 <pushTxQueue+0x84>
         }
         else
         {
             if (queue->next == NULL)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d103      	bne.n	8001682 <pushTxQueue+0x74>
             {
                 queue->next = item;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	601a      	str	r2, [r3, #0]
                 return;
 8001680:	e007      	b.n	8001692 <pushTxQueue+0x84>
             }
             else
             {
                 previous = queue;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	60bb      	str	r3, [r7, #8]
                 queue = queue->next;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	60fb      	str	r3, [r7, #12]
     while (queue != NULL)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1d1      	bne.n	8001636 <pushTxQueue+0x28>
             }
         }
     }
 }
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <createTxItem>:

 /**
  * Creates new tx queue item from allocator
  */
 CANARD_INTERNAL CanardTxQueueItem* createTxItem(CanardPoolAllocator* allocator)
 {
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
     CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 facb 	bl	8001c3c <allocateBlock>
 80016a6:	60f8      	str	r0, [r7, #12]
     if (item == NULL)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <createTxItem+0x1a>
     {
         return NULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e005      	b.n	80016be <createTxItem+0x26>
     }
     memset(item, 0, sizeof(*item));
 80016b2:	2214      	movs	r2, #20
 80016b4:	2100      	movs	r1, #0
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f003 fda0 	bl	80051fc <memset>
     return item;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 }
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <isPriorityHigher>:

 /**
  * Returns true if priority of rhs is higher than id
  */
 CANARD_INTERNAL bool isPriorityHigher(uint32_t rhs, uint32_t id)
 {
 80016c6:	b480      	push	{r7}
 80016c8:	b089      	sub	sp, #36	@ 0x24
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
     const uint32_t clean_id = id & CANARD_CAN_EXT_ID_MASK;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80016d6:	61fb      	str	r3, [r7, #28]
     const uint32_t rhs_clean_id = rhs & CANARD_CAN_EXT_ID_MASK;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80016de:	61bb      	str	r3, [r7, #24]

     /*
      * STD vs EXT - if 11 most significant bits are the same, EXT loses.
      */
     const bool ext = (id & CANARD_CAN_FRAME_EFF) != 0;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	0fdb      	lsrs	r3, r3, #31
 80016e4:	75fb      	strb	r3, [r7, #23]
     const bool rhs_ext = (rhs & CANARD_CAN_FRAME_EFF) != 0;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	0fdb      	lsrs	r3, r3, #31
 80016ea:	75bb      	strb	r3, [r7, #22]
     if (ext != rhs_ext)
 80016ec:	7dfa      	ldrb	r2, [r7, #23]
 80016ee:	7dbb      	ldrb	r3, [r7, #22]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d01d      	beq.n	8001730 <isPriorityHigher+0x6a>
     {
         uint32_t arb11 = ext ? (clean_id >> 18U) : clean_id;
 80016f4:	7dfb      	ldrb	r3, [r7, #23]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d002      	beq.n	8001700 <isPriorityHigher+0x3a>
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	0c9b      	lsrs	r3, r3, #18
 80016fe:	e000      	b.n	8001702 <isPriorityHigher+0x3c>
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	613b      	str	r3, [r7, #16]
         uint32_t rhs_arb11 = rhs_ext ? (rhs_clean_id >> 18U) : rhs_clean_id;
 8001704:	7dbb      	ldrb	r3, [r7, #22]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <isPriorityHigher+0x4a>
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	0c9b      	lsrs	r3, r3, #18
 800170e:	e000      	b.n	8001712 <isPriorityHigher+0x4c>
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	60fb      	str	r3, [r7, #12]
         if (arb11 != rhs_arb11)
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	429a      	cmp	r2, r3
 800171a:	d007      	beq.n	800172c <isPriorityHigher+0x66>
         {
             return arb11 < rhs_arb11;
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	429a      	cmp	r2, r3
 8001722:	bf34      	ite	cc
 8001724:	2301      	movcc	r3, #1
 8001726:	2300      	movcs	r3, #0
 8001728:	b2db      	uxtb	r3, r3
 800172a:	e022      	b.n	8001772 <isPriorityHigher+0xac>
         }
         else
         {
             return rhs_ext;
 800172c:	7dbb      	ldrb	r3, [r7, #22]
 800172e:	e020      	b.n	8001772 <isPriorityHigher+0xac>
     }

     /*
      * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
      */
     const bool rtr = (id & CANARD_CAN_FRAME_RTR) != 0;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	bf14      	ite	ne
 800173a:	2301      	movne	r3, #1
 800173c:	2300      	moveq	r3, #0
 800173e:	757b      	strb	r3, [r7, #21]
     const bool rhs_rtr = (rhs & CANARD_CAN_FRAME_RTR) != 0;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	bf14      	ite	ne
 800174a:	2301      	movne	r3, #1
 800174c:	2300      	moveq	r3, #0
 800174e:	753b      	strb	r3, [r7, #20]
     if (clean_id == rhs_clean_id && rtr != rhs_rtr)
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	429a      	cmp	r2, r3
 8001756:	d105      	bne.n	8001764 <isPriorityHigher+0x9e>
 8001758:	7d7a      	ldrb	r2, [r7, #21]
 800175a:	7d3b      	ldrb	r3, [r7, #20]
 800175c:	429a      	cmp	r2, r3
 800175e:	d001      	beq.n	8001764 <isPriorityHigher+0x9e>
     {
         return rhs_rtr;
 8001760:	7d3b      	ldrb	r3, [r7, #20]
 8001762:	e006      	b.n	8001772 <isPriorityHigher+0xac>
     }

     /*
      * Plain ID arbitration - greater value loses.
      */
     return clean_id < rhs_clean_id;
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	429a      	cmp	r2, r3
 800176a:	bf34      	ite	cc
 800176c:	2301      	movcc	r3, #1
 800176e:	2300      	movcs	r3, #0
 8001770:	b2db      	uxtb	r3, r3
 }
 8001772:	4618      	mov	r0, r3
 8001774:	3724      	adds	r7, #36	@ 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <copyBitArray>:
 /**
  * Bit array copy routine, originally developed by Ben Dyer for Libuavcan. Thanks Ben.
  */
 void copyBitArray(const uint8_t* src, uint32_t src_offset, uint32_t src_len,
                         uint8_t* dst, uint32_t dst_offset)
 {
 800177e:	b480      	push	{r7}
 8001780:	b089      	sub	sp, #36	@ 0x24
 8001782:	af00      	add	r7, sp, #0
 8001784:	60f8      	str	r0, [r7, #12]
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	603b      	str	r3, [r7, #0]
     CANARD_ASSERT(src_len > 0U);

     // Normalizing inputs
     src += src_offset / 8U;
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	08db      	lsrs	r3, r3, #3
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
     dst += dst_offset / 8U;
 8001796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001798:	08db      	lsrs	r3, r3, #3
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	4413      	add	r3, r2
 800179e:	603b      	str	r3, [r7, #0]

     src_offset %= 8U;
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	60bb      	str	r3, [r7, #8]
     dst_offset %= 8U;
 80017a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	62bb      	str	r3, [r7, #40]	@ 0x28

     const size_t last_bit = src_offset + src_len;
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	61fb      	str	r3, [r7, #28]
     while (last_bit - src_offset)
 80017b8:	e04d      	b.n	8001856 <copyBitArray+0xd8>
     {
         const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	76fb      	strb	r3, [r7, #27]
         const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 80017c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	76bb      	strb	r3, [r7, #26]

         const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
 80017ce:	7eba      	ldrb	r2, [r7, #26]
 80017d0:	7efb      	ldrb	r3, [r7, #27]
 80017d2:	4293      	cmp	r3, r2
 80017d4:	bf38      	it	cc
 80017d6:	4613      	movcc	r3, r2
 80017d8:	767b      	strb	r3, [r7, #25]
         const uint32_t copy_bits = (uint32_t)MIN(last_bit - src_offset, 8U - max_offset);
 80017da:	7e7b      	ldrb	r3, [r7, #25]
 80017dc:	f1c3 0208 	rsb	r2, r3, #8
 80017e0:	69f9      	ldr	r1, [r7, #28]
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	1acb      	subs	r3, r1, r3
 80017e6:	4293      	cmp	r3, r2
 80017e8:	bf28      	it	cs
 80017ea:	4613      	movcs	r3, r2
 80017ec:	617b      	str	r3, [r7, #20]
         const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset)&0xFF;

         dst[dst_offset / 8U] =
             (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask))&0xFF;
 #else
         const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
 80017ee:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	fa22 f303 	lsr.w	r3, r2, r3
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	461a      	mov	r2, r3
 80017fc:	7ebb      	ldrb	r3, [r7, #26]
 80017fe:	fa42 f303 	asr.w	r3, r2, r3
 8001802:	74fb      	strb	r3, [r7, #19]
         const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset);
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	08db      	lsrs	r3, r3, #3
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	4413      	add	r3, r2
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	7efb      	ldrb	r3, [r7, #27]
 8001812:	409a      	lsls	r2, r3
 8001814:	7ebb      	ldrb	r3, [r7, #26]
 8001816:	fa22 f303 	lsr.w	r3, r2, r3
 800181a:	74bb      	strb	r3, [r7, #18]

         dst[dst_offset / 8U] =
             (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 800181c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800181e:	08db      	lsrs	r3, r3, #3
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	4413      	add	r3, r2
 8001824:	781a      	ldrb	r2, [r3, #0]
 8001826:	7cfb      	ldrb	r3, [r7, #19]
 8001828:	43db      	mvns	r3, r3
 800182a:	b2db      	uxtb	r3, r3
 800182c:	4013      	ands	r3, r2
 800182e:	b2d9      	uxtb	r1, r3
 8001830:	7cba      	ldrb	r2, [r7, #18]
 8001832:	7cfb      	ldrb	r3, [r7, #19]
 8001834:	4013      	ands	r3, r2
 8001836:	b2da      	uxtb	r2, r3
         dst[dst_offset / 8U] =
 8001838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800183a:	08db      	lsrs	r3, r3, #3
 800183c:	6838      	ldr	r0, [r7, #0]
 800183e:	4403      	add	r3, r0
             (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8001840:	430a      	orrs	r2, r1
 8001842:	b2d2      	uxtb	r2, r2
         dst[dst_offset / 8U] =
 8001844:	701a      	strb	r2, [r3, #0]
 #endif

         src_offset += copy_bits;
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	4413      	add	r3, r2
 800184c:	60bb      	str	r3, [r7, #8]
         dst_offset += copy_bits;
 800184e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	4413      	add	r3, r2
 8001854:	62bb      	str	r3, [r7, #40]	@ 0x28
     while (last_bit - src_offset)
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	429a      	cmp	r2, r3
 800185c:	d1ad      	bne.n	80017ba <copyBitArray+0x3c>
     }
 }
 800185e:	bf00      	nop
 8001860:	bf00      	nop
 8001862:	3724      	adds	r7, #36	@ 0x24
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <descatterTransferPayload>:

 CANARD_INTERNAL int16_t descatterTransferPayload(const CanardRxTransfer* transfer,
                                                  uint32_t bit_offset,
                                                  uint8_t bit_length,
                                                  void* output)
 {
 800186c:	b580      	push	{r7, lr}
 800186e:	b090      	sub	sp, #64	@ 0x40
 8001870:	af02      	add	r7, sp, #8
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	4613      	mov	r3, r2
 800187a:	71fb      	strb	r3, [r7, #7]
     CANARD_ASSERT(transfer != 0);

     if (bit_offset >= transfer->payload_len * 8)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	8a9b      	ldrh	r3, [r3, #20]
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	461a      	mov	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4293      	cmp	r3, r2
 8001888:	d301      	bcc.n	800188e <descatterTransferPayload+0x22>
     {
         return 0;       // Out of range, reading zero bits
 800188a:	2300      	movs	r3, #0
 800188c:	e0df      	b.n	8001a4e <descatterTransferPayload+0x1e2>
     }

     if (bit_offset + bit_length > transfer->payload_len * 8)
 800188e:	79fa      	ldrb	r2, [r7, #7]
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	4413      	add	r3, r2
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	8a92      	ldrh	r2, [r2, #20]
 8001898:	00d2      	lsls	r2, r2, #3
 800189a:	4293      	cmp	r3, r2
 800189c:	d908      	bls.n	80018b0 <descatterTransferPayload+0x44>
     {
         bit_length = (uint8_t)(transfer->payload_len * 8U - bit_offset);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	8a9b      	ldrh	r3, [r3, #20]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	71fb      	strb	r3, [r7, #7]
     }

     CANARD_ASSERT(bit_length > 0);

     if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d104      	bne.n	80018c2 <descatterTransferPayload+0x56>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 80b9 	beq.w	8001a34 <descatterTransferPayload+0x1c8>
         /*
          * This part is hideously complicated and probably should be redesigned.
          * The objective here is to copy the requested number of bits from scattered storage into the temporary
          * local storage. We go through great pains to ensure that all corner cases are handled correctly.
          */
         uint32_t input_bit_offset = bit_offset;
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	637b      	str	r3, [r7, #52]	@ 0x34
         uint8_t output_bit_offset = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
         uint8_t remaining_bit_length = bit_length;
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

         // Reading head
         if (input_bit_offset < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8)
 80018d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018d4:	2b27      	cmp	r3, #39	@ 0x27
 80018d6:	d82d      	bhi.n	8001934 <descatterTransferPayload+0xc8>
         {
             const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
 80018d8:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80018dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018de:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d305      	bcc.n	80018f2 <descatterTransferPayload+0x86>
 80018e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	e001      	b.n	80018f6 <descatterTransferPayload+0x8a>
 80018f2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80018f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                                 CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input_bit_offset);

             copyBitArray(&transfer->payload_head[0], input_bit_offset, amount, (uint8_t*) output, 0);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6898      	ldr	r0, [r3, #8]
 80018fe:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001902:	2300      	movs	r3, #0
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800190a:	f7ff ff38 	bl	800177e <copyBitArray>

             input_bit_offset += amount;
 800190e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001912:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001914:	4413      	add	r3, r2
 8001916:	637b      	str	r3, [r7, #52]	@ 0x34
             output_bit_offset = (uint8_t)(output_bit_offset + amount);
 8001918:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800191c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001920:	4413      	add	r3, r2
 8001922:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
             remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 8001926:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800192a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
         }

         // Reading middle
         uint32_t remaining_bits = (uint32_t)(transfer->payload_len * 8U - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8a9b      	ldrh	r3, [r3, #20]
 8001938:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800193c:	3b05      	subs	r3, #5
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	62fb      	str	r3, [r7, #44]	@ 0x2c
         uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 8001942:	2328      	movs	r3, #40	@ 0x28
 8001944:	62bb      	str	r3, [r7, #40]	@ 0x28
         const CanardBufferBlock* block = transfer->payload_middle;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24

         while ((block != NULL) && (remaining_bit_length > 0))
 800194c:	e044      	b.n	80019d8 <descatterTransferPayload+0x16c>
         {
             CANARD_ASSERT(remaining_bits > 0);
             const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_SIZE * 8,
 800194e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001950:	2be0      	cmp	r3, #224	@ 0xe0
 8001952:	bf28      	it	cs
 8001954:	23e0      	movcs	r3, #224	@ 0xe0
 8001956:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001958:	4413      	add	r3, r2
 800195a:	61fb      	str	r3, [r7, #28]
                                                                          remaining_bits);

             // Perform copy if we've reached the requested offset, otherwise jump over this block and try next
             if (block_end_bit_offset > input_bit_offset)
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001960:	429a      	cmp	r2, r3
 8001962:	d92e      	bls.n	80019c2 <descatterTransferPayload+0x156>
             {
                 const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - input_bit_offset);
 8001964:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001968:	69f9      	ldr	r1, [r7, #28]
 800196a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800196c:	1acb      	subs	r3, r1, r3
 800196e:	429a      	cmp	r2, r3
 8001970:	d306      	bcc.n	8001980 <descatterTransferPayload+0x114>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001978:	b2db      	uxtb	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	e001      	b.n	8001984 <descatterTransferPayload+0x118>
 8001980:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001984:	76fb      	strb	r3, [r7, #27]

                 CANARD_ASSERT(input_bit_offset >= block_bit_offset);
                 const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 8001986:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	617b      	str	r3, [r7, #20]

                 copyBitArray(&block->data[0], bit_offset_within_block, amount, (uint8_t*) output, output_bit_offset);
 800198e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001990:	1d18      	adds	r0, r3, #4
 8001992:	7efa      	ldrb	r2, [r7, #27]
 8001994:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	6979      	ldr	r1, [r7, #20]
 800199e:	f7ff feee 	bl	800177e <copyBitArray>

                 input_bit_offset += amount;
 80019a2:	7efb      	ldrb	r3, [r7, #27]
 80019a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80019a6:	4413      	add	r3, r2
 80019a8:	637b      	str	r3, [r7, #52]	@ 0x34
                 output_bit_offset = (uint8_t)(output_bit_offset + amount);
 80019aa:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80019ae:	7efb      	ldrb	r3, [r7, #27]
 80019b0:	4413      	add	r3, r2
 80019b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                 remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 80019b6:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80019ba:	7efb      	ldrb	r3, [r7, #27]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
             }

             CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
             remaining_bits -= block_end_bit_offset - block_bit_offset;
 80019c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019ca:	4413      	add	r3, r2
 80019cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
             block_bit_offset = block_end_bit_offset;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	62bb      	str	r3, [r7, #40]	@ 0x28
             block = block->next;
 80019d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24
         while ((block != NULL) && (remaining_bit_length > 0))
 80019d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <descatterTransferPayload+0x17a>
 80019de:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1b3      	bne.n	800194e <descatterTransferPayload+0xe2>
         }

         CANARD_ASSERT(remaining_bit_length <= remaining_bits);

         // Reading tail
         if ((transfer->payload_tail != NULL) && (remaining_bit_length > 0))
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d02c      	beq.n	8001a48 <descatterTransferPayload+0x1dc>
 80019ee:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d028      	beq.n	8001a48 <descatterTransferPayload+0x1dc>
         {
             CANARD_ASSERT(input_bit_offset >= block_bit_offset);
             const uint32_t offset = input_bit_offset - block_bit_offset;
 80019f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80019f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	613b      	str	r3, [r7, #16]

             copyBitArray(&transfer->payload_tail[0], offset, remaining_bit_length, (uint8_t*) output,
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6918      	ldr	r0, [r3, #16]
 8001a02:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001a06:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	6939      	ldr	r1, [r7, #16]
 8001a10:	f7ff feb5 	bl	800177e <copyBitArray>
                          output_bit_offset);

             input_bit_offset += remaining_bit_length;
 8001a14:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001a18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a1a:	4413      	add	r3, r2
 8001a1c:	637b      	str	r3, [r7, #52]	@ 0x34
             output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
 8001a1e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001a22:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001a26:	4413      	add	r3, r2
 8001a28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
             remaining_bit_length = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
     {
 8001a32:	e009      	b.n	8001a48 <descatterTransferPayload+0x1dc>
         CANARD_ASSERT(output_bit_offset <= 64);
         CANARD_ASSERT(remaining_bit_length == 0);
     }
     else                                                                    // Single frame
     {
         copyBitArray(&transfer->payload_head[0], bit_offset, bit_length, (uint8_t*) output, 0);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6898      	ldr	r0, [r3, #8]
 8001a38:	79fa      	ldrb	r2, [r7, #7]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	f7ff fe9c 	bl	800177e <copyBitArray>
 8001a46:	e000      	b.n	8001a4a <descatterTransferPayload+0x1de>
     {
 8001a48:	bf00      	nop
     }

     return bit_length;
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	b21b      	sxth	r3, r3
 }
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3738      	adds	r7, #56	@ 0x38
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <isBigEndian>:

 CANARD_INTERNAL bool isBigEndian(void)
 {
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 #else
         uint16_t a;
         uint8_t b[2];
 #endif
     } u;
     u.a = 1;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	80bb      	strh	r3, [r7, #4]
     return u.b[1] == 1;                             // Some don't...
 8001a60:	797b      	ldrb	r3, [r7, #5]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	bf0c      	ite	eq
 8001a66:	2301      	moveq	r3, #1
 8001a68:	2300      	movne	r3, #0
 8001a6a:	b2db      	uxtb	r3, r3
 #endif
 }
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <swapByteOrder>:

 CANARD_INTERNAL void swapByteOrder(void* data, unsigned size)
 {
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
     CANARD_ASSERT(data != NULL);

     uint8_t* const bytes = (uint8_t*) data;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	60fb      	str	r3, [r7, #12]

     size_t fwd = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
     size_t rev = size - 1;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	613b      	str	r3, [r7, #16]

     while (fwd < rev)
 8001a90:	e017      	b.n	8001ac2 <swapByteOrder+0x4a>
     {
         const uint8_t x = bytes[fwd];
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	4413      	add	r3, r2
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	72fb      	strb	r3, [r7, #11]
         bytes[fwd] = bytes[rev];
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	441a      	add	r2, r3
 8001aa2:	68f9      	ldr	r1, [r7, #12]
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	440b      	add	r3, r1
 8001aa8:	7812      	ldrb	r2, [r2, #0]
 8001aaa:	701a      	strb	r2, [r3, #0]
         bytes[rev] = x;
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	7afa      	ldrb	r2, [r7, #11]
 8001ab4:	701a      	strb	r2, [r3, #0]
         fwd++;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
         rev--;
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	613b      	str	r3, [r7, #16]
     while (fwd < rev)
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d3e3      	bcc.n	8001a92 <swapByteOrder+0x1a>
     }
 }
 8001aca:	bf00      	nop
 8001acc:	bf00      	nop
 8001ace:	371c      	adds	r7, #28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <crcAddByte>:

 /*
  * CRC functions
  */
 CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
 {
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	460a      	mov	r2, r1
 8001ae2:	80fb      	strh	r3, [r7, #6]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	717b      	strb	r3, [r7, #5]
     crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 8001ae8:	797b      	ldrb	r3, [r7, #5]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	021b      	lsls	r3, r3, #8
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	4053      	eors	r3, r2
 8001af4:	80fb      	strh	r3, [r7, #6]
     for (uint8_t j = 0; j < 8; j++)
 8001af6:	2300      	movs	r3, #0
 8001af8:	73fb      	strb	r3, [r7, #15]
 8001afa:	e012      	b.n	8001b22 <crcAddByte+0x4a>
     {
         if (crc_val & 0x8000U)
 8001afc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	da08      	bge.n	8001b16 <crcAddByte+0x3e>
         {
             crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8001b0e:	f083 0301 	eor.w	r3, r3, #1
 8001b12:	80fb      	strh	r3, [r7, #6]
 8001b14:	e002      	b.n	8001b1c <crcAddByte+0x44>
         }
         else
         {
             crc_val = (uint16_t) (crc_val << 1U);
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	80fb      	strh	r3, [r7, #6]
     for (uint8_t j = 0; j < 8; j++)
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	73fb      	strb	r3, [r7, #15]
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	2b07      	cmp	r3, #7
 8001b26:	d9e9      	bls.n	8001afc <crcAddByte+0x24>
         }
     }
     return crc_val;
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 }
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <crcAddSignature>:

 CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
 {
 8001b36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b38:	b087      	sub	sp, #28
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4601      	mov	r1, r0
 8001b3e:	e9c7 2300 	strd	r2, r3, [r7]
 8001b42:	460b      	mov	r3, r1
 8001b44:	81fb      	strh	r3, [r7, #14]
     for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8001b46:	2300      	movs	r3, #0
 8001b48:	82fb      	strh	r3, [r7, #22]
 8001b4a:	e01b      	b.n	8001b84 <crcAddSignature+0x4e>
     {
         crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 8001b4c:	8af9      	ldrh	r1, [r7, #22]
 8001b4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b52:	f1c1 0620 	rsb	r6, r1, #32
 8001b56:	f1a1 0020 	sub.w	r0, r1, #32
 8001b5a:	fa22 f401 	lsr.w	r4, r2, r1
 8001b5e:	fa03 f606 	lsl.w	r6, r3, r6
 8001b62:	4334      	orrs	r4, r6
 8001b64:	fa23 f000 	lsr.w	r0, r3, r0
 8001b68:	4304      	orrs	r4, r0
 8001b6a:	fa23 f501 	lsr.w	r5, r3, r1
 8001b6e:	b2e2      	uxtb	r2, r4
 8001b70:	89fb      	ldrh	r3, [r7, #14]
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ffaf 	bl	8001ad8 <crcAddByte>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	81fb      	strh	r3, [r7, #14]
     for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8001b7e:	8afb      	ldrh	r3, [r7, #22]
 8001b80:	3308      	adds	r3, #8
 8001b82:	82fb      	strh	r3, [r7, #22]
 8001b84:	8afb      	ldrh	r3, [r7, #22]
 8001b86:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b88:	d9e0      	bls.n	8001b4c <crcAddSignature+0x16>
     }
     return crc_val;
 8001b8a:	89fb      	ldrh	r3, [r7, #14]
 }
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	371c      	adds	r7, #28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b94 <crcAdd>:

 CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
 {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	81fb      	strh	r3, [r7, #14]
     while (len--)
 8001ba2:	e00a      	b.n	8001bba <crcAdd+0x26>
     {
         crc_val = crcAddByte(crc_val, *bytes++);
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	60ba      	str	r2, [r7, #8]
 8001baa:	781a      	ldrb	r2, [r3, #0]
 8001bac:	89fb      	ldrh	r3, [r7, #14]
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff91 	bl	8001ad8 <crcAddByte>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	81fb      	strh	r3, [r7, #14]
     while (len--)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	1e5a      	subs	r2, r3, #1
 8001bbe:	607a      	str	r2, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1ef      	bne.n	8001ba4 <crcAdd+0x10>
     }
     return crc_val;
 8001bc4:	89fb      	ldrh	r3, [r7, #14]
 }
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <initPoolAllocator>:
  *  Pool Allocator functions
  */
 CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
                                        void* buf,
                                        uint16_t buf_len)
 {
 8001bce:	b480      	push	{r7}
 8001bd0:	b089      	sub	sp, #36	@ 0x24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	80fb      	strh	r3, [r7, #6]
     size_t current_index = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
     CanardPoolAllocatorBlock *abuf = buf;
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	617b      	str	r3, [r7, #20]
     allocator->arena = buf;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	611a      	str	r2, [r3, #16]
     CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	3304      	adds	r3, #4
 8001bee:	61bb      	str	r3, [r7, #24]
     while (current_index < buf_len)
 8001bf0:	e00b      	b.n	8001c0a <initPoolAllocator+0x3c>
     {
         *current_block = &abuf[current_index];
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	015b      	lsls	r3, r3, #5
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	441a      	add	r2, r3
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	601a      	str	r2, [r3, #0]
         current_block = &((*current_block)->next);
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	61bb      	str	r3, [r7, #24]
         current_index++;
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	3301      	adds	r3, #1
 8001c08:	61fb      	str	r3, [r7, #28]
     while (current_index < buf_len)
 8001c0a:	88fb      	ldrh	r3, [r7, #6]
 8001c0c:	69fa      	ldr	r2, [r7, #28]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d3ef      	bcc.n	8001bf2 <initPoolAllocator+0x24>
     }
     *current_block = NULL;
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]

     allocator->statistics.capacity_blocks = buf_len;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	88fa      	ldrh	r2, [r7, #6]
 8001c1c:	811a      	strh	r2, [r3, #8]
     allocator->statistics.current_usage_blocks = 0;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	815a      	strh	r2, [r3, #10]
     allocator->statistics.peak_usage_blocks = 0;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	819a      	strh	r2, [r3, #12]
     // user should initialize semaphore after the canardInit
     // or at first call of canard_allocate_sem_take
     allocator->semaphore = NULL;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 }
 8001c30:	bf00      	nop
 8001c32:	3724      	adds	r7, #36	@ 0x24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <allocateBlock>:

 CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
 {
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_take(allocator);
 #endif
     // Check if there are any blocks available in the free list.
     if (allocator->free_list == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <allocateBlock+0x14>
     {
 #if CANARD_ALLOCATE_SEM
         canard_allocate_sem_give(allocator);
 #endif
         return NULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	e018      	b.n	8001c82 <allocateBlock+0x46>
     }

     // Take first available block and prepares next block for use.
     void* result = allocator->free_list;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	60fb      	str	r3, [r7, #12]
     allocator->free_list = allocator->free_list->next;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	605a      	str	r2, [r3, #4]

     // Update statistics
     allocator->statistics.current_usage_blocks++;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	895b      	ldrh	r3, [r3, #10]
 8001c64:	3301      	adds	r3, #1
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	815a      	strh	r2, [r3, #10]
     if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	899a      	ldrh	r2, [r3, #12]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	895b      	ldrh	r3, [r3, #10]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d203      	bcs.n	8001c80 <allocateBlock+0x44>
     {
         allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	895a      	ldrh	r2, [r3, #10]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	819a      	strh	r2, [r3, #12]
     }
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_give(allocator);
 #endif
     return result;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 }
 8001c82:	4618      	mov	r0, r3
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <freeBlock>:

 CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
 {
 8001c8e:	b480      	push	{r7}
 8001c90:	b085      	sub	sp, #20
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	6039      	str	r1, [r7, #0]
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_take(allocator);
 #endif
     CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	60fb      	str	r3, [r7, #12]

     block->next = allocator->free_list;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	601a      	str	r2, [r3, #0]
     allocator->free_list = block;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	605a      	str	r2, [r3, #4]

     CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
     allocator->statistics.current_usage_blocks--;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	895b      	ldrh	r3, [r3, #10]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	815a      	strh	r2, [r3, #10]
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_give(allocator);
 #endif
 }
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <_Z12FDCAN_Configv>:
FDCAN_RxHeaderTypeDef RxHeader;
uint8_t RxData[8];

FDCAN_FilterTypeDef sFilterConfig;

void FDCAN_Config(void) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0


    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <_Z12FDCAN_Configv+0x4c>)
 8001cca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cce:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIndex = 0;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d10 <_Z12FDCAN_Configv+0x4c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <_Z12FDCAN_Configv+0x4c>)
 8001cd8:	2202      	movs	r2, #2
 8001cda:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <_Z12FDCAN_Configv+0x4c>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterID1 = NODE_ID;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <_Z12FDCAN_Configv+0x4c>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterID2 = 0x0; // receive messages from all ids
 8001ce8:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <_Z12FDCAN_Configv+0x4c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	615a      	str	r2, [r3, #20]

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8001cee:	4908      	ldr	r1, [pc, #32]	@ (8001d10 <_Z12FDCAN_Configv+0x4c>)
 8001cf0:	4808      	ldr	r0, [pc, #32]	@ (8001d14 <_Z12FDCAN_Configv+0x50>)
 8001cf2:	f000 fe71 	bl	80029d8 <HAL_FDCAN_ConfigFilter>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	bf14      	ite	ne
 8001cfc:	2301      	movne	r3, #1
 8001cfe:	2300      	moveq	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <_Z12FDCAN_Configv+0x46>
        Error_Handler();
 8001d06:	f000 f975 	bl	8001ff4 <Error_Handler>
    }
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000534 	.word	0x20000534
 8001d14:	2000047c 	.word	0x2000047c

08001d18 <_Z14FDCAN_Activatev>:

void FDCAN_Activate(void) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2101      	movs	r1, #1
 8001d20:	4807      	ldr	r0, [pc, #28]	@ (8001d40 <_Z14FDCAN_Activatev+0x28>)
 8001d22:	f001 f839 	bl	8002d98 <HAL_FDCAN_ActivateNotification>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	bf14      	ite	ne
 8001d2c:	2301      	movne	r3, #1
 8001d2e:	2300      	moveq	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <_Z14FDCAN_Activatev+0x22>
        Error_Handler();
 8001d36:	f000 f95d 	bl	8001ff4 <Error_Handler>
    }
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	2000047c 	.word	0x2000047c

08001d44 <HAL_FDCAN_RxFifo0Callback>:
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
        Error_Handler();
    }
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]

//    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <HAL_FDCAN_RxFifo0Callback+0x38>)
 8001d50:	4a0b      	ldr	r2, [pc, #44]	@ (8001d80 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 8001d52:	2140      	movs	r1, #64	@ 0x40
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 ff05 	bl	8002b64 <HAL_FDCAN_GetRxMessage>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	bf14      	ite	ne
 8001d60:	2301      	movne	r3, #1
 8001d62:	2300      	moveq	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_FDCAN_RxFifo0Callback+0x2a>
            // Process received data (e.g., print it)
        	Error_Handler();
 8001d6a:	f000 f943 	bl	8001ff4 <Error_Handler>
        }

        FDCAN_Activate(); // test with and without this re-activation
 8001d6e:	f7ff ffd3 	bl	8001d18 <_Z14FDCAN_Activatev>
//    }
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	2000052c 	.word	0x2000052c
 8001d80:	20000504 	.word	0x20000504
 8001d84:	00000000 	.word	0x00000000

08001d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	f5ad 6d47 	sub.w	sp, sp, #3184	@ 0xc70
 8001d8e:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d90:	f000 fb02 	bl	8002398 <HAL_Init>

  /* USER CODE BEGIN Init */
  CAN can(&hfdcan1);
 8001d94:	f107 0308 	add.w	r3, r7, #8
 8001d98:	492f      	ldr	r1, [pc, #188]	@ (8001e58 <main+0xd0>)
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fc92 	bl	80006c4 <_ZN3CANC1EP19FDCAN_HandleTypeDef>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001da0:	f000 f862 	bl	8001e68 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001da4:	f000 f90e 	bl	8001fc4 <_ZL12MX_GPIO_Initv>
  MX_FDCAN1_Init();
 8001da8:	f000 f8be 	bl	8001f28 <_ZL14MX_FDCAN1_Initv>
  /* USER CODE BEGIN 2 */
  FDCAN_Activate();
 8001dac:	f7ff ffb4 	bl	8001d18 <_Z14FDCAN_Activatev>
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001db0:	4829      	ldr	r0, [pc, #164]	@ (8001e58 <main+0xd0>)
 8001db2:	f000 fe6b 	bl	8002a8c <HAL_FDCAN_Start>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bf14      	ite	ne
 8001dbc:	2301      	movne	r3, #1
 8001dbe:	2300      	moveq	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <main+0x42>
	  Error_Handler();
 8001dc6:	f000 f915 	bl	8001ff4 <Error_Handler>
  }

  TxHeader.Identifier = NODE_ID;
 8001dca:	4b24      	ldr	r3, [pc, #144]	@ (8001e5c <main+0xd4>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_EXTENDED_ID;
 8001dd0:	4b22      	ldr	r3, [pc, #136]	@ (8001e5c <main+0xd4>)
 8001dd2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001dd6:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001dd8:	4b20      	ldr	r3, [pc, #128]	@ (8001e5c <main+0xd4>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001dde:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <main+0xd4>)
 8001de0:	2208      	movs	r2, #8
 8001de2:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001de4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e5c <main+0xd4>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001dea:	4b1c      	ldr	r3, [pc, #112]	@ (8001e5c <main+0xd4>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001df0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e5c <main+0xd4>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001df6:	4b19      	ldr	r3, [pc, #100]	@ (8001e5c <main+0xd4>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8001dfc:	4b17      	ldr	r3, [pc, #92]	@ (8001e5c <main+0xd4>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	621a      	str	r2, [r3, #32]
//
//	  FDCAN_Transmit();
//
//	  HAL_Delay(10);

	  uint8_t heartbeat_payload[7] = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 };
 8001e02:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 8001e06:	f6a3 4358 	subw	r3, r3, #3160	@ 0xc58
 8001e0a:	4a15      	ldr	r2, [pc, #84]	@ (8001e60 <main+0xd8>)
 8001e0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e10:	6018      	str	r0, [r3, #0]
 8001e12:	3304      	adds	r3, #4
 8001e14:	8019      	strh	r1, [r3, #0]
 8001e16:	3302      	adds	r3, #2
 8001e18:	0c0a      	lsrs	r2, r1, #16
 8001e1a:	701a      	strb	r2, [r3, #0]

	  can.broadcast(
 8001e1c:	f107 0008 	add.w	r0, r7, #8
 8001e20:	2307      	movs	r3, #7
 8001e22:	9304      	str	r3, [sp, #16]
 8001e24:	463b      	mov	r3, r7
 8001e26:	9303      	str	r3, [sp, #12]
 8001e28:	2308      	movs	r3, #8
 8001e2a:	9302      	str	r3, [sp, #8]
 8001e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e64 <main+0xdc>)
 8001e2e:	9301      	str	r3, [sp, #4]
 8001e30:	f240 1355 	movw	r3, #341	@ 0x155
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	a306      	add	r3, pc, #24	@ (adr r3, 8001e50 <main+0xc8>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	2102      	movs	r1, #2
 8001e3e:	f7fe ff00 	bl	8000c42 <_ZN3CAN9broadcastE18CanardTransferTypeytPhhPKht>
			  UAVCAN_PROTOCOL_NODESTATUS_ID,
			  &transfer_id,
			  CANARD_TRANSFER_PRIORITY_HIGH,
			  heartbeat_payload,
			  sizeof(heartbeat_payload));
	  can.routineTasks();
 8001e42:	f107 0308 	add.w	r3, r7, #8
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fe16 	bl	8000a78 <_ZN3CAN12routineTasksEv>
//	      for (int i = 0; i < 8; i++) {
//	          printf("%02X ", RxData[i]);
//	      }
//	      printf("\n");
//	  }
  }
 8001e4c:	bf00      	nop
 8001e4e:	e7d8      	b.n	8001e02 <main+0x7a>
 8001e50:	c1a7c6f1 	.word	0xc1a7c6f1
 8001e54:	0f0868d0 	.word	0x0f0868d0
 8001e58:	2000047c 	.word	0x2000047c
 8001e5c:	200004e0 	.word	0x200004e0
 8001e60:	08005320 	.word	0x08005320
 8001e64:	2000054c 	.word	0x2000054c

08001e68 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b098      	sub	sp, #96	@ 0x60
 8001e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e6e:	f107 0318 	add.w	r3, r7, #24
 8001e72:	2248      	movs	r2, #72	@ 0x48
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f003 f9c0 	bl	80051fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
 8001e88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f001 fc66 	bl	800375c <HAL_PWREx_ControlVoltageScaling>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	bf14      	ite	ne
 8001e96:	2301      	movne	r3, #1
 8001e98:	2300      	moveq	r3, #0
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8001ea0:	f000 f8a8 	bl	8001ff4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ea8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eae:	2340      	movs	r3, #64	@ 0x40
 8001eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001eba:	2304      	movs	r3, #4
 8001ebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8001ebe:	2337      	movs	r3, #55	@ 0x37
 8001ec0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ec2:	2307      	movs	r3, #7
 8001ec4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ece:	f107 0318 	add.w	r3, r7, #24
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f001 fcd2 	bl	800387c <HAL_RCC_OscConfig>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	bf14      	ite	ne
 8001ede:	2301      	movne	r3, #1
 8001ee0:	2300      	moveq	r3, #0
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <_Z18SystemClock_Configv+0x84>
  {
    Error_Handler();
 8001ee8:	f000 f884 	bl	8001ff4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eec:	230f      	movs	r3, #15
 8001eee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	2105      	movs	r1, #5
 8001f04:	4618      	mov	r0, r3
 8001f06:	f002 f98f 	bl	8004228 <HAL_RCC_ClockConfig>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	bf14      	ite	ne
 8001f10:	2301      	movne	r3, #1
 8001f12:	2300      	moveq	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8001f1a:	f000 f86b 	bl	8001ff4 <Error_Handler>
  }
}
 8001f1e:	bf00      	nop
 8001f20:	3760      	adds	r7, #96	@ 0x60
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001f2c:	4b23      	ldr	r3, [pc, #140]	@ (8001fbc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f2e:	4a24      	ldr	r2, [pc, #144]	@ (8001fc0 <_ZL14MX_FDCAN1_Initv+0x98>)
 8001f30:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001f32:	4b22      	ldr	r3, [pc, #136]	@ (8001fbc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001f38:	4b20      	ldr	r3, [pc, #128]	@ (8001fbc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_INTERNAL_LOOPBACK;
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001fbc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f40:	2203      	movs	r2, #3
 8001f42:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001f44:	4b1d      	ldr	r3, [pc, #116]	@ (8001fbc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fbc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001f50:	4b1a      	ldr	r3, [pc, #104]	@ (8001fbc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8001f56:	4b19      	ldr	r3, [pc, #100]	@ (8001fbc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f58:	2204      	movs	r2, #4
 8001f5a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001f5c:	4b17      	ldr	r3, [pc, #92]	@ (8001fbc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 8001f62:	4b16      	ldr	r3, [pc, #88]	@ (8001fbc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8001f68:	4b14      	ldr	r3, [pc, #80]	@ (8001fbc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 8001f6e:	4b13      	ldr	r3, [pc, #76]	@ (8001fbc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f70:	2204      	movs	r2, #4
 8001f72:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001f74:	4b11      	ldr	r3, [pc, #68]	@ (8001fbc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001f80:	4b0e      	ldr	r3, [pc, #56]	@ (8001fbc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001f86:	4b0d      	ldr	r3, [pc, #52]	@ (8001fbc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fbc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001f92:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001f98:	4808      	ldr	r0, [pc, #32]	@ (8001fbc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f9a:	f000 fbcb 	bl	8002734 <HAL_FDCAN_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bf14      	ite	ne
 8001fa4:	2301      	movne	r3, #1
 8001fa6:	2300      	moveq	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 8001fae:	f000 f821 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_Config();
 8001fb2:	f7ff fe87 	bl	8001cc4 <_Z12FDCAN_Configv>

  /* USER CODE END FDCAN1_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	2000047c 	.word	0x2000047c
 8001fc0:	4000a400 	.word	0x4000a400

08001fc4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fca:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <_ZL12MX_GPIO_Initv+0x2c>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fce:	4a08      	ldr	r2, [pc, #32]	@ (8001ff0 <_ZL12MX_GPIO_Initv+0x2c>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fd6:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <_ZL12MX_GPIO_Initv+0x2c>)
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000

08001ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff8:	b672      	cpsid	i
}
 8001ffa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <Error_Handler+0x8>

08002000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002006:	4b0f      	ldr	r3, [pc, #60]	@ (8002044 <HAL_MspInit+0x44>)
 8002008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800200a:	4a0e      	ldr	r2, [pc, #56]	@ (8002044 <HAL_MspInit+0x44>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6613      	str	r3, [r2, #96]	@ 0x60
 8002012:	4b0c      	ldr	r3, [pc, #48]	@ (8002044 <HAL_MspInit+0x44>)
 8002014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800201e:	4b09      	ldr	r3, [pc, #36]	@ (8002044 <HAL_MspInit+0x44>)
 8002020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002022:	4a08      	ldr	r2, [pc, #32]	@ (8002044 <HAL_MspInit+0x44>)
 8002024:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002028:	6593      	str	r3, [r2, #88]	@ 0x58
 800202a:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <HAL_MspInit+0x44>)
 800202c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002036:	f001 fbed 	bl	8003814 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000

08002048 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b0ae      	sub	sp, #184	@ 0xb8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002060:	f107 0310 	add.w	r3, r7, #16
 8002064:	2294      	movs	r2, #148	@ 0x94
 8002066:	2100      	movs	r1, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f003 f8c7 	bl	80051fc <memset>
  if(hfdcan->Instance==FDCAN1)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a26      	ldr	r2, [pc, #152]	@ (800210c <HAL_FDCAN_MspInit+0xc4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d144      	bne.n	8002102 <HAL_FDCAN_MspInit+0xba>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002078:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800207c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800207e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002082:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002084:	f107 0310 	add.w	r3, r7, #16
 8002088:	4618      	mov	r0, r3
 800208a:	f002 fb89 	bl	80047a0 <HAL_RCCEx_PeriphCLKConfig>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002094:	f7ff ffae 	bl	8001ff4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN1_CLK_ENABLE();
 8002098:	4b1d      	ldr	r3, [pc, #116]	@ (8002110 <HAL_FDCAN_MspInit+0xc8>)
 800209a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209c:	4a1c      	ldr	r2, [pc, #112]	@ (8002110 <HAL_FDCAN_MspInit+0xc8>)
 800209e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020a2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80020a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002110 <HAL_FDCAN_MspInit+0xc8>)
 80020a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b0:	4b17      	ldr	r3, [pc, #92]	@ (8002110 <HAL_FDCAN_MspInit+0xc8>)
 80020b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b4:	4a16      	ldr	r2, [pc, #88]	@ (8002110 <HAL_FDCAN_MspInit+0xc8>)
 80020b6:	f043 0308 	orr.w	r3, r3, #8
 80020ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020bc:	4b14      	ldr	r3, [pc, #80]	@ (8002110 <HAL_FDCAN_MspInit+0xc8>)
 80020be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020c8:	2303      	movs	r3, #3
 80020ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80020e0:	2309      	movs	r3, #9
 80020e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020e6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80020ea:	4619      	mov	r1, r3
 80020ec:	4809      	ldr	r0, [pc, #36]	@ (8002114 <HAL_FDCAN_MspInit+0xcc>)
 80020ee:	f001 f9a7 	bl	8003440 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80020f2:	2200      	movs	r2, #0
 80020f4:	2100      	movs	r1, #0
 80020f6:	2027      	movs	r0, #39	@ 0x27
 80020f8:	f000 fa9f 	bl	800263a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80020fc:	2027      	movs	r0, #39	@ 0x27
 80020fe:	f000 fab6 	bl	800266e <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8002102:	bf00      	nop
 8002104:	37b8      	adds	r7, #184	@ 0xb8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	4000a400 	.word	0x4000a400
 8002110:	40021000 	.word	0x40021000
 8002114:	42020c00 	.word	0x42020c00

08002118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800211c:	bf00      	nop
 800211e:	e7fd      	b.n	800211c <NMI_Handler+0x4>

08002120 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002124:	bf00      	nop
 8002126:	e7fd      	b.n	8002124 <HardFault_Handler+0x4>

08002128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <MemManage_Handler+0x4>

08002130 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002134:	bf00      	nop
 8002136:	e7fd      	b.n	8002134 <BusFault_Handler+0x4>

08002138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800213c:	bf00      	nop
 800213e:	e7fd      	b.n	800213c <UsageFault_Handler+0x4>

08002140 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800216e:	f000 f969 	bl	8002444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}

08002176 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800217a:	2000      	movs	r0, #0
 800217c:	f000 f8f6 	bl	800236c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}

08002184 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002188:	4802      	ldr	r0, [pc, #8]	@ (8002194 <FDCAN1_IT0_IRQHandler+0x10>)
 800218a:	f000 feeb 	bl	8002f64 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	2000047c 	.word	0x2000047c

08002198 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800219c:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <SystemInit+0x20>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a2:	4a05      	ldr	r2, [pc, #20]	@ (80021b8 <SystemInit+0x20>)
 80021a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80021c2:	4b4f      	ldr	r3, [pc, #316]	@ (8002300 <SystemCoreClockUpdate+0x144>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d107      	bne.n	80021de <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80021ce:	4b4c      	ldr	r3, [pc, #304]	@ (8002300 <SystemCoreClockUpdate+0x144>)
 80021d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	e005      	b.n	80021ea <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80021de:	4b48      	ldr	r3, [pc, #288]	@ (8002300 <SystemCoreClockUpdate+0x144>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80021ea:	4a46      	ldr	r2, [pc, #280]	@ (8002304 <SystemCoreClockUpdate+0x148>)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f2:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021f4:	4b42      	ldr	r3, [pc, #264]	@ (8002300 <SystemCoreClockUpdate+0x144>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 030c 	and.w	r3, r3, #12
 80021fc:	2b0c      	cmp	r3, #12
 80021fe:	d866      	bhi.n	80022ce <SystemCoreClockUpdate+0x112>
 8002200:	a201      	add	r2, pc, #4	@ (adr r2, 8002208 <SystemCoreClockUpdate+0x4c>)
 8002202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002206:	bf00      	nop
 8002208:	0800223d 	.word	0x0800223d
 800220c:	080022cf 	.word	0x080022cf
 8002210:	080022cf 	.word	0x080022cf
 8002214:	080022cf 	.word	0x080022cf
 8002218:	08002245 	.word	0x08002245
 800221c:	080022cf 	.word	0x080022cf
 8002220:	080022cf 	.word	0x080022cf
 8002224:	080022cf 	.word	0x080022cf
 8002228:	0800224d 	.word	0x0800224d
 800222c:	080022cf 	.word	0x080022cf
 8002230:	080022cf 	.word	0x080022cf
 8002234:	080022cf 	.word	0x080022cf
 8002238:	08002255 	.word	0x08002255
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800223c:	4a32      	ldr	r2, [pc, #200]	@ (8002308 <SystemCoreClockUpdate+0x14c>)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	6013      	str	r3, [r2, #0]
      break;
 8002242:	e048      	b.n	80022d6 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002244:	4b30      	ldr	r3, [pc, #192]	@ (8002308 <SystemCoreClockUpdate+0x14c>)
 8002246:	4a31      	ldr	r2, [pc, #196]	@ (800230c <SystemCoreClockUpdate+0x150>)
 8002248:	601a      	str	r2, [r3, #0]
      break;
 800224a:	e044      	b.n	80022d6 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800224c:	4b2e      	ldr	r3, [pc, #184]	@ (8002308 <SystemCoreClockUpdate+0x14c>)
 800224e:	4a30      	ldr	r2, [pc, #192]	@ (8002310 <SystemCoreClockUpdate+0x154>)
 8002250:	601a      	str	r2, [r3, #0]
      break;
 8002252:	e040      	b.n	80022d6 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002254:	4b2a      	ldr	r3, [pc, #168]	@ (8002300 <SystemCoreClockUpdate+0x144>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800225e:	4b28      	ldr	r3, [pc, #160]	@ (8002300 <SystemCoreClockUpdate+0x144>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	091b      	lsrs	r3, r3, #4
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	3301      	adds	r3, #1
 800226a:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d003      	beq.n	800227a <SystemCoreClockUpdate+0xbe>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b03      	cmp	r3, #3
 8002276:	d006      	beq.n	8002286 <SystemCoreClockUpdate+0xca>
 8002278:	e00b      	b.n	8002292 <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800227a:	4a24      	ldr	r2, [pc, #144]	@ (800230c <SystemCoreClockUpdate+0x150>)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002282:	613b      	str	r3, [r7, #16]
          break;
 8002284:	e00b      	b.n	800229e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8002286:	4a22      	ldr	r2, [pc, #136]	@ (8002310 <SystemCoreClockUpdate+0x154>)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	fbb2 f3f3 	udiv	r3, r2, r3
 800228e:	613b      	str	r3, [r7, #16]
          break;
 8002290:	e005      	b.n	800229e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	fbb2 f3f3 	udiv	r3, r2, r3
 800229a:	613b      	str	r3, [r7, #16]
          break;
 800229c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800229e:	4b18      	ldr	r3, [pc, #96]	@ (8002300 <SystemCoreClockUpdate+0x144>)
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	0a1b      	lsrs	r3, r3, #8
 80022a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	fb02 f303 	mul.w	r3, r2, r3
 80022ae:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80022b0:	4b13      	ldr	r3, [pc, #76]	@ (8002300 <SystemCoreClockUpdate+0x144>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	0e5b      	lsrs	r3, r3, #25
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	3301      	adds	r3, #1
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c8:	4a0f      	ldr	r2, [pc, #60]	@ (8002308 <SystemCoreClockUpdate+0x14c>)
 80022ca:	6013      	str	r3, [r2, #0]
      break;
 80022cc:	e003      	b.n	80022d6 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80022ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002308 <SystemCoreClockUpdate+0x14c>)
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	6013      	str	r3, [r2, #0]
      break;
 80022d4:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80022d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002300 <SystemCoreClockUpdate+0x144>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	091b      	lsrs	r3, r3, #4
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002314 <SystemCoreClockUpdate+0x158>)
 80022e2:	5cd3      	ldrb	r3, [r2, r3]
 80022e4:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80022e6:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <SystemCoreClockUpdate+0x14c>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
 80022f0:	4a05      	ldr	r2, [pc, #20]	@ (8002308 <SystemCoreClockUpdate+0x14c>)
 80022f2:	6013      	str	r3, [r2, #0]
}
 80022f4:	bf00      	nop
 80022f6:	371c      	adds	r7, #28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	40021000 	.word	0x40021000
 8002304:	0800535c 	.word	0x0800535c
 8002308:	20000000 	.word	0x20000000
 800230c:	00f42400 	.word	0x00f42400
 8002310:	007a1200 	.word	0x007a1200
 8002314:	0800534c 	.word	0x0800534c

08002318 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002318:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002350 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800231c:	f7ff ff3c 	bl	8002198 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002320:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002322:	e003      	b.n	800232c <LoopCopyDataInit>

08002324 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002324:	4b0b      	ldr	r3, [pc, #44]	@ (8002354 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002326:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002328:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800232a:	3104      	adds	r1, #4

0800232c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800232c:	480a      	ldr	r0, [pc, #40]	@ (8002358 <LoopForever+0xa>)
	ldr	r3, =_edata
 800232e:	4b0b      	ldr	r3, [pc, #44]	@ (800235c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002330:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002332:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002334:	d3f6      	bcc.n	8002324 <CopyDataInit>
	ldr	r2, =_sbss
 8002336:	4a0a      	ldr	r2, [pc, #40]	@ (8002360 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002338:	e002      	b.n	8002340 <LoopFillZerobss>

0800233a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800233a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800233c:	f842 3b04 	str.w	r3, [r2], #4

08002340 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002340:	4b08      	ldr	r3, [pc, #32]	@ (8002364 <LoopForever+0x16>)
	cmp	r2, r3
 8002342:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002344:	d3f9      	bcc.n	800233a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002346:	f002 ff61 	bl	800520c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800234a:	f7ff fd1d 	bl	8001d88 <main>

0800234e <LoopForever>:

LoopForever:
    b LoopForever
 800234e:	e7fe      	b.n	800234e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002350:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8002354:	080053b4 	.word	0x080053b4
	ldr	r0, =_sdata
 8002358:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800235c:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8002360:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8002364:	200006a0 	.word	0x200006a0

08002368 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002368:	e7fe      	b.n	8002368 <ADC1_2_IRQHandler>
	...

0800236c <BSP_PB_IRQHandler>:
  *   This parameter should be:
  *     @arg BUTTON_USER
  * @retval None.
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002376:	79fa      	ldrb	r2, [r7, #7]
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4a04      	ldr	r2, [pc, #16]	@ (8002394 <BSP_PB_IRQHandler+0x28>)
 8002382:	4413      	add	r3, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f000 f98d 	bl	80026a4 <HAL_EXTI_IRQHandler>
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000550 	.word	0x20000550

08002398 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80023a2:	2004      	movs	r0, #4
 80023a4:	f000 f93e 	bl	8002624 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80023a8:	f7ff ff08 	bl	80021bc <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023ac:	2007      	movs	r0, #7
 80023ae:	f000 f80d 	bl	80023cc <HAL_InitTick>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	71fb      	strb	r3, [r7, #7]
 80023bc:	e001      	b.n	80023c2 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023be:	f7ff fe1f 	bl	8002000 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023c2:	79fb      	ldrb	r3, [r7, #7]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023d8:	4b17      	ldr	r3, [pc, #92]	@ (8002438 <HAL_InitTick+0x6c>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d023      	beq.n	8002428 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023e0:	4b16      	ldr	r3, [pc, #88]	@ (800243c <HAL_InitTick+0x70>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b14      	ldr	r3, [pc, #80]	@ (8002438 <HAL_InitTick+0x6c>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	4619      	mov	r1, r3
 80023ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80023f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 f947 	bl	800268a <HAL_SYSTICK_Config>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10f      	bne.n	8002422 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b07      	cmp	r3, #7
 8002406:	d809      	bhi.n	800241c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002408:	2200      	movs	r2, #0
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	f04f 30ff 	mov.w	r0, #4294967295
 8002410:	f000 f913 	bl	800263a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002414:	4a0a      	ldr	r2, [pc, #40]	@ (8002440 <HAL_InitTick+0x74>)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	e007      	b.n	800242c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
 8002420:	e004      	b.n	800242c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
 8002426:	e001      	b.n	800242c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800242c:	7bfb      	ldrb	r3, [r7, #15]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000008 	.word	0x20000008
 800243c:	20000000 	.word	0x20000000
 8002440:	20000004 	.word	0x20000004

08002444 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002448:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <HAL_IncTick+0x20>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <HAL_IncTick+0x24>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4413      	add	r3, r2
 8002454:	4a04      	ldr	r2, [pc, #16]	@ (8002468 <HAL_IncTick+0x24>)
 8002456:	6013      	str	r3, [r2, #0]
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000008 	.word	0x20000008
 8002468:	2000055c 	.word	0x2000055c

0800246c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return uwTick;
 8002470:	4b03      	ldr	r3, [pc, #12]	@ (8002480 <HAL_GetTick+0x14>)
 8002472:	681b      	ldr	r3, [r3, #0]
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	2000055c 	.word	0x2000055c

08002484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002494:	4b0c      	ldr	r3, [pc, #48]	@ (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024a0:	4013      	ands	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024b6:	4a04      	ldr	r2, [pc, #16]	@ (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	60d3      	str	r3, [r2, #12]
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d0:	4b04      	ldr	r3, [pc, #16]	@ (80024e4 <__NVIC_GetPriorityGrouping+0x18>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	0a1b      	lsrs	r3, r3, #8
 80024d6:	f003 0307 	and.w	r3, r3, #7
}
 80024da:	4618      	mov	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	db0b      	blt.n	8002512 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	f003 021f 	and.w	r2, r3, #31
 8002500:	4907      	ldr	r1, [pc, #28]	@ (8002520 <__NVIC_EnableIRQ+0x38>)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	2001      	movs	r0, #1
 800250a:	fa00 f202 	lsl.w	r2, r0, r2
 800250e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000e100 	.word	0xe000e100

08002524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	6039      	str	r1, [r7, #0]
 800252e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002534:	2b00      	cmp	r3, #0
 8002536:	db0a      	blt.n	800254e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	b2da      	uxtb	r2, r3
 800253c:	490c      	ldr	r1, [pc, #48]	@ (8002570 <__NVIC_SetPriority+0x4c>)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	0152      	lsls	r2, r2, #5
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	440b      	add	r3, r1
 8002548:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800254c:	e00a      	b.n	8002564 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4908      	ldr	r1, [pc, #32]	@ (8002574 <__NVIC_SetPriority+0x50>)
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	3b04      	subs	r3, #4
 800255c:	0152      	lsls	r2, r2, #5
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	440b      	add	r3, r1
 8002562:	761a      	strb	r2, [r3, #24]
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000e100 	.word	0xe000e100
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002578:	b480      	push	{r7}
 800257a:	b089      	sub	sp, #36	@ 0x24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f1c3 0307 	rsb	r3, r3, #7
 8002592:	2b03      	cmp	r3, #3
 8002594:	bf28      	it	cs
 8002596:	2303      	movcs	r3, #3
 8002598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3303      	adds	r3, #3
 800259e:	2b06      	cmp	r3, #6
 80025a0:	d902      	bls.n	80025a8 <NVIC_EncodePriority+0x30>
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3b04      	subs	r3, #4
 80025a6:	e000      	b.n	80025aa <NVIC_EncodePriority+0x32>
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ac:	f04f 32ff 	mov.w	r2, #4294967295
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43da      	mvns	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	401a      	ands	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c0:	f04f 31ff 	mov.w	r1, #4294967295
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ca:	43d9      	mvns	r1, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d0:	4313      	orrs	r3, r2
         );
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3724      	adds	r7, #36	@ 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025f0:	d301      	bcc.n	80025f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025f2:	2301      	movs	r3, #1
 80025f4:	e00f      	b.n	8002616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002620 <SysTick_Config+0x40>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025fe:	2107      	movs	r1, #7
 8002600:	f04f 30ff 	mov.w	r0, #4294967295
 8002604:	f7ff ff8e 	bl	8002524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002608:	4b05      	ldr	r3, [pc, #20]	@ (8002620 <SysTick_Config+0x40>)
 800260a:	2200      	movs	r2, #0
 800260c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800260e:	4b04      	ldr	r3, [pc, #16]	@ (8002620 <SysTick_Config+0x40>)
 8002610:	2207      	movs	r2, #7
 8002612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	e000e010 	.word	0xe000e010

08002624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff ff29 	bl	8002484 <__NVIC_SetPriorityGrouping>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b086      	sub	sp, #24
 800263e:	af00      	add	r7, sp, #0
 8002640:	4603      	mov	r3, r0
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]
 8002646:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002648:	f7ff ff40 	bl	80024cc <__NVIC_GetPriorityGrouping>
 800264c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	6978      	ldr	r0, [r7, #20]
 8002654:	f7ff ff90 	bl	8002578 <NVIC_EncodePriority>
 8002658:	4602      	mov	r2, r0
 800265a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff5f 	bl	8002524 <__NVIC_SetPriority>
}
 8002666:	bf00      	nop
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff33 	bl	80024e8 <__NVIC_EnableIRQ>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff ffa4 	bl	80025e0 <SysTick_Config>
 8002698:	4603      	mov	r3, r0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	0c1b      	lsrs	r3, r3, #16
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 031f 	and.w	r3, r3, #31
 80026c0:	2201      	movs	r2, #1
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	4b17      	ldr	r3, [pc, #92]	@ (800272c <HAL_EXTI_IRQHandler+0x88>)
 80026ce:	4413      	add	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4013      	ands	r3, r2
 80026da:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d009      	beq.n	80026f6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->RisingCallback != NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d002      	beq.n	80026f6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	015a      	lsls	r2, r3, #5
 80026fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002730 <HAL_EXTI_IRQHandler+0x8c>)
 80026fc:	4413      	add	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4013      	ands	r3, r2
 8002708:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d009      	beq.n	8002724 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->FallingCallback != NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	4798      	blx	r3
    }
  }
}
 8002724:	bf00      	nop
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	4002f40c 	.word	0x4002f40c
 8002730:	4002f410 	.word	0x4002f410

08002734 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e142      	b.n	80029cc <HAL_FDCAN_Init+0x298>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d106      	bne.n	8002760 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff fc74 	bl	8002048 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699a      	ldr	r2, [r3, #24]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0210 	bic.w	r2, r2, #16
 800276e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002770:	f7ff fe7c 	bl	800246c <HAL_GetTick>
 8002774:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002776:	e012      	b.n	800279e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002778:	f7ff fe78 	bl	800246c <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b0a      	cmp	r3, #10
 8002784:	d90b      	bls.n	800279e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800278a:	f043 0201 	orr.w	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2203      	movs	r2, #3
 8002796:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e116      	b.n	80029cc <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d0e5      	beq.n	8002778 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027bc:	f7ff fe56 	bl	800246c <HAL_GetTick>
 80027c0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80027c2:	e012      	b.n	80027ea <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80027c4:	f7ff fe52 	bl	800246c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b0a      	cmp	r3, #10
 80027d0:	d90b      	bls.n	80027ea <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027d6:	f043 0201 	orr.w	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2203      	movs	r2, #3
 80027e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e0f0      	b.n	80029cc <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0e5      	beq.n	80027c4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699a      	ldr	r2, [r3, #24]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0202 	orr.w	r2, r2, #2
 8002806:	619a      	str	r2, [r3, #24]

  /* Configure Clock divider */
  FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002808:	4a72      	ldr	r2, [pc, #456]	@ (80029d4 <HAL_FDCAN_Init+0x2a0>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	6013      	str	r3, [r2, #0]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	7c1b      	ldrb	r3, [r3, #16]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d108      	bne.n	800282a <HAL_FDCAN_Init+0xf6>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699a      	ldr	r2, [r3, #24]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002826:	619a      	str	r2, [r3, #24]
 8002828:	e007      	b.n	800283a <HAL_FDCAN_Init+0x106>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	699a      	ldr	r2, [r3, #24]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002838:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	7c5b      	ldrb	r3, [r3, #17]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d108      	bne.n	8002854 <HAL_FDCAN_Init+0x120>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699a      	ldr	r2, [r3, #24]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002850:	619a      	str	r2, [r3, #24]
 8002852:	e007      	b.n	8002864 <HAL_FDCAN_Init+0x130>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699a      	ldr	r2, [r3, #24]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002862:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	7c9b      	ldrb	r3, [r3, #18]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d108      	bne.n	800287e <HAL_FDCAN_Init+0x14a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699a      	ldr	r2, [r3, #24]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800287a:	619a      	str	r2, [r3, #24]
 800287c:	e007      	b.n	800288e <HAL_FDCAN_Init+0x15a>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699a      	ldr	r2, [r3, #24]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800288c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	699a      	ldr	r2, [r3, #24]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80028b2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691a      	ldr	r2, [r3, #16]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0210 	bic.w	r2, r2, #16
 80028c2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d108      	bne.n	80028de <HAL_FDCAN_Init+0x1aa>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699a      	ldr	r2, [r3, #24]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0204 	orr.w	r2, r2, #4
 80028da:	619a      	str	r2, [r3, #24]
 80028dc:	e02c      	b.n	8002938 <HAL_FDCAN_Init+0x204>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d028      	beq.n	8002938 <HAL_FDCAN_Init+0x204>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d01c      	beq.n	8002928 <HAL_FDCAN_Init+0x1f4>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	699a      	ldr	r2, [r3, #24]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80028fc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f042 0210 	orr.w	r2, r2, #16
 800290c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	2b03      	cmp	r3, #3
 8002914:	d110      	bne.n	8002938 <HAL_FDCAN_Init+0x204>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	699a      	ldr	r2, [r3, #24]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f042 0220 	orr.w	r2, r2, #32
 8002924:	619a      	str	r2, [r3, #24]
 8002926:	e007      	b.n	8002938 <HAL_FDCAN_Init+0x204>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699a      	ldr	r2, [r3, #24]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0220 	orr.w	r2, r2, #32
 8002936:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	3b01      	subs	r3, #1
 800293e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	3b01      	subs	r3, #1
 8002946:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002948:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002950:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	3b01      	subs	r3, #1
 800295a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002960:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002962:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800296c:	d115      	bne.n	800299a <HAL_FDCAN_Init+0x266>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002972:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002978:	3b01      	subs	r3, #1
 800297a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800297c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002982:	3b01      	subs	r3, #1
 8002984:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002986:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298e:	3b01      	subs	r3, #1
 8002990:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002996:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002998:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 fc73 	bl	800329c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	4000a500 	.word	0x4000a500

080029d8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80029e8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80029ea:	7dfb      	ldrb	r3, [r7, #23]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d002      	beq.n	80029f6 <HAL_FDCAN_ConfigFilter+0x1e>
 80029f0:	7dfb      	ldrb	r3, [r7, #23]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d13d      	bne.n	8002a72 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d119      	bne.n	8002a32 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002a0a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8002a12:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	e01d      	b.n	8002a6e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	075a      	lsls	r2, r3, #29
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	079a      	lsls	r2, r3, #30
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4413      	add	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	3304      	adds	r3, #4
 8002a66:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e006      	b.n	8002a80 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a76:	f043 0202 	orr.w	r2, r3, #2
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
  }
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	371c      	adds	r7, #28
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d110      	bne.n	8002ac2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699a      	ldr	r2, [r3, #24]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0201 	bic.w	r2, r2, #1
 8002ab6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	e006      	b.n	8002ad0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ac6:	f043 0204 	orr.w	r2, r3, #4
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
  }
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d12c      	bne.n	8002b4e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002afc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d007      	beq.n	8002b14 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b08:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e023      	b.n	8002b5c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002b1c:	0c1b      	lsrs	r3, r3, #16
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68b9      	ldr	r1, [r7, #8]
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 fc0c 	bl	8003348 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2101      	movs	r1, #1
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002b40:	2201      	movs	r2, #1
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	409a      	lsls	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e006      	b.n	8002b5c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b52:	f043 0208 	orr.w	r2, r3, #8
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
  }
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b08b      	sub	sp, #44	@ 0x2c
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002b7c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8002b7e:	7efb      	ldrb	r3, [r7, #27]
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	f040 80e8 	bne.w	8002d56 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b40      	cmp	r3, #64	@ 0x40
 8002b8a:	d137      	bne.n	8002bfc <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b94:	f003 030f 	and.w	r3, r3, #15
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d107      	bne.n	8002bac <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ba0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0db      	b.n	8002d64 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bbc:	d10a      	bne.n	8002bd4 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bce:	d101      	bne.n	8002bd4 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bdc:	0a1b      	lsrs	r3, r3, #8
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	4413      	add	r3, r2
 8002be6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8002bec:	69fa      	ldr	r2, [r7, #28]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bfa:	e036      	b.n	8002c6a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d107      	bne.n	8002c1c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c10:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0a3      	b.n	8002d64 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c2c:	d10a      	bne.n	8002c44 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c3e:	d101      	bne.n	8002c44 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002c40:	2301      	movs	r3, #1
 8002c42:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c4c:	0a1b      	lsrs	r3, r3, #8
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	4413      	add	r3, r2
 8002c56:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002c5c:	69fa      	ldr	r2, [r7, #28]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	440b      	add	r3, r1
 8002c68:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d107      	bne.n	8002c8e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	0c9b      	lsrs	r3, r3, #18
 8002c84:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	e005      	b.n	8002c9a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	0c1b      	lsrs	r3, r3, #16
 8002cc8:	f003 020f 	and.w	r2, r3, #15
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	0e1b      	lsrs	r3, r3, #24
 8002cee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	0fda      	lsrs	r2, r3, #31
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d02:	3304      	adds	r3, #4
 8002d04:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	623b      	str	r3, [r7, #32]
 8002d0e:	e00a      	b.n	8002d26 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	441a      	add	r2, r3
 8002d16:	6839      	ldr	r1, [r7, #0]
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	440b      	add	r3, r1
 8002d1c:	7812      	ldrb	r2, [r2, #0]
 8002d1e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	3301      	adds	r3, #1
 8002d24:	623b      	str	r3, [r7, #32]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	4a11      	ldr	r2, [pc, #68]	@ (8002d70 <HAL_FDCAN_GetRxMessage+0x20c>)
 8002d2c:	5cd3      	ldrb	r3, [r2, r3]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d3ec      	bcc.n	8002d10 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b40      	cmp	r3, #64	@ 0x40
 8002d3a:	d105      	bne.n	8002d48 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	69fa      	ldr	r2, [r7, #28]
 8002d42:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8002d46:	e004      	b.n	8002d52 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	69fa      	ldr	r2, [r7, #28]
 8002d4e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e006      	b.n	8002d64 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d5a:	f043 0208 	orr.w	r2, r3, #8
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
  }
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	372c      	adds	r7, #44	@ 0x2c
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	0800539c 	.word	0x0800539c

08002d74 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002daa:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002dac:	7dfb      	ldrb	r3, [r7, #23]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d003      	beq.n	8002dba <HAL_FDCAN_ActivateNotification+0x22>
 8002db2:	7dfb      	ldrb	r3, [r7, #23]
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	f040 80c8 	bne.w	8002f4a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d004      	beq.n	8002dd6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d03b      	beq.n	8002e4e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d004      	beq.n	8002dea <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d031      	beq.n	8002e4e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d004      	beq.n	8002dfe <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d027      	beq.n	8002e4e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d004      	beq.n	8002e12 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d01d      	beq.n	8002e4e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d004      	beq.n	8002e26 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d013      	beq.n	8002e4e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d004      	beq.n	8002e3a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f003 0320 	and.w	r3, r3, #32
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00c      	beq.n	8002e5e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d107      	bne.n	8002e5e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f042 0201 	orr.w	r2, r2, #1
 8002e5c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d004      	beq.n	8002e72 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d13b      	bne.n	8002eea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d004      	beq.n	8002e86 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d131      	bne.n	8002eea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d004      	beq.n	8002e9a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d127      	bne.n	8002eea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d004      	beq.n	8002eae <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d11d      	bne.n	8002eea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d004      	beq.n	8002ec2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d113      	bne.n	8002eea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d004      	beq.n	8002ed6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d109      	bne.n	8002eea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00c      	beq.n	8002efa <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d007      	beq.n	8002efa <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0202 	orr.w	r2, r2, #2
 8002ef8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d009      	beq.n	8002f18 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d009      	beq.n	8002f36 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	e006      	b.n	8002f58 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f4e:	f043 0202 	orr.w	r2, r3, #2
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
  }
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08c      	sub	sp, #48	@ 0x30
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f72:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f80:	4013      	ands	r3, r2
 8002f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f98:	4013      	ands	r3, r2
 8002f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fa2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fba:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8002fbe:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc6:	6a3a      	ldr	r2, [r7, #32]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fd2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002fd6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fde:	69fa      	ldr	r2, [r7, #28]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fea:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ff2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	099b      	lsrs	r3, r3, #6
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00c      	beq.n	800301a <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	099b      	lsrs	r3, r3, #6
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d006      	beq.n	800301a <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2240      	movs	r2, #64	@ 0x40
 8003012:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f922 	bl	800325e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	0a1b      	lsrs	r3, r3, #8
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d01a      	beq.n	800305c <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d014      	beq.n	800305c <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800303a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4013      	ands	r3, r2
 8003048:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003052:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003054:	6939      	ldr	r1, [r7, #16]
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f8e2 	bl	8003220 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800305c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800305e:	2b00      	cmp	r3, #0
 8003060:	d007      	beq.n	8003072 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003068:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800306a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f8ac 	bl	80031ca <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800307e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003080:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7fe fe5e 	bl	8001d44 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308a:	2b00      	cmp	r3, #0
 800308c:	d007      	beq.n	800309e <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003094:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003096:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f8a1 	bl	80031e0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	0a5b      	lsrs	r3, r3, #9
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00d      	beq.n	80030c6 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	0a5b      	lsrs	r3, r3, #9
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d007      	beq.n	80030c6 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030be:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f898 	bl	80031f6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	09db      	lsrs	r3, r3, #7
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d019      	beq.n	8003106 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	09db      	lsrs	r3, r3, #7
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d013      	beq.n	8003106 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80030e6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	4013      	ands	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2280      	movs	r2, #128	@ 0x80
 80030fc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80030fe:	68f9      	ldr	r1, [r7, #12]
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f882 	bl	800320a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	0b5b      	lsrs	r3, r3, #13
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00d      	beq.n	800312e <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	0b5b      	lsrs	r3, r3, #13
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d007      	beq.n	800312e <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003126:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f884 	bl	8003236 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	0bdb      	lsrs	r3, r3, #15
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00d      	beq.n	8003156 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	0bdb      	lsrs	r3, r3, #15
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d007      	beq.n	8003156 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800314e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f87a 	bl	800324a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	0b9b      	lsrs	r3, r3, #14
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d010      	beq.n	8003184 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	0b9b      	lsrs	r3, r3, #14
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00a      	beq.n	8003184 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003176:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800317c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d007      	beq.n	800319a <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003192:	69f9      	ldr	r1, [r7, #28]
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f876 	bl	8003286 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d009      	beq.n	80031b4 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6a3a      	ldr	r2, [r7, #32]
 80031a6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f858 	bl	8003272 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80031c2:	bf00      	nop
 80031c4:	3730      	adds	r7, #48	@ 0x30
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80032a4:	4b27      	ldr	r3, [pc, #156]	@ (8003344 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80032a6:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032b6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032be:	041a      	lsls	r2, r3, #16
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032dc:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e4:	061a      	lsls	r2, r3, #24
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	e005      	b.n	800332a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	3304      	adds	r3, #4
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	429a      	cmp	r2, r3
 8003334:	d3f3      	bcc.n	800331e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003336:	bf00      	nop
 8003338:	bf00      	nop
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	4000ac00 	.word	0x4000ac00

08003348 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003348:	b480      	push	{r7}
 800334a:	b089      	sub	sp, #36	@ 0x24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
 8003354:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10a      	bne.n	8003374 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003366:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800336e:	4313      	orrs	r3, r2
 8003370:	61fb      	str	r3, [r7, #28]
 8003372:	e00a      	b.n	800338a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800337c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003382:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003384:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003388:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003394:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800339a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80033a0:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80033a8:	4313      	orrs	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	4613      	mov	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4413      	add	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	440b      	add	r3, r1
 80033bc:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	69fa      	ldr	r2, [r7, #28]
 80033c2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	3304      	adds	r3, #4
 80033c8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	3304      	adds	r3, #4
 80033d4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	e020      	b.n	800341e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	3303      	adds	r3, #3
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	4413      	add	r3, r2
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	3302      	adds	r3, #2
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	440b      	add	r3, r1
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80033f4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	3301      	adds	r3, #1
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	440b      	add	r3, r1
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003402:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	440a      	add	r2, r1
 800340a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800340c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	3304      	adds	r3, #4
 8003416:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	3304      	adds	r3, #4
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	4a06      	ldr	r2, [pc, #24]	@ (800343c <FDCAN_CopyMessageToRAM+0xf4>)
 8003424:	5cd3      	ldrb	r3, [r2, r3]
 8003426:	461a      	mov	r2, r3
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	4293      	cmp	r3, r2
 800342c:	d3d6      	bcc.n	80033dc <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800342e:	bf00      	nop
 8003430:	bf00      	nop
 8003432:	3724      	adds	r7, #36	@ 0x24
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	0800539c 	.word	0x0800539c

08003440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003440:	b480      	push	{r7}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800344e:	e158      	b.n	8003702 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	2101      	movs	r1, #1
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	fa01 f303 	lsl.w	r3, r1, r3
 800345c:	4013      	ands	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 814a 	beq.w	80036fc <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	2b01      	cmp	r3, #1
 8003472:	d005      	beq.n	8003480 <HAL_GPIO_Init+0x40>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d130      	bne.n	80034e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	2203      	movs	r2, #3
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4013      	ands	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034b6:	2201      	movs	r2, #1
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4013      	ands	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	f003 0201 	and.w	r2, r3, #1
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d017      	beq.n	800351e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	2203      	movs	r2, #3
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	43db      	mvns	r3, r3
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4013      	ands	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d123      	bne.n	8003572 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	08da      	lsrs	r2, r3, #3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3208      	adds	r2, #8
 8003532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003536:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	220f      	movs	r2, #15
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43db      	mvns	r3, r3
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4013      	ands	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	08da      	lsrs	r2, r3, #3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3208      	adds	r2, #8
 800356c:	6939      	ldr	r1, [r7, #16]
 800356e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	2203      	movs	r2, #3
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43db      	mvns	r3, r3
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 0203 	and.w	r2, r3, #3
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 80a4 	beq.w	80036fc <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80035b4:	4a5a      	ldr	r2, [pc, #360]	@ (8003720 <HAL_GPIO_Init+0x2e0>)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	089b      	lsrs	r3, r3, #2
 80035ba:	3318      	adds	r3, #24
 80035bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	220f      	movs	r2, #15
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4013      	ands	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a52      	ldr	r2, [pc, #328]	@ (8003724 <HAL_GPIO_Init+0x2e4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d025      	beq.n	800362c <HAL_GPIO_Init+0x1ec>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a51      	ldr	r2, [pc, #324]	@ (8003728 <HAL_GPIO_Init+0x2e8>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d01f      	beq.n	8003628 <HAL_GPIO_Init+0x1e8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a50      	ldr	r2, [pc, #320]	@ (800372c <HAL_GPIO_Init+0x2ec>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d019      	beq.n	8003624 <HAL_GPIO_Init+0x1e4>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a4f      	ldr	r2, [pc, #316]	@ (8003730 <HAL_GPIO_Init+0x2f0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d013      	beq.n	8003620 <HAL_GPIO_Init+0x1e0>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a4e      	ldr	r2, [pc, #312]	@ (8003734 <HAL_GPIO_Init+0x2f4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00d      	beq.n	800361c <HAL_GPIO_Init+0x1dc>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a4d      	ldr	r2, [pc, #308]	@ (8003738 <HAL_GPIO_Init+0x2f8>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d007      	beq.n	8003618 <HAL_GPIO_Init+0x1d8>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a4c      	ldr	r2, [pc, #304]	@ (800373c <HAL_GPIO_Init+0x2fc>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d101      	bne.n	8003614 <HAL_GPIO_Init+0x1d4>
 8003610:	2306      	movs	r3, #6
 8003612:	e00c      	b.n	800362e <HAL_GPIO_Init+0x1ee>
 8003614:	2307      	movs	r3, #7
 8003616:	e00a      	b.n	800362e <HAL_GPIO_Init+0x1ee>
 8003618:	2305      	movs	r3, #5
 800361a:	e008      	b.n	800362e <HAL_GPIO_Init+0x1ee>
 800361c:	2304      	movs	r3, #4
 800361e:	e006      	b.n	800362e <HAL_GPIO_Init+0x1ee>
 8003620:	2303      	movs	r3, #3
 8003622:	e004      	b.n	800362e <HAL_GPIO_Init+0x1ee>
 8003624:	2302      	movs	r3, #2
 8003626:	e002      	b.n	800362e <HAL_GPIO_Init+0x1ee>
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <HAL_GPIO_Init+0x1ee>
 800362c:	2300      	movs	r3, #0
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	f002 0203 	and.w	r2, r2, #3
 8003634:	00d2      	lsls	r2, r2, #3
 8003636:	4093      	lsls	r3, r2
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800363e:	4938      	ldr	r1, [pc, #224]	@ (8003720 <HAL_GPIO_Init+0x2e0>)
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	089b      	lsrs	r3, r3, #2
 8003644:	3318      	adds	r3, #24
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800364c:	4b34      	ldr	r3, [pc, #208]	@ (8003720 <HAL_GPIO_Init+0x2e0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	43db      	mvns	r3, r3
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4013      	ands	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003670:	4a2b      	ldr	r2, [pc, #172]	@ (8003720 <HAL_GPIO_Init+0x2e0>)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003676:	4b2a      	ldr	r3, [pc, #168]	@ (8003720 <HAL_GPIO_Init+0x2e0>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	43db      	mvns	r3, r3
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4013      	ands	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4313      	orrs	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800369a:	4a21      	ldr	r2, [pc, #132]	@ (8003720 <HAL_GPIO_Init+0x2e0>)
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80036a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003720 <HAL_GPIO_Init+0x2e0>)
 80036a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	43db      	mvns	r3, r3
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4013      	ands	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036c6:	4a16      	ldr	r2, [pc, #88]	@ (8003720 <HAL_GPIO_Init+0x2e0>)
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 80036ce:	4b14      	ldr	r3, [pc, #80]	@ (8003720 <HAL_GPIO_Init+0x2e0>)
 80036d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	43db      	mvns	r3, r3
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4013      	ands	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003720 <HAL_GPIO_Init+0x2e0>)
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	3301      	adds	r3, #1
 8003700:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	fa22 f303 	lsr.w	r3, r2, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	f47f ae9f 	bne.w	8003450 <HAL_GPIO_Init+0x10>
  }
}
 8003712:	bf00      	nop
 8003714:	bf00      	nop
 8003716:	371c      	adds	r7, #28
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	4002f400 	.word	0x4002f400
 8003724:	42020000 	.word	0x42020000
 8003728:	42020400 	.word	0x42020400
 800372c:	42020800 	.word	0x42020800
 8003730:	42020c00 	.word	0x42020c00
 8003734:	42021000 	.word	0x42021000
 8003738:	42021400 	.word	0x42021400
 800373c:	42021800 	.word	0x42021800

08003740 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003744:	4b04      	ldr	r3, [pc, #16]	@ (8003758 <HAL_PWREx_GetVoltageRange+0x18>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800374c:	4618      	mov	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40007000 	.word	0x40007000

0800375c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8003764:	4b27      	ldr	r3, [pc, #156]	@ (8003804 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800376c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800376e:	f000 f861 	bl	8003834 <HAL_PWREx_SMPS_GetEffectiveMode>
 8003772:	4603      	mov	r3, r0
 8003774:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003778:	d101      	bne.n	800377e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e03e      	b.n	80037fc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800377e:	4b21      	ldr	r3, [pc, #132]	@ (8003804 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003786:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800378a:	d101      	bne.n	8003790 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e035      	b.n	80037fc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	429a      	cmp	r2, r3
 8003796:	d101      	bne.n	800379c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	e02f      	b.n	80037fc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800379c:	4b19      	ldr	r3, [pc, #100]	@ (8003804 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80037a4:	4917      	ldr	r1, [pc, #92]	@ (8003804 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80037ac:	4b16      	ldr	r3, [pc, #88]	@ (8003808 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	095b      	lsrs	r3, r3, #5
 80037b2:	4a16      	ldr	r2, [pc, #88]	@ (800380c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80037b4:	fba2 2303 	umull	r2, r3, r2, r3
 80037b8:	09db      	lsrs	r3, r3, #7
 80037ba:	2232      	movs	r2, #50	@ 0x32
 80037bc:	fb02 f303 	mul.w	r3, r2, r3
 80037c0:	4a13      	ldr	r2, [pc, #76]	@ (8003810 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80037c2:	fba2 2303 	umull	r2, r3, r2, r3
 80037c6:	08db      	lsrs	r3, r3, #3
 80037c8:	3301      	adds	r3, #1
 80037ca:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037cc:	e002      	b.n	80037d4 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	3b01      	subs	r3, #1
 80037d2:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003804 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037e0:	d102      	bne.n	80037e8 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1f2      	bne.n	80037ce <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037e8:	4b06      	ldr	r3, [pc, #24]	@ (8003804 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037f4:	d101      	bne.n	80037fa <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e000      	b.n	80037fc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40007000 	.word	0x40007000
 8003808:	20000000 	.word	0x20000000
 800380c:	0a7c5ac5 	.word	0x0a7c5ac5
 8003810:	cccccccd 	.word	0xcccccccd

08003814 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003818:	4b05      	ldr	r3, [pc, #20]	@ (8003830 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	4a04      	ldr	r2, [pc, #16]	@ (8003830 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800381e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003822:	6093      	str	r3, [r2, #8]
}
 8003824:	bf00      	nop
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40007000 	.word	0x40007000

08003834 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800383a:	4b0f      	ldr	r3, [pc, #60]	@ (8003878 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800384a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800384e:	607b      	str	r3, [r7, #4]
 8003850:	e00a      	b.n	8003868 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d103      	bne.n	8003864 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 800385c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003860:	607b      	str	r3, [r7, #4]
 8003862:	e001      	b.n	8003868 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003864:	2300      	movs	r3, #0
 8003866:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8003868:	687b      	ldr	r3, [r7, #4]
}
 800386a:	4618      	mov	r0, r3
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40007000 	.word	0x40007000

0800387c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d102      	bne.n	8003890 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	f000 bcc2 	b.w	8004214 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003890:	4b99      	ldr	r3, [pc, #612]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 030c 	and.w	r3, r3, #12
 8003898:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800389a:	4b97      	ldr	r3, [pc, #604]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80e9 	beq.w	8003a84 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d006      	beq.n	80038c6 <HAL_RCC_OscConfig+0x4a>
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	2b0c      	cmp	r3, #12
 80038bc:	f040 8083 	bne.w	80039c6 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d17f      	bne.n	80039c6 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038c6:	4b8c      	ldr	r3, [pc, #560]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d006      	beq.n	80038e0 <HAL_RCC_OscConfig+0x64>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d102      	bne.n	80038e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	f000 bc9a 	b.w	8004214 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038e4:	4b84      	ldr	r3, [pc, #528]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d004      	beq.n	80038fa <HAL_RCC_OscConfig+0x7e>
 80038f0:	4b81      	ldr	r3, [pc, #516]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038f8:	e005      	b.n	8003906 <HAL_RCC_OscConfig+0x8a>
 80038fa:	4b7f      	ldr	r3, [pc, #508]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 80038fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003900:	091b      	lsrs	r3, r3, #4
 8003902:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003906:	4293      	cmp	r3, r2
 8003908:	d224      	bcs.n	8003954 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390e:	4618      	mov	r0, r3
 8003910:	f000 fe74 	bl	80045fc <RCC_SetFlashLatencyFromMSIRange>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	f000 bc7a 	b.w	8004214 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003920:	4b75      	ldr	r3, [pc, #468]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a74      	ldr	r2, [pc, #464]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003926:	f043 0308 	orr.w	r3, r3, #8
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	4b72      	ldr	r3, [pc, #456]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003938:	496f      	ldr	r1, [pc, #444]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800393e:	4b6e      	ldr	r3, [pc, #440]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	021b      	lsls	r3, r3, #8
 800394c:	496a      	ldr	r1, [pc, #424]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 800394e:	4313      	orrs	r3, r2
 8003950:	604b      	str	r3, [r1, #4]
 8003952:	e026      	b.n	80039a2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003954:	4b68      	ldr	r3, [pc, #416]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a67      	ldr	r2, [pc, #412]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 800395a:	f043 0308 	orr.w	r3, r3, #8
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	4b65      	ldr	r3, [pc, #404]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396c:	4962      	ldr	r1, [pc, #392]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003972:	4b61      	ldr	r3, [pc, #388]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	021b      	lsls	r3, r3, #8
 8003980:	495d      	ldr	r1, [pc, #372]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003982:	4313      	orrs	r3, r2
 8003984:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10a      	bne.n	80039a2 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003990:	4618      	mov	r0, r3
 8003992:	f000 fe33 	bl	80045fc <RCC_SetFlashLatencyFromMSIRange>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	f000 bc39 	b.w	8004214 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80039a2:	f000 fe17 	bl	80045d4 <HAL_RCC_GetHCLKFreq>
 80039a6:	4603      	mov	r3, r0
 80039a8:	4a54      	ldr	r2, [pc, #336]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 80039aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039ac:	4b54      	ldr	r3, [pc, #336]	@ (8003b00 <HAL_RCC_OscConfig+0x284>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe fd0b 	bl	80023cc <HAL_InitTick>
 80039b6:	4603      	mov	r3, r0
 80039b8:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d060      	beq.n	8003a82 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
 80039c2:	f000 bc27 	b.w	8004214 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d039      	beq.n	8003a42 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039ce:	4b4a      	ldr	r3, [pc, #296]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a49      	ldr	r2, [pc, #292]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039da:	f7fe fd47 	bl	800246c <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039e0:	e00f      	b.n	8003a02 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039e2:	f7fe fd43 	bl	800246c <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d908      	bls.n	8003a02 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039f0:	4b41      	ldr	r3, [pc, #260]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d102      	bne.n	8003a02 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	f000 bc09 	b.w	8004214 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a02:	4b3d      	ldr	r3, [pc, #244]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0e9      	beq.n	80039e2 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a0e:	4b3a      	ldr	r3, [pc, #232]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a39      	ldr	r2, [pc, #228]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003a14:	f043 0308 	orr.w	r3, r3, #8
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	4b37      	ldr	r3, [pc, #220]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a26:	4934      	ldr	r1, [pc, #208]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a2c:	4b32      	ldr	r3, [pc, #200]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	021b      	lsls	r3, r3, #8
 8003a3a:	492f      	ldr	r1, [pc, #188]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	604b      	str	r3, [r1, #4]
 8003a40:	e020      	b.n	8003a84 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a42:	4b2d      	ldr	r3, [pc, #180]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a2c      	ldr	r2, [pc, #176]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a4e:	f7fe fd0d 	bl	800246c <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a54:	e00e      	b.n	8003a74 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a56:	f7fe fd09 	bl	800246c <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d907      	bls.n	8003a74 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a64:	4b24      	ldr	r3, [pc, #144]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e3cf      	b.n	8004214 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a74:	4b20      	ldr	r3, [pc, #128]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1ea      	bne.n	8003a56 <HAL_RCC_OscConfig+0x1da>
 8003a80:	e000      	b.n	8003a84 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d07e      	beq.n	8003b8e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d005      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x226>
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	2b0c      	cmp	r3, #12
 8003a9a:	d10e      	bne.n	8003aba <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d10b      	bne.n	8003aba <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa2:	4b15      	ldr	r3, [pc, #84]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d06e      	beq.n	8003b8c <HAL_RCC_OscConfig+0x310>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d16a      	bne.n	8003b8c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e3ac      	b.n	8004214 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ac2:	d106      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x256>
 8003ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a0b      	ldr	r2, [pc, #44]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003aca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	e024      	b.n	8003b1c <HAL_RCC_OscConfig+0x2a0>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ada:	d113      	bne.n	8003b04 <HAL_RCC_OscConfig+0x288>
 8003adc:	4b06      	ldr	r3, [pc, #24]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a05      	ldr	r2, [pc, #20]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003ae2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	4b03      	ldr	r3, [pc, #12]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a02      	ldr	r2, [pc, #8]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	e012      	b.n	8003b1c <HAL_RCC_OscConfig+0x2a0>
 8003af6:	bf00      	nop
 8003af8:	40021000 	.word	0x40021000
 8003afc:	20000000 	.word	0x20000000
 8003b00:	20000004 	.word	0x20000004
 8003b04:	4b8b      	ldr	r3, [pc, #556]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a8a      	ldr	r2, [pc, #552]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003b0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	4b88      	ldr	r3, [pc, #544]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a87      	ldr	r2, [pc, #540]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003b16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d019      	beq.n	8003b58 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fe fca2 	bl	800246c <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b2a:	e00e      	b.n	8003b4a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b2c:	f7fe fc9e 	bl	800246c <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b64      	cmp	r3, #100	@ 0x64
 8003b38:	d907      	bls.n	8003b4a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b3a:	4b7e      	ldr	r3, [pc, #504]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e364      	b.n	8004214 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b4a:	4b7a      	ldr	r3, [pc, #488]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0ea      	beq.n	8003b2c <HAL_RCC_OscConfig+0x2b0>
 8003b56:	e01a      	b.n	8003b8e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fe fc88 	bl	800246c <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b5e:	e00e      	b.n	8003b7e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b60:	f7fe fc84 	bl	800246c <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b64      	cmp	r3, #100	@ 0x64
 8003b6c:	d907      	bls.n	8003b7e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b6e:	4b71      	ldr	r3, [pc, #452]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e34a      	b.n	8004214 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b7e:	4b6d      	ldr	r3, [pc, #436]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1ea      	bne.n	8003b60 <HAL_RCC_OscConfig+0x2e4>
 8003b8a:	e000      	b.n	8003b8e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d06c      	beq.n	8003c74 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d005      	beq.n	8003bac <HAL_RCC_OscConfig+0x330>
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2b0c      	cmp	r3, #12
 8003ba4:	d119      	bne.n	8003bda <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d116      	bne.n	8003bda <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bac:	4b61      	ldr	r3, [pc, #388]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x348>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e327      	b.n	8004214 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc4:	4b5b      	ldr	r3, [pc, #364]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	061b      	lsls	r3, r3, #24
 8003bd2:	4958      	ldr	r1, [pc, #352]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bd8:	e04c      	b.n	8003c74 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d029      	beq.n	8003c36 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003be2:	4b54      	ldr	r3, [pc, #336]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a53      	ldr	r2, [pc, #332]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bee:	f7fe fc3d 	bl	800246c <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bf4:	e00e      	b.n	8003c14 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf6:	f7fe fc39 	bl	800246c <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d907      	bls.n	8003c14 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c04:	4b4b      	ldr	r3, [pc, #300]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e2ff      	b.n	8004214 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c14:	4b47      	ldr	r3, [pc, #284]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0ea      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c20:	4b44      	ldr	r3, [pc, #272]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	061b      	lsls	r3, r3, #24
 8003c2e:	4941      	ldr	r1, [pc, #260]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	604b      	str	r3, [r1, #4]
 8003c34:	e01e      	b.n	8003c74 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c36:	4b3f      	ldr	r3, [pc, #252]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a3e      	ldr	r2, [pc, #248]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003c3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c42:	f7fe fc13 	bl	800246c <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c48:	e00e      	b.n	8003c68 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c4a:	f7fe fc0f 	bl	800246c <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d907      	bls.n	8003c68 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c58:	4b36      	ldr	r3, [pc, #216]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e2d5      	b.n	8004214 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c68:	4b32      	ldr	r3, [pc, #200]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1ea      	bne.n	8003c4a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d062      	beq.n	8003d46 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d038      	beq.n	8003cfa <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d108      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003c90:	4b28      	ldr	r3, [pc, #160]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c96:	4a27      	ldr	r2, [pc, #156]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003c98:	f023 0310 	bic.w	r3, r3, #16
 8003c9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003ca0:	e007      	b.n	8003cb2 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003ca2:	4b24      	ldr	r3, [pc, #144]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ca8:	4a22      	ldr	r2, [pc, #136]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003caa:	f043 0310 	orr.w	r3, r3, #16
 8003cae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cb2:	4b20      	ldr	r3, [pc, #128]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cb8:	4a1e      	ldr	r2, [pc, #120]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003cba:	f043 0301 	orr.w	r3, r3, #1
 8003cbe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc2:	f7fe fbd3 	bl	800246c <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cc8:	e00f      	b.n	8003cea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cca:	f7fe fbcf 	bl	800246c <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b07      	cmp	r3, #7
 8003cd6:	d908      	bls.n	8003cea <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cd8:	4b16      	ldr	r3, [pc, #88]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e294      	b.n	8004214 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cea:	4b12      	ldr	r3, [pc, #72]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0e8      	beq.n	8003cca <HAL_RCC_OscConfig+0x44e>
 8003cf8:	e025      	b.n	8003d46 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d00:	4a0c      	ldr	r2, [pc, #48]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003d02:	f023 0301 	bic.w	r3, r3, #1
 8003d06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0a:	f7fe fbaf 	bl	800246c <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d10:	e012      	b.n	8003d38 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d12:	f7fe fbab 	bl	800246c <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b07      	cmp	r3, #7
 8003d1e:	d90b      	bls.n	8003d38 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d20:	4b04      	ldr	r3, [pc, #16]	@ (8003d34 <HAL_RCC_OscConfig+0x4b8>)
 8003d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d004      	beq.n	8003d38 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e270      	b.n	8004214 <HAL_RCC_OscConfig+0x998>
 8003d32:	bf00      	nop
 8003d34:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d38:	4ba8      	ldr	r3, [pc, #672]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1e5      	bne.n	8003d12 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 812d 	beq.w	8003fae <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d54:	2300      	movs	r3, #0
 8003d56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d58:	4ba0      	ldr	r3, [pc, #640]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10d      	bne.n	8003d80 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d64:	4b9d      	ldr	r3, [pc, #628]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d68:	4a9c      	ldr	r2, [pc, #624]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d70:	4b9a      	ldr	r3, [pc, #616]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d80:	4b97      	ldr	r3, [pc, #604]	@ (8003fe0 <HAL_RCC_OscConfig+0x764>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d11e      	bne.n	8003dca <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d8c:	4b94      	ldr	r3, [pc, #592]	@ (8003fe0 <HAL_RCC_OscConfig+0x764>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a93      	ldr	r2, [pc, #588]	@ (8003fe0 <HAL_RCC_OscConfig+0x764>)
 8003d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d98:	f7fe fb68 	bl	800246c <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d9e:	e00e      	b.n	8003dbe <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da0:	f7fe fb64 	bl	800246c <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d907      	bls.n	8003dbe <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dae:	4b8c      	ldr	r3, [pc, #560]	@ (8003fe0 <HAL_RCC_OscConfig+0x764>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e22a      	b.n	8004214 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dbe:	4b88      	ldr	r3, [pc, #544]	@ (8003fe0 <HAL_RCC_OscConfig+0x764>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0ea      	beq.n	8003da0 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d01f      	beq.n	8003e16 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d010      	beq.n	8003e04 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003de2:	4b7e      	ldr	r3, [pc, #504]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de8:	4a7c      	ldr	r2, [pc, #496]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003dea:	f043 0304 	orr.w	r3, r3, #4
 8003dee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003df2:	4b7a      	ldr	r3, [pc, #488]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df8:	4a78      	ldr	r2, [pc, #480]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e02:	e018      	b.n	8003e36 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e04:	4b75      	ldr	r3, [pc, #468]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0a:	4a74      	ldr	r2, [pc, #464]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003e0c:	f043 0301 	orr.w	r3, r3, #1
 8003e10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e14:	e00f      	b.n	8003e36 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e16:	4b71      	ldr	r3, [pc, #452]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1c:	4a6f      	ldr	r2, [pc, #444]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003e1e:	f023 0301 	bic.w	r3, r3, #1
 8003e22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e26:	4b6d      	ldr	r3, [pc, #436]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2c:	4a6b      	ldr	r2, [pc, #428]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003e2e:	f023 0304 	bic.w	r3, r3, #4
 8003e32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d068      	beq.n	8003f10 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3e:	f7fe fb15 	bl	800246c <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e44:	e011      	b.n	8003e6a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e46:	f7fe fb11 	bl	800246c <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d908      	bls.n	8003e6a <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e58:	4b60      	ldr	r3, [pc, #384]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e1d4      	b.n	8004214 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6a:	4b5c      	ldr	r3, [pc, #368]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0e6      	beq.n	8003e46 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d022      	beq.n	8003eca <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003e84:	4b55      	ldr	r3, [pc, #340]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e8a:	4a54      	ldr	r2, [pc, #336]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003e8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003e94:	e011      	b.n	8003eba <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e96:	f7fe fae9 	bl	800246c <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d908      	bls.n	8003eba <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003ea8:	4b4c      	ldr	r3, [pc, #304]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e1ac      	b.n	8004214 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003eba:	4b48      	ldr	r3, [pc, #288]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0e6      	beq.n	8003e96 <HAL_RCC_OscConfig+0x61a>
 8003ec8:	e068      	b.n	8003f9c <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003eca:	4b44      	ldr	r3, [pc, #272]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed0:	4a42      	ldr	r2, [pc, #264]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003ed2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ed6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003eda:	e011      	b.n	8003f00 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003edc:	f7fe fac6 	bl	800246c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d908      	bls.n	8003f00 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003eee:	4b3b      	ldr	r3, [pc, #236]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e189      	b.n	8004214 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f00:	4b36      	ldr	r3, [pc, #216]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1e6      	bne.n	8003edc <HAL_RCC_OscConfig+0x660>
 8003f0e:	e045      	b.n	8003f9c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f10:	f7fe faac 	bl	800246c <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f16:	e011      	b.n	8003f3c <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f18:	f7fe faa8 	bl	800246c <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d908      	bls.n	8003f3c <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e16b      	b.n	8004214 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f3c:	4b27      	ldr	r3, [pc, #156]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1e6      	bne.n	8003f18 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003f4a:	4b24      	ldr	r3, [pc, #144]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d021      	beq.n	8003f9c <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003f58:	4b20      	ldr	r3, [pc, #128]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003f60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f68:	e011      	b.n	8003f8e <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f6a:	f7fe fa7f 	bl	800246c <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d908      	bls.n	8003f8e <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f7c:	4b17      	ldr	r3, [pc, #92]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e142      	b.n	8004214 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f8e:	4b13      	ldr	r3, [pc, #76]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1e6      	bne.n	8003f6a <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f9c:	7ffb      	ldrb	r3, [r7, #31]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d105      	bne.n	8003fae <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa6:	4a0d      	ldr	r2, [pc, #52]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003fa8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d04f      	beq.n	800405a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d028      	beq.n	8004014 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fc2:	4b06      	ldr	r3, [pc, #24]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003fc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fc8:	4a04      	ldr	r2, [pc, #16]	@ (8003fdc <HAL_RCC_OscConfig+0x760>)
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd2:	f7fe fa4b 	bl	800246c <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fd8:	e014      	b.n	8004004 <HAL_RCC_OscConfig+0x788>
 8003fda:	bf00      	nop
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fe4:	f7fe fa42 	bl	800246c <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d908      	bls.n	8004004 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ff2:	4b8a      	ldr	r3, [pc, #552]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 8003ff4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e107      	b.n	8004214 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004004:	4b85      	ldr	r3, [pc, #532]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 8004006:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0e8      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x768>
 8004012:	e022      	b.n	800405a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004014:	4b81      	ldr	r3, [pc, #516]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 8004016:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800401a:	4a80      	ldr	r2, [pc, #512]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 800401c:	f023 0301 	bic.w	r3, r3, #1
 8004020:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004024:	f7fe fa22 	bl	800246c <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800402a:	e00f      	b.n	800404c <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800402c:	f7fe fa1e 	bl	800246c <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d908      	bls.n	800404c <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800403a:	4b78      	ldr	r3, [pc, #480]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 800403c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e0e3      	b.n	8004214 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800404c:	4b73      	ldr	r3, [pc, #460]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 800404e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e8      	bne.n	800402c <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 80d7 	beq.w	8004212 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004064:	4b6d      	ldr	r3, [pc, #436]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 030c 	and.w	r3, r3, #12
 800406c:	2b0c      	cmp	r3, #12
 800406e:	f000 8091 	beq.w	8004194 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004076:	2b02      	cmp	r3, #2
 8004078:	d166      	bne.n	8004148 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800407a:	4b68      	ldr	r3, [pc, #416]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a67      	ldr	r2, [pc, #412]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 8004080:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004086:	f7fe f9f1 	bl	800246c <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800408c:	e00e      	b.n	80040ac <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800408e:	f7fe f9ed 	bl	800246c <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d907      	bls.n	80040ac <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800409c:	4b5f      	ldr	r3, [pc, #380]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e0b3      	b.n	8004214 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040ac:	4b5b      	ldr	r3, [pc, #364]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1ea      	bne.n	800408e <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040b8:	4b58      	ldr	r3, [pc, #352]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	4b58      	ldr	r3, [pc, #352]	@ (8004220 <HAL_RCC_OscConfig+0x9a4>)
 80040be:	4013      	ands	r3, r2
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80040c8:	3a01      	subs	r2, #1
 80040ca:	0112      	lsls	r2, r2, #4
 80040cc:	4311      	orrs	r1, r2
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040d2:	0212      	lsls	r2, r2, #8
 80040d4:	4311      	orrs	r1, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80040da:	0852      	lsrs	r2, r2, #1
 80040dc:	3a01      	subs	r2, #1
 80040de:	0552      	lsls	r2, r2, #21
 80040e0:	4311      	orrs	r1, r2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80040e6:	0852      	lsrs	r2, r2, #1
 80040e8:	3a01      	subs	r2, #1
 80040ea:	0652      	lsls	r2, r2, #25
 80040ec:	4311      	orrs	r1, r2
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040f2:	06d2      	lsls	r2, r2, #27
 80040f4:	430a      	orrs	r2, r1
 80040f6:	4949      	ldr	r1, [pc, #292]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040fc:	4b47      	ldr	r3, [pc, #284]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a46      	ldr	r2, [pc, #280]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 8004102:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004106:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004108:	4b44      	ldr	r3, [pc, #272]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4a43      	ldr	r2, [pc, #268]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 800410e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004112:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004114:	f7fe f9aa 	bl	800246c <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800411a:	e00e      	b.n	800413a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800411c:	f7fe f9a6 	bl	800246c <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d907      	bls.n	800413a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800412a:	4b3c      	ldr	r3, [pc, #240]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e06c      	b.n	8004214 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800413a:	4b38      	ldr	r3, [pc, #224]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0ea      	beq.n	800411c <HAL_RCC_OscConfig+0x8a0>
 8004146:	e064      	b.n	8004212 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004148:	4b34      	ldr	r3, [pc, #208]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a33      	ldr	r2, [pc, #204]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 800414e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004154:	f7fe f98a 	bl	800246c <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800415a:	e00e      	b.n	800417a <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415c:	f7fe f986 	bl	800246c <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d907      	bls.n	800417a <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800416a:	4b2c      	ldr	r3, [pc, #176]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e04c      	b.n	8004214 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800417a:	4b28      	ldr	r3, [pc, #160]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1ea      	bne.n	800415c <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004186:	4b25      	ldr	r3, [pc, #148]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	4924      	ldr	r1, [pc, #144]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 800418c:	4b25      	ldr	r3, [pc, #148]	@ (8004224 <HAL_RCC_OscConfig+0x9a8>)
 800418e:	4013      	ands	r3, r2
 8004190:	60cb      	str	r3, [r1, #12]
 8004192:	e03e      	b.n	8004212 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e039      	b.n	8004214 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80041a0:	4b1e      	ldr	r3, [pc, #120]	@ (800421c <HAL_RCC_OscConfig+0x9a0>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f003 0203 	and.w	r2, r3, #3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d12c      	bne.n	800420e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041be:	3b01      	subs	r3, #1
 80041c0:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d123      	bne.n	800420e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d0:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d11b      	bne.n	800420e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e0:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d113      	bne.n	800420e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f0:	085b      	lsrs	r3, r3, #1
 80041f2:	3b01      	subs	r3, #1
 80041f4:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d109      	bne.n	800420e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004204:	085b      	lsrs	r3, r3, #1
 8004206:	3b01      	subs	r3, #1
 8004208:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800420a:	429a      	cmp	r2, r3
 800420c:	d001      	beq.n	8004212 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3720      	adds	r7, #32
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40021000 	.word	0x40021000
 8004220:	019f800c 	.word	0x019f800c
 8004224:	feeefffc 	.word	0xfeeefffc

08004228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e11c      	b.n	800447a <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004240:	4b90      	ldr	r3, [pc, #576]	@ (8004484 <HAL_RCC_ClockConfig+0x25c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d910      	bls.n	8004270 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	4b8d      	ldr	r3, [pc, #564]	@ (8004484 <HAL_RCC_ClockConfig+0x25c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f023 020f 	bic.w	r2, r3, #15
 8004256:	498b      	ldr	r1, [pc, #556]	@ (8004484 <HAL_RCC_ClockConfig+0x25c>)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	4313      	orrs	r3, r2
 800425c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800425e:	4b89      	ldr	r3, [pc, #548]	@ (8004484 <HAL_RCC_ClockConfig+0x25c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e104      	b.n	800447a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d010      	beq.n	800429e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	4b81      	ldr	r3, [pc, #516]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004288:	429a      	cmp	r2, r3
 800428a:	d908      	bls.n	800429e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800428c:	4b7e      	ldr	r3, [pc, #504]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	497b      	ldr	r1, [pc, #492]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 8085 	beq.w	80043b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d11f      	bne.n	80042f4 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042b4:	4b74      	ldr	r3, [pc, #464]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0da      	b.n	800447a <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80042c4:	f000 f9fe 	bl	80046c4 <RCC_GetSysClockFreqFromPLLSource>
 80042c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	4a6f      	ldr	r2, [pc, #444]	@ (800448c <HAL_RCC_ClockConfig+0x264>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d947      	bls.n	8004362 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80042d2:	4b6d      	ldr	r3, [pc, #436]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d141      	bne.n	8004362 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042de:	4b6a      	ldr	r3, [pc, #424]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042e6:	4a68      	ldr	r2, [pc, #416]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 80042e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042ee:	2380      	movs	r3, #128	@ 0x80
 80042f0:	617b      	str	r3, [r7, #20]
 80042f2:	e036      	b.n	8004362 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d107      	bne.n	800430c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042fc:	4b62      	ldr	r3, [pc, #392]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d115      	bne.n	8004334 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0b6      	b.n	800447a <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d107      	bne.n	8004324 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004314:	4b5c      	ldr	r3, [pc, #368]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d109      	bne.n	8004334 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e0aa      	b.n	800447a <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004324:	4b58      	ldr	r3, [pc, #352]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e0a2      	b.n	800447a <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004334:	f000 f8b0 	bl	8004498 <HAL_RCC_GetSysClockFreq>
 8004338:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	4a53      	ldr	r2, [pc, #332]	@ (800448c <HAL_RCC_ClockConfig+0x264>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d90f      	bls.n	8004362 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004342:	4b51      	ldr	r3, [pc, #324]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d109      	bne.n	8004362 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800434e:	4b4e      	ldr	r3, [pc, #312]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004356:	4a4c      	ldr	r2, [pc, #304]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 8004358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800435c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800435e:	2380      	movs	r3, #128	@ 0x80
 8004360:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004362:	4b49      	ldr	r3, [pc, #292]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f023 0203 	bic.w	r2, r3, #3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	4946      	ldr	r1, [pc, #280]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 8004370:	4313      	orrs	r3, r2
 8004372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004374:	f7fe f87a 	bl	800246c <HAL_GetTick>
 8004378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437a:	e013      	b.n	80043a4 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800437c:	f7fe f876 	bl	800246c <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800438a:	4293      	cmp	r3, r2
 800438c:	d90a      	bls.n	80043a4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438e:	4b3e      	ldr	r3, [pc, #248]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 020c 	and.w	r2, r3, #12
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	429a      	cmp	r2, r3
 800439e:	d001      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e06a      	b.n	800447a <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a4:	4b38      	ldr	r3, [pc, #224]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 020c 	and.w	r2, r3, #12
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d1e2      	bne.n	800437c <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2b80      	cmp	r3, #128	@ 0x80
 80043ba:	d105      	bne.n	80043c8 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80043bc:	4b32      	ldr	r3, [pc, #200]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	4a31      	ldr	r2, [pc, #196]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 80043c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043c6:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d010      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d208      	bcs.n	80043f6 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e4:	4b28      	ldr	r3, [pc, #160]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	4925      	ldr	r1, [pc, #148]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043f6:	4b23      	ldr	r3, [pc, #140]	@ (8004484 <HAL_RCC_ClockConfig+0x25c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d210      	bcs.n	8004426 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004404:	4b1f      	ldr	r3, [pc, #124]	@ (8004484 <HAL_RCC_ClockConfig+0x25c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f023 020f 	bic.w	r2, r3, #15
 800440c:	491d      	ldr	r1, [pc, #116]	@ (8004484 <HAL_RCC_ClockConfig+0x25c>)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	4313      	orrs	r3, r2
 8004412:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004414:	4b1b      	ldr	r3, [pc, #108]	@ (8004484 <HAL_RCC_ClockConfig+0x25c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 030f 	and.w	r3, r3, #15
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d001      	beq.n	8004426 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e029      	b.n	800447a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	2b00      	cmp	r3, #0
 8004430:	d008      	beq.n	8004444 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004432:	4b15      	ldr	r3, [pc, #84]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	4912      	ldr	r1, [pc, #72]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 8004440:	4313      	orrs	r3, r2
 8004442:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d009      	beq.n	8004464 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004450:	4b0d      	ldr	r3, [pc, #52]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	490a      	ldr	r1, [pc, #40]	@ (8004488 <HAL_RCC_ClockConfig+0x260>)
 8004460:	4313      	orrs	r3, r2
 8004462:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004464:	f000 f8b6 	bl	80045d4 <HAL_RCC_GetHCLKFreq>
 8004468:	4603      	mov	r3, r0
 800446a:	4a09      	ldr	r2, [pc, #36]	@ (8004490 <HAL_RCC_ClockConfig+0x268>)
 800446c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800446e:	4b09      	ldr	r3, [pc, #36]	@ (8004494 <HAL_RCC_ClockConfig+0x26c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f7fd ffaa 	bl	80023cc <HAL_InitTick>
 8004478:	4603      	mov	r3, r0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40022000 	.word	0x40022000
 8004488:	40021000 	.word	0x40021000
 800448c:	04c4b400 	.word	0x04c4b400
 8004490:	20000000 	.word	0x20000000
 8004494:	20000004 	.word	0x20000004

08004498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004498:	b480      	push	{r7}
 800449a:	b089      	sub	sp, #36	@ 0x24
 800449c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	61fb      	str	r3, [r7, #28]
 80044a2:	2300      	movs	r3, #0
 80044a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044a6:	4b47      	ldr	r3, [pc, #284]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 030c 	and.w	r3, r3, #12
 80044ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044b0:	4b44      	ldr	r3, [pc, #272]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <HAL_RCC_GetSysClockFreq+0x34>
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	2b0c      	cmp	r3, #12
 80044c4:	d121      	bne.n	800450a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d11e      	bne.n	800450a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80044cc:	4b3d      	ldr	r3, [pc, #244]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0308 	and.w	r3, r3, #8
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d107      	bne.n	80044e8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044d8:	4b3a      	ldr	r3, [pc, #232]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80044da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044de:	0a1b      	lsrs	r3, r3, #8
 80044e0:	f003 030f 	and.w	r3, r3, #15
 80044e4:	61fb      	str	r3, [r7, #28]
 80044e6:	e005      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044e8:	4b36      	ldr	r3, [pc, #216]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	091b      	lsrs	r3, r3, #4
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80044f4:	4a34      	ldr	r2, [pc, #208]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x130>)
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044fc:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10d      	bne.n	8004520 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004508:	e00a      	b.n	8004520 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	2b04      	cmp	r3, #4
 800450e:	d102      	bne.n	8004516 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004510:	4b2e      	ldr	r3, [pc, #184]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x134>)
 8004512:	61bb      	str	r3, [r7, #24]
 8004514:	e004      	b.n	8004520 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2b08      	cmp	r3, #8
 800451a:	d101      	bne.n	8004520 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800451c:	4b2c      	ldr	r3, [pc, #176]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x138>)
 800451e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	2b0c      	cmp	r3, #12
 8004524:	d146      	bne.n	80045b4 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004526:	4b27      	ldr	r3, [pc, #156]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004530:	4b24      	ldr	r3, [pc, #144]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	091b      	lsrs	r3, r3, #4
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	3301      	adds	r3, #1
 800453c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b02      	cmp	r3, #2
 8004542:	d003      	beq.n	800454c <HAL_RCC_GetSysClockFreq+0xb4>
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b03      	cmp	r3, #3
 8004548:	d00d      	beq.n	8004566 <HAL_RCC_GetSysClockFreq+0xce>
 800454a:	e019      	b.n	8004580 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800454c:	4a1f      	ldr	r2, [pc, #124]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x134>)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	fbb2 f3f3 	udiv	r3, r2, r3
 8004554:	4a1b      	ldr	r2, [pc, #108]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004556:	68d2      	ldr	r2, [r2, #12]
 8004558:	0a12      	lsrs	r2, r2, #8
 800455a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800455e:	fb02 f303 	mul.w	r3, r2, r3
 8004562:	617b      	str	r3, [r7, #20]
        break;
 8004564:	e019      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004566:	4a1a      	ldr	r2, [pc, #104]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	fbb2 f3f3 	udiv	r3, r2, r3
 800456e:	4a15      	ldr	r2, [pc, #84]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004570:	68d2      	ldr	r2, [r2, #12]
 8004572:	0a12      	lsrs	r2, r2, #8
 8004574:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004578:	fb02 f303 	mul.w	r3, r2, r3
 800457c:	617b      	str	r3, [r7, #20]
        break;
 800457e:	e00c      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004580:	69fa      	ldr	r2, [r7, #28]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	fbb2 f3f3 	udiv	r3, r2, r3
 8004588:	4a0e      	ldr	r2, [pc, #56]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 800458a:	68d2      	ldr	r2, [r2, #12]
 800458c:	0a12      	lsrs	r2, r2, #8
 800458e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004592:	fb02 f303 	mul.w	r3, r2, r3
 8004596:	617b      	str	r3, [r7, #20]
        break;
 8004598:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800459a:	4b0a      	ldr	r3, [pc, #40]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	0e5b      	lsrs	r3, r3, #25
 80045a0:	f003 0303 	and.w	r3, r3, #3
 80045a4:	3301      	adds	r3, #1
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80045b4:	69bb      	ldr	r3, [r7, #24]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3724      	adds	r7, #36	@ 0x24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40021000 	.word	0x40021000
 80045c8:	0800535c 	.word	0x0800535c
 80045cc:	00f42400 	.word	0x00f42400
 80045d0:	007a1200 	.word	0x007a1200

080045d4 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80045d8:	f7ff ff5e 	bl	8004498 <HAL_RCC_GetSysClockFreq>
 80045dc:	4602      	mov	r2, r0
 80045de:	4b05      	ldr	r3, [pc, #20]	@ (80045f4 <HAL_RCC_GetHCLKFreq+0x20>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	091b      	lsrs	r3, r3, #4
 80045e4:	f003 030f 	and.w	r3, r3, #15
 80045e8:	4903      	ldr	r1, [pc, #12]	@ (80045f8 <HAL_RCC_GetHCLKFreq+0x24>)
 80045ea:	5ccb      	ldrb	r3, [r1, r3]
 80045ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40021000 	.word	0x40021000
 80045f8:	0800534c 	.word	0x0800534c

080045fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004604:	2300      	movs	r3, #0
 8004606:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004608:	4b2c      	ldr	r3, [pc, #176]	@ (80046bc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800460a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800460c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004614:	f7ff f894 	bl	8003740 <HAL_PWREx_GetVoltageRange>
 8004618:	6138      	str	r0, [r7, #16]
 800461a:	e014      	b.n	8004646 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800461c:	4b27      	ldr	r3, [pc, #156]	@ (80046bc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800461e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004620:	4a26      	ldr	r2, [pc, #152]	@ (80046bc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004626:	6593      	str	r3, [r2, #88]	@ 0x58
 8004628:	4b24      	ldr	r3, [pc, #144]	@ (80046bc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800462a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004634:	f7ff f884 	bl	8003740 <HAL_PWREx_GetVoltageRange>
 8004638:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800463a:	4b20      	ldr	r3, [pc, #128]	@ (80046bc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800463c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463e:	4a1f      	ldr	r2, [pc, #124]	@ (80046bc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004640:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004644:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <RCC_SetFlashLatencyFromMSIRange+0x58>
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004652:	d10b      	bne.n	800466c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b80      	cmp	r3, #128	@ 0x80
 8004658:	d919      	bls.n	800468e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2ba0      	cmp	r3, #160	@ 0xa0
 800465e:	d902      	bls.n	8004666 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004660:	2302      	movs	r3, #2
 8004662:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004664:	e013      	b.n	800468e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004666:	2301      	movs	r3, #1
 8004668:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800466a:	e010      	b.n	800468e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b80      	cmp	r3, #128	@ 0x80
 8004670:	d902      	bls.n	8004678 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004672:	2303      	movs	r3, #3
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	e00a      	b.n	800468e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b80      	cmp	r3, #128	@ 0x80
 800467c:	d102      	bne.n	8004684 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800467e:	2302      	movs	r3, #2
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	e004      	b.n	800468e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b70      	cmp	r3, #112	@ 0x70
 8004688:	d101      	bne.n	800468e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800468a:	2301      	movs	r3, #1
 800468c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800468e:	4b0c      	ldr	r3, [pc, #48]	@ (80046c0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f023 020f 	bic.w	r2, r3, #15
 8004696:	490a      	ldr	r1, [pc, #40]	@ (80046c0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800469e:	4b08      	ldr	r3, [pc, #32]	@ (80046c0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d001      	beq.n	80046b0 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e000      	b.n	80046b2 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	40021000 	.word	0x40021000
 80046c0:	40022000 	.word	0x40022000

080046c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046ca:	4b31      	ldr	r3, [pc, #196]	@ (8004790 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046d4:	4b2e      	ldr	r3, [pc, #184]	@ (8004790 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	091b      	lsrs	r3, r3, #4
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	3301      	adds	r3, #1
 80046e0:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d015      	beq.n	8004714 <RCC_GetSysClockFreqFromPLLSource+0x50>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b03      	cmp	r3, #3
 80046ec:	d839      	bhi.n	8004762 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d01c      	beq.n	800472e <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d133      	bne.n	8004762 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046fa:	4a26      	ldr	r2, [pc, #152]	@ (8004794 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004702:	4a23      	ldr	r2, [pc, #140]	@ (8004790 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004704:	68d2      	ldr	r2, [r2, #12]
 8004706:	0a12      	lsrs	r2, r2, #8
 8004708:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800470c:	fb02 f303 	mul.w	r3, r2, r3
 8004710:	613b      	str	r3, [r7, #16]
      break;
 8004712:	e029      	b.n	8004768 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004714:	4a20      	ldr	r2, [pc, #128]	@ (8004798 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	fbb2 f3f3 	udiv	r3, r2, r3
 800471c:	4a1c      	ldr	r2, [pc, #112]	@ (8004790 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800471e:	68d2      	ldr	r2, [r2, #12]
 8004720:	0a12      	lsrs	r2, r2, #8
 8004722:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004726:	fb02 f303 	mul.w	r3, r2, r3
 800472a:	613b      	str	r3, [r7, #16]
      break;
 800472c:	e01c      	b.n	8004768 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800472e:	4b18      	ldr	r3, [pc, #96]	@ (8004790 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d107      	bne.n	800474a <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800473a:	4b15      	ldr	r3, [pc, #84]	@ (8004790 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800473c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004740:	0a1b      	lsrs	r3, r3, #8
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	e005      	b.n	8004756 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800474a:	4b11      	ldr	r3, [pc, #68]	@ (8004790 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	091b      	lsrs	r3, r3, #4
 8004750:	f003 030f 	and.w	r3, r3, #15
 8004754:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8004756:	4a11      	ldr	r2, [pc, #68]	@ (800479c <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800475e:	613b      	str	r3, [r7, #16]
        break;
 8004760:	e002      	b.n	8004768 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8004762:	2300      	movs	r3, #0
 8004764:	613b      	str	r3, [r7, #16]
      break;
 8004766:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004768:	4b09      	ldr	r3, [pc, #36]	@ (8004790 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	0e5b      	lsrs	r3, r3, #25
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	3301      	adds	r3, #1
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004780:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004782:	683b      	ldr	r3, [r7, #0]
}
 8004784:	4618      	mov	r0, r3
 8004786:	371c      	adds	r7, #28
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	40021000 	.word	0x40021000
 8004794:	00f42400 	.word	0x00f42400
 8004798:	007a1200 	.word	0x007a1200
 800479c:	0800535c 	.word	0x0800535c

080047a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047a8:	2300      	movs	r3, #0
 80047aa:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047ac:	2300      	movs	r3, #0
 80047ae:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d040      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047c0:	2b80      	cmp	r3, #128	@ 0x80
 80047c2:	d02a      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80047c4:	2b80      	cmp	r3, #128	@ 0x80
 80047c6:	d825      	bhi.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80047c8:	2b60      	cmp	r3, #96	@ 0x60
 80047ca:	d026      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80047cc:	2b60      	cmp	r3, #96	@ 0x60
 80047ce:	d821      	bhi.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80047d0:	2b40      	cmp	r3, #64	@ 0x40
 80047d2:	d006      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80047d4:	2b40      	cmp	r3, #64	@ 0x40
 80047d6:	d81d      	bhi.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d009      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d010      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80047e0:	e018      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047e2:	4b8f      	ldr	r3, [pc, #572]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	4a8e      	ldr	r2, [pc, #568]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047ec:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80047ee:	e015      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3304      	adds	r3, #4
 80047f4:	2100      	movs	r1, #0
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 fb56 	bl	8004ea8 <RCCEx_PLLSAI1_Config>
 80047fc:	4603      	mov	r3, r0
 80047fe:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004800:	e00c      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3320      	adds	r3, #32
 8004806:	2100      	movs	r1, #0
 8004808:	4618      	mov	r0, r3
 800480a:	f000 fc33 	bl	8005074 <RCCEx_PLLSAI2_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004812:	e003      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	77fb      	strb	r3, [r7, #31]
        break;
 8004818:	e000      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800481a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800481c:	7ffb      	ldrb	r3, [r7, #31]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10b      	bne.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004822:	4b7f      	ldr	r3, [pc, #508]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004824:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004828:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004830:	497b      	ldr	r1, [pc, #492]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004838:	e001      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483a:	7ffb      	ldrb	r3, [r7, #31]
 800483c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d047      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004852:	d030      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004854:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004858:	d82a      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800485a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800485e:	d02a      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004860:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004864:	d824      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004866:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800486a:	d008      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800486c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004870:	d81e      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004876:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800487a:	d010      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800487c:	e018      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800487e:	4b68      	ldr	r3, [pc, #416]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	4a67      	ldr	r2, [pc, #412]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004884:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004888:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800488a:	e015      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3304      	adds	r3, #4
 8004890:	2100      	movs	r1, #0
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fb08 	bl	8004ea8 <RCCEx_PLLSAI1_Config>
 8004898:	4603      	mov	r3, r0
 800489a:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800489c:	e00c      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3320      	adds	r3, #32
 80048a2:	2100      	movs	r1, #0
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 fbe5 	bl	8005074 <RCCEx_PLLSAI2_Config>
 80048aa:	4603      	mov	r3, r0
 80048ac:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80048ae:	e003      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	77fb      	strb	r3, [r7, #31]
        break;
 80048b4:	e000      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80048b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048b8:	7ffb      	ldrb	r3, [r7, #31]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10b      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048be:	4b58      	ldr	r3, [pc, #352]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048cc:	4954      	ldr	r1, [pc, #336]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80048d4:	e001      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d6:	7ffb      	ldrb	r3, [r7, #31]
 80048d8:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 80ab 	beq.w	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048e8:	2300      	movs	r3, #0
 80048ea:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ec:	4b4c      	ldr	r3, [pc, #304]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10d      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048f8:	4b49      	ldr	r3, [pc, #292]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fc:	4a48      	ldr	r2, [pc, #288]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004902:	6593      	str	r3, [r2, #88]	@ 0x58
 8004904:	4b46      	ldr	r3, [pc, #280]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004910:	2301      	movs	r3, #1
 8004912:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004914:	4b43      	ldr	r3, [pc, #268]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a42      	ldr	r2, [pc, #264]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800491a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800491e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004920:	f7fd fda4 	bl	800246c <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004926:	e00f      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004928:	f7fd fda0 	bl	800246c <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d908      	bls.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004936:	4b3b      	ldr	r3, [pc, #236]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800493e:	2b00      	cmp	r3, #0
 8004940:	d109      	bne.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8004946:	e006      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004948:	4b36      	ldr	r3, [pc, #216]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0e9      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004954:	e000      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8004956:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8004958:	7ffb      	ldrb	r3, [r7, #31]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d164      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800495e:	4b30      	ldr	r3, [pc, #192]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004964:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004968:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d01f      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	429a      	cmp	r2, r3
 800497a:	d019      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800497c:	4b28      	ldr	r3, [pc, #160]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004982:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004986:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004988:	4b25      	ldr	r3, [pc, #148]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800498a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800498e:	4a24      	ldr	r2, [pc, #144]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004994:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004998:	4b21      	ldr	r3, [pc, #132]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800499a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800499e:	4a20      	ldr	r2, [pc, #128]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d01f      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ba:	f7fd fd57 	bl	800246c <HAL_GetTick>
 80049be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049c0:	e012      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c2:	f7fd fd53 	bl	800246c <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d909      	bls.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049d4:	4b12      	ldr	r3, [pc, #72]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10a      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80049e6:	e007      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0e5      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80049f6:	e000      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80049f8:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80049fa:	7ffb      	ldrb	r3, [r7, #31]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10c      	bne.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a00:	4b07      	ldr	r3, [pc, #28]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a06:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a10:	4903      	ldr	r1, [pc, #12]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a18:	e008      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a1a:	7ffb      	ldrb	r3, [r7, #31]
 8004a1c:	77bb      	strb	r3, [r7, #30]
 8004a1e:	e005      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8004a20:	40021000 	.word	0x40021000
 8004a24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a28:	7ffb      	ldrb	r3, [r7, #31]
 8004a2a:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a2c:	7dfb      	ldrb	r3, [r7, #23]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d105      	bne.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a32:	4b9c      	ldr	r3, [pc, #624]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a36:	4a9b      	ldr	r2, [pc, #620]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a3c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a4a:	4b96      	ldr	r3, [pc, #600]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a50:	f023 0203 	bic.w	r2, r3, #3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a58:	4992      	ldr	r1, [pc, #584]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a6c:	4b8d      	ldr	r3, [pc, #564]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a72:	f023 020c 	bic.w	r2, r3, #12
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a7a:	498a      	ldr	r1, [pc, #552]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0304 	and.w	r3, r3, #4
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a8e:	4b85      	ldr	r3, [pc, #532]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a94:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a9c:	4981      	ldr	r1, [pc, #516]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00a      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ab0:	4b7c      	ldr	r3, [pc, #496]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abe:	4979      	ldr	r1, [pc, #484]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0310 	and.w	r3, r3, #16
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ad2:	4b74      	ldr	r3, [pc, #464]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae0:	4970      	ldr	r1, [pc, #448]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0320 	and.w	r3, r3, #32
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004af4:	4b6b      	ldr	r3, [pc, #428]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004afa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b02:	4968      	ldr	r1, [pc, #416]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b16:	4b63      	ldr	r3, [pc, #396]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b1c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b24:	495f      	ldr	r1, [pc, #380]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00a      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b38:	4b5a      	ldr	r3, [pc, #360]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b46:	4957      	ldr	r1, [pc, #348]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004b5a:	4b52      	ldr	r3, [pc, #328]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b60:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b68:	494e      	ldr	r1, [pc, #312]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d031      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b84:	d00e      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004b86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b8a:	d814      	bhi.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d015      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004b90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b94:	d10f      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b96:	4b43      	ldr	r3, [pc, #268]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	4a42      	ldr	r2, [pc, #264]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ba0:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004ba2:	e00c      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	2100      	movs	r1, #0
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 f97c 	bl	8004ea8 <RCCEx_PLLSAI1_Config>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004bb4:	e003      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	77fb      	strb	r3, [r7, #31]
        break;
 8004bba:	e000      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8004bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bbe:	7ffb      	ldrb	r3, [r7, #31]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10b      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004bc4:	4b37      	ldr	r3, [pc, #220]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bd2:	4934      	ldr	r1, [pc, #208]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004bda:	e001      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bdc:	7ffb      	ldrb	r3, [r7, #31]
 8004bde:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bec:	4b2d      	ldr	r3, [pc, #180]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bfa:	492a      	ldr	r1, [pc, #168]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c0e:	4b25      	ldr	r3, [pc, #148]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c14:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c1c:	4921      	ldr	r1, [pc, #132]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c30:	4b1c      	ldr	r3, [pc, #112]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c36:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c3e:	4919      	ldr	r1, [pc, #100]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c52:	4b14      	ldr	r3, [pc, #80]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c58:	f023 0203 	bic.w	r2, r3, #3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c60:	4910      	ldr	r1, [pc, #64]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d02b      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c74:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c82:	4908      	ldr	r1, [pc, #32]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c92:	d109      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c94:	4b03      	ldr	r3, [pc, #12]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	4a02      	ldr	r2, [pc, #8]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c9e:	60d3      	str	r3, [r2, #12]
 8004ca0:	e014      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004ca2:	bf00      	nop
 8004ca4:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cb0:	d10c      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 f8f5 	bl	8004ea8 <RCCEx_PLLSAI1_Config>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8004cc2:	7ffb      	ldrb	r3, [r7, #31]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8004cc8:	7ffb      	ldrb	r3, [r7, #31]
 8004cca:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d04a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ce0:	d108      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004ce2:	4b70      	ldr	r3, [pc, #448]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004ce4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ce8:	4a6e      	ldr	r2, [pc, #440]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004cea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cee:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004cf2:	e012      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004cf4:	4b6b      	ldr	r3, [pc, #428]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d02:	4968      	ldr	r1, [pc, #416]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004d0a:	4b66      	ldr	r3, [pc, #408]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d10:	4a64      	ldr	r2, [pc, #400]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d16:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d22:	d10d      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3304      	adds	r3, #4
 8004d28:	2101      	movs	r1, #1
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 f8bc 	bl	8004ea8 <RCCEx_PLLSAI1_Config>
 8004d30:	4603      	mov	r3, r0
 8004d32:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004d34:	7ffb      	ldrb	r3, [r7, #31]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d019      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8004d3a:	7ffb      	ldrb	r3, [r7, #31]
 8004d3c:	77bb      	strb	r3, [r7, #30]
 8004d3e:	e016      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d48:	d106      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d4a:	4b56      	ldr	r3, [pc, #344]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	4a55      	ldr	r2, [pc, #340]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d54:	60d3      	str	r3, [r2, #12]
 8004d56:	e00a      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d60:	d105      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d62:	4b50      	ldr	r3, [pc, #320]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	4a4f      	ldr	r2, [pc, #316]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d6c:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d028      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d80:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d88:	4946      	ldr	r1, [pc, #280]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d98:	d106      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d9a:	4b42      	ldr	r3, [pc, #264]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	4a41      	ldr	r2, [pc, #260]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004da0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004da4:	60d3      	str	r3, [r2, #12]
 8004da6:	e011      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004db0:	d10c      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3304      	adds	r3, #4
 8004db6:	2101      	movs	r1, #1
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 f875 	bl	8004ea8 <RCCEx_PLLSAI1_Config>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004dc2:	7ffb      	ldrb	r3, [r7, #31]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8004dc8:	7ffb      	ldrb	r3, [r7, #31]
 8004dca:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d01e      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dd8:	4b32      	ldr	r3, [pc, #200]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dde:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004de8:	492e      	ldr	r1, [pc, #184]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004df6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dfa:	d10c      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3304      	adds	r3, #4
 8004e00:	2102      	movs	r1, #2
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 f850 	bl	8004ea8 <RCCEx_PLLSAI1_Config>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004e0c:	7ffb      	ldrb	r3, [r7, #31]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8004e12:	7ffb      	ldrb	r3, [r7, #31]
 8004e14:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00b      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e22:	4b20      	ldr	r3, [pc, #128]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e28:	f023 0204 	bic.w	r2, r3, #4
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e32:	491c      	ldr	r1, [pc, #112]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00b      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e46:	4b17      	ldr	r3, [pc, #92]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e4c:	f023 0218 	bic.w	r2, r3, #24
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e56:	4913      	ldr	r1, [pc, #76]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d017      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e70:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e7a:	490a      	ldr	r1, [pc, #40]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e8c:	d105      	bne.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e8e:	4b05      	ldr	r3, [pc, #20]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	4a04      	ldr	r2, [pc, #16]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e98:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004e9a:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3720      	adds	r7, #32
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40021000 	.word	0x40021000

08004ea8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d018      	beq.n	8004ef0 <RCCEx_PLLSAI1_Config+0x48>
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d81f      	bhi.n	8004f02 <RCCEx_PLLSAI1_Config+0x5a>
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d002      	beq.n	8004ecc <RCCEx_PLLSAI1_Config+0x24>
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d009      	beq.n	8004ede <RCCEx_PLLSAI1_Config+0x36>
 8004eca:	e01a      	b.n	8004f02 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ecc:	4b65      	ldr	r3, [pc, #404]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d117      	bne.n	8004f08 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004edc:	e014      	b.n	8004f08 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ede:	4b61      	ldr	r3, [pc, #388]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d110      	bne.n	8004f0c <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eee:	e00d      	b.n	8004f0c <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004ef0:	4b5c      	ldr	r3, [pc, #368]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d109      	bne.n	8004f10 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f00:	e006      	b.n	8004f10 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	73fb      	strb	r3, [r7, #15]
      break;
 8004f06:	e004      	b.n	8004f12 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004f08:	bf00      	nop
 8004f0a:	e002      	b.n	8004f12 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004f0c:	bf00      	nop
 8004f0e:	e000      	b.n	8004f12 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004f10:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f12:	7bfb      	ldrb	r3, [r7, #15]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f040 809f 	bne.w	8005058 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f1a:	4b52      	ldr	r3, [pc, #328]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a51      	ldr	r2, [pc, #324]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004f20:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f26:	f7fd faa1 	bl	800246c <HAL_GetTick>
 8004f2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f2c:	e00f      	b.n	8004f4e <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f2e:	f7fd fa9d 	bl	800246c <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d908      	bls.n	8004f4e <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f3c:	4b49      	ldr	r3, [pc, #292]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d009      	beq.n	8004f5c <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f4c:	e006      	b.n	8004f5c <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f4e:	4b45      	ldr	r3, [pc, #276]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1e9      	bne.n	8004f2e <RCCEx_PLLSAI1_Config+0x86>
 8004f5a:	e000      	b.n	8004f5e <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004f5c:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d179      	bne.n	8005058 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d116      	bne.n	8004f98 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004f6c:	691a      	ldr	r2, [r3, #16]
 8004f6e:	4b3e      	ldr	r3, [pc, #248]	@ (8005068 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6892      	ldr	r2, [r2, #8]
 8004f76:	0211      	lsls	r1, r2, #8
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	68d2      	ldr	r2, [r2, #12]
 8004f7c:	06d2      	lsls	r2, r2, #27
 8004f7e:	4311      	orrs	r1, r2
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6852      	ldr	r2, [r2, #4]
 8004f84:	3a01      	subs	r2, #1
 8004f86:	0112      	lsls	r2, r2, #4
 8004f88:	4311      	orrs	r1, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6812      	ldr	r2, [r2, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	4934      	ldr	r1, [pc, #208]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	610b      	str	r3, [r1, #16]
 8004f96:	e033      	b.n	8005000 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d118      	bne.n	8004fd0 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f9e:	4b31      	ldr	r3, [pc, #196]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004fa0:	691a      	ldr	r2, [r3, #16]
 8004fa2:	4b32      	ldr	r3, [pc, #200]	@ (800506c <RCCEx_PLLSAI1_Config+0x1c4>)
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6892      	ldr	r2, [r2, #8]
 8004faa:	0211      	lsls	r1, r2, #8
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6912      	ldr	r2, [r2, #16]
 8004fb0:	0852      	lsrs	r2, r2, #1
 8004fb2:	3a01      	subs	r2, #1
 8004fb4:	0552      	lsls	r2, r2, #21
 8004fb6:	4311      	orrs	r1, r2
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6852      	ldr	r2, [r2, #4]
 8004fbc:	3a01      	subs	r2, #1
 8004fbe:	0112      	lsls	r2, r2, #4
 8004fc0:	4311      	orrs	r1, r2
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6812      	ldr	r2, [r2, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	4926      	ldr	r1, [pc, #152]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	610b      	str	r3, [r1, #16]
 8004fce:	e017      	b.n	8005000 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fd0:	4b24      	ldr	r3, [pc, #144]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004fd2:	691a      	ldr	r2, [r3, #16]
 8004fd4:	4b26      	ldr	r3, [pc, #152]	@ (8005070 <RCCEx_PLLSAI1_Config+0x1c8>)
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6892      	ldr	r2, [r2, #8]
 8004fdc:	0211      	lsls	r1, r2, #8
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6952      	ldr	r2, [r2, #20]
 8004fe2:	0852      	lsrs	r2, r2, #1
 8004fe4:	3a01      	subs	r2, #1
 8004fe6:	0652      	lsls	r2, r2, #25
 8004fe8:	4311      	orrs	r1, r2
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6852      	ldr	r2, [r2, #4]
 8004fee:	3a01      	subs	r2, #1
 8004ff0:	0112      	lsls	r2, r2, #4
 8004ff2:	4311      	orrs	r1, r2
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6812      	ldr	r2, [r2, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	491a      	ldr	r1, [pc, #104]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005000:	4b18      	ldr	r3, [pc, #96]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a17      	ldr	r2, [pc, #92]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005006:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800500a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500c:	f7fd fa2e 	bl	800246c <HAL_GetTick>
 8005010:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005012:	e00f      	b.n	8005034 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005014:	f7fd fa2a 	bl	800246c <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d908      	bls.n	8005034 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005022:	4b10      	ldr	r3, [pc, #64]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d109      	bne.n	8005042 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005032:	e006      	b.n	8005042 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005034:	4b0b      	ldr	r3, [pc, #44]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0e9      	beq.n	8005014 <RCCEx_PLLSAI1_Config+0x16c>
 8005040:	e000      	b.n	8005044 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8005042:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d106      	bne.n	8005058 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800504a:	4b06      	ldr	r3, [pc, #24]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 800504c:	691a      	ldr	r2, [r3, #16]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	4904      	ldr	r1, [pc, #16]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005054:	4313      	orrs	r3, r2
 8005056:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005058:	7bfb      	ldrb	r3, [r7, #15]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	40021000 	.word	0x40021000
 8005068:	07ff800c 	.word	0x07ff800c
 800506c:	ff9f800c 	.word	0xff9f800c
 8005070:	f9ff800c 	.word	0xf9ff800c

08005074 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b03      	cmp	r3, #3
 8005088:	d018      	beq.n	80050bc <RCCEx_PLLSAI2_Config+0x48>
 800508a:	2b03      	cmp	r3, #3
 800508c:	d81f      	bhi.n	80050ce <RCCEx_PLLSAI2_Config+0x5a>
 800508e:	2b01      	cmp	r3, #1
 8005090:	d002      	beq.n	8005098 <RCCEx_PLLSAI2_Config+0x24>
 8005092:	2b02      	cmp	r3, #2
 8005094:	d009      	beq.n	80050aa <RCCEx_PLLSAI2_Config+0x36>
 8005096:	e01a      	b.n	80050ce <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005098:	4b4a      	ldr	r3, [pc, #296]	@ (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d117      	bne.n	80050d4 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050a8:	e014      	b.n	80050d4 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050aa:	4b46      	ldr	r3, [pc, #280]	@ (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d110      	bne.n	80050d8 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050ba:	e00d      	b.n	80050d8 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80050bc:	4b41      	ldr	r3, [pc, #260]	@ (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d109      	bne.n	80050dc <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050cc:	e006      	b.n	80050dc <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	73fb      	strb	r3, [r7, #15]
      break;
 80050d2:	e004      	b.n	80050de <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80050d4:	bf00      	nop
 80050d6:	e002      	b.n	80050de <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80050d8:	bf00      	nop
 80050da:	e000      	b.n	80050de <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80050dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d169      	bne.n	80051b8 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80050e4:	4b37      	ldr	r3, [pc, #220]	@ (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a36      	ldr	r2, [pc, #216]	@ (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 80050ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050f0:	f7fd f9bc 	bl	800246c <HAL_GetTick>
 80050f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050f6:	e00f      	b.n	8005118 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050f8:	f7fd f9b8 	bl	800246c <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d908      	bls.n	8005118 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005106:	4b2f      	ldr	r3, [pc, #188]	@ (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d009      	beq.n	8005126 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005116:	e006      	b.n	8005126 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005118:	4b2a      	ldr	r3, [pc, #168]	@ (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1e9      	bne.n	80050f8 <RCCEx_PLLSAI2_Config+0x84>
 8005124:	e000      	b.n	8005128 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8005126:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005128:	7bfb      	ldrb	r3, [r7, #15]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d144      	bne.n	80051b8 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d115      	bne.n	8005160 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005134:	4b23      	ldr	r3, [pc, #140]	@ (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 8005136:	695a      	ldr	r2, [r3, #20]
 8005138:	4b23      	ldr	r3, [pc, #140]	@ (80051c8 <RCCEx_PLLSAI2_Config+0x154>)
 800513a:	4013      	ands	r3, r2
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6892      	ldr	r2, [r2, #8]
 8005140:	0211      	lsls	r1, r2, #8
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	68d2      	ldr	r2, [r2, #12]
 8005146:	06d2      	lsls	r2, r2, #27
 8005148:	4311      	orrs	r1, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6852      	ldr	r2, [r2, #4]
 800514e:	3a01      	subs	r2, #1
 8005150:	0112      	lsls	r2, r2, #4
 8005152:	4311      	orrs	r1, r2
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6812      	ldr	r2, [r2, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	491a      	ldr	r1, [pc, #104]	@ (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 800515c:	4313      	orrs	r3, r2
 800515e:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005160:	4b18      	ldr	r3, [pc, #96]	@ (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a17      	ldr	r2, [pc, #92]	@ (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 8005166:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800516a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800516c:	f7fd f97e 	bl	800246c <HAL_GetTick>
 8005170:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005172:	e00f      	b.n	8005194 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005174:	f7fd f97a 	bl	800246c <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d908      	bls.n	8005194 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005182:	4b10      	ldr	r3, [pc, #64]	@ (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d109      	bne.n	80051a2 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005192:	e006      	b.n	80051a2 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005194:	4b0b      	ldr	r3, [pc, #44]	@ (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0e9      	beq.n	8005174 <RCCEx_PLLSAI2_Config+0x100>
 80051a0:	e000      	b.n	80051a4 <RCCEx_PLLSAI2_Config+0x130>
          break;
 80051a2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d106      	bne.n	80051b8 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80051aa:	4b06      	ldr	r3, [pc, #24]	@ (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 80051ac:	695a      	ldr	r2, [r3, #20]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	4904      	ldr	r1, [pc, #16]	@ (80051c4 <RCCEx_PLLSAI2_Config+0x150>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40021000 	.word	0x40021000
 80051c8:	07ff800c 	.word	0x07ff800c

080051cc <_ZdlPvj>:
 80051cc:	f000 b800 	b.w	80051d0 <_ZdlPv>

080051d0 <_ZdlPv>:
 80051d0:	f000 b800 	b.w	80051d4 <free>

080051d4 <free>:
 80051d4:	4b02      	ldr	r3, [pc, #8]	@ (80051e0 <free+0xc>)
 80051d6:	4601      	mov	r1, r0
 80051d8:	6818      	ldr	r0, [r3, #0]
 80051da:	f000 b84b 	b.w	8005274 <_free_r>
 80051de:	bf00      	nop
 80051e0:	2000000c 	.word	0x2000000c

080051e4 <__malloc_lock>:
 80051e4:	4801      	ldr	r0, [pc, #4]	@ (80051ec <__malloc_lock+0x8>)
 80051e6:	f000 b835 	b.w	8005254 <__retarget_lock_acquire_recursive>
 80051ea:	bf00      	nop
 80051ec:	2000069c 	.word	0x2000069c

080051f0 <__malloc_unlock>:
 80051f0:	4801      	ldr	r0, [pc, #4]	@ (80051f8 <__malloc_unlock+0x8>)
 80051f2:	f000 b830 	b.w	8005256 <__retarget_lock_release_recursive>
 80051f6:	bf00      	nop
 80051f8:	2000069c 	.word	0x2000069c

080051fc <memset>:
 80051fc:	4402      	add	r2, r0
 80051fe:	4603      	mov	r3, r0
 8005200:	4293      	cmp	r3, r2
 8005202:	d100      	bne.n	8005206 <memset+0xa>
 8005204:	4770      	bx	lr
 8005206:	f803 1b01 	strb.w	r1, [r3], #1
 800520a:	e7f9      	b.n	8005200 <memset+0x4>

0800520c <__libc_init_array>:
 800520c:	b570      	push	{r4, r5, r6, lr}
 800520e:	4d0d      	ldr	r5, [pc, #52]	@ (8005244 <__libc_init_array+0x38>)
 8005210:	2600      	movs	r6, #0
 8005212:	4c0d      	ldr	r4, [pc, #52]	@ (8005248 <__libc_init_array+0x3c>)
 8005214:	1b64      	subs	r4, r4, r5
 8005216:	10a4      	asrs	r4, r4, #2
 8005218:	42a6      	cmp	r6, r4
 800521a:	d109      	bne.n	8005230 <__libc_init_array+0x24>
 800521c:	4d0b      	ldr	r5, [pc, #44]	@ (800524c <__libc_init_array+0x40>)
 800521e:	2600      	movs	r6, #0
 8005220:	4c0b      	ldr	r4, [pc, #44]	@ (8005250 <__libc_init_array+0x44>)
 8005222:	f000 f871 	bl	8005308 <_init>
 8005226:	1b64      	subs	r4, r4, r5
 8005228:	10a4      	asrs	r4, r4, #2
 800522a:	42a6      	cmp	r6, r4
 800522c:	d105      	bne.n	800523a <__libc_init_array+0x2e>
 800522e:	bd70      	pop	{r4, r5, r6, pc}
 8005230:	f855 3b04 	ldr.w	r3, [r5], #4
 8005234:	3601      	adds	r6, #1
 8005236:	4798      	blx	r3
 8005238:	e7ee      	b.n	8005218 <__libc_init_array+0xc>
 800523a:	f855 3b04 	ldr.w	r3, [r5], #4
 800523e:	3601      	adds	r6, #1
 8005240:	4798      	blx	r3
 8005242:	e7f2      	b.n	800522a <__libc_init_array+0x1e>
 8005244:	080053ac 	.word	0x080053ac
 8005248:	080053ac 	.word	0x080053ac
 800524c:	080053ac 	.word	0x080053ac
 8005250:	080053b0 	.word	0x080053b0

08005254 <__retarget_lock_acquire_recursive>:
 8005254:	4770      	bx	lr

08005256 <__retarget_lock_release_recursive>:
 8005256:	4770      	bx	lr

08005258 <memcpy>:
 8005258:	440a      	add	r2, r1
 800525a:	1e43      	subs	r3, r0, #1
 800525c:	4291      	cmp	r1, r2
 800525e:	d100      	bne.n	8005262 <memcpy+0xa>
 8005260:	4770      	bx	lr
 8005262:	b510      	push	{r4, lr}
 8005264:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005268:	4291      	cmp	r1, r2
 800526a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800526e:	d1f9      	bne.n	8005264 <memcpy+0xc>
 8005270:	bd10      	pop	{r4, pc}
	...

08005274 <_free_r>:
 8005274:	b538      	push	{r3, r4, r5, lr}
 8005276:	4605      	mov	r5, r0
 8005278:	2900      	cmp	r1, #0
 800527a:	d041      	beq.n	8005300 <_free_r+0x8c>
 800527c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005280:	1f0c      	subs	r4, r1, #4
 8005282:	2b00      	cmp	r3, #0
 8005284:	bfb8      	it	lt
 8005286:	18e4      	addlt	r4, r4, r3
 8005288:	f7ff ffac 	bl	80051e4 <__malloc_lock>
 800528c:	4a1d      	ldr	r2, [pc, #116]	@ (8005304 <_free_r+0x90>)
 800528e:	6813      	ldr	r3, [r2, #0]
 8005290:	b933      	cbnz	r3, 80052a0 <_free_r+0x2c>
 8005292:	6063      	str	r3, [r4, #4]
 8005294:	6014      	str	r4, [r2, #0]
 8005296:	4628      	mov	r0, r5
 8005298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800529c:	f7ff bfa8 	b.w	80051f0 <__malloc_unlock>
 80052a0:	42a3      	cmp	r3, r4
 80052a2:	d908      	bls.n	80052b6 <_free_r+0x42>
 80052a4:	6820      	ldr	r0, [r4, #0]
 80052a6:	1821      	adds	r1, r4, r0
 80052a8:	428b      	cmp	r3, r1
 80052aa:	bf01      	itttt	eq
 80052ac:	6819      	ldreq	r1, [r3, #0]
 80052ae:	685b      	ldreq	r3, [r3, #4]
 80052b0:	1809      	addeq	r1, r1, r0
 80052b2:	6021      	streq	r1, [r4, #0]
 80052b4:	e7ed      	b.n	8005292 <_free_r+0x1e>
 80052b6:	461a      	mov	r2, r3
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	b10b      	cbz	r3, 80052c0 <_free_r+0x4c>
 80052bc:	42a3      	cmp	r3, r4
 80052be:	d9fa      	bls.n	80052b6 <_free_r+0x42>
 80052c0:	6811      	ldr	r1, [r2, #0]
 80052c2:	1850      	adds	r0, r2, r1
 80052c4:	42a0      	cmp	r0, r4
 80052c6:	d10b      	bne.n	80052e0 <_free_r+0x6c>
 80052c8:	6820      	ldr	r0, [r4, #0]
 80052ca:	4401      	add	r1, r0
 80052cc:	1850      	adds	r0, r2, r1
 80052ce:	6011      	str	r1, [r2, #0]
 80052d0:	4283      	cmp	r3, r0
 80052d2:	d1e0      	bne.n	8005296 <_free_r+0x22>
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	4408      	add	r0, r1
 80052da:	6053      	str	r3, [r2, #4]
 80052dc:	6010      	str	r0, [r2, #0]
 80052de:	e7da      	b.n	8005296 <_free_r+0x22>
 80052e0:	d902      	bls.n	80052e8 <_free_r+0x74>
 80052e2:	230c      	movs	r3, #12
 80052e4:	602b      	str	r3, [r5, #0]
 80052e6:	e7d6      	b.n	8005296 <_free_r+0x22>
 80052e8:	6820      	ldr	r0, [r4, #0]
 80052ea:	1821      	adds	r1, r4, r0
 80052ec:	428b      	cmp	r3, r1
 80052ee:	bf02      	ittt	eq
 80052f0:	6819      	ldreq	r1, [r3, #0]
 80052f2:	685b      	ldreq	r3, [r3, #4]
 80052f4:	1809      	addeq	r1, r1, r0
 80052f6:	6063      	str	r3, [r4, #4]
 80052f8:	bf08      	it	eq
 80052fa:	6021      	streq	r1, [r4, #0]
 80052fc:	6054      	str	r4, [r2, #4]
 80052fe:	e7ca      	b.n	8005296 <_free_r+0x22>
 8005300:	bd38      	pop	{r3, r4, r5, pc}
 8005302:	bf00      	nop
 8005304:	20000560 	.word	0x20000560

08005308 <_init>:
 8005308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530a:	bf00      	nop
 800530c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530e:	bc08      	pop	{r3}
 8005310:	469e      	mov	lr, r3
 8005312:	4770      	bx	lr

08005314 <_fini>:
 8005314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005316:	bf00      	nop
 8005318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800531a:	bc08      	pop	{r3}
 800531c:	469e      	mov	lr, r3
 800531e:	4770      	bx	lr
