
Antenna_tracking_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f6c  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08007164  08007164  00017164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071e4  080071e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080071e4  080071e4  000171e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071ec  080071ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071ec  080071ec  000171ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071f0  080071f0  000171f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080071f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  2000000c  08007200  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08007200  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d051  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035ec  00000000  00000000  0003d093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a60  00000000  00000000  00040680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001918  00000000  00000000  000420e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e591  00000000  00000000  000439f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc3d  00000000  00000000  00071f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001315a9  00000000  00000000  0008dbc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bf16f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007414  00000000  00000000  001bf1c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	e000      	b.n	800020a <__do_global_dtors_aux+0x12>
 8000208:	bf00      	nop
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800714c 	.word	0x0800714c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	e000      	b.n	800022a <frame_dummy+0xe>
 8000228:	bf00      	nop
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800714c 	.word	0x0800714c

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__aeabi_d2iz>:
 80009d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009dc:	d215      	bcs.n	8000a0a <__aeabi_d2iz+0x36>
 80009de:	d511      	bpl.n	8000a04 <__aeabi_d2iz+0x30>
 80009e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e8:	d912      	bls.n	8000a10 <__aeabi_d2iz+0x3c>
 80009ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009fa:	fa23 f002 	lsr.w	r0, r3, r2
 80009fe:	bf18      	it	ne
 8000a00:	4240      	negne	r0, r0
 8000a02:	4770      	bx	lr
 8000a04:	f04f 0000 	mov.w	r0, #0
 8000a08:	4770      	bx	lr
 8000a0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a0e:	d105      	bne.n	8000a1c <__aeabi_d2iz+0x48>
 8000a10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a14:	bf08      	it	eq
 8000a16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a1a:	4770      	bx	lr
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_d2uiz>:
 8000a24:	004a      	lsls	r2, r1, #1
 8000a26:	d211      	bcs.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a2c:	d211      	bcs.n	8000a52 <__aeabi_d2uiz+0x2e>
 8000a2e:	d50d      	bpl.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d40e      	bmi.n	8000a58 <__aeabi_d2uiz+0x34>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d102      	bne.n	8000a5e <__aeabi_d2uiz+0x3a>
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	4770      	bx	lr
 8000a5e:	f04f 0000 	mov.w	r0, #0
 8000a62:	4770      	bx	lr

08000a64 <__aeabi_uldivmod>:
 8000a64:	b953      	cbnz	r3, 8000a7c <__aeabi_uldivmod+0x18>
 8000a66:	b94a      	cbnz	r2, 8000a7c <__aeabi_uldivmod+0x18>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	bf08      	it	eq
 8000a6c:	2800      	cmpeq	r0, #0
 8000a6e:	bf1c      	itt	ne
 8000a70:	f04f 31ff 	movne.w	r1, #4294967295
 8000a74:	f04f 30ff 	movne.w	r0, #4294967295
 8000a78:	f000 b982 	b.w	8000d80 <__aeabi_idiv0>
 8000a7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a84:	f000 f806 	bl	8000a94 <__udivmoddi4>
 8000a88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a90:	b004      	add	sp, #16
 8000a92:	4770      	bx	lr

08000a94 <__udivmoddi4>:
 8000a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a98:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	460f      	mov	r7, r1
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d148      	bne.n	8000b34 <__udivmoddi4+0xa0>
 8000aa2:	428a      	cmp	r2, r1
 8000aa4:	4694      	mov	ip, r2
 8000aa6:	d961      	bls.n	8000b6c <__udivmoddi4+0xd8>
 8000aa8:	fab2 f382 	clz	r3, r2
 8000aac:	b143      	cbz	r3, 8000ac0 <__udivmoddi4+0x2c>
 8000aae:	f1c3 0120 	rsb	r1, r3, #32
 8000ab2:	409f      	lsls	r7, r3
 8000ab4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ab8:	409c      	lsls	r4, r3
 8000aba:	fa20 f101 	lsr.w	r1, r0, r1
 8000abe:	430f      	orrs	r7, r1
 8000ac0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000ac4:	fa1f fe8c 	uxth.w	lr, ip
 8000ac8:	0c22      	lsrs	r2, r4, #16
 8000aca:	fbb7 f6f1 	udiv	r6, r7, r1
 8000ace:	fb01 7716 	mls	r7, r1, r6, r7
 8000ad2:	fb06 f00e 	mul.w	r0, r6, lr
 8000ad6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ada:	4290      	cmp	r0, r2
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0x5c>
 8000ade:	eb1c 0202 	adds.w	r2, ip, r2
 8000ae2:	f106 37ff 	add.w	r7, r6, #4294967295
 8000ae6:	d202      	bcs.n	8000aee <__udivmoddi4+0x5a>
 8000ae8:	4290      	cmp	r0, r2
 8000aea:	f200 8137 	bhi.w	8000d5c <__udivmoddi4+0x2c8>
 8000aee:	463e      	mov	r6, r7
 8000af0:	1a12      	subs	r2, r2, r0
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb2 f0f1 	udiv	r0, r2, r1
 8000af8:	fb01 2210 	mls	r2, r1, r0, r2
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b04:	45a6      	cmp	lr, r4
 8000b06:	d908      	bls.n	8000b1a <__udivmoddi4+0x86>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b10:	d202      	bcs.n	8000b18 <__udivmoddi4+0x84>
 8000b12:	45a6      	cmp	lr, r4
 8000b14:	f200 811c 	bhi.w	8000d50 <__udivmoddi4+0x2bc>
 8000b18:	4610      	mov	r0, r2
 8000b1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1e:	eba4 040e 	sub.w	r4, r4, lr
 8000b22:	2600      	movs	r6, #0
 8000b24:	b11d      	cbz	r5, 8000b2e <__udivmoddi4+0x9a>
 8000b26:	40dc      	lsrs	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2e:	4631      	mov	r1, r6
 8000b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b34:	428b      	cmp	r3, r1
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0xb8>
 8000b38:	2d00      	cmp	r5, #0
 8000b3a:	f000 80fd 	beq.w	8000d38 <__udivmoddi4+0x2a4>
 8000b3e:	2600      	movs	r6, #0
 8000b40:	e9c5 0100 	strd	r0, r1, [r5]
 8000b44:	4630      	mov	r0, r6
 8000b46:	4631      	mov	r1, r6
 8000b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b4c:	fab3 f683 	clz	r6, r3
 8000b50:	2e00      	cmp	r6, #0
 8000b52:	d14b      	bne.n	8000bec <__udivmoddi4+0x158>
 8000b54:	428b      	cmp	r3, r1
 8000b56:	f0c0 80f2 	bcc.w	8000d3e <__udivmoddi4+0x2aa>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f240 80ef 	bls.w	8000d3e <__udivmoddi4+0x2aa>
 8000b60:	4630      	mov	r0, r6
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e3      	beq.n	8000b2e <__udivmoddi4+0x9a>
 8000b66:	e9c5 4700 	strd	r4, r7, [r5]
 8000b6a:	e7e0      	b.n	8000b2e <__udivmoddi4+0x9a>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xdc>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f382 	clz	r3, r2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	f040 809d 	bne.w	8000cb4 <__udivmoddi4+0x220>
 8000b7a:	1a89      	subs	r1, r1, r2
 8000b7c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000b80:	b297      	uxth	r7, r2
 8000b82:	2601      	movs	r6, #1
 8000b84:	0c20      	lsrs	r0, r4, #16
 8000b86:	fbb1 f2fe 	udiv	r2, r1, lr
 8000b8a:	fb0e 1112 	mls	r1, lr, r2, r1
 8000b8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b92:	fb07 f002 	mul.w	r0, r7, r2
 8000b96:	4288      	cmp	r0, r1
 8000b98:	d90f      	bls.n	8000bba <__udivmoddi4+0x126>
 8000b9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000b9e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000ba2:	bf2c      	ite	cs
 8000ba4:	f04f 0901 	movcs.w	r9, #1
 8000ba8:	f04f 0900 	movcc.w	r9, #0
 8000bac:	4288      	cmp	r0, r1
 8000bae:	d903      	bls.n	8000bb8 <__udivmoddi4+0x124>
 8000bb0:	f1b9 0f00 	cmp.w	r9, #0
 8000bb4:	f000 80cf 	beq.w	8000d56 <__udivmoddi4+0x2c2>
 8000bb8:	4642      	mov	r2, r8
 8000bba:	1a09      	subs	r1, r1, r0
 8000bbc:	b2a4      	uxth	r4, r4
 8000bbe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bc6:	fb00 f707 	mul.w	r7, r0, r7
 8000bca:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bce:	42a7      	cmp	r7, r4
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x150>
 8000bd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x14e>
 8000bdc:	42a7      	cmp	r7, r4
 8000bde:	f200 80b4 	bhi.w	8000d4a <__udivmoddi4+0x2b6>
 8000be2:	4608      	mov	r0, r1
 8000be4:	1be4      	subs	r4, r4, r7
 8000be6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000bea:	e79b      	b.n	8000b24 <__udivmoddi4+0x90>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa01 f406 	lsl.w	r4, r1, r6
 8000bf6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bfa:	40f9      	lsrs	r1, r7
 8000bfc:	40b2      	lsls	r2, r6
 8000bfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c02:	fa20 f307 	lsr.w	r3, r0, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	431c      	orrs	r4, r3
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fa00 f306 	lsl.w	r3, r0, r6
 8000c14:	0c20      	lsrs	r0, r4, #16
 8000c16:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c1a:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c22:	fb08 f00e 	mul.w	r0, r8, lr
 8000c26:	4288      	cmp	r0, r1
 8000c28:	d90f      	bls.n	8000c4a <__udivmoddi4+0x1b6>
 8000c2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c2e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c32:	bf2c      	ite	cs
 8000c34:	f04f 0b01 	movcs.w	fp, #1
 8000c38:	f04f 0b00 	movcc.w	fp, #0
 8000c3c:	4288      	cmp	r0, r1
 8000c3e:	d903      	bls.n	8000c48 <__udivmoddi4+0x1b4>
 8000c40:	f1bb 0f00 	cmp.w	fp, #0
 8000c44:	f000 808d 	beq.w	8000d62 <__udivmoddi4+0x2ce>
 8000c48:	46d0      	mov	r8, sl
 8000c4a:	1a09      	subs	r1, r1, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c52:	fb09 1110 	mls	r1, r9, r0, r1
 8000c56:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d907      	bls.n	8000c72 <__udivmoddi4+0x1de>
 8000c62:	eb1c 0101 	adds.w	r1, ip, r1
 8000c66:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c6a:	d201      	bcs.n	8000c70 <__udivmoddi4+0x1dc>
 8000c6c:	458e      	cmp	lr, r1
 8000c6e:	d87f      	bhi.n	8000d70 <__udivmoddi4+0x2dc>
 8000c70:	4620      	mov	r0, r4
 8000c72:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	fba0 9802 	umull	r9, r8, r0, r2
 8000c7e:	4541      	cmp	r1, r8
 8000c80:	464c      	mov	r4, r9
 8000c82:	46c6      	mov	lr, r8
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0x1f8>
 8000c86:	d106      	bne.n	8000c96 <__udivmoddi4+0x202>
 8000c88:	454b      	cmp	r3, r9
 8000c8a:	d204      	bcs.n	8000c96 <__udivmoddi4+0x202>
 8000c8c:	3801      	subs	r0, #1
 8000c8e:	ebb9 0402 	subs.w	r4, r9, r2
 8000c92:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	d070      	beq.n	8000d7c <__udivmoddi4+0x2e8>
 8000c9a:	1b1a      	subs	r2, r3, r4
 8000c9c:	eb61 010e 	sbc.w	r1, r1, lr
 8000ca0:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca4:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca8:	40f1      	lsrs	r1, r6
 8000caa:	2600      	movs	r6, #0
 8000cac:	431f      	orrs	r7, r3
 8000cae:	e9c5 7100 	strd	r7, r1, [r5]
 8000cb2:	e73c      	b.n	8000b2e <__udivmoddi4+0x9a>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0020 	rsb	r0, r3, #32
 8000cbc:	fa01 f203 	lsl.w	r2, r1, r3
 8000cc0:	fa21 f600 	lsr.w	r6, r1, r0
 8000cc4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cc8:	fa24 f100 	lsr.w	r1, r4, r0
 8000ccc:	fa1f f78c 	uxth.w	r7, ip
 8000cd0:	409c      	lsls	r4, r3
 8000cd2:	4311      	orrs	r1, r2
 8000cd4:	fbb6 f0fe 	udiv	r0, r6, lr
 8000cd8:	0c0a      	lsrs	r2, r1, #16
 8000cda:	fb0e 6610 	mls	r6, lr, r0, r6
 8000cde:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000ce2:	fb00 f607 	mul.w	r6, r0, r7
 8000ce6:	4296      	cmp	r6, r2
 8000ce8:	d90e      	bls.n	8000d08 <__udivmoddi4+0x274>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	bf2c      	ite	cs
 8000cf4:	f04f 0901 	movcs.w	r9, #1
 8000cf8:	f04f 0900 	movcc.w	r9, #0
 8000cfc:	4296      	cmp	r6, r2
 8000cfe:	d902      	bls.n	8000d06 <__udivmoddi4+0x272>
 8000d00:	f1b9 0f00 	cmp.w	r9, #0
 8000d04:	d031      	beq.n	8000d6a <__udivmoddi4+0x2d6>
 8000d06:	4640      	mov	r0, r8
 8000d08:	1b92      	subs	r2, r2, r6
 8000d0a:	b289      	uxth	r1, r1
 8000d0c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000d10:	fb0e 2216 	mls	r2, lr, r6, r2
 8000d14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000d18:	fb06 f207 	mul.w	r2, r6, r7
 8000d1c:	428a      	cmp	r2, r1
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0x29c>
 8000d20:	eb1c 0101 	adds.w	r1, ip, r1
 8000d24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d28:	d201      	bcs.n	8000d2e <__udivmoddi4+0x29a>
 8000d2a:	428a      	cmp	r2, r1
 8000d2c:	d823      	bhi.n	8000d76 <__udivmoddi4+0x2e2>
 8000d2e:	4646      	mov	r6, r8
 8000d30:	1a89      	subs	r1, r1, r2
 8000d32:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d36:	e725      	b.n	8000b84 <__udivmoddi4+0xf0>
 8000d38:	462e      	mov	r6, r5
 8000d3a:	4628      	mov	r0, r5
 8000d3c:	e6f7      	b.n	8000b2e <__udivmoddi4+0x9a>
 8000d3e:	1a84      	subs	r4, r0, r2
 8000d40:	eb61 0303 	sbc.w	r3, r1, r3
 8000d44:	2001      	movs	r0, #1
 8000d46:	461f      	mov	r7, r3
 8000d48:	e70b      	b.n	8000b62 <__udivmoddi4+0xce>
 8000d4a:	4464      	add	r4, ip
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	e749      	b.n	8000be4 <__udivmoddi4+0x150>
 8000d50:	4464      	add	r4, ip
 8000d52:	3802      	subs	r0, #2
 8000d54:	e6e1      	b.n	8000b1a <__udivmoddi4+0x86>
 8000d56:	3a02      	subs	r2, #2
 8000d58:	4461      	add	r1, ip
 8000d5a:	e72e      	b.n	8000bba <__udivmoddi4+0x126>
 8000d5c:	3e02      	subs	r6, #2
 8000d5e:	4462      	add	r2, ip
 8000d60:	e6c6      	b.n	8000af0 <__udivmoddi4+0x5c>
 8000d62:	f1a8 0802 	sub.w	r8, r8, #2
 8000d66:	4461      	add	r1, ip
 8000d68:	e76f      	b.n	8000c4a <__udivmoddi4+0x1b6>
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	4462      	add	r2, ip
 8000d6e:	e7cb      	b.n	8000d08 <__udivmoddi4+0x274>
 8000d70:	3802      	subs	r0, #2
 8000d72:	4461      	add	r1, ip
 8000d74:	e77d      	b.n	8000c72 <__udivmoddi4+0x1de>
 8000d76:	3e02      	subs	r6, #2
 8000d78:	4461      	add	r1, ip
 8000d7a:	e7d9      	b.n	8000d30 <__udivmoddi4+0x29c>
 8000d7c:	462e      	mov	r6, r5
 8000d7e:	e6d6      	b.n	8000b2e <__udivmoddi4+0x9a>

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d90:	4907      	ldr	r1, [pc, #28]	; (8000db0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000da2:	68fb      	ldr	r3, [r7, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	40021000 	.word	0x40021000

08000db4 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000dbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000dc0:	4907      	ldr	r1, [pc, #28]	; (8000de0 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000dca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	40021000 	.word	0x40021000
 8000de4:	00000000 	.word	0x00000000

08000de8 <calc_pwm_out>:

uint16_t calc_pwm_out (int percentage);
//This value calculate the value for the timer to compare with in order to determine pwm output
//percentage is a value from 0..100

uint16_t calc_pwm_out(int percentage){
 8000de8:	b5b0      	push	{r4, r5, r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
			int pwm_output;
			double duty_cycle_counter;

		  	pwm_output = (double)(percentage * (DutyCycle_max) + DutyCycle_min);//get the value in range from duty cycle max - min and get the amount of counter to compare
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff fb73 	bl	80004dc <__aeabi_i2d>
 8000df6:	f04f 0200 	mov.w	r2, #0
 8000dfa:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <calc_pwm_out+0x90>)
 8000dfc:	f7ff fbd8 	bl	80005b0 <__aeabi_dmul>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	4610      	mov	r0, r2
 8000e06:	4619      	mov	r1, r3
 8000e08:	a319      	add	r3, pc, #100	; (adr r3, 8000e70 <calc_pwm_out+0x88>)
 8000e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e0e:	f7ff fa19 	bl	8000244 <__adddf3>
 8000e12:	4602      	mov	r2, r0
 8000e14:	460b      	mov	r3, r1
 8000e16:	4610      	mov	r0, r2
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f7ff fddb 	bl	80009d4 <__aeabi_d2iz>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	617b      	str	r3, [r7, #20]

		  	duty_cycle_counter = (double)(pwm_output) / 100 * CounterPeriod;
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	f7ff fb5a 	bl	80004dc <__aeabi_i2d>
 8000e28:	f04f 0200 	mov.w	r2, #0
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <calc_pwm_out+0x94>)
 8000e2e:	f7ff fce9 	bl	8000804 <__aeabi_ddiv>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	4614      	mov	r4, r2
 8000e38:	461d      	mov	r5, r3
 8000e3a:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fb4c 	bl	80004dc <__aeabi_i2d>
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	4620      	mov	r0, r4
 8000e4a:	4629      	mov	r1, r5
 8000e4c:	f7ff fbb0 	bl	80005b0 <__aeabi_dmul>
 8000e50:	4602      	mov	r2, r0
 8000e52:	460b      	mov	r3, r1
 8000e54:	e9c7 2302 	strd	r2, r3, [r7, #8]

		  	return (uint16_t)duty_cycle_counter;
 8000e58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e5c:	f7ff fde2 	bl	8000a24 <__aeabi_d2uiz>
 8000e60:	4603      	mov	r3, r0
 8000e62:	b29b      	uxth	r3, r3

}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e6c:	f3af 8000 	nop.w
 8000e70:	eb851eb8 	.word	0xeb851eb8
 8000e74:	3faeb851 	.word	0x3faeb851
 8000e78:	3fd00000 	.word	0x3fd00000
 8000e7c:	40590000 	.word	0x40590000

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e84:	f000 fe33 	bl	8001aee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e88:	f000 f824 	bl	8000ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8c:	f000 faa2 	bl	80013d4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e90:	f000 f884 	bl	8000f9c <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8000e94:	f000 f8f8 	bl	8001088 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8000e98:	f000 f944 	bl	8001124 <MX_RTC_Init>
  MX_UCPD1_Init();
 8000e9c:	f000 fa3c 	bl	8001318 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8000ea0:	f000 fa70 	bl	8001384 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000ea4:	f000 f988 	bl	80011b8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4808      	ldr	r0, [pc, #32]	; (8000ecc <main+0x4c>)
 8000eac:	f004 f938 	bl	8005120 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pwm_output = calc_pwm_out(20);
 8000eb0:	2014      	movs	r0, #20
 8000eb2:	f7ff ff99 	bl	8000de8 <calc_pwm_out>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <main+0x50>)
 8000ebc:	801a      	strh	r2, [r3, #0]

	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_output);//(0.7*0.5+0.5)*64000
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <main+0x50>)
 8000ec0:	881a      	ldrh	r2, [r3, #0]
 8000ec2:	4b02      	ldr	r3, [pc, #8]	; (8000ecc <main+0x4c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	635a      	str	r2, [r3, #52]	; 0x34
	  pwm_output = calc_pwm_out(20);
 8000ec8:	e7f2      	b.n	8000eb0 <main+0x30>
 8000eca:	bf00      	nop
 8000ecc:	20000148 	.word	0x20000148
 8000ed0:	20000488 	.word	0x20000488

08000ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b098      	sub	sp, #96	; 0x60
 8000ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eda:	f107 0318 	add.w	r3, r7, #24
 8000ede:	2248      	movs	r2, #72	; 0x48
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f006 f92a 	bl	800713c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ef6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000efa:	f002 f9bf 	bl	800327c <HAL_PWREx_ControlVoltageScaling>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f04:	f000 fb06 	bl	8001514 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f08:	f002 f99a 	bl	8003240 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f0c:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <SystemClock_Config+0xc4>)
 8000f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f12:	4a21      	ldr	r2, [pc, #132]	; (8000f98 <SystemClock_Config+0xc4>)
 8000f14:	f023 0318 	bic.w	r3, r3, #24
 8000f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8000f1c:	2334      	movs	r3, #52	; 0x34
 8000f1e:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f20:	2381      	movs	r3, #129	; 0x81
 8000f22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f24:	2301      	movs	r3, #1
 8000f26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f30:	2360      	movs	r3, #96	; 0x60
 8000f32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f34:	2302      	movs	r3, #2
 8000f36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000f40:	2318      	movs	r3, #24
 8000f42:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f44:	2307      	movs	r3, #7
 8000f46:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f50:	f107 0318 	add.w	r3, r7, #24
 8000f54:	4618      	mov	r0, r3
 8000f56:	f002 fa21 	bl	800339c <HAL_RCC_OscConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000f60:	f000 fad8 	bl	8001514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f64:	230f      	movs	r3, #15
 8000f66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f002 feee 	bl	8003d60 <HAL_RCC_ClockConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000f8a:	f000 fac3 	bl	8001514 <Error_Handler>
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3760      	adds	r7, #96	; 0x60
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000

08000f9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
 8000fbc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fbe:	4b2f      	ldr	r3, [pc, #188]	; (800107c <MX_ADC1_Init+0xe0>)
 8000fc0:	4a2f      	ldr	r2, [pc, #188]	; (8001080 <MX_ADC1_Init+0xe4>)
 8000fc2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fc4:	4b2d      	ldr	r3, [pc, #180]	; (800107c <MX_ADC1_Init+0xe0>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fca:	4b2c      	ldr	r3, [pc, #176]	; (800107c <MX_ADC1_Init+0xe0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fd0:	4b2a      	ldr	r3, [pc, #168]	; (800107c <MX_ADC1_Init+0xe0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fd6:	4b29      	ldr	r3, [pc, #164]	; (800107c <MX_ADC1_Init+0xe0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fdc:	4b27      	ldr	r3, [pc, #156]	; (800107c <MX_ADC1_Init+0xe0>)
 8000fde:	2204      	movs	r2, #4
 8000fe0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fe2:	4b26      	ldr	r3, [pc, #152]	; (800107c <MX_ADC1_Init+0xe0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fe8:	4b24      	ldr	r3, [pc, #144]	; (800107c <MX_ADC1_Init+0xe0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000fee:	4b23      	ldr	r3, [pc, #140]	; (800107c <MX_ADC1_Init+0xe0>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ff4:	4b21      	ldr	r3, [pc, #132]	; (800107c <MX_ADC1_Init+0xe0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ffc:	4b1f      	ldr	r3, [pc, #124]	; (800107c <MX_ADC1_Init+0xe0>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001002:	4b1e      	ldr	r3, [pc, #120]	; (800107c <MX_ADC1_Init+0xe0>)
 8001004:	2200      	movs	r2, #0
 8001006:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001008:	4b1c      	ldr	r3, [pc, #112]	; (800107c <MX_ADC1_Init+0xe0>)
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <MX_ADC1_Init+0xe0>)
 8001012:	2200      	movs	r2, #0
 8001014:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001016:	4b19      	ldr	r3, [pc, #100]	; (800107c <MX_ADC1_Init+0xe0>)
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800101e:	4817      	ldr	r0, [pc, #92]	; (800107c <MX_ADC1_Init+0xe0>)
 8001020:	f000 ff7c 	bl	8001f1c <HAL_ADC_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800102a:	f000 fa73 	bl	8001514 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4619      	mov	r1, r3
 8001038:	4810      	ldr	r0, [pc, #64]	; (800107c <MX_ADC1_Init+0xe0>)
 800103a:	f001 fcd1 	bl	80029e0 <HAL_ADCEx_MultiModeConfigChannel>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001044:	f000 fa66 	bl	8001514 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <MX_ADC1_Init+0xe8>)
 800104a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800104c:	2306      	movs	r3, #6
 800104e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001054:	237f      	movs	r3, #127	; 0x7f
 8001056:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001058:	2304      	movs	r3, #4
 800105a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_ADC1_Init+0xe0>)
 8001066:	f001 f8ab 	bl	80021c0 <HAL_ADC_ConfigChannel>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001070:	f000 fa50 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	3728      	adds	r7, #40	; 0x28
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000028 	.word	0x20000028
 8001080:	42028000 	.word	0x42028000
 8001084:	0c900008 	.word	0x0c900008

08001088 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800108c:	4b22      	ldr	r3, [pc, #136]	; (8001118 <MX_LPUART1_UART_Init+0x90>)
 800108e:	4a23      	ldr	r2, [pc, #140]	; (800111c <MX_LPUART1_UART_Init+0x94>)
 8001090:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001092:	4b21      	ldr	r3, [pc, #132]	; (8001118 <MX_LPUART1_UART_Init+0x90>)
 8001094:	4a22      	ldr	r2, [pc, #136]	; (8001120 <MX_LPUART1_UART_Init+0x98>)
 8001096:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001098:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <MX_LPUART1_UART_Init+0x90>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800109e:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <MX_LPUART1_UART_Init+0x90>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80010a4:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <MX_LPUART1_UART_Init+0x90>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80010aa:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <MX_LPUART1_UART_Init+0x90>)
 80010ac:	220c      	movs	r2, #12
 80010ae:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b0:	4b19      	ldr	r3, [pc, #100]	; (8001118 <MX_LPUART1_UART_Init+0x90>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <MX_LPUART1_UART_Init+0x90>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <MX_LPUART1_UART_Init+0x90>)
 80010be:	2200      	movs	r2, #0
 80010c0:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <MX_LPUART1_UART_Init+0x90>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <MX_LPUART1_UART_Init+0x90>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80010ce:	4812      	ldr	r0, [pc, #72]	; (8001118 <MX_LPUART1_UART_Init+0x90>)
 80010d0:	f005 f85c 	bl	800618c <HAL_UART_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80010da:	f000 fa1b 	bl	8001514 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010de:	2100      	movs	r1, #0
 80010e0:	480d      	ldr	r0, [pc, #52]	; (8001118 <MX_LPUART1_UART_Init+0x90>)
 80010e2:	f005 fd49 	bl	8006b78 <HAL_UARTEx_SetTxFifoThreshold>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80010ec:	f000 fa12 	bl	8001514 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f0:	2100      	movs	r1, #0
 80010f2:	4809      	ldr	r0, [pc, #36]	; (8001118 <MX_LPUART1_UART_Init+0x90>)
 80010f4:	f005 fd7e 	bl	8006bf4 <HAL_UARTEx_SetRxFifoThreshold>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80010fe:	f000 fa09 	bl	8001514 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_LPUART1_UART_Init+0x90>)
 8001104:	f005 fcff 	bl	8006b06 <HAL_UARTEx_DisableFifoMode>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 800110e:	f000 fa01 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000090 	.word	0x20000090
 800111c:	40008000 	.word	0x40008000
 8001120:	00033324 	.word	0x00033324

08001124 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800112a:	463b      	mov	r3, r7
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
 8001138:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <MX_RTC_Init+0x8c>)
 800113c:	4a1d      	ldr	r2, [pc, #116]	; (80011b4 <MX_RTC_Init+0x90>)
 800113e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <MX_RTC_Init+0x8c>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <MX_RTC_Init+0x8c>)
 8001148:	227f      	movs	r2, #127	; 0x7f
 800114a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <MX_RTC_Init+0x8c>)
 800114e:	22ff      	movs	r2, #255	; 0xff
 8001150:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <MX_RTC_Init+0x8c>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <MX_RTC_Init+0x8c>)
 800115a:	2200      	movs	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <MX_RTC_Init+0x8c>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_RTC_Init+0x8c>)
 8001166:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800116a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800116c:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <MX_RTC_Init+0x8c>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001172:	480f      	ldr	r0, [pc, #60]	; (80011b0 <MX_RTC_Init+0x8c>)
 8001174:	f003 fdea 	bl	8004d4c <HAL_RTC_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800117e:	f000 f9c9 	bl	8001514 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001182:	2300      	movs	r3, #0
 8001184:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001192:	463b      	mov	r3, r7
 8001194:	4619      	mov	r1, r3
 8001196:	4806      	ldr	r0, [pc, #24]	; (80011b0 <MX_RTC_Init+0x8c>)
 8001198:	f003 fede 	bl	8004f58 <HAL_RTCEx_PrivilegeModeSet>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80011a2:	f000 f9b7 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000120 	.word	0x20000120
 80011b4:	40002800 	.word	0x40002800

080011b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b09c      	sub	sp, #112	; 0x70
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
 80011e8:	615a      	str	r2, [r3, #20]
 80011ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	2234      	movs	r2, #52	; 0x34
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f005 ffa2 	bl	800713c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011f8:	4b45      	ldr	r3, [pc, #276]	; (8001310 <MX_TIM1_Init+0x158>)
 80011fa:	4a46      	ldr	r2, [pc, #280]	; (8001314 <MX_TIM1_Init+0x15c>)
 80011fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14;
 80011fe:	4b44      	ldr	r3, [pc, #272]	; (8001310 <MX_TIM1_Init+0x158>)
 8001200:	220e      	movs	r2, #14
 8001202:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001204:	4b42      	ldr	r3, [pc, #264]	; (8001310 <MX_TIM1_Init+0x158>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000;
 800120a:	4b41      	ldr	r3, [pc, #260]	; (8001310 <MX_TIM1_Init+0x158>)
 800120c:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001210:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001212:	4b3f      	ldr	r3, [pc, #252]	; (8001310 <MX_TIM1_Init+0x158>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001218:	4b3d      	ldr	r3, [pc, #244]	; (8001310 <MX_TIM1_Init+0x158>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121e:	4b3c      	ldr	r3, [pc, #240]	; (8001310 <MX_TIM1_Init+0x158>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001224:	483a      	ldr	r0, [pc, #232]	; (8001310 <MX_TIM1_Init+0x158>)
 8001226:	f003 fec3 	bl	8004fb0 <HAL_TIM_Base_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001230:	f000 f970 	bl	8001514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001238:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800123a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800123e:	4619      	mov	r1, r3
 8001240:	4833      	ldr	r0, [pc, #204]	; (8001310 <MX_TIM1_Init+0x158>)
 8001242:	f004 f983 	bl	800554c <HAL_TIM_ConfigClockSource>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800124c:	f000 f962 	bl	8001514 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001250:	482f      	ldr	r0, [pc, #188]	; (8001310 <MX_TIM1_Init+0x158>)
 8001252:	f003 ff04 	bl	800505e <HAL_TIM_PWM_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800125c:	f000 f95a 	bl	8001514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001260:	2300      	movs	r3, #0
 8001262:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001264:	2300      	movs	r3, #0
 8001266:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800126c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001270:	4619      	mov	r1, r3
 8001272:	4827      	ldr	r0, [pc, #156]	; (8001310 <MX_TIM1_Init+0x158>)
 8001274:	f004 fe62 	bl	8005f3c <HAL_TIMEx_MasterConfigSynchronization>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800127e:	f000 f949 	bl	8001514 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001282:	2360      	movs	r3, #96	; 0x60
 8001284:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800128a:	2300      	movs	r3, #0
 800128c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800128e:	2300      	movs	r3, #0
 8001290:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800129e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012a2:	2200      	movs	r2, #0
 80012a4:	4619      	mov	r1, r3
 80012a6:	481a      	ldr	r0, [pc, #104]	; (8001310 <MX_TIM1_Init+0x158>)
 80012a8:	f004 f840 	bl	800532c <HAL_TIM_PWM_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80012b2:	f000 f92f 	bl	8001514 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80012e6:	2300      	movs	r3, #0
 80012e8:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	4619      	mov	r1, r3
 80012f2:	4807      	ldr	r0, [pc, #28]	; (8001310 <MX_TIM1_Init+0x158>)
 80012f4:	f004 feaa 	bl	800604c <HAL_TIMEx_ConfigBreakDeadTime>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80012fe:	f000 f909 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001302:	4803      	ldr	r0, [pc, #12]	; (8001310 <MX_TIM1_Init+0x158>)
 8001304:	f000 fa48 	bl	8001798 <HAL_TIM_MspPostInit>

}
 8001308:	bf00      	nop
 800130a:	3770      	adds	r7, #112	; 0x70
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000148 	.word	0x20000148
 8001314:	40012c00 	.word	0x40012c00

08001318 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131e:	463b      	mov	r3, r7
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
 800132c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800132e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001332:	f7ff fd3f 	bl	8000db4 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001336:	2002      	movs	r0, #2
 8001338:	f7ff fd24 	bl	8000d84 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800133c:	2001      	movs	r0, #1
 800133e:	f7ff fd21 	bl	8000d84 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001346:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001348:	2303      	movs	r3, #3
 800134a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001350:	463b      	mov	r3, r7
 8001352:	4619      	mov	r1, r3
 8001354:	4809      	ldr	r0, [pc, #36]	; (800137c <MX_UCPD1_Init+0x64>)
 8001356:	f005 fe24 	bl	8006fa2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800135a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800135e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001360:	2303      	movs	r3, #3
 8001362:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001364:	2300      	movs	r3, #0
 8001366:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	463b      	mov	r3, r7
 800136a:	4619      	mov	r1, r3
 800136c:	4804      	ldr	r0, [pc, #16]	; (8001380 <MX_UCPD1_Init+0x68>)
 800136e:	f005 fe18 	bl	8006fa2 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	42020400 	.word	0x42020400
 8001380:	42020000 	.word	0x42020000

08001384 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <MX_USB_PCD_Init+0x48>)
 800138a:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <MX_USB_PCD_Init+0x4c>)
 800138c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_USB_PCD_Init+0x48>)
 8001390:	2208      	movs	r2, #8
 8001392:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <MX_USB_PCD_Init+0x48>)
 8001396:	2202      	movs	r2, #2
 8001398:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_USB_PCD_Init+0x48>)
 800139c:	2202      	movs	r2, #2
 800139e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <MX_USB_PCD_Init+0x48>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_USB_PCD_Init+0x48>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <MX_USB_PCD_Init+0x48>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_USB_PCD_Init+0x48>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	; (80013cc <MX_USB_PCD_Init+0x48>)
 80013ba:	f001 fe31 	bl	8003020 <HAL_PCD_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80013c4:	f000 f8a6 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000194 	.word	0x20000194
 80013d0:	4000d400 	.word	0x4000d400

080013d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ea:	4b45      	ldr	r3, [pc, #276]	; (8001500 <MX_GPIO_Init+0x12c>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	4a44      	ldr	r2, [pc, #272]	; (8001500 <MX_GPIO_Init+0x12c>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f6:	4b42      	ldr	r3, [pc, #264]	; (8001500 <MX_GPIO_Init+0x12c>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001402:	4b3f      	ldr	r3, [pc, #252]	; (8001500 <MX_GPIO_Init+0x12c>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	4a3e      	ldr	r2, [pc, #248]	; (8001500 <MX_GPIO_Init+0x12c>)
 8001408:	f043 0310 	orr.w	r3, r3, #16
 800140c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140e:	4b3c      	ldr	r3, [pc, #240]	; (8001500 <MX_GPIO_Init+0x12c>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	f003 0310 	and.w	r3, r3, #16
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	4b39      	ldr	r3, [pc, #228]	; (8001500 <MX_GPIO_Init+0x12c>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	4a38      	ldr	r2, [pc, #224]	; (8001500 <MX_GPIO_Init+0x12c>)
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001426:	4b36      	ldr	r3, [pc, #216]	; (8001500 <MX_GPIO_Init+0x12c>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001432:	4b33      	ldr	r3, [pc, #204]	; (8001500 <MX_GPIO_Init+0x12c>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	4a32      	ldr	r2, [pc, #200]	; (8001500 <MX_GPIO_Init+0x12c>)
 8001438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800143c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143e:	4b30      	ldr	r3, [pc, #192]	; (8001500 <MX_GPIO_Init+0x12c>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800144a:	f001 ff73 	bl	8003334 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	4b2c      	ldr	r3, [pc, #176]	; (8001500 <MX_GPIO_Init+0x12c>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	4a2b      	ldr	r2, [pc, #172]	; (8001500 <MX_GPIO_Init+0x12c>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145a:	4b29      	ldr	r3, [pc, #164]	; (8001500 <MX_GPIO_Init+0x12c>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	2180      	movs	r1, #128	; 0x80
 800146a:	4826      	ldr	r0, [pc, #152]	; (8001504 <MX_GPIO_Init+0x130>)
 800146c:	f001 fdc0 	bl	8002ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001476:	4824      	ldr	r0, [pc, #144]	; (8001508 <MX_GPIO_Init+0x134>)
 8001478:	f001 fdba 	bl	8002ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	21a0      	movs	r1, #160	; 0xa0
 8001480:	4822      	ldr	r0, [pc, #136]	; (800150c <MX_GPIO_Init+0x138>)
 8001482:	f001 fdb5 	bl	8002ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8001486:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800148a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800148c:	4b20      	ldr	r3, [pc, #128]	; (8001510 <MX_GPIO_Init+0x13c>)
 800148e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	481c      	ldr	r0, [pc, #112]	; (800150c <MX_GPIO_Init+0x138>)
 800149c:	f001 fc28 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a4:	2301      	movs	r3, #1
 80014a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	4813      	ldr	r0, [pc, #76]	; (8001504 <MX_GPIO_Init+0x130>)
 80014b8:	f001 fc1a 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80014bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	480c      	ldr	r0, [pc, #48]	; (8001508 <MX_GPIO_Init+0x134>)
 80014d6:	f001 fc0b 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 80014da:	23a0      	movs	r3, #160	; 0xa0
 80014dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014de:	2301      	movs	r3, #1
 80014e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e6:	2300      	movs	r3, #0
 80014e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	4806      	ldr	r0, [pc, #24]	; (800150c <MX_GPIO_Init+0x138>)
 80014f2:	f001 fbfd 	bl	8002cf0 <HAL_GPIO_Init>

}
 80014f6:	bf00      	nop
 80014f8:	3728      	adds	r7, #40	; 0x28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000
 8001504:	42020800 	.word	0x42020800
 8001508:	42020000 	.word	0x42020000
 800150c:	42020400 	.word	0x42020400
 8001510:	10110000 	.word	0x10110000

08001514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001518:	b672      	cpsid	i
}
 800151a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800151c:	e7fe      	b.n	800151c <Error_Handler+0x8>
	...

08001520 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_MspInit+0x44>)
 8001528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152a:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <HAL_MspInit+0x44>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6613      	str	r3, [r2, #96]	; 0x60
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <HAL_MspInit+0x44>)
 8001534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <HAL_MspInit+0x44>)
 8001540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001542:	4a08      	ldr	r2, [pc, #32]	; (8001564 <HAL_MspInit+0x44>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001548:	6593      	str	r3, [r2, #88]	; 0x58
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_MspInit+0x44>)
 800154c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40021000 	.word	0x40021000

08001568 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b0ae      	sub	sp, #184	; 0xb8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	2294      	movs	r2, #148	; 0x94
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f005 fdd7 	bl	800713c <memset>
  if(hadc->Instance==ADC1)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a1f      	ldr	r2, [pc, #124]	; (8001610 <HAL_ADC_MspInit+0xa8>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d137      	bne.n	8001608 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001598:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800159c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800159e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80015a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a6:	f107 0310 	add.w	r3, r7, #16
 80015aa:	4618      	mov	r0, r3
 80015ac:	f002 feb8 	bl	8004320 <HAL_RCCEx_PeriphCLKConfig>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80015b6:	f7ff ffad 	bl	8001514 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <HAL_ADC_MspInit+0xac>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015be:	4a15      	ldr	r2, [pc, #84]	; (8001614 <HAL_ADC_MspInit+0xac>)
 80015c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <HAL_ADC_MspInit+0xac>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <HAL_ADC_MspInit+0xac>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	4a0f      	ldr	r2, [pc, #60]	; (8001614 <HAL_ADC_MspInit+0xac>)
 80015d8:	f043 0304 	orr.w	r3, r3, #4
 80015dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015de:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <HAL_ADC_MspInit+0xac>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80015ea:	2304      	movs	r3, #4
 80015ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f0:	2303      	movs	r3, #3
 80015f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001600:	4619      	mov	r1, r3
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <HAL_ADC_MspInit+0xb0>)
 8001604:	f001 fb74 	bl	8002cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001608:	bf00      	nop
 800160a:	37b8      	adds	r7, #184	; 0xb8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	42028000 	.word	0x42028000
 8001614:	40021000 	.word	0x40021000
 8001618:	42020800 	.word	0x42020800

0800161c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b0ae      	sub	sp, #184	; 0xb8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	2294      	movs	r2, #148	; 0x94
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f005 fd7d 	bl	800713c <memset>
  if(huart->Instance==LPUART1)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a22      	ldr	r2, [pc, #136]	; (80016d0 <HAL_UART_MspInit+0xb4>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d13d      	bne.n	80016c8 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800164c:	2320      	movs	r3, #32
 800164e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001650:	2300      	movs	r3, #0
 8001652:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001654:	f107 0310 	add.w	r3, r7, #16
 8001658:	4618      	mov	r0, r3
 800165a:	f002 fe61 	bl	8004320 <HAL_RCCEx_PeriphCLKConfig>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001664:	f7ff ff56 	bl	8001514 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001668:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <HAL_UART_MspInit+0xb8>)
 800166a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166c:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <HAL_UART_MspInit+0xb8>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001674:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <HAL_UART_MspInit+0xb8>)
 8001676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001680:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <HAL_UART_MspInit+0xb8>)
 8001682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001684:	4a13      	ldr	r2, [pc, #76]	; (80016d4 <HAL_UART_MspInit+0xb8>)
 8001686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800168a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_UART_MspInit+0xb8>)
 800168e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001698:	f001 fe4c 	bl	8003334 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 800169c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	2300      	movs	r3, #0
 80016b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80016b6:	2308      	movs	r3, #8
 80016b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016c0:	4619      	mov	r1, r3
 80016c2:	4805      	ldr	r0, [pc, #20]	; (80016d8 <HAL_UART_MspInit+0xbc>)
 80016c4:	f001 fb14 	bl	8002cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80016c8:	bf00      	nop
 80016ca:	37b8      	adds	r7, #184	; 0xb8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40008000 	.word	0x40008000
 80016d4:	40021000 	.word	0x40021000
 80016d8:	42021800 	.word	0x42021800

080016dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b0a8      	sub	sp, #160	; 0xa0
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	2294      	movs	r2, #148	; 0x94
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f005 fd25 	bl	800713c <memset>
  if(hrtc->Instance==RTC)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a16      	ldr	r2, [pc, #88]	; (8001750 <HAL_RTC_MspInit+0x74>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d124      	bne.n	8001746 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001700:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001702:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001706:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	4618      	mov	r0, r3
 8001710:	f002 fe06 	bl	8004320 <HAL_RCCEx_PeriphCLKConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800171a:	f7ff fefb 	bl	8001514 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800171e:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <HAL_RTC_MspInit+0x78>)
 8001720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001724:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <HAL_RTC_MspInit+0x78>)
 8001726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800172a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_RTC_MspInit+0x78>)
 8001730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001732:	4a08      	ldr	r2, [pc, #32]	; (8001754 <HAL_RTC_MspInit+0x78>)
 8001734:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001738:	6593      	str	r3, [r2, #88]	; 0x58
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_RTC_MspInit+0x78>)
 800173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001746:	bf00      	nop
 8001748:	37a0      	adds	r7, #160	; 0xa0
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40002800 	.word	0x40002800
 8001754:	40021000 	.word	0x40021000

08001758 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <HAL_TIM_Base_MspInit+0x38>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d10b      	bne.n	8001782 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_TIM_Base_MspInit+0x3c>)
 800176c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176e:	4a09      	ldr	r2, [pc, #36]	; (8001794 <HAL_TIM_Base_MspInit+0x3c>)
 8001770:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001774:	6613      	str	r3, [r2, #96]	; 0x60
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <HAL_TIM_Base_MspInit+0x3c>)
 8001778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40012c00 	.word	0x40012c00
 8001794:	40021000 	.word	0x40021000

08001798 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a11      	ldr	r2, [pc, #68]	; (80017fc <HAL_TIM_MspPostInit+0x64>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d11c      	bne.n	80017f4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_TIM_MspPostInit+0x68>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	4a10      	ldr	r2, [pc, #64]	; (8001800 <HAL_TIM_MspPostInit+0x68>)
 80017c0:	f043 0310 	orr.w	r3, r3, #16
 80017c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <HAL_TIM_MspPostInit+0x68>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	f003 0310 	and.w	r3, r3, #16
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017e4:	2301      	movs	r3, #1
 80017e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	4619      	mov	r1, r3
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <HAL_TIM_MspPostInit+0x6c>)
 80017f0:	f001 fa7e 	bl	8002cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017f4:	bf00      	nop
 80017f6:	3720      	adds	r7, #32
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40012c00 	.word	0x40012c00
 8001800:	40021000 	.word	0x40021000
 8001804:	42021000 	.word	0x42021000

08001808 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b0ae      	sub	sp, #184	; 0xb8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001820:	f107 0310 	add.w	r3, r7, #16
 8001824:	2294      	movs	r2, #148	; 0x94
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f005 fc87 	bl	800713c <memset>
  if(hpcd->Instance==USB)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a22      	ldr	r2, [pc, #136]	; (80018bc <HAL_PCD_MspInit+0xb4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d13d      	bne.n	80018b4 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800183c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800183e:	2300      	movs	r3, #0
 8001840:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001844:	f107 0310 	add.w	r3, r7, #16
 8001848:	4618      	mov	r0, r3
 800184a:	f002 fd69 	bl	8004320 <HAL_RCCEx_PeriphCLKConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001854:	f7ff fe5e 	bl	8001514 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001858:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <HAL_PCD_MspInit+0xb8>)
 800185a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185c:	4a18      	ldr	r2, [pc, #96]	; (80018c0 <HAL_PCD_MspInit+0xb8>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001864:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <HAL_PCD_MspInit+0xb8>)
 8001866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001870:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001874:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001878:	2302      	movs	r3, #2
 800187a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800188a:	230a      	movs	r3, #10
 800188c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001890:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001894:	4619      	mov	r1, r3
 8001896:	480b      	ldr	r0, [pc, #44]	; (80018c4 <HAL_PCD_MspInit+0xbc>)
 8001898:	f001 fa2a 	bl	8002cf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_PCD_MspInit+0xb8>)
 800189e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a0:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <HAL_PCD_MspInit+0xb8>)
 80018a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018a6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HAL_PCD_MspInit+0xb8>)
 80018aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80018b4:	bf00      	nop
 80018b6:	37b8      	adds	r7, #184	; 0xb8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	4000d400 	.word	0x4000d400
 80018c0:	40021000 	.word	0x40021000
 80018c4:	42020000 	.word	0x42020000

080018c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <NMI_Handler+0x4>

080018ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d2:	e7fe      	b.n	80018d2 <HardFault_Handler+0x4>

080018d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <MemManage_Handler+0x4>

080018da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <BusFault_Handler+0x4>

080018e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <UsageFault_Handler+0x4>

080018e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001914:	f000 f942 	bl	8001b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}

0800191c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <SystemInit+0x20>)
 8001922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001926:	4a05      	ldr	r2, [pc, #20]	; (800193c <SystemInit+0x20>)
 8001928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800192c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001940:	b480      	push	{r7}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001946:	4b4f      	ldr	r3, [pc, #316]	; (8001a84 <SystemCoreClockUpdate+0x144>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d107      	bne.n	8001962 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001952:	4b4c      	ldr	r3, [pc, #304]	; (8001a84 <SystemCoreClockUpdate+0x144>)
 8001954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	e005      	b.n	800196e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001962:	4b48      	ldr	r3, [pc, #288]	; (8001a84 <SystemCoreClockUpdate+0x144>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	091b      	lsrs	r3, r3, #4
 8001968:	f003 030f 	and.w	r3, r3, #15
 800196c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800196e:	4a46      	ldr	r2, [pc, #280]	; (8001a88 <SystemCoreClockUpdate+0x148>)
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001976:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001978:	4b42      	ldr	r3, [pc, #264]	; (8001a84 <SystemCoreClockUpdate+0x144>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 030c 	and.w	r3, r3, #12
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d866      	bhi.n	8001a52 <SystemCoreClockUpdate+0x112>
 8001984:	a201      	add	r2, pc, #4	; (adr r2, 800198c <SystemCoreClockUpdate+0x4c>)
 8001986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198a:	bf00      	nop
 800198c:	080019c1 	.word	0x080019c1
 8001990:	08001a53 	.word	0x08001a53
 8001994:	08001a53 	.word	0x08001a53
 8001998:	08001a53 	.word	0x08001a53
 800199c:	080019c9 	.word	0x080019c9
 80019a0:	08001a53 	.word	0x08001a53
 80019a4:	08001a53 	.word	0x08001a53
 80019a8:	08001a53 	.word	0x08001a53
 80019ac:	080019d1 	.word	0x080019d1
 80019b0:	08001a53 	.word	0x08001a53
 80019b4:	08001a53 	.word	0x08001a53
 80019b8:	08001a53 	.word	0x08001a53
 80019bc:	080019d9 	.word	0x080019d9
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80019c0:	4a32      	ldr	r2, [pc, #200]	; (8001a8c <SystemCoreClockUpdate+0x14c>)
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	6013      	str	r3, [r2, #0]
      break;
 80019c6:	e048      	b.n	8001a5a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80019c8:	4b30      	ldr	r3, [pc, #192]	; (8001a8c <SystemCoreClockUpdate+0x14c>)
 80019ca:	4a31      	ldr	r2, [pc, #196]	; (8001a90 <SystemCoreClockUpdate+0x150>)
 80019cc:	601a      	str	r2, [r3, #0]
      break;
 80019ce:	e044      	b.n	8001a5a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80019d0:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <SystemCoreClockUpdate+0x14c>)
 80019d2:	4a30      	ldr	r2, [pc, #192]	; (8001a94 <SystemCoreClockUpdate+0x154>)
 80019d4:	601a      	str	r2, [r3, #0]
      break;
 80019d6:	e040      	b.n	8001a5a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80019d8:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <SystemCoreClockUpdate+0x144>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80019e2:	4b28      	ldr	r3, [pc, #160]	; (8001a84 <SystemCoreClockUpdate+0x144>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	091b      	lsrs	r3, r3, #4
 80019e8:	f003 030f 	and.w	r3, r3, #15
 80019ec:	3301      	adds	r3, #1
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d003      	beq.n	80019fe <SystemCoreClockUpdate+0xbe>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d006      	beq.n	8001a0a <SystemCoreClockUpdate+0xca>
 80019fc:	e00b      	b.n	8001a16 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80019fe:	4a24      	ldr	r2, [pc, #144]	; (8001a90 <SystemCoreClockUpdate+0x150>)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a06:	613b      	str	r3, [r7, #16]
          break;
 8001a08:	e00b      	b.n	8001a22 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001a0a:	4a22      	ldr	r2, [pc, #136]	; (8001a94 <SystemCoreClockUpdate+0x154>)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a12:	613b      	str	r3, [r7, #16]
          break;
 8001a14:	e005      	b.n	8001a22 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1e:	613b      	str	r3, [r7, #16]
          break;
 8001a20:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <SystemCoreClockUpdate+0x144>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	0a1b      	lsrs	r3, r3, #8
 8001a28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <SystemCoreClockUpdate+0x144>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	0e5b      	lsrs	r3, r3, #25
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	3301      	adds	r3, #1
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4c:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <SystemCoreClockUpdate+0x14c>)
 8001a4e:	6013      	str	r3, [r2, #0]
      break;
 8001a50:	e003      	b.n	8001a5a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001a52:	4a0e      	ldr	r2, [pc, #56]	; (8001a8c <SystemCoreClockUpdate+0x14c>)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	6013      	str	r3, [r2, #0]
      break;
 8001a58:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <SystemCoreClockUpdate+0x144>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	091b      	lsrs	r3, r3, #4
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	4a0c      	ldr	r2, [pc, #48]	; (8001a98 <SystemCoreClockUpdate+0x158>)
 8001a66:	5cd3      	ldrb	r3, [r2, r3]
 8001a68:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <SystemCoreClockUpdate+0x14c>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	fa22 f303 	lsr.w	r3, r2, r3
 8001a74:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <SystemCoreClockUpdate+0x14c>)
 8001a76:	6013      	str	r3, [r2, #0]
}
 8001a78:	bf00      	nop
 8001a7a:	371c      	adds	r7, #28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	40021000 	.word	0x40021000
 8001a88:	0800717c 	.word	0x0800717c
 8001a8c:	20000000 	.word	0x20000000
 8001a90:	00f42400 	.word	0x00f42400
 8001a94:	007a1200 	.word	0x007a1200
 8001a98:	08007164 	.word	0x08007164

08001a9c <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* set stack pointer */
 8001a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001aa0:	f7ff ff3c 	bl	800191c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001aa4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001aa6:	e003      	b.n	8001ab0 <LoopCopyDataInit>

08001aa8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001aaa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001aac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001aae:	3104      	adds	r1, #4

08001ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ab0:	480a      	ldr	r0, [pc, #40]	; (8001adc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ab4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ab6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ab8:	d3f6      	bcc.n	8001aa8 <CopyDataInit>
	ldr	r2, =_sbss
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001abc:	e002      	b.n	8001ac4 <LoopFillZerobss>

08001abe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001abe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ac0:	f842 3b04 	str.w	r3, [r2], #4

08001ac4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <LoopForever+0x16>)
	cmp	r2, r3
 8001ac6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ac8:	d3f9      	bcc.n	8001abe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001aca:	f005 fb13 	bl	80070f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ace:	f7ff f9d7 	bl	8000e80 <main>

08001ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ad2:	e7fe      	b.n	8001ad2 <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* set stack pointer */
 8001ad4:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001ad8:	080071f4 	.word	0x080071f4
	ldr	r0, =_sdata
 8001adc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ae0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001ae4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001ae8:	20000490 	.word	0x20000490

08001aec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001aec:	e7fe      	b.n	8001aec <ADC1_2_IRQHandler>

08001aee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001af8:	2004      	movs	r0, #4
 8001afa:	f001 f8c7 	bl	8002c8c <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001afe:	f7ff ff1f 	bl	8001940 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b02:	2000      	movs	r0, #0
 8001b04:	f000 f80e 	bl	8001b24 <HAL_InitTick>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	71fb      	strb	r3, [r7, #7]
 8001b12:	e001      	b.n	8001b18 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b14:	f7ff fd04 	bl	8001520 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b18:	79fb      	ldrb	r3, [r7, #7]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <HAL_InitTick+0x6c>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d023      	beq.n	8001b80 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b38:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <HAL_InitTick+0x70>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <HAL_InitTick+0x6c>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	4619      	mov	r1, r3
 8001b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f001 f8c1 	bl	8002cd6 <HAL_SYSTICK_Config>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10f      	bne.n	8001b7a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b07      	cmp	r3, #7
 8001b5e:	d809      	bhi.n	8001b74 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b60:	2200      	movs	r2, #0
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	f04f 30ff 	mov.w	r0, #4294967295
 8001b68:	f001 f89b 	bl	8002ca2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <HAL_InitTick+0x74>)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e007      	b.n	8001b84 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	e004      	b.n	8001b84 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	73fb      	strb	r3, [r7, #15]
 8001b7e:	e001      	b.n	8001b84 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000008 	.word	0x20000008
 8001b94:	20000000 	.word	0x20000000
 8001b98:	20000004 	.word	0x20000004

08001b9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_IncTick+0x20>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_IncTick+0x24>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <HAL_IncTick+0x24>)
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000008 	.word	0x20000008
 8001bc0:	2000048c 	.word	0x2000048c

08001bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_GetTick+0x14>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	2000048c 	.word	0x2000048c

08001bdc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
 8001c50:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	3360      	adds	r3, #96	; 0x60
 8001c56:	461a      	mov	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <LL_ADC_SetOffset+0x44>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	4313      	orrs	r3, r2
 8001c74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c7c:	bf00      	nop
 8001c7e:	371c      	adds	r7, #28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	03fff000 	.word	0x03fff000

08001c8c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3360      	adds	r3, #96	; 0x60
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	3360      	adds	r3, #96	; 0x60
 8001cc8:	461a      	mov	r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ce2:	bf00      	nop
 8001ce4:	371c      	adds	r7, #28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	615a      	str	r2, [r3, #20]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	3330      	adds	r3, #48	; 0x30
 8001d24:	461a      	mov	r2, r3
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	0a1b      	lsrs	r3, r3, #8
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	f003 030c 	and.w	r3, r3, #12
 8001d30:	4413      	add	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f003 031f 	and.w	r3, r3, #31
 8001d3e:	211f      	movs	r1, #31
 8001d40:	fa01 f303 	lsl.w	r3, r1, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	401a      	ands	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	0e9b      	lsrs	r3, r3, #26
 8001d4c:	f003 011f 	and.w	r1, r3, #31
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f003 031f 	and.w	r3, r3, #31
 8001d56:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d60:	bf00      	nop
 8001d62:	371c      	adds	r7, #28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	3314      	adds	r3, #20
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	0e5b      	lsrs	r3, r3, #25
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	4413      	add	r3, r2
 8001d8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	0d1b      	lsrs	r3, r3, #20
 8001d94:	f003 031f 	and.w	r3, r3, #31
 8001d98:	2107      	movs	r1, #7
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	401a      	ands	r2, r3
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	0d1b      	lsrs	r3, r3, #20
 8001da6:	f003 031f 	and.w	r3, r3, #31
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	fa01 f303 	lsl.w	r3, r1, r3
 8001db0:	431a      	orrs	r2, r3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001db6:	bf00      	nop
 8001db8:	371c      	adds	r7, #28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	401a      	ands	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f003 0318 	and.w	r3, r3, #24
 8001de6:	4908      	ldr	r1, [pc, #32]	; (8001e08 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001de8:	40d9      	lsrs	r1, r3
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	400b      	ands	r3, r1
 8001dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df2:	431a      	orrs	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	0007ffff 	.word	0x0007ffff

08001e0c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6093      	str	r3, [r2, #8]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e44:	d101      	bne.n	8001e4a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e94:	d101      	bne.n	8001e9a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <LL_ADC_IsEnabled+0x18>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e000      	b.n	8001ec2 <LL_ADC_IsEnabled+0x1a>
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d101      	bne.n	8001ee6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d101      	bne.n	8001f0c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b089      	sub	sp, #36	; 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e134      	b.n	80021a0 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d109      	bne.n	8001f58 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff fb0f 	bl	8001568 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff67 	bl	8001e30 <LL_ADC_IsDeepPowerDownEnabled>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d004      	beq.n	8001f72 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff4d 	bl	8001e0c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ff82 	bl	8001e80 <LL_ADC_IsInternalRegulatorEnabled>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d115      	bne.n	8001fae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff ff66 	bl	8001e58 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f8c:	4b86      	ldr	r3, [pc, #536]	; (80021a8 <HAL_ADC_Init+0x28c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	099b      	lsrs	r3, r3, #6
 8001f92:	4a86      	ldr	r2, [pc, #536]	; (80021ac <HAL_ADC_Init+0x290>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	099b      	lsrs	r3, r3, #6
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fa0:	e002      	b.n	8001fa8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f9      	bne.n	8001fa2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff ff64 	bl	8001e80 <LL_ADC_IsInternalRegulatorEnabled>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10d      	bne.n	8001fda <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc2:	f043 0210 	orr.w	r2, r3, #16
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fce:	f043 0201 	orr.w	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff ff75 	bl	8001ece <LL_ADC_REG_IsConversionOngoing>
 8001fe4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f040 80cd 	bne.w	800218e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f040 80c9 	bne.w	800218e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002000:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002004:	f043 0202 	orr.w	r2, r3, #2
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff49 	bl	8001ea8 <LL_ADC_IsEnabled>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d110      	bne.n	800203e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800201c:	4864      	ldr	r0, [pc, #400]	; (80021b0 <HAL_ADC_Init+0x294>)
 800201e:	f7ff ff43 	bl	8001ea8 <LL_ADC_IsEnabled>
 8002022:	4604      	mov	r4, r0
 8002024:	4863      	ldr	r0, [pc, #396]	; (80021b4 <HAL_ADC_Init+0x298>)
 8002026:	f7ff ff3f 	bl	8001ea8 <LL_ADC_IsEnabled>
 800202a:	4603      	mov	r3, r0
 800202c:	4323      	orrs	r3, r4
 800202e:	2b00      	cmp	r3, #0
 8002030:	d105      	bne.n	800203e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4619      	mov	r1, r3
 8002038:	485f      	ldr	r0, [pc, #380]	; (80021b8 <HAL_ADC_Init+0x29c>)
 800203a:	f7ff fdcf 	bl	8001bdc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	7e5b      	ldrb	r3, [r3, #25]
 8002042:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002048:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800204e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002054:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3020 	ldrb.w	r3, [r3, #32]
 800205c:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d106      	bne.n	800207a <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	3b01      	subs	r3, #1
 8002072:	045b      	lsls	r3, r3, #17
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207e:	2b00      	cmp	r3, #0
 8002080:	d009      	beq.n	8002096 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002086:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	4b47      	ldr	r3, [pc, #284]	; (80021bc <HAL_ADC_Init+0x2a0>)
 800209e:	4013      	ands	r3, r2
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	69b9      	ldr	r1, [r7, #24]
 80020a6:	430b      	orrs	r3, r1
 80020a8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ff0d 	bl	8001ece <LL_ADC_REG_IsConversionOngoing>
 80020b4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff ff1a 	bl	8001ef4 <LL_ADC_INJ_IsConversionOngoing>
 80020c0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d140      	bne.n	800214a <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d13d      	bne.n	800214a <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	7e1b      	ldrb	r3, [r3, #24]
 80020d6:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020d8:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020e0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020f0:	f023 0306 	bic.w	r3, r3, #6
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	69b9      	ldr	r1, [r7, #24]
 80020fa:	430b      	orrs	r3, r1
 80020fc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002104:	2b01      	cmp	r3, #1
 8002106:	d118      	bne.n	800213a <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002112:	f023 0304 	bic.w	r3, r3, #4
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800211e:	4311      	orrs	r1, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002124:	4311      	orrs	r1, r2
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800212a:	430a      	orrs	r2, r1
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0201 	orr.w	r2, r2, #1
 8002136:	611a      	str	r2, [r3, #16]
 8002138:	e007      	b.n	800214a <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0201 	bic.w	r2, r2, #1
 8002148:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d10c      	bne.n	800216c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	f023 010f 	bic.w	r1, r3, #15
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	1e5a      	subs	r2, r3, #1
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	631a      	str	r2, [r3, #48]	; 0x30
 800216a:	e007      	b.n	800217c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 020f 	bic.w	r2, r2, #15
 800217a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	f023 0303 	bic.w	r3, r3, #3
 8002184:	f043 0201 	orr.w	r2, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	659a      	str	r2, [r3, #88]	; 0x58
 800218c:	e007      	b.n	800219e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002192:	f043 0210 	orr.w	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800219e:	7ffb      	ldrb	r3, [r7, #31]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3724      	adds	r7, #36	; 0x24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd90      	pop	{r4, r7, pc}
 80021a8:	20000000 	.word	0x20000000
 80021ac:	053e2d63 	.word	0x053e2d63
 80021b0:	42028000 	.word	0x42028000
 80021b4:	42028100 	.word	0x42028100
 80021b8:	42028300 	.word	0x42028300
 80021bc:	fff0c007 	.word	0xfff0c007

080021c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021c0:	b590      	push	{r4, r7, lr}
 80021c2:	b0b7      	sub	sp, #220	; 0xdc
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x22>
 80021de:	2302      	movs	r3, #2
 80021e0:	e3c1      	b.n	8002966 <HAL_ADC_ConfigChannel+0x7a6>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fe6d 	bl	8001ece <LL_ADC_REG_IsConversionOngoing>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f040 83a6 	bne.w	8002948 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6818      	ldr	r0, [r3, #0]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	6859      	ldr	r1, [r3, #4]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	f7ff fd83 	bl	8001d14 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fe5b 	bl	8001ece <LL_ADC_REG_IsConversionOngoing>
 8002218:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fe67 	bl	8001ef4 <LL_ADC_INJ_IsConversionOngoing>
 8002226:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800222a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800222e:	2b00      	cmp	r3, #0
 8002230:	f040 81c1 	bne.w	80025b6 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002234:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002238:	2b00      	cmp	r3, #0
 800223a:	f040 81bc 	bne.w	80025b6 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002246:	d10f      	bne.n	8002268 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2200      	movs	r2, #0
 8002252:	4619      	mov	r1, r3
 8002254:	f7ff fd8a 	bl	8001d6c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fd44 	bl	8001cee <LL_ADC_SetSamplingTimeCommonConfig>
 8002266:	e00e      	b.n	8002286 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6819      	ldr	r1, [r3, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	461a      	mov	r2, r3
 8002276:	f7ff fd79 	bl	8001d6c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2100      	movs	r1, #0
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fd34 	bl	8001cee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	695a      	ldr	r2, [r3, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	08db      	lsrs	r3, r3, #3
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d00a      	beq.n	80022be <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	6919      	ldr	r1, [r3, #16]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80022b8:	f7ff fcc4 	bl	8001c44 <LL_ADC_SetOffset>
 80022bc:	e17b      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fce1 	bl	8001c8c <LL_ADC_GetOffsetChannel>
 80022ca:	4603      	mov	r3, r0
 80022cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10a      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x12a>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2100      	movs	r1, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fcd6 	bl	8001c8c <LL_ADC_GetOffsetChannel>
 80022e0:	4603      	mov	r3, r0
 80022e2:	0e9b      	lsrs	r3, r3, #26
 80022e4:	f003 021f 	and.w	r2, r3, #31
 80022e8:	e01e      	b.n	8002328 <HAL_ADC_ConfigChannel+0x168>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fccb 	bl	8001c8c <LL_ADC_GetOffsetChannel>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002308:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800230c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002310:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8002318:	2320      	movs	r3, #32
 800231a:	e004      	b.n	8002326 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 800231c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002330:	2b00      	cmp	r3, #0
 8002332:	d105      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x180>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	0e9b      	lsrs	r3, r3, #26
 800233a:	f003 031f 	and.w	r3, r3, #31
 800233e:	e018      	b.n	8002372 <HAL_ADC_ConfigChannel+0x1b2>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800234c:	fa93 f3a3 	rbit	r3, r3
 8002350:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002354:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800235c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8002364:	2320      	movs	r3, #32
 8002366:	e004      	b.n	8002372 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8002368:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002372:	429a      	cmp	r2, r3
 8002374:	d106      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2200      	movs	r2, #0
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fc9a 	bl	8001cb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2101      	movs	r1, #1
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fc7e 	bl	8001c8c <LL_ADC_GetOffsetChannel>
 8002390:	4603      	mov	r3, r0
 8002392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10a      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x1f0>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2101      	movs	r1, #1
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fc73 	bl	8001c8c <LL_ADC_GetOffsetChannel>
 80023a6:	4603      	mov	r3, r0
 80023a8:	0e9b      	lsrs	r3, r3, #26
 80023aa:	f003 021f 	and.w	r2, r3, #31
 80023ae:	e01e      	b.n	80023ee <HAL_ADC_ConfigChannel+0x22e>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2101      	movs	r1, #1
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fc68 	bl	8001c8c <LL_ADC_GetOffsetChannel>
 80023bc:	4603      	mov	r3, r0
 80023be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80023ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80023d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80023de:	2320      	movs	r3, #32
 80023e0:	e004      	b.n	80023ec <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80023e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d105      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x246>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	0e9b      	lsrs	r3, r3, #26
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	e018      	b.n	8002438 <HAL_ADC_ConfigChannel+0x278>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800241a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800241e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002422:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 800242a:	2320      	movs	r3, #32
 800242c:	e004      	b.n	8002438 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 800242e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002438:	429a      	cmp	r2, r3
 800243a:	d106      	bne.n	800244a <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2200      	movs	r2, #0
 8002442:	2101      	movs	r1, #1
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fc37 	bl	8001cb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2102      	movs	r1, #2
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fc1b 	bl	8001c8c <LL_ADC_GetOffsetChannel>
 8002456:	4603      	mov	r3, r0
 8002458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10a      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x2b6>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2102      	movs	r1, #2
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fc10 	bl	8001c8c <LL_ADC_GetOffsetChannel>
 800246c:	4603      	mov	r3, r0
 800246e:	0e9b      	lsrs	r3, r3, #26
 8002470:	f003 021f 	and.w	r2, r3, #31
 8002474:	e01e      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x2f4>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2102      	movs	r1, #2
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff fc05 	bl	8001c8c <LL_ADC_GetOffsetChannel>
 8002482:	4603      	mov	r3, r0
 8002484:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800248c:	fa93 f3a3 	rbit	r3, r3
 8002490:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002494:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002498:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800249c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 80024a4:	2320      	movs	r3, #32
 80024a6:	e004      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 80024a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024ac:	fab3 f383 	clz	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d105      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x30c>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	0e9b      	lsrs	r3, r3, #26
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	e016      	b.n	80024fa <HAL_ADC_ConfigChannel+0x33a>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024d8:	fa93 f3a3 	rbit	r3, r3
 80024dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80024de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80024e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80024ec:	2320      	movs	r3, #32
 80024ee:	e004      	b.n	80024fa <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80024f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024f4:	fab3 f383 	clz	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d106      	bne.n	800250c <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2200      	movs	r2, #0
 8002504:	2102      	movs	r1, #2
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fbd6 	bl	8001cb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2103      	movs	r1, #3
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fbba 	bl	8001c8c <LL_ADC_GetOffsetChannel>
 8002518:	4603      	mov	r3, r0
 800251a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10a      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x378>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2103      	movs	r1, #3
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fbaf 	bl	8001c8c <LL_ADC_GetOffsetChannel>
 800252e:	4603      	mov	r3, r0
 8002530:	0e9b      	lsrs	r3, r3, #26
 8002532:	f003 021f 	and.w	r2, r3, #31
 8002536:	e017      	b.n	8002568 <HAL_ADC_ConfigChannel+0x3a8>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2103      	movs	r1, #3
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fba4 	bl	8001c8c <LL_ADC_GetOffsetChannel>
 8002544:	4603      	mov	r3, r0
 8002546:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002550:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002552:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 800255a:	2320      	movs	r3, #32
 800255c:	e003      	b.n	8002566 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800255e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002560:	fab3 f383 	clz	r3, r3
 8002564:	b2db      	uxtb	r3, r3
 8002566:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002570:	2b00      	cmp	r3, #0
 8002572:	d105      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x3c0>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	0e9b      	lsrs	r3, r3, #26
 800257a:	f003 031f 	and.w	r3, r3, #31
 800257e:	e011      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x3e4>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800258e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002590:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8002598:	2320      	movs	r3, #32
 800259a:	e003      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 800259c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d106      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2200      	movs	r2, #0
 80025ae:	2103      	movs	r1, #3
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fb81 	bl	8001cb8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fc74 	bl	8001ea8 <LL_ADC_IsEnabled>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f040 81c9 	bne.w	800295a <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	6819      	ldr	r1, [r3, #0]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	461a      	mov	r2, r3
 80025d6:	f7ff fbf5 	bl	8001dc4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	4a8f      	ldr	r2, [pc, #572]	; (800281c <HAL_ADC_ConfigChannel+0x65c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	f040 8131 	bne.w	8002848 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10b      	bne.n	800260e <HAL_ADC_ConfigChannel+0x44e>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	0e9b      	lsrs	r3, r3, #26
 80025fc:	3301      	adds	r3, #1
 80025fe:	f003 031f 	and.w	r3, r3, #31
 8002602:	2b09      	cmp	r3, #9
 8002604:	bf94      	ite	ls
 8002606:	2301      	movls	r3, #1
 8002608:	2300      	movhi	r3, #0
 800260a:	b2db      	uxtb	r3, r3
 800260c:	e019      	b.n	8002642 <HAL_ADC_ConfigChannel+0x482>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800261c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800261e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002620:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8002626:	2320      	movs	r3, #32
 8002628:	e003      	b.n	8002632 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 800262a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800262c:	fab3 f383 	clz	r3, r3
 8002630:	b2db      	uxtb	r3, r3
 8002632:	3301      	adds	r3, #1
 8002634:	f003 031f 	and.w	r3, r3, #31
 8002638:	2b09      	cmp	r3, #9
 800263a:	bf94      	ite	ls
 800263c:	2301      	movls	r3, #1
 800263e:	2300      	movhi	r3, #0
 8002640:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002642:	2b00      	cmp	r3, #0
 8002644:	d079      	beq.n	800273a <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264e:	2b00      	cmp	r3, #0
 8002650:	d107      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x4a2>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	0e9b      	lsrs	r3, r3, #26
 8002658:	3301      	adds	r3, #1
 800265a:	069b      	lsls	r3, r3, #26
 800265c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002660:	e015      	b.n	800268e <HAL_ADC_ConfigChannel+0x4ce>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002672:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800267a:	2320      	movs	r3, #32
 800267c:	e003      	b.n	8002686 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800267e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	3301      	adds	r3, #1
 8002688:	069b      	lsls	r3, r3, #26
 800268a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x4ee>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	0e9b      	lsrs	r3, r3, #26
 80026a0:	3301      	adds	r3, #1
 80026a2:	f003 031f 	and.w	r3, r3, #31
 80026a6:	2101      	movs	r1, #1
 80026a8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ac:	e017      	b.n	80026de <HAL_ADC_ConfigChannel+0x51e>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80026bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026be:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80026c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 80026c6:	2320      	movs	r3, #32
 80026c8:	e003      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80026ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026cc:	fab3 f383 	clz	r3, r3
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	3301      	adds	r3, #1
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	2101      	movs	r1, #1
 80026da:	fa01 f303 	lsl.w	r3, r1, r3
 80026de:	ea42 0103 	orr.w	r1, r2, r3
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10a      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x544>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	0e9b      	lsrs	r3, r3, #26
 80026f4:	3301      	adds	r3, #1
 80026f6:	f003 021f 	and.w	r2, r3, #31
 80026fa:	4613      	mov	r3, r2
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	4413      	add	r3, r2
 8002700:	051b      	lsls	r3, r3, #20
 8002702:	e018      	b.n	8002736 <HAL_ADC_ConfigChannel+0x576>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002714:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800271c:	2320      	movs	r3, #32
 800271e:	e003      	b.n	8002728 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	3301      	adds	r3, #1
 800272a:	f003 021f 	and.w	r2, r3, #31
 800272e:	4613      	mov	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4413      	add	r3, r2
 8002734:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002736:	430b      	orrs	r3, r1
 8002738:	e081      	b.n	800283e <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002742:	2b00      	cmp	r3, #0
 8002744:	d107      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x596>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	0e9b      	lsrs	r3, r3, #26
 800274c:	3301      	adds	r3, #1
 800274e:	069b      	lsls	r3, r3, #26
 8002750:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002754:	e015      	b.n	8002782 <HAL_ADC_ConfigChannel+0x5c2>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002766:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800276e:	2320      	movs	r3, #32
 8002770:	e003      	b.n	800277a <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	3301      	adds	r3, #1
 800277c:	069b      	lsls	r3, r3, #26
 800277e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x5e2>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	0e9b      	lsrs	r3, r3, #26
 8002794:	3301      	adds	r3, #1
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	2101      	movs	r1, #1
 800279c:	fa01 f303 	lsl.w	r3, r1, r3
 80027a0:	e017      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x612>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	61fb      	str	r3, [r7, #28]
  return result;
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 80027ba:	2320      	movs	r3, #32
 80027bc:	e003      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	3301      	adds	r3, #1
 80027c8:	f003 031f 	and.w	r3, r3, #31
 80027cc:	2101      	movs	r1, #1
 80027ce:	fa01 f303 	lsl.w	r3, r1, r3
 80027d2:	ea42 0103 	orr.w	r1, r2, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10d      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x63e>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	0e9b      	lsrs	r3, r3, #26
 80027e8:	3301      	adds	r3, #1
 80027ea:	f003 021f 	and.w	r2, r3, #31
 80027ee:	4613      	mov	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	3b1e      	subs	r3, #30
 80027f6:	051b      	lsls	r3, r3, #20
 80027f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027fc:	e01e      	b.n	800283c <HAL_ADC_ConfigChannel+0x67c>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	613b      	str	r3, [r7, #16]
  return result;
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d104      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8002816:	2320      	movs	r3, #32
 8002818:	e006      	b.n	8002828 <HAL_ADC_ConfigChannel+0x668>
 800281a:	bf00      	nop
 800281c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	3301      	adds	r3, #1
 800282a:	f003 021f 	and.w	r2, r3, #31
 800282e:	4613      	mov	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	3b1e      	subs	r3, #30
 8002836:	051b      	lsls	r3, r3, #20
 8002838:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800283c:	430b      	orrs	r3, r1
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	6892      	ldr	r2, [r2, #8]
 8002842:	4619      	mov	r1, r3
 8002844:	f7ff fa92 	bl	8001d6c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b48      	ldr	r3, [pc, #288]	; (8002970 <HAL_ADC_ConfigChannel+0x7b0>)
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 8082 	beq.w	800295a <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002856:	4847      	ldr	r0, [pc, #284]	; (8002974 <HAL_ADC_ConfigChannel+0x7b4>)
 8002858:	f7ff f9e6 	bl	8001c28 <LL_ADC_GetCommonPathInternalCh>
 800285c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002860:	4845      	ldr	r0, [pc, #276]	; (8002978 <HAL_ADC_ConfigChannel+0x7b8>)
 8002862:	f7ff fb21 	bl	8001ea8 <LL_ADC_IsEnabled>
 8002866:	4604      	mov	r4, r0
 8002868:	4844      	ldr	r0, [pc, #272]	; (800297c <HAL_ADC_ConfigChannel+0x7bc>)
 800286a:	f7ff fb1d 	bl	8001ea8 <LL_ADC_IsEnabled>
 800286e:	4603      	mov	r3, r0
 8002870:	4323      	orrs	r3, r4
 8002872:	2b00      	cmp	r3, #0
 8002874:	d15e      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a41      	ldr	r2, [pc, #260]	; (8002980 <HAL_ADC_ConfigChannel+0x7c0>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d127      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002880:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002884:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d121      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a39      	ldr	r2, [pc, #228]	; (8002978 <HAL_ADC_ConfigChannel+0x7b8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d161      	bne.n	800295a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002896:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800289a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800289e:	4619      	mov	r1, r3
 80028a0:	4834      	ldr	r0, [pc, #208]	; (8002974 <HAL_ADC_ConfigChannel+0x7b4>)
 80028a2:	f7ff f9ae 	bl	8001c02 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028a6:	4b37      	ldr	r3, [pc, #220]	; (8002984 <HAL_ADC_ConfigChannel+0x7c4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	099b      	lsrs	r3, r3, #6
 80028ac:	4a36      	ldr	r2, [pc, #216]	; (8002988 <HAL_ADC_ConfigChannel+0x7c8>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	099b      	lsrs	r3, r3, #6
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	4613      	mov	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80028c0:	e002      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f9      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028ce:	e044      	b.n	800295a <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a2d      	ldr	r2, [pc, #180]	; (800298c <HAL_ADC_ConfigChannel+0x7cc>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d113      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x742>
 80028da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10d      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a23      	ldr	r2, [pc, #140]	; (8002978 <HAL_ADC_ConfigChannel+0x7b8>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d134      	bne.n	800295a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80028f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028f8:	4619      	mov	r1, r3
 80028fa:	481e      	ldr	r0, [pc, #120]	; (8002974 <HAL_ADC_ConfigChannel+0x7b4>)
 80028fc:	f7ff f981 	bl	8001c02 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002900:	e02b      	b.n	800295a <HAL_ADC_ConfigChannel+0x79a>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a22      	ldr	r2, [pc, #136]	; (8002990 <HAL_ADC_ConfigChannel+0x7d0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d126      	bne.n	800295a <HAL_ADC_ConfigChannel+0x79a>
 800290c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d120      	bne.n	800295a <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a16      	ldr	r2, [pc, #88]	; (8002978 <HAL_ADC_ConfigChannel+0x7b8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d11b      	bne.n	800295a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002922:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002926:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800292a:	4619      	mov	r1, r3
 800292c:	4811      	ldr	r0, [pc, #68]	; (8002974 <HAL_ADC_ConfigChannel+0x7b4>)
 800292e:	f7ff f968 	bl	8001c02 <LL_ADC_SetCommonPathInternalCh>
 8002932:	e012      	b.n	800295a <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	f043 0220 	orr.w	r2, r3, #32
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002946:	e008      	b.n	800295a <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294c:	f043 0220 	orr.w	r2, r3, #32
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002962:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002966:	4618      	mov	r0, r3
 8002968:	37dc      	adds	r7, #220	; 0xdc
 800296a:	46bd      	mov	sp, r7
 800296c:	bd90      	pop	{r4, r7, pc}
 800296e:	bf00      	nop
 8002970:	80080000 	.word	0x80080000
 8002974:	42028300 	.word	0x42028300
 8002978:	42028000 	.word	0x42028000
 800297c:	42028100 	.word	0x42028100
 8002980:	c7520000 	.word	0xc7520000
 8002984:	20000000 	.word	0x20000000
 8002988:	053e2d63 	.word	0x053e2d63
 800298c:	cb840000 	.word	0xcb840000
 8002990:	80000001 	.word	0x80000001

08002994 <LL_ADC_IsEnabled>:
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <LL_ADC_IsEnabled+0x18>
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <LL_ADC_IsEnabled+0x1a>
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <LL_ADC_REG_IsConversionOngoing>:
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d101      	bne.n	80029d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80029e0:	b590      	push	{r4, r7, lr}
 80029e2:	b0a1      	sub	sp, #132	; 0x84
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e089      	b.n	8002b12 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002a06:	2300      	movs	r3, #0
 8002a08:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a42      	ldr	r2, [pc, #264]	; (8002b1c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d102      	bne.n	8002a1e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a18:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	e001      	b.n	8002a22 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10b      	bne.n	8002a40 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2c:	f043 0220 	orr.w	r2, r3, #32
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e068      	b.n	8002b12 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff ffb9 	bl	80029ba <LL_ADC_REG_IsConversionOngoing>
 8002a48:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff ffb3 	bl	80029ba <LL_ADC_REG_IsConversionOngoing>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d14a      	bne.n	8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d147      	bne.n	8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a60:	4b30      	ldr	r3, [pc, #192]	; (8002b24 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002a62:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d027      	beq.n	8002abc <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	6859      	ldr	r1, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a7e:	035b      	lsls	r3, r3, #13
 8002a80:	430b      	orrs	r3, r1
 8002a82:	431a      	orrs	r2, r3
 8002a84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a86:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a88:	4824      	ldr	r0, [pc, #144]	; (8002b1c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002a8a:	f7ff ff83 	bl	8002994 <LL_ADC_IsEnabled>
 8002a8e:	4604      	mov	r4, r0
 8002a90:	4823      	ldr	r0, [pc, #140]	; (8002b20 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a92:	f7ff ff7f 	bl	8002994 <LL_ADC_IsEnabled>
 8002a96:	4603      	mov	r3, r0
 8002a98:	4323      	orrs	r3, r4
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d132      	bne.n	8002b04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002aa6:	f023 030f 	bic.w	r3, r3, #15
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	6811      	ldr	r1, [r2, #0]
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	6892      	ldr	r2, [r2, #8]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ab8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002aba:	e023      	b.n	8002b04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002abc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ac4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ac6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ac8:	4814      	ldr	r0, [pc, #80]	; (8002b1c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002aca:	f7ff ff63 	bl	8002994 <LL_ADC_IsEnabled>
 8002ace:	4604      	mov	r4, r0
 8002ad0:	4813      	ldr	r0, [pc, #76]	; (8002b20 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002ad2:	f7ff ff5f 	bl	8002994 <LL_ADC_IsEnabled>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	4323      	orrs	r3, r4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d112      	bne.n	8002b04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ae6:	f023 030f 	bic.w	r3, r3, #15
 8002aea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002aec:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002aee:	e009      	b.n	8002b04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af4:	f043 0220 	orr.w	r2, r3, #32
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002b02:	e000      	b.n	8002b06 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b04:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002b0e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3784      	adds	r7, #132	; 0x84
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd90      	pop	{r4, r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	42028000 	.word	0x42028000
 8002b20:	42028100 	.word	0x42028100
 8002b24:	42028300 	.word	0x42028300

08002b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <__NVIC_SetPriorityGrouping+0x44>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b44:	4013      	ands	r3, r2
 8002b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b5a:	4a04      	ldr	r2, [pc, #16]	; (8002b6c <__NVIC_SetPriorityGrouping+0x44>)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	60d3      	str	r3, [r2, #12]
}
 8002b60:	bf00      	nop
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b74:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <__NVIC_GetPriorityGrouping+0x18>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	0a1b      	lsrs	r3, r3, #8
 8002b7a:	f003 0307 	and.w	r3, r3, #7
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	6039      	str	r1, [r7, #0]
 8002b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	db0a      	blt.n	8002bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	490c      	ldr	r1, [pc, #48]	; (8002bd8 <__NVIC_SetPriority+0x4c>)
 8002ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002baa:	0152      	lsls	r2, r2, #5
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	440b      	add	r3, r1
 8002bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb4:	e00a      	b.n	8002bcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	4908      	ldr	r1, [pc, #32]	; (8002bdc <__NVIC_SetPriority+0x50>)
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	3b04      	subs	r3, #4
 8002bc4:	0152      	lsls	r2, r2, #5
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	440b      	add	r3, r1
 8002bca:	761a      	strb	r2, [r3, #24]
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000e100 	.word	0xe000e100
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	; 0x24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f1c3 0307 	rsb	r3, r3, #7
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	bf28      	it	cs
 8002bfe:	2303      	movcs	r3, #3
 8002c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3303      	adds	r3, #3
 8002c06:	2b06      	cmp	r3, #6
 8002c08:	d902      	bls.n	8002c10 <NVIC_EncodePriority+0x30>
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3b04      	subs	r3, #4
 8002c0e:	e000      	b.n	8002c12 <NVIC_EncodePriority+0x32>
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c14:	f04f 32ff 	mov.w	r2, #4294967295
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	401a      	ands	r2, r3
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c28:	f04f 31ff 	mov.w	r1, #4294967295
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c32:	43d9      	mvns	r1, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c38:	4313      	orrs	r3, r2
         );
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3724      	adds	r7, #36	; 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
	...

08002c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c58:	d301      	bcc.n	8002c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e00f      	b.n	8002c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <SysTick_Config+0x40>)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c66:	2107      	movs	r1, #7
 8002c68:	f04f 30ff 	mov.w	r0, #4294967295
 8002c6c:	f7ff ff8e 	bl	8002b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <SysTick_Config+0x40>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c76:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <SysTick_Config+0x40>)
 8002c78:	2207      	movs	r2, #7
 8002c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	e000e010 	.word	0xe000e010

08002c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff ff47 	bl	8002b28 <__NVIC_SetPriorityGrouping>
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b086      	sub	sp, #24
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	4603      	mov	r3, r0
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb0:	f7ff ff5e 	bl	8002b70 <__NVIC_GetPriorityGrouping>
 8002cb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68b9      	ldr	r1, [r7, #8]
 8002cba:	6978      	ldr	r0, [r7, #20]
 8002cbc:	f7ff ff90 	bl	8002be0 <NVIC_EncodePriority>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff ff5f 	bl	8002b8c <__NVIC_SetPriority>
}
 8002cce:	bf00      	nop
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff ffb2 	bl	8002c48 <SysTick_Config>
 8002ce4:	4603      	mov	r3, r0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002cfe:	e158      	b.n	8002fb2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	2101      	movs	r1, #1
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 814a 	beq.w	8002fac <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d00b      	beq.n	8002d38 <HAL_GPIO_Init+0x48>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d007      	beq.n	8002d38 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d2c:	2b11      	cmp	r3, #17
 8002d2e:	d003      	beq.n	8002d38 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b12      	cmp	r3, #18
 8002d36:	d130      	bne.n	8002d9a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	2203      	movs	r2, #3
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d6e:	2201      	movs	r2, #1
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	091b      	lsrs	r3, r3, #4
 8002d84:	f003 0201 	and.w	r2, r3, #1
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	2203      	movs	r2, #3
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43db      	mvns	r3, r3
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	4013      	ands	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_Init+0xea>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b12      	cmp	r3, #18
 8002dd8:	d123      	bne.n	8002e22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	08da      	lsrs	r2, r3, #3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3208      	adds	r2, #8
 8002de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002de6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	220f      	movs	r2, #15
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	691a      	ldr	r2, [r3, #16]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	08da      	lsrs	r2, r3, #3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3208      	adds	r2, #8
 8002e1c:	6939      	ldr	r1, [r7, #16]
 8002e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4013      	ands	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 0203 	and.w	r2, r3, #3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 80a4 	beq.w	8002fac <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8002e64:	4a5a      	ldr	r2, [pc, #360]	; (8002fd0 <HAL_GPIO_Init+0x2e0>)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	089b      	lsrs	r3, r3, #2
 8002e6a:	3318      	adds	r3, #24
 8002e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e70:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	220f      	movs	r2, #15
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4013      	ands	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a52      	ldr	r2, [pc, #328]	; (8002fd4 <HAL_GPIO_Init+0x2e4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d025      	beq.n	8002edc <HAL_GPIO_Init+0x1ec>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a51      	ldr	r2, [pc, #324]	; (8002fd8 <HAL_GPIO_Init+0x2e8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d01f      	beq.n	8002ed8 <HAL_GPIO_Init+0x1e8>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a50      	ldr	r2, [pc, #320]	; (8002fdc <HAL_GPIO_Init+0x2ec>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d019      	beq.n	8002ed4 <HAL_GPIO_Init+0x1e4>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a4f      	ldr	r2, [pc, #316]	; (8002fe0 <HAL_GPIO_Init+0x2f0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d013      	beq.n	8002ed0 <HAL_GPIO_Init+0x1e0>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a4e      	ldr	r2, [pc, #312]	; (8002fe4 <HAL_GPIO_Init+0x2f4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d00d      	beq.n	8002ecc <HAL_GPIO_Init+0x1dc>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a4d      	ldr	r2, [pc, #308]	; (8002fe8 <HAL_GPIO_Init+0x2f8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d007      	beq.n	8002ec8 <HAL_GPIO_Init+0x1d8>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a4c      	ldr	r2, [pc, #304]	; (8002fec <HAL_GPIO_Init+0x2fc>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d101      	bne.n	8002ec4 <HAL_GPIO_Init+0x1d4>
 8002ec0:	2306      	movs	r3, #6
 8002ec2:	e00c      	b.n	8002ede <HAL_GPIO_Init+0x1ee>
 8002ec4:	2307      	movs	r3, #7
 8002ec6:	e00a      	b.n	8002ede <HAL_GPIO_Init+0x1ee>
 8002ec8:	2305      	movs	r3, #5
 8002eca:	e008      	b.n	8002ede <HAL_GPIO_Init+0x1ee>
 8002ecc:	2304      	movs	r3, #4
 8002ece:	e006      	b.n	8002ede <HAL_GPIO_Init+0x1ee>
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e004      	b.n	8002ede <HAL_GPIO_Init+0x1ee>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e002      	b.n	8002ede <HAL_GPIO_Init+0x1ee>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <HAL_GPIO_Init+0x1ee>
 8002edc:	2300      	movs	r3, #0
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	f002 0203 	and.w	r2, r2, #3
 8002ee4:	00d2      	lsls	r2, r2, #3
 8002ee6:	4093      	lsls	r3, r2
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8002eee:	4938      	ldr	r1, [pc, #224]	; (8002fd0 <HAL_GPIO_Init+0x2e0>)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	089b      	lsrs	r3, r3, #2
 8002ef4:	3318      	adds	r3, #24
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002efc:	4b34      	ldr	r3, [pc, #208]	; (8002fd0 <HAL_GPIO_Init+0x2e0>)
 8002efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f22:	4a2b      	ldr	r2, [pc, #172]	; (8002fd0 <HAL_GPIO_Init+0x2e0>)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002f2a:	4b29      	ldr	r3, [pc, #164]	; (8002fd0 <HAL_GPIO_Init+0x2e0>)
 8002f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f50:	4a1f      	ldr	r2, [pc, #124]	; (8002fd0 <HAL_GPIO_Init+0x2e0>)
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f58:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <HAL_GPIO_Init+0x2e0>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	43db      	mvns	r3, r3
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	4013      	ands	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f7c:	4a14      	ldr	r2, [pc, #80]	; (8002fd0 <HAL_GPIO_Init+0x2e0>)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002f82:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <HAL_GPIO_Init+0x2e0>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fa6:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <HAL_GPIO_Init+0x2e0>)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f47f ae9f 	bne.w	8002d00 <HAL_GPIO_Init+0x10>
  }
}
 8002fc2:	bf00      	nop
 8002fc4:	bf00      	nop
 8002fc6:	371c      	adds	r7, #28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	4002f400 	.word	0x4002f400
 8002fd4:	42020000 	.word	0x42020000
 8002fd8:	42020400 	.word	0x42020400
 8002fdc:	42020800 	.word	0x42020800
 8002fe0:	42020c00 	.word	0x42020c00
 8002fe4:	42021000 	.word	0x42021000
 8002fe8:	42021400 	.word	0x42021400
 8002fec:	42021800 	.word	0x42021800

08002ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	807b      	strh	r3, [r7, #2]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003000:	787b      	ldrb	r3, [r7, #1]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003006:	887a      	ldrh	r2, [r7, #2]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800300c:	e002      	b.n	8003014 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800300e:	887a      	ldrh	r2, [r7, #2]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003022:	b08b      	sub	sp, #44	; 0x2c
 8003024:	af06      	add	r7, sp, #24
 8003026:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e0d7      	b.n	80031e2 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fe fbde 	bl	8001808 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2203      	movs	r2, #3
 8003050:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f004 f80f 	bl	800707c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800305e:	2300      	movs	r3, #0
 8003060:	73fb      	strb	r3, [r7, #15]
 8003062:	e04c      	b.n	80030fe <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	440b      	add	r3, r1
 8003074:	3301      	adds	r3, #1
 8003076:	2201      	movs	r2, #1
 8003078:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800307a:	7bfb      	ldrb	r3, [r7, #15]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	440b      	add	r3, r1
 800308a:	7bfa      	ldrb	r2, [r7, #15]
 800308c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800308e:	7bfa      	ldrb	r2, [r7, #15]
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	b298      	uxth	r0, r3
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	440b      	add	r3, r1
 80030a0:	3336      	adds	r3, #54	; 0x36
 80030a2:	4602      	mov	r2, r0
 80030a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	440b      	add	r3, r1
 80030b6:	3303      	adds	r3, #3
 80030b8:	2200      	movs	r2, #0
 80030ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	440b      	add	r3, r1
 80030ca:	3338      	adds	r3, #56	; 0x38
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030d0:	7bfa      	ldrb	r2, [r7, #15]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	440b      	add	r3, r1
 80030de:	333c      	adds	r3, #60	; 0x3c
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030e4:	7bfa      	ldrb	r2, [r7, #15]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	440b      	add	r3, r1
 80030f2:	3340      	adds	r3, #64	; 0x40
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	3301      	adds	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
 80030fe:	7bfa      	ldrb	r2, [r7, #15]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	429a      	cmp	r2, r3
 8003106:	d3ad      	bcc.n	8003064 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003108:	2300      	movs	r3, #0
 800310a:	73fb      	strb	r3, [r7, #15]
 800310c:	e044      	b.n	8003198 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800310e:	7bfa      	ldrb	r2, [r7, #15]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	440b      	add	r3, r1
 800311c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	440b      	add	r3, r1
 8003132:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003136:	7bfa      	ldrb	r2, [r7, #15]
 8003138:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800313a:	7bfa      	ldrb	r2, [r7, #15]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	440b      	add	r3, r1
 8003148:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800314c:	2200      	movs	r2, #0
 800314e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003150:	7bfa      	ldrb	r2, [r7, #15]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	440b      	add	r3, r1
 800315e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003166:	7bfa      	ldrb	r2, [r7, #15]
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	440b      	add	r3, r1
 8003174:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800317c:	7bfa      	ldrb	r2, [r7, #15]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	440b      	add	r3, r1
 800318a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	3301      	adds	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
 8003198:	7bfa      	ldrb	r2, [r7, #15]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d3b5      	bcc.n	800310e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	687e      	ldr	r6, [r7, #4]
 80031aa:	466d      	mov	r5, sp
 80031ac:	f106 0410 	add.w	r4, r6, #16
 80031b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031b4:	6823      	ldr	r3, [r4, #0]
 80031b6:	602b      	str	r3, [r5, #0]
 80031b8:	1d33      	adds	r3, r6, #4
 80031ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031bc:	6838      	ldr	r0, [r7, #0]
 80031be:	f003 ff78 	bl	80070b2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d102      	bne.n	80031e0 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f805 	bl	80031ea <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031ea <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b085      	sub	sp, #20
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800320e:	b29b      	uxth	r3, r3
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003222:	b29b      	uxth	r3, r3
 8003224:	f043 0302 	orr.w	r3, r3, #2
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a04      	ldr	r2, [pc, #16]	; (800325c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800324a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800324e:	6013      	str	r3, [r2, #0]
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40007000 	.word	0x40007000

08003260 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003264:	4b04      	ldr	r3, [pc, #16]	; (8003278 <HAL_PWREx_GetVoltageRange+0x18>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800326c:	4618      	mov	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40007000 	.word	0x40007000

0800327c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8003284:	4b27      	ldr	r3, [pc, #156]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800328c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800328e:	f000 f861 	bl	8003354 <HAL_PWREx_SMPS_GetEffectiveMode>
 8003292:	4603      	mov	r3, r0
 8003294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003298:	d101      	bne.n	800329e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e03e      	b.n	800331c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800329e:	4b21      	ldr	r3, [pc, #132]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032aa:	d101      	bne.n	80032b0 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e035      	b.n	800331c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d101      	bne.n	80032bc <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	e02f      	b.n	800331c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80032bc:	4b19      	ldr	r3, [pc, #100]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80032c4:	4917      	ldr	r1, [pc, #92]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80032cc:	4b16      	ldr	r3, [pc, #88]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	095b      	lsrs	r3, r3, #5
 80032d2:	4a16      	ldr	r2, [pc, #88]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80032d4:	fba2 2303 	umull	r2, r3, r2, r3
 80032d8:	09db      	lsrs	r3, r3, #7
 80032da:	2232      	movs	r2, #50	; 0x32
 80032dc:	fb02 f303 	mul.w	r3, r2, r3
 80032e0:	4a13      	ldr	r2, [pc, #76]	; (8003330 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80032e2:	fba2 2303 	umull	r2, r3, r2, r3
 80032e6:	08db      	lsrs	r3, r3, #3
 80032e8:	3301      	adds	r3, #1
 80032ea:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032ec:	e002      	b.n	80032f4 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003300:	d102      	bne.n	8003308 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1f2      	bne.n	80032ee <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003308:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003314:	d101      	bne.n	800331a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e000      	b.n	800331c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40007000 	.word	0x40007000
 8003328:	20000000 	.word	0x20000000
 800332c:	0a7c5ac5 	.word	0x0a7c5ac5
 8003330:	cccccccd 	.word	0xcccccccd

08003334 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003338:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_PWREx_EnableVddIO2+0x1c>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4a04      	ldr	r2, [pc, #16]	; (8003350 <HAL_PWREx_EnableVddIO2+0x1c>)
 800333e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003342:	6053      	str	r3, [r2, #4]
}
 8003344:	bf00      	nop
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40007000 	.word	0x40007000

08003354 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800335a:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800336a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800336e:	607b      	str	r3, [r7, #4]
 8003370:	e00a      	b.n	8003388 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d103      	bne.n	8003384 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 800337c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	e001      	b.n	8003388 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003384:	2300      	movs	r3, #0
 8003386:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8003388:	687b      	ldr	r3, [r7, #4]
}
 800338a:	4618      	mov	r0, r3
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40007000 	.word	0x40007000

0800339c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d102      	bne.n	80033b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	f000 bcd0 	b.w	8003d50 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033b0:	4b99      	ldr	r3, [pc, #612]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 030c 	and.w	r3, r3, #12
 80033b8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033ba:	4b97      	ldr	r3, [pc, #604]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 80e9 	beq.w	80035a4 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d006      	beq.n	80033e6 <HAL_RCC_OscConfig+0x4a>
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	2b0c      	cmp	r3, #12
 80033dc:	f040 8083 	bne.w	80034e6 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d17f      	bne.n	80034e6 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033e6:	4b8c      	ldr	r3, [pc, #560]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d006      	beq.n	8003400 <HAL_RCC_OscConfig+0x64>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d102      	bne.n	8003400 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f000 bca8 	b.w	8003d50 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003404:	4b84      	ldr	r3, [pc, #528]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d004      	beq.n	800341a <HAL_RCC_OscConfig+0x7e>
 8003410:	4b81      	ldr	r3, [pc, #516]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003418:	e005      	b.n	8003426 <HAL_RCC_OscConfig+0x8a>
 800341a:	4b7f      	ldr	r3, [pc, #508]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 800341c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003426:	4293      	cmp	r3, r2
 8003428:	d224      	bcs.n	8003474 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fe98 	bl	8004164 <RCC_SetFlashLatencyFromMSIRange>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	f000 bc88 	b.w	8003d50 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003440:	4b75      	ldr	r3, [pc, #468]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a74      	ldr	r2, [pc, #464]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 8003446:	f043 0308 	orr.w	r3, r3, #8
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	4b72      	ldr	r3, [pc, #456]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	496f      	ldr	r1, [pc, #444]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 800345a:	4313      	orrs	r3, r2
 800345c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800345e:	4b6e      	ldr	r3, [pc, #440]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	021b      	lsls	r3, r3, #8
 800346c:	496a      	ldr	r1, [pc, #424]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 800346e:	4313      	orrs	r3, r2
 8003470:	604b      	str	r3, [r1, #4]
 8003472:	e026      	b.n	80034c2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003474:	4b68      	ldr	r3, [pc, #416]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a67      	ldr	r2, [pc, #412]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 800347a:	f043 0308 	orr.w	r3, r3, #8
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	4b65      	ldr	r3, [pc, #404]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	4962      	ldr	r1, [pc, #392]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 800348e:	4313      	orrs	r3, r2
 8003490:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003492:	4b61      	ldr	r3, [pc, #388]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	495d      	ldr	r1, [pc, #372]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10a      	bne.n	80034c2 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fe57 	bl	8004164 <RCC_SetFlashLatencyFromMSIRange>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	f000 bc47 	b.w	8003d50 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80034c2:	f000 fe13 	bl	80040ec <HAL_RCC_GetHCLKFreq>
 80034c6:	4603      	mov	r3, r0
 80034c8:	4a54      	ldr	r2, [pc, #336]	; (800361c <HAL_RCC_OscConfig+0x280>)
 80034ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034cc:	4b54      	ldr	r3, [pc, #336]	; (8003620 <HAL_RCC_OscConfig+0x284>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fe fb27 	bl	8001b24 <HAL_InitTick>
 80034d6:	4603      	mov	r3, r0
 80034d8:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d060      	beq.n	80035a2 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
 80034e2:	f000 bc35 	b.w	8003d50 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d039      	beq.n	8003562 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034ee:	4b4a      	ldr	r3, [pc, #296]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a49      	ldr	r2, [pc, #292]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034fa:	f7fe fb63 	bl	8001bc4 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003500:	e00f      	b.n	8003522 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003502:	f7fe fb5f 	bl	8001bc4 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d908      	bls.n	8003522 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003510:	4b41      	ldr	r3, [pc, #260]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d102      	bne.n	8003522 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	f000 bc17 	b.w	8003d50 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003522:	4b3d      	ldr	r3, [pc, #244]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0e9      	beq.n	8003502 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800352e:	4b3a      	ldr	r3, [pc, #232]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a39      	ldr	r2, [pc, #228]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 8003534:	f043 0308 	orr.w	r3, r3, #8
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	4b37      	ldr	r3, [pc, #220]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	4934      	ldr	r1, [pc, #208]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 8003548:	4313      	orrs	r3, r2
 800354a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800354c:	4b32      	ldr	r3, [pc, #200]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	021b      	lsls	r3, r3, #8
 800355a:	492f      	ldr	r1, [pc, #188]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 800355c:	4313      	orrs	r3, r2
 800355e:	604b      	str	r3, [r1, #4]
 8003560:	e020      	b.n	80035a4 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003562:	4b2d      	ldr	r3, [pc, #180]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a2c      	ldr	r2, [pc, #176]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 8003568:	f023 0301 	bic.w	r3, r3, #1
 800356c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800356e:	f7fe fb29 	bl	8001bc4 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003574:	e00e      	b.n	8003594 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003576:	f7fe fb25 	bl	8001bc4 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d907      	bls.n	8003594 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003584:	4b24      	ldr	r3, [pc, #144]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e3dd      	b.n	8003d50 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003594:	4b20      	ldr	r3, [pc, #128]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1ea      	bne.n	8003576 <HAL_RCC_OscConfig+0x1da>
 80035a0:	e000      	b.n	80035a4 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d07e      	beq.n	80036ae <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d005      	beq.n	80035c2 <HAL_RCC_OscConfig+0x226>
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	2b0c      	cmp	r3, #12
 80035ba:	d10e      	bne.n	80035da <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2b03      	cmp	r3, #3
 80035c0:	d10b      	bne.n	80035da <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c2:	4b15      	ldr	r3, [pc, #84]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d06e      	beq.n	80036ac <HAL_RCC_OscConfig+0x310>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d16a      	bne.n	80036ac <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e3ba      	b.n	8003d50 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e2:	d106      	bne.n	80035f2 <HAL_RCC_OscConfig+0x256>
 80035e4:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a0b      	ldr	r2, [pc, #44]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 80035ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	e024      	b.n	800363c <HAL_RCC_OscConfig+0x2a0>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035fa:	d113      	bne.n	8003624 <HAL_RCC_OscConfig+0x288>
 80035fc:	4b06      	ldr	r3, [pc, #24]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a05      	ldr	r2, [pc, #20]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 8003602:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003606:	6013      	str	r3, [r2, #0]
 8003608:	4b03      	ldr	r3, [pc, #12]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a02      	ldr	r2, [pc, #8]	; (8003618 <HAL_RCC_OscConfig+0x27c>)
 800360e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	e012      	b.n	800363c <HAL_RCC_OscConfig+0x2a0>
 8003616:	bf00      	nop
 8003618:	40021000 	.word	0x40021000
 800361c:	20000000 	.word	0x20000000
 8003620:	20000004 	.word	0x20000004
 8003624:	4b8b      	ldr	r3, [pc, #556]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a8a      	ldr	r2, [pc, #552]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 800362a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	4b88      	ldr	r3, [pc, #544]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a87      	ldr	r2, [pc, #540]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 8003636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800363a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d019      	beq.n	8003678 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7fe fabe 	bl	8001bc4 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800364a:	e00e      	b.n	800366a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800364c:	f7fe faba 	bl	8001bc4 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b64      	cmp	r3, #100	; 0x64
 8003658:	d907      	bls.n	800366a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800365a:	4b7e      	ldr	r3, [pc, #504]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e372      	b.n	8003d50 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800366a:	4b7a      	ldr	r3, [pc, #488]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0ea      	beq.n	800364c <HAL_RCC_OscConfig+0x2b0>
 8003676:	e01a      	b.n	80036ae <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7fe faa4 	bl	8001bc4 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800367e:	e00e      	b.n	800369e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003680:	f7fe faa0 	bl	8001bc4 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b64      	cmp	r3, #100	; 0x64
 800368c:	d907      	bls.n	800369e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800368e:	4b71      	ldr	r3, [pc, #452]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e358      	b.n	8003d50 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800369e:	4b6d      	ldr	r3, [pc, #436]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1ea      	bne.n	8003680 <HAL_RCC_OscConfig+0x2e4>
 80036aa:	e000      	b.n	80036ae <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d06c      	beq.n	8003794 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	2b04      	cmp	r3, #4
 80036be:	d005      	beq.n	80036cc <HAL_RCC_OscConfig+0x330>
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2b0c      	cmp	r3, #12
 80036c4:	d119      	bne.n	80036fa <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d116      	bne.n	80036fa <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036cc:	4b61      	ldr	r3, [pc, #388]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_OscConfig+0x348>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e335      	b.n	8003d50 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e4:	4b5b      	ldr	r3, [pc, #364]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	061b      	lsls	r3, r3, #24
 80036f2:	4958      	ldr	r1, [pc, #352]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036f8:	e04c      	b.n	8003794 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d029      	beq.n	8003756 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003702:	4b54      	ldr	r3, [pc, #336]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a53      	ldr	r2, [pc, #332]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 8003708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800370c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370e:	f7fe fa59 	bl	8001bc4 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003714:	e00e      	b.n	8003734 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003716:	f7fe fa55 	bl	8001bc4 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d907      	bls.n	8003734 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003724:	4b4b      	ldr	r3, [pc, #300]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e30d      	b.n	8003d50 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003734:	4b47      	ldr	r3, [pc, #284]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0ea      	beq.n	8003716 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003740:	4b44      	ldr	r3, [pc, #272]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	061b      	lsls	r3, r3, #24
 800374e:	4941      	ldr	r1, [pc, #260]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 8003750:	4313      	orrs	r3, r2
 8003752:	604b      	str	r3, [r1, #4]
 8003754:	e01e      	b.n	8003794 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003756:	4b3f      	ldr	r3, [pc, #252]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a3e      	ldr	r2, [pc, #248]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 800375c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003762:	f7fe fa2f 	bl	8001bc4 <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003768:	e00e      	b.n	8003788 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800376a:	f7fe fa2b 	bl	8001bc4 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d907      	bls.n	8003788 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003778:	4b36      	ldr	r3, [pc, #216]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e2e3      	b.n	8003d50 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003788:	4b32      	ldr	r3, [pc, #200]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1ea      	bne.n	800376a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b00      	cmp	r3, #0
 800379e:	d062      	beq.n	8003866 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d038      	beq.n	800381a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d108      	bne.n	80037c2 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80037b0:	4b28      	ldr	r3, [pc, #160]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 80037b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037b6:	4a27      	ldr	r2, [pc, #156]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 80037b8:	f023 0310 	bic.w	r3, r3, #16
 80037bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80037c0:	e007      	b.n	80037d2 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80037c2:	4b24      	ldr	r3, [pc, #144]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 80037c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037c8:	4a22      	ldr	r2, [pc, #136]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 80037ca:	f043 0310 	orr.w	r3, r3, #16
 80037ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037d2:	4b20      	ldr	r3, [pc, #128]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 80037d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d8:	4a1e      	ldr	r2, [pc, #120]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e2:	f7fe f9ef 	bl	8001bc4 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037e8:	e00f      	b.n	800380a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ea:	f7fe f9eb 	bl	8001bc4 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b07      	cmp	r3, #7
 80037f6:	d908      	bls.n	800380a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037f8:	4b16      	ldr	r3, [pc, #88]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 80037fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e2a2      	b.n	8003d50 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800380a:	4b12      	ldr	r3, [pc, #72]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 800380c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0e8      	beq.n	80037ea <HAL_RCC_OscConfig+0x44e>
 8003818:	e025      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800381a:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 800381c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003820:	4a0c      	ldr	r2, [pc, #48]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 8003822:	f023 0301 	bic.w	r3, r3, #1
 8003826:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382a:	f7fe f9cb 	bl	8001bc4 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003830:	e012      	b.n	8003858 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003832:	f7fe f9c7 	bl	8001bc4 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b07      	cmp	r3, #7
 800383e:	d90b      	bls.n	8003858 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <HAL_RCC_OscConfig+0x4b8>)
 8003842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d004      	beq.n	8003858 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e27e      	b.n	8003d50 <HAL_RCC_OscConfig+0x9b4>
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003858:	4ba8      	ldr	r3, [pc, #672]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 800385a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1e5      	bne.n	8003832 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 812d 	beq.w	8003ace <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003874:	2300      	movs	r3, #0
 8003876:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003878:	4ba0      	ldr	r3, [pc, #640]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 800387a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10d      	bne.n	80038a0 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003884:	4b9d      	ldr	r3, [pc, #628]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 8003886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003888:	4a9c      	ldr	r2, [pc, #624]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 800388a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800388e:	6593      	str	r3, [r2, #88]	; 0x58
 8003890:	4b9a      	ldr	r3, [pc, #616]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 8003892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800389c:	2301      	movs	r3, #1
 800389e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a0:	4b97      	ldr	r3, [pc, #604]	; (8003b00 <HAL_RCC_OscConfig+0x764>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d11e      	bne.n	80038ea <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038ac:	4b94      	ldr	r3, [pc, #592]	; (8003b00 <HAL_RCC_OscConfig+0x764>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a93      	ldr	r2, [pc, #588]	; (8003b00 <HAL_RCC_OscConfig+0x764>)
 80038b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038b8:	f7fe f984 	bl	8001bc4 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038be:	e00e      	b.n	80038de <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c0:	f7fe f980 	bl	8001bc4 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d907      	bls.n	80038de <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ce:	4b8c      	ldr	r3, [pc, #560]	; (8003b00 <HAL_RCC_OscConfig+0x764>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e238      	b.n	8003d50 <HAL_RCC_OscConfig+0x9b4>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038de:	4b88      	ldr	r3, [pc, #544]	; (8003b00 <HAL_RCC_OscConfig+0x764>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0ea      	beq.n	80038c0 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d01f      	beq.n	8003936 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d010      	beq.n	8003924 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003902:	4b7e      	ldr	r3, [pc, #504]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 8003904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003908:	4a7c      	ldr	r2, [pc, #496]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 800390a:	f043 0304 	orr.w	r3, r3, #4
 800390e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003912:	4b7a      	ldr	r3, [pc, #488]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 8003914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003918:	4a78      	ldr	r2, [pc, #480]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003922:	e018      	b.n	8003956 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003924:	4b75      	ldr	r3, [pc, #468]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392a:	4a74      	ldr	r2, [pc, #464]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003934:	e00f      	b.n	8003956 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003936:	4b71      	ldr	r3, [pc, #452]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 8003938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393c:	4a6f      	ldr	r2, [pc, #444]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 800393e:	f023 0301 	bic.w	r3, r3, #1
 8003942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003946:	4b6d      	ldr	r3, [pc, #436]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 8003948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394c:	4a6b      	ldr	r2, [pc, #428]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 800394e:	f023 0304 	bic.w	r3, r3, #4
 8003952:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d068      	beq.n	8003a30 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395e:	f7fe f931 	bl	8001bc4 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003964:	e011      	b.n	800398a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003966:	f7fe f92d 	bl	8001bc4 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	f241 3288 	movw	r2, #5000	; 0x1388
 8003974:	4293      	cmp	r3, r2
 8003976:	d908      	bls.n	800398a <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003978:	4b60      	ldr	r3, [pc, #384]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 800397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e1e2      	b.n	8003d50 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800398a:	4b5c      	ldr	r3, [pc, #368]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 800398c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0e6      	beq.n	8003966 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d022      	beq.n	80039ea <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80039a4:	4b55      	ldr	r3, [pc, #340]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 80039a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039aa:	4a54      	ldr	r2, [pc, #336]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 80039ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80039b4:	e011      	b.n	80039da <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b6:	f7fe f905 	bl	8001bc4 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d908      	bls.n	80039da <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80039c8:	4b4c      	ldr	r3, [pc, #304]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 80039ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e1ba      	b.n	8003d50 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80039da:	4b48      	ldr	r3, [pc, #288]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 80039dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0e6      	beq.n	80039b6 <HAL_RCC_OscConfig+0x61a>
 80039e8:	e068      	b.n	8003abc <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80039ea:	4b44      	ldr	r3, [pc, #272]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 80039ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f0:	4a42      	ldr	r2, [pc, #264]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 80039f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80039fa:	e011      	b.n	8003a20 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fc:	f7fe f8e2 	bl	8001bc4 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d908      	bls.n	8003a20 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a0e:	4b3b      	ldr	r3, [pc, #236]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 8003a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e197      	b.n	8003d50 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a20:	4b36      	ldr	r3, [pc, #216]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 8003a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1e6      	bne.n	80039fc <HAL_RCC_OscConfig+0x660>
 8003a2e:	e045      	b.n	8003abc <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a30:	f7fe f8c8 	bl	8001bc4 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a36:	e011      	b.n	8003a5c <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a38:	f7fe f8c4 	bl	8001bc4 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d908      	bls.n	8003a5c <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a4a:	4b2c      	ldr	r3, [pc, #176]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 8003a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e179      	b.n	8003d50 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a5c:	4b27      	ldr	r3, [pc, #156]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 8003a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1e6      	bne.n	8003a38 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003a6a:	4b24      	ldr	r3, [pc, #144]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d021      	beq.n	8003abc <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003a78:	4b20      	ldr	r3, [pc, #128]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7e:	4a1f      	ldr	r2, [pc, #124]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 8003a80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a88:	e011      	b.n	8003aae <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8a:	f7fe f89b 	bl	8001bc4 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d908      	bls.n	8003aae <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a9c:	4b17      	ldr	r3, [pc, #92]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 8003a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e150      	b.n	8003d50 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003aae:	4b13      	ldr	r3, [pc, #76]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1e6      	bne.n	8003a8a <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003abc:	7ffb      	ldrb	r3, [r7, #31]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d105      	bne.n	8003ace <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac2:	4b0e      	ldr	r3, [pc, #56]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac6:	4a0d      	ldr	r2, [pc, #52]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 8003ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003acc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d04f      	beq.n	8003b7a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d028      	beq.n	8003b34 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ae2:	4b06      	ldr	r3, [pc, #24]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 8003ae4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ae8:	4a04      	ldr	r2, [pc, #16]	; (8003afc <HAL_RCC_OscConfig+0x760>)
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af2:	f7fe f867 	bl	8001bc4 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003af8:	e014      	b.n	8003b24 <HAL_RCC_OscConfig+0x788>
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000
 8003b00:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b04:	f7fe f85e 	bl	8001bc4 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d908      	bls.n	8003b24 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b12:	4b91      	ldr	r3, [pc, #580]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003b14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e115      	b.n	8003d50 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b24:	4b8c      	ldr	r3, [pc, #560]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003b26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0e8      	beq.n	8003b04 <HAL_RCC_OscConfig+0x768>
 8003b32:	e022      	b.n	8003b7a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b34:	4b88      	ldr	r3, [pc, #544]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003b36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b3a:	4a87      	ldr	r2, [pc, #540]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003b3c:	f023 0301 	bic.w	r3, r3, #1
 8003b40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b44:	f7fe f83e 	bl	8001bc4 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b4a:	e00f      	b.n	8003b6c <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b4c:	f7fe f83a 	bl	8001bc4 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d908      	bls.n	8003b6c <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b5a:	4b7f      	ldr	r3, [pc, #508]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003b5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e0f1      	b.n	8003d50 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b6c:	4b7a      	ldr	r3, [pc, #488]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003b6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1e8      	bne.n	8003b4c <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 80e5 	beq.w	8003d4e <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b84:	4b74      	ldr	r3, [pc, #464]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 030c 	and.w	r3, r3, #12
 8003b8c:	2b0c      	cmp	r3, #12
 8003b8e:	f000 809f 	beq.w	8003cd0 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d166      	bne.n	8003c68 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b9a:	4b6f      	ldr	r3, [pc, #444]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a6e      	ldr	r2, [pc, #440]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003ba0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba6:	f7fe f80d 	bl	8001bc4 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bac:	e00e      	b.n	8003bcc <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bae:	f7fe f809 	bl	8001bc4 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d907      	bls.n	8003bcc <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bbc:	4b66      	ldr	r3, [pc, #408]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e0c1      	b.n	8003d50 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bcc:	4b62      	ldr	r3, [pc, #392]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1ea      	bne.n	8003bae <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bd8:	4b5f      	ldr	r3, [pc, #380]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	4b5f      	ldr	r3, [pc, #380]	; (8003d5c <HAL_RCC_OscConfig+0x9c0>)
 8003bde:	4013      	ands	r3, r2
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003be8:	3a01      	subs	r2, #1
 8003bea:	0112      	lsls	r2, r2, #4
 8003bec:	4311      	orrs	r1, r2
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bf2:	0212      	lsls	r2, r2, #8
 8003bf4:	4311      	orrs	r1, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003bfa:	0852      	lsrs	r2, r2, #1
 8003bfc:	3a01      	subs	r2, #1
 8003bfe:	0552      	lsls	r2, r2, #21
 8003c00:	4311      	orrs	r1, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003c06:	0852      	lsrs	r2, r2, #1
 8003c08:	3a01      	subs	r2, #1
 8003c0a:	0652      	lsls	r2, r2, #25
 8003c0c:	4311      	orrs	r1, r2
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c12:	06d2      	lsls	r2, r2, #27
 8003c14:	430a      	orrs	r2, r1
 8003c16:	4950      	ldr	r1, [pc, #320]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c1c:	4b4e      	ldr	r3, [pc, #312]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a4d      	ldr	r2, [pc, #308]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c26:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c28:	4b4b      	ldr	r3, [pc, #300]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	4a4a      	ldr	r2, [pc, #296]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c32:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fd ffc6 	bl	8001bc4 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c3a:	e00e      	b.n	8003c5a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3c:	f7fd ffc2 	bl	8001bc4 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d907      	bls.n	8003c5a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c4a:	4b43      	ldr	r3, [pc, #268]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e07a      	b.n	8003d50 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c5a:	4b3f      	ldr	r3, [pc, #252]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0ea      	beq.n	8003c3c <HAL_RCC_OscConfig+0x8a0>
 8003c66:	e072      	b.n	8003d4e <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c68:	4b3b      	ldr	r3, [pc, #236]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a3a      	ldr	r2, [pc, #232]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003c6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c72:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003c74:	4b38      	ldr	r3, [pc, #224]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d105      	bne.n	8003c8c <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003c80:	4b35      	ldr	r3, [pc, #212]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	4a34      	ldr	r2, [pc, #208]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003c86:	f023 0303 	bic.w	r3, r3, #3
 8003c8a:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c8c:	4b32      	ldr	r3, [pc, #200]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	4a31      	ldr	r2, [pc, #196]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003c92:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9c:	f7fd ff92 	bl	8001bc4 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ca2:	e00e      	b.n	8003cc2 <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca4:	f7fd ff8e 	bl	8001bc4 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d907      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cb2:	4b29      	ldr	r3, [pc, #164]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e046      	b.n	8003d50 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc2:	4b25      	ldr	r3, [pc, #148]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1ea      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x908>
 8003cce:	e03e      	b.n	8003d4e <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e039      	b.n	8003d50 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003cdc:	4b1e      	ldr	r3, [pc, #120]	; (8003d58 <HAL_RCC_OscConfig+0x9bc>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f003 0203 	and.w	r2, r3, #3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d12c      	bne.n	8003d4a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d123      	bne.n	8003d4a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d11b      	bne.n	8003d4a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d113      	bne.n	8003d4a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	085b      	lsrs	r3, r3, #1
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d109      	bne.n	8003d4a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d40:	085b      	lsrs	r3, r3, #1
 8003d42:	3b01      	subs	r3, #1
 8003d44:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d001      	beq.n	8003d4e <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3720      	adds	r7, #32
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	019f800c 	.word	0x019f800c

08003d60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e10d      	b.n	8003f94 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d78:	4b88      	ldr	r3, [pc, #544]	; (8003f9c <HAL_RCC_ClockConfig+0x23c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d910      	bls.n	8003da8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d86:	4b85      	ldr	r3, [pc, #532]	; (8003f9c <HAL_RCC_ClockConfig+0x23c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f023 020f 	bic.w	r2, r3, #15
 8003d8e:	4983      	ldr	r1, [pc, #524]	; (8003f9c <HAL_RCC_ClockConfig+0x23c>)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d96:	4b81      	ldr	r3, [pc, #516]	; (8003f9c <HAL_RCC_ClockConfig+0x23c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d001      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e0f5      	b.n	8003f94 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 8094 	beq.w	8003ede <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d134      	bne.n	8003e28 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dbe:	4b78      	ldr	r3, [pc, #480]	; (8003fa0 <HAL_RCC_ClockConfig+0x240>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e0e2      	b.n	8003f94 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003dce:	f000 fa2d 	bl	800422c <RCC_GetSysClockFreqFromPLLSource>
 8003dd2:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	4a73      	ldr	r2, [pc, #460]	; (8003fa4 <HAL_RCC_ClockConfig+0x244>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d956      	bls.n	8003e8a <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003ddc:	4b70      	ldr	r3, [pc, #448]	; (8003fa0 <HAL_RCC_ClockConfig+0x240>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10a      	bne.n	8003dfe <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003de8:	4b6d      	ldr	r3, [pc, #436]	; (8003fa0 <HAL_RCC_ClockConfig+0x240>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003df0:	4a6b      	ldr	r2, [pc, #428]	; (8003fa0 <HAL_RCC_ClockConfig+0x240>)
 8003df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003df8:	2380      	movs	r3, #128	; 0x80
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	e045      	b.n	8003e8a <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d03f      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d13b      	bne.n	8003e8a <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e12:	4b63      	ldr	r3, [pc, #396]	; (8003fa0 <HAL_RCC_ClockConfig+0x240>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e1a:	4a61      	ldr	r2, [pc, #388]	; (8003fa0 <HAL_RCC_ClockConfig+0x240>)
 8003e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e22:	2380      	movs	r3, #128	; 0x80
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	e030      	b.n	8003e8a <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d107      	bne.n	8003e40 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e30:	4b5b      	ldr	r3, [pc, #364]	; (8003fa0 <HAL_RCC_ClockConfig+0x240>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d115      	bne.n	8003e68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0a9      	b.n	8003f94 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d107      	bne.n	8003e58 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e48:	4b55      	ldr	r3, [pc, #340]	; (8003fa0 <HAL_RCC_ClockConfig+0x240>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d109      	bne.n	8003e68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e09d      	b.n	8003f94 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e58:	4b51      	ldr	r3, [pc, #324]	; (8003fa0 <HAL_RCC_ClockConfig+0x240>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e095      	b.n	8003f94 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e68:	f000 f8a2 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8003e6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	4a4c      	ldr	r2, [pc, #304]	; (8003fa4 <HAL_RCC_ClockConfig+0x244>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d909      	bls.n	8003e8a <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e76:	4b4a      	ldr	r3, [pc, #296]	; (8003fa0 <HAL_RCC_ClockConfig+0x240>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e7e:	4a48      	ldr	r2, [pc, #288]	; (8003fa0 <HAL_RCC_ClockConfig+0x240>)
 8003e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e84:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e86:	2380      	movs	r3, #128	; 0x80
 8003e88:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e8a:	4b45      	ldr	r3, [pc, #276]	; (8003fa0 <HAL_RCC_ClockConfig+0x240>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f023 0203 	bic.w	r2, r3, #3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	4942      	ldr	r1, [pc, #264]	; (8003fa0 <HAL_RCC_ClockConfig+0x240>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e9c:	f7fd fe92 	bl	8001bc4 <HAL_GetTick>
 8003ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea2:	e013      	b.n	8003ecc <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea4:	f7fd fe8e 	bl	8001bc4 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d90a      	bls.n	8003ecc <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb6:	4b3a      	ldr	r3, [pc, #232]	; (8003fa0 <HAL_RCC_ClockConfig+0x240>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 020c 	and.w	r2, r3, #12
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e063      	b.n	8003f94 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ecc:	4b34      	ldr	r3, [pc, #208]	; (8003fa0 <HAL_RCC_ClockConfig+0x240>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 020c 	and.w	r2, r3, #12
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d1e2      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d009      	beq.n	8003efe <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eea:	4b2d      	ldr	r3, [pc, #180]	; (8003fa0 <HAL_RCC_ClockConfig+0x240>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	492a      	ldr	r1, [pc, #168]	; (8003fa0 <HAL_RCC_ClockConfig+0x240>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	608b      	str	r3, [r1, #8]
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2b80      	cmp	r3, #128	; 0x80
 8003f02:	d105      	bne.n	8003f10 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f04:	4b26      	ldr	r3, [pc, #152]	; (8003fa0 <HAL_RCC_ClockConfig+0x240>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	4a25      	ldr	r2, [pc, #148]	; (8003fa0 <HAL_RCC_ClockConfig+0x240>)
 8003f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f0e:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f10:	4b22      	ldr	r3, [pc, #136]	; (8003f9c <HAL_RCC_ClockConfig+0x23c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d210      	bcs.n	8003f40 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1e:	4b1f      	ldr	r3, [pc, #124]	; (8003f9c <HAL_RCC_ClockConfig+0x23c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f023 020f 	bic.w	r2, r3, #15
 8003f26:	491d      	ldr	r1, [pc, #116]	; (8003f9c <HAL_RCC_ClockConfig+0x23c>)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2e:	4b1b      	ldr	r3, [pc, #108]	; (8003f9c <HAL_RCC_ClockConfig+0x23c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d001      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e029      	b.n	8003f94 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d008      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f4c:	4b14      	ldr	r3, [pc, #80]	; (8003fa0 <HAL_RCC_ClockConfig+0x240>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	4911      	ldr	r1, [pc, #68]	; (8003fa0 <HAL_RCC_ClockConfig+0x240>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d009      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <HAL_RCC_ClockConfig+0x240>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	4909      	ldr	r1, [pc, #36]	; (8003fa0 <HAL_RCC_ClockConfig+0x240>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003f7e:	f000 f8b5 	bl	80040ec <HAL_RCC_GetHCLKFreq>
 8003f82:	4603      	mov	r3, r0
 8003f84:	4a08      	ldr	r2, [pc, #32]	; (8003fa8 <HAL_RCC_ClockConfig+0x248>)
 8003f86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003f88:	4b08      	ldr	r3, [pc, #32]	; (8003fac <HAL_RCC_ClockConfig+0x24c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fd fdc9 	bl	8001b24 <HAL_InitTick>
 8003f92:	4603      	mov	r3, r0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40022000 	.word	0x40022000
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	04c4b400 	.word	0x04c4b400
 8003fa8:	20000000 	.word	0x20000000
 8003fac:	20000004 	.word	0x20000004

08003fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b089      	sub	sp, #36	; 0x24
 8003fb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61fb      	str	r3, [r7, #28]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fbe:	4b47      	ldr	r3, [pc, #284]	; (80040dc <HAL_RCC_GetSysClockFreq+0x12c>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 030c 	and.w	r3, r3, #12
 8003fc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fc8:	4b44      	ldr	r3, [pc, #272]	; (80040dc <HAL_RCC_GetSysClockFreq+0x12c>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f003 0303 	and.w	r3, r3, #3
 8003fd0:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x34>
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	2b0c      	cmp	r3, #12
 8003fdc:	d121      	bne.n	8004022 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d11e      	bne.n	8004022 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fe4:	4b3d      	ldr	r3, [pc, #244]	; (80040dc <HAL_RCC_GetSysClockFreq+0x12c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d107      	bne.n	8004000 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ff0:	4b3a      	ldr	r3, [pc, #232]	; (80040dc <HAL_RCC_GetSysClockFreq+0x12c>)
 8003ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ff6:	0a1b      	lsrs	r3, r3, #8
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	e005      	b.n	800400c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004000:	4b36      	ldr	r3, [pc, #216]	; (80040dc <HAL_RCC_GetSysClockFreq+0x12c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	091b      	lsrs	r3, r3, #4
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800400c:	4a34      	ldr	r2, [pc, #208]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x130>)
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004014:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10d      	bne.n	8004038 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004020:	e00a      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	2b04      	cmp	r3, #4
 8004026:	d102      	bne.n	800402e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004028:	4b2e      	ldr	r3, [pc, #184]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x134>)
 800402a:	61bb      	str	r3, [r7, #24]
 800402c:	e004      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b08      	cmp	r3, #8
 8004032:	d101      	bne.n	8004038 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004034:	4b2c      	ldr	r3, [pc, #176]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004036:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	2b0c      	cmp	r3, #12
 800403c:	d146      	bne.n	80040cc <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800403e:	4b27      	ldr	r3, [pc, #156]	; (80040dc <HAL_RCC_GetSysClockFreq+0x12c>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004048:	4b24      	ldr	r3, [pc, #144]	; (80040dc <HAL_RCC_GetSysClockFreq+0x12c>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	091b      	lsrs	r3, r3, #4
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	3301      	adds	r3, #1
 8004054:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2b02      	cmp	r3, #2
 800405a:	d003      	beq.n	8004064 <HAL_RCC_GetSysClockFreq+0xb4>
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b03      	cmp	r3, #3
 8004060:	d00d      	beq.n	800407e <HAL_RCC_GetSysClockFreq+0xce>
 8004062:	e019      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004064:	4a1f      	ldr	r2, [pc, #124]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x134>)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	fbb2 f3f3 	udiv	r3, r2, r3
 800406c:	4a1b      	ldr	r2, [pc, #108]	; (80040dc <HAL_RCC_GetSysClockFreq+0x12c>)
 800406e:	68d2      	ldr	r2, [r2, #12]
 8004070:	0a12      	lsrs	r2, r2, #8
 8004072:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004076:	fb02 f303 	mul.w	r3, r2, r3
 800407a:	617b      	str	r3, [r7, #20]
        break;
 800407c:	e019      	b.n	80040b2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800407e:	4a1a      	ldr	r2, [pc, #104]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	fbb2 f3f3 	udiv	r3, r2, r3
 8004086:	4a15      	ldr	r2, [pc, #84]	; (80040dc <HAL_RCC_GetSysClockFreq+0x12c>)
 8004088:	68d2      	ldr	r2, [r2, #12]
 800408a:	0a12      	lsrs	r2, r2, #8
 800408c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004090:	fb02 f303 	mul.w	r3, r2, r3
 8004094:	617b      	str	r3, [r7, #20]
        break;
 8004096:	e00c      	b.n	80040b2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004098:	69fa      	ldr	r2, [r7, #28]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a0:	4a0e      	ldr	r2, [pc, #56]	; (80040dc <HAL_RCC_GetSysClockFreq+0x12c>)
 80040a2:	68d2      	ldr	r2, [r2, #12]
 80040a4:	0a12      	lsrs	r2, r2, #8
 80040a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040aa:	fb02 f303 	mul.w	r3, r2, r3
 80040ae:	617b      	str	r3, [r7, #20]
        break;
 80040b0:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80040b2:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <HAL_RCC_GetSysClockFreq+0x12c>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	0e5b      	lsrs	r3, r3, #25
 80040b8:	f003 0303 	and.w	r3, r3, #3
 80040bc:	3301      	adds	r3, #1
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040cc:	69bb      	ldr	r3, [r7, #24]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3724      	adds	r7, #36	; 0x24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40021000 	.word	0x40021000
 80040e0:	0800717c 	.word	0x0800717c
 80040e4:	00f42400 	.word	0x00f42400
 80040e8:	007a1200 	.word	0x007a1200

080040ec <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80040f0:	f7ff ff5e 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 80040f4:	4602      	mov	r2, r0
 80040f6:	4b05      	ldr	r3, [pc, #20]	; (800410c <HAL_RCC_GetHCLKFreq+0x20>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	091b      	lsrs	r3, r3, #4
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	4903      	ldr	r1, [pc, #12]	; (8004110 <HAL_RCC_GetHCLKFreq+0x24>)
 8004102:	5ccb      	ldrb	r3, [r1, r3]
 8004104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004108:	4618      	mov	r0, r3
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40021000 	.word	0x40021000
 8004110:	08007164 	.word	0x08007164

08004114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004118:	f7ff ffe8 	bl	80040ec <HAL_RCC_GetHCLKFreq>
 800411c:	4602      	mov	r2, r0
 800411e:	4b05      	ldr	r3, [pc, #20]	; (8004134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	0a1b      	lsrs	r3, r3, #8
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	4903      	ldr	r1, [pc, #12]	; (8004138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800412a:	5ccb      	ldrb	r3, [r1, r3]
 800412c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004130:	4618      	mov	r0, r3
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40021000 	.word	0x40021000
 8004138:	08007174 	.word	0x08007174

0800413c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004140:	f7ff ffd4 	bl	80040ec <HAL_RCC_GetHCLKFreq>
 8004144:	4602      	mov	r2, r0
 8004146:	4b05      	ldr	r3, [pc, #20]	; (800415c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	0adb      	lsrs	r3, r3, #11
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	4903      	ldr	r1, [pc, #12]	; (8004160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004152:	5ccb      	ldrb	r3, [r1, r3]
 8004154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004158:	4618      	mov	r0, r3
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40021000 	.word	0x40021000
 8004160:	08007174 	.word	0x08007174

08004164 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004170:	4b2c      	ldr	r3, [pc, #176]	; (8004224 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800417c:	f7ff f870 	bl	8003260 <HAL_PWREx_GetVoltageRange>
 8004180:	6138      	str	r0, [r7, #16]
 8004182:	e014      	b.n	80041ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004184:	4b27      	ldr	r3, [pc, #156]	; (8004224 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004188:	4a26      	ldr	r2, [pc, #152]	; (8004224 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800418a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800418e:	6593      	str	r3, [r2, #88]	; 0x58
 8004190:	4b24      	ldr	r3, [pc, #144]	; (8004224 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800419c:	f7ff f860 	bl	8003260 <HAL_PWREx_GetVoltageRange>
 80041a0:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041a2:	4b20      	ldr	r3, [pc, #128]	; (8004224 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80041a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a6:	4a1f      	ldr	r2, [pc, #124]	; (8004224 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80041a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <RCC_SetFlashLatencyFromMSIRange+0x58>
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ba:	d10b      	bne.n	80041d4 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b80      	cmp	r3, #128	; 0x80
 80041c0:	d919      	bls.n	80041f6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2ba0      	cmp	r3, #160	; 0xa0
 80041c6:	d902      	bls.n	80041ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041c8:	2302      	movs	r3, #2
 80041ca:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80041cc:	e013      	b.n	80041f6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041ce:	2301      	movs	r3, #1
 80041d0:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80041d2:	e010      	b.n	80041f6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b80      	cmp	r3, #128	; 0x80
 80041d8:	d902      	bls.n	80041e0 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041da:	2303      	movs	r3, #3
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	e00a      	b.n	80041f6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b80      	cmp	r3, #128	; 0x80
 80041e4:	d102      	bne.n	80041ec <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041e6:	2302      	movs	r3, #2
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	e004      	b.n	80041f6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b70      	cmp	r3, #112	; 0x70
 80041f0:	d101      	bne.n	80041f6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041f2:	2301      	movs	r3, #1
 80041f4:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041f6:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f023 020f 	bic.w	r2, r3, #15
 80041fe:	490a      	ldr	r1, [pc, #40]	; (8004228 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	4313      	orrs	r3, r2
 8004204:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004206:	4b08      	ldr	r3, [pc, #32]	; (8004228 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	429a      	cmp	r2, r3
 8004212:	d001      	beq.n	8004218 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e000      	b.n	800421a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40021000 	.word	0x40021000
 8004228:	40022000 	.word	0x40022000

0800422c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800422c:	b480      	push	{r7}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004236:	4b36      	ldr	r3, [pc, #216]	; (8004310 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	2b01      	cmp	r3, #1
 8004240:	d118      	bne.n	8004274 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004242:	4b33      	ldr	r3, [pc, #204]	; (8004310 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	d107      	bne.n	800425e <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800424e:	4b30      	ldr	r3, [pc, #192]	; (8004310 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004254:	0a1b      	lsrs	r3, r3, #8
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	e005      	b.n	800426a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800425e:	4b2c      	ldr	r3, [pc, #176]	; (8004310 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	091b      	lsrs	r3, r3, #4
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800426a:	4a2a      	ldr	r2, [pc, #168]	; (8004314 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004272:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004274:	4b26      	ldr	r3, [pc, #152]	; (8004310 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f003 0303 	and.w	r3, r3, #3
 800427c:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800427e:	4b24      	ldr	r3, [pc, #144]	; (8004310 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	091b      	lsrs	r3, r3, #4
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	3301      	adds	r3, #1
 800428a:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d003      	beq.n	800429a <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b03      	cmp	r3, #3
 8004296:	d00d      	beq.n	80042b4 <RCC_GetSysClockFreqFromPLLSource+0x88>
 8004298:	e019      	b.n	80042ce <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800429a:	4a1f      	ldr	r2, [pc, #124]	; (8004318 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a2:	4a1b      	ldr	r2, [pc, #108]	; (8004310 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80042a4:	68d2      	ldr	r2, [r2, #12]
 80042a6:	0a12      	lsrs	r2, r2, #8
 80042a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042ac:	fb02 f303 	mul.w	r3, r2, r3
 80042b0:	613b      	str	r3, [r7, #16]
      break;
 80042b2:	e019      	b.n	80042e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042b4:	4a19      	ldr	r2, [pc, #100]	; (800431c <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042bc:	4a14      	ldr	r2, [pc, #80]	; (8004310 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80042be:	68d2      	ldr	r2, [r2, #12]
 80042c0:	0a12      	lsrs	r2, r2, #8
 80042c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042c6:	fb02 f303 	mul.w	r3, r2, r3
 80042ca:	613b      	str	r3, [r7, #16]
      break;
 80042cc:	e00c      	b.n	80042e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d6:	4a0e      	ldr	r2, [pc, #56]	; (8004310 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80042d8:	68d2      	ldr	r2, [r2, #12]
 80042da:	0a12      	lsrs	r2, r2, #8
 80042dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042e0:	fb02 f303 	mul.w	r3, r2, r3
 80042e4:	613b      	str	r3, [r7, #16]
      break;
 80042e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80042e8:	4b09      	ldr	r3, [pc, #36]	; (8004310 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	0e5b      	lsrs	r3, r3, #25
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	3301      	adds	r3, #1
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004300:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004302:	683b      	ldr	r3, [r7, #0]
}
 8004304:	4618      	mov	r0, r3
 8004306:	371c      	adds	r7, #28
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	40021000 	.word	0x40021000
 8004314:	0800717c 	.word	0x0800717c
 8004318:	00f42400 	.word	0x00f42400
 800431c:	007a1200 	.word	0x007a1200

08004320 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004328:	2300      	movs	r3, #0
 800432a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800432c:	2300      	movs	r3, #0
 800432e:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004338:	2b00      	cmp	r3, #0
 800433a:	d040      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004340:	2b80      	cmp	r3, #128	; 0x80
 8004342:	d02a      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004344:	2b80      	cmp	r3, #128	; 0x80
 8004346:	d825      	bhi.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004348:	2b60      	cmp	r3, #96	; 0x60
 800434a:	d026      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800434c:	2b60      	cmp	r3, #96	; 0x60
 800434e:	d821      	bhi.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004350:	2b40      	cmp	r3, #64	; 0x40
 8004352:	d006      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004354:	2b40      	cmp	r3, #64	; 0x40
 8004356:	d81d      	bhi.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004358:	2b00      	cmp	r3, #0
 800435a:	d009      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800435c:	2b20      	cmp	r3, #32
 800435e:	d010      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004360:	e018      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004362:	4b8f      	ldr	r3, [pc, #572]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	4a8e      	ldr	r2, [pc, #568]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436c:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800436e:	e015      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3304      	adds	r3, #4
 8004374:	2100      	movs	r1, #0
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fb56 	bl	8004a28 <RCCEx_PLLSAI1_Config>
 800437c:	4603      	mov	r3, r0
 800437e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004380:	e00c      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3320      	adds	r3, #32
 8004386:	2100      	movs	r1, #0
 8004388:	4618      	mov	r0, r3
 800438a:	f000 fc33 	bl	8004bf4 <RCCEx_PLLSAI2_Config>
 800438e:	4603      	mov	r3, r0
 8004390:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004392:	e003      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	77fb      	strb	r3, [r7, #31]
        break;
 8004398:	e000      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800439a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800439c:	7ffb      	ldrb	r3, [r7, #31]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10b      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043a2:	4b7f      	ldr	r3, [pc, #508]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043a8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043b0:	497b      	ldr	r1, [pc, #492]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80043b8:	e001      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ba:	7ffb      	ldrb	r3, [r7, #31]
 80043bc:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d047      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d2:	d030      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80043d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d8:	d82a      	bhi.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80043da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043de:	d02a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80043e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e4:	d824      	bhi.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80043e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ea:	d008      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xde>
 80043ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f0:	d81e      	bhi.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xec>
 80043f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043fa:	d010      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80043fc:	e018      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043fe:	4b68      	ldr	r3, [pc, #416]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	4a67      	ldr	r2, [pc, #412]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004408:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800440a:	e015      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3304      	adds	r3, #4
 8004410:	2100      	movs	r1, #0
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fb08 	bl	8004a28 <RCCEx_PLLSAI1_Config>
 8004418:	4603      	mov	r3, r0
 800441a:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800441c:	e00c      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	3320      	adds	r3, #32
 8004422:	2100      	movs	r1, #0
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fbe5 	bl	8004bf4 <RCCEx_PLLSAI2_Config>
 800442a:	4603      	mov	r3, r0
 800442c:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800442e:	e003      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	77fb      	strb	r3, [r7, #31]
        break;
 8004434:	e000      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8004436:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004438:	7ffb      	ldrb	r3, [r7, #31]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10b      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800443e:	4b58      	ldr	r3, [pc, #352]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004440:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004444:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444c:	4954      	ldr	r1, [pc, #336]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004454:	e001      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004456:	7ffb      	ldrb	r3, [r7, #31]
 8004458:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 80ab 	beq.w	80045be <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004468:	2300      	movs	r3, #0
 800446a:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800446c:	4b4c      	ldr	r3, [pc, #304]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800446e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10d      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004478:	4b49      	ldr	r3, [pc, #292]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800447a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447c:	4a48      	ldr	r2, [pc, #288]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800447e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004482:	6593      	str	r3, [r2, #88]	; 0x58
 8004484:	4b46      	ldr	r3, [pc, #280]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004490:	2301      	movs	r3, #1
 8004492:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004494:	4b43      	ldr	r3, [pc, #268]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a42      	ldr	r2, [pc, #264]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800449a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800449e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044a0:	f7fd fb90 	bl	8001bc4 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044a6:	e00f      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a8:	f7fd fb8c 	bl	8001bc4 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d908      	bls.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044b6:	4b3b      	ldr	r3, [pc, #236]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d109      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	77fb      	strb	r3, [r7, #31]
        }
        break;
 80044c6:	e006      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044c8:	4b36      	ldr	r3, [pc, #216]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0e9      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80044d4:	e000      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 80044d6:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 80044d8:	7ffb      	ldrb	r3, [r7, #31]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d164      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044de:	4b30      	ldr	r3, [pc, #192]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e8:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01f      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d019      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044fc:	4b28      	ldr	r3, [pc, #160]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004506:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004508:	4b25      	ldr	r3, [pc, #148]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800450a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450e:	4a24      	ldr	r2, [pc, #144]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004518:	4b21      	ldr	r3, [pc, #132]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451e:	4a20      	ldr	r2, [pc, #128]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004528:	4a1d      	ldr	r2, [pc, #116]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d01f      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453a:	f7fd fb43 	bl	8001bc4 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004540:	e012      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004542:	f7fd fb3f 	bl	8001bc4 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004550:	4293      	cmp	r3, r2
 8004552:	d909      	bls.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004554:	4b12      	ldr	r3, [pc, #72]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10a      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8004566:	e007      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004568:	4b0d      	ldr	r3, [pc, #52]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0e5      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004576:	e000      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8004578:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 800457a:	7ffb      	ldrb	r3, [r7, #31]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10c      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004580:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004586:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004590:	4903      	ldr	r1, [pc, #12]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004598:	e008      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800459a:	7ffb      	ldrb	r3, [r7, #31]
 800459c:	77bb      	strb	r3, [r7, #30]
 800459e:	e005      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80045a0:	40021000 	.word	0x40021000
 80045a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a8:	7ffb      	ldrb	r3, [r7, #31]
 80045aa:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045ac:	7dfb      	ldrb	r3, [r7, #23]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d105      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b2:	4b9c      	ldr	r3, [pc, #624]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80045b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b6:	4a9b      	ldr	r2, [pc, #620]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80045b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045ca:	4b96      	ldr	r3, [pc, #600]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80045cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d0:	f023 0203 	bic.w	r2, r3, #3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d8:	4992      	ldr	r1, [pc, #584]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045ec:	4b8d      	ldr	r3, [pc, #564]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80045ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f2:	f023 020c 	bic.w	r2, r3, #12
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fa:	498a      	ldr	r1, [pc, #552]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800460e:	4b85      	ldr	r3, [pc, #532]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004614:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461c:	4981      	ldr	r1, [pc, #516]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0308 	and.w	r3, r3, #8
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004630:	4b7c      	ldr	r3, [pc, #496]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004636:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	4979      	ldr	r1, [pc, #484]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0310 	and.w	r3, r3, #16
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004652:	4b74      	ldr	r3, [pc, #464]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004658:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004660:	4970      	ldr	r1, [pc, #448]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0320 	and.w	r3, r3, #32
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004674:	4b6b      	ldr	r3, [pc, #428]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004682:	4968      	ldr	r1, [pc, #416]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004684:	4313      	orrs	r3, r2
 8004686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004696:	4b63      	ldr	r3, [pc, #396]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a4:	495f      	ldr	r1, [pc, #380]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046b8:	4b5a      	ldr	r3, [pc, #360]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c6:	4957      	ldr	r1, [pc, #348]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80046da:	4b52      	ldr	r3, [pc, #328]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046e8:	494e      	ldr	r1, [pc, #312]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d031      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004700:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004704:	d00e      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004706:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800470a:	d814      	bhi.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800470c:	2b00      	cmp	r3, #0
 800470e:	d015      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004714:	d10f      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004716:	4b43      	ldr	r3, [pc, #268]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	4a42      	ldr	r2, [pc, #264]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800471c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004720:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004722:	e00c      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3304      	adds	r3, #4
 8004728:	2100      	movs	r1, #0
 800472a:	4618      	mov	r0, r3
 800472c:	f000 f97c 	bl	8004a28 <RCCEx_PLLSAI1_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004734:	e003      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	77fb      	strb	r3, [r7, #31]
        break;
 800473a:	e000      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 800473c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800473e:	7ffb      	ldrb	r3, [r7, #31]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10b      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004744:	4b37      	ldr	r3, [pc, #220]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004752:	4934      	ldr	r1, [pc, #208]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800475a:	e001      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475c:	7ffb      	ldrb	r3, [r7, #31]
 800475e:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800476c:	4b2d      	ldr	r3, [pc, #180]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004772:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477a:	492a      	ldr	r1, [pc, #168]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800478e:	4b25      	ldr	r3, [pc, #148]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004794:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479c:	4921      	ldr	r1, [pc, #132]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047b0:	4b1c      	ldr	r3, [pc, #112]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047be:	4919      	ldr	r1, [pc, #100]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047d2:	4b14      	ldr	r3, [pc, #80]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047d8:	f023 0203 	bic.w	r2, r3, #3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e0:	4910      	ldr	r1, [pc, #64]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d02b      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047f4:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004802:	4908      	ldr	r1, [pc, #32]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800480e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004812:	d109      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004814:	4b03      	ldr	r3, [pc, #12]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	4a02      	ldr	r2, [pc, #8]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800481a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800481e:	60d3      	str	r3, [r2, #12]
 8004820:	e014      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004822:	bf00      	nop
 8004824:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800482c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004830:	d10c      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3304      	adds	r3, #4
 8004836:	2101      	movs	r1, #1
 8004838:	4618      	mov	r0, r3
 800483a:	f000 f8f5 	bl	8004a28 <RCCEx_PLLSAI1_Config>
 800483e:	4603      	mov	r3, r0
 8004840:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8004842:	7ffb      	ldrb	r3, [r7, #31]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8004848:	7ffb      	ldrb	r3, [r7, #31]
 800484a:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d04a      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800485c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004860:	d108      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004862:	4b70      	ldr	r3, [pc, #448]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004864:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004868:	4a6e      	ldr	r2, [pc, #440]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800486a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800486e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004872:	e012      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004874:	4b6b      	ldr	r3, [pc, #428]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004882:	4968      	ldr	r1, [pc, #416]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004884:	4313      	orrs	r3, r2
 8004886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800488a:	4b66      	ldr	r3, [pc, #408]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800488c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004890:	4a64      	ldr	r2, [pc, #400]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004892:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004896:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800489e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048a2:	d10d      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3304      	adds	r3, #4
 80048a8:	2101      	movs	r1, #1
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 f8bc 	bl	8004a28 <RCCEx_PLLSAI1_Config>
 80048b0:	4603      	mov	r3, r0
 80048b2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80048b4:	7ffb      	ldrb	r3, [r7, #31]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d019      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80048ba:	7ffb      	ldrb	r3, [r7, #31]
 80048bc:	77bb      	strb	r3, [r7, #30]
 80048be:	e016      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048c8:	d106      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048ca:	4b56      	ldr	r3, [pc, #344]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	4a55      	ldr	r2, [pc, #340]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048d4:	60d3      	str	r3, [r2, #12]
 80048d6:	e00a      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048e0:	d105      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048e2:	4b50      	ldr	r3, [pc, #320]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	4a4f      	ldr	r2, [pc, #316]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ec:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d028      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048fa:	4b4a      	ldr	r3, [pc, #296]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004900:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004908:	4946      	ldr	r1, [pc, #280]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004914:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004918:	d106      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800491a:	4b42      	ldr	r3, [pc, #264]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	4a41      	ldr	r2, [pc, #260]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004920:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004924:	60d3      	str	r3, [r2, #12]
 8004926:	e011      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800492c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004930:	d10c      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3304      	adds	r3, #4
 8004936:	2101      	movs	r1, #1
 8004938:	4618      	mov	r0, r3
 800493a:	f000 f875 	bl	8004a28 <RCCEx_PLLSAI1_Config>
 800493e:	4603      	mov	r3, r0
 8004940:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004942:	7ffb      	ldrb	r3, [r7, #31]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8004948:	7ffb      	ldrb	r3, [r7, #31]
 800494a:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01e      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004958:	4b32      	ldr	r3, [pc, #200]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800495a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004968:	492e      	ldr	r1, [pc, #184]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800496a:	4313      	orrs	r3, r2
 800496c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004976:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800497a:	d10c      	bne.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3304      	adds	r3, #4
 8004980:	2102      	movs	r1, #2
 8004982:	4618      	mov	r0, r3
 8004984:	f000 f850 	bl	8004a28 <RCCEx_PLLSAI1_Config>
 8004988:	4603      	mov	r3, r0
 800498a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800498c:	7ffb      	ldrb	r3, [r7, #31]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8004992:	7ffb      	ldrb	r3, [r7, #31]
 8004994:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00b      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049a2:	4b20      	ldr	r3, [pc, #128]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049a8:	f023 0204 	bic.w	r2, r3, #4
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049b2:	491c      	ldr	r1, [pc, #112]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00b      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80049c6:	4b17      	ldr	r3, [pc, #92]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049cc:	f023 0218 	bic.w	r2, r3, #24
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d6:	4913      	ldr	r1, [pc, #76]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d017      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80049ea:	4b0e      	ldr	r3, [pc, #56]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049fa:	490a      	ldr	r1, [pc, #40]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a0c:	d105      	bne.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a0e:	4b05      	ldr	r3, [pc, #20]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	4a04      	ldr	r2, [pc, #16]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a18:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004a1a:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3720      	adds	r7, #32
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40021000 	.word	0x40021000

08004a28 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	d018      	beq.n	8004a70 <RCCEx_PLLSAI1_Config+0x48>
 8004a3e:	2b03      	cmp	r3, #3
 8004a40:	d81f      	bhi.n	8004a82 <RCCEx_PLLSAI1_Config+0x5a>
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d002      	beq.n	8004a4c <RCCEx_PLLSAI1_Config+0x24>
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d009      	beq.n	8004a5e <RCCEx_PLLSAI1_Config+0x36>
 8004a4a:	e01a      	b.n	8004a82 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a4c:	4b65      	ldr	r3, [pc, #404]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d117      	bne.n	8004a88 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a5c:	e014      	b.n	8004a88 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a5e:	4b61      	ldr	r3, [pc, #388]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d110      	bne.n	8004a8c <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a6e:	e00d      	b.n	8004a8c <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004a70:	4b5c      	ldr	r3, [pc, #368]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d109      	bne.n	8004a90 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a80:	e006      	b.n	8004a90 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	73fb      	strb	r3, [r7, #15]
      break;
 8004a86:	e004      	b.n	8004a92 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004a88:	bf00      	nop
 8004a8a:	e002      	b.n	8004a92 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004a8c:	bf00      	nop
 8004a8e:	e000      	b.n	8004a92 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004a90:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f040 809f 	bne.w	8004bd8 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a9a:	4b52      	ldr	r3, [pc, #328]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a51      	ldr	r2, [pc, #324]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004aa0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004aa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa6:	f7fd f88d 	bl	8001bc4 <HAL_GetTick>
 8004aaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004aac:	e00f      	b.n	8004ace <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004aae:	f7fd f889 	bl	8001bc4 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d908      	bls.n	8004ace <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004abc:	4b49      	ldr	r3, [pc, #292]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d009      	beq.n	8004adc <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004acc:	e006      	b.n	8004adc <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ace:	4b45      	ldr	r3, [pc, #276]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1e9      	bne.n	8004aae <RCCEx_PLLSAI1_Config+0x86>
 8004ada:	e000      	b.n	8004ade <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004adc:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d179      	bne.n	8004bd8 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d116      	bne.n	8004b18 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004aea:	4b3e      	ldr	r3, [pc, #248]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004aec:	691a      	ldr	r2, [r3, #16]
 8004aee:	4b3e      	ldr	r3, [pc, #248]	; (8004be8 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6892      	ldr	r2, [r2, #8]
 8004af6:	0211      	lsls	r1, r2, #8
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	68d2      	ldr	r2, [r2, #12]
 8004afc:	06d2      	lsls	r2, r2, #27
 8004afe:	4311      	orrs	r1, r2
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6852      	ldr	r2, [r2, #4]
 8004b04:	3a01      	subs	r2, #1
 8004b06:	0112      	lsls	r2, r2, #4
 8004b08:	4311      	orrs	r1, r2
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6812      	ldr	r2, [r2, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	4934      	ldr	r1, [pc, #208]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	610b      	str	r3, [r1, #16]
 8004b16:	e033      	b.n	8004b80 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d118      	bne.n	8004b50 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b1e:	4b31      	ldr	r3, [pc, #196]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b20:	691a      	ldr	r2, [r3, #16]
 8004b22:	4b32      	ldr	r3, [pc, #200]	; (8004bec <RCCEx_PLLSAI1_Config+0x1c4>)
 8004b24:	4013      	ands	r3, r2
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6892      	ldr	r2, [r2, #8]
 8004b2a:	0211      	lsls	r1, r2, #8
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6912      	ldr	r2, [r2, #16]
 8004b30:	0852      	lsrs	r2, r2, #1
 8004b32:	3a01      	subs	r2, #1
 8004b34:	0552      	lsls	r2, r2, #21
 8004b36:	4311      	orrs	r1, r2
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6852      	ldr	r2, [r2, #4]
 8004b3c:	3a01      	subs	r2, #1
 8004b3e:	0112      	lsls	r2, r2, #4
 8004b40:	4311      	orrs	r1, r2
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6812      	ldr	r2, [r2, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	4926      	ldr	r1, [pc, #152]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	610b      	str	r3, [r1, #16]
 8004b4e:	e017      	b.n	8004b80 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b50:	4b24      	ldr	r3, [pc, #144]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	4b26      	ldr	r3, [pc, #152]	; (8004bf0 <RCCEx_PLLSAI1_Config+0x1c8>)
 8004b56:	4013      	ands	r3, r2
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6892      	ldr	r2, [r2, #8]
 8004b5c:	0211      	lsls	r1, r2, #8
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6952      	ldr	r2, [r2, #20]
 8004b62:	0852      	lsrs	r2, r2, #1
 8004b64:	3a01      	subs	r2, #1
 8004b66:	0652      	lsls	r2, r2, #25
 8004b68:	4311      	orrs	r1, r2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6852      	ldr	r2, [r2, #4]
 8004b6e:	3a01      	subs	r2, #1
 8004b70:	0112      	lsls	r2, r2, #4
 8004b72:	4311      	orrs	r1, r2
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6812      	ldr	r2, [r2, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	491a      	ldr	r1, [pc, #104]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b80:	4b18      	ldr	r3, [pc, #96]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a17      	ldr	r2, [pc, #92]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8c:	f7fd f81a 	bl	8001bc4 <HAL_GetTick>
 8004b90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b92:	e00f      	b.n	8004bb4 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b94:	f7fd f816 	bl	8001bc4 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d908      	bls.n	8004bb4 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ba2:	4b10      	ldr	r3, [pc, #64]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d109      	bne.n	8004bc2 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004bb2:	e006      	b.n	8004bc2 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0e9      	beq.n	8004b94 <RCCEx_PLLSAI1_Config+0x16c>
 8004bc0:	e000      	b.n	8004bc4 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8004bc2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8004bca:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004bcc:	691a      	ldr	r2, [r3, #16]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	4904      	ldr	r1, [pc, #16]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	40021000 	.word	0x40021000
 8004be8:	07ff800c 	.word	0x07ff800c
 8004bec:	ff9f800c 	.word	0xff9f800c
 8004bf0:	f9ff800c 	.word	0xf9ff800c

08004bf4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b03      	cmp	r3, #3
 8004c08:	d018      	beq.n	8004c3c <RCCEx_PLLSAI2_Config+0x48>
 8004c0a:	2b03      	cmp	r3, #3
 8004c0c:	d81f      	bhi.n	8004c4e <RCCEx_PLLSAI2_Config+0x5a>
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d002      	beq.n	8004c18 <RCCEx_PLLSAI2_Config+0x24>
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d009      	beq.n	8004c2a <RCCEx_PLLSAI2_Config+0x36>
 8004c16:	e01a      	b.n	8004c4e <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c18:	4b4a      	ldr	r3, [pc, #296]	; (8004d44 <RCCEx_PLLSAI2_Config+0x150>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d117      	bne.n	8004c54 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c28:	e014      	b.n	8004c54 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c2a:	4b46      	ldr	r3, [pc, #280]	; (8004d44 <RCCEx_PLLSAI2_Config+0x150>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d110      	bne.n	8004c58 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c3a:	e00d      	b.n	8004c58 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004c3c:	4b41      	ldr	r3, [pc, #260]	; (8004d44 <RCCEx_PLLSAI2_Config+0x150>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d109      	bne.n	8004c5c <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c4c:	e006      	b.n	8004c5c <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	73fb      	strb	r3, [r7, #15]
      break;
 8004c52:	e004      	b.n	8004c5e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004c54:	bf00      	nop
 8004c56:	e002      	b.n	8004c5e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004c58:	bf00      	nop
 8004c5a:	e000      	b.n	8004c5e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004c5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d169      	bne.n	8004d38 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c64:	4b37      	ldr	r3, [pc, #220]	; (8004d44 <RCCEx_PLLSAI2_Config+0x150>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a36      	ldr	r2, [pc, #216]	; (8004d44 <RCCEx_PLLSAI2_Config+0x150>)
 8004c6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c70:	f7fc ffa8 	bl	8001bc4 <HAL_GetTick>
 8004c74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c76:	e00f      	b.n	8004c98 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c78:	f7fc ffa4 	bl	8001bc4 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d908      	bls.n	8004c98 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c86:	4b2f      	ldr	r3, [pc, #188]	; (8004d44 <RCCEx_PLLSAI2_Config+0x150>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d009      	beq.n	8004ca6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c96:	e006      	b.n	8004ca6 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c98:	4b2a      	ldr	r3, [pc, #168]	; (8004d44 <RCCEx_PLLSAI2_Config+0x150>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e9      	bne.n	8004c78 <RCCEx_PLLSAI2_Config+0x84>
 8004ca4:	e000      	b.n	8004ca8 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8004ca6:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d144      	bne.n	8004d38 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d115      	bne.n	8004ce0 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cb4:	4b23      	ldr	r3, [pc, #140]	; (8004d44 <RCCEx_PLLSAI2_Config+0x150>)
 8004cb6:	695a      	ldr	r2, [r3, #20]
 8004cb8:	4b23      	ldr	r3, [pc, #140]	; (8004d48 <RCCEx_PLLSAI2_Config+0x154>)
 8004cba:	4013      	ands	r3, r2
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6892      	ldr	r2, [r2, #8]
 8004cc0:	0211      	lsls	r1, r2, #8
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	68d2      	ldr	r2, [r2, #12]
 8004cc6:	06d2      	lsls	r2, r2, #27
 8004cc8:	4311      	orrs	r1, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6852      	ldr	r2, [r2, #4]
 8004cce:	3a01      	subs	r2, #1
 8004cd0:	0112      	lsls	r2, r2, #4
 8004cd2:	4311      	orrs	r1, r2
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	491a      	ldr	r1, [pc, #104]	; (8004d44 <RCCEx_PLLSAI2_Config+0x150>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ce0:	4b18      	ldr	r3, [pc, #96]	; (8004d44 <RCCEx_PLLSAI2_Config+0x150>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a17      	ldr	r2, [pc, #92]	; (8004d44 <RCCEx_PLLSAI2_Config+0x150>)
 8004ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cec:	f7fc ff6a 	bl	8001bc4 <HAL_GetTick>
 8004cf0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cf2:	e00f      	b.n	8004d14 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cf4:	f7fc ff66 	bl	8001bc4 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d908      	bls.n	8004d14 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d02:	4b10      	ldr	r3, [pc, #64]	; (8004d44 <RCCEx_PLLSAI2_Config+0x150>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d109      	bne.n	8004d22 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004d12:	e006      	b.n	8004d22 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d14:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <RCCEx_PLLSAI2_Config+0x150>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0e9      	beq.n	8004cf4 <RCCEx_PLLSAI2_Config+0x100>
 8004d20:	e000      	b.n	8004d24 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8004d22:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d106      	bne.n	8004d38 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8004d2a:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <RCCEx_PLLSAI2_Config+0x150>)
 8004d2c:	695a      	ldr	r2, [r3, #20]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	4904      	ldr	r1, [pc, #16]	; (8004d44 <RCCEx_PLLSAI2_Config+0x150>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	40021000 	.word	0x40021000
 8004d48:	07ff800c 	.word	0x07ff800c

08004d4c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d05c      	beq.n	8004e18 <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7fc fcb2 	bl	80016dc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d80:	4b28      	ldr	r3, [pc, #160]	; (8004e24 <HAL_RTC_Init+0xd8>)
 8004d82:	22ca      	movs	r2, #202	; 0xca
 8004d84:	625a      	str	r2, [r3, #36]	; 0x24
 8004d86:	4b27      	ldr	r3, [pc, #156]	; (8004e24 <HAL_RTC_Init+0xd8>)
 8004d88:	2253      	movs	r2, #83	; 0x53
 8004d8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f871 	bl	8004e74 <RTC_EnterInitMode>
 8004d92:	4603      	mov	r3, r0
 8004d94:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d133      	bne.n	8004e04 <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004d9c:	4b21      	ldr	r3, [pc, #132]	; (8004e24 <HAL_RTC_Init+0xd8>)
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	4a20      	ldr	r2, [pc, #128]	; (8004e24 <HAL_RTC_Init+0xd8>)
 8004da2:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004daa:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004dac:	4b1d      	ldr	r3, [pc, #116]	; (8004e24 <HAL_RTC_Init+0xd8>)
 8004dae:	699a      	ldr	r2, [r3, #24]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6859      	ldr	r1, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	4319      	orrs	r1, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	430b      	orrs	r3, r1
 8004dc0:	4918      	ldr	r1, [pc, #96]	; (8004e24 <HAL_RTC_Init+0xd8>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	041b      	lsls	r3, r3, #16
 8004dd0:	4914      	ldr	r1, [pc, #80]	; (8004e24 <HAL_RTC_Init+0xd8>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f880 	bl	8004edc <RTC_ExitInitMode>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10e      	bne.n	8004e04 <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 8004de6:	4b0f      	ldr	r3, [pc, #60]	; (8004e24 <HAL_RTC_Init+0xd8>)
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a19      	ldr	r1, [r3, #32]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	4319      	orrs	r1, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	430b      	orrs	r3, r1
 8004dfe:	4909      	ldr	r1, [pc, #36]	; (8004e24 <HAL_RTC_Init+0xd8>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e04:	4b07      	ldr	r3, [pc, #28]	; (8004e24 <HAL_RTC_Init+0xd8>)
 8004e06:	22ff      	movs	r2, #255	; 0xff
 8004e08:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d103      	bne.n	8004e18 <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40002800 	.word	0x40002800

08004e28 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004e30:	4b0f      	ldr	r3, [pc, #60]	; (8004e70 <HAL_RTC_WaitForSynchro+0x48>)
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	4a0e      	ldr	r2, [pc, #56]	; (8004e70 <HAL_RTC_WaitForSynchro+0x48>)
 8004e36:	f023 0320 	bic.w	r3, r3, #32
 8004e3a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004e3c:	f7fc fec2 	bl	8001bc4 <HAL_GetTick>
 8004e40:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004e42:	e009      	b.n	8004e58 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e44:	f7fc febe 	bl	8001bc4 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e52:	d901      	bls.n	8004e58 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e006      	b.n	8004e66 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004e58:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <HAL_RTC_WaitForSynchro+0x48>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f003 0320 	and.w	r3, r3, #32
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0ef      	beq.n	8004e44 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40002800 	.word	0x40002800

08004e74 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004e80:	4b15      	ldr	r3, [pc, #84]	; (8004ed8 <RTC_EnterInitMode+0x64>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d120      	bne.n	8004ece <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004e8c:	4b12      	ldr	r3, [pc, #72]	; (8004ed8 <RTC_EnterInitMode+0x64>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	4a11      	ldr	r2, [pc, #68]	; (8004ed8 <RTC_EnterInitMode+0x64>)
 8004e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e96:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004e98:	f7fc fe94 	bl	8001bc4 <HAL_GetTick>
 8004e9c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004e9e:	e00d      	b.n	8004ebc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004ea0:	f7fc fe90 	bl	8001bc4 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004eae:	d905      	bls.n	8004ebc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2203      	movs	r2, #3
 8004eb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004ebc:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <RTC_EnterInitMode+0x64>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d102      	bne.n	8004ece <RTC_EnterInitMode+0x5a>
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
 8004eca:	2b03      	cmp	r3, #3
 8004ecc:	d1e8      	bne.n	8004ea0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	40002800 	.word	0x40002800

08004edc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004ee8:	4b1a      	ldr	r3, [pc, #104]	; (8004f54 <RTC_ExitInitMode+0x78>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4a19      	ldr	r2, [pc, #100]	; (8004f54 <RTC_ExitInitMode+0x78>)
 8004eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ef2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004ef4:	4b17      	ldr	r3, [pc, #92]	; (8004f54 <RTC_ExitInitMode+0x78>)
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	f003 0320 	and.w	r3, r3, #32
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10c      	bne.n	8004f1a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff ff91 	bl	8004e28 <HAL_RTC_WaitForSynchro>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d01e      	beq.n	8004f4a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2203      	movs	r2, #3
 8004f10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	73fb      	strb	r3, [r7, #15]
 8004f18:	e017      	b.n	8004f4a <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f1a:	4b0e      	ldr	r3, [pc, #56]	; (8004f54 <RTC_ExitInitMode+0x78>)
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	4a0d      	ldr	r2, [pc, #52]	; (8004f54 <RTC_ExitInitMode+0x78>)
 8004f20:	f023 0320 	bic.w	r3, r3, #32
 8004f24:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7ff ff7e 	bl	8004e28 <HAL_RTC_WaitForSynchro>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d005      	beq.n	8004f3e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2203      	movs	r2, #3
 8004f36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f3e:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <RTC_ExitInitMode+0x78>)
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	4a04      	ldr	r2, [pc, #16]	; (8004f54 <RTC_ExitInitMode+0x78>)
 8004f44:	f043 0320 	orr.w	r3, r3, #32
 8004f48:	6193      	str	r3, [r2, #24]
  }

  return status;
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	40002800 	.word	0x40002800

08004f58 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	490f      	ldr	r1, [pc, #60]	; (8004fa8 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	490c      	ldr	r1, [pc, #48]	; (8004fac <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8004f7e:	4b0b      	ldr	r3, [pc, #44]	; (8004fac <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	6919      	ldr	r1, [r3, #16]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	041b      	lsls	r3, r3, #16
 8004f90:	430b      	orrs	r3, r1
 8004f92:	4906      	ldr	r1, [pc, #24]	; (8004fac <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40002800 	.word	0x40002800
 8004fac:	40003400 	.word	0x40003400

08004fb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e049      	b.n	8005056 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d106      	bne.n	8004fdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7fc fbbe 	bl	8001758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3304      	adds	r3, #4
 8004fec:	4619      	mov	r1, r3
 8004fee:	4610      	mov	r0, r2
 8004ff0:	f000 fb72 	bl	80056d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b082      	sub	sp, #8
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e049      	b.n	8005104 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d106      	bne.n	800508a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f841 	bl	800510c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2202      	movs	r2, #2
 800508e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	3304      	adds	r3, #4
 800509a:	4619      	mov	r1, r3
 800509c:	4610      	mov	r0, r2
 800509e:	f000 fb1b 	bl	80056d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d109      	bne.n	8005144 <HAL_TIM_PWM_Start+0x24>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b01      	cmp	r3, #1
 800513a:	bf14      	ite	ne
 800513c:	2301      	movne	r3, #1
 800513e:	2300      	moveq	r3, #0
 8005140:	b2db      	uxtb	r3, r3
 8005142:	e03c      	b.n	80051be <HAL_TIM_PWM_Start+0x9e>
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2b04      	cmp	r3, #4
 8005148:	d109      	bne.n	800515e <HAL_TIM_PWM_Start+0x3e>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b01      	cmp	r3, #1
 8005154:	bf14      	ite	ne
 8005156:	2301      	movne	r3, #1
 8005158:	2300      	moveq	r3, #0
 800515a:	b2db      	uxtb	r3, r3
 800515c:	e02f      	b.n	80051be <HAL_TIM_PWM_Start+0x9e>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b08      	cmp	r3, #8
 8005162:	d109      	bne.n	8005178 <HAL_TIM_PWM_Start+0x58>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b01      	cmp	r3, #1
 800516e:	bf14      	ite	ne
 8005170:	2301      	movne	r3, #1
 8005172:	2300      	moveq	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	e022      	b.n	80051be <HAL_TIM_PWM_Start+0x9e>
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	2b0c      	cmp	r3, #12
 800517c:	d109      	bne.n	8005192 <HAL_TIM_PWM_Start+0x72>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b01      	cmp	r3, #1
 8005188:	bf14      	ite	ne
 800518a:	2301      	movne	r3, #1
 800518c:	2300      	moveq	r3, #0
 800518e:	b2db      	uxtb	r3, r3
 8005190:	e015      	b.n	80051be <HAL_TIM_PWM_Start+0x9e>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b10      	cmp	r3, #16
 8005196:	d109      	bne.n	80051ac <HAL_TIM_PWM_Start+0x8c>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	bf14      	ite	ne
 80051a4:	2301      	movne	r3, #1
 80051a6:	2300      	moveq	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	e008      	b.n	80051be <HAL_TIM_PWM_Start+0x9e>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	bf14      	ite	ne
 80051b8:	2301      	movne	r3, #1
 80051ba:	2300      	moveq	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e09c      	b.n	8005300 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d104      	bne.n	80051d6 <HAL_TIM_PWM_Start+0xb6>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051d4:	e023      	b.n	800521e <HAL_TIM_PWM_Start+0xfe>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b04      	cmp	r3, #4
 80051da:	d104      	bne.n	80051e6 <HAL_TIM_PWM_Start+0xc6>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051e4:	e01b      	b.n	800521e <HAL_TIM_PWM_Start+0xfe>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d104      	bne.n	80051f6 <HAL_TIM_PWM_Start+0xd6>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051f4:	e013      	b.n	800521e <HAL_TIM_PWM_Start+0xfe>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b0c      	cmp	r3, #12
 80051fa:	d104      	bne.n	8005206 <HAL_TIM_PWM_Start+0xe6>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005204:	e00b      	b.n	800521e <HAL_TIM_PWM_Start+0xfe>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b10      	cmp	r3, #16
 800520a:	d104      	bne.n	8005216 <HAL_TIM_PWM_Start+0xf6>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005214:	e003      	b.n	800521e <HAL_TIM_PWM_Start+0xfe>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2202      	movs	r2, #2
 800521a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2201      	movs	r2, #1
 8005224:	6839      	ldr	r1, [r7, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fe62 	bl	8005ef0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a35      	ldr	r2, [pc, #212]	; (8005308 <HAL_TIM_PWM_Start+0x1e8>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d013      	beq.n	800525e <HAL_TIM_PWM_Start+0x13e>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a34      	ldr	r2, [pc, #208]	; (800530c <HAL_TIM_PWM_Start+0x1ec>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00e      	beq.n	800525e <HAL_TIM_PWM_Start+0x13e>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a32      	ldr	r2, [pc, #200]	; (8005310 <HAL_TIM_PWM_Start+0x1f0>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d009      	beq.n	800525e <HAL_TIM_PWM_Start+0x13e>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a31      	ldr	r2, [pc, #196]	; (8005314 <HAL_TIM_PWM_Start+0x1f4>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d004      	beq.n	800525e <HAL_TIM_PWM_Start+0x13e>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a2f      	ldr	r2, [pc, #188]	; (8005318 <HAL_TIM_PWM_Start+0x1f8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d101      	bne.n	8005262 <HAL_TIM_PWM_Start+0x142>
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <HAL_TIM_PWM_Start+0x144>
 8005262:	2300      	movs	r3, #0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d007      	beq.n	8005278 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005276:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a22      	ldr	r2, [pc, #136]	; (8005308 <HAL_TIM_PWM_Start+0x1e8>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d01d      	beq.n	80052be <HAL_TIM_PWM_Start+0x19e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528a:	d018      	beq.n	80052be <HAL_TIM_PWM_Start+0x19e>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a22      	ldr	r2, [pc, #136]	; (800531c <HAL_TIM_PWM_Start+0x1fc>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d013      	beq.n	80052be <HAL_TIM_PWM_Start+0x19e>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a21      	ldr	r2, [pc, #132]	; (8005320 <HAL_TIM_PWM_Start+0x200>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00e      	beq.n	80052be <HAL_TIM_PWM_Start+0x19e>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a1f      	ldr	r2, [pc, #124]	; (8005324 <HAL_TIM_PWM_Start+0x204>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d009      	beq.n	80052be <HAL_TIM_PWM_Start+0x19e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a17      	ldr	r2, [pc, #92]	; (800530c <HAL_TIM_PWM_Start+0x1ec>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d004      	beq.n	80052be <HAL_TIM_PWM_Start+0x19e>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a15      	ldr	r2, [pc, #84]	; (8005310 <HAL_TIM_PWM_Start+0x1f0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d115      	bne.n	80052ea <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	4b18      	ldr	r3, [pc, #96]	; (8005328 <HAL_TIM_PWM_Start+0x208>)
 80052c6:	4013      	ands	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b06      	cmp	r3, #6
 80052ce:	d015      	beq.n	80052fc <HAL_TIM_PWM_Start+0x1dc>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d6:	d011      	beq.n	80052fc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0201 	orr.w	r2, r2, #1
 80052e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e8:	e008      	b.n	80052fc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f042 0201 	orr.w	r2, r2, #1
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	e000      	b.n	80052fe <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40012c00 	.word	0x40012c00
 800530c:	40013400 	.word	0x40013400
 8005310:	40014000 	.word	0x40014000
 8005314:	40014400 	.word	0x40014400
 8005318:	40014800 	.word	0x40014800
 800531c:	40000400 	.word	0x40000400
 8005320:	40000800 	.word	0x40000800
 8005324:	40000c00 	.word	0x40000c00
 8005328:	00010007 	.word	0x00010007

0800532c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800533e:	2b01      	cmp	r3, #1
 8005340:	d101      	bne.n	8005346 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005342:	2302      	movs	r3, #2
 8005344:	e0fd      	b.n	8005542 <HAL_TIM_PWM_ConfigChannel+0x216>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b14      	cmp	r3, #20
 8005352:	f200 80f0 	bhi.w	8005536 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005356:	a201      	add	r2, pc, #4	; (adr r2, 800535c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535c:	080053b1 	.word	0x080053b1
 8005360:	08005537 	.word	0x08005537
 8005364:	08005537 	.word	0x08005537
 8005368:	08005537 	.word	0x08005537
 800536c:	080053f1 	.word	0x080053f1
 8005370:	08005537 	.word	0x08005537
 8005374:	08005537 	.word	0x08005537
 8005378:	08005537 	.word	0x08005537
 800537c:	08005433 	.word	0x08005433
 8005380:	08005537 	.word	0x08005537
 8005384:	08005537 	.word	0x08005537
 8005388:	08005537 	.word	0x08005537
 800538c:	08005473 	.word	0x08005473
 8005390:	08005537 	.word	0x08005537
 8005394:	08005537 	.word	0x08005537
 8005398:	08005537 	.word	0x08005537
 800539c:	080054b5 	.word	0x080054b5
 80053a0:	08005537 	.word	0x08005537
 80053a4:	08005537 	.word	0x08005537
 80053a8:	08005537 	.word	0x08005537
 80053ac:	080054f5 	.word	0x080054f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68b9      	ldr	r1, [r7, #8]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 fa28 	bl	800580c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699a      	ldr	r2, [r3, #24]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0208 	orr.w	r2, r2, #8
 80053ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699a      	ldr	r2, [r3, #24]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 0204 	bic.w	r2, r2, #4
 80053da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6999      	ldr	r1, [r3, #24]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	691a      	ldr	r2, [r3, #16]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	619a      	str	r2, [r3, #24]
      break;
 80053ee:	e0a3      	b.n	8005538 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68b9      	ldr	r1, [r7, #8]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 fa98 	bl	800592c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699a      	ldr	r2, [r3, #24]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800540a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699a      	ldr	r2, [r3, #24]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800541a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6999      	ldr	r1, [r3, #24]
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	021a      	lsls	r2, r3, #8
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	619a      	str	r2, [r3, #24]
      break;
 8005430:	e082      	b.n	8005538 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68b9      	ldr	r1, [r7, #8]
 8005438:	4618      	mov	r0, r3
 800543a:	f000 fb01 	bl	8005a40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69da      	ldr	r2, [r3, #28]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f042 0208 	orr.w	r2, r2, #8
 800544c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69da      	ldr	r2, [r3, #28]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 0204 	bic.w	r2, r2, #4
 800545c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69d9      	ldr	r1, [r3, #28]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	61da      	str	r2, [r3, #28]
      break;
 8005470:	e062      	b.n	8005538 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68b9      	ldr	r1, [r7, #8]
 8005478:	4618      	mov	r0, r3
 800547a:	f000 fb69 	bl	8005b50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	69da      	ldr	r2, [r3, #28]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800548c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	69da      	ldr	r2, [r3, #28]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800549c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69d9      	ldr	r1, [r3, #28]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	021a      	lsls	r2, r3, #8
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	61da      	str	r2, [r3, #28]
      break;
 80054b2:	e041      	b.n	8005538 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68b9      	ldr	r1, [r7, #8]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fbb2 	bl	8005c24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f042 0208 	orr.w	r2, r2, #8
 80054ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 0204 	bic.w	r2, r2, #4
 80054de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	691a      	ldr	r2, [r3, #16]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054f2:	e021      	b.n	8005538 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68b9      	ldr	r1, [r7, #8]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 fbf6 	bl	8005cec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800550e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800551e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	021a      	lsls	r2, r3, #8
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	430a      	orrs	r2, r1
 8005532:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005534:	e000      	b.n	8005538 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005536:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop

0800554c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800555c:	2b01      	cmp	r3, #1
 800555e:	d101      	bne.n	8005564 <HAL_TIM_ConfigClockSource+0x18>
 8005560:	2302      	movs	r3, #2
 8005562:	e0b5      	b.n	80056d0 <HAL_TIM_ConfigClockSource+0x184>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005582:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005586:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800558e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055a0:	d03e      	beq.n	8005620 <HAL_TIM_ConfigClockSource+0xd4>
 80055a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055a6:	f200 8087 	bhi.w	80056b8 <HAL_TIM_ConfigClockSource+0x16c>
 80055aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ae:	f000 8085 	beq.w	80056bc <HAL_TIM_ConfigClockSource+0x170>
 80055b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b6:	d87f      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x16c>
 80055b8:	2b70      	cmp	r3, #112	; 0x70
 80055ba:	d01a      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0xa6>
 80055bc:	2b70      	cmp	r3, #112	; 0x70
 80055be:	d87b      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x16c>
 80055c0:	2b60      	cmp	r3, #96	; 0x60
 80055c2:	d050      	beq.n	8005666 <HAL_TIM_ConfigClockSource+0x11a>
 80055c4:	2b60      	cmp	r3, #96	; 0x60
 80055c6:	d877      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x16c>
 80055c8:	2b50      	cmp	r3, #80	; 0x50
 80055ca:	d03c      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0xfa>
 80055cc:	2b50      	cmp	r3, #80	; 0x50
 80055ce:	d873      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x16c>
 80055d0:	2b40      	cmp	r3, #64	; 0x40
 80055d2:	d058      	beq.n	8005686 <HAL_TIM_ConfigClockSource+0x13a>
 80055d4:	2b40      	cmp	r3, #64	; 0x40
 80055d6:	d86f      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x16c>
 80055d8:	2b30      	cmp	r3, #48	; 0x30
 80055da:	d064      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0x15a>
 80055dc:	2b30      	cmp	r3, #48	; 0x30
 80055de:	d86b      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x16c>
 80055e0:	2b20      	cmp	r3, #32
 80055e2:	d060      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0x15a>
 80055e4:	2b20      	cmp	r3, #32
 80055e6:	d867      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x16c>
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d05c      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0x15a>
 80055ec:	2b10      	cmp	r3, #16
 80055ee:	d05a      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80055f0:	e062      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6818      	ldr	r0, [r3, #0]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	6899      	ldr	r1, [r3, #8]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f000 fc55 	bl	8005eb0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005614:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	609a      	str	r2, [r3, #8]
      break;
 800561e:	e04e      	b.n	80056be <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6818      	ldr	r0, [r3, #0]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	6899      	ldr	r1, [r3, #8]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f000 fc3e 	bl	8005eb0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005642:	609a      	str	r2, [r3, #8]
      break;
 8005644:	e03b      	b.n	80056be <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6818      	ldr	r0, [r3, #0]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	6859      	ldr	r1, [r3, #4]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	461a      	mov	r2, r3
 8005654:	f000 fbb0 	bl	8005db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2150      	movs	r1, #80	; 0x50
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fc09 	bl	8005e76 <TIM_ITRx_SetConfig>
      break;
 8005664:	e02b      	b.n	80056be <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	6859      	ldr	r1, [r3, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	461a      	mov	r2, r3
 8005674:	f000 fbcf 	bl	8005e16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2160      	movs	r1, #96	; 0x60
 800567e:	4618      	mov	r0, r3
 8005680:	f000 fbf9 	bl	8005e76 <TIM_ITRx_SetConfig>
      break;
 8005684:	e01b      	b.n	80056be <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6818      	ldr	r0, [r3, #0]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	6859      	ldr	r1, [r3, #4]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	461a      	mov	r2, r3
 8005694:	f000 fb90 	bl	8005db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2140      	movs	r1, #64	; 0x40
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 fbe9 	bl	8005e76 <TIM_ITRx_SetConfig>
      break;
 80056a4:	e00b      	b.n	80056be <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4619      	mov	r1, r3
 80056b0:	4610      	mov	r0, r2
 80056b2:	f000 fbe0 	bl	8005e76 <TIM_ITRx_SetConfig>
        break;
 80056b6:	e002      	b.n	80056be <HAL_TIM_ConfigClockSource+0x172>
      break;
 80056b8:	bf00      	nop
 80056ba:	e000      	b.n	80056be <HAL_TIM_ConfigClockSource+0x172>
      break;
 80056bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a40      	ldr	r2, [pc, #256]	; (80057ec <TIM_Base_SetConfig+0x114>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d013      	beq.n	8005718 <TIM_Base_SetConfig+0x40>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f6:	d00f      	beq.n	8005718 <TIM_Base_SetConfig+0x40>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a3d      	ldr	r2, [pc, #244]	; (80057f0 <TIM_Base_SetConfig+0x118>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d00b      	beq.n	8005718 <TIM_Base_SetConfig+0x40>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a3c      	ldr	r2, [pc, #240]	; (80057f4 <TIM_Base_SetConfig+0x11c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d007      	beq.n	8005718 <TIM_Base_SetConfig+0x40>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a3b      	ldr	r2, [pc, #236]	; (80057f8 <TIM_Base_SetConfig+0x120>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d003      	beq.n	8005718 <TIM_Base_SetConfig+0x40>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a3a      	ldr	r2, [pc, #232]	; (80057fc <TIM_Base_SetConfig+0x124>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d108      	bne.n	800572a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	4313      	orrs	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a2f      	ldr	r2, [pc, #188]	; (80057ec <TIM_Base_SetConfig+0x114>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d01f      	beq.n	8005772 <TIM_Base_SetConfig+0x9a>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005738:	d01b      	beq.n	8005772 <TIM_Base_SetConfig+0x9a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a2c      	ldr	r2, [pc, #176]	; (80057f0 <TIM_Base_SetConfig+0x118>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d017      	beq.n	8005772 <TIM_Base_SetConfig+0x9a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a2b      	ldr	r2, [pc, #172]	; (80057f4 <TIM_Base_SetConfig+0x11c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d013      	beq.n	8005772 <TIM_Base_SetConfig+0x9a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a2a      	ldr	r2, [pc, #168]	; (80057f8 <TIM_Base_SetConfig+0x120>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00f      	beq.n	8005772 <TIM_Base_SetConfig+0x9a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a29      	ldr	r2, [pc, #164]	; (80057fc <TIM_Base_SetConfig+0x124>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00b      	beq.n	8005772 <TIM_Base_SetConfig+0x9a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a28      	ldr	r2, [pc, #160]	; (8005800 <TIM_Base_SetConfig+0x128>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d007      	beq.n	8005772 <TIM_Base_SetConfig+0x9a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a27      	ldr	r2, [pc, #156]	; (8005804 <TIM_Base_SetConfig+0x12c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d003      	beq.n	8005772 <TIM_Base_SetConfig+0x9a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a26      	ldr	r2, [pc, #152]	; (8005808 <TIM_Base_SetConfig+0x130>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d108      	bne.n	8005784 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a10      	ldr	r2, [pc, #64]	; (80057ec <TIM_Base_SetConfig+0x114>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00f      	beq.n	80057d0 <TIM_Base_SetConfig+0xf8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a12      	ldr	r2, [pc, #72]	; (80057fc <TIM_Base_SetConfig+0x124>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00b      	beq.n	80057d0 <TIM_Base_SetConfig+0xf8>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a11      	ldr	r2, [pc, #68]	; (8005800 <TIM_Base_SetConfig+0x128>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d007      	beq.n	80057d0 <TIM_Base_SetConfig+0xf8>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a10      	ldr	r2, [pc, #64]	; (8005804 <TIM_Base_SetConfig+0x12c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d003      	beq.n	80057d0 <TIM_Base_SetConfig+0xf8>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a0f      	ldr	r2, [pc, #60]	; (8005808 <TIM_Base_SetConfig+0x130>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d103      	bne.n	80057d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	615a      	str	r2, [r3, #20]
}
 80057de:	bf00      	nop
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	40012c00 	.word	0x40012c00
 80057f0:	40000400 	.word	0x40000400
 80057f4:	40000800 	.word	0x40000800
 80057f8:	40000c00 	.word	0x40000c00
 80057fc:	40013400 	.word	0x40013400
 8005800:	40014000 	.word	0x40014000
 8005804:	40014400 	.word	0x40014400
 8005808:	40014800 	.word	0x40014800

0800580c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	f023 0201 	bic.w	r2, r3, #1
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800583a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 0303 	bic.w	r3, r3, #3
 8005846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f023 0302 	bic.w	r3, r3, #2
 8005858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	4313      	orrs	r3, r2
 8005862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a2c      	ldr	r2, [pc, #176]	; (8005918 <TIM_OC1_SetConfig+0x10c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00f      	beq.n	800588c <TIM_OC1_SetConfig+0x80>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a2b      	ldr	r2, [pc, #172]	; (800591c <TIM_OC1_SetConfig+0x110>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d00b      	beq.n	800588c <TIM_OC1_SetConfig+0x80>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a2a      	ldr	r2, [pc, #168]	; (8005920 <TIM_OC1_SetConfig+0x114>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d007      	beq.n	800588c <TIM_OC1_SetConfig+0x80>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a29      	ldr	r2, [pc, #164]	; (8005924 <TIM_OC1_SetConfig+0x118>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d003      	beq.n	800588c <TIM_OC1_SetConfig+0x80>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a28      	ldr	r2, [pc, #160]	; (8005928 <TIM_OC1_SetConfig+0x11c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d10c      	bne.n	80058a6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f023 0308 	bic.w	r3, r3, #8
 8005892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	4313      	orrs	r3, r2
 800589c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f023 0304 	bic.w	r3, r3, #4
 80058a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a1b      	ldr	r2, [pc, #108]	; (8005918 <TIM_OC1_SetConfig+0x10c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00f      	beq.n	80058ce <TIM_OC1_SetConfig+0xc2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a1a      	ldr	r2, [pc, #104]	; (800591c <TIM_OC1_SetConfig+0x110>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00b      	beq.n	80058ce <TIM_OC1_SetConfig+0xc2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a19      	ldr	r2, [pc, #100]	; (8005920 <TIM_OC1_SetConfig+0x114>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d007      	beq.n	80058ce <TIM_OC1_SetConfig+0xc2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a18      	ldr	r2, [pc, #96]	; (8005924 <TIM_OC1_SetConfig+0x118>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d003      	beq.n	80058ce <TIM_OC1_SetConfig+0xc2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a17      	ldr	r2, [pc, #92]	; (8005928 <TIM_OC1_SetConfig+0x11c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d111      	bne.n	80058f2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	621a      	str	r2, [r3, #32]
}
 800590c:	bf00      	nop
 800590e:	371c      	adds	r7, #28
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	40012c00 	.word	0x40012c00
 800591c:	40013400 	.word	0x40013400
 8005920:	40014000 	.word	0x40014000
 8005924:	40014400 	.word	0x40014400
 8005928:	40014800 	.word	0x40014800

0800592c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	f023 0210 	bic.w	r2, r3, #16
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800595a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800595e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	021b      	lsls	r3, r3, #8
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4313      	orrs	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f023 0320 	bic.w	r3, r3, #32
 800597a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	011b      	lsls	r3, r3, #4
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	4313      	orrs	r3, r2
 8005986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a28      	ldr	r2, [pc, #160]	; (8005a2c <TIM_OC2_SetConfig+0x100>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d003      	beq.n	8005998 <TIM_OC2_SetConfig+0x6c>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a27      	ldr	r2, [pc, #156]	; (8005a30 <TIM_OC2_SetConfig+0x104>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d10d      	bne.n	80059b4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800599e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	011b      	lsls	r3, r3, #4
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a1d      	ldr	r2, [pc, #116]	; (8005a2c <TIM_OC2_SetConfig+0x100>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d00f      	beq.n	80059dc <TIM_OC2_SetConfig+0xb0>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a1c      	ldr	r2, [pc, #112]	; (8005a30 <TIM_OC2_SetConfig+0x104>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d00b      	beq.n	80059dc <TIM_OC2_SetConfig+0xb0>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a1b      	ldr	r2, [pc, #108]	; (8005a34 <TIM_OC2_SetConfig+0x108>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d007      	beq.n	80059dc <TIM_OC2_SetConfig+0xb0>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a1a      	ldr	r2, [pc, #104]	; (8005a38 <TIM_OC2_SetConfig+0x10c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d003      	beq.n	80059dc <TIM_OC2_SetConfig+0xb0>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a19      	ldr	r2, [pc, #100]	; (8005a3c <TIM_OC2_SetConfig+0x110>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d113      	bne.n	8005a04 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	621a      	str	r2, [r3, #32]
}
 8005a1e:	bf00      	nop
 8005a20:	371c      	adds	r7, #28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	40012c00 	.word	0x40012c00
 8005a30:	40013400 	.word	0x40013400
 8005a34:	40014000 	.word	0x40014000
 8005a38:	40014400 	.word	0x40014400
 8005a3c:	40014800 	.word	0x40014800

08005a40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 0303 	bic.w	r3, r3, #3
 8005a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	021b      	lsls	r3, r3, #8
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a27      	ldr	r2, [pc, #156]	; (8005b3c <TIM_OC3_SetConfig+0xfc>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d003      	beq.n	8005aaa <TIM_OC3_SetConfig+0x6a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a26      	ldr	r2, [pc, #152]	; (8005b40 <TIM_OC3_SetConfig+0x100>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d10d      	bne.n	8005ac6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ab0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	021b      	lsls	r3, r3, #8
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a1c      	ldr	r2, [pc, #112]	; (8005b3c <TIM_OC3_SetConfig+0xfc>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d00f      	beq.n	8005aee <TIM_OC3_SetConfig+0xae>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a1b      	ldr	r2, [pc, #108]	; (8005b40 <TIM_OC3_SetConfig+0x100>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d00b      	beq.n	8005aee <TIM_OC3_SetConfig+0xae>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a1a      	ldr	r2, [pc, #104]	; (8005b44 <TIM_OC3_SetConfig+0x104>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d007      	beq.n	8005aee <TIM_OC3_SetConfig+0xae>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a19      	ldr	r2, [pc, #100]	; (8005b48 <TIM_OC3_SetConfig+0x108>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d003      	beq.n	8005aee <TIM_OC3_SetConfig+0xae>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a18      	ldr	r2, [pc, #96]	; (8005b4c <TIM_OC3_SetConfig+0x10c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d113      	bne.n	8005b16 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	011b      	lsls	r3, r3, #4
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	621a      	str	r2, [r3, #32]
}
 8005b30:	bf00      	nop
 8005b32:	371c      	adds	r7, #28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	40012c00 	.word	0x40012c00
 8005b40:	40013400 	.word	0x40013400
 8005b44:	40014000 	.word	0x40014000
 8005b48:	40014400 	.word	0x40014400
 8005b4c:	40014800 	.word	0x40014800

08005b50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	021b      	lsls	r3, r3, #8
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	031b      	lsls	r3, r3, #12
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a18      	ldr	r2, [pc, #96]	; (8005c10 <TIM_OC4_SetConfig+0xc0>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d00f      	beq.n	8005bd4 <TIM_OC4_SetConfig+0x84>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a17      	ldr	r2, [pc, #92]	; (8005c14 <TIM_OC4_SetConfig+0xc4>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00b      	beq.n	8005bd4 <TIM_OC4_SetConfig+0x84>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a16      	ldr	r2, [pc, #88]	; (8005c18 <TIM_OC4_SetConfig+0xc8>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d007      	beq.n	8005bd4 <TIM_OC4_SetConfig+0x84>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a15      	ldr	r2, [pc, #84]	; (8005c1c <TIM_OC4_SetConfig+0xcc>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d003      	beq.n	8005bd4 <TIM_OC4_SetConfig+0x84>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a14      	ldr	r2, [pc, #80]	; (8005c20 <TIM_OC4_SetConfig+0xd0>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d109      	bne.n	8005be8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	019b      	lsls	r3, r3, #6
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	621a      	str	r2, [r3, #32]
}
 8005c02:	bf00      	nop
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	40012c00 	.word	0x40012c00
 8005c14:	40013400 	.word	0x40013400
 8005c18:	40014000 	.word	0x40014000
 8005c1c:	40014400 	.word	0x40014400
 8005c20:	40014800 	.word	0x40014800

08005c24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	041b      	lsls	r3, r3, #16
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a17      	ldr	r2, [pc, #92]	; (8005cd8 <TIM_OC5_SetConfig+0xb4>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d00f      	beq.n	8005c9e <TIM_OC5_SetConfig+0x7a>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a16      	ldr	r2, [pc, #88]	; (8005cdc <TIM_OC5_SetConfig+0xb8>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00b      	beq.n	8005c9e <TIM_OC5_SetConfig+0x7a>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a15      	ldr	r2, [pc, #84]	; (8005ce0 <TIM_OC5_SetConfig+0xbc>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d007      	beq.n	8005c9e <TIM_OC5_SetConfig+0x7a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a14      	ldr	r2, [pc, #80]	; (8005ce4 <TIM_OC5_SetConfig+0xc0>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d003      	beq.n	8005c9e <TIM_OC5_SetConfig+0x7a>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a13      	ldr	r2, [pc, #76]	; (8005ce8 <TIM_OC5_SetConfig+0xc4>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d109      	bne.n	8005cb2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ca4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	021b      	lsls	r3, r3, #8
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	621a      	str	r2, [r3, #32]
}
 8005ccc:	bf00      	nop
 8005cce:	371c      	adds	r7, #28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	40012c00 	.word	0x40012c00
 8005cdc:	40013400 	.word	0x40013400
 8005ce0:	40014000 	.word	0x40014000
 8005ce4:	40014400 	.word	0x40014400
 8005ce8:	40014800 	.word	0x40014800

08005cec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	021b      	lsls	r3, r3, #8
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	051b      	lsls	r3, r3, #20
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a18      	ldr	r2, [pc, #96]	; (8005da4 <TIM_OC6_SetConfig+0xb8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d00f      	beq.n	8005d68 <TIM_OC6_SetConfig+0x7c>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a17      	ldr	r2, [pc, #92]	; (8005da8 <TIM_OC6_SetConfig+0xbc>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d00b      	beq.n	8005d68 <TIM_OC6_SetConfig+0x7c>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a16      	ldr	r2, [pc, #88]	; (8005dac <TIM_OC6_SetConfig+0xc0>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d007      	beq.n	8005d68 <TIM_OC6_SetConfig+0x7c>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a15      	ldr	r2, [pc, #84]	; (8005db0 <TIM_OC6_SetConfig+0xc4>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d003      	beq.n	8005d68 <TIM_OC6_SetConfig+0x7c>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a14      	ldr	r2, [pc, #80]	; (8005db4 <TIM_OC6_SetConfig+0xc8>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d109      	bne.n	8005d7c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	029b      	lsls	r3, r3, #10
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	621a      	str	r2, [r3, #32]
}
 8005d96:	bf00      	nop
 8005d98:	371c      	adds	r7, #28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	40012c00 	.word	0x40012c00
 8005da8:	40013400 	.word	0x40013400
 8005dac:	40014000 	.word	0x40014000
 8005db0:	40014400 	.word	0x40014400
 8005db4:	40014800 	.word	0x40014800

08005db8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	f023 0201 	bic.w	r2, r3, #1
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	011b      	lsls	r3, r3, #4
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f023 030a 	bic.w	r3, r3, #10
 8005df4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	621a      	str	r2, [r3, #32]
}
 8005e0a:	bf00      	nop
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b087      	sub	sp, #28
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	60f8      	str	r0, [r7, #12]
 8005e1e:	60b9      	str	r1, [r7, #8]
 8005e20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	f023 0210 	bic.w	r2, r3, #16
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	031b      	lsls	r3, r3, #12
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	011b      	lsls	r3, r3, #4
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	621a      	str	r2, [r3, #32]
}
 8005e6a:	bf00      	nop
 8005e6c:	371c      	adds	r7, #28
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b085      	sub	sp, #20
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	f043 0307 	orr.w	r3, r3, #7
 8005e9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	609a      	str	r2, [r3, #8]
}
 8005ea4:	bf00      	nop
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
 8005ebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	021a      	lsls	r2, r3, #8
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	609a      	str	r2, [r3, #8]
}
 8005ee4:	bf00      	nop
 8005ee6:	371c      	adds	r7, #28
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	f003 031f 	and.w	r3, r3, #31
 8005f02:	2201      	movs	r2, #1
 8005f04:	fa02 f303 	lsl.w	r3, r2, r3
 8005f08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a1a      	ldr	r2, [r3, #32]
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	43db      	mvns	r3, r3
 8005f12:	401a      	ands	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6a1a      	ldr	r2, [r3, #32]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f003 031f 	and.w	r3, r3, #31
 8005f22:	6879      	ldr	r1, [r7, #4]
 8005f24:	fa01 f303 	lsl.w	r3, r1, r3
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	621a      	str	r2, [r3, #32]
}
 8005f2e:	bf00      	nop
 8005f30:	371c      	adds	r7, #28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
	...

08005f3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e068      	b.n	8006026 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a2e      	ldr	r2, [pc, #184]	; (8006034 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d004      	beq.n	8005f88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a2d      	ldr	r2, [pc, #180]	; (8006038 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d108      	bne.n	8005f9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a1e      	ldr	r2, [pc, #120]	; (8006034 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d01d      	beq.n	8005ffa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc6:	d018      	beq.n	8005ffa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a1b      	ldr	r2, [pc, #108]	; (800603c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d013      	beq.n	8005ffa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a1a      	ldr	r2, [pc, #104]	; (8006040 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00e      	beq.n	8005ffa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a18      	ldr	r2, [pc, #96]	; (8006044 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d009      	beq.n	8005ffa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a13      	ldr	r2, [pc, #76]	; (8006038 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d004      	beq.n	8005ffa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a14      	ldr	r2, [pc, #80]	; (8006048 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d10c      	bne.n	8006014 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006000:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	4313      	orrs	r3, r2
 800600a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40012c00 	.word	0x40012c00
 8006038:	40013400 	.word	0x40013400
 800603c:	40000400 	.word	0x40000400
 8006040:	40000800 	.word	0x40000800
 8006044:	40000c00 	.word	0x40000c00
 8006048:	40014000 	.word	0x40014000

0800604c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006060:	2b01      	cmp	r3, #1
 8006062:	d101      	bne.n	8006068 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006064:	2302      	movs	r3, #2
 8006066:	e087      	b.n	8006178 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	4313      	orrs	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	4313      	orrs	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	4313      	orrs	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	041b      	lsls	r3, r3, #16
 80060de:	4313      	orrs	r3, r2
 80060e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a27      	ldr	r2, [pc, #156]	; (8006184 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d004      	beq.n	80060f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a25      	ldr	r2, [pc, #148]	; (8006188 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d106      	bne.n	8006104 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a1e      	ldr	r2, [pc, #120]	; (8006184 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d004      	beq.n	8006118 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a1d      	ldr	r2, [pc, #116]	; (8006188 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d126      	bne.n	8006166 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006122:	051b      	lsls	r3, r3, #20
 8006124:	4313      	orrs	r3, r2
 8006126:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	4313      	orrs	r3, r2
 8006142:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a0e      	ldr	r2, [pc, #56]	; (8006184 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d004      	beq.n	8006158 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a0d      	ldr	r2, [pc, #52]	; (8006188 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d106      	bne.n	8006166 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006162:	4313      	orrs	r3, r2
 8006164:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	40012c00 	.word	0x40012c00
 8006188:	40013400 	.word	0x40013400

0800618c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e042      	b.n	8006224 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d106      	bne.n	80061b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7fb fa33 	bl	800161c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2224      	movs	r2, #36	; 0x24
 80061ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0201 	bic.w	r2, r2, #1
 80061cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f82c 	bl	800622c <UART_SetConfig>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e022      	b.n	8006224 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fb20 	bl	800682c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689a      	ldr	r2, [r3, #8]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800620a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f042 0201 	orr.w	r2, r2, #1
 800621a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fba7 	bl	8006970 <UART_CheckIdleState>
 8006222:	4603      	mov	r3, r0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800622c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006230:	b08c      	sub	sp, #48	; 0x30
 8006232:	af00      	add	r7, sp, #0
 8006234:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006236:	2300      	movs	r3, #0
 8006238:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	431a      	orrs	r2, r3
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	431a      	orrs	r2, r3
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	69db      	ldr	r3, [r3, #28]
 8006250:	4313      	orrs	r3, r2
 8006252:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	4baa      	ldr	r3, [pc, #680]	; (8006504 <UART_SetConfig+0x2d8>)
 800625c:	4013      	ands	r3, r2
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	6812      	ldr	r2, [r2, #0]
 8006262:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006264:	430b      	orrs	r3, r1
 8006266:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a9f      	ldr	r2, [pc, #636]	; (8006508 <UART_SetConfig+0x2dc>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d004      	beq.n	8006298 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006294:	4313      	orrs	r3, r2
 8006296:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80062a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	6812      	ldr	r2, [r2, #0]
 80062aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062ac:	430b      	orrs	r3, r1
 80062ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b6:	f023 010f 	bic.w	r1, r3, #15
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a90      	ldr	r2, [pc, #576]	; (800650c <UART_SetConfig+0x2e0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d125      	bne.n	800631c <UART_SetConfig+0xf0>
 80062d0:	4b8f      	ldr	r3, [pc, #572]	; (8006510 <UART_SetConfig+0x2e4>)
 80062d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d6:	f003 0303 	and.w	r3, r3, #3
 80062da:	2b03      	cmp	r3, #3
 80062dc:	d81a      	bhi.n	8006314 <UART_SetConfig+0xe8>
 80062de:	a201      	add	r2, pc, #4	; (adr r2, 80062e4 <UART_SetConfig+0xb8>)
 80062e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e4:	080062f5 	.word	0x080062f5
 80062e8:	08006305 	.word	0x08006305
 80062ec:	080062fd 	.word	0x080062fd
 80062f0:	0800630d 	.word	0x0800630d
 80062f4:	2301      	movs	r3, #1
 80062f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062fa:	e116      	b.n	800652a <UART_SetConfig+0x2fe>
 80062fc:	2302      	movs	r3, #2
 80062fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006302:	e112      	b.n	800652a <UART_SetConfig+0x2fe>
 8006304:	2304      	movs	r3, #4
 8006306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800630a:	e10e      	b.n	800652a <UART_SetConfig+0x2fe>
 800630c:	2308      	movs	r3, #8
 800630e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006312:	e10a      	b.n	800652a <UART_SetConfig+0x2fe>
 8006314:	2310      	movs	r3, #16
 8006316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800631a:	e106      	b.n	800652a <UART_SetConfig+0x2fe>
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a7c      	ldr	r2, [pc, #496]	; (8006514 <UART_SetConfig+0x2e8>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d138      	bne.n	8006398 <UART_SetConfig+0x16c>
 8006326:	4b7a      	ldr	r3, [pc, #488]	; (8006510 <UART_SetConfig+0x2e4>)
 8006328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632c:	f003 030c 	and.w	r3, r3, #12
 8006330:	2b0c      	cmp	r3, #12
 8006332:	d82d      	bhi.n	8006390 <UART_SetConfig+0x164>
 8006334:	a201      	add	r2, pc, #4	; (adr r2, 800633c <UART_SetConfig+0x110>)
 8006336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633a:	bf00      	nop
 800633c:	08006371 	.word	0x08006371
 8006340:	08006391 	.word	0x08006391
 8006344:	08006391 	.word	0x08006391
 8006348:	08006391 	.word	0x08006391
 800634c:	08006381 	.word	0x08006381
 8006350:	08006391 	.word	0x08006391
 8006354:	08006391 	.word	0x08006391
 8006358:	08006391 	.word	0x08006391
 800635c:	08006379 	.word	0x08006379
 8006360:	08006391 	.word	0x08006391
 8006364:	08006391 	.word	0x08006391
 8006368:	08006391 	.word	0x08006391
 800636c:	08006389 	.word	0x08006389
 8006370:	2300      	movs	r3, #0
 8006372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006376:	e0d8      	b.n	800652a <UART_SetConfig+0x2fe>
 8006378:	2302      	movs	r3, #2
 800637a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800637e:	e0d4      	b.n	800652a <UART_SetConfig+0x2fe>
 8006380:	2304      	movs	r3, #4
 8006382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006386:	e0d0      	b.n	800652a <UART_SetConfig+0x2fe>
 8006388:	2308      	movs	r3, #8
 800638a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800638e:	e0cc      	b.n	800652a <UART_SetConfig+0x2fe>
 8006390:	2310      	movs	r3, #16
 8006392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006396:	e0c8      	b.n	800652a <UART_SetConfig+0x2fe>
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a5e      	ldr	r2, [pc, #376]	; (8006518 <UART_SetConfig+0x2ec>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d125      	bne.n	80063ee <UART_SetConfig+0x1c2>
 80063a2:	4b5b      	ldr	r3, [pc, #364]	; (8006510 <UART_SetConfig+0x2e4>)
 80063a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063ac:	2b30      	cmp	r3, #48	; 0x30
 80063ae:	d016      	beq.n	80063de <UART_SetConfig+0x1b2>
 80063b0:	2b30      	cmp	r3, #48	; 0x30
 80063b2:	d818      	bhi.n	80063e6 <UART_SetConfig+0x1ba>
 80063b4:	2b20      	cmp	r3, #32
 80063b6:	d00a      	beq.n	80063ce <UART_SetConfig+0x1a2>
 80063b8:	2b20      	cmp	r3, #32
 80063ba:	d814      	bhi.n	80063e6 <UART_SetConfig+0x1ba>
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d002      	beq.n	80063c6 <UART_SetConfig+0x19a>
 80063c0:	2b10      	cmp	r3, #16
 80063c2:	d008      	beq.n	80063d6 <UART_SetConfig+0x1aa>
 80063c4:	e00f      	b.n	80063e6 <UART_SetConfig+0x1ba>
 80063c6:	2300      	movs	r3, #0
 80063c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063cc:	e0ad      	b.n	800652a <UART_SetConfig+0x2fe>
 80063ce:	2302      	movs	r3, #2
 80063d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063d4:	e0a9      	b.n	800652a <UART_SetConfig+0x2fe>
 80063d6:	2304      	movs	r3, #4
 80063d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063dc:	e0a5      	b.n	800652a <UART_SetConfig+0x2fe>
 80063de:	2308      	movs	r3, #8
 80063e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063e4:	e0a1      	b.n	800652a <UART_SetConfig+0x2fe>
 80063e6:	2310      	movs	r3, #16
 80063e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ec:	e09d      	b.n	800652a <UART_SetConfig+0x2fe>
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a4a      	ldr	r2, [pc, #296]	; (800651c <UART_SetConfig+0x2f0>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d125      	bne.n	8006444 <UART_SetConfig+0x218>
 80063f8:	4b45      	ldr	r3, [pc, #276]	; (8006510 <UART_SetConfig+0x2e4>)
 80063fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006402:	2bc0      	cmp	r3, #192	; 0xc0
 8006404:	d016      	beq.n	8006434 <UART_SetConfig+0x208>
 8006406:	2bc0      	cmp	r3, #192	; 0xc0
 8006408:	d818      	bhi.n	800643c <UART_SetConfig+0x210>
 800640a:	2b80      	cmp	r3, #128	; 0x80
 800640c:	d00a      	beq.n	8006424 <UART_SetConfig+0x1f8>
 800640e:	2b80      	cmp	r3, #128	; 0x80
 8006410:	d814      	bhi.n	800643c <UART_SetConfig+0x210>
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <UART_SetConfig+0x1f0>
 8006416:	2b40      	cmp	r3, #64	; 0x40
 8006418:	d008      	beq.n	800642c <UART_SetConfig+0x200>
 800641a:	e00f      	b.n	800643c <UART_SetConfig+0x210>
 800641c:	2300      	movs	r3, #0
 800641e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006422:	e082      	b.n	800652a <UART_SetConfig+0x2fe>
 8006424:	2302      	movs	r3, #2
 8006426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800642a:	e07e      	b.n	800652a <UART_SetConfig+0x2fe>
 800642c:	2304      	movs	r3, #4
 800642e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006432:	e07a      	b.n	800652a <UART_SetConfig+0x2fe>
 8006434:	2308      	movs	r3, #8
 8006436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800643a:	e076      	b.n	800652a <UART_SetConfig+0x2fe>
 800643c:	2310      	movs	r3, #16
 800643e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006442:	e072      	b.n	800652a <UART_SetConfig+0x2fe>
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a35      	ldr	r2, [pc, #212]	; (8006520 <UART_SetConfig+0x2f4>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d12a      	bne.n	80064a4 <UART_SetConfig+0x278>
 800644e:	4b30      	ldr	r3, [pc, #192]	; (8006510 <UART_SetConfig+0x2e4>)
 8006450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006458:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800645c:	d01a      	beq.n	8006494 <UART_SetConfig+0x268>
 800645e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006462:	d81b      	bhi.n	800649c <UART_SetConfig+0x270>
 8006464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006468:	d00c      	beq.n	8006484 <UART_SetConfig+0x258>
 800646a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800646e:	d815      	bhi.n	800649c <UART_SetConfig+0x270>
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <UART_SetConfig+0x250>
 8006474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006478:	d008      	beq.n	800648c <UART_SetConfig+0x260>
 800647a:	e00f      	b.n	800649c <UART_SetConfig+0x270>
 800647c:	2300      	movs	r3, #0
 800647e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006482:	e052      	b.n	800652a <UART_SetConfig+0x2fe>
 8006484:	2302      	movs	r3, #2
 8006486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800648a:	e04e      	b.n	800652a <UART_SetConfig+0x2fe>
 800648c:	2304      	movs	r3, #4
 800648e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006492:	e04a      	b.n	800652a <UART_SetConfig+0x2fe>
 8006494:	2308      	movs	r3, #8
 8006496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800649a:	e046      	b.n	800652a <UART_SetConfig+0x2fe>
 800649c:	2310      	movs	r3, #16
 800649e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064a2:	e042      	b.n	800652a <UART_SetConfig+0x2fe>
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a17      	ldr	r2, [pc, #92]	; (8006508 <UART_SetConfig+0x2dc>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d13a      	bne.n	8006524 <UART_SetConfig+0x2f8>
 80064ae:	4b18      	ldr	r3, [pc, #96]	; (8006510 <UART_SetConfig+0x2e4>)
 80064b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064bc:	d01a      	beq.n	80064f4 <UART_SetConfig+0x2c8>
 80064be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064c2:	d81b      	bhi.n	80064fc <UART_SetConfig+0x2d0>
 80064c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064c8:	d00c      	beq.n	80064e4 <UART_SetConfig+0x2b8>
 80064ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ce:	d815      	bhi.n	80064fc <UART_SetConfig+0x2d0>
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <UART_SetConfig+0x2b0>
 80064d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064d8:	d008      	beq.n	80064ec <UART_SetConfig+0x2c0>
 80064da:	e00f      	b.n	80064fc <UART_SetConfig+0x2d0>
 80064dc:	2300      	movs	r3, #0
 80064de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064e2:	e022      	b.n	800652a <UART_SetConfig+0x2fe>
 80064e4:	2302      	movs	r3, #2
 80064e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064ea:	e01e      	b.n	800652a <UART_SetConfig+0x2fe>
 80064ec:	2304      	movs	r3, #4
 80064ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064f2:	e01a      	b.n	800652a <UART_SetConfig+0x2fe>
 80064f4:	2308      	movs	r3, #8
 80064f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064fa:	e016      	b.n	800652a <UART_SetConfig+0x2fe>
 80064fc:	2310      	movs	r3, #16
 80064fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006502:	e012      	b.n	800652a <UART_SetConfig+0x2fe>
 8006504:	cfff69f3 	.word	0xcfff69f3
 8006508:	40008000 	.word	0x40008000
 800650c:	40013800 	.word	0x40013800
 8006510:	40021000 	.word	0x40021000
 8006514:	40004400 	.word	0x40004400
 8006518:	40004800 	.word	0x40004800
 800651c:	40004c00 	.word	0x40004c00
 8006520:	40005000 	.word	0x40005000
 8006524:	2310      	movs	r3, #16
 8006526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4ab0      	ldr	r2, [pc, #704]	; (80067f0 <UART_SetConfig+0x5c4>)
 8006530:	4293      	cmp	r3, r2
 8006532:	f040 809b 	bne.w	800666c <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006536:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800653a:	2b08      	cmp	r3, #8
 800653c:	d827      	bhi.n	800658e <UART_SetConfig+0x362>
 800653e:	a201      	add	r2, pc, #4	; (adr r2, 8006544 <UART_SetConfig+0x318>)
 8006540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006544:	08006569 	.word	0x08006569
 8006548:	08006571 	.word	0x08006571
 800654c:	08006579 	.word	0x08006579
 8006550:	0800658f 	.word	0x0800658f
 8006554:	0800657f 	.word	0x0800657f
 8006558:	0800658f 	.word	0x0800658f
 800655c:	0800658f 	.word	0x0800658f
 8006560:	0800658f 	.word	0x0800658f
 8006564:	08006587 	.word	0x08006587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006568:	f7fd fdd4 	bl	8004114 <HAL_RCC_GetPCLK1Freq>
 800656c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800656e:	e014      	b.n	800659a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006570:	f7fd fde4 	bl	800413c <HAL_RCC_GetPCLK2Freq>
 8006574:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006576:	e010      	b.n	800659a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006578:	4b9e      	ldr	r3, [pc, #632]	; (80067f4 <UART_SetConfig+0x5c8>)
 800657a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800657c:	e00d      	b.n	800659a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800657e:	f7fd fd17 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8006582:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006584:	e009      	b.n	800659a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800658a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800658c:	e005      	b.n	800659a <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 800658e:	2300      	movs	r3, #0
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006598:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 8130 	beq.w	8006802 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	4a94      	ldr	r2, [pc, #592]	; (80067f8 <UART_SetConfig+0x5cc>)
 80065a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065ac:	461a      	mov	r2, r3
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80065b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	685a      	ldr	r2, [r3, #4]
 80065ba:	4613      	mov	r3, r2
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	4413      	add	r3, r2
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d305      	bcc.n	80065d2 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065cc:	69ba      	ldr	r2, [r7, #24]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d903      	bls.n	80065da <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80065d8:	e113      	b.n	8006802 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	2200      	movs	r2, #0
 80065de:	60bb      	str	r3, [r7, #8]
 80065e0:	60fa      	str	r2, [r7, #12]
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e6:	4a84      	ldr	r2, [pc, #528]	; (80067f8 <UART_SetConfig+0x5cc>)
 80065e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	2200      	movs	r2, #0
 80065f0:	603b      	str	r3, [r7, #0]
 80065f2:	607a      	str	r2, [r7, #4]
 80065f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80065fc:	f7fa fa32 	bl	8000a64 <__aeabi_uldivmod>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	4610      	mov	r0, r2
 8006606:	4619      	mov	r1, r3
 8006608:	f04f 0200 	mov.w	r2, #0
 800660c:	f04f 0300 	mov.w	r3, #0
 8006610:	020b      	lsls	r3, r1, #8
 8006612:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006616:	0202      	lsls	r2, r0, #8
 8006618:	6979      	ldr	r1, [r7, #20]
 800661a:	6849      	ldr	r1, [r1, #4]
 800661c:	0849      	lsrs	r1, r1, #1
 800661e:	2000      	movs	r0, #0
 8006620:	460c      	mov	r4, r1
 8006622:	4605      	mov	r5, r0
 8006624:	eb12 0804 	adds.w	r8, r2, r4
 8006628:	eb43 0905 	adc.w	r9, r3, r5
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	469a      	mov	sl, r3
 8006634:	4693      	mov	fp, r2
 8006636:	4652      	mov	r2, sl
 8006638:	465b      	mov	r3, fp
 800663a:	4640      	mov	r0, r8
 800663c:	4649      	mov	r1, r9
 800663e:	f7fa fa11 	bl	8000a64 <__aeabi_uldivmod>
 8006642:	4602      	mov	r2, r0
 8006644:	460b      	mov	r3, r1
 8006646:	4613      	mov	r3, r2
 8006648:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006650:	d308      	bcc.n	8006664 <UART_SetConfig+0x438>
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006658:	d204      	bcs.n	8006664 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6a3a      	ldr	r2, [r7, #32]
 8006660:	60da      	str	r2, [r3, #12]
 8006662:	e0ce      	b.n	8006802 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800666a:	e0ca      	b.n	8006802 <UART_SetConfig+0x5d6>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	69db      	ldr	r3, [r3, #28]
 8006670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006674:	d167      	bne.n	8006746 <UART_SetConfig+0x51a>
  {
    switch (clocksource)
 8006676:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800667a:	2b08      	cmp	r3, #8
 800667c:	d827      	bhi.n	80066ce <UART_SetConfig+0x4a2>
 800667e:	a201      	add	r2, pc, #4	; (adr r2, 8006684 <UART_SetConfig+0x458>)
 8006680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006684:	080066a9 	.word	0x080066a9
 8006688:	080066b1 	.word	0x080066b1
 800668c:	080066b9 	.word	0x080066b9
 8006690:	080066cf 	.word	0x080066cf
 8006694:	080066bf 	.word	0x080066bf
 8006698:	080066cf 	.word	0x080066cf
 800669c:	080066cf 	.word	0x080066cf
 80066a0:	080066cf 	.word	0x080066cf
 80066a4:	080066c7 	.word	0x080066c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066a8:	f7fd fd34 	bl	8004114 <HAL_RCC_GetPCLK1Freq>
 80066ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066ae:	e014      	b.n	80066da <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066b0:	f7fd fd44 	bl	800413c <HAL_RCC_GetPCLK2Freq>
 80066b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066b6:	e010      	b.n	80066da <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066b8:	4b4e      	ldr	r3, [pc, #312]	; (80067f4 <UART_SetConfig+0x5c8>)
 80066ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80066bc:	e00d      	b.n	80066da <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066be:	f7fd fc77 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 80066c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066c4:	e009      	b.n	80066da <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80066cc:	e005      	b.n	80066da <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80066d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 8090 	beq.w	8006802 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	4a44      	ldr	r2, [pc, #272]	; (80067f8 <UART_SetConfig+0x5cc>)
 80066e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066ec:	461a      	mov	r2, r3
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80066f4:	005a      	lsls	r2, r3, #1
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	085b      	lsrs	r3, r3, #1
 80066fc:	441a      	add	r2, r3
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	fbb2 f3f3 	udiv	r3, r2, r3
 8006706:	b29b      	uxth	r3, r3
 8006708:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	2b0f      	cmp	r3, #15
 800670e:	d916      	bls.n	800673e <UART_SetConfig+0x512>
 8006710:	6a3b      	ldr	r3, [r7, #32]
 8006712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006716:	d212      	bcs.n	800673e <UART_SetConfig+0x512>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	b29b      	uxth	r3, r3
 800671c:	f023 030f 	bic.w	r3, r3, #15
 8006720:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	085b      	lsrs	r3, r3, #1
 8006726:	b29b      	uxth	r3, r3
 8006728:	f003 0307 	and.w	r3, r3, #7
 800672c:	b29a      	uxth	r2, r3
 800672e:	8bfb      	ldrh	r3, [r7, #30]
 8006730:	4313      	orrs	r3, r2
 8006732:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	8bfa      	ldrh	r2, [r7, #30]
 800673a:	60da      	str	r2, [r3, #12]
 800673c:	e061      	b.n	8006802 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006744:	e05d      	b.n	8006802 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006746:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800674a:	2b08      	cmp	r3, #8
 800674c:	d827      	bhi.n	800679e <UART_SetConfig+0x572>
 800674e:	a201      	add	r2, pc, #4	; (adr r2, 8006754 <UART_SetConfig+0x528>)
 8006750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006754:	08006779 	.word	0x08006779
 8006758:	08006781 	.word	0x08006781
 800675c:	08006789 	.word	0x08006789
 8006760:	0800679f 	.word	0x0800679f
 8006764:	0800678f 	.word	0x0800678f
 8006768:	0800679f 	.word	0x0800679f
 800676c:	0800679f 	.word	0x0800679f
 8006770:	0800679f 	.word	0x0800679f
 8006774:	08006797 	.word	0x08006797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006778:	f7fd fccc 	bl	8004114 <HAL_RCC_GetPCLK1Freq>
 800677c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800677e:	e014      	b.n	80067aa <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006780:	f7fd fcdc 	bl	800413c <HAL_RCC_GetPCLK2Freq>
 8006784:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006786:	e010      	b.n	80067aa <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006788:	4b1a      	ldr	r3, [pc, #104]	; (80067f4 <UART_SetConfig+0x5c8>)
 800678a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800678c:	e00d      	b.n	80067aa <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800678e:	f7fd fc0f 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8006792:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006794:	e009      	b.n	80067aa <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800679a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800679c:	e005      	b.n	80067aa <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80067a8:	bf00      	nop
    }

    if (pclk != 0U)
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d028      	beq.n	8006802 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b4:	4a10      	ldr	r2, [pc, #64]	; (80067f8 <UART_SetConfig+0x5cc>)
 80067b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067ba:	461a      	mov	r2, r3
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	fbb3 f2f2 	udiv	r2, r3, r2
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	085b      	lsrs	r3, r3, #1
 80067c8:	441a      	add	r2, r3
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	2b0f      	cmp	r3, #15
 80067da:	d90f      	bls.n	80067fc <UART_SetConfig+0x5d0>
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067e2:	d20b      	bcs.n	80067fc <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = usartdiv;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6a3a      	ldr	r2, [r7, #32]
 80067ea:	60da      	str	r2, [r3, #12]
 80067ec:	e009      	b.n	8006802 <UART_SetConfig+0x5d6>
 80067ee:	bf00      	nop
 80067f0:	40008000 	.word	0x40008000
 80067f4:	00f42400 	.word	0x00f42400
 80067f8:	080071bc 	.word	0x080071bc
      }
      else
      {
        ret = HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	2201      	movs	r2, #1
 8006806:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	2201      	movs	r2, #1
 800680e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	2200      	movs	r2, #0
 8006816:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	2200      	movs	r2, #0
 800681c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800681e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006822:	4618      	mov	r0, r3
 8006824:	3730      	adds	r7, #48	; 0x30
 8006826:	46bd      	mov	sp, r7
 8006828:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800682c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00a      	beq.n	8006856 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00a      	beq.n	8006878 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687c:	f003 0304 	and.w	r3, r3, #4
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00a      	beq.n	800689a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689e:	f003 0308 	and.w	r3, r3, #8
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c0:	f003 0310 	and.w	r3, r3, #16
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00a      	beq.n	80068de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e2:	f003 0320 	and.w	r3, r3, #32
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006908:	2b00      	cmp	r3, #0
 800690a:	d01a      	beq.n	8006942 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800692a:	d10a      	bne.n	8006942 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00a      	beq.n	8006964 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	605a      	str	r2, [r3, #4]
  }
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af02      	add	r7, sp, #8
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006980:	f7fb f920 	bl	8001bc4 <HAL_GetTick>
 8006984:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0308 	and.w	r3, r3, #8
 8006990:	2b08      	cmp	r3, #8
 8006992:	d10e      	bne.n	80069b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006994:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f82f 	bl	8006a06 <UART_WaitOnFlagUntilTimeout>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e025      	b.n	80069fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b04      	cmp	r3, #4
 80069be:	d10e      	bne.n	80069de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f819 	bl	8006a06 <UART_WaitOnFlagUntilTimeout>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e00f      	b.n	80069fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2220      	movs	r2, #32
 80069e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2220      	movs	r2, #32
 80069ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b084      	sub	sp, #16
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	60f8      	str	r0, [r7, #12]
 8006a0e:	60b9      	str	r1, [r7, #8]
 8006a10:	603b      	str	r3, [r7, #0]
 8006a12:	4613      	mov	r3, r2
 8006a14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a16:	e062      	b.n	8006ade <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1e:	d05e      	beq.n	8006ade <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a20:	f7fb f8d0 	bl	8001bc4 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d302      	bcc.n	8006a36 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d11d      	bne.n	8006a72 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a44:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	689a      	ldr	r2, [r3, #8]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0201 	bic.w	r2, r2, #1
 8006a54:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2220      	movs	r2, #32
 8006a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e045      	b.n	8006afe <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0304 	and.w	r3, r3, #4
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d02e      	beq.n	8006ade <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a8e:	d126      	bne.n	8006ade <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a98:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006aa8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	689a      	ldr	r2, [r3, #8]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 0201 	bic.w	r2, r2, #1
 8006ab8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2220      	movs	r2, #32
 8006abe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2220      	movs	r2, #32
 8006ace:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e00f      	b.n	8006afe <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	69da      	ldr	r2, [r3, #28]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	bf0c      	ite	eq
 8006aee:	2301      	moveq	r3, #1
 8006af0:	2300      	movne	r3, #0
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	461a      	mov	r2, r3
 8006af6:	79fb      	ldrb	r3, [r7, #7]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d08d      	beq.n	8006a18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b085      	sub	sp, #20
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d101      	bne.n	8006b1c <HAL_UARTEx_DisableFifoMode+0x16>
 8006b18:	2302      	movs	r3, #2
 8006b1a:	e027      	b.n	8006b6c <HAL_UARTEx_DisableFifoMode+0x66>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2224      	movs	r2, #36	; 0x24
 8006b28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0201 	bic.w	r2, r2, #1
 8006b42:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006b4a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d101      	bne.n	8006b90 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e02d      	b.n	8006bec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2224      	movs	r2, #36	; 0x24
 8006b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0201 	bic.w	r2, r2, #1
 8006bb6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f84f 	bl	8006c70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d101      	bne.n	8006c0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e02d      	b.n	8006c68 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2224      	movs	r2, #36	; 0x24
 8006c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 0201 	bic.w	r2, r2, #1
 8006c32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f811 	bl	8006c70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2220      	movs	r2, #32
 8006c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d108      	bne.n	8006c92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006c90:	e031      	b.n	8006cf6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006c92:	2308      	movs	r3, #8
 8006c94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006c96:	2308      	movs	r3, #8
 8006c98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	0e5b      	lsrs	r3, r3, #25
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	f003 0307 	and.w	r3, r3, #7
 8006ca8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	0f5b      	lsrs	r3, r3, #29
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	f003 0307 	and.w	r3, r3, #7
 8006cb8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006cba:	7bbb      	ldrb	r3, [r7, #14]
 8006cbc:	7b3a      	ldrb	r2, [r7, #12]
 8006cbe:	4911      	ldr	r1, [pc, #68]	; (8006d04 <UARTEx_SetNbDataToProcess+0x94>)
 8006cc0:	5c8a      	ldrb	r2, [r1, r2]
 8006cc2:	fb02 f303 	mul.w	r3, r2, r3
 8006cc6:	7b3a      	ldrb	r2, [r7, #12]
 8006cc8:	490f      	ldr	r1, [pc, #60]	; (8006d08 <UARTEx_SetNbDataToProcess+0x98>)
 8006cca:	5c8a      	ldrb	r2, [r1, r2]
 8006ccc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
 8006cda:	7b7a      	ldrb	r2, [r7, #13]
 8006cdc:	4909      	ldr	r1, [pc, #36]	; (8006d04 <UARTEx_SetNbDataToProcess+0x94>)
 8006cde:	5c8a      	ldrb	r2, [r1, r2]
 8006ce0:	fb02 f303 	mul.w	r3, r2, r3
 8006ce4:	7b7a      	ldrb	r2, [r7, #13]
 8006ce6:	4908      	ldr	r1, [pc, #32]	; (8006d08 <UARTEx_SetNbDataToProcess+0x98>)
 8006ce8:	5c8a      	ldrb	r2, [r1, r2]
 8006cea:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006cf6:	bf00      	nop
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	080071d4 	.word	0x080071d4
 8006d08:	080071dc 	.word	0x080071dc

08006d0c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b08b      	sub	sp, #44	; 0x2c
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	fa93 f3a3 	rbit	r3, r3
 8006d26:	613b      	str	r3, [r7, #16]
  return result;
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006d32:	2320      	movs	r3, #32
 8006d34:	e003      	b.n	8006d3e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	fab3 f383 	clz	r3, r3
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	005b      	lsls	r3, r3, #1
 8006d40:	2103      	movs	r1, #3
 8006d42:	fa01 f303 	lsl.w	r3, r1, r3
 8006d46:	43db      	mvns	r3, r3
 8006d48:	401a      	ands	r2, r3
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	fa93 f3a3 	rbit	r3, r3
 8006d54:	61fb      	str	r3, [r7, #28]
  return result;
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d101      	bne.n	8006d64 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006d60:	2320      	movs	r3, #32
 8006d62:	e003      	b.n	8006d6c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	fab3 f383 	clz	r3, r3
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	6879      	ldr	r1, [r7, #4]
 8006d70:	fa01 f303 	lsl.w	r3, r1, r3
 8006d74:	431a      	orrs	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	601a      	str	r2, [r3, #0]
}
 8006d7a:	bf00      	nop
 8006d7c:	372c      	adds	r7, #44	; 0x2c
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b085      	sub	sp, #20
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	60f8      	str	r0, [r7, #12]
 8006d8e:	60b9      	str	r1, [r7, #8]
 8006d90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	43db      	mvns	r3, r3
 8006d9a:	401a      	ands	r2, r3
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	6879      	ldr	r1, [r7, #4]
 8006da0:	fb01 f303 	mul.w	r3, r1, r3
 8006da4:	431a      	orrs	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	605a      	str	r2, [r3, #4]
}
 8006daa:	bf00      	nop
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b08b      	sub	sp, #44	; 0x2c
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	60b9      	str	r1, [r7, #8]
 8006dc0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	689a      	ldr	r2, [r3, #8]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	fa93 f3a3 	rbit	r3, r3
 8006dd0:	613b      	str	r3, [r7, #16]
  return result;
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d101      	bne.n	8006de0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006ddc:	2320      	movs	r3, #32
 8006dde:	e003      	b.n	8006de8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	fab3 f383 	clz	r3, r3
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	2103      	movs	r1, #3
 8006dec:	fa01 f303 	lsl.w	r3, r1, r3
 8006df0:	43db      	mvns	r3, r3
 8006df2:	401a      	ands	r2, r3
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006df8:	6a3b      	ldr	r3, [r7, #32]
 8006dfa:	fa93 f3a3 	rbit	r3, r3
 8006dfe:	61fb      	str	r3, [r7, #28]
  return result;
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006e0a:	2320      	movs	r3, #32
 8006e0c:	e003      	b.n	8006e16 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e10:	fab3 f383 	clz	r3, r3
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	005b      	lsls	r3, r3, #1
 8006e18:	6879      	ldr	r1, [r7, #4]
 8006e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8006e24:	bf00      	nop
 8006e26:	372c      	adds	r7, #44	; 0x2c
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b08b      	sub	sp, #44	; 0x2c
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	68da      	ldr	r2, [r3, #12]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	fa93 f3a3 	rbit	r3, r3
 8006e4a:	613b      	str	r3, [r7, #16]
  return result;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d101      	bne.n	8006e5a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006e56:	2320      	movs	r3, #32
 8006e58:	e003      	b.n	8006e62 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	fab3 f383 	clz	r3, r3
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	005b      	lsls	r3, r3, #1
 8006e64:	2103      	movs	r1, #3
 8006e66:	fa01 f303 	lsl.w	r3, r1, r3
 8006e6a:	43db      	mvns	r3, r3
 8006e6c:	401a      	ands	r2, r3
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	fa93 f3a3 	rbit	r3, r3
 8006e78:	61fb      	str	r3, [r7, #28]
  return result;
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006e84:	2320      	movs	r3, #32
 8006e86:	e003      	b.n	8006e90 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8a:	fab3 f383 	clz	r3, r3
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	6879      	ldr	r1, [r7, #4]
 8006e94:	fa01 f303 	lsl.w	r3, r1, r3
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	60da      	str	r2, [r3, #12]
}
 8006e9e:	bf00      	nop
 8006ea0:	372c      	adds	r7, #44	; 0x2c
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b08b      	sub	sp, #44	; 0x2c
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	60f8      	str	r0, [r7, #12]
 8006eb2:	60b9      	str	r1, [r7, #8]
 8006eb4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6a1a      	ldr	r2, [r3, #32]
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	fa93 f3a3 	rbit	r3, r3
 8006ec4:	613b      	str	r3, [r7, #16]
  return result;
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006ed0:	2320      	movs	r3, #32
 8006ed2:	e003      	b.n	8006edc <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	fab3 f383 	clz	r3, r3
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	210f      	movs	r1, #15
 8006ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee4:	43db      	mvns	r3, r3
 8006ee6:	401a      	ands	r2, r3
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eec:	6a3b      	ldr	r3, [r7, #32]
 8006eee:	fa93 f3a3 	rbit	r3, r3
 8006ef2:	61fb      	str	r3, [r7, #28]
  return result;
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006efe:	2320      	movs	r3, #32
 8006f00:	e003      	b.n	8006f0a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	fab3 f383 	clz	r3, r3
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	6879      	ldr	r1, [r7, #4]
 8006f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f12:	431a      	orrs	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006f18:	bf00      	nop
 8006f1a:	372c      	adds	r7, #44	; 0x2c
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b08b      	sub	sp, #44	; 0x2c
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	0a1b      	lsrs	r3, r3, #8
 8006f38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	fa93 f3a3 	rbit	r3, r3
 8006f40:	613b      	str	r3, [r7, #16]
  return result;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006f4c:	2320      	movs	r3, #32
 8006f4e:	e003      	b.n	8006f58 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	fab3 f383 	clz	r3, r3
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	210f      	movs	r1, #15
 8006f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f60:	43db      	mvns	r3, r3
 8006f62:	401a      	ands	r2, r3
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	0a1b      	lsrs	r3, r3, #8
 8006f68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	fa93 f3a3 	rbit	r3, r3
 8006f70:	61fb      	str	r3, [r7, #28]
  return result;
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006f7c:	2320      	movs	r3, #32
 8006f7e:	e003      	b.n	8006f88 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	fab3 f383 	clz	r3, r3
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	6879      	ldr	r1, [r7, #4]
 8006f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f90:	431a      	orrs	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8006f96:	bf00      	nop
 8006f98:	372c      	adds	r7, #44	; 0x2c
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b088      	sub	sp, #32
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	fa93 f3a3 	rbit	r3, r3
 8006fb8:	60fb      	str	r3, [r7, #12]
  return result;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d101      	bne.n	8006fc8 <LL_GPIO_Init+0x26>
    return 32U;
 8006fc4:	2320      	movs	r3, #32
 8006fc6:	e003      	b.n	8006fd0 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	fab3 f383 	clz	r3, r3
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006fd2:	e047      	b.n	8007064 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	2101      	movs	r1, #1
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d039      	beq.n	800705e <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d003      	beq.n	8006ffa <LL_GPIO_Init+0x58>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d10d      	bne.n	8007016 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	461a      	mov	r2, r3
 8007000:	69b9      	ldr	r1, [r7, #24]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7ff fed7 	bl	8006db6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	461a      	mov	r2, r3
 800700e:	69b9      	ldr	r1, [r7, #24]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7ff feb8 	bl	8006d86 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	461a      	mov	r2, r3
 800701c:	69b9      	ldr	r1, [r7, #24]
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7ff ff06 	bl	8006e30 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	2b02      	cmp	r3, #2
 800702a:	d111      	bne.n	8007050 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	2bff      	cmp	r3, #255	; 0xff
 8007030:	d807      	bhi.n	8007042 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	461a      	mov	r2, r3
 8007038:	69b9      	ldr	r1, [r7, #24]
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7ff ff35 	bl	8006eaa <LL_GPIO_SetAFPin_0_7>
 8007040:	e006      	b.n	8007050 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	461a      	mov	r2, r3
 8007048:	69b9      	ldr	r1, [r7, #24]
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7ff ff6a 	bl	8006f24 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	461a      	mov	r2, r3
 8007056:	69b9      	ldr	r1, [r7, #24]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7ff fe57 	bl	8006d0c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	3301      	adds	r3, #1
 8007062:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	fa22 f303 	lsr.w	r3, r2, r3
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1b0      	bne.n	8006fd4 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3720      	adds	r7, #32
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007084:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007088:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007090:	b29a      	uxth	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	b29b      	uxth	r3, r3
 8007096:	43db      	mvns	r3, r3
 8007098:	b29b      	uxth	r3, r3
 800709a:	4013      	ands	r3, r2
 800709c:	b29a      	uxth	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80070b2:	b084      	sub	sp, #16
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	f107 0014 	add.w	r0, r7, #20
 80070c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	370c      	adds	r7, #12
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	b004      	add	sp, #16
 80070f2:	4770      	bx	lr

080070f4 <__libc_init_array>:
 80070f4:	b570      	push	{r4, r5, r6, lr}
 80070f6:	4d0d      	ldr	r5, [pc, #52]	; (800712c <__libc_init_array+0x38>)
 80070f8:	2600      	movs	r6, #0
 80070fa:	4c0d      	ldr	r4, [pc, #52]	; (8007130 <__libc_init_array+0x3c>)
 80070fc:	1b64      	subs	r4, r4, r5
 80070fe:	10a4      	asrs	r4, r4, #2
 8007100:	42a6      	cmp	r6, r4
 8007102:	d109      	bne.n	8007118 <__libc_init_array+0x24>
 8007104:	4d0b      	ldr	r5, [pc, #44]	; (8007134 <__libc_init_array+0x40>)
 8007106:	2600      	movs	r6, #0
 8007108:	4c0b      	ldr	r4, [pc, #44]	; (8007138 <__libc_init_array+0x44>)
 800710a:	f000 f81f 	bl	800714c <_init>
 800710e:	1b64      	subs	r4, r4, r5
 8007110:	10a4      	asrs	r4, r4, #2
 8007112:	42a6      	cmp	r6, r4
 8007114:	d105      	bne.n	8007122 <__libc_init_array+0x2e>
 8007116:	bd70      	pop	{r4, r5, r6, pc}
 8007118:	f855 3b04 	ldr.w	r3, [r5], #4
 800711c:	3601      	adds	r6, #1
 800711e:	4798      	blx	r3
 8007120:	e7ee      	b.n	8007100 <__libc_init_array+0xc>
 8007122:	f855 3b04 	ldr.w	r3, [r5], #4
 8007126:	3601      	adds	r6, #1
 8007128:	4798      	blx	r3
 800712a:	e7f2      	b.n	8007112 <__libc_init_array+0x1e>
 800712c:	080071ec 	.word	0x080071ec
 8007130:	080071ec 	.word	0x080071ec
 8007134:	080071ec 	.word	0x080071ec
 8007138:	080071f0 	.word	0x080071f0

0800713c <memset>:
 800713c:	4402      	add	r2, r0
 800713e:	4603      	mov	r3, r0
 8007140:	4293      	cmp	r3, r2
 8007142:	d100      	bne.n	8007146 <memset+0xa>
 8007144:	4770      	bx	lr
 8007146:	f803 1b01 	strb.w	r1, [r3], #1
 800714a:	e7f9      	b.n	8007140 <memset+0x4>

0800714c <_init>:
 800714c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800714e:	bf00      	nop
 8007150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007152:	bc08      	pop	{r3}
 8007154:	469e      	mov	lr, r3
 8007156:	4770      	bx	lr

08007158 <_fini>:
 8007158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715a:	bf00      	nop
 800715c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800715e:	bc08      	pop	{r3}
 8007160:	469e      	mov	lr, r3
 8007162:	4770      	bx	lr
