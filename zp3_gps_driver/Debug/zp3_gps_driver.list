
zp3_gps_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061b0  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080063a8  080063a8  000073a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006450  08006450  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006450  08006450  00007450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006458  08006458  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006458  08006458  00007458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006460  08006460  00007460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006464  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000005c  080064c0  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  080064c0  000082cc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001100a  00000000  00000000  00008092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a73  00000000  00000000  0001909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  0001bb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a52  00000000  00000000  0001c890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c169  00000000  00000000  0001d2e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000111ce  00000000  00000000  0004944b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103ccd  00000000  00000000  0005a619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015e2e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d0c  00000000  00000000  0015e32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00162038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000005c 	.word	0x2000005c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006390 	.word	0x08006390

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000060 	.word	0x20000060
 8000234:	08006390 	.word	0x08006390

08000238 <__aeabi_dmul>:
 8000238:	b570      	push	{r4, r5, r6, lr}
 800023a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800023e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000242:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000246:	bf1d      	ittte	ne
 8000248:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800024c:	ea94 0f0c 	teqne	r4, ip
 8000250:	ea95 0f0c 	teqne	r5, ip
 8000254:	f000 f8de 	bleq	8000414 <__aeabi_dmul+0x1dc>
 8000258:	442c      	add	r4, r5
 800025a:	ea81 0603 	eor.w	r6, r1, r3
 800025e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000262:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000266:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800026a:	bf18      	it	ne
 800026c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000270:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000274:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000278:	d038      	beq.n	80002ec <__aeabi_dmul+0xb4>
 800027a:	fba0 ce02 	umull	ip, lr, r0, r2
 800027e:	f04f 0500 	mov.w	r5, #0
 8000282:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000286:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800028a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800028e:	f04f 0600 	mov.w	r6, #0
 8000292:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000296:	f09c 0f00 	teq	ip, #0
 800029a:	bf18      	it	ne
 800029c:	f04e 0e01 	orrne.w	lr, lr, #1
 80002a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002ac:	d204      	bcs.n	80002b8 <__aeabi_dmul+0x80>
 80002ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002b2:	416d      	adcs	r5, r5
 80002b4:	eb46 0606 	adc.w	r6, r6, r6
 80002b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002d0:	bf88      	it	hi
 80002d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002d6:	d81e      	bhi.n	8000316 <__aeabi_dmul+0xde>
 80002d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002dc:	bf08      	it	eq
 80002de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002e2:	f150 0000 	adcs.w	r0, r0, #0
 80002e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002f0:	ea46 0101 	orr.w	r1, r6, r1
 80002f4:	ea40 0002 	orr.w	r0, r0, r2
 80002f8:	ea81 0103 	eor.w	r1, r1, r3
 80002fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000300:	bfc2      	ittt	gt
 8000302:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000306:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800030a:	bd70      	popgt	{r4, r5, r6, pc}
 800030c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000310:	f04f 0e00 	mov.w	lr, #0
 8000314:	3c01      	subs	r4, #1
 8000316:	f300 80ab 	bgt.w	8000470 <__aeabi_dmul+0x238>
 800031a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800031e:	bfde      	ittt	le
 8000320:	2000      	movle	r0, #0
 8000322:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000326:	bd70      	pople	{r4, r5, r6, pc}
 8000328:	f1c4 0400 	rsb	r4, r4, #0
 800032c:	3c20      	subs	r4, #32
 800032e:	da35      	bge.n	800039c <__aeabi_dmul+0x164>
 8000330:	340c      	adds	r4, #12
 8000332:	dc1b      	bgt.n	800036c <__aeabi_dmul+0x134>
 8000334:	f104 0414 	add.w	r4, r4, #20
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f305 	lsl.w	r3, r0, r5
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea40 0002 	orr.w	r0, r0, r2
 800034c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000350:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000354:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000358:	fa21 f604 	lsr.w	r6, r1, r4
 800035c:	eb42 0106 	adc.w	r1, r2, r6
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 040c 	rsb	r4, r4, #12
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f304 	lsl.w	r3, r0, r4
 8000378:	fa20 f005 	lsr.w	r0, r0, r5
 800037c:	fa01 f204 	lsl.w	r2, r1, r4
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000388:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f1c4 0520 	rsb	r5, r4, #32
 80003a0:	fa00 f205 	lsl.w	r2, r0, r5
 80003a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a8:	fa20 f304 	lsr.w	r3, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea43 0302 	orr.w	r3, r3, r2
 80003b4:	fa21 f004 	lsr.w	r0, r1, r4
 80003b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003bc:	fa21 f204 	lsr.w	r2, r1, r4
 80003c0:	ea20 0002 	bic.w	r0, r0, r2
 80003c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f094 0f00 	teq	r4, #0
 80003d8:	d10f      	bne.n	80003fa <__aeabi_dmul+0x1c2>
 80003da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003de:	0040      	lsls	r0, r0, #1
 80003e0:	eb41 0101 	adc.w	r1, r1, r1
 80003e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3c01      	subeq	r4, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1a6>
 80003ee:	ea41 0106 	orr.w	r1, r1, r6
 80003f2:	f095 0f00 	teq	r5, #0
 80003f6:	bf18      	it	ne
 80003f8:	4770      	bxne	lr
 80003fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003fe:	0052      	lsls	r2, r2, #1
 8000400:	eb43 0303 	adc.w	r3, r3, r3
 8000404:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000408:	bf08      	it	eq
 800040a:	3d01      	subeq	r5, #1
 800040c:	d0f7      	beq.n	80003fe <__aeabi_dmul+0x1c6>
 800040e:	ea43 0306 	orr.w	r3, r3, r6
 8000412:	4770      	bx	lr
 8000414:	ea94 0f0c 	teq	r4, ip
 8000418:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800041c:	bf18      	it	ne
 800041e:	ea95 0f0c 	teqne	r5, ip
 8000422:	d00c      	beq.n	800043e <__aeabi_dmul+0x206>
 8000424:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000428:	bf18      	it	ne
 800042a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042e:	d1d1      	bne.n	80003d4 <__aeabi_dmul+0x19c>
 8000430:	ea81 0103 	eor.w	r1, r1, r3
 8000434:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd70      	pop	{r4, r5, r6, pc}
 800043e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000442:	bf06      	itte	eq
 8000444:	4610      	moveq	r0, r2
 8000446:	4619      	moveq	r1, r3
 8000448:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800044c:	d019      	beq.n	8000482 <__aeabi_dmul+0x24a>
 800044e:	ea94 0f0c 	teq	r4, ip
 8000452:	d102      	bne.n	800045a <__aeabi_dmul+0x222>
 8000454:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000458:	d113      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800045a:	ea95 0f0c 	teq	r5, ip
 800045e:	d105      	bne.n	800046c <__aeabi_dmul+0x234>
 8000460:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000464:	bf1c      	itt	ne
 8000466:	4610      	movne	r0, r2
 8000468:	4619      	movne	r1, r3
 800046a:	d10a      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800046c:	ea81 0103 	eor.w	r1, r1, r3
 8000470:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000474:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd70      	pop	{r4, r5, r6, pc}
 8000482:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000486:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800048a:	bd70      	pop	{r4, r5, r6, pc}

0800048c <__aeabi_drsub>:
 800048c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	e002      	b.n	8000498 <__adddf3>
 8000492:	bf00      	nop

08000494 <__aeabi_dsub>:
 8000494:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000498 <__adddf3>:
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800049e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004a2:	ea94 0f05 	teq	r4, r5
 80004a6:	bf08      	it	eq
 80004a8:	ea90 0f02 	teqeq	r0, r2
 80004ac:	bf1f      	itttt	ne
 80004ae:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004b2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004be:	f000 80e2 	beq.w	8000686 <__adddf3+0x1ee>
 80004c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ca:	bfb8      	it	lt
 80004cc:	426d      	neglt	r5, r5
 80004ce:	dd0c      	ble.n	80004ea <__adddf3+0x52>
 80004d0:	442c      	add	r4, r5
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	ea82 0000 	eor.w	r0, r2, r0
 80004de:	ea83 0101 	eor.w	r1, r3, r1
 80004e2:	ea80 0202 	eor.w	r2, r0, r2
 80004e6:	ea81 0303 	eor.w	r3, r1, r3
 80004ea:	2d36      	cmp	r5, #54	@ 0x36
 80004ec:	bf88      	it	hi
 80004ee:	bd30      	pophi	{r4, r5, pc}
 80004f0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000500:	d002      	beq.n	8000508 <__adddf3+0x70>
 8000502:	4240      	negs	r0, r0
 8000504:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000508:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800050c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000510:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000514:	d002      	beq.n	800051c <__adddf3+0x84>
 8000516:	4252      	negs	r2, r2
 8000518:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800051c:	ea94 0f05 	teq	r4, r5
 8000520:	f000 80a7 	beq.w	8000672 <__adddf3+0x1da>
 8000524:	f1a4 0401 	sub.w	r4, r4, #1
 8000528:	f1d5 0e20 	rsbs	lr, r5, #32
 800052c:	db0d      	blt.n	800054a <__adddf3+0xb2>
 800052e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000532:	fa22 f205 	lsr.w	r2, r2, r5
 8000536:	1880      	adds	r0, r0, r2
 8000538:	f141 0100 	adc.w	r1, r1, #0
 800053c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000540:	1880      	adds	r0, r0, r2
 8000542:	fa43 f305 	asr.w	r3, r3, r5
 8000546:	4159      	adcs	r1, r3
 8000548:	e00e      	b.n	8000568 <__adddf3+0xd0>
 800054a:	f1a5 0520 	sub.w	r5, r5, #32
 800054e:	f10e 0e20 	add.w	lr, lr, #32
 8000552:	2a01      	cmp	r2, #1
 8000554:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000558:	bf28      	it	cs
 800055a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800055e:	fa43 f305 	asr.w	r3, r3, r5
 8000562:	18c0      	adds	r0, r0, r3
 8000564:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800056c:	d507      	bpl.n	800057e <__adddf3+0xe6>
 800056e:	f04f 0e00 	mov.w	lr, #0
 8000572:	f1dc 0c00 	rsbs	ip, ip, #0
 8000576:	eb7e 0000 	sbcs.w	r0, lr, r0
 800057a:	eb6e 0101 	sbc.w	r1, lr, r1
 800057e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000582:	d31b      	bcc.n	80005bc <__adddf3+0x124>
 8000584:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000588:	d30c      	bcc.n	80005a4 <__adddf3+0x10c>
 800058a:	0849      	lsrs	r1, r1, #1
 800058c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000590:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000594:	f104 0401 	add.w	r4, r4, #1
 8000598:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800059c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005a0:	f080 809a 	bcs.w	80006d8 <__adddf3+0x240>
 80005a4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a8:	bf08      	it	eq
 80005aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005ae:	f150 0000 	adcs.w	r0, r0, #0
 80005b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b6:	ea41 0105 	orr.w	r1, r1, r5
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005c0:	4140      	adcs	r0, r0
 80005c2:	eb41 0101 	adc.w	r1, r1, r1
 80005c6:	3c01      	subs	r4, #1
 80005c8:	bf28      	it	cs
 80005ca:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ce:	d2e9      	bcs.n	80005a4 <__adddf3+0x10c>
 80005d0:	f091 0f00 	teq	r1, #0
 80005d4:	bf04      	itt	eq
 80005d6:	4601      	moveq	r1, r0
 80005d8:	2000      	moveq	r0, #0
 80005da:	fab1 f381 	clz	r3, r1
 80005de:	bf08      	it	eq
 80005e0:	3320      	addeq	r3, #32
 80005e2:	f1a3 030b 	sub.w	r3, r3, #11
 80005e6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ea:	da0c      	bge.n	8000606 <__adddf3+0x16e>
 80005ec:	320c      	adds	r2, #12
 80005ee:	dd08      	ble.n	8000602 <__adddf3+0x16a>
 80005f0:	f102 0c14 	add.w	ip, r2, #20
 80005f4:	f1c2 020c 	rsb	r2, r2, #12
 80005f8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005fc:	fa21 f102 	lsr.w	r1, r1, r2
 8000600:	e00c      	b.n	800061c <__adddf3+0x184>
 8000602:	f102 0214 	add.w	r2, r2, #20
 8000606:	bfd8      	it	le
 8000608:	f1c2 0c20 	rsble	ip, r2, #32
 800060c:	fa01 f102 	lsl.w	r1, r1, r2
 8000610:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000614:	bfdc      	itt	le
 8000616:	ea41 010c 	orrle.w	r1, r1, ip
 800061a:	4090      	lslle	r0, r2
 800061c:	1ae4      	subs	r4, r4, r3
 800061e:	bfa2      	ittt	ge
 8000620:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000624:	4329      	orrge	r1, r5
 8000626:	bd30      	popge	{r4, r5, pc}
 8000628:	ea6f 0404 	mvn.w	r4, r4
 800062c:	3c1f      	subs	r4, #31
 800062e:	da1c      	bge.n	800066a <__adddf3+0x1d2>
 8000630:	340c      	adds	r4, #12
 8000632:	dc0e      	bgt.n	8000652 <__adddf3+0x1ba>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0220 	rsb	r2, r4, #32
 800063c:	fa20 f004 	lsr.w	r0, r0, r4
 8000640:	fa01 f302 	lsl.w	r3, r1, r2
 8000644:	ea40 0003 	orr.w	r0, r0, r3
 8000648:	fa21 f304 	lsr.w	r3, r1, r4
 800064c:	ea45 0103 	orr.w	r1, r5, r3
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f1c4 040c 	rsb	r4, r4, #12
 8000656:	f1c4 0220 	rsb	r2, r4, #32
 800065a:	fa20 f002 	lsr.w	r0, r0, r2
 800065e:	fa01 f304 	lsl.w	r3, r1, r4
 8000662:	ea40 0003 	orr.w	r0, r0, r3
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	fa21 f004 	lsr.w	r0, r1, r4
 800066e:	4629      	mov	r1, r5
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	f094 0f00 	teq	r4, #0
 8000676:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800067a:	bf06      	itte	eq
 800067c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000680:	3401      	addeq	r4, #1
 8000682:	3d01      	subne	r5, #1
 8000684:	e74e      	b.n	8000524 <__adddf3+0x8c>
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf18      	it	ne
 800068c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000690:	d029      	beq.n	80006e6 <__adddf3+0x24e>
 8000692:	ea94 0f05 	teq	r4, r5
 8000696:	bf08      	it	eq
 8000698:	ea90 0f02 	teqeq	r0, r2
 800069c:	d005      	beq.n	80006aa <__adddf3+0x212>
 800069e:	ea54 0c00 	orrs.w	ip, r4, r0
 80006a2:	bf04      	itt	eq
 80006a4:	4619      	moveq	r1, r3
 80006a6:	4610      	moveq	r0, r2
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	ea91 0f03 	teq	r1, r3
 80006ae:	bf1e      	ittt	ne
 80006b0:	2100      	movne	r1, #0
 80006b2:	2000      	movne	r0, #0
 80006b4:	bd30      	popne	{r4, r5, pc}
 80006b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006ba:	d105      	bne.n	80006c8 <__adddf3+0x230>
 80006bc:	0040      	lsls	r0, r0, #1
 80006be:	4149      	adcs	r1, r1
 80006c0:	bf28      	it	cs
 80006c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006c6:	bd30      	pop	{r4, r5, pc}
 80006c8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006cc:	bf3c      	itt	cc
 80006ce:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006d2:	bd30      	popcc	{r4, r5, pc}
 80006d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006dc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006e0:	f04f 0000 	mov.w	r0, #0
 80006e4:	bd30      	pop	{r4, r5, pc}
 80006e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ea:	bf1a      	itte	ne
 80006ec:	4619      	movne	r1, r3
 80006ee:	4610      	movne	r0, r2
 80006f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006f4:	bf1c      	itt	ne
 80006f6:	460b      	movne	r3, r1
 80006f8:	4602      	movne	r2, r0
 80006fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006fe:	bf06      	itte	eq
 8000700:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000704:	ea91 0f03 	teqeq	r1, r3
 8000708:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800070c:	bd30      	pop	{r4, r5, pc}
 800070e:	bf00      	nop

08000710 <__aeabi_ui2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f04f 0500 	mov.w	r5, #0
 8000728:	f04f 0100 	mov.w	r1, #0
 800072c:	e750      	b.n	80005d0 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_i2d>:
 8000730:	f090 0f00 	teq	r0, #0
 8000734:	bf04      	itt	eq
 8000736:	2100      	moveq	r1, #0
 8000738:	4770      	bxeq	lr
 800073a:	b530      	push	{r4, r5, lr}
 800073c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000740:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000744:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000748:	bf48      	it	mi
 800074a:	4240      	negmi	r0, r0
 800074c:	f04f 0100 	mov.w	r1, #0
 8000750:	e73e      	b.n	80005d0 <__adddf3+0x138>
 8000752:	bf00      	nop

08000754 <__aeabi_f2d>:
 8000754:	0042      	lsls	r2, r0, #1
 8000756:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800075a:	ea4f 0131 	mov.w	r1, r1, rrx
 800075e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000762:	bf1f      	itttt	ne
 8000764:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000768:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800076c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000770:	4770      	bxne	lr
 8000772:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000776:	bf08      	it	eq
 8000778:	4770      	bxeq	lr
 800077a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800077e:	bf04      	itt	eq
 8000780:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000784:	4770      	bxeq	lr
 8000786:	b530      	push	{r4, r5, lr}
 8000788:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800078c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000790:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	e71c      	b.n	80005d0 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_ul2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f04f 0500 	mov.w	r5, #0
 80007a6:	e00a      	b.n	80007be <__aeabi_l2d+0x16>

080007a8 <__aeabi_l2d>:
 80007a8:	ea50 0201 	orrs.w	r2, r0, r1
 80007ac:	bf08      	it	eq
 80007ae:	4770      	bxeq	lr
 80007b0:	b530      	push	{r4, r5, lr}
 80007b2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007b6:	d502      	bpl.n	80007be <__aeabi_l2d+0x16>
 80007b8:	4240      	negs	r0, r0
 80007ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007be:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ca:	f43f aed8 	beq.w	800057e <__adddf3+0xe6>
 80007ce:	f04f 0203 	mov.w	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007de:	bf18      	it	ne
 80007e0:	3203      	addne	r2, #3
 80007e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007e6:	f1c2 0320 	rsb	r3, r2, #32
 80007ea:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ee:	fa20 f002 	lsr.w	r0, r0, r2
 80007f2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007f6:	ea40 000e 	orr.w	r0, r0, lr
 80007fa:	fa21 f102 	lsr.w	r1, r1, r2
 80007fe:	4414      	add	r4, r2
 8000800:	e6bd      	b.n	800057e <__adddf3+0xe6>
 8000802:	bf00      	nop

08000804 <__aeabi_d2f>:
 8000804:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000808:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800080c:	bf24      	itt	cs
 800080e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000812:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000816:	d90d      	bls.n	8000834 <__aeabi_d2f+0x30>
 8000818:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800081c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000820:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000824:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000828:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800082c:	bf08      	it	eq
 800082e:	f020 0001 	biceq.w	r0, r0, #1
 8000832:	4770      	bx	lr
 8000834:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000838:	d121      	bne.n	800087e <__aeabi_d2f+0x7a>
 800083a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800083e:	bfbc      	itt	lt
 8000840:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000844:	4770      	bxlt	lr
 8000846:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800084a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800084e:	f1c2 0218 	rsb	r2, r2, #24
 8000852:	f1c2 0c20 	rsb	ip, r2, #32
 8000856:	fa10 f30c 	lsls.w	r3, r0, ip
 800085a:	fa20 f002 	lsr.w	r0, r0, r2
 800085e:	bf18      	it	ne
 8000860:	f040 0001 	orrne.w	r0, r0, #1
 8000864:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000868:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800086c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000870:	ea40 000c 	orr.w	r0, r0, ip
 8000874:	fa23 f302 	lsr.w	r3, r3, r2
 8000878:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800087c:	e7cc      	b.n	8000818 <__aeabi_d2f+0x14>
 800087e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000882:	d107      	bne.n	8000894 <__aeabi_d2f+0x90>
 8000884:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000888:	bf1e      	ittt	ne
 800088a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800088e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000892:	4770      	bxne	lr
 8000894:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000898:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800089c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop

080008a4 <__aeabi_uldivmod>:
 80008a4:	b953      	cbnz	r3, 80008bc <__aeabi_uldivmod+0x18>
 80008a6:	b94a      	cbnz	r2, 80008bc <__aeabi_uldivmod+0x18>
 80008a8:	2900      	cmp	r1, #0
 80008aa:	bf08      	it	eq
 80008ac:	2800      	cmpeq	r0, #0
 80008ae:	bf1c      	itt	ne
 80008b0:	f04f 31ff 	movne.w	r1, #4294967295
 80008b4:	f04f 30ff 	movne.w	r0, #4294967295
 80008b8:	f000 b9b0 	b.w	8000c1c <__aeabi_idiv0>
 80008bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008c4:	f000 f806 	bl	80008d4 <__udivmoddi4>
 80008c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d0:	b004      	add	sp, #16
 80008d2:	4770      	bx	lr

080008d4 <__udivmoddi4>:
 80008d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008d8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80008da:	4688      	mov	r8, r1
 80008dc:	4604      	mov	r4, r0
 80008de:	468e      	mov	lr, r1
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d14a      	bne.n	800097a <__udivmoddi4+0xa6>
 80008e4:	428a      	cmp	r2, r1
 80008e6:	4617      	mov	r7, r2
 80008e8:	d95f      	bls.n	80009aa <__udivmoddi4+0xd6>
 80008ea:	fab2 f682 	clz	r6, r2
 80008ee:	b14e      	cbz	r6, 8000904 <__udivmoddi4+0x30>
 80008f0:	f1c6 0320 	rsb	r3, r6, #32
 80008f4:	fa01 fe06 	lsl.w	lr, r1, r6
 80008f8:	40b7      	lsls	r7, r6
 80008fa:	40b4      	lsls	r4, r6
 80008fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000900:	ea43 0e0e 	orr.w	lr, r3, lr
 8000904:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000908:	fa1f fc87 	uxth.w	ip, r7
 800090c:	0c23      	lsrs	r3, r4, #16
 800090e:	fbbe f1f8 	udiv	r1, lr, r8
 8000912:	fb08 ee11 	mls	lr, r8, r1, lr
 8000916:	fb01 f20c 	mul.w	r2, r1, ip
 800091a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800091e:	429a      	cmp	r2, r3
 8000920:	d907      	bls.n	8000932 <__udivmoddi4+0x5e>
 8000922:	18fb      	adds	r3, r7, r3
 8000924:	f101 30ff 	add.w	r0, r1, #4294967295
 8000928:	d202      	bcs.n	8000930 <__udivmoddi4+0x5c>
 800092a:	429a      	cmp	r2, r3
 800092c:	f200 8154 	bhi.w	8000bd8 <__udivmoddi4+0x304>
 8000930:	4601      	mov	r1, r0
 8000932:	1a9b      	subs	r3, r3, r2
 8000934:	b2a2      	uxth	r2, r4
 8000936:	fbb3 f0f8 	udiv	r0, r3, r8
 800093a:	fb08 3310 	mls	r3, r8, r0, r3
 800093e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000942:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000946:	4594      	cmp	ip, r2
 8000948:	d90b      	bls.n	8000962 <__udivmoddi4+0x8e>
 800094a:	18ba      	adds	r2, r7, r2
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000950:	bf2c      	ite	cs
 8000952:	2401      	movcs	r4, #1
 8000954:	2400      	movcc	r4, #0
 8000956:	4594      	cmp	ip, r2
 8000958:	d902      	bls.n	8000960 <__udivmoddi4+0x8c>
 800095a:	2c00      	cmp	r4, #0
 800095c:	f000 813f 	beq.w	8000bde <__udivmoddi4+0x30a>
 8000960:	4618      	mov	r0, r3
 8000962:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000966:	eba2 020c 	sub.w	r2, r2, ip
 800096a:	2100      	movs	r1, #0
 800096c:	b11d      	cbz	r5, 8000976 <__udivmoddi4+0xa2>
 800096e:	40f2      	lsrs	r2, r6
 8000970:	2300      	movs	r3, #0
 8000972:	e9c5 2300 	strd	r2, r3, [r5]
 8000976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800097a:	428b      	cmp	r3, r1
 800097c:	d905      	bls.n	800098a <__udivmoddi4+0xb6>
 800097e:	b10d      	cbz	r5, 8000984 <__udivmoddi4+0xb0>
 8000980:	e9c5 0100 	strd	r0, r1, [r5]
 8000984:	2100      	movs	r1, #0
 8000986:	4608      	mov	r0, r1
 8000988:	e7f5      	b.n	8000976 <__udivmoddi4+0xa2>
 800098a:	fab3 f183 	clz	r1, r3
 800098e:	2900      	cmp	r1, #0
 8000990:	d14e      	bne.n	8000a30 <__udivmoddi4+0x15c>
 8000992:	4543      	cmp	r3, r8
 8000994:	f0c0 8112 	bcc.w	8000bbc <__udivmoddi4+0x2e8>
 8000998:	4282      	cmp	r2, r0
 800099a:	f240 810f 	bls.w	8000bbc <__udivmoddi4+0x2e8>
 800099e:	4608      	mov	r0, r1
 80009a0:	2d00      	cmp	r5, #0
 80009a2:	d0e8      	beq.n	8000976 <__udivmoddi4+0xa2>
 80009a4:	e9c5 4e00 	strd	r4, lr, [r5]
 80009a8:	e7e5      	b.n	8000976 <__udivmoddi4+0xa2>
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	f000 80ac 	beq.w	8000b08 <__udivmoddi4+0x234>
 80009b0:	fab2 f682 	clz	r6, r2
 80009b4:	2e00      	cmp	r6, #0
 80009b6:	f040 80bb 	bne.w	8000b30 <__udivmoddi4+0x25c>
 80009ba:	1a8b      	subs	r3, r1, r2
 80009bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80009c0:	b2bc      	uxth	r4, r7
 80009c2:	2101      	movs	r1, #1
 80009c4:	0c02      	lsrs	r2, r0, #16
 80009c6:	b280      	uxth	r0, r0
 80009c8:	fbb3 fcfe 	udiv	ip, r3, lr
 80009cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80009d0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80009d4:	fb04 f20c 	mul.w	r2, r4, ip
 80009d8:	429a      	cmp	r2, r3
 80009da:	d90e      	bls.n	80009fa <__udivmoddi4+0x126>
 80009dc:	18fb      	adds	r3, r7, r3
 80009de:	f10c 38ff 	add.w	r8, ip, #4294967295
 80009e2:	bf2c      	ite	cs
 80009e4:	f04f 0901 	movcs.w	r9, #1
 80009e8:	f04f 0900 	movcc.w	r9, #0
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d903      	bls.n	80009f8 <__udivmoddi4+0x124>
 80009f0:	f1b9 0f00 	cmp.w	r9, #0
 80009f4:	f000 80ec 	beq.w	8000bd0 <__udivmoddi4+0x2fc>
 80009f8:	46c4      	mov	ip, r8
 80009fa:	1a9b      	subs	r3, r3, r2
 80009fc:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a00:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a04:	fb04 f408 	mul.w	r4, r4, r8
 8000a08:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000a0c:	4294      	cmp	r4, r2
 8000a0e:	d90b      	bls.n	8000a28 <__udivmoddi4+0x154>
 8000a10:	18ba      	adds	r2, r7, r2
 8000a12:	f108 33ff 	add.w	r3, r8, #4294967295
 8000a16:	bf2c      	ite	cs
 8000a18:	2001      	movcs	r0, #1
 8000a1a:	2000      	movcc	r0, #0
 8000a1c:	4294      	cmp	r4, r2
 8000a1e:	d902      	bls.n	8000a26 <__udivmoddi4+0x152>
 8000a20:	2800      	cmp	r0, #0
 8000a22:	f000 80d1 	beq.w	8000bc8 <__udivmoddi4+0x2f4>
 8000a26:	4698      	mov	r8, r3
 8000a28:	1b12      	subs	r2, r2, r4
 8000a2a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000a2e:	e79d      	b.n	800096c <__udivmoddi4+0x98>
 8000a30:	f1c1 0620 	rsb	r6, r1, #32
 8000a34:	408b      	lsls	r3, r1
 8000a36:	fa08 f401 	lsl.w	r4, r8, r1
 8000a3a:	fa00 f901 	lsl.w	r9, r0, r1
 8000a3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000a42:	fa28 f806 	lsr.w	r8, r8, r6
 8000a46:	408a      	lsls	r2, r1
 8000a48:	431f      	orrs	r7, r3
 8000a4a:	fa20 f306 	lsr.w	r3, r0, r6
 8000a4e:	0c38      	lsrs	r0, r7, #16
 8000a50:	4323      	orrs	r3, r4
 8000a52:	fa1f fc87 	uxth.w	ip, r7
 8000a56:	0c1c      	lsrs	r4, r3, #16
 8000a58:	fbb8 fef0 	udiv	lr, r8, r0
 8000a5c:	fb00 881e 	mls	r8, r0, lr, r8
 8000a60:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000a64:	fb0e f80c 	mul.w	r8, lr, ip
 8000a68:	45a0      	cmp	r8, r4
 8000a6a:	d90e      	bls.n	8000a8a <__udivmoddi4+0x1b6>
 8000a6c:	193c      	adds	r4, r7, r4
 8000a6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a72:	bf2c      	ite	cs
 8000a74:	f04f 0b01 	movcs.w	fp, #1
 8000a78:	f04f 0b00 	movcc.w	fp, #0
 8000a7c:	45a0      	cmp	r8, r4
 8000a7e:	d903      	bls.n	8000a88 <__udivmoddi4+0x1b4>
 8000a80:	f1bb 0f00 	cmp.w	fp, #0
 8000a84:	f000 80b8 	beq.w	8000bf8 <__udivmoddi4+0x324>
 8000a88:	46d6      	mov	lr, sl
 8000a8a:	eba4 0408 	sub.w	r4, r4, r8
 8000a8e:	fa1f f883 	uxth.w	r8, r3
 8000a92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a96:	fb00 4413 	mls	r4, r0, r3, r4
 8000a9a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a9e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000aa2:	45a4      	cmp	ip, r4
 8000aa4:	d90e      	bls.n	8000ac4 <__udivmoddi4+0x1f0>
 8000aa6:	193c      	adds	r4, r7, r4
 8000aa8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000aac:	bf2c      	ite	cs
 8000aae:	f04f 0801 	movcs.w	r8, #1
 8000ab2:	f04f 0800 	movcc.w	r8, #0
 8000ab6:	45a4      	cmp	ip, r4
 8000ab8:	d903      	bls.n	8000ac2 <__udivmoddi4+0x1ee>
 8000aba:	f1b8 0f00 	cmp.w	r8, #0
 8000abe:	f000 809f 	beq.w	8000c00 <__udivmoddi4+0x32c>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ac8:	eba4 040c 	sub.w	r4, r4, ip
 8000acc:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ad0:	4564      	cmp	r4, ip
 8000ad2:	4673      	mov	r3, lr
 8000ad4:	46e0      	mov	r8, ip
 8000ad6:	d302      	bcc.n	8000ade <__udivmoddi4+0x20a>
 8000ad8:	d107      	bne.n	8000aea <__udivmoddi4+0x216>
 8000ada:	45f1      	cmp	r9, lr
 8000adc:	d205      	bcs.n	8000aea <__udivmoddi4+0x216>
 8000ade:	ebbe 0302 	subs.w	r3, lr, r2
 8000ae2:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ae6:	3801      	subs	r0, #1
 8000ae8:	46e0      	mov	r8, ip
 8000aea:	b15d      	cbz	r5, 8000b04 <__udivmoddi4+0x230>
 8000aec:	ebb9 0203 	subs.w	r2, r9, r3
 8000af0:	eb64 0408 	sbc.w	r4, r4, r8
 8000af4:	fa04 f606 	lsl.w	r6, r4, r6
 8000af8:	fa22 f301 	lsr.w	r3, r2, r1
 8000afc:	40cc      	lsrs	r4, r1
 8000afe:	431e      	orrs	r6, r3
 8000b00:	e9c5 6400 	strd	r6, r4, [r5]
 8000b04:	2100      	movs	r1, #0
 8000b06:	e736      	b.n	8000976 <__udivmoddi4+0xa2>
 8000b08:	fbb1 fcf2 	udiv	ip, r1, r2
 8000b0c:	0c01      	lsrs	r1, r0, #16
 8000b0e:	4614      	mov	r4, r2
 8000b10:	b280      	uxth	r0, r0
 8000b12:	4696      	mov	lr, r2
 8000b14:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000b18:	2620      	movs	r6, #32
 8000b1a:	4690      	mov	r8, r2
 8000b1c:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000b20:	4610      	mov	r0, r2
 8000b22:	fbb1 f1f2 	udiv	r1, r1, r2
 8000b26:	eba3 0308 	sub.w	r3, r3, r8
 8000b2a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000b2e:	e74b      	b.n	80009c8 <__udivmoddi4+0xf4>
 8000b30:	40b7      	lsls	r7, r6
 8000b32:	f1c6 0320 	rsb	r3, r6, #32
 8000b36:	fa01 f206 	lsl.w	r2, r1, r6
 8000b3a:	fa21 f803 	lsr.w	r8, r1, r3
 8000b3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b42:	fa20 f303 	lsr.w	r3, r0, r3
 8000b46:	b2bc      	uxth	r4, r7
 8000b48:	40b0      	lsls	r0, r6
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	0c02      	lsrs	r2, r0, #16
 8000b4e:	0c19      	lsrs	r1, r3, #16
 8000b50:	b280      	uxth	r0, r0
 8000b52:	fbb8 f9fe 	udiv	r9, r8, lr
 8000b56:	fb0e 8819 	mls	r8, lr, r9, r8
 8000b5a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000b5e:	fb09 f804 	mul.w	r8, r9, r4
 8000b62:	4588      	cmp	r8, r1
 8000b64:	d951      	bls.n	8000c0a <__udivmoddi4+0x336>
 8000b66:	1879      	adds	r1, r7, r1
 8000b68:	f109 3cff 	add.w	ip, r9, #4294967295
 8000b6c:	bf2c      	ite	cs
 8000b6e:	f04f 0a01 	movcs.w	sl, #1
 8000b72:	f04f 0a00 	movcc.w	sl, #0
 8000b76:	4588      	cmp	r8, r1
 8000b78:	d902      	bls.n	8000b80 <__udivmoddi4+0x2ac>
 8000b7a:	f1ba 0f00 	cmp.w	sl, #0
 8000b7e:	d031      	beq.n	8000be4 <__udivmoddi4+0x310>
 8000b80:	eba1 0108 	sub.w	r1, r1, r8
 8000b84:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b88:	fb09 f804 	mul.w	r8, r9, r4
 8000b8c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b96:	4543      	cmp	r3, r8
 8000b98:	d235      	bcs.n	8000c06 <__udivmoddi4+0x332>
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ba0:	bf2c      	ite	cs
 8000ba2:	f04f 0a01 	movcs.w	sl, #1
 8000ba6:	f04f 0a00 	movcc.w	sl, #0
 8000baa:	4543      	cmp	r3, r8
 8000bac:	d2bb      	bcs.n	8000b26 <__udivmoddi4+0x252>
 8000bae:	f1ba 0f00 	cmp.w	sl, #0
 8000bb2:	d1b8      	bne.n	8000b26 <__udivmoddi4+0x252>
 8000bb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000bb8:	443b      	add	r3, r7
 8000bba:	e7b4      	b.n	8000b26 <__udivmoddi4+0x252>
 8000bbc:	1a84      	subs	r4, r0, r2
 8000bbe:	eb68 0203 	sbc.w	r2, r8, r3
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	4696      	mov	lr, r2
 8000bc6:	e6eb      	b.n	80009a0 <__udivmoddi4+0xcc>
 8000bc8:	443a      	add	r2, r7
 8000bca:	f1a8 0802 	sub.w	r8, r8, #2
 8000bce:	e72b      	b.n	8000a28 <__udivmoddi4+0x154>
 8000bd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bd4:	443b      	add	r3, r7
 8000bd6:	e710      	b.n	80009fa <__udivmoddi4+0x126>
 8000bd8:	3902      	subs	r1, #2
 8000bda:	443b      	add	r3, r7
 8000bdc:	e6a9      	b.n	8000932 <__udivmoddi4+0x5e>
 8000bde:	443a      	add	r2, r7
 8000be0:	3802      	subs	r0, #2
 8000be2:	e6be      	b.n	8000962 <__udivmoddi4+0x8e>
 8000be4:	eba7 0808 	sub.w	r8, r7, r8
 8000be8:	f1a9 0c02 	sub.w	ip, r9, #2
 8000bec:	4441      	add	r1, r8
 8000bee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bf2:	fb09 f804 	mul.w	r8, r9, r4
 8000bf6:	e7c9      	b.n	8000b8c <__udivmoddi4+0x2b8>
 8000bf8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bfc:	443c      	add	r4, r7
 8000bfe:	e744      	b.n	8000a8a <__udivmoddi4+0x1b6>
 8000c00:	3b02      	subs	r3, #2
 8000c02:	443c      	add	r4, r7
 8000c04:	e75e      	b.n	8000ac4 <__udivmoddi4+0x1f0>
 8000c06:	4649      	mov	r1, r9
 8000c08:	e78d      	b.n	8000b26 <__udivmoddi4+0x252>
 8000c0a:	eba1 0108 	sub.w	r1, r1, r8
 8000c0e:	46cc      	mov	ip, r9
 8000c10:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c14:	fb09 f804 	mul.w	r8, r9, r4
 8000c18:	e7b8      	b.n	8000b8c <__udivmoddi4+0x2b8>
 8000c1a:	bf00      	nop

08000c1c <__aeabi_idiv0>:
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c26:	f001 fcca 	bl	80025be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c2a:	f000 f813 	bl	8000c54 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2e:	f000 f919 	bl	8000e64 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000c32:	f000 f8ed 	bl	8000e10 <_ZL11MX_DMA_Initv>
  MX_ICACHE_Init();
 8000c36:	f000 f86d 	bl	8000d14 <_ZL14MX_ICACHE_Initv>
  MX_USART2_UART_Init();
 8000c3a:	f000 f889 	bl	8000d50 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  int initSuccess = gps->init();
 8000c3e:	4b04      	ldr	r3, [pc, #16]	@ (8000c50 <main+0x30>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 fc7a 	bl	800153c <_ZN3GPS4initEv>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <main+0x2c>
 8000c50:	20000174 	.word	0x20000174

08000c54 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b098      	sub	sp, #96	@ 0x60
 8000c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5a:	f107 0318 	add.w	r3, r7, #24
 8000c5e:	2248      	movs	r2, #72	@ 0x48
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f005 fac2 	bl	80061ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000c76:	2000      	movs	r0, #0
 8000c78:	f002 fb16 	bl	80032a8 <HAL_PWREx_ControlVoltageScaling>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	bf14      	ite	ne
 8000c82:	2301      	movne	r3, #1
 8000c84:	2300      	moveq	r3, #0
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8000c8c:	f000 f9e2 	bl	8001054 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c90:	2310      	movs	r3, #16
 8000c92:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c94:	2301      	movs	r3, #1
 8000c96:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c9c:	2360      	movs	r3, #96	@ 0x60
 8000c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000cac:	2337      	movs	r3, #55	@ 0x37
 8000cae:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cb0:	2307      	movs	r3, #7
 8000cb2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbc:	f107 0318 	add.w	r3, r7, #24
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f002 fb91 	bl	80033e8 <HAL_RCC_OscConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	bf14      	ite	ne
 8000ccc:	2301      	movne	r3, #1
 8000cce:	2300      	moveq	r3, #0
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8000cd6:	f000 f9bd 	bl	8001054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cda:	230f      	movs	r3, #15
 8000cdc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2105      	movs	r1, #5
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f003 f84e 	bl	8003d94 <HAL_RCC_ClockConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	bf14      	ite	ne
 8000cfe:	2301      	movne	r3, #1
 8000d00:	2300      	moveq	r3, #0
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8000d08:	f000 f9a4 	bl	8001054 <Error_Handler>
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	3760      	adds	r7, #96	@ 0x60
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f002 fa87 	bl	800322c <HAL_ICACHE_ConfigAssociativityMode>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	bf14      	ite	ne
 8000d24:	2301      	movne	r3, #1
 8000d26:	2300      	moveq	r3, #0
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <_ZL14MX_ICACHE_Initv+0x1e>
  {
    Error_Handler();
 8000d2e:	f000 f991 	bl	8001054 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000d32:	f002 fa9b 	bl	800326c <HAL_ICACHE_Enable>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	bf14      	ite	ne
 8000d3c:	2301      	movne	r3, #1
 8000d3e:	2300      	moveq	r3, #0
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <_ZL14MX_ICACHE_Initv+0x36>
  {
    Error_Handler();
 8000d46:	f000 f985 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d54:	4b2c      	ldr	r3, [pc, #176]	@ (8000e08 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000d56:	4a2d      	ldr	r2, [pc, #180]	@ (8000e0c <_ZL19MX_USART2_UART_Initv+0xbc>)
 8000d58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d5a:	4b2b      	ldr	r3, [pc, #172]	@ (8000e08 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000d5c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	4b29      	ldr	r3, [pc, #164]	@ (8000e08 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d68:	4b27      	ldr	r3, [pc, #156]	@ (8000e08 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d6e:	4b26      	ldr	r3, [pc, #152]	@ (8000e08 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d74:	4b24      	ldr	r3, [pc, #144]	@ (8000e08 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7a:	4b23      	ldr	r3, [pc, #140]	@ (8000e08 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d80:	4b21      	ldr	r3, [pc, #132]	@ (8000e08 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d86:	4b20      	ldr	r3, [pc, #128]	@ (8000e08 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e08 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d92:	4b1d      	ldr	r3, [pc, #116]	@ (8000e08 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d98:	481b      	ldr	r0, [pc, #108]	@ (8000e08 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000d9a:	f003 fff5 	bl	8004d88 <HAL_UART_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	bf14      	ite	ne
 8000da4:	2301      	movne	r3, #1
 8000da6:	2300      	moveq	r3, #0
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8000dae:	f000 f951 	bl	8001054 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db2:	2100      	movs	r1, #0
 8000db4:	4814      	ldr	r0, [pc, #80]	@ (8000e08 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000db6:	f005 f818 	bl	8005dea <HAL_UARTEx_SetTxFifoThreshold>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	bf14      	ite	ne
 8000dc0:	2301      	movne	r3, #1
 8000dc2:	2300      	moveq	r3, #0
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8000dca:	f000 f943 	bl	8001054 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dce:	2100      	movs	r1, #0
 8000dd0:	480d      	ldr	r0, [pc, #52]	@ (8000e08 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000dd2:	f005 f848 	bl	8005e66 <HAL_UARTEx_SetRxFifoThreshold>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	bf14      	ite	ne
 8000ddc:	2301      	movne	r3, #1
 8000dde:	2300      	moveq	r3, #0
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8000de6:	f000 f935 	bl	8001054 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000dea:	4807      	ldr	r0, [pc, #28]	@ (8000e08 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000dec:	f004 ffc4 	bl	8005d78 <HAL_UARTEx_DisableFifoMode>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	bf14      	ite	ne
 8000df6:	2301      	movne	r3, #1
 8000df8:	2300      	moveq	r3, #0
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8000e00:	f000 f928 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000078 	.word	0x20000078
 8000e0c:	40004400 	.word	0x40004400

08000e10 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e16:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <_ZL11MX_DMA_Initv+0x50>)
 8000e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e1a:	4a11      	ldr	r2, [pc, #68]	@ (8000e60 <_ZL11MX_DMA_Initv+0x50>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e22:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <_ZL11MX_DMA_Initv+0x50>)
 8000e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <_ZL11MX_DMA_Initv+0x50>)
 8000e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e32:	4a0b      	ldr	r2, [pc, #44]	@ (8000e60 <_ZL11MX_DMA_Initv+0x50>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <_ZL11MX_DMA_Initv+0x50>)
 8000e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	201d      	movs	r0, #29
 8000e4c:	f001 fd2d 	bl	80028aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e50:	201d      	movs	r0, #29
 8000e52:	f001 fd44 	bl	80028de <HAL_NVIC_EnableIRQ>

}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000

08000e64 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	@ 0x28
 8000e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7a:	4b63      	ldr	r3, [pc, #396]	@ (8001008 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7e:	4a62      	ldr	r2, [pc, #392]	@ (8001008 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000e80:	f043 0304 	orr.w	r3, r3, #4
 8000e84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e86:	4b60      	ldr	r3, [pc, #384]	@ (8001008 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	4b5d      	ldr	r3, [pc, #372]	@ (8001008 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e96:	4a5c      	ldr	r2, [pc, #368]	@ (8001008 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9e:	4b5a      	ldr	r3, [pc, #360]	@ (8001008 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	4b57      	ldr	r3, [pc, #348]	@ (8001008 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	4a56      	ldr	r2, [pc, #344]	@ (8001008 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb6:	4b54      	ldr	r3, [pc, #336]	@ (8001008 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ec2:	4b51      	ldr	r3, [pc, #324]	@ (8001008 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	4a50      	ldr	r2, [pc, #320]	@ (8001008 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000ec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ece:	4b4e      	ldr	r3, [pc, #312]	@ (8001008 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000eda:	f002 fa41 	bl	8003360 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2180      	movs	r1, #128	@ 0x80
 8000ee2:	484a      	ldr	r0, [pc, #296]	@ (800100c <_ZL12MX_GPIO_Initv+0x1a8>)
 8000ee4:	f002 f98a 	bl	80031fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eee:	4848      	ldr	r0, [pc, #288]	@ (8001010 <_ZL12MX_GPIO_Initv+0x1ac>)
 8000ef0:	f002 f984 	bl	80031fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	21a0      	movs	r1, #160	@ 0xa0
 8000ef8:	4846      	ldr	r0, [pc, #280]	@ (8001014 <_ZL12MX_GPIO_Initv+0x1b0>)
 8000efa:	f002 f97f 	bl	80031fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000efe:	2304      	movs	r3, #4
 8000f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f02:	2303      	movs	r3, #3
 8000f04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	483e      	ldr	r0, [pc, #248]	@ (800100c <_ZL12MX_GPIO_Initv+0x1a8>)
 8000f12:	f001 fff3 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000f16:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f1c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4839      	ldr	r0, [pc, #228]	@ (8001014 <_ZL12MX_GPIO_Initv+0x1b0>)
 8000f2e:	f001 ffe5 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	4833      	ldr	r0, [pc, #204]	@ (8001014 <_ZL12MX_GPIO_Initv+0x1b0>)
 8000f48:	f001 ffd8 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000f4c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000f5e:	2308      	movs	r3, #8
 8000f60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	482b      	ldr	r0, [pc, #172]	@ (8001018 <_ZL12MX_GPIO_Initv+0x1b4>)
 8000f6a:	f001 ffc7 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000f6e:	2380      	movs	r3, #128	@ 0x80
 8000f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	4821      	ldr	r0, [pc, #132]	@ (800100c <_ZL12MX_GPIO_Initv+0x1a8>)
 8000f86:	f001 ffb9 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000f8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	481b      	ldr	r0, [pc, #108]	@ (8001010 <_ZL12MX_GPIO_Initv+0x1ac>)
 8000fa4:	f001 ffaa 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fa8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000fba:	230a      	movs	r3, #10
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4812      	ldr	r0, [pc, #72]	@ (8001010 <_ZL12MX_GPIO_Initv+0x1ac>)
 8000fc6:	f001 ff99 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480c      	ldr	r0, [pc, #48]	@ (8001010 <_ZL12MX_GPIO_Initv+0x1ac>)
 8000fe0:	f001 ff8c 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8000fe4:	23a0      	movs	r3, #160	@ 0xa0
 8000fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4806      	ldr	r0, [pc, #24]	@ (8001014 <_ZL12MX_GPIO_Initv+0x1b0>)
 8000ffc:	f001 ff7e 	bl	8002efc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001000:	bf00      	nop
 8001002:	3728      	adds	r7, #40	@ 0x28
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40021000 	.word	0x40021000
 800100c:	42020800 	.word	0x42020800
 8001010:	42020000 	.word	0x42020000
 8001014:	42020400 	.word	0x42020400
 8001018:	42021800 	.word	0x42021800

0800101c <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

extern "C" {
	void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	807b      	strh	r3, [r7, #2]
		int success = -1;
 8001028:	f04f 33ff 	mov.w	r3, #4294967295
 800102c:	60fb      	str	r3, [r7, #12]
		if (&huart2 == huart) {
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a06      	ldr	r2, [pc, #24]	@ (800104c <HAL_UARTEx_RxEventCallback+0x30>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d106      	bne.n	8001044 <HAL_UARTEx_RxEventCallback+0x28>
			success = gps->processGPSData();
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <HAL_UARTEx_RxEventCallback+0x34>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fb79 	bl	8001732 <_ZN3GPS14processGPSDataEv>
 8001040:	4603      	mov	r3, r0
 8001042:	60fb      	str	r3, [r7, #12]
		}
	}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000078 	.word	0x20000078
 8001050:	20000174 	.word	0x20000174

08001054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001058:	b672      	cpsid	i
}
 800105a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <Error_Handler+0x8>

08001060 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001060:	b598      	push	{r3, r4, r7, lr}
 8001062:	af00      	add	r7, sp, #0
GPS* gps = new GPS (&huart2);
 8001064:	f44f 703e 	mov.w	r0, #760	@ 0x2f8
 8001068:	f004 ffe0 	bl	800602c <_Znwj>
 800106c:	4603      	mov	r3, r0
 800106e:	461c      	mov	r4, r3
 8001070:	4903      	ldr	r1, [pc, #12]	@ (8001080 <_Z41__static_initialization_and_destruction_0v+0x20>)
 8001072:	4620      	mov	r0, r4
 8001074:	f000 fa4a 	bl	800150c <_ZN3GPSC1EP20__UART_HandleTypeDef>
 8001078:	4b02      	ldr	r3, [pc, #8]	@ (8001084 <_Z41__static_initialization_and_destruction_0v+0x24>)
 800107a:	601c      	str	r4, [r3, #0]
}
 800107c:	bf00      	nop
 800107e:	bd98      	pop	{r3, r4, r7, pc}
 8001080:	20000078 	.word	0x20000078
 8001084:	20000174 	.word	0x20000174

08001088 <_GLOBAL__sub_I_huart2>:
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
 800108c:	f7ff ffe8 	bl	8001060 <_Z41__static_initialization_and_destruction_0v>
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <HAL_MspInit+0x44>)
 800109c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800109e:	4a0e      	ldr	r2, [pc, #56]	@ (80010d8 <HAL_MspInit+0x44>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80010a6:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <HAL_MspInit+0x44>)
 80010a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <HAL_MspInit+0x44>)
 80010b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b6:	4a08      	ldr	r2, [pc, #32]	@ (80010d8 <HAL_MspInit+0x44>)
 80010b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80010be:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <HAL_MspInit+0x44>)
 80010c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010ca:	f002 f959 	bl	8003380 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000

080010dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b0ae      	sub	sp, #184	@ 0xb8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	2294      	movs	r2, #148	@ 0x94
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f005 f875 	bl	80061ec <memset>
  if(huart->Instance==USART2)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a3a      	ldr	r2, [pc, #232]	@ (80011f0 <HAL_UART_MspInit+0x114>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d16d      	bne.n	80011e8 <HAL_UART_MspInit+0x10c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800110c:	2302      	movs	r3, #2
 800110e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001110:	2300      	movs	r3, #0
 8001112:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	4618      	mov	r0, r3
 800111a:	f003 f91f 	bl	800435c <HAL_RCCEx_PeriphCLKConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001124:	f7ff ff96 	bl	8001054 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001128:	4b32      	ldr	r3, [pc, #200]	@ (80011f4 <HAL_UART_MspInit+0x118>)
 800112a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112c:	4a31      	ldr	r2, [pc, #196]	@ (80011f4 <HAL_UART_MspInit+0x118>)
 800112e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001132:	6593      	str	r3, [r2, #88]	@ 0x58
 8001134:	4b2f      	ldr	r3, [pc, #188]	@ (80011f4 <HAL_UART_MspInit+0x118>)
 8001136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	4b2c      	ldr	r3, [pc, #176]	@ (80011f4 <HAL_UART_MspInit+0x118>)
 8001142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001144:	4a2b      	ldr	r2, [pc, #172]	@ (80011f4 <HAL_UART_MspInit+0x118>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114c:	4b29      	ldr	r3, [pc, #164]	@ (80011f4 <HAL_UART_MspInit+0x118>)
 800114e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001158:	230c      	movs	r3, #12
 800115a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001170:	2307      	movs	r3, #7
 8001172:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800117a:	4619      	mov	r1, r3
 800117c:	481e      	ldr	r0, [pc, #120]	@ (80011f8 <HAL_UART_MspInit+0x11c>)
 800117e:	f001 febd 	bl	8002efc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8001182:	4b1e      	ldr	r3, [pc, #120]	@ (80011fc <HAL_UART_MspInit+0x120>)
 8001184:	4a1e      	ldr	r2, [pc, #120]	@ (8001200 <HAL_UART_MspInit+0x124>)
 8001186:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001188:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <HAL_UART_MspInit+0x120>)
 800118a:	221b      	movs	r2, #27
 800118c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800118e:	4b1b      	ldr	r3, [pc, #108]	@ (80011fc <HAL_UART_MspInit+0x120>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001194:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <HAL_UART_MspInit+0x120>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800119a:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <HAL_UART_MspInit+0x120>)
 800119c:	2280      	movs	r2, #128	@ 0x80
 800119e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011a0:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <HAL_UART_MspInit+0x120>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <HAL_UART_MspInit+0x120>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80011ac:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <HAL_UART_MspInit+0x120>)
 80011ae:	2220      	movs	r2, #32
 80011b0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011b2:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <HAL_UART_MspInit+0x120>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80011b8:	4810      	ldr	r0, [pc, #64]	@ (80011fc <HAL_UART_MspInit+0x120>)
 80011ba:	f001 fbab 	bl	8002914 <HAL_DMA_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 80011c4:	f7ff ff46 	bl	8001054 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80011c8:	2110      	movs	r1, #16
 80011ca:	480c      	ldr	r0, [pc, #48]	@ (80011fc <HAL_UART_MspInit+0x120>)
 80011cc:	f001 fdc5 	bl	8002d5a <HAL_DMA_ConfigChannelAttributes>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 80011d6:	f7ff ff3d 	bl	8001054 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a07      	ldr	r2, [pc, #28]	@ (80011fc <HAL_UART_MspInit+0x120>)
 80011de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80011e2:	4a06      	ldr	r2, [pc, #24]	@ (80011fc <HAL_UART_MspInit+0x120>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80011e8:	bf00      	nop
 80011ea:	37b8      	adds	r7, #184	@ 0xb8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40004400 	.word	0x40004400
 80011f4:	40021000 	.word	0x40021000
 80011f8:	42020000 	.word	0x42020000
 80011fc:	2000010c 	.word	0x2000010c
 8001200:	40020008 	.word	0x40020008

08001204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <NMI_Handler+0x4>

0800120c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <HardFault_Handler+0x4>

08001214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <MemManage_Handler+0x4>

0800121c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <UsageFault_Handler+0x4>

0800122c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125a:	f001 fa07 	bl	800266c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001268:	4802      	ldr	r0, [pc, #8]	@ (8001274 <DMA1_Channel1_IRQHandler+0x10>)
 800126a:	f001 fc76 	bl	8002b5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000010c 	.word	0x2000010c

08001278 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return 1;
 800127c:	2301      	movs	r3, #1
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <_kill>:

int _kill(int pid, int sig)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001292:	f005 f807 	bl	80062a4 <__errno>
 8001296:	4603      	mov	r3, r0
 8001298:	2216      	movs	r2, #22
 800129a:	601a      	str	r2, [r3, #0]
  return -1;
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <_exit>:

void _exit (int status)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012b0:	f04f 31ff 	mov.w	r1, #4294967295
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ffe7 	bl	8001288 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012ba:	bf00      	nop
 80012bc:	e7fd      	b.n	80012ba <_exit+0x12>
	...

080012c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c8:	4a14      	ldr	r2, [pc, #80]	@ (800131c <_sbrk+0x5c>)
 80012ca:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <_sbrk+0x60>)
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d4:	4b13      	ldr	r3, [pc, #76]	@ (8001324 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012dc:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <_sbrk+0x64>)
 80012de:	4a12      	ldr	r2, [pc, #72]	@ (8001328 <_sbrk+0x68>)
 80012e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012e2:	4b10      	ldr	r3, [pc, #64]	@ (8001324 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d207      	bcs.n	8001300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f0:	f004 ffd8 	bl	80062a4 <__errno>
 80012f4:	4603      	mov	r3, r0
 80012f6:	220c      	movs	r2, #12
 80012f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	e009      	b.n	8001314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001300:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <_sbrk+0x64>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001306:	4b07      	ldr	r3, [pc, #28]	@ (8001324 <_sbrk+0x64>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	4a05      	ldr	r2, [pc, #20]	@ (8001324 <_sbrk+0x64>)
 8001310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20030000 	.word	0x20030000
 8001320:	00000400 	.word	0x00000400
 8001324:	20000178 	.word	0x20000178
 8001328:	200002d0 	.word	0x200002d0

0800132c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <SystemInit+0x20>)
 8001332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001336:	4a05      	ldr	r2, [pc, #20]	@ (800134c <SystemInit+0x20>)
 8001338:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800133c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001350:	b480      	push	{r7}
 8001352:	b087      	sub	sp, #28
 8001354:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001356:	4b4f      	ldr	r3, [pc, #316]	@ (8001494 <SystemCoreClockUpdate+0x144>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	2b00      	cmp	r3, #0
 8001360:	d107      	bne.n	8001372 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001362:	4b4c      	ldr	r3, [pc, #304]	@ (8001494 <SystemCoreClockUpdate+0x144>)
 8001364:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001368:	0a1b      	lsrs	r3, r3, #8
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	e005      	b.n	800137e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001372:	4b48      	ldr	r3, [pc, #288]	@ (8001494 <SystemCoreClockUpdate+0x144>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	091b      	lsrs	r3, r3, #4
 8001378:	f003 030f 	and.w	r3, r3, #15
 800137c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800137e:	4a46      	ldr	r2, [pc, #280]	@ (8001498 <SystemCoreClockUpdate+0x148>)
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001386:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001388:	4b42      	ldr	r3, [pc, #264]	@ (8001494 <SystemCoreClockUpdate+0x144>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 030c 	and.w	r3, r3, #12
 8001390:	2b0c      	cmp	r3, #12
 8001392:	d866      	bhi.n	8001462 <SystemCoreClockUpdate+0x112>
 8001394:	a201      	add	r2, pc, #4	@ (adr r2, 800139c <SystemCoreClockUpdate+0x4c>)
 8001396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139a:	bf00      	nop
 800139c:	080013d1 	.word	0x080013d1
 80013a0:	08001463 	.word	0x08001463
 80013a4:	08001463 	.word	0x08001463
 80013a8:	08001463 	.word	0x08001463
 80013ac:	080013d9 	.word	0x080013d9
 80013b0:	08001463 	.word	0x08001463
 80013b4:	08001463 	.word	0x08001463
 80013b8:	08001463 	.word	0x08001463
 80013bc:	080013e1 	.word	0x080013e1
 80013c0:	08001463 	.word	0x08001463
 80013c4:	08001463 	.word	0x08001463
 80013c8:	08001463 	.word	0x08001463
 80013cc:	080013e9 	.word	0x080013e9
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80013d0:	4a32      	ldr	r2, [pc, #200]	@ (800149c <SystemCoreClockUpdate+0x14c>)
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	6013      	str	r3, [r2, #0]
      break;
 80013d6:	e048      	b.n	800146a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80013d8:	4b30      	ldr	r3, [pc, #192]	@ (800149c <SystemCoreClockUpdate+0x14c>)
 80013da:	4a31      	ldr	r2, [pc, #196]	@ (80014a0 <SystemCoreClockUpdate+0x150>)
 80013dc:	601a      	str	r2, [r3, #0]
      break;
 80013de:	e044      	b.n	800146a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80013e0:	4b2e      	ldr	r3, [pc, #184]	@ (800149c <SystemCoreClockUpdate+0x14c>)
 80013e2:	4a30      	ldr	r2, [pc, #192]	@ (80014a4 <SystemCoreClockUpdate+0x154>)
 80013e4:	601a      	str	r2, [r3, #0]
      break;
 80013e6:	e040      	b.n	800146a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80013e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001494 <SystemCoreClockUpdate+0x144>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80013f2:	4b28      	ldr	r3, [pc, #160]	@ (8001494 <SystemCoreClockUpdate+0x144>)
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	f003 030f 	and.w	r3, r3, #15
 80013fc:	3301      	adds	r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d003      	beq.n	800140e <SystemCoreClockUpdate+0xbe>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2b03      	cmp	r3, #3
 800140a:	d006      	beq.n	800141a <SystemCoreClockUpdate+0xca>
 800140c:	e00b      	b.n	8001426 <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800140e:	4a24      	ldr	r2, [pc, #144]	@ (80014a0 <SystemCoreClockUpdate+0x150>)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	fbb2 f3f3 	udiv	r3, r2, r3
 8001416:	613b      	str	r3, [r7, #16]
          break;
 8001418:	e00b      	b.n	8001432 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800141a:	4a22      	ldr	r2, [pc, #136]	@ (80014a4 <SystemCoreClockUpdate+0x154>)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001422:	613b      	str	r3, [r7, #16]
          break;
 8001424:	e005      	b.n	8001432 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	613b      	str	r3, [r7, #16]
          break;
 8001430:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001432:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <SystemCoreClockUpdate+0x144>)
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	0a1b      	lsrs	r3, r3, #8
 8001438:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	fb02 f303 	mul.w	r3, r2, r3
 8001442:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001444:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <SystemCoreClockUpdate+0x144>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	0e5b      	lsrs	r3, r3, #25
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	3301      	adds	r3, #1
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	fbb2 f3f3 	udiv	r3, r2, r3
 800145c:	4a0f      	ldr	r2, [pc, #60]	@ (800149c <SystemCoreClockUpdate+0x14c>)
 800145e:	6013      	str	r3, [r2, #0]
      break;
 8001460:	e003      	b.n	800146a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001462:	4a0e      	ldr	r2, [pc, #56]	@ (800149c <SystemCoreClockUpdate+0x14c>)
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	6013      	str	r3, [r2, #0]
      break;
 8001468:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800146a:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <SystemCoreClockUpdate+0x144>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	091b      	lsrs	r3, r3, #4
 8001470:	f003 030f 	and.w	r3, r3, #15
 8001474:	4a0c      	ldr	r2, [pc, #48]	@ (80014a8 <SystemCoreClockUpdate+0x158>)
 8001476:	5cd3      	ldrb	r3, [r2, r3]
 8001478:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800147a:	4b08      	ldr	r3, [pc, #32]	@ (800149c <SystemCoreClockUpdate+0x14c>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	fa22 f303 	lsr.w	r3, r2, r3
 8001484:	4a05      	ldr	r2, [pc, #20]	@ (800149c <SystemCoreClockUpdate+0x14c>)
 8001486:	6013      	str	r3, [r2, #0]
}
 8001488:	bf00      	nop
 800148a:	371c      	adds	r7, #28
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	40021000 	.word	0x40021000
 8001498:	080063c0 	.word	0x080063c0
 800149c:	20000000 	.word	0x20000000
 80014a0:	00f42400 	.word	0x00f42400
 80014a4:	007a1200 	.word	0x007a1200
 80014a8:	080063a8 	.word	0x080063a8

080014ac <_ZN4IGPSC1Ev>:
//#endif


class IGPS {
protected:
	IGPS() = default;
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	4a04      	ldr	r2, [pc, #16]	@ (80014c8 <_ZN4IGPSC1Ev+0x1c>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	0800641c 	.word	0x0800641c

080014cc <_ZN4IGPSD1Ev>:

public:
	virtual ~IGPS() = default;
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <_ZN4IGPSD1Ev+0x1c>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4618      	mov	r0, r3
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	0800641c 	.word	0x0800641c

080014ec <_ZN4IGPSD0Ev>:
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ffe9 	bl	80014cc <_ZN4IGPSD1Ev>
 80014fa:	2104      	movs	r1, #4
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f004 fd93 	bl	8006028 <_ZdlPvj>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <_ZN3GPSC1EP20__UART_HandleTypeDef>:
#include "stm32l5xx_hal.h"

#include "zp_d_gps.hpp"

GPS::GPS(UART_HandleTypeDef* huart) : huart(huart) {}
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ffc7 	bl	80014ac <_ZN4IGPSC1Ev>
 800151e:	4a06      	ldr	r2, [pc, #24]	@ (8001538 <_ZN3GPSC1EP20__UART_HandleTypeDef+0x2c>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	f8c3 22f4 	str.w	r2, [r3, #756]	@ 0x2f4
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	08006408 	.word	0x08006408

0800153c <_ZN3GPS4initEv>:

bool GPS::init() {
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef success = HAL_UARTEx_ReceiveToIdle_DMA(
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f8d3 02f4 	ldr.w	r0, [r3, #756]	@ 0x2f4
		huart,
		rxBuffer,
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3364      	adds	r3, #100	@ 0x64
    HAL_StatusTypeDef success = HAL_UARTEx_ReceiveToIdle_DMA(
 800154e:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8001552:	4619      	mov	r1, r3
 8001554:	f004 fcc5 	bl	8005ee2 <HAL_UARTEx_ReceiveToIdle_DMA>
 8001558:	4603      	mov	r3, r0
 800155a:	73fb      	strb	r3, [r7, #15]
		MAX_NMEA_DATA_LENGTH
    );

    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 0210 	orr.w	r2, r2, #16
 8001572:	601a      	str	r2, [r3, #0]

    HAL_StatusTypeDef messagesuccess = enableMessage(0x01, 0x11);
 8001574:	2211      	movs	r2, #17
 8001576:	2101      	movs	r1, #1
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f000 f814 	bl	80015a6 <_ZN3GPS13enableMessageEhh>
 800157e:	4603      	mov	r3, r0
 8001580:	73bb      	strb	r3, [r7, #14]

    return (success == HAL_OK) & (messagesuccess == HAL_OK);
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	7bbb      	ldrb	r3, [r7, #14]
 8001586:	4313      	orrs	r3, r2
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf0c      	ite	eq
 800158e:	2301      	moveq	r3, #1
 8001590:	2300      	movne	r3, #0
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	bf14      	ite	ne
 8001598:	2301      	movne	r3, #1
 800159a:	2300      	moveq	r3, #0
 800159c:	b2db      	uxtb	r3, r3
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <_ZN3GPS13enableMessageEhh>:

HAL_StatusTypeDef GPS::enableMessage(uint8_t msgClass, uint8_t msgId){
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	460b      	mov	r3, r1
 80015b0:	70fb      	strb	r3, [r7, #3]
 80015b2:	4613      	mov	r3, r2
 80015b4:	70bb      	strb	r3, [r7, #2]
    uint8_t cfgMsg[] = {
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	f8c3 2007 	str.w	r2, [r3, #7]
 80015c4:	23b5      	movs	r3, #181	@ 0xb5
 80015c6:	733b      	strb	r3, [r7, #12]
 80015c8:	2362      	movs	r3, #98	@ 0x62
 80015ca:	737b      	strb	r3, [r7, #13]
 80015cc:	2306      	movs	r3, #6
 80015ce:	73bb      	strb	r3, [r7, #14]
 80015d0:	2301      	movs	r3, #1
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	2303      	movs	r3, #3
 80015d6:	743b      	strb	r3, [r7, #16]
 80015d8:	2301      	movs	r3, #1
 80015da:	753b      	strb	r3, [r7, #20]
        0x06, 0x01,         // Class = CFG, ID = MSG
        0x03, 0x00,         // Length = 3 bytes
        msgClass, msgId,    // Payload: target message class + id
        0x01,               // Rate: 1 = output every navigation solution
        0x00, 0x00          // Checksum placeholder
    };
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	74bb      	strb	r3, [r7, #18]
 80015e0:	78bb      	ldrb	r3, [r7, #2]
 80015e2:	74fb      	strb	r3, [r7, #19]

    if(sendUBX(cfgMsg, sizeof(cfgMsg))){
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	220b      	movs	r2, #11
 80015ea:	4619      	mov	r1, r3
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 f840 	bl	8001672 <_ZN3GPS7sendUBXEPht>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d004      	beq.n	8001602 <_ZN3GPS13enableMessageEhh+0x5c>
        HAL_Delay(100);  // Give GPS time to process
 80015f8:	2064      	movs	r0, #100	@ 0x64
 80015fa:	f001 f857 	bl	80026ac <HAL_Delay>
        return HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e000      	b.n	8001604 <_ZN3GPS13enableMessageEhh+0x5e>
    }
    else{
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
    }
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <_ZN3GPS12calcChecksumEPht>:

void GPS::calcChecksum(uint8_t *msg, uint16_t len) {
 800160c:	b480      	push	{r7}
 800160e:	b087      	sub	sp, #28
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	4613      	mov	r3, r2
 8001618:	80fb      	strh	r3, [r7, #6]
    uint8_t ckA = 0, ckB = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	75fb      	strb	r3, [r7, #23]
 800161e:	2300      	movs	r3, #0
 8001620:	75bb      	strb	r3, [r7, #22]
    for (int i = 2; i < len - 2; i++) { // from Class byte to last payload byte
 8001622:	2302      	movs	r3, #2
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	e00d      	b.n	8001644 <_ZN3GPS12calcChecksumEPht+0x38>
        ckA += msg[i];
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	4413      	add	r3, r2
 800162e:	781a      	ldrb	r2, [r3, #0]
 8001630:	7dfb      	ldrb	r3, [r7, #23]
 8001632:	4413      	add	r3, r2
 8001634:	75fb      	strb	r3, [r7, #23]
        ckB += ckA;
 8001636:	7dba      	ldrb	r2, [r7, #22]
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	4413      	add	r3, r2
 800163c:	75bb      	strb	r3, [r7, #22]
    for (int i = 2; i < len - 2; i++) { // from Class byte to last payload byte
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	3301      	adds	r3, #1
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	88fb      	ldrh	r3, [r7, #6]
 8001646:	3b02      	subs	r3, #2
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	429a      	cmp	r2, r3
 800164c:	dbec      	blt.n	8001628 <_ZN3GPS12calcChecksumEPht+0x1c>
    }
    msg[len - 2] = ckA;
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	3b02      	subs	r3, #2
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	4413      	add	r3, r2
 8001656:	7dfa      	ldrb	r2, [r7, #23]
 8001658:	701a      	strb	r2, [r3, #0]
    msg[len - 1] = ckB;
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	3b01      	subs	r3, #1
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	4413      	add	r3, r2
 8001662:	7dba      	ldrb	r2, [r7, #22]
 8001664:	701a      	strb	r2, [r3, #0]
}
 8001666:	bf00      	nop
 8001668:	371c      	adds	r7, #28
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <_ZN3GPS7sendUBXEPht>:

bool GPS::sendUBX(uint8_t *msg, uint16_t len){
 8001672:	b580      	push	{r7, lr}
 8001674:	b084      	sub	sp, #16
 8001676:	af00      	add	r7, sp, #0
 8001678:	60f8      	str	r0, [r7, #12]
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	4613      	mov	r3, r2
 800167e:	80fb      	strh	r3, [r7, #6]
    calcChecksum(msg, len);
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	461a      	mov	r2, r3
 8001684:	68b9      	ldr	r1, [r7, #8]
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	f7ff ffc0 	bl	800160c <_ZN3GPS12calcChecksumEPht>
    if(HAL_UART_Transmit(huart, msg, len, HAL_MAX_DELAY) == HAL_OK){
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f8d3 02f4 	ldr.w	r0, [r3, #756]	@ 0x2f4
 8001692:	88fa      	ldrh	r2, [r7, #6]
 8001694:	f04f 33ff 	mov.w	r3, #4294967295
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	f003 fbc5 	bl	8004e28 <HAL_UART_Transmit>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	bf0c      	ite	eq
 80016a4:	2301      	moveq	r3, #1
 80016a6:	2300      	movne	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <_ZN3GPS7sendUBXEPht+0x40>
        return true;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <_ZN3GPS7sendUBXEPht+0x42>
    }
    return false;  // ADD THIS LINE
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <_ZN3GPS8readDataEv>:

GpsData_t GPS::readData() {
 80016bc:	b4b0      	push	{r4, r5, r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
    __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_TC);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 80016cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 80016da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0202 	bic.w	r2, r2, #2
 80016e4:	601a      	str	r2, [r3, #0]

    GpsData_t data = validData;
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	4615      	mov	r5, r2
 80016ec:	1d1c      	adds	r4, r3, #4
 80016ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016fa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    validData.isNew = false;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    __HAL_DMA_ENABLE_IT(huart->hdmarx, DMA_IT_TC);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 800170c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 800171a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f042 0202 	orr.w	r2, r2, #2
 8001724:	601a      	str	r2, [r3, #0]

    return data;
 8001726:	bf00      	nop
}
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bcb0      	pop	{r4, r5, r7}
 8001730:	4770      	bx	lr

08001732 <_ZN3GPS14processGPSDataEv>:

bool GPS::processGPSData() {
 8001732:	b5b0      	push	{r4, r5, r7, lr}
 8001734:	b084      	sub	sp, #16
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
    __HAL_DMA_DISABLE(huart->hdmarx);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 8001740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 800174e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0201 	bic.w	r2, r2, #1
 8001758:	601a      	str	r2, [r3, #0]

    bool success = parseRMC() && parseGGA() && parseUBX();
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 f8ab 	bl	80018b6 <_ZN3GPS8parseRMCEv>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00d      	beq.n	8001782 <_ZN3GPS14processGPSDataEv+0x50>
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f97e 	bl	8001a68 <_ZN3GPS8parseGGAEv>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d007      	beq.n	8001782 <_ZN3GPS14processGPSDataEv+0x50>
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f82d 	bl	80017d2 <_ZN3GPS8parseUBXEv>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <_ZN3GPS14processGPSDataEv+0x50>
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <_ZN3GPS14processGPSDataEv+0x52>
 8001782:	2300      	movs	r3, #0
 8001784:	73fb      	strb	r3, [r7, #15]
    tempData.isNew = success;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	7bfa      	ldrb	r2, [r7, #15]
 800178a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    validData = tempData;
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	1d14      	adds	r4, r2, #4
 8001794:	f103 0534 	add.w	r5, r3, #52	@ 0x34
 8001798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800179a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800179c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800179e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80017a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    __HAL_DMA_ENABLE(huart->hdmarx);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 80017ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 80017bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 0201 	orr.w	r2, r2, #1
 80017c6:	601a      	str	r2, [r3, #0]

    return success;
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bdb0      	pop	{r4, r5, r7, pc}

080017d2 <_ZN3GPS8parseUBXEv>:
//
bool GPS::parseUBX() {
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b084      	sub	sp, #16
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
    int idx = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]

    // find sync
    while (!(rxBuffer[idx] == 0xB5 && rxBuffer[idx+1] == 0x62)) {
 80017de:	e008      	b.n	80017f2 <_ZN3GPS8parseUBXEv+0x20>
        idx++;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	3301      	adds	r3, #1
 80017e4:	60fb      	str	r3, [r7, #12]
        if (idx >= MAX_NMEA_DATA_LENGTH) return 0;  // not found
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f5b3 7f24 	cmp.w	r3, #656	@ 0x290
 80017ec:	db01      	blt.n	80017f2 <_ZN3GPS8parseUBXEv+0x20>
 80017ee:	2300      	movs	r3, #0
 80017f0:	e05d      	b.n	80018ae <_ZN3GPS8parseUBXEv+0xdc>
    while (!(rxBuffer[idx] == 0xB5 && rxBuffer[idx+1] == 0x62)) {
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	4413      	add	r3, r2
 80017f8:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80017fc:	2bb5      	cmp	r3, #181	@ 0xb5
 80017fe:	d1ef      	bne.n	80017e0 <_ZN3GPS8parseUBXEv+0xe>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	3301      	adds	r3, #1
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	4413      	add	r3, r2
 8001808:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800180c:	2b62      	cmp	r3, #98	@ 0x62
 800180e:	d1e7      	bne.n	80017e0 <_ZN3GPS8parseUBXEv+0xe>
    }
    // check class
    if (rxBuffer[idx+2] != 0x01 || rxBuffer[idx+3] != 0x11) {
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3302      	adds	r3, #2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800181c:	2b01      	cmp	r3, #1
 800181e:	d107      	bne.n	8001830 <_ZN3GPS8parseUBXEv+0x5e>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	3303      	adds	r3, #3
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	4413      	add	r3, r2
 8001828:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800182c:	2b11      	cmp	r3, #17
 800182e:	d001      	beq.n	8001834 <_ZN3GPS8parseUBXEv+0x62>
        return 0;
 8001830:	2300      	movs	r3, #0
 8001832:	e03c      	b.n	80018ae <_ZN3GPS8parseUBXEv+0xdc>
    }

    // payload
    idx += 6;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	3306      	adds	r3, #6
 8001838:	60fb      	str	r3, [r7, #12]

    idx += 4;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	3304      	adds	r3, #4
 800183e:	60fb      	str	r3, [r7, #12]

    if(getVx(idx) == false){
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	4619      	mov	r1, r3
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 fdb2 	bl	80023b0 <_ZN3GPS5getVxERi>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	bf0c      	ite	eq
 8001852:	2301      	moveq	r3, #1
 8001854:	2300      	movne	r3, #0
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <_ZN3GPS8parseUBXEv+0x8e>
    	return 0;
 800185c:	2300      	movs	r3, #0
 800185e:	e026      	b.n	80018ae <_ZN3GPS8parseUBXEv+0xdc>
    }

    idx += 4;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3304      	adds	r3, #4
 8001864:	60fb      	str	r3, [r7, #12]

    if(getVy(idx) == false){
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	4619      	mov	r1, r3
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 fddd 	bl	800242c <_ZN3GPS5getVyERi>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf0c      	ite	eq
 8001878:	2301      	moveq	r3, #1
 800187a:	2300      	movne	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <_ZN3GPS8parseUBXEv+0xb4>
    	return 0;
 8001882:	2300      	movs	r3, #0
 8001884:	e013      	b.n	80018ae <_ZN3GPS8parseUBXEv+0xdc>
    }

    idx += 4;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3304      	adds	r3, #4
 800188a:	60fb      	str	r3, [r7, #12]

    if (getVz(idx) == false){
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	4619      	mov	r1, r3
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 fe08 	bl	80024a8 <_ZN3GPS5getVzERi>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	bf0c      	ite	eq
 800189e:	2301      	moveq	r3, #1
 80018a0:	2300      	movne	r3, #0
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <_ZN3GPS8parseUBXEv+0xda>
    	return 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	e000      	b.n	80018ae <_ZN3GPS8parseUBXEv+0xdc>
    }

    return true;
 80018ac:	2301      	movs	r3, #1
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <_ZN3GPS8parseRMCEv>:


bool GPS::parseRMC() {
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b084      	sub	sp, #16
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
    int idx = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
    while (!(rxBuffer[idx] == 'R' && rxBuffer[idx+1] == 'M' && rxBuffer[idx+2] == 'C')) {
 80018c2:	e008      	b.n	80018d6 <_ZN3GPS8parseRMCEv+0x20>
        idx++;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3301      	adds	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
        if (idx == MAX_NMEA_DATA_LENGTH) return 0;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f5b3 7f24 	cmp.w	r3, #656	@ 0x290
 80018d0:	d101      	bne.n	80018d6 <_ZN3GPS8parseRMCEv+0x20>
 80018d2:	2300      	movs	r3, #0
 80018d4:	e0c4      	b.n	8001a60 <_ZN3GPS8parseRMCEv+0x1aa>
    while (!(rxBuffer[idx] == 'R' && rxBuffer[idx+1] == 'M' && rxBuffer[idx+2] == 'C')) {
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	4413      	add	r3, r2
 80018dc:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80018e0:	2b52      	cmp	r3, #82	@ 0x52
 80018e2:	d1ef      	bne.n	80018c4 <_ZN3GPS8parseRMCEv+0xe>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	3301      	adds	r3, #1
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	4413      	add	r3, r2
 80018ec:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80018f0:	2b4d      	cmp	r3, #77	@ 0x4d
 80018f2:	d1e7      	bne.n	80018c4 <_ZN3GPS8parseRMCEv+0xe>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3302      	adds	r3, #2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	4413      	add	r3, r2
 80018fc:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001900:	2b43      	cmp	r3, #67	@ 0x43
 8001902:	d1df      	bne.n	80018c4 <_ZN3GPS8parseRMCEv+0xe>
    }

    idx += 4;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	3304      	adds	r3, #4
 8001908:	60fb      	str	r3, [r7, #12]

    // Check if data exists
    if (rxBuffer[idx] == ',') {
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	4413      	add	r3, r2
 8001910:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001914:	2b2c      	cmp	r3, #44	@ 0x2c
 8001916:	d101      	bne.n	800191c <_ZN3GPS8parseRMCEv+0x66>
        return 0;
 8001918:	2300      	movs	r3, #0
 800191a:	e0a1      	b.n	8001a60 <_ZN3GPS8parseRMCEv+0x1aa>
    }

    if (getTimeRMC(idx) == false) {
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	4619      	mov	r1, r3
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f924 	bl	8001b70 <_ZN3GPS10getTimeRMCERi>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	bf0c      	ite	eq
 800192e:	2301      	moveq	r3, #1
 8001930:	2300      	movne	r3, #0
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d004      	beq.n	8001942 <_ZN3GPS8parseRMCEv+0x8c>
        return 0;
 8001938:	2300      	movs	r3, #0
 800193a:	e091      	b.n	8001a60 <_ZN3GPS8parseRMCEv+0x1aa>
    }

    // Skip to status
    while (rxBuffer[idx] != ',') idx++;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	3301      	adds	r3, #1
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	4413      	add	r3, r2
 8001948:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800194c:	2b2c      	cmp	r3, #44	@ 0x2c
 800194e:	d1f5      	bne.n	800193c <_ZN3GPS8parseRMCEv+0x86>

    // Begin status
    idx++;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	3301      	adds	r3, #1
 8001954:	60fb      	str	r3, [r7, #12]

    // Check if data valid
    if (rxBuffer[idx] == 'V') return 0;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	4413      	add	r3, r2
 800195c:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001960:	2b56      	cmp	r3, #86	@ 0x56
 8001962:	d101      	bne.n	8001968 <_ZN3GPS8parseRMCEv+0xb2>
 8001964:	2300      	movs	r3, #0
 8001966:	e07b      	b.n	8001a60 <_ZN3GPS8parseRMCEv+0x1aa>
    // End status

    idx += 2;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3302      	adds	r3, #2
 800196c:	60fb      	str	r3, [r7, #12]

    if (getLatitudeRMC(idx) == false) {
 800196e:	f107 030c 	add.w	r3, r7, #12
 8001972:	4619      	mov	r1, r3
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f965 	bl	8001c44 <_ZN3GPS14getLatitudeRMCERi>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	bf0c      	ite	eq
 8001980:	2301      	moveq	r3, #1
 8001982:	2300      	movne	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <_ZN3GPS8parseRMCEv+0xd8>
        return 0;
 800198a:	2300      	movs	r3, #0
 800198c:	e068      	b.n	8001a60 <_ZN3GPS8parseRMCEv+0x1aa>
    }

    idx += 2;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	3302      	adds	r3, #2
 8001992:	60fb      	str	r3, [r7, #12]

    if (getLongitudeRMC(idx) == false) {
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	4619      	mov	r1, r3
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 fa24 	bl	8001de8 <_ZN3GPS15getLongitudeRMCERi>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	bf0c      	ite	eq
 80019a6:	2301      	moveq	r3, #1
 80019a8:	2300      	movne	r3, #0
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <_ZN3GPS8parseRMCEv+0xfe>
        return 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	e055      	b.n	8001a60 <_ZN3GPS8parseRMCEv+0x1aa>
    }

    idx += 2;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	3302      	adds	r3, #2
 80019b8:	60fb      	str	r3, [r7, #12]

    if (getSpeedRMC(idx) == false) {
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	4619      	mov	r1, r3
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 fae5 	bl	8001f90 <_ZN3GPS11getSpeedRMCERi>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	bf0c      	ite	eq
 80019cc:	2301      	moveq	r3, #1
 80019ce:	2300      	movne	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d004      	beq.n	80019e0 <_ZN3GPS8parseRMCEv+0x12a>
        return 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	e042      	b.n	8001a60 <_ZN3GPS8parseRMCEv+0x1aa>
    }

    while (rxBuffer[idx] != ',') idx++;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3301      	adds	r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80019ea:	2b2c      	cmp	r3, #44	@ 0x2c
 80019ec:	d1f5      	bne.n	80019da <_ZN3GPS8parseRMCEv+0x124>
    idx++;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	3301      	adds	r3, #1
 80019f2:	60fb      	str	r3, [r7, #12]

    if (getTrackAngleRMC(idx) == false) {
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	4619      	mov	r1, r3
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 fb4a 	bl	8002094 <_ZN3GPS16getTrackAngleRMCERi>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	bf0c      	ite	eq
 8001a06:	2301      	moveq	r3, #1
 8001a08:	2300      	movne	r3, #0
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d004      	beq.n	8001a1a <_ZN3GPS8parseRMCEv+0x164>
        return 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	e025      	b.n	8001a60 <_ZN3GPS8parseRMCEv+0x1aa>
    }

    while (rxBuffer[idx] != ',') idx++;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	3301      	adds	r3, #1
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	4413      	add	r3, r2
 8001a20:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001a24:	2b2c      	cmp	r3, #44	@ 0x2c
 8001a26:	d1f5      	bne.n	8001a14 <_ZN3GPS8parseRMCEv+0x15e>
    while (rxBuffer[idx] == ',') idx++;
 8001a28:	e002      	b.n	8001a30 <_ZN3GPS8parseRMCEv+0x17a>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001a3a:	2b2c      	cmp	r3, #44	@ 0x2c
 8001a3c:	d0f5      	beq.n	8001a2a <_ZN3GPS8parseRMCEv+0x174>

    if (getDateRMC(idx) == false) {
 8001a3e:	f107 030c 	add.w	r3, r7, #12
 8001a42:	4619      	mov	r1, r3
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 fba5 	bl	8002194 <_ZN3GPS10getDateRMCERi>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	bf0c      	ite	eq
 8001a50:	2301      	moveq	r3, #1
 8001a52:	2300      	movne	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <_ZN3GPS8parseRMCEv+0x1a8>
        return 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e000      	b.n	8001a60 <_ZN3GPS8parseRMCEv+0x1aa>
//    else {
//        tempData.vx = INVALID_DATA;
//        tempData.vy = INVALID_DATA;
//    }

    return true;
 8001a5e:	2301      	movs	r3, #1
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <_ZN3GPS8parseGGAEv>:

bool GPS::parseGGA() {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
    int idx = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
    while (!(rxBuffer[idx] == 'G' && rxBuffer[idx + 1] == 'G' && rxBuffer[idx + 2] == 'A')) {
 8001a74:	e008      	b.n	8001a88 <_ZN3GPS8parseGGAEv+0x20>
        idx++;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
        if (idx == MAX_NMEA_DATA_LENGTH) return 0;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f5b3 7f24 	cmp.w	r3, #656	@ 0x290
 8001a82:	d101      	bne.n	8001a88 <_ZN3GPS8parseGGAEv+0x20>
 8001a84:	2300      	movs	r3, #0
 8001a86:	e06f      	b.n	8001b68 <_ZN3GPS8parseGGAEv+0x100>
    while (!(rxBuffer[idx] == 'G' && rxBuffer[idx + 1] == 'G' && rxBuffer[idx + 2] == 'A')) {
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001a92:	2b47      	cmp	r3, #71	@ 0x47
 8001a94:	d1ef      	bne.n	8001a76 <_ZN3GPS8parseGGAEv+0xe>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001aa2:	2b47      	cmp	r3, #71	@ 0x47
 8001aa4:	d1e7      	bne.n	8001a76 <_ZN3GPS8parseGGAEv+0xe>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001ab2:	2b41      	cmp	r3, #65	@ 0x41
 8001ab4:	d1df      	bne.n	8001a76 <_ZN3GPS8parseGGAEv+0xe>
    }
    idx+=4; // Skip to data
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	60fb      	str	r3, [r7, #12]

    // Check if data exists
    if (rxBuffer[idx] == ',') {
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001ac6:	2b2c      	cmp	r3, #44	@ 0x2c
 8001ac8:	d101      	bne.n	8001ace <_ZN3GPS8parseGGAEv+0x66>
        return 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e04c      	b.n	8001b68 <_ZN3GPS8parseGGAEv+0x100>
    }

    // Skip 7 sections of data
    for (int i = 0; i < 6; i++, idx++) {
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	e00f      	b.n	8001af4 <_ZN3GPS8parseGGAEv+0x8c>
        while (rxBuffer[idx] != ',') idx++;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	4413      	add	r3, r2
 8001ae0:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001ae4:	2b2c      	cmp	r3, #44	@ 0x2c
 8001ae6:	d1f5      	bne.n	8001ad4 <_ZN3GPS8parseGGAEv+0x6c>
    for (int i = 0; i < 6; i++, idx++) {
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	3301      	adds	r3, #1
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	3301      	adds	r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	2b05      	cmp	r3, #5
 8001af8:	ddef      	ble.n	8001ada <_ZN3GPS8parseGGAEv+0x72>
    }

    if (getNumSatellitesGGA(idx) == false) {
 8001afa:	f107 030c 	add.w	r3, r7, #12
 8001afe:	4619      	mov	r1, r3
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 fbb1 	bl	8002268 <_ZN3GPS19getNumSatellitesGGAERi>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	bf0c      	ite	eq
 8001b0c:	2301      	moveq	r3, #1
 8001b0e:	2300      	movne	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <_ZN3GPS8parseGGAEv+0xb2>
        return 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	e026      	b.n	8001b68 <_ZN3GPS8parseGGAEv+0x100>
    }

    for (int i = 0; i < 2; i++, idx++) {
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	e00f      	b.n	8001b40 <_ZN3GPS8parseGGAEv+0xd8>
    	while (rxBuffer[idx] != ',') idx++;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	3301      	adds	r3, #1
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001b30:	2b2c      	cmp	r3, #44	@ 0x2c
 8001b32:	d1f5      	bne.n	8001b20 <_ZN3GPS8parseGGAEv+0xb8>
    for (int i = 0; i < 2; i++, idx++) {
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	3301      	adds	r3, #1
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	ddef      	ble.n	8001b26 <_ZN3GPS8parseGGAEv+0xbe>
    }

    if(getAltitudeGGA(idx) == false){
 8001b46:	f107 030c 	add.w	r3, r7, #12
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 fbbd 	bl	80022cc <_ZN3GPS14getAltitudeGGAERi>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bf0c      	ite	eq
 8001b58:	2301      	moveq	r3, #1
 8001b5a:	2300      	movne	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <_ZN3GPS8parseGGAEv+0xfe>
    	return 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e000      	b.n	8001b68 <_ZN3GPS8parseGGAEv+0x100>
    }

    return 1;
 8001b66:	2301      	movs	r3, #1
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_ZN3GPS10getTimeRMCERi>:

bool GPS::getTimeRMC(int &idx) {
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
    uint8_t hour = (rxBuffer[idx] - '0') * 10 + (rxBuffer[idx + 1] - '0');
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001b86:	461a      	mov	r2, r3
 8001b88:	0092      	lsls	r2, r2, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	3301      	adds	r3, #1
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	440b      	add	r3, r1
 8001b9a:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001b9e:	4413      	add	r3, r2
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	3320      	adds	r3, #32
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	3b30      	subs	r3, #48	@ 0x30
 8001ba8:	73fb      	strb	r3, [r7, #15]
    idx += 2;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	1c9a      	adds	r2, r3, #2
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	601a      	str	r2, [r3, #0]
    uint8_t minute = (rxBuffer[idx] - '0') * 10 + (rxBuffer[idx + 1] - '0');
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	4413      	add	r3, r2
 8001bbc:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	0092      	lsls	r2, r2, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	440b      	add	r3, r1
 8001bd4:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001bd8:	4413      	add	r3, r2
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	3320      	adds	r3, #32
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	3b30      	subs	r3, #48	@ 0x30
 8001be2:	73bb      	strb	r3, [r7, #14]
    idx += 2;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	1c9a      	adds	r2, r3, #2
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	601a      	str	r2, [r3, #0]
    uint8_t second = (rxBuffer[idx] - '0') * 10 + (rxBuffer[idx + 1] - '0');
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	0092      	lsls	r2, r2, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	440b      	add	r3, r1
 8001c0e:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001c12:	4413      	add	r3, r2
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	3320      	adds	r3, #32
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	3b30      	subs	r3, #48	@ 0x30
 8001c1c:	737b      	strb	r3, [r7, #13]

    tempData.time.hour = hour;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	7bfa      	ldrb	r2, [r7, #15]
 8001c22:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
    tempData.time.minute = minute;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	7bba      	ldrb	r2, [r7, #14]
 8001c2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    tempData.time.second = second;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	7b7a      	ldrb	r2, [r7, #13]
 8001c32:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return true;
 8001c36:	2301      	movs	r3, #1
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <_ZN3GPS14getLatitudeRMCERi>:

bool GPS::getLatitudeRMC(int &idx) {
 8001c44:	b480      	push	{r7}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
    float lat = 0;
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 2; i++, idx++) {
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	e020      	b.n	8001c9c <_ZN3GPS14getLatitudeRMCERi+0x58>
        lat *= 10;
 8001c5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c5e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001c62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c66:	edc7 7a05 	vstr	s15, [r7, #20]
        lat += ((float)(rxBuffer[idx] - '0'));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001c76:	3b30      	subs	r3, #48	@ 0x30
 8001c78:	ee07 3a90 	vmov	s15, r3
 8001c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c80:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c88:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < 2; i++, idx++) {
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	dddb      	ble.n	8001c5a <_ZN3GPS14getLatitudeRMCERi+0x16>
    }

    float lat_minutes = 0;
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
    while (rxBuffer[idx] != '.') {
 8001ca8:	e01d      	b.n	8001ce6 <_ZN3GPS14getLatitudeRMCERi+0xa2>
        lat_minutes *= 10;
 8001caa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cae:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001cb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cb6:	edc7 7a03 	vstr	s15, [r7, #12]
        lat_minutes += ((float)(rxBuffer[idx] - '0'));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001cc6:	3b30      	subs	r3, #48	@ 0x30
 8001cc8:	ee07 3a90 	vmov	s15, r3
 8001ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd8:	edc7 7a03 	vstr	s15, [r7, #12]
        idx++;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	601a      	str	r2, [r3, #0]
    while (rxBuffer[idx] != '.') {
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001cf2:	2b2e      	cmp	r3, #46	@ 0x2e
 8001cf4:	d1d9      	bne.n	8001caa <_ZN3GPS14getLatitudeRMCERi+0x66>
    }
    idx++; // Skip decimal char
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	601a      	str	r2, [r3, #0]

    // Including two digits of minutes
    uint32_t mult = 10;
 8001d00:	230a      	movs	r3, #10
 8001d02:	60bb      	str	r3, [r7, #8]
    while (rxBuffer[idx] != ',' && mult <= DECIMAL_PRECISION) {
 8001d04:	e022      	b.n	8001d4c <_ZN3GPS14getLatitudeRMCERi+0x108>
        lat_minutes += ((float)(rxBuffer[idx] - '0')) / mult;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001d12:	3b30      	subs	r3, #48	@ 0x30
 8001d14:	ee07 3a90 	vmov	s15, r3
 8001d18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	ee07 3a90 	vmov	s15, r3
 8001d22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d2a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d32:	edc7 7a03 	vstr	s15, [r7, #12]
        idx++;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	601a      	str	r2, [r3, #0]
        mult *= 10;
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	60bb      	str	r3, [r7, #8]
    while (rxBuffer[idx] != ',' && mult <= DECIMAL_PRECISION) {
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	4413      	add	r3, r2
 8001d54:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001d58:	2b2c      	cmp	r3, #44	@ 0x2c
 8001d5a:	d003      	beq.n	8001d64 <_ZN3GPS14getLatitudeRMCERi+0x120>
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	4a20      	ldr	r2, [pc, #128]	@ (8001de0 <_ZN3GPS14getLatitudeRMCERi+0x19c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d9d0      	bls.n	8001d06 <_ZN3GPS14getLatitudeRMCERi+0xc2>
    }

    lat += lat_minutes/60;
 8001d64:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d68:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8001de4 <_ZN3GPS14getLatitudeRMCERi+0x1a0>
 8001d6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d70:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d78:	edc7 7a05 	vstr	s15, [r7, #20]

    tempData.latitude = lat;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	63da      	str	r2, [r3, #60]	@ 0x3c

    // Skip to NS char indicator
    while (rxBuffer[idx] != ',') idx++;
 8001d82:	e004      	b.n	8001d8e <_ZN3GPS14getLatitudeRMCERi+0x14a>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	1c5a      	adds	r2, r3, #1
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001d9a:	2b2c      	cmp	r3, #44	@ 0x2c
 8001d9c:	d1f2      	bne.n	8001d84 <_ZN3GPS14getLatitudeRMCERi+0x140>
    idx++; // Skip over comma
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	601a      	str	r2, [r3, #0]
    tempData.latitude *= (rxBuffer[idx] == 'N') ? 1 : -1;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001dba:	2b4e      	cmp	r3, #78	@ 0x4e
 8001dbc:	d102      	bne.n	8001dc4 <_ZN3GPS14getLatitudeRMCERi+0x180>
 8001dbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001dc2:	e001      	b.n	8001dc8 <_ZN3GPS14getLatitudeRMCERi+0x184>
 8001dc4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    return true;
 8001dd2:	2301      	movs	r3, #1
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	371c      	adds	r7, #28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	000f4240 	.word	0x000f4240
 8001de4:	42700000 	.word	0x42700000

08001de8 <_ZN3GPS15getLongitudeRMCERi>:

bool GPS::getLongitudeRMC(int &idx) {
 8001de8:	b480      	push	{r7}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
    float lon = 0;
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 3; i++, idx++) {
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	e020      	b.n	8001e40 <_ZN3GPS15getLongitudeRMCERi+0x58>
        lon *= 10;
 8001dfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e02:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001e06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e0a:	edc7 7a05 	vstr	s15, [r7, #20]
        lon += ((float)(rxBuffer[idx] - '0'));
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001e1a:	3b30      	subs	r3, #48	@ 0x30
 8001e1c:	ee07 3a90 	vmov	s15, r3
 8001e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e24:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e2c:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < 3; i++, idx++) {
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	3301      	adds	r3, #1
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	dddb      	ble.n	8001dfe <_ZN3GPS15getLongitudeRMCERi+0x16>
    }

    float lon_minutes = 0;
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
    while (rxBuffer[idx] != '.') {
 8001e4c:	e01d      	b.n	8001e8a <_ZN3GPS15getLongitudeRMCERi+0xa2>
        lon_minutes *= 10;
 8001e4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e52:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001e56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e5a:	edc7 7a03 	vstr	s15, [r7, #12]
        lon_minutes += ((float)(rxBuffer[idx] - '0'));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001e6a:	3b30      	subs	r3, #48	@ 0x30
 8001e6c:	ee07 3a90 	vmov	s15, r3
 8001e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e74:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e7c:	edc7 7a03 	vstr	s15, [r7, #12]
        idx++;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	601a      	str	r2, [r3, #0]
    while (rxBuffer[idx] != '.') {
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001e96:	2b2e      	cmp	r3, #46	@ 0x2e
 8001e98:	d1d9      	bne.n	8001e4e <_ZN3GPS15getLongitudeRMCERi+0x66>
    }

    idx++; // Skip decimal char
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	601a      	str	r2, [r3, #0]

    // Including two digits of minutes
    uint32_t mult = 10;
 8001ea4:	230a      	movs	r3, #10
 8001ea6:	60bb      	str	r3, [r7, #8]
    while (rxBuffer[idx] != ',' && mult <= DECIMAL_PRECISION) {
 8001ea8:	e022      	b.n	8001ef0 <_ZN3GPS15getLongitudeRMCERi+0x108>
        lon_minutes += ((float)(rxBuffer[idx] - '0')) / mult;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001eb6:	3b30      	subs	r3, #48	@ 0x30
 8001eb8:	ee07 3a90 	vmov	s15, r3
 8001ebc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	ee07 3a90 	vmov	s15, r3
 8001ec6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ece:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed6:	edc7 7a03 	vstr	s15, [r7, #12]
        idx++;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	601a      	str	r2, [r3, #0]
        mult *= 10;
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
    while (rxBuffer[idx] != ',' && mult <= DECIMAL_PRECISION) {
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001efc:	2b2c      	cmp	r3, #44	@ 0x2c
 8001efe:	d003      	beq.n	8001f08 <_ZN3GPS15getLongitudeRMCERi+0x120>
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4a20      	ldr	r2, [pc, #128]	@ (8001f84 <_ZN3GPS15getLongitudeRMCERi+0x19c>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d9d0      	bls.n	8001eaa <_ZN3GPS15getLongitudeRMCERi+0xc2>
    }

    lon += lon_minutes / 60;
 8001f08:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f0c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8001f88 <_ZN3GPS15getLongitudeRMCERi+0x1a0>
 8001f10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f14:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f1c:	edc7 7a05 	vstr	s15, [r7, #20]

    tempData.longitude = lon;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	641a      	str	r2, [r3, #64]	@ 0x40
    while (rxBuffer[idx] != ',') idx++;
 8001f26:	e004      	b.n	8001f32 <_ZN3GPS15getLongitudeRMCERi+0x14a>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	1c5a      	adds	r2, r3, #1
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001f3e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001f40:	d1f2      	bne.n	8001f28 <_ZN3GPS15getLongitudeRMCERi+0x140>
    idx++;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	601a      	str	r2, [r3, #0]
    tempData.longitude *= (rxBuffer[idx] == 'E') ? 1 : -1;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001f5e:	2b45      	cmp	r3, #69	@ 0x45
 8001f60:	d102      	bne.n	8001f68 <_ZN3GPS15getLongitudeRMCERi+0x180>
 8001f62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f66:	e001      	b.n	8001f6c <_ZN3GPS15getLongitudeRMCERi+0x184>
 8001f68:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

    return true;
 8001f76:	2301      	movs	r3, #1
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	371c      	adds	r7, #28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	000f4240 	.word	0x000f4240
 8001f88:	42700000 	.word	0x42700000
 8001f8c:	00000000 	.word	0x00000000

08001f90 <_ZN3GPS11getSpeedRMCERi>:

bool GPS::getSpeedRMC(int &idx) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
    float spd = 0;
 8001f9a:	f04f 0300 	mov.w	r3, #0
 8001f9e:	60fb      	str	r3, [r7, #12]
    while (rxBuffer[idx] != '.') {
 8001fa0:	e01d      	b.n	8001fde <_ZN3GPS11getSpeedRMCERi+0x4e>
        spd *= 10;
 8001fa2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fa6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001faa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fae:	edc7 7a03 	vstr	s15, [r7, #12]
        spd += rxBuffer[idx] - '0';
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001fbe:	3b30      	subs	r3, #48	@ 0x30
 8001fc0:	ee07 3a90 	vmov	s15, r3
 8001fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fc8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd0:	edc7 7a03 	vstr	s15, [r7, #12]
        idx++;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	601a      	str	r2, [r3, #0]
    while (rxBuffer[idx] != '.') {
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001fea:	2b2e      	cmp	r3, #46	@ 0x2e
 8001fec:	d1d9      	bne.n	8001fa2 <_ZN3GPS11getSpeedRMCERi+0x12>
    }
    idx++; // Decimal char
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	601a      	str	r2, [r3, #0]
    uint32_t mult = 10;
 8001ff8:	230a      	movs	r3, #10
 8001ffa:	60bb      	str	r3, [r7, #8]
    while (rxBuffer[idx] != ',' && mult <= DECIMAL_PRECISION) {
 8001ffc:	e022      	b.n	8002044 <_ZN3GPS11getSpeedRMCERi+0xb4>
        spd += ((float)(rxBuffer[idx] - '0')) / mult;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800200a:	3b30      	subs	r3, #48	@ 0x30
 800200c:	ee07 3a90 	vmov	s15, r3
 8002010:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	ee07 3a90 	vmov	s15, r3
 800201a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800201e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002022:	ed97 7a03 	vldr	s14, [r7, #12]
 8002026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800202a:	edc7 7a03 	vstr	s15, [r7, #12]
        idx++;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	601a      	str	r2, [r3, #0]
        mult *= 10;
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	60bb      	str	r3, [r7, #8]
    while (rxBuffer[idx] != ',' && mult <= DECIMAL_PRECISION) {
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	4413      	add	r3, r2
 800204c:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8002050:	2b2c      	cmp	r3, #44	@ 0x2c
 8002052:	d003      	beq.n	800205c <_ZN3GPS11getSpeedRMCERi+0xcc>
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	4a0e      	ldr	r2, [pc, #56]	@ (8002090 <_ZN3GPS11getSpeedRMCERi+0x100>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d9d0      	bls.n	8001ffe <_ZN3GPS11getSpeedRMCERi+0x6e>
    }

    tempData.groundSpeed = spd * 51.4444; // Convert from kt to cm/s
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f7fe fb79 	bl	8000754 <__aeabi_f2d>
 8002062:	a309      	add	r3, pc, #36	@ (adr r3, 8002088 <_ZN3GPS11getSpeedRMCERi+0xf8>)
 8002064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002068:	f7fe f8e6 	bl	8000238 <__aeabi_dmul>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4610      	mov	r0, r2
 8002072:	4619      	mov	r1, r3
 8002074:	f7fe fbc6 	bl	8000804 <__aeabi_d2f>
 8002078:	4602      	mov	r2, r0
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	645a      	str	r2, [r3, #68]	@ 0x44

    return true;
 800207e:	2301      	movs	r3, #1
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	19652bd4 	.word	0x19652bd4
 800208c:	4049b8e2 	.word	0x4049b8e2
 8002090:	000f4240 	.word	0x000f4240

08002094 <_ZN3GPS16getTrackAngleRMCERi>:

bool GPS::getTrackAngleRMC(int &idx) {
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
    float cog = 0;
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
    // Check if cog was calculated
    if (rxBuffer[idx] != ',') {
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	4413      	add	r3, r2
 80020ac:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80020b0:	2b2c      	cmp	r3, #44	@ 0x2c
 80020b2:	d05e      	beq.n	8002172 <_ZN3GPS16getTrackAngleRMCERi+0xde>
        while (rxBuffer[idx] != '.') {
 80020b4:	e01d      	b.n	80020f2 <_ZN3GPS16getTrackAngleRMCERi+0x5e>
            cog *= 10;
 80020b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80020ba:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80020be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020c2:	edc7 7a03 	vstr	s15, [r7, #12]
            cog += rxBuffer[idx] - '0';
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80020d2:	3b30      	subs	r3, #48	@ 0x30
 80020d4:	ee07 3a90 	vmov	s15, r3
 80020d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80020e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e4:	edc7 7a03 	vstr	s15, [r7, #12]
            idx++;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	601a      	str	r2, [r3, #0]
        while (rxBuffer[idx] != '.') {
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80020fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8002100:	d1d9      	bne.n	80020b6 <_ZN3GPS16getTrackAngleRMCERi+0x22>
        }
        idx++; // Decimal char
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	601a      	str	r2, [r3, #0]
        uint32_t mult = 10;
 800210c:	230a      	movs	r3, #10
 800210e:	60bb      	str	r3, [r7, #8]
        while (rxBuffer[idx] != ',' && mult <= DECIMAL_PRECISION) {
 8002110:	e022      	b.n	8002158 <_ZN3GPS16getTrackAngleRMCERi+0xc4>
            cog += ((float)(rxBuffer[idx] - '0')) / mult;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800211e:	3b30      	subs	r3, #48	@ 0x30
 8002120:	ee07 3a90 	vmov	s15, r3
 8002124:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	ee07 3a90 	vmov	s15, r3
 800212e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002136:	ed97 7a03 	vldr	s14, [r7, #12]
 800213a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800213e:	edc7 7a03 	vstr	s15, [r7, #12]
            idx++;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	601a      	str	r2, [r3, #0]
            mult *= 10;
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	60bb      	str	r3, [r7, #8]
        while (rxBuffer[idx] != ',' && mult <= DECIMAL_PRECISION) {
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4413      	add	r3, r2
 8002160:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8002164:	2b2c      	cmp	r3, #44	@ 0x2c
 8002166:	d006      	beq.n	8002176 <_ZN3GPS16getTrackAngleRMCERi+0xe2>
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4a08      	ldr	r2, [pc, #32]	@ (800218c <_ZN3GPS16getTrackAngleRMCERi+0xf8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d9d0      	bls.n	8002112 <_ZN3GPS16getTrackAngleRMCERi+0x7e>
 8002170:	e001      	b.n	8002176 <_ZN3GPS16getTrackAngleRMCERi+0xe2>
        }
    }
    else {
        cog = INVALID_TRACK_ANGLE;
 8002172:	4b07      	ldr	r3, [pc, #28]	@ (8002190 <_ZN3GPS16getTrackAngleRMCERi+0xfc>)
 8002174:	60fb      	str	r3, [r7, #12]
    }

    tempData.trackAngle = cog;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	651a      	str	r2, [r3, #80]	@ 0x50

    return true;
 800217c:	2301      	movs	r3, #1
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	000f4240 	.word	0x000f4240
 8002190:	bf800000 	.word	0xbf800000

08002194 <_ZN3GPS10getDateRMCERi>:

bool GPS::getDateRMC(int &idx) {
 8002194:	b480      	push	{r7}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
    int day = (rxBuffer[idx] - '0') * 10 + rxBuffer[idx + 1] - '0';
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80021aa:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4619      	mov	r1, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	3301      	adds	r3, #1
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80021c6:	440b      	add	r3, r1
 80021c8:	3b30      	subs	r3, #48	@ 0x30
 80021ca:	617b      	str	r3, [r7, #20]
    idx += 2;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	1c9a      	adds	r2, r3, #2
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	601a      	str	r2, [r3, #0]
    int month = (rxBuffer[idx] - '0') * 10 + rxBuffer[idx + 1] - '0';
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80021e2:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4619      	mov	r1, r3
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	3301      	adds	r3, #1
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80021fe:	440b      	add	r3, r1
 8002200:	3b30      	subs	r3, #48	@ 0x30
 8002202:	613b      	str	r3, [r7, #16]
    idx += 2;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	1c9a      	adds	r2, r3, #2
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	601a      	str	r2, [r3, #0]
    int year = (rxBuffer[idx] - '0') * 10 + rxBuffer[idx + 1] - '0';
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800221a:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4619      	mov	r1, r3
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	3301      	adds	r3, #1
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8002236:	440b      	add	r3, r1
 8002238:	3b30      	subs	r3, #48	@ 0x30
 800223a:	60fb      	str	r3, [r7, #12]

    tempData.time.day = day;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	b2da      	uxtb	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    tempData.time.month= month;
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    tempData.time.year = year;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	b2da      	uxtb	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return true;
 800225a:	2301      	movs	r3, #1
}
 800225c:	4618      	mov	r0, r3
 800225e:	371c      	adds	r7, #28
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <_ZN3GPS19getNumSatellitesGGAERi>:

bool GPS::getNumSatellitesGGA(int &idx) {
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
    int numSats = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
    while (rxBuffer[idx] != ',') {
 8002276:	e014      	b.n	80022a2 <_ZN3GPS19getNumSatellitesGGAERi+0x3a>
        numSats *= 10;
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
        numSats += rxBuffer[idx] - '0';
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	4413      	add	r3, r2
 800228c:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8002290:	3b30      	subs	r3, #48	@ 0x30
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4413      	add	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
        idx++;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	601a      	str	r2, [r3, #0]
    while (rxBuffer[idx] != ',') {
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80022ae:	2b2c      	cmp	r3, #44	@ 0x2c
 80022b0:	d1e2      	bne.n	8002278 <_ZN3GPS19getNumSatellitesGGAERi+0x10>
    }

    tempData.numSatellites = numSats;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    return true;
 80022bc:	2301      	movs	r3, #1
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <_ZN3GPS14getAltitudeGGAERi>:

bool GPS::getAltitudeGGA(int &idx){
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
    float altitude = 0;
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]
    while (rxBuffer[idx] != '.') {
 80022dc:	e01d      	b.n	800231a <_ZN3GPS14getAltitudeGGAERi+0x4e>
        altitude *= 10;
 80022de:	edd7 7a03 	vldr	s15, [r7, #12]
 80022e2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80022e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ea:	edc7 7a03 	vstr	s15, [r7, #12]
        altitude += rxBuffer[idx] - '0';
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80022fa:	3b30      	subs	r3, #48	@ 0x30
 80022fc:	ee07 3a90 	vmov	s15, r3
 8002300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002304:	ed97 7a03 	vldr	s14, [r7, #12]
 8002308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800230c:	edc7 7a03 	vstr	s15, [r7, #12]
        idx++;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	601a      	str	r2, [r3, #0]
    while (rxBuffer[idx] != '.') {
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8002326:	2b2e      	cmp	r3, #46	@ 0x2e
 8002328:	d1d9      	bne.n	80022de <_ZN3GPS14getAltitudeGGAERi+0x12>
    }
    idx++; // Decimal char
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	601a      	str	r2, [r3, #0]
    uint32_t mult = 10;
 8002334:	230a      	movs	r3, #10
 8002336:	60bb      	str	r3, [r7, #8]
    while (rxBuffer[idx] != ',' && mult <= DECIMAL_PRECISION) {
 8002338:	e022      	b.n	8002380 <_ZN3GPS14getAltitudeGGAERi+0xb4>
        altitude += ((float)(rxBuffer[idx] - '0')) / mult;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8002346:	3b30      	subs	r3, #48	@ 0x30
 8002348:	ee07 3a90 	vmov	s15, r3
 800234c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	ee07 3a90 	vmov	s15, r3
 8002356:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800235a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800235e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002366:	edc7 7a03 	vstr	s15, [r7, #12]
        idx++;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	601a      	str	r2, [r3, #0]
        mult *= 10;
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
    while (rxBuffer[idx] != ',' && mult <= DECIMAL_PRECISION) {
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4413      	add	r3, r2
 8002388:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800238c:	2b2c      	cmp	r3, #44	@ 0x2c
 800238e:	d003      	beq.n	8002398 <_ZN3GPS14getAltitudeGGAERi+0xcc>
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	4a06      	ldr	r2, [pc, #24]	@ (80023ac <_ZN3GPS14getAltitudeGGAERi+0xe0>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d9d0      	bls.n	800233a <_ZN3GPS14getAltitudeGGAERi+0x6e>
    }

    tempData.altitude = altitude;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	64da      	str	r2, [r3, #76]	@ 0x4c
    return true;
 800239e:	2301      	movs	r3, #1
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	000f4240 	.word	0x000f4240

080023b0 <_ZN3GPS5getVxERi>:


bool GPS::getVx(int &idx){
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
    int32_t ecefVX = (int32_t)((uint32_t)rxBuffer[idx] |
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80023c6:	4619      	mov	r1, r3
                               ((uint32_t)rxBuffer[idx+1] << 8) |
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	3301      	adds	r3, #1
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80023d6:	021b      	lsls	r3, r3, #8
    int32_t ecefVX = (int32_t)((uint32_t)rxBuffer[idx] |
 80023d8:	ea41 0203 	orr.w	r2, r1, r3
                               ((uint32_t)rxBuffer[idx+2] << 16) |
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	3302      	adds	r3, #2
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	440b      	add	r3, r1
 80023e6:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80023ea:	041b      	lsls	r3, r3, #16
                               ((uint32_t)rxBuffer[idx+1] << 8) |
 80023ec:	431a      	orrs	r2, r3
                               ((uint32_t)rxBuffer[idx+3] << 24));
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	3303      	adds	r3, #3
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	440b      	add	r3, r1
 80023f8:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80023fc:	061b      	lsls	r3, r3, #24
                               ((uint32_t)rxBuffer[idx+2] << 16) |
 80023fe:	4313      	orrs	r3, r2
    int32_t ecefVX = (int32_t)((uint32_t)rxBuffer[idx] |
 8002400:	60fb      	str	r3, [r7, #12]

    tempData.vx = ecefVX / 100.0f;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	ee07 3a90 	vmov	s15, r3
 8002408:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800240c:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002428 <_ZN3GPS5getVxERi+0x78>
 8002410:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
    return true;
 800241a:	2301      	movs	r3, #1
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	42c80000 	.word	0x42c80000

0800242c <_ZN3GPS5getVyERi>:

bool GPS::getVy(int &idx){
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
    int32_t ecefVY = (int32_t)((uint32_t)rxBuffer[idx] |
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8002442:	4619      	mov	r1, r3
                               ((uint32_t)rxBuffer[idx+1] << 8) |
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	3301      	adds	r3, #1
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8002452:	021b      	lsls	r3, r3, #8
    int32_t ecefVY = (int32_t)((uint32_t)rxBuffer[idx] |
 8002454:	ea41 0203 	orr.w	r2, r1, r3
                               ((uint32_t)rxBuffer[idx+2] << 16) |
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	3302      	adds	r3, #2
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	440b      	add	r3, r1
 8002462:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8002466:	041b      	lsls	r3, r3, #16
                               ((uint32_t)rxBuffer[idx+1] << 8) |
 8002468:	431a      	orrs	r2, r3
                               ((uint32_t)rxBuffer[idx+3] << 24));
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	3303      	adds	r3, #3
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	440b      	add	r3, r1
 8002474:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8002478:	061b      	lsls	r3, r3, #24
                               ((uint32_t)rxBuffer[idx+2] << 16) |
 800247a:	4313      	orrs	r3, r2
    int32_t ecefVY = (int32_t)((uint32_t)rxBuffer[idx] |
 800247c:	60fb      	str	r3, [r7, #12]

    tempData.vy = ecefVY / 100.0f;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	ee07 3a90 	vmov	s15, r3
 8002484:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002488:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80024a4 <_ZN3GPS5getVyERi+0x78>
 800248c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
    return true;
 8002496:	2301      	movs	r3, #1
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	42c80000 	.word	0x42c80000

080024a8 <_ZN3GPS5getVzERi>:

bool GPS::getVz(int &idx){
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
    int32_t ecefVZ = (int32_t)((uint32_t)rxBuffer[idx] |
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80024be:	4619      	mov	r1, r3
                               ((uint32_t)rxBuffer[idx+1] << 8) |
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	3301      	adds	r3, #1
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	4413      	add	r3, r2
 80024ca:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80024ce:	021b      	lsls	r3, r3, #8
    int32_t ecefVZ = (int32_t)((uint32_t)rxBuffer[idx] |
 80024d0:	ea41 0203 	orr.w	r2, r1, r3
                               ((uint32_t)rxBuffer[idx+2] << 16) |
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	3302      	adds	r3, #2
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	440b      	add	r3, r1
 80024de:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80024e2:	041b      	lsls	r3, r3, #16
                               ((uint32_t)rxBuffer[idx+1] << 8) |
 80024e4:	431a      	orrs	r2, r3
                               ((uint32_t)rxBuffer[idx+3] << 24));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	3303      	adds	r3, #3
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	440b      	add	r3, r1
 80024f0:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80024f4:	061b      	lsls	r3, r3, #24
                               ((uint32_t)rxBuffer[idx+2] << 16) |
 80024f6:	4313      	orrs	r3, r2
    int32_t ecefVZ = (int32_t)((uint32_t)rxBuffer[idx] |
 80024f8:	60fb      	str	r3, [r7, #12]

    tempData.vz = ecefVZ / 100.0f;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	ee07 3a90 	vmov	s15, r3
 8002500:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002504:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002520 <_ZN3GPS5getVzERi+0x78>
 8002508:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
    return true;
 8002512:	2301      	movs	r3, #1
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	42c80000 	.word	0x42c80000

08002524 <_ZN3GPSD1Ev>:
#include "gps_iface.hpp"
#include "gps_datatypes.hpp"
#include "gps_defines.hpp"
#include <cmath>

class GPS : public IGPS {
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	4a05      	ldr	r2, [pc, #20]	@ (8002544 <_ZN3GPSD1Ev+0x20>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe ffc9 	bl	80014cc <_ZN4IGPSD1Ev>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	08006408 	.word	0x08006408

08002548 <_ZN3GPSD0Ev>:
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ffe7 	bl	8002524 <_ZN3GPSD1Ev>
 8002556:	f44f 713e 	mov.w	r1, #760	@ 0x2f8
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f003 fd64 	bl	8006028 <_ZdlPvj>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800256c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002570:	f7fe fedc 	bl	800132c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002574:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002576:	e003      	b.n	8002580 <LoopCopyDataInit>

08002578 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002578:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800257a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800257c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800257e:	3104      	adds	r1, #4

08002580 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002580:	480a      	ldr	r0, [pc, #40]	@ (80025ac <LoopForever+0xa>)
	ldr	r3, =_edata
 8002582:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002584:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002586:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002588:	d3f6      	bcc.n	8002578 <CopyDataInit>
	ldr	r2, =_sbss
 800258a:	4a0a      	ldr	r2, [pc, #40]	@ (80025b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800258c:	e002      	b.n	8002594 <LoopFillZerobss>

0800258e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800258e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002590:	f842 3b04 	str.w	r3, [r2], #4

08002594 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002594:	4b08      	ldr	r3, [pc, #32]	@ (80025b8 <LoopForever+0x16>)
	cmp	r2, r3
 8002596:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002598:	d3f9      	bcc.n	800258e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800259a:	f003 fe89 	bl	80062b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800259e:	f7fe fb3f 	bl	8000c20 <main>

080025a2 <LoopForever>:

LoopForever:
    b LoopForever
 80025a2:	e7fe      	b.n	80025a2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80025a4:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80025a8:	08006464 	.word	0x08006464
	ldr	r0, =_sdata
 80025ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80025b0:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 80025b4:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 80025b8:	200002cc 	.word	0x200002cc

080025bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025bc:	e7fe      	b.n	80025bc <ADC1_2_IRQHandler>

080025be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80025c8:	2004      	movs	r0, #4
 80025ca:	f000 f963 	bl	8002894 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80025ce:	f7fe febf 	bl	8001350 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025d2:	2000      	movs	r0, #0
 80025d4:	f000 f80e 	bl	80025f4 <HAL_InitTick>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	71fb      	strb	r3, [r7, #7]
 80025e2:	e001      	b.n	80025e8 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025e4:	f7fe fd56 	bl	8001094 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025e8:	79fb      	ldrb	r3, [r7, #7]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002600:	4b17      	ldr	r3, [pc, #92]	@ (8002660 <HAL_InitTick+0x6c>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d023      	beq.n	8002650 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002608:	4b16      	ldr	r3, [pc, #88]	@ (8002664 <HAL_InitTick+0x70>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b14      	ldr	r3, [pc, #80]	@ (8002660 <HAL_InitTick+0x6c>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	4619      	mov	r1, r3
 8002612:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002616:	fbb3 f3f1 	udiv	r3, r3, r1
 800261a:	fbb2 f3f3 	udiv	r3, r2, r3
 800261e:	4618      	mov	r0, r3
 8002620:	f000 f96b 	bl	80028fa <HAL_SYSTICK_Config>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10f      	bne.n	800264a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b07      	cmp	r3, #7
 800262e:	d809      	bhi.n	8002644 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002630:	2200      	movs	r2, #0
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	f04f 30ff 	mov.w	r0, #4294967295
 8002638:	f000 f937 	bl	80028aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800263c:	4a0a      	ldr	r2, [pc, #40]	@ (8002668 <HAL_InitTick+0x74>)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	e007      	b.n	8002654 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
 8002648:	e004      	b.n	8002654 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	73fb      	strb	r3, [r7, #15]
 800264e:	e001      	b.n	8002654 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002654:	7bfb      	ldrb	r3, [r7, #15]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000008 	.word	0x20000008
 8002664:	20000000 	.word	0x20000000
 8002668:	20000004 	.word	0x20000004

0800266c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002670:	4b06      	ldr	r3, [pc, #24]	@ (800268c <HAL_IncTick+0x20>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <HAL_IncTick+0x24>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4413      	add	r3, r2
 800267c:	4a04      	ldr	r2, [pc, #16]	@ (8002690 <HAL_IncTick+0x24>)
 800267e:	6013      	str	r3, [r2, #0]
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20000008 	.word	0x20000008
 8002690:	2000017c 	.word	0x2000017c

08002694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return uwTick;
 8002698:	4b03      	ldr	r3, [pc, #12]	@ (80026a8 <HAL_GetTick+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	2000017c 	.word	0x2000017c

080026ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026b4:	f7ff ffee 	bl	8002694 <HAL_GetTick>
 80026b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c4:	d005      	beq.n	80026d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80026c6:	4b0a      	ldr	r3, [pc, #40]	@ (80026f0 <HAL_Delay+0x44>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4413      	add	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026d2:	bf00      	nop
 80026d4:	f7ff ffde 	bl	8002694 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d8f7      	bhi.n	80026d4 <HAL_Delay+0x28>
  {
  }
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000008 	.word	0x20000008

080026f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002704:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <__NVIC_SetPriorityGrouping+0x44>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002710:	4013      	ands	r3, r2
 8002712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800271c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002726:	4a04      	ldr	r2, [pc, #16]	@ (8002738 <__NVIC_SetPriorityGrouping+0x44>)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	60d3      	str	r3, [r2, #12]
}
 800272c:	bf00      	nop
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002740:	4b04      	ldr	r3, [pc, #16]	@ (8002754 <__NVIC_GetPriorityGrouping+0x18>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	0a1b      	lsrs	r3, r3, #8
 8002746:	f003 0307 	and.w	r3, r3, #7
}
 800274a:	4618      	mov	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	2b00      	cmp	r3, #0
 8002768:	db0b      	blt.n	8002782 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	f003 021f 	and.w	r2, r3, #31
 8002770:	4907      	ldr	r1, [pc, #28]	@ (8002790 <__NVIC_EnableIRQ+0x38>)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	2001      	movs	r0, #1
 800277a:	fa00 f202 	lsl.w	r2, r0, r2
 800277e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	e000e100 	.word	0xe000e100

08002794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	6039      	str	r1, [r7, #0]
 800279e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	db0a      	blt.n	80027be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	490c      	ldr	r1, [pc, #48]	@ (80027e0 <__NVIC_SetPriority+0x4c>)
 80027ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b2:	0152      	lsls	r2, r2, #5
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	440b      	add	r3, r1
 80027b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027bc:	e00a      	b.n	80027d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	4908      	ldr	r1, [pc, #32]	@ (80027e4 <__NVIC_SetPriority+0x50>)
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	3b04      	subs	r3, #4
 80027cc:	0152      	lsls	r2, r2, #5
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	440b      	add	r3, r1
 80027d2:	761a      	strb	r2, [r3, #24]
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	e000e100 	.word	0xe000e100
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b089      	sub	sp, #36	@ 0x24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f1c3 0307 	rsb	r3, r3, #7
 8002802:	2b03      	cmp	r3, #3
 8002804:	bf28      	it	cs
 8002806:	2303      	movcs	r3, #3
 8002808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3303      	adds	r3, #3
 800280e:	2b06      	cmp	r3, #6
 8002810:	d902      	bls.n	8002818 <NVIC_EncodePriority+0x30>
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3b04      	subs	r3, #4
 8002816:	e000      	b.n	800281a <NVIC_EncodePriority+0x32>
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281c:	f04f 32ff 	mov.w	r2, #4294967295
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43da      	mvns	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	401a      	ands	r2, r3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002830:	f04f 31ff 	mov.w	r1, #4294967295
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	fa01 f303 	lsl.w	r3, r1, r3
 800283a:	43d9      	mvns	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002840:	4313      	orrs	r3, r2
         );
}
 8002842:	4618      	mov	r0, r3
 8002844:	3724      	adds	r7, #36	@ 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3b01      	subs	r3, #1
 800285c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002860:	d301      	bcc.n	8002866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002862:	2301      	movs	r3, #1
 8002864:	e00f      	b.n	8002886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002866:	4a0a      	ldr	r2, [pc, #40]	@ (8002890 <SysTick_Config+0x40>)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3b01      	subs	r3, #1
 800286c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800286e:	2107      	movs	r1, #7
 8002870:	f04f 30ff 	mov.w	r0, #4294967295
 8002874:	f7ff ff8e 	bl	8002794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002878:	4b05      	ldr	r3, [pc, #20]	@ (8002890 <SysTick_Config+0x40>)
 800287a:	2200      	movs	r2, #0
 800287c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800287e:	4b04      	ldr	r3, [pc, #16]	@ (8002890 <SysTick_Config+0x40>)
 8002880:	2207      	movs	r2, #7
 8002882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	e000e010 	.word	0xe000e010

08002894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff ff29 	bl	80026f4 <__NVIC_SetPriorityGrouping>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b086      	sub	sp, #24
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	4603      	mov	r3, r0
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
 80028b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028b8:	f7ff ff40 	bl	800273c <__NVIC_GetPriorityGrouping>
 80028bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68b9      	ldr	r1, [r7, #8]
 80028c2:	6978      	ldr	r0, [r7, #20]
 80028c4:	f7ff ff90 	bl	80027e8 <NVIC_EncodePriority>
 80028c8:	4602      	mov	r2, r0
 80028ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff5f 	bl	8002794 <__NVIC_SetPriority>
}
 80028d6:	bf00      	nop
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	4603      	mov	r3, r0
 80028e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff33 	bl	8002758 <__NVIC_EnableIRQ>
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7ff ffa4 	bl	8002850 <SysTick_Config>
 8002908:	4603      	mov	r3, r0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e08d      	b.n	8002a42 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	4b47      	ldr	r3, [pc, #284]	@ (8002a4c <HAL_DMA_Init+0x138>)
 800292e:	429a      	cmp	r2, r3
 8002930:	d80f      	bhi.n	8002952 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	4b45      	ldr	r3, [pc, #276]	@ (8002a50 <HAL_DMA_Init+0x13c>)
 800293a:	4413      	add	r3, r2
 800293c:	4a45      	ldr	r2, [pc, #276]	@ (8002a54 <HAL_DMA_Init+0x140>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	091b      	lsrs	r3, r3, #4
 8002944:	009a      	lsls	r2, r3, #2
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	64da      	str	r2, [r3, #76]	@ 0x4c
    hdma->DmaBaseAddress = DMA1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a42      	ldr	r2, [pc, #264]	@ (8002a58 <HAL_DMA_Init+0x144>)
 800294e:	649a      	str	r2, [r3, #72]	@ 0x48
 8002950:	e00e      	b.n	8002970 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	4b40      	ldr	r3, [pc, #256]	@ (8002a5c <HAL_DMA_Init+0x148>)
 800295a:	4413      	add	r3, r2
 800295c:	4a3d      	ldr	r2, [pc, #244]	@ (8002a54 <HAL_DMA_Init+0x140>)
 800295e:	fba2 2303 	umull	r2, r3, r2, r3
 8002962:	091b      	lsrs	r3, r3, #4
 8002964:	009a      	lsls	r2, r3, #2
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	64da      	str	r2, [r3, #76]	@ 0x4c
    hdma->DmaBaseAddress = DMA2;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a3c      	ldr	r2, [pc, #240]	@ (8002a60 <HAL_DMA_Init+0x14c>)
 800296e:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f423 33ff 	bic.w	r3, r3, #130560	@ 0x1fe00
 8002986:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 800298a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002994:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fa38 	bl	8002e38 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029d0:	d102      	bne.n	80029d8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80029ec:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d010      	beq.n	8002a18 <HAL_DMA_Init+0x104>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d80c      	bhi.n	8002a18 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 fa58 	bl	8002eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	e008      	b.n	8002a2a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40020407 	.word	0x40020407
 8002a50:	bffdfff8 	.word	0xbffdfff8
 8002a54:	cccccccd 	.word	0xcccccccd
 8002a58:	40020000 	.word	0x40020000
 8002a5c:	bffdfbf8 	.word	0xbffdfbf8
 8002a60:	40020400 	.word	0x40020400

08002a64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_DMA_Start_IT+0x20>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e066      	b.n	8002b52 <HAL_DMA_Start_IT+0xee>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d155      	bne.n	8002b44 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0201 	bic.w	r2, r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	68b9      	ldr	r1, [r7, #8]
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f97c 	bl	8002dba <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d008      	beq.n	8002adc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 020e 	orr.w	r2, r2, #14
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	e00f      	b.n	8002afc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0204 	bic.w	r2, r2, #4
 8002aea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 020a 	orr.w	r2, r2, #10
 8002afa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d007      	beq.n	8002b1a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b18:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d007      	beq.n	8002b32 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b30:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0201 	orr.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	e005      	b.n	8002b50 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b76:	f003 031c 	and.w	r3, r3, #28
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d053      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xd4>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d04e      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d024      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba2:	f003 021c 	and.w	r2, r3, #28
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002baa:	2104      	movs	r1, #4
 8002bac:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb0:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d109      	bne.n	8002bd4 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80c0 	beq.w	8002d4a <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002bd2:	e0ba      	b.n	8002d4a <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80b6 	beq.w	8002d4a <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002be6:	e0b0      	b.n	8002d4a <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0320 	and.w	r3, r3, #32
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d107      	bne.n	8002c06 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0204 	bic.w	r2, r2, #4
 8002c04:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c0a:	f003 021c 	and.w	r2, r3, #28
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c12:	2104      	movs	r1, #4
 8002c14:	fa01 f202 	lsl.w	r2, r1, r2
 8002c18:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 8093 	beq.w	8002d4a <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002c2c:	e08d      	b.n	8002d4a <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c32:	f003 031c 	and.w	r3, r3, #28
 8002c36:	2202      	movs	r2, #2
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d04e      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x186>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d049      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d018      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d108      	bne.n	8002c7a <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d06e      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002c78:	e069      	b.n	8002d4e <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d065      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002c8a:	e060      	b.n	8002d4e <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10b      	bne.n	8002cb2 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 020a 	bic.w	r2, r2, #10
 8002ca8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cb6:	f003 021c 	and.w	r2, r3, #28
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cbe:	2102      	movs	r1, #2
 8002cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc4:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if(hdma->XferCpltCallback != NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d03b      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002cde:	e036      	b.n	8002d4e <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ce4:	f003 031c 	and.w	r3, r3, #28
 8002ce8:	2208      	movs	r2, #8
 8002cea:	409a      	lsls	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d02e      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x1f8>
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d029      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 020e 	bic.w	r2, r2, #14
 8002d0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d12:	f003 021c 	and.w	r2, r3, #28
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d20:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d48:	e002      	b.n	8002d50 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002d4a:	bf00      	nop
 8002d4c:	e000      	b.n	8002d50 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002d4e:	bf00      	nop
  return;
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
}
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b085      	sub	sp, #20
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d64:	2300      	movs	r3, #0
 8002d66:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d103      	bne.n	8002d76 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	72fb      	strb	r3, [r7, #11]
    return status;
 8002d72:	7afb      	ldrb	r3, [r7, #11]
 8002d74:	e01b      	b.n	8002dae <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00d      	beq.n	8002da4 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d004      	beq.n	8002d9c <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	e003      	b.n	8002da4 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002da2:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	601a      	str	r2, [r3, #0]

  return status;
 8002dac:	7afb      	ldrb	r3, [r7, #11]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b085      	sub	sp, #20
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002dd0:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d004      	beq.n	8002de4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8002de2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de8:	f003 021c 	and.w	r2, r3, #28
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002df0:	2101      	movs	r1, #1
 8002df2:	fa01 f202 	lsl.w	r2, r1, r2
 8002df6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2b10      	cmp	r3, #16
 8002e06:	d108      	bne.n	8002e1a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 8002e18:	e007      	b.n	8002e2a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	60da      	str	r2, [r3, #12]
}
 8002e2a:	bf00      	nop
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b17      	ldr	r3, [pc, #92]	@ (8002ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d80a      	bhi.n	8002e62 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e50:	089b      	lsrs	r3, r3, #2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e58:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e60:	e007      	b.n	8002e72 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e66:	089b      	lsrs	r3, r3, #2
 8002e68:	009a      	lsls	r2, r3, #2
 8002e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002e6c:	4413      	add	r3, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	3b08      	subs	r3, #8
 8002e7a:	4a0c      	ldr	r2, [pc, #48]	@ (8002eac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002e88:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	2201      	movs	r2, #1
 8002e92:	409a      	lsls	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002e98:	bf00      	nop
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	40020407 	.word	0x40020407
 8002ea8:	40020820 	.word	0x40020820
 8002eac:	cccccccd 	.word	0xcccccccd
 8002eb0:	40020880 	.word	0x40020880

08002eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	461a      	mov	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	65da      	str	r2, [r3, #92]	@ 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a08      	ldr	r2, [pc, #32]	@ (8002ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002ed6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	665a      	str	r2, [r3, #100]	@ 0x64
}
 8002ee8:	bf00      	nop
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	1000823f 	.word	0x1000823f
 8002ef8:	40020940 	.word	0x40020940

08002efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b087      	sub	sp, #28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f0a:	e158      	b.n	80031be <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	2101      	movs	r1, #1
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	fa01 f303 	lsl.w	r3, r1, r3
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 814a 	beq.w	80031b8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d005      	beq.n	8002f3c <HAL_GPIO_Init+0x40>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d130      	bne.n	8002f9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	2203      	movs	r2, #3
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4013      	ands	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f72:	2201      	movs	r2, #1
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	091b      	lsrs	r3, r3, #4
 8002f88:	f003 0201 	and.w	r2, r3, #1
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d017      	beq.n	8002fda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d123      	bne.n	800302e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	08da      	lsrs	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3208      	adds	r2, #8
 8002fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	220f      	movs	r2, #15
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43db      	mvns	r3, r3
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4013      	ands	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	08da      	lsrs	r2, r3, #3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3208      	adds	r2, #8
 8003028:	6939      	ldr	r1, [r7, #16]
 800302a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	2203      	movs	r2, #3
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4013      	ands	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 0203 	and.w	r2, r3, #3
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 80a4 	beq.w	80031b8 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8003070:	4a5a      	ldr	r2, [pc, #360]	@ (80031dc <HAL_GPIO_Init+0x2e0>)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	089b      	lsrs	r3, r3, #2
 8003076:	3318      	adds	r3, #24
 8003078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800307c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	220f      	movs	r2, #15
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4013      	ands	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a52      	ldr	r2, [pc, #328]	@ (80031e0 <HAL_GPIO_Init+0x2e4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d025      	beq.n	80030e8 <HAL_GPIO_Init+0x1ec>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a51      	ldr	r2, [pc, #324]	@ (80031e4 <HAL_GPIO_Init+0x2e8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d01f      	beq.n	80030e4 <HAL_GPIO_Init+0x1e8>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a50      	ldr	r2, [pc, #320]	@ (80031e8 <HAL_GPIO_Init+0x2ec>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d019      	beq.n	80030e0 <HAL_GPIO_Init+0x1e4>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a4f      	ldr	r2, [pc, #316]	@ (80031ec <HAL_GPIO_Init+0x2f0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d013      	beq.n	80030dc <HAL_GPIO_Init+0x1e0>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a4e      	ldr	r2, [pc, #312]	@ (80031f0 <HAL_GPIO_Init+0x2f4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d00d      	beq.n	80030d8 <HAL_GPIO_Init+0x1dc>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a4d      	ldr	r2, [pc, #308]	@ (80031f4 <HAL_GPIO_Init+0x2f8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d007      	beq.n	80030d4 <HAL_GPIO_Init+0x1d8>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a4c      	ldr	r2, [pc, #304]	@ (80031f8 <HAL_GPIO_Init+0x2fc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d101      	bne.n	80030d0 <HAL_GPIO_Init+0x1d4>
 80030cc:	2306      	movs	r3, #6
 80030ce:	e00c      	b.n	80030ea <HAL_GPIO_Init+0x1ee>
 80030d0:	2307      	movs	r3, #7
 80030d2:	e00a      	b.n	80030ea <HAL_GPIO_Init+0x1ee>
 80030d4:	2305      	movs	r3, #5
 80030d6:	e008      	b.n	80030ea <HAL_GPIO_Init+0x1ee>
 80030d8:	2304      	movs	r3, #4
 80030da:	e006      	b.n	80030ea <HAL_GPIO_Init+0x1ee>
 80030dc:	2303      	movs	r3, #3
 80030de:	e004      	b.n	80030ea <HAL_GPIO_Init+0x1ee>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e002      	b.n	80030ea <HAL_GPIO_Init+0x1ee>
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <HAL_GPIO_Init+0x1ee>
 80030e8:	2300      	movs	r3, #0
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	f002 0203 	and.w	r2, r2, #3
 80030f0:	00d2      	lsls	r2, r2, #3
 80030f2:	4093      	lsls	r3, r2
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80030fa:	4938      	ldr	r1, [pc, #224]	@ (80031dc <HAL_GPIO_Init+0x2e0>)
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	089b      	lsrs	r3, r3, #2
 8003100:	3318      	adds	r3, #24
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003108:	4b34      	ldr	r3, [pc, #208]	@ (80031dc <HAL_GPIO_Init+0x2e0>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	43db      	mvns	r3, r3
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4013      	ands	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800312c:	4a2b      	ldr	r2, [pc, #172]	@ (80031dc <HAL_GPIO_Init+0x2e0>)
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003132:	4b2a      	ldr	r3, [pc, #168]	@ (80031dc <HAL_GPIO_Init+0x2e0>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	43db      	mvns	r3, r3
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4013      	ands	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003156:	4a21      	ldr	r2, [pc, #132]	@ (80031dc <HAL_GPIO_Init+0x2e0>)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800315c:	4b1f      	ldr	r3, [pc, #124]	@ (80031dc <HAL_GPIO_Init+0x2e0>)
 800315e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	43db      	mvns	r3, r3
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4013      	ands	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003182:	4a16      	ldr	r2, [pc, #88]	@ (80031dc <HAL_GPIO_Init+0x2e0>)
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 800318a:	4b14      	ldr	r3, [pc, #80]	@ (80031dc <HAL_GPIO_Init+0x2e0>)
 800318c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	43db      	mvns	r3, r3
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4013      	ands	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031b0:	4a0a      	ldr	r2, [pc, #40]	@ (80031dc <HAL_GPIO_Init+0x2e0>)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	3301      	adds	r3, #1
 80031bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	fa22 f303 	lsr.w	r3, r2, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f47f ae9f 	bne.w	8002f0c <HAL_GPIO_Init+0x10>
  }
}
 80031ce:	bf00      	nop
 80031d0:	bf00      	nop
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	4002f400 	.word	0x4002f400
 80031e0:	42020000 	.word	0x42020000
 80031e4:	42020400 	.word	0x42020400
 80031e8:	42020800 	.word	0x42020800
 80031ec:	42020c00 	.word	0x42020c00
 80031f0:	42021000 	.word	0x42021000
 80031f4:	42021400 	.word	0x42021400
 80031f8:	42021800 	.word	0x42021800

080031fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	807b      	strh	r3, [r7, #2]
 8003208:	4613      	mov	r3, r2
 800320a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800320c:	787b      	ldrb	r3, [r7, #1]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003212:	887a      	ldrh	r2, [r7, #2]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003218:	e002      	b.n	8003220 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800321a:	887a      	ldrh	r2, [r7, #2]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003238:	4b0b      	ldr	r3, [pc, #44]	@ (8003268 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]
 8003248:	e007      	b.n	800325a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800324a:	4b07      	ldr	r3, [pc, #28]	@ (8003268 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 0204 	bic.w	r2, r3, #4
 8003252:	4905      	ldr	r1, [pc, #20]	@ (8003268 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4313      	orrs	r3, r2
 8003258:	600b      	str	r3, [r1, #0]
  }

  return status;
 800325a:	7bfb      	ldrb	r3, [r7, #15]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	40030400 	.word	0x40030400

0800326c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003270:	4b05      	ldr	r3, [pc, #20]	@ (8003288 <HAL_ICACHE_Enable+0x1c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a04      	ldr	r2, [pc, #16]	@ (8003288 <HAL_ICACHE_Enable+0x1c>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	40030400 	.word	0x40030400

0800328c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003290:	4b04      	ldr	r3, [pc, #16]	@ (80032a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003298:	4618      	mov	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40007000 	.word	0x40007000

080032a8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80032b0:	4b27      	ldr	r3, [pc, #156]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032b8:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80032ba:	f000 f871 	bl	80033a0 <HAL_PWREx_SMPS_GetEffectiveMode>
 80032be:	4603      	mov	r3, r0
 80032c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032c4:	d101      	bne.n	80032ca <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e03e      	b.n	8003348 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80032ca:	4b21      	ldr	r3, [pc, #132]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032d6:	d101      	bne.n	80032dc <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e035      	b.n	8003348 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d101      	bne.n	80032e8 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	e02f      	b.n	8003348 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80032e8:	4b19      	ldr	r3, [pc, #100]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80032f0:	4917      	ldr	r1, [pc, #92]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80032f8:	4b16      	ldr	r3, [pc, #88]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	095b      	lsrs	r3, r3, #5
 80032fe:	4a16      	ldr	r2, [pc, #88]	@ (8003358 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003300:	fba2 2303 	umull	r2, r3, r2, r3
 8003304:	09db      	lsrs	r3, r3, #7
 8003306:	2232      	movs	r2, #50	@ 0x32
 8003308:	fb02 f303 	mul.w	r3, r2, r3
 800330c:	4a13      	ldr	r2, [pc, #76]	@ (800335c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	08db      	lsrs	r3, r3, #3
 8003314:	3301      	adds	r3, #1
 8003316:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003318:	e002      	b.n	8003320 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	3b01      	subs	r3, #1
 800331e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003320:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003328:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800332c:	d102      	bne.n	8003334 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1f2      	bne.n	800331a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003334:	4b06      	ldr	r3, [pc, #24]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800333c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003340:	d101      	bne.n	8003346 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e000      	b.n	8003348 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40007000 	.word	0x40007000
 8003354:	20000000 	.word	0x20000000
 8003358:	0a7c5ac5 	.word	0x0a7c5ac5
 800335c:	cccccccd 	.word	0xcccccccd

08003360 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003364:	4b05      	ldr	r3, [pc, #20]	@ (800337c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4a04      	ldr	r2, [pc, #16]	@ (800337c <HAL_PWREx_EnableVddIO2+0x1c>)
 800336a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800336e:	6053      	str	r3, [r2, #4]
}
 8003370:	bf00      	nop
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40007000 	.word	0x40007000

08003380 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003384:	4b05      	ldr	r3, [pc, #20]	@ (800339c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	4a04      	ldr	r2, [pc, #16]	@ (800339c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800338a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800338e:	6093      	str	r3, [r2, #8]
}
 8003390:	bf00      	nop
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40007000 	.word	0x40007000

080033a0 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80033a6:	4b0f      	ldr	r3, [pc, #60]	@ (80033e4 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80033b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033ba:	607b      	str	r3, [r7, #4]
 80033bc:	e00a      	b.n	80033d4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d103      	bne.n	80033d0 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80033c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033cc:	607b      	str	r3, [r7, #4]
 80033ce:	e001      	b.n	80033d4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80033d0:	2300      	movs	r3, #0
 80033d2:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80033d4:	687b      	ldr	r3, [r7, #4]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	40007000 	.word	0x40007000

080033e8 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d102      	bne.n	80033fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	f000 bcc2 	b.w	8003d80 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033fc:	4b99      	ldr	r3, [pc, #612]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 030c 	and.w	r3, r3, #12
 8003404:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003406:	4b97      	ldr	r3, [pc, #604]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 80e9 	beq.w	80035f0 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d006      	beq.n	8003432 <HAL_RCC_OscConfig+0x4a>
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	2b0c      	cmp	r3, #12
 8003428:	f040 8083 	bne.w	8003532 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d17f      	bne.n	8003532 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003432:	4b8c      	ldr	r3, [pc, #560]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d006      	beq.n	800344c <HAL_RCC_OscConfig+0x64>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d102      	bne.n	800344c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	f000 bc9a 	b.w	8003d80 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003450:	4b84      	ldr	r3, [pc, #528]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d004      	beq.n	8003466 <HAL_RCC_OscConfig+0x7e>
 800345c:	4b81      	ldr	r3, [pc, #516]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003464:	e005      	b.n	8003472 <HAL_RCC_OscConfig+0x8a>
 8003466:	4b7f      	ldr	r3, [pc, #508]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003468:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800346c:	091b      	lsrs	r3, r3, #4
 800346e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003472:	4293      	cmp	r3, r2
 8003474:	d224      	bcs.n	80034c0 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347a:	4618      	mov	r0, r3
 800347c:	f000 fe9c 	bl	80041b8 <RCC_SetFlashLatencyFromMSIRange>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	f000 bc7a 	b.w	8003d80 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800348c:	4b75      	ldr	r3, [pc, #468]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a74      	ldr	r2, [pc, #464]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003492:	f043 0308 	orr.w	r3, r3, #8
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	4b72      	ldr	r3, [pc, #456]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a4:	496f      	ldr	r1, [pc, #444]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034aa:	4b6e      	ldr	r3, [pc, #440]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	021b      	lsls	r3, r3, #8
 80034b8:	496a      	ldr	r1, [pc, #424]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	604b      	str	r3, [r1, #4]
 80034be:	e026      	b.n	800350e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034c0:	4b68      	ldr	r3, [pc, #416]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a67      	ldr	r2, [pc, #412]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 80034c6:	f043 0308 	orr.w	r3, r3, #8
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	4b65      	ldr	r3, [pc, #404]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d8:	4962      	ldr	r1, [pc, #392]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034de:	4b61      	ldr	r3, [pc, #388]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	021b      	lsls	r3, r3, #8
 80034ec:	495d      	ldr	r1, [pc, #372]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10a      	bne.n	800350e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 fe5b 	bl	80041b8 <RCC_SetFlashLatencyFromMSIRange>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	f000 bc39 	b.w	8003d80 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800350e:	f000 fe17 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 8003512:	4603      	mov	r3, r0
 8003514:	4a54      	ldr	r2, [pc, #336]	@ (8003668 <HAL_RCC_OscConfig+0x280>)
 8003516:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003518:	4b54      	ldr	r3, [pc, #336]	@ (800366c <HAL_RCC_OscConfig+0x284>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff f869 	bl	80025f4 <HAL_InitTick>
 8003522:	4603      	mov	r3, r0
 8003524:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8003526:	7bfb      	ldrb	r3, [r7, #15]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d060      	beq.n	80035ee <HAL_RCC_OscConfig+0x206>
        {
          return status;
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	f000 bc27 	b.w	8003d80 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d039      	beq.n	80035ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800353a:	4b4a      	ldr	r3, [pc, #296]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a49      	ldr	r2, [pc, #292]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003546:	f7ff f8a5 	bl	8002694 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800354c:	e00f      	b.n	800356e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800354e:	f7ff f8a1 	bl	8002694 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d908      	bls.n	800356e <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800355c:	4b41      	ldr	r3, [pc, #260]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d102      	bne.n	800356e <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	f000 bc09 	b.w	8003d80 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800356e:	4b3d      	ldr	r3, [pc, #244]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0e9      	beq.n	800354e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800357a:	4b3a      	ldr	r3, [pc, #232]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a39      	ldr	r2, [pc, #228]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003580:	f043 0308 	orr.w	r3, r3, #8
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	4b37      	ldr	r3, [pc, #220]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003592:	4934      	ldr	r1, [pc, #208]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003594:	4313      	orrs	r3, r2
 8003596:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003598:	4b32      	ldr	r3, [pc, #200]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	492f      	ldr	r1, [pc, #188]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	604b      	str	r3, [r1, #4]
 80035ac:	e020      	b.n	80035f0 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a2c      	ldr	r2, [pc, #176]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 80035b4:	f023 0301 	bic.w	r3, r3, #1
 80035b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035ba:	f7ff f86b 	bl	8002694 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035c0:	e00e      	b.n	80035e0 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035c2:	f7ff f867 	bl	8002694 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d907      	bls.n	80035e0 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035d0:	4b24      	ldr	r3, [pc, #144]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e3cf      	b.n	8003d80 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035e0:	4b20      	ldr	r3, [pc, #128]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1ea      	bne.n	80035c2 <HAL_RCC_OscConfig+0x1da>
 80035ec:	e000      	b.n	80035f0 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d07e      	beq.n	80036fa <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d005      	beq.n	800360e <HAL_RCC_OscConfig+0x226>
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	2b0c      	cmp	r3, #12
 8003606:	d10e      	bne.n	8003626 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2b03      	cmp	r3, #3
 800360c:	d10b      	bne.n	8003626 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360e:	4b15      	ldr	r3, [pc, #84]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d06e      	beq.n	80036f8 <HAL_RCC_OscConfig+0x310>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d16a      	bne.n	80036f8 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e3ac      	b.n	8003d80 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800362e:	d106      	bne.n	800363e <HAL_RCC_OscConfig+0x256>
 8003630:	4b0c      	ldr	r3, [pc, #48]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a0b      	ldr	r2, [pc, #44]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003636:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	e024      	b.n	8003688 <HAL_RCC_OscConfig+0x2a0>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003646:	d113      	bne.n	8003670 <HAL_RCC_OscConfig+0x288>
 8003648:	4b06      	ldr	r3, [pc, #24]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a05      	ldr	r2, [pc, #20]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 800364e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	4b03      	ldr	r3, [pc, #12]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a02      	ldr	r2, [pc, #8]	@ (8003664 <HAL_RCC_OscConfig+0x27c>)
 800365a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	e012      	b.n	8003688 <HAL_RCC_OscConfig+0x2a0>
 8003662:	bf00      	nop
 8003664:	40021000 	.word	0x40021000
 8003668:	20000000 	.word	0x20000000
 800366c:	20000004 	.word	0x20000004
 8003670:	4b8b      	ldr	r3, [pc, #556]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a8a      	ldr	r2, [pc, #552]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003676:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	4b88      	ldr	r3, [pc, #544]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a87      	ldr	r2, [pc, #540]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003682:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d019      	beq.n	80036c4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7ff f800 	bl	8002694 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003696:	e00e      	b.n	80036b6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003698:	f7fe fffc 	bl	8002694 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b64      	cmp	r3, #100	@ 0x64
 80036a4:	d907      	bls.n	80036b6 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036a6:	4b7e      	ldr	r3, [pc, #504]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e364      	b.n	8003d80 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036b6:	4b7a      	ldr	r3, [pc, #488]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0ea      	beq.n	8003698 <HAL_RCC_OscConfig+0x2b0>
 80036c2:	e01a      	b.n	80036fa <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c4:	f7fe ffe6 	bl	8002694 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036ca:	e00e      	b.n	80036ea <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036cc:	f7fe ffe2 	bl	8002694 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b64      	cmp	r3, #100	@ 0x64
 80036d8:	d907      	bls.n	80036ea <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036da:	4b71      	ldr	r3, [pc, #452]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e34a      	b.n	8003d80 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036ea:	4b6d      	ldr	r3, [pc, #436]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1ea      	bne.n	80036cc <HAL_RCC_OscConfig+0x2e4>
 80036f6:	e000      	b.n	80036fa <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d06c      	beq.n	80037e0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	2b04      	cmp	r3, #4
 800370a:	d005      	beq.n	8003718 <HAL_RCC_OscConfig+0x330>
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2b0c      	cmp	r3, #12
 8003710:	d119      	bne.n	8003746 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d116      	bne.n	8003746 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003718:	4b61      	ldr	r3, [pc, #388]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_RCC_OscConfig+0x348>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e327      	b.n	8003d80 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003730:	4b5b      	ldr	r3, [pc, #364]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	061b      	lsls	r3, r3, #24
 800373e:	4958      	ldr	r1, [pc, #352]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003740:	4313      	orrs	r3, r2
 8003742:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003744:	e04c      	b.n	80037e0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d029      	beq.n	80037a2 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800374e:	4b54      	ldr	r3, [pc, #336]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a53      	ldr	r2, [pc, #332]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375a:	f7fe ff9b 	bl	8002694 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003760:	e00e      	b.n	8003780 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003762:	f7fe ff97 	bl	8002694 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d907      	bls.n	8003780 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003770:	4b4b      	ldr	r3, [pc, #300]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e2ff      	b.n	8003d80 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003780:	4b47      	ldr	r3, [pc, #284]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0ea      	beq.n	8003762 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378c:	4b44      	ldr	r3, [pc, #272]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	061b      	lsls	r3, r3, #24
 800379a:	4941      	ldr	r1, [pc, #260]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 800379c:	4313      	orrs	r3, r2
 800379e:	604b      	str	r3, [r1, #4]
 80037a0:	e01e      	b.n	80037e0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037a2:	4b3f      	ldr	r3, [pc, #252]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a3e      	ldr	r2, [pc, #248]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 80037a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ae:	f7fe ff71 	bl	8002694 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037b4:	e00e      	b.n	80037d4 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b6:	f7fe ff6d 	bl	8002694 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d907      	bls.n	80037d4 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037c4:	4b36      	ldr	r3, [pc, #216]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e2d5      	b.n	8003d80 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037d4:	4b32      	ldr	r3, [pc, #200]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1ea      	bne.n	80037b6 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d062      	beq.n	80038b2 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d038      	beq.n	8003866 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d108      	bne.n	800380e <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80037fc:	4b28      	ldr	r3, [pc, #160]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 80037fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003802:	4a27      	ldr	r2, [pc, #156]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003804:	f023 0310 	bic.w	r3, r3, #16
 8003808:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800380c:	e007      	b.n	800381e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800380e:	4b24      	ldr	r3, [pc, #144]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003810:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003814:	4a22      	ldr	r2, [pc, #136]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003816:	f043 0310 	orr.w	r3, r3, #16
 800381a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800381e:	4b20      	ldr	r3, [pc, #128]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003820:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003824:	4a1e      	ldr	r2, [pc, #120]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382e:	f7fe ff31 	bl	8002694 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003834:	e00f      	b.n	8003856 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003836:	f7fe ff2d 	bl	8002694 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b07      	cmp	r3, #7
 8003842:	d908      	bls.n	8003856 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003844:	4b16      	ldr	r3, [pc, #88]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003846:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e294      	b.n	8003d80 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003856:	4b12      	ldr	r3, [pc, #72]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003858:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0e8      	beq.n	8003836 <HAL_RCC_OscConfig+0x44e>
 8003864:	e025      	b.n	80038b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003866:	4b0e      	ldr	r3, [pc, #56]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003868:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800386c:	4a0c      	ldr	r2, [pc, #48]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003876:	f7fe ff0d 	bl	8002694 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800387c:	e012      	b.n	80038a4 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800387e:	f7fe ff09 	bl	8002694 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b07      	cmp	r3, #7
 800388a:	d90b      	bls.n	80038a4 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800388c:	4b04      	ldr	r3, [pc, #16]	@ (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 800388e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d004      	beq.n	80038a4 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e270      	b.n	8003d80 <HAL_RCC_OscConfig+0x998>
 800389e:	bf00      	nop
 80038a0:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038a4:	4ba8      	ldr	r3, [pc, #672]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 80038a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1e5      	bne.n	800387e <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 812d 	beq.w	8003b1a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038c0:	2300      	movs	r3, #0
 80038c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038c4:	4ba0      	ldr	r3, [pc, #640]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 80038c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10d      	bne.n	80038ec <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d0:	4b9d      	ldr	r3, [pc, #628]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 80038d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d4:	4a9c      	ldr	r2, [pc, #624]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 80038d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038da:	6593      	str	r3, [r2, #88]	@ 0x58
 80038dc:	4b9a      	ldr	r3, [pc, #616]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 80038de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038e4:	60bb      	str	r3, [r7, #8]
 80038e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e8:	2301      	movs	r3, #1
 80038ea:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ec:	4b97      	ldr	r3, [pc, #604]	@ (8003b4c <HAL_RCC_OscConfig+0x764>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d11e      	bne.n	8003936 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038f8:	4b94      	ldr	r3, [pc, #592]	@ (8003b4c <HAL_RCC_OscConfig+0x764>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a93      	ldr	r2, [pc, #588]	@ (8003b4c <HAL_RCC_OscConfig+0x764>)
 80038fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003902:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003904:	f7fe fec6 	bl	8002694 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800390a:	e00e      	b.n	800392a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800390c:	f7fe fec2 	bl	8002694 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d907      	bls.n	800392a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800391a:	4b8c      	ldr	r3, [pc, #560]	@ (8003b4c <HAL_RCC_OscConfig+0x764>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e22a      	b.n	8003d80 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800392a:	4b88      	ldr	r3, [pc, #544]	@ (8003b4c <HAL_RCC_OscConfig+0x764>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0ea      	beq.n	800390c <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d01f      	beq.n	8003982 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b00      	cmp	r3, #0
 800394c:	d010      	beq.n	8003970 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800394e:	4b7e      	ldr	r3, [pc, #504]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 8003950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003954:	4a7c      	ldr	r2, [pc, #496]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 8003956:	f043 0304 	orr.w	r3, r3, #4
 800395a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800395e:	4b7a      	ldr	r3, [pc, #488]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 8003960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003964:	4a78      	ldr	r2, [pc, #480]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800396e:	e018      	b.n	80039a2 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003970:	4b75      	ldr	r3, [pc, #468]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 8003972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003976:	4a74      	ldr	r2, [pc, #464]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 8003978:	f043 0301 	orr.w	r3, r3, #1
 800397c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003980:	e00f      	b.n	80039a2 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003982:	4b71      	ldr	r3, [pc, #452]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 8003984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003988:	4a6f      	ldr	r2, [pc, #444]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 800398a:	f023 0301 	bic.w	r3, r3, #1
 800398e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003992:	4b6d      	ldr	r3, [pc, #436]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 8003994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003998:	4a6b      	ldr	r2, [pc, #428]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 800399a:	f023 0304 	bic.w	r3, r3, #4
 800399e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d068      	beq.n	8003a7c <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039aa:	f7fe fe73 	bl	8002694 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039b0:	e011      	b.n	80039d6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b2:	f7fe fe6f 	bl	8002694 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d908      	bls.n	80039d6 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039c4:	4b60      	ldr	r3, [pc, #384]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 80039c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e1d4      	b.n	8003d80 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039d6:	4b5c      	ldr	r3, [pc, #368]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 80039d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0e6      	beq.n	80039b2 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d022      	beq.n	8003a36 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80039f0:	4b55      	ldr	r3, [pc, #340]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039f6:	4a54      	ldr	r2, [pc, #336]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 80039f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003a00:	e011      	b.n	8003a26 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a02:	f7fe fe47 	bl	8002694 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d908      	bls.n	8003a26 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003a14:	4b4c      	ldr	r3, [pc, #304]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 8003a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e1ac      	b.n	8003d80 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003a26:	4b48      	ldr	r3, [pc, #288]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 8003a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0e6      	beq.n	8003a02 <HAL_RCC_OscConfig+0x61a>
 8003a34:	e068      	b.n	8003b08 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003a36:	4b44      	ldr	r3, [pc, #272]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 8003a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a3c:	4a42      	ldr	r2, [pc, #264]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 8003a3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a46:	e011      	b.n	8003a6c <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a48:	f7fe fe24 	bl	8002694 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d908      	bls.n	8003a6c <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 8003a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e189      	b.n	8003d80 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a6c:	4b36      	ldr	r3, [pc, #216]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e6      	bne.n	8003a48 <HAL_RCC_OscConfig+0x660>
 8003a7a:	e045      	b.n	8003b08 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a7c:	f7fe fe0a 	bl	8002694 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a82:	e011      	b.n	8003aa8 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a84:	f7fe fe06 	bl	8002694 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d908      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a96:	4b2c      	ldr	r3, [pc, #176]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 8003a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e16b      	b.n	8003d80 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003aa8:	4b27      	ldr	r3, [pc, #156]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1e6      	bne.n	8003a84 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003ab6:	4b24      	ldr	r3, [pc, #144]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 8003ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d021      	beq.n	8003b08 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003ac4:	4b20      	ldr	r3, [pc, #128]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 8003ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aca:	4a1f      	ldr	r2, [pc, #124]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 8003acc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ad0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ad4:	e011      	b.n	8003afa <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad6:	f7fe fddd 	bl	8002694 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d908      	bls.n	8003afa <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ae8:	4b17      	ldr	r3, [pc, #92]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 8003aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e142      	b.n	8003d80 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003afa:	4b13      	ldr	r3, [pc, #76]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 8003afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e6      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b08:	7ffb      	ldrb	r3, [r7, #31]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d105      	bne.n	8003b1a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 8003b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b12:	4a0d      	ldr	r2, [pc, #52]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 8003b14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b18:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d04f      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d028      	beq.n	8003b80 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b2e:	4b06      	ldr	r3, [pc, #24]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 8003b30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b34:	4a04      	ldr	r2, [pc, #16]	@ (8003b48 <HAL_RCC_OscConfig+0x760>)
 8003b36:	f043 0301 	orr.w	r3, r3, #1
 8003b3a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3e:	f7fe fda9 	bl	8002694 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b44:	e014      	b.n	8003b70 <HAL_RCC_OscConfig+0x788>
 8003b46:	bf00      	nop
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b50:	f7fe fda0 	bl	8002694 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d908      	bls.n	8003b70 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b5e:	4b8a      	ldr	r3, [pc, #552]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003b60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e107      	b.n	8003d80 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b70:	4b85      	ldr	r3, [pc, #532]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0e8      	beq.n	8003b50 <HAL_RCC_OscConfig+0x768>
 8003b7e:	e022      	b.n	8003bc6 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b80:	4b81      	ldr	r3, [pc, #516]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b86:	4a80      	ldr	r2, [pc, #512]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003b88:	f023 0301 	bic.w	r3, r3, #1
 8003b8c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b90:	f7fe fd80 	bl	8002694 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b96:	e00f      	b.n	8003bb8 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b98:	f7fe fd7c 	bl	8002694 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d908      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ba6:	4b78      	ldr	r3, [pc, #480]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003ba8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e0e3      	b.n	8003d80 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bb8:	4b73      	ldr	r3, [pc, #460]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e8      	bne.n	8003b98 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 80d7 	beq.w	8003d7e <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bd0:	4b6d      	ldr	r3, [pc, #436]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 030c 	and.w	r3, r3, #12
 8003bd8:	2b0c      	cmp	r3, #12
 8003bda:	f000 8091 	beq.w	8003d00 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d166      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be6:	4b68      	ldr	r3, [pc, #416]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a67      	ldr	r2, [pc, #412]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003bec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf2:	f7fe fd4f 	bl	8002694 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf8:	e00e      	b.n	8003c18 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfa:	f7fe fd4b 	bl	8002694 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d907      	bls.n	8003c18 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c08:	4b5f      	ldr	r3, [pc, #380]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e0b3      	b.n	8003d80 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c18:	4b5b      	ldr	r3, [pc, #364]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1ea      	bne.n	8003bfa <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c24:	4b58      	ldr	r3, [pc, #352]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	4b58      	ldr	r3, [pc, #352]	@ (8003d8c <HAL_RCC_OscConfig+0x9a4>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c34:	3a01      	subs	r2, #1
 8003c36:	0112      	lsls	r2, r2, #4
 8003c38:	4311      	orrs	r1, r2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c3e:	0212      	lsls	r2, r2, #8
 8003c40:	4311      	orrs	r1, r2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c46:	0852      	lsrs	r2, r2, #1
 8003c48:	3a01      	subs	r2, #1
 8003c4a:	0552      	lsls	r2, r2, #21
 8003c4c:	4311      	orrs	r1, r2
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003c52:	0852      	lsrs	r2, r2, #1
 8003c54:	3a01      	subs	r2, #1
 8003c56:	0652      	lsls	r2, r2, #25
 8003c58:	4311      	orrs	r1, r2
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c5e:	06d2      	lsls	r2, r2, #27
 8003c60:	430a      	orrs	r2, r1
 8003c62:	4949      	ldr	r1, [pc, #292]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c68:	4b47      	ldr	r3, [pc, #284]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a46      	ldr	r2, [pc, #280]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003c6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c72:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c74:	4b44      	ldr	r3, [pc, #272]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	4a43      	ldr	r2, [pc, #268]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003c7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c80:	f7fe fd08 	bl	8002694 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c86:	e00e      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c88:	f7fe fd04 	bl	8002694 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d907      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c96:	4b3c      	ldr	r3, [pc, #240]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e06c      	b.n	8003d80 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca6:	4b38      	ldr	r3, [pc, #224]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0ea      	beq.n	8003c88 <HAL_RCC_OscConfig+0x8a0>
 8003cb2:	e064      	b.n	8003d7e <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb4:	4b34      	ldr	r3, [pc, #208]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a33      	ldr	r2, [pc, #204]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003cba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7fe fce8 	bl	8002694 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc6:	e00e      	b.n	8003ce6 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc8:	f7fe fce4 	bl	8002694 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d907      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cd6:	4b2c      	ldr	r3, [pc, #176]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e04c      	b.n	8003d80 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ce6:	4b28      	ldr	r3, [pc, #160]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1ea      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003cf2:	4b25      	ldr	r3, [pc, #148]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	4924      	ldr	r1, [pc, #144]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003cf8:	4b25      	ldr	r3, [pc, #148]	@ (8003d90 <HAL_RCC_OscConfig+0x9a8>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	60cb      	str	r3, [r1, #12]
 8003cfe:	e03e      	b.n	8003d7e <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e039      	b.n	8003d80 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003d0c:	4b1e      	ldr	r3, [pc, #120]	@ (8003d88 <HAL_RCC_OscConfig+0x9a0>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 0203 	and.w	r2, r3, #3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d12c      	bne.n	8003d7a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d123      	bne.n	8003d7a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d11b      	bne.n	8003d7a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d4c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d113      	bne.n	8003d7a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5c:	085b      	lsrs	r3, r3, #1
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d109      	bne.n	8003d7a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d70:	085b      	lsrs	r3, r3, #1
 8003d72:	3b01      	subs	r3, #1
 8003d74:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d001      	beq.n	8003d7e <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3720      	adds	r7, #32
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	019f800c 	.word	0x019f800c
 8003d90:	feeefffc 	.word	0xfeeefffc

08003d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e11c      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dac:	4b90      	ldr	r3, [pc, #576]	@ (8003ff0 <HAL_RCC_ClockConfig+0x25c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 030f 	and.w	r3, r3, #15
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d910      	bls.n	8003ddc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dba:	4b8d      	ldr	r3, [pc, #564]	@ (8003ff0 <HAL_RCC_ClockConfig+0x25c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f023 020f 	bic.w	r2, r3, #15
 8003dc2:	498b      	ldr	r1, [pc, #556]	@ (8003ff0 <HAL_RCC_ClockConfig+0x25c>)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dca:	4b89      	ldr	r3, [pc, #548]	@ (8003ff0 <HAL_RCC_ClockConfig+0x25c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d001      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e104      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d010      	beq.n	8003e0a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	4b81      	ldr	r3, [pc, #516]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d908      	bls.n	8003e0a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003df8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	497b      	ldr	r1, [pc, #492]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 8085 	beq.w	8003f22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d11f      	bne.n	8003e60 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e20:	4b74      	ldr	r3, [pc, #464]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0da      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e30:	f000 fa26 	bl	8004280 <RCC_GetSysClockFreqFromPLLSource>
 8003e34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4a6f      	ldr	r2, [pc, #444]	@ (8003ff8 <HAL_RCC_ClockConfig+0x264>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d947      	bls.n	8003ece <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003e3e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d141      	bne.n	8003ece <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e4a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e52:	4a68      	ldr	r2, [pc, #416]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e5a:	2380      	movs	r3, #128	@ 0x80
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	e036      	b.n	8003ece <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d107      	bne.n	8003e78 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e68:	4b62      	ldr	r3, [pc, #392]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d115      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e0b6      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d107      	bne.n	8003e90 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e80:	4b5c      	ldr	r3, [pc, #368]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d109      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0aa      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e90:	4b58      	ldr	r3, [pc, #352]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0a2      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003ea0:	f000 f8b0 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8003ea4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	4a53      	ldr	r2, [pc, #332]	@ (8003ff8 <HAL_RCC_ClockConfig+0x264>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d90f      	bls.n	8003ece <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003eae:	4b51      	ldr	r3, [pc, #324]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d109      	bne.n	8003ece <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003eba:	4b4e      	ldr	r3, [pc, #312]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ec2:	4a4c      	ldr	r2, [pc, #304]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003ec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ec8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003eca:	2380      	movs	r3, #128	@ 0x80
 8003ecc:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ece:	4b49      	ldr	r3, [pc, #292]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f023 0203 	bic.w	r2, r3, #3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	4946      	ldr	r1, [pc, #280]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ee0:	f7fe fbd8 	bl	8002694 <HAL_GetTick>
 8003ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee6:	e013      	b.n	8003f10 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee8:	f7fe fbd4 	bl	8002694 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d90a      	bls.n	8003f10 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efa:	4b3e      	ldr	r3, [pc, #248]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 020c 	and.w	r2, r3, #12
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e06a      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f10:	4b38      	ldr	r3, [pc, #224]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 020c 	and.w	r2, r3, #12
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d1e2      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b80      	cmp	r3, #128	@ 0x80
 8003f26:	d105      	bne.n	8003f34 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f28:	4b32      	ldr	r3, [pc, #200]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4a31      	ldr	r2, [pc, #196]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003f2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f32:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d010      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	4b2b      	ldr	r3, [pc, #172]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d208      	bcs.n	8003f62 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f50:	4b28      	ldr	r3, [pc, #160]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	4925      	ldr	r1, [pc, #148]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f62:	4b23      	ldr	r3, [pc, #140]	@ (8003ff0 <HAL_RCC_ClockConfig+0x25c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d210      	bcs.n	8003f92 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f70:	4b1f      	ldr	r3, [pc, #124]	@ (8003ff0 <HAL_RCC_ClockConfig+0x25c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f023 020f 	bic.w	r2, r3, #15
 8003f78:	491d      	ldr	r1, [pc, #116]	@ (8003ff0 <HAL_RCC_ClockConfig+0x25c>)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f80:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff0 <HAL_RCC_ClockConfig+0x25c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 030f 	and.w	r3, r3, #15
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d001      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e029      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d008      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f9e:	4b15      	ldr	r3, [pc, #84]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	4912      	ldr	r1, [pc, #72]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d009      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	490a      	ldr	r1, [pc, #40]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003fd0:	f000 f8b6 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	4a09      	ldr	r2, [pc, #36]	@ (8003ffc <HAL_RCC_ClockConfig+0x268>)
 8003fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003fda:	4b09      	ldr	r3, [pc, #36]	@ (8004000 <HAL_RCC_ClockConfig+0x26c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fe fb08 	bl	80025f4 <HAL_InitTick>
 8003fe4:	4603      	mov	r3, r0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40022000 	.word	0x40022000
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	04c4b400 	.word	0x04c4b400
 8003ffc:	20000000 	.word	0x20000000
 8004000:	20000004 	.word	0x20000004

08004004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004004:	b480      	push	{r7}
 8004006:	b089      	sub	sp, #36	@ 0x24
 8004008:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	2300      	movs	r3, #0
 8004010:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004012:	4b47      	ldr	r3, [pc, #284]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800401c:	4b44      	ldr	r3, [pc, #272]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x12c>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_RCC_GetSysClockFreq+0x34>
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	2b0c      	cmp	r3, #12
 8004030:	d121      	bne.n	8004076 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d11e      	bne.n	8004076 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004038:	4b3d      	ldr	r3, [pc, #244]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x12c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b00      	cmp	r3, #0
 8004042:	d107      	bne.n	8004054 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004044:	4b3a      	ldr	r3, [pc, #232]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004046:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800404a:	0a1b      	lsrs	r3, r3, #8
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	e005      	b.n	8004060 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004054:	4b36      	ldr	r3, [pc, #216]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004060:	4a34      	ldr	r2, [pc, #208]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x130>)
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004068:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10d      	bne.n	800408c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004074:	e00a      	b.n	800408c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	2b04      	cmp	r3, #4
 800407a:	d102      	bne.n	8004082 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800407c:	4b2e      	ldr	r3, [pc, #184]	@ (8004138 <HAL_RCC_GetSysClockFreq+0x134>)
 800407e:	61bb      	str	r3, [r7, #24]
 8004080:	e004      	b.n	800408c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	2b08      	cmp	r3, #8
 8004086:	d101      	bne.n	800408c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004088:	4b2c      	ldr	r3, [pc, #176]	@ (800413c <HAL_RCC_GetSysClockFreq+0x138>)
 800408a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	2b0c      	cmp	r3, #12
 8004090:	d146      	bne.n	8004120 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004092:	4b27      	ldr	r3, [pc, #156]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800409c:	4b24      	ldr	r3, [pc, #144]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x12c>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	091b      	lsrs	r3, r3, #4
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	3301      	adds	r3, #1
 80040a8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d003      	beq.n	80040b8 <HAL_RCC_GetSysClockFreq+0xb4>
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	d00d      	beq.n	80040d2 <HAL_RCC_GetSysClockFreq+0xce>
 80040b6:	e019      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004138 <HAL_RCC_GetSysClockFreq+0x134>)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x12c>)
 80040c2:	68d2      	ldr	r2, [r2, #12]
 80040c4:	0a12      	lsrs	r2, r2, #8
 80040c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040ca:	fb02 f303 	mul.w	r3, r2, r3
 80040ce:	617b      	str	r3, [r7, #20]
        break;
 80040d0:	e019      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040d2:	4a1a      	ldr	r2, [pc, #104]	@ (800413c <HAL_RCC_GetSysClockFreq+0x138>)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040da:	4a15      	ldr	r2, [pc, #84]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x12c>)
 80040dc:	68d2      	ldr	r2, [r2, #12]
 80040de:	0a12      	lsrs	r2, r2, #8
 80040e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040e4:	fb02 f303 	mul.w	r3, r2, r3
 80040e8:	617b      	str	r3, [r7, #20]
        break;
 80040ea:	e00c      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040ec:	69fa      	ldr	r2, [r7, #28]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f4:	4a0e      	ldr	r2, [pc, #56]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x12c>)
 80040f6:	68d2      	ldr	r2, [r2, #12]
 80040f8:	0a12      	lsrs	r2, r2, #8
 80040fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040fe:	fb02 f303 	mul.w	r3, r2, r3
 8004102:	617b      	str	r3, [r7, #20]
        break;
 8004104:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004106:	4b0a      	ldr	r3, [pc, #40]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	0e5b      	lsrs	r3, r3, #25
 800410c:	f003 0303 	and.w	r3, r3, #3
 8004110:	3301      	adds	r3, #1
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	fbb2 f3f3 	udiv	r3, r2, r3
 800411e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004120:	69bb      	ldr	r3, [r7, #24]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3724      	adds	r7, #36	@ 0x24
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40021000 	.word	0x40021000
 8004134:	080063c0 	.word	0x080063c0
 8004138:	00f42400 	.word	0x00f42400
 800413c:	007a1200 	.word	0x007a1200

08004140 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004144:	f7ff ff5e 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8004148:	4602      	mov	r2, r0
 800414a:	4b05      	ldr	r3, [pc, #20]	@ (8004160 <HAL_RCC_GetHCLKFreq+0x20>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	091b      	lsrs	r3, r3, #4
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	4903      	ldr	r1, [pc, #12]	@ (8004164 <HAL_RCC_GetHCLKFreq+0x24>)
 8004156:	5ccb      	ldrb	r3, [r1, r3]
 8004158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800415c:	4618      	mov	r0, r3
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40021000 	.word	0x40021000
 8004164:	080063a8 	.word	0x080063a8

08004168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800416c:	f7ff ffe8 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 8004170:	4602      	mov	r2, r0
 8004172:	4b05      	ldr	r3, [pc, #20]	@ (8004188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	0a1b      	lsrs	r3, r3, #8
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	4903      	ldr	r1, [pc, #12]	@ (800418c <HAL_RCC_GetPCLK1Freq+0x24>)
 800417e:	5ccb      	ldrb	r3, [r1, r3]
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004184:	4618      	mov	r0, r3
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40021000 	.word	0x40021000
 800418c:	080063b8 	.word	0x080063b8

08004190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004194:	f7ff ffd4 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 8004198:	4602      	mov	r2, r0
 800419a:	4b05      	ldr	r3, [pc, #20]	@ (80041b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	0adb      	lsrs	r3, r3, #11
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	4903      	ldr	r1, [pc, #12]	@ (80041b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041a6:	5ccb      	ldrb	r3, [r1, r3]
 80041a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40021000 	.word	0x40021000
 80041b4:	080063b8 	.word	0x080063b8

080041b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041c4:	4b2c      	ldr	r3, [pc, #176]	@ (8004278 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80041c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041d0:	f7ff f85c 	bl	800328c <HAL_PWREx_GetVoltageRange>
 80041d4:	6138      	str	r0, [r7, #16]
 80041d6:	e014      	b.n	8004202 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041d8:	4b27      	ldr	r3, [pc, #156]	@ (8004278 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80041da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041dc:	4a26      	ldr	r2, [pc, #152]	@ (8004278 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80041de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80041e4:	4b24      	ldr	r3, [pc, #144]	@ (8004278 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80041e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041f0:	f7ff f84c 	bl	800328c <HAL_PWREx_GetVoltageRange>
 80041f4:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041f6:	4b20      	ldr	r3, [pc, #128]	@ (8004278 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80041f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fa:	4a1f      	ldr	r2, [pc, #124]	@ (8004278 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80041fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004200:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d003      	beq.n	8004210 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800420e:	d10b      	bne.n	8004228 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b80      	cmp	r3, #128	@ 0x80
 8004214:	d919      	bls.n	800424a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2ba0      	cmp	r3, #160	@ 0xa0
 800421a:	d902      	bls.n	8004222 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800421c:	2302      	movs	r3, #2
 800421e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004220:	e013      	b.n	800424a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004222:	2301      	movs	r3, #1
 8004224:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004226:	e010      	b.n	800424a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b80      	cmp	r3, #128	@ 0x80
 800422c:	d902      	bls.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800422e:	2303      	movs	r3, #3
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	e00a      	b.n	800424a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b80      	cmp	r3, #128	@ 0x80
 8004238:	d102      	bne.n	8004240 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800423a:	2302      	movs	r3, #2
 800423c:	617b      	str	r3, [r7, #20]
 800423e:	e004      	b.n	800424a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b70      	cmp	r3, #112	@ 0x70
 8004244:	d101      	bne.n	800424a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004246:	2301      	movs	r3, #1
 8004248:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800424a:	4b0c      	ldr	r3, [pc, #48]	@ (800427c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f023 020f 	bic.w	r2, r3, #15
 8004252:	490a      	ldr	r1, [pc, #40]	@ (800427c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	4313      	orrs	r3, r2
 8004258:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800425a:	4b08      	ldr	r3, [pc, #32]	@ (800427c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	429a      	cmp	r2, r3
 8004266:	d001      	beq.n	800426c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e000      	b.n	800426e <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40021000 	.word	0x40021000
 800427c:	40022000 	.word	0x40022000

08004280 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004286:	4b31      	ldr	r3, [pc, #196]	@ (800434c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004290:	4b2e      	ldr	r3, [pc, #184]	@ (800434c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	091b      	lsrs	r3, r3, #4
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	3301      	adds	r3, #1
 800429c:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d015      	beq.n	80042d0 <RCC_GetSysClockFreqFromPLLSource+0x50>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d839      	bhi.n	800431e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d01c      	beq.n	80042ea <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d133      	bne.n	800431e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042b6:	4a26      	ldr	r2, [pc, #152]	@ (8004350 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80042be:	4a23      	ldr	r2, [pc, #140]	@ (800434c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80042c0:	68d2      	ldr	r2, [r2, #12]
 80042c2:	0a12      	lsrs	r2, r2, #8
 80042c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80042c8:	fb02 f303 	mul.w	r3, r2, r3
 80042cc:	613b      	str	r3, [r7, #16]
      break;
 80042ce:	e029      	b.n	8004324 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042d0:	4a20      	ldr	r2, [pc, #128]	@ (8004354 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d8:	4a1c      	ldr	r2, [pc, #112]	@ (800434c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80042da:	68d2      	ldr	r2, [r2, #12]
 80042dc:	0a12      	lsrs	r2, r2, #8
 80042de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80042e2:	fb02 f303 	mul.w	r3, r2, r3
 80042e6:	613b      	str	r3, [r7, #16]
      break;
 80042e8:	e01c      	b.n	8004324 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042ea:	4b18      	ldr	r3, [pc, #96]	@ (800434c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d107      	bne.n	8004306 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042f6:	4b15      	ldr	r3, [pc, #84]	@ (800434c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80042f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042fc:	0a1b      	lsrs	r3, r3, #8
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	e005      	b.n	8004312 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004306:	4b11      	ldr	r3, [pc, #68]	@ (800434c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	091b      	lsrs	r3, r3, #4
 800430c:	f003 030f 	and.w	r3, r3, #15
 8004310:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8004312:	4a11      	ldr	r2, [pc, #68]	@ (8004358 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800431a:	613b      	str	r3, [r7, #16]
        break;
 800431c:	e002      	b.n	8004324 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800431e:	2300      	movs	r3, #0
 8004320:	613b      	str	r3, [r7, #16]
      break;
 8004322:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004324:	4b09      	ldr	r3, [pc, #36]	@ (800434c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	0e5b      	lsrs	r3, r3, #25
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	3301      	adds	r3, #1
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	fbb2 f3f3 	udiv	r3, r2, r3
 800433c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800433e:	683b      	ldr	r3, [r7, #0]
}
 8004340:	4618      	mov	r0, r3
 8004342:	371c      	adds	r7, #28
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	40021000 	.word	0x40021000
 8004350:	00f42400 	.word	0x00f42400
 8004354:	007a1200 	.word	0x007a1200
 8004358:	080063c0 	.word	0x080063c0

0800435c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004364:	2300      	movs	r3, #0
 8004366:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004368:	2300      	movs	r3, #0
 800436a:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004374:	2b00      	cmp	r3, #0
 8004376:	d040      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800437c:	2b80      	cmp	r3, #128	@ 0x80
 800437e:	d02a      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004380:	2b80      	cmp	r3, #128	@ 0x80
 8004382:	d825      	bhi.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004384:	2b60      	cmp	r3, #96	@ 0x60
 8004386:	d026      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004388:	2b60      	cmp	r3, #96	@ 0x60
 800438a:	d821      	bhi.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800438c:	2b40      	cmp	r3, #64	@ 0x40
 800438e:	d006      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004390:	2b40      	cmp	r3, #64	@ 0x40
 8004392:	d81d      	bhi.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004394:	2b00      	cmp	r3, #0
 8004396:	d009      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004398:	2b20      	cmp	r3, #32
 800439a:	d010      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x62>
 800439c:	e018      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800439e:	4b8f      	ldr	r3, [pc, #572]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	4a8e      	ldr	r2, [pc, #568]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043a8:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80043aa:	e015      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3304      	adds	r3, #4
 80043b0:	2100      	movs	r1, #0
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fb56 	bl	8004a64 <RCCEx_PLLSAI1_Config>
 80043b8:	4603      	mov	r3, r0
 80043ba:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80043bc:	e00c      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3320      	adds	r3, #32
 80043c2:	2100      	movs	r1, #0
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 fc33 	bl	8004c30 <RCCEx_PLLSAI2_Config>
 80043ca:	4603      	mov	r3, r0
 80043cc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80043ce:	e003      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	77fb      	strb	r3, [r7, #31]
        break;
 80043d4:	e000      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80043d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043d8:	7ffb      	ldrb	r3, [r7, #31]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10b      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043de:	4b7f      	ldr	r3, [pc, #508]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043e4:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043ec:	497b      	ldr	r1, [pc, #492]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80043f4:	e001      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f6:	7ffb      	ldrb	r3, [r7, #31]
 80043f8:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d047      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800440e:	d030      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004410:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004414:	d82a      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004416:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800441a:	d02a      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800441c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004420:	d824      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004422:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004426:	d008      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004428:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800442c:	d81e      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004436:	d010      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004438:	e018      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800443a:	4b68      	ldr	r3, [pc, #416]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	4a67      	ldr	r2, [pc, #412]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004444:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004446:	e015      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3304      	adds	r3, #4
 800444c:	2100      	movs	r1, #0
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fb08 	bl	8004a64 <RCCEx_PLLSAI1_Config>
 8004454:	4603      	mov	r3, r0
 8004456:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004458:	e00c      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3320      	adds	r3, #32
 800445e:	2100      	movs	r1, #0
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fbe5 	bl	8004c30 <RCCEx_PLLSAI2_Config>
 8004466:	4603      	mov	r3, r0
 8004468:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800446a:	e003      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	77fb      	strb	r3, [r7, #31]
        break;
 8004470:	e000      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8004472:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004474:	7ffb      	ldrb	r3, [r7, #31]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10b      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800447a:	4b58      	ldr	r3, [pc, #352]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800447c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004480:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004488:	4954      	ldr	r1, [pc, #336]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800448a:	4313      	orrs	r3, r2
 800448c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004490:	e001      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004492:	7ffb      	ldrb	r3, [r7, #31]
 8004494:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 80ab 	beq.w	80045fa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044a4:	2300      	movs	r3, #0
 80044a6:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044a8:	4b4c      	ldr	r3, [pc, #304]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10d      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b4:	4b49      	ldr	r3, [pc, #292]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b8:	4a48      	ldr	r2, [pc, #288]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044be:	6593      	str	r3, [r2, #88]	@ 0x58
 80044c0:	4b46      	ldr	r3, [pc, #280]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80044cc:	2301      	movs	r3, #1
 80044ce:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044d0:	4b43      	ldr	r3, [pc, #268]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a42      	ldr	r2, [pc, #264]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80044d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044dc:	f7fe f8da 	bl	8002694 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044e2:	e00f      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e4:	f7fe f8d6 	bl	8002694 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d908      	bls.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044f2:	4b3b      	ldr	r3, [pc, #236]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d109      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8004502:	e006      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004504:	4b36      	ldr	r3, [pc, #216]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0e9      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004510:	e000      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8004512:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8004514:	7ffb      	ldrb	r3, [r7, #31]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d164      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800451a:	4b30      	ldr	r3, [pc, #192]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800451c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004520:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004524:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d01f      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x210>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	429a      	cmp	r2, r3
 8004536:	d019      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004538:	4b28      	ldr	r3, [pc, #160]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800453a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004542:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004544:	4b25      	ldr	r3, [pc, #148]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800454a:	4a24      	ldr	r2, [pc, #144]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800454c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004550:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004554:	4b21      	ldr	r3, [pc, #132]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800455a:	4a20      	ldr	r2, [pc, #128]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800455c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004560:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004564:	4a1d      	ldr	r2, [pc, #116]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d01f      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004576:	f7fe f88d 	bl	8002694 <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800457c:	e012      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800457e:	f7fe f889 	bl	8002694 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	f241 3288 	movw	r2, #5000	@ 0x1388
 800458c:	4293      	cmp	r3, r2
 800458e:	d909      	bls.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004590:	4b12      	ldr	r3, [pc, #72]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10a      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80045a2:	e007      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045a4:	4b0d      	ldr	r3, [pc, #52]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0e5      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x222>
 80045b2:	e000      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80045b4:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80045b6:	7ffb      	ldrb	r3, [r7, #31]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10c      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045bc:	4b07      	ldr	r3, [pc, #28]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045cc:	4903      	ldr	r1, [pc, #12]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80045d4:	e008      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045d6:	7ffb      	ldrb	r3, [r7, #31]
 80045d8:	77bb      	strb	r3, [r7, #30]
 80045da:	e005      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80045dc:	40021000 	.word	0x40021000
 80045e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e4:	7ffb      	ldrb	r3, [r7, #31]
 80045e6:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045e8:	7dfb      	ldrb	r3, [r7, #23]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d105      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ee:	4b9c      	ldr	r3, [pc, #624]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80045f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f2:	4a9b      	ldr	r2, [pc, #620]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80045f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004606:	4b96      	ldr	r3, [pc, #600]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800460c:	f023 0203 	bic.w	r2, r3, #3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004614:	4992      	ldr	r1, [pc, #584]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004628:	4b8d      	ldr	r3, [pc, #564]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800462e:	f023 020c 	bic.w	r2, r3, #12
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004636:	498a      	ldr	r1, [pc, #552]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0304 	and.w	r3, r3, #4
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800464a:	4b85      	ldr	r3, [pc, #532]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004650:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004658:	4981      	ldr	r1, [pc, #516]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0308 	and.w	r3, r3, #8
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800466c:	4b7c      	ldr	r3, [pc, #496]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004672:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	4979      	ldr	r1, [pc, #484]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0310 	and.w	r3, r3, #16
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800468e:	4b74      	ldr	r3, [pc, #464]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004694:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469c:	4970      	ldr	r1, [pc, #448]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0320 	and.w	r3, r3, #32
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046b0:	4b6b      	ldr	r3, [pc, #428]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046be:	4968      	ldr	r1, [pc, #416]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046d2:	4b63      	ldr	r3, [pc, #396]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e0:	495f      	ldr	r1, [pc, #380]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046f4:	4b5a      	ldr	r3, [pc, #360]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004702:	4957      	ldr	r1, [pc, #348]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004716:	4b52      	ldr	r3, [pc, #328]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004724:	494e      	ldr	r1, [pc, #312]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d031      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800473c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004740:	d00e      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004742:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004746:	d814      	bhi.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004748:	2b00      	cmp	r3, #0
 800474a:	d015      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800474c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004750:	d10f      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004752:	4b43      	ldr	r3, [pc, #268]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	4a42      	ldr	r2, [pc, #264]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004758:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800475c:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800475e:	e00c      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3304      	adds	r3, #4
 8004764:	2100      	movs	r1, #0
 8004766:	4618      	mov	r0, r3
 8004768:	f000 f97c 	bl	8004a64 <RCCEx_PLLSAI1_Config>
 800476c:	4603      	mov	r3, r0
 800476e:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004770:	e003      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	77fb      	strb	r3, [r7, #31]
        break;
 8004776:	e000      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8004778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800477a:	7ffb      	ldrb	r3, [r7, #31]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10b      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004780:	4b37      	ldr	r3, [pc, #220]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004786:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800478e:	4934      	ldr	r1, [pc, #208]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004796:	e001      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004798:	7ffb      	ldrb	r3, [r7, #31]
 800479a:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00a      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047b6:	492a      	ldr	r1, [pc, #168]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047ca:	4b25      	ldr	r3, [pc, #148]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d8:	4921      	ldr	r1, [pc, #132]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00a      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047fa:	4919      	ldr	r1, [pc, #100]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800480e:	4b14      	ldr	r3, [pc, #80]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004810:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004814:	f023 0203 	bic.w	r2, r3, #3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481c:	4910      	ldr	r1, [pc, #64]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d02b      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004830:	4b0b      	ldr	r3, [pc, #44]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004836:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800483e:	4908      	ldr	r1, [pc, #32]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004840:	4313      	orrs	r3, r2
 8004842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800484a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800484e:	d109      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004850:	4b03      	ldr	r3, [pc, #12]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4a02      	ldr	r2, [pc, #8]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004856:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800485a:	60d3      	str	r3, [r2, #12]
 800485c:	e014      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800485e:	bf00      	nop
 8004860:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004868:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800486c:	d10c      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3304      	adds	r3, #4
 8004872:	2101      	movs	r1, #1
 8004874:	4618      	mov	r0, r3
 8004876:	f000 f8f5 	bl	8004a64 <RCCEx_PLLSAI1_Config>
 800487a:	4603      	mov	r3, r0
 800487c:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 800487e:	7ffb      	ldrb	r3, [r7, #31]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8004884:	7ffb      	ldrb	r3, [r7, #31]
 8004886:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d04a      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004898:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800489c:	d108      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x554>
 800489e:	4b70      	ldr	r3, [pc, #448]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048a4:	4a6e      	ldr	r2, [pc, #440]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048aa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80048ae:	e012      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80048b0:	4b6b      	ldr	r3, [pc, #428]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048be:	4968      	ldr	r1, [pc, #416]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80048c6:	4b66      	ldr	r3, [pc, #408]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048cc:	4a64      	ldr	r2, [pc, #400]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048d2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048de:	d10d      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3304      	adds	r3, #4
 80048e4:	2101      	movs	r1, #1
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 f8bc 	bl	8004a64 <RCCEx_PLLSAI1_Config>
 80048ec:	4603      	mov	r3, r0
 80048ee:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80048f0:	7ffb      	ldrb	r3, [r7, #31]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d019      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80048f6:	7ffb      	ldrb	r3, [r7, #31]
 80048f8:	77bb      	strb	r3, [r7, #30]
 80048fa:	e016      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004900:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004904:	d106      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004906:	4b56      	ldr	r3, [pc, #344]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	4a55      	ldr	r2, [pc, #340]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800490c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004910:	60d3      	str	r3, [r2, #12]
 8004912:	e00a      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004918:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800491c:	d105      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800491e:	4b50      	ldr	r3, [pc, #320]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	4a4f      	ldr	r2, [pc, #316]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004928:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d028      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004936:	4b4a      	ldr	r3, [pc, #296]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800493c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004944:	4946      	ldr	r1, [pc, #280]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004950:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004954:	d106      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004956:	4b42      	ldr	r3, [pc, #264]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	4a41      	ldr	r2, [pc, #260]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800495c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004960:	60d3      	str	r3, [r2, #12]
 8004962:	e011      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004968:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800496c:	d10c      	bne.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3304      	adds	r3, #4
 8004972:	2101      	movs	r1, #1
 8004974:	4618      	mov	r0, r3
 8004976:	f000 f875 	bl	8004a64 <RCCEx_PLLSAI1_Config>
 800497a:	4603      	mov	r3, r0
 800497c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800497e:	7ffb      	ldrb	r3, [r7, #31]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8004984:	7ffb      	ldrb	r3, [r7, #31]
 8004986:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d01e      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004994:	4b32      	ldr	r3, [pc, #200]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800499a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049a4:	492e      	ldr	r1, [pc, #184]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049b6:	d10c      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3304      	adds	r3, #4
 80049bc:	2102      	movs	r1, #2
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 f850 	bl	8004a64 <RCCEx_PLLSAI1_Config>
 80049c4:	4603      	mov	r3, r0
 80049c6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80049c8:	7ffb      	ldrb	r3, [r7, #31]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80049ce:	7ffb      	ldrb	r3, [r7, #31]
 80049d0:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00b      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049de:	4b20      	ldr	r3, [pc, #128]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049e4:	f023 0204 	bic.w	r2, r3, #4
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049ee:	491c      	ldr	r1, [pc, #112]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00b      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a02:	4b17      	ldr	r3, [pc, #92]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a08:	f023 0218 	bic.w	r2, r3, #24
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a12:	4913      	ldr	r1, [pc, #76]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d017      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004a26:	4b0e      	ldr	r3, [pc, #56]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a2c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a36:	490a      	ldr	r1, [pc, #40]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a48:	d105      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a4a:	4b05      	ldr	r3, [pc, #20]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	4a04      	ldr	r2, [pc, #16]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a54:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004a56:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3720      	adds	r7, #32
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40021000 	.word	0x40021000

08004a64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	d018      	beq.n	8004aac <RCCEx_PLLSAI1_Config+0x48>
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	d81f      	bhi.n	8004abe <RCCEx_PLLSAI1_Config+0x5a>
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d002      	beq.n	8004a88 <RCCEx_PLLSAI1_Config+0x24>
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d009      	beq.n	8004a9a <RCCEx_PLLSAI1_Config+0x36>
 8004a86:	e01a      	b.n	8004abe <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a88:	4b65      	ldr	r3, [pc, #404]	@ (8004c20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d117      	bne.n	8004ac4 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a98:	e014      	b.n	8004ac4 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a9a:	4b61      	ldr	r3, [pc, #388]	@ (8004c20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d110      	bne.n	8004ac8 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aaa:	e00d      	b.n	8004ac8 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004aac:	4b5c      	ldr	r3, [pc, #368]	@ (8004c20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d109      	bne.n	8004acc <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004abc:	e006      	b.n	8004acc <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8004ac2:	e004      	b.n	8004ace <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004ac4:	bf00      	nop
 8004ac6:	e002      	b.n	8004ace <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004ac8:	bf00      	nop
 8004aca:	e000      	b.n	8004ace <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004acc:	bf00      	nop
  }

  if (status == HAL_OK)
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f040 809f 	bne.w	8004c14 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ad6:	4b52      	ldr	r3, [pc, #328]	@ (8004c20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a51      	ldr	r2, [pc, #324]	@ (8004c20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004adc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae2:	f7fd fdd7 	bl	8002694 <HAL_GetTick>
 8004ae6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ae8:	e00f      	b.n	8004b0a <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004aea:	f7fd fdd3 	bl	8002694 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d908      	bls.n	8004b0a <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004af8:	4b49      	ldr	r3, [pc, #292]	@ (8004c20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d009      	beq.n	8004b18 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b08:	e006      	b.n	8004b18 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b0a:	4b45      	ldr	r3, [pc, #276]	@ (8004c20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1e9      	bne.n	8004aea <RCCEx_PLLSAI1_Config+0x86>
 8004b16:	e000      	b.n	8004b1a <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004b18:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d179      	bne.n	8004c14 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d116      	bne.n	8004b54 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b26:	4b3e      	ldr	r3, [pc, #248]	@ (8004c20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	4b3e      	ldr	r3, [pc, #248]	@ (8004c24 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6892      	ldr	r2, [r2, #8]
 8004b32:	0211      	lsls	r1, r2, #8
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	68d2      	ldr	r2, [r2, #12]
 8004b38:	06d2      	lsls	r2, r2, #27
 8004b3a:	4311      	orrs	r1, r2
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6852      	ldr	r2, [r2, #4]
 8004b40:	3a01      	subs	r2, #1
 8004b42:	0112      	lsls	r2, r2, #4
 8004b44:	4311      	orrs	r1, r2
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6812      	ldr	r2, [r2, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	4934      	ldr	r1, [pc, #208]	@ (8004c20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	610b      	str	r3, [r1, #16]
 8004b52:	e033      	b.n	8004bbc <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d118      	bne.n	8004b8c <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b5a:	4b31      	ldr	r3, [pc, #196]	@ (8004c20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b5c:	691a      	ldr	r2, [r3, #16]
 8004b5e:	4b32      	ldr	r3, [pc, #200]	@ (8004c28 <RCCEx_PLLSAI1_Config+0x1c4>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6892      	ldr	r2, [r2, #8]
 8004b66:	0211      	lsls	r1, r2, #8
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6912      	ldr	r2, [r2, #16]
 8004b6c:	0852      	lsrs	r2, r2, #1
 8004b6e:	3a01      	subs	r2, #1
 8004b70:	0552      	lsls	r2, r2, #21
 8004b72:	4311      	orrs	r1, r2
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6852      	ldr	r2, [r2, #4]
 8004b78:	3a01      	subs	r2, #1
 8004b7a:	0112      	lsls	r2, r2, #4
 8004b7c:	4311      	orrs	r1, r2
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6812      	ldr	r2, [r2, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	4926      	ldr	r1, [pc, #152]	@ (8004c20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	610b      	str	r3, [r1, #16]
 8004b8a:	e017      	b.n	8004bbc <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b8c:	4b24      	ldr	r3, [pc, #144]	@ (8004c20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	4b26      	ldr	r3, [pc, #152]	@ (8004c2c <RCCEx_PLLSAI1_Config+0x1c8>)
 8004b92:	4013      	ands	r3, r2
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6892      	ldr	r2, [r2, #8]
 8004b98:	0211      	lsls	r1, r2, #8
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6952      	ldr	r2, [r2, #20]
 8004b9e:	0852      	lsrs	r2, r2, #1
 8004ba0:	3a01      	subs	r2, #1
 8004ba2:	0652      	lsls	r2, r2, #25
 8004ba4:	4311      	orrs	r1, r2
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6852      	ldr	r2, [r2, #4]
 8004baa:	3a01      	subs	r2, #1
 8004bac:	0112      	lsls	r2, r2, #4
 8004bae:	4311      	orrs	r1, r2
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	491a      	ldr	r1, [pc, #104]	@ (8004c20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004bbc:	4b18      	ldr	r3, [pc, #96]	@ (8004c20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a17      	ldr	r2, [pc, #92]	@ (8004c20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004bc2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc8:	f7fd fd64 	bl	8002694 <HAL_GetTick>
 8004bcc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bce:	e00f      	b.n	8004bf0 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bd0:	f7fd fd60 	bl	8002694 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d908      	bls.n	8004bf0 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bde:	4b10      	ldr	r3, [pc, #64]	@ (8004c20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d109      	bne.n	8004bfe <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004bee:	e006      	b.n	8004bfe <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0e9      	beq.n	8004bd0 <RCCEx_PLLSAI1_Config+0x16c>
 8004bfc:	e000      	b.n	8004c00 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8004bfe:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d106      	bne.n	8004c14 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8004c06:	4b06      	ldr	r3, [pc, #24]	@ (8004c20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c08:	691a      	ldr	r2, [r3, #16]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	4904      	ldr	r1, [pc, #16]	@ (8004c20 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	40021000 	.word	0x40021000
 8004c24:	07ff800c 	.word	0x07ff800c
 8004c28:	ff9f800c 	.word	0xff9f800c
 8004c2c:	f9ff800c 	.word	0xf9ff800c

08004c30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d018      	beq.n	8004c78 <RCCEx_PLLSAI2_Config+0x48>
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d81f      	bhi.n	8004c8a <RCCEx_PLLSAI2_Config+0x5a>
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d002      	beq.n	8004c54 <RCCEx_PLLSAI2_Config+0x24>
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d009      	beq.n	8004c66 <RCCEx_PLLSAI2_Config+0x36>
 8004c52:	e01a      	b.n	8004c8a <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c54:	4b4a      	ldr	r3, [pc, #296]	@ (8004d80 <RCCEx_PLLSAI2_Config+0x150>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d117      	bne.n	8004c90 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c64:	e014      	b.n	8004c90 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c66:	4b46      	ldr	r3, [pc, #280]	@ (8004d80 <RCCEx_PLLSAI2_Config+0x150>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d110      	bne.n	8004c94 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c76:	e00d      	b.n	8004c94 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004c78:	4b41      	ldr	r3, [pc, #260]	@ (8004d80 <RCCEx_PLLSAI2_Config+0x150>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d109      	bne.n	8004c98 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c88:	e006      	b.n	8004c98 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c8e:	e004      	b.n	8004c9a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004c90:	bf00      	nop
 8004c92:	e002      	b.n	8004c9a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004c94:	bf00      	nop
 8004c96:	e000      	b.n	8004c9a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004c98:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d169      	bne.n	8004d74 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ca0:	4b37      	ldr	r3, [pc, #220]	@ (8004d80 <RCCEx_PLLSAI2_Config+0x150>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a36      	ldr	r2, [pc, #216]	@ (8004d80 <RCCEx_PLLSAI2_Config+0x150>)
 8004ca6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004caa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cac:	f7fd fcf2 	bl	8002694 <HAL_GetTick>
 8004cb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cb2:	e00f      	b.n	8004cd4 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cb4:	f7fd fcee 	bl	8002694 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d908      	bls.n	8004cd4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8004d80 <RCCEx_PLLSAI2_Config+0x150>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d009      	beq.n	8004ce2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cd2:	e006      	b.n	8004ce2 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8004d80 <RCCEx_PLLSAI2_Config+0x150>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e9      	bne.n	8004cb4 <RCCEx_PLLSAI2_Config+0x84>
 8004ce0:	e000      	b.n	8004ce4 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8004ce2:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d144      	bne.n	8004d74 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d115      	bne.n	8004d1c <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cf0:	4b23      	ldr	r3, [pc, #140]	@ (8004d80 <RCCEx_PLLSAI2_Config+0x150>)
 8004cf2:	695a      	ldr	r2, [r3, #20]
 8004cf4:	4b23      	ldr	r3, [pc, #140]	@ (8004d84 <RCCEx_PLLSAI2_Config+0x154>)
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6892      	ldr	r2, [r2, #8]
 8004cfc:	0211      	lsls	r1, r2, #8
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	68d2      	ldr	r2, [r2, #12]
 8004d02:	06d2      	lsls	r2, r2, #27
 8004d04:	4311      	orrs	r1, r2
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6852      	ldr	r2, [r2, #4]
 8004d0a:	3a01      	subs	r2, #1
 8004d0c:	0112      	lsls	r2, r2, #4
 8004d0e:	4311      	orrs	r1, r2
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	6812      	ldr	r2, [r2, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	491a      	ldr	r1, [pc, #104]	@ (8004d80 <RCCEx_PLLSAI2_Config+0x150>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d1c:	4b18      	ldr	r3, [pc, #96]	@ (8004d80 <RCCEx_PLLSAI2_Config+0x150>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a17      	ldr	r2, [pc, #92]	@ (8004d80 <RCCEx_PLLSAI2_Config+0x150>)
 8004d22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d28:	f7fd fcb4 	bl	8002694 <HAL_GetTick>
 8004d2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d2e:	e00f      	b.n	8004d50 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d30:	f7fd fcb0 	bl	8002694 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d908      	bls.n	8004d50 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d3e:	4b10      	ldr	r3, [pc, #64]	@ (8004d80 <RCCEx_PLLSAI2_Config+0x150>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d109      	bne.n	8004d5e <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004d4e:	e006      	b.n	8004d5e <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d50:	4b0b      	ldr	r3, [pc, #44]	@ (8004d80 <RCCEx_PLLSAI2_Config+0x150>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0e9      	beq.n	8004d30 <RCCEx_PLLSAI2_Config+0x100>
 8004d5c:	e000      	b.n	8004d60 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8004d5e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d106      	bne.n	8004d74 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8004d66:	4b06      	ldr	r3, [pc, #24]	@ (8004d80 <RCCEx_PLLSAI2_Config+0x150>)
 8004d68:	695a      	ldr	r2, [r3, #20]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	4904      	ldr	r1, [pc, #16]	@ (8004d80 <RCCEx_PLLSAI2_Config+0x150>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40021000 	.word	0x40021000
 8004d84:	07ff800c 	.word	0x07ff800c

08004d88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e042      	b.n	8004e20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d106      	bne.n	8004db2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7fc f995 	bl	80010dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2224      	movs	r2, #36	@ 0x24
 8004db6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0201 	bic.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fbd4 	bl	8005580 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f8d1 	bl	8004f80 <UART_SetConfig>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d101      	bne.n	8004de8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e01b      	b.n	8004e20 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004df6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689a      	ldr	r2, [r3, #8]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0201 	orr.w	r2, r2, #1
 8004e16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 fc53 	bl	80056c4 <UART_CheckIdleState>
 8004e1e:	4603      	mov	r3, r0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08a      	sub	sp, #40	@ 0x28
 8004e2c:	af02      	add	r7, sp, #8
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	603b      	str	r3, [r7, #0]
 8004e34:	4613      	mov	r3, r2
 8004e36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e3e:	2b20      	cmp	r3, #32
 8004e40:	d17b      	bne.n	8004f3a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <HAL_UART_Transmit+0x26>
 8004e48:	88fb      	ldrh	r3, [r7, #6]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e074      	b.n	8004f3c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2221      	movs	r2, #33	@ 0x21
 8004e5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e62:	f7fd fc17 	bl	8002694 <HAL_GetTick>
 8004e66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	88fa      	ldrh	r2, [r7, #6]
 8004e6c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	88fa      	ldrh	r2, [r7, #6]
 8004e74:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e80:	d108      	bne.n	8004e94 <HAL_UART_Transmit+0x6c>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d104      	bne.n	8004e94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	61bb      	str	r3, [r7, #24]
 8004e92:	e003      	b.n	8004e9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e9c:	e030      	b.n	8004f00 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	2180      	movs	r1, #128	@ 0x80
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 fcb5 	bl	8005818 <UART_WaitOnFlagUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e03d      	b.n	8004f3c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10b      	bne.n	8004ede <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ed4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	3302      	adds	r3, #2
 8004eda:	61bb      	str	r3, [r7, #24]
 8004edc:	e007      	b.n	8004eee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	781a      	ldrb	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	3301      	adds	r3, #1
 8004eec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1c8      	bne.n	8004e9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2200      	movs	r2, #0
 8004f14:	2140      	movs	r1, #64	@ 0x40
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 fc7e 	bl	8005818 <UART_WaitOnFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d005      	beq.n	8004f2e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2220      	movs	r2, #32
 8004f26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e006      	b.n	8004f3c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	e000      	b.n	8004f3c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004f3a:	2302      	movs	r3, #2
  }
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3720      	adds	r7, #32
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f84:	b08c      	sub	sp, #48	@ 0x30
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	4baa      	ldr	r3, [pc, #680]	@ (8005258 <UART_SetConfig+0x2d8>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	6812      	ldr	r2, [r2, #0]
 8004fb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fb8:	430b      	orrs	r3, r1
 8004fba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a9f      	ldr	r2, [pc, #636]	@ (800525c <UART_SetConfig+0x2dc>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d004      	beq.n	8004fec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004ff6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	6812      	ldr	r2, [r2, #0]
 8004ffe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005000:	430b      	orrs	r3, r1
 8005002:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500a:	f023 010f 	bic.w	r1, r3, #15
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a90      	ldr	r2, [pc, #576]	@ (8005260 <UART_SetConfig+0x2e0>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d125      	bne.n	8005070 <UART_SetConfig+0xf0>
 8005024:	4b8f      	ldr	r3, [pc, #572]	@ (8005264 <UART_SetConfig+0x2e4>)
 8005026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	2b03      	cmp	r3, #3
 8005030:	d81a      	bhi.n	8005068 <UART_SetConfig+0xe8>
 8005032:	a201      	add	r2, pc, #4	@ (adr r2, 8005038 <UART_SetConfig+0xb8>)
 8005034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005038:	08005049 	.word	0x08005049
 800503c:	08005059 	.word	0x08005059
 8005040:	08005051 	.word	0x08005051
 8005044:	08005061 	.word	0x08005061
 8005048:	2301      	movs	r3, #1
 800504a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800504e:	e116      	b.n	800527e <UART_SetConfig+0x2fe>
 8005050:	2302      	movs	r3, #2
 8005052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005056:	e112      	b.n	800527e <UART_SetConfig+0x2fe>
 8005058:	2304      	movs	r3, #4
 800505a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800505e:	e10e      	b.n	800527e <UART_SetConfig+0x2fe>
 8005060:	2308      	movs	r3, #8
 8005062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005066:	e10a      	b.n	800527e <UART_SetConfig+0x2fe>
 8005068:	2310      	movs	r3, #16
 800506a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800506e:	e106      	b.n	800527e <UART_SetConfig+0x2fe>
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a7c      	ldr	r2, [pc, #496]	@ (8005268 <UART_SetConfig+0x2e8>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d138      	bne.n	80050ec <UART_SetConfig+0x16c>
 800507a:	4b7a      	ldr	r3, [pc, #488]	@ (8005264 <UART_SetConfig+0x2e4>)
 800507c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005080:	f003 030c 	and.w	r3, r3, #12
 8005084:	2b0c      	cmp	r3, #12
 8005086:	d82d      	bhi.n	80050e4 <UART_SetConfig+0x164>
 8005088:	a201      	add	r2, pc, #4	@ (adr r2, 8005090 <UART_SetConfig+0x110>)
 800508a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508e:	bf00      	nop
 8005090:	080050c5 	.word	0x080050c5
 8005094:	080050e5 	.word	0x080050e5
 8005098:	080050e5 	.word	0x080050e5
 800509c:	080050e5 	.word	0x080050e5
 80050a0:	080050d5 	.word	0x080050d5
 80050a4:	080050e5 	.word	0x080050e5
 80050a8:	080050e5 	.word	0x080050e5
 80050ac:	080050e5 	.word	0x080050e5
 80050b0:	080050cd 	.word	0x080050cd
 80050b4:	080050e5 	.word	0x080050e5
 80050b8:	080050e5 	.word	0x080050e5
 80050bc:	080050e5 	.word	0x080050e5
 80050c0:	080050dd 	.word	0x080050dd
 80050c4:	2300      	movs	r3, #0
 80050c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ca:	e0d8      	b.n	800527e <UART_SetConfig+0x2fe>
 80050cc:	2302      	movs	r3, #2
 80050ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050d2:	e0d4      	b.n	800527e <UART_SetConfig+0x2fe>
 80050d4:	2304      	movs	r3, #4
 80050d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050da:	e0d0      	b.n	800527e <UART_SetConfig+0x2fe>
 80050dc:	2308      	movs	r3, #8
 80050de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050e2:	e0cc      	b.n	800527e <UART_SetConfig+0x2fe>
 80050e4:	2310      	movs	r3, #16
 80050e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ea:	e0c8      	b.n	800527e <UART_SetConfig+0x2fe>
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a5e      	ldr	r2, [pc, #376]	@ (800526c <UART_SetConfig+0x2ec>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d125      	bne.n	8005142 <UART_SetConfig+0x1c2>
 80050f6:	4b5b      	ldr	r3, [pc, #364]	@ (8005264 <UART_SetConfig+0x2e4>)
 80050f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005100:	2b30      	cmp	r3, #48	@ 0x30
 8005102:	d016      	beq.n	8005132 <UART_SetConfig+0x1b2>
 8005104:	2b30      	cmp	r3, #48	@ 0x30
 8005106:	d818      	bhi.n	800513a <UART_SetConfig+0x1ba>
 8005108:	2b20      	cmp	r3, #32
 800510a:	d00a      	beq.n	8005122 <UART_SetConfig+0x1a2>
 800510c:	2b20      	cmp	r3, #32
 800510e:	d814      	bhi.n	800513a <UART_SetConfig+0x1ba>
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <UART_SetConfig+0x19a>
 8005114:	2b10      	cmp	r3, #16
 8005116:	d008      	beq.n	800512a <UART_SetConfig+0x1aa>
 8005118:	e00f      	b.n	800513a <UART_SetConfig+0x1ba>
 800511a:	2300      	movs	r3, #0
 800511c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005120:	e0ad      	b.n	800527e <UART_SetConfig+0x2fe>
 8005122:	2302      	movs	r3, #2
 8005124:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005128:	e0a9      	b.n	800527e <UART_SetConfig+0x2fe>
 800512a:	2304      	movs	r3, #4
 800512c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005130:	e0a5      	b.n	800527e <UART_SetConfig+0x2fe>
 8005132:	2308      	movs	r3, #8
 8005134:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005138:	e0a1      	b.n	800527e <UART_SetConfig+0x2fe>
 800513a:	2310      	movs	r3, #16
 800513c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005140:	e09d      	b.n	800527e <UART_SetConfig+0x2fe>
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a4a      	ldr	r2, [pc, #296]	@ (8005270 <UART_SetConfig+0x2f0>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d125      	bne.n	8005198 <UART_SetConfig+0x218>
 800514c:	4b45      	ldr	r3, [pc, #276]	@ (8005264 <UART_SetConfig+0x2e4>)
 800514e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005152:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005156:	2bc0      	cmp	r3, #192	@ 0xc0
 8005158:	d016      	beq.n	8005188 <UART_SetConfig+0x208>
 800515a:	2bc0      	cmp	r3, #192	@ 0xc0
 800515c:	d818      	bhi.n	8005190 <UART_SetConfig+0x210>
 800515e:	2b80      	cmp	r3, #128	@ 0x80
 8005160:	d00a      	beq.n	8005178 <UART_SetConfig+0x1f8>
 8005162:	2b80      	cmp	r3, #128	@ 0x80
 8005164:	d814      	bhi.n	8005190 <UART_SetConfig+0x210>
 8005166:	2b00      	cmp	r3, #0
 8005168:	d002      	beq.n	8005170 <UART_SetConfig+0x1f0>
 800516a:	2b40      	cmp	r3, #64	@ 0x40
 800516c:	d008      	beq.n	8005180 <UART_SetConfig+0x200>
 800516e:	e00f      	b.n	8005190 <UART_SetConfig+0x210>
 8005170:	2300      	movs	r3, #0
 8005172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005176:	e082      	b.n	800527e <UART_SetConfig+0x2fe>
 8005178:	2302      	movs	r3, #2
 800517a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800517e:	e07e      	b.n	800527e <UART_SetConfig+0x2fe>
 8005180:	2304      	movs	r3, #4
 8005182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005186:	e07a      	b.n	800527e <UART_SetConfig+0x2fe>
 8005188:	2308      	movs	r3, #8
 800518a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800518e:	e076      	b.n	800527e <UART_SetConfig+0x2fe>
 8005190:	2310      	movs	r3, #16
 8005192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005196:	e072      	b.n	800527e <UART_SetConfig+0x2fe>
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a35      	ldr	r2, [pc, #212]	@ (8005274 <UART_SetConfig+0x2f4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d12a      	bne.n	80051f8 <UART_SetConfig+0x278>
 80051a2:	4b30      	ldr	r3, [pc, #192]	@ (8005264 <UART_SetConfig+0x2e4>)
 80051a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051b0:	d01a      	beq.n	80051e8 <UART_SetConfig+0x268>
 80051b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051b6:	d81b      	bhi.n	80051f0 <UART_SetConfig+0x270>
 80051b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051bc:	d00c      	beq.n	80051d8 <UART_SetConfig+0x258>
 80051be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051c2:	d815      	bhi.n	80051f0 <UART_SetConfig+0x270>
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <UART_SetConfig+0x250>
 80051c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051cc:	d008      	beq.n	80051e0 <UART_SetConfig+0x260>
 80051ce:	e00f      	b.n	80051f0 <UART_SetConfig+0x270>
 80051d0:	2300      	movs	r3, #0
 80051d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051d6:	e052      	b.n	800527e <UART_SetConfig+0x2fe>
 80051d8:	2302      	movs	r3, #2
 80051da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051de:	e04e      	b.n	800527e <UART_SetConfig+0x2fe>
 80051e0:	2304      	movs	r3, #4
 80051e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051e6:	e04a      	b.n	800527e <UART_SetConfig+0x2fe>
 80051e8:	2308      	movs	r3, #8
 80051ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ee:	e046      	b.n	800527e <UART_SetConfig+0x2fe>
 80051f0:	2310      	movs	r3, #16
 80051f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051f6:	e042      	b.n	800527e <UART_SetConfig+0x2fe>
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a17      	ldr	r2, [pc, #92]	@ (800525c <UART_SetConfig+0x2dc>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d13a      	bne.n	8005278 <UART_SetConfig+0x2f8>
 8005202:	4b18      	ldr	r3, [pc, #96]	@ (8005264 <UART_SetConfig+0x2e4>)
 8005204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005208:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800520c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005210:	d01a      	beq.n	8005248 <UART_SetConfig+0x2c8>
 8005212:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005216:	d81b      	bhi.n	8005250 <UART_SetConfig+0x2d0>
 8005218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800521c:	d00c      	beq.n	8005238 <UART_SetConfig+0x2b8>
 800521e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005222:	d815      	bhi.n	8005250 <UART_SetConfig+0x2d0>
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <UART_SetConfig+0x2b0>
 8005228:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800522c:	d008      	beq.n	8005240 <UART_SetConfig+0x2c0>
 800522e:	e00f      	b.n	8005250 <UART_SetConfig+0x2d0>
 8005230:	2300      	movs	r3, #0
 8005232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005236:	e022      	b.n	800527e <UART_SetConfig+0x2fe>
 8005238:	2302      	movs	r3, #2
 800523a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800523e:	e01e      	b.n	800527e <UART_SetConfig+0x2fe>
 8005240:	2304      	movs	r3, #4
 8005242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005246:	e01a      	b.n	800527e <UART_SetConfig+0x2fe>
 8005248:	2308      	movs	r3, #8
 800524a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800524e:	e016      	b.n	800527e <UART_SetConfig+0x2fe>
 8005250:	2310      	movs	r3, #16
 8005252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005256:	e012      	b.n	800527e <UART_SetConfig+0x2fe>
 8005258:	cfff69f3 	.word	0xcfff69f3
 800525c:	40008000 	.word	0x40008000
 8005260:	40013800 	.word	0x40013800
 8005264:	40021000 	.word	0x40021000
 8005268:	40004400 	.word	0x40004400
 800526c:	40004800 	.word	0x40004800
 8005270:	40004c00 	.word	0x40004c00
 8005274:	40005000 	.word	0x40005000
 8005278:	2310      	movs	r3, #16
 800527a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4ab0      	ldr	r2, [pc, #704]	@ (8005544 <UART_SetConfig+0x5c4>)
 8005284:	4293      	cmp	r3, r2
 8005286:	f040 809b 	bne.w	80053c0 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800528a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800528e:	2b08      	cmp	r3, #8
 8005290:	d827      	bhi.n	80052e2 <UART_SetConfig+0x362>
 8005292:	a201      	add	r2, pc, #4	@ (adr r2, 8005298 <UART_SetConfig+0x318>)
 8005294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005298:	080052bd 	.word	0x080052bd
 800529c:	080052c5 	.word	0x080052c5
 80052a0:	080052cd 	.word	0x080052cd
 80052a4:	080052e3 	.word	0x080052e3
 80052a8:	080052d3 	.word	0x080052d3
 80052ac:	080052e3 	.word	0x080052e3
 80052b0:	080052e3 	.word	0x080052e3
 80052b4:	080052e3 	.word	0x080052e3
 80052b8:	080052db 	.word	0x080052db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052bc:	f7fe ff54 	bl	8004168 <HAL_RCC_GetPCLK1Freq>
 80052c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052c2:	e014      	b.n	80052ee <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052c4:	f7fe ff64 	bl	8004190 <HAL_RCC_GetPCLK2Freq>
 80052c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052ca:	e010      	b.n	80052ee <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052cc:	4b9e      	ldr	r3, [pc, #632]	@ (8005548 <UART_SetConfig+0x5c8>)
 80052ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052d0:	e00d      	b.n	80052ee <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052d2:	f7fe fe97 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 80052d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052d8:	e009      	b.n	80052ee <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052e0:	e005      	b.n	80052ee <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80052ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 8130 	beq.w	8005556 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fa:	4a94      	ldr	r2, [pc, #592]	@ (800554c <UART_SetConfig+0x5cc>)
 80052fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005300:	461a      	mov	r2, r3
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	fbb3 f3f2 	udiv	r3, r3, r2
 8005308:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	4613      	mov	r3, r2
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	4413      	add	r3, r2
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	429a      	cmp	r2, r3
 8005318:	d305      	bcc.n	8005326 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	429a      	cmp	r2, r3
 8005324:	d903      	bls.n	800532e <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800532c:	e113      	b.n	8005556 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800532e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005330:	2200      	movs	r2, #0
 8005332:	60bb      	str	r3, [r7, #8]
 8005334:	60fa      	str	r2, [r7, #12]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533a:	4a84      	ldr	r2, [pc, #528]	@ (800554c <UART_SetConfig+0x5cc>)
 800533c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005340:	b29b      	uxth	r3, r3
 8005342:	2200      	movs	r2, #0
 8005344:	603b      	str	r3, [r7, #0]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800534c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005350:	f7fb faa8 	bl	80008a4 <__aeabi_uldivmod>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4610      	mov	r0, r2
 800535a:	4619      	mov	r1, r3
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	020b      	lsls	r3, r1, #8
 8005366:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800536a:	0202      	lsls	r2, r0, #8
 800536c:	6979      	ldr	r1, [r7, #20]
 800536e:	6849      	ldr	r1, [r1, #4]
 8005370:	0849      	lsrs	r1, r1, #1
 8005372:	2000      	movs	r0, #0
 8005374:	460c      	mov	r4, r1
 8005376:	4605      	mov	r5, r0
 8005378:	eb12 0804 	adds.w	r8, r2, r4
 800537c:	eb43 0905 	adc.w	r9, r3, r5
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	469a      	mov	sl, r3
 8005388:	4693      	mov	fp, r2
 800538a:	4652      	mov	r2, sl
 800538c:	465b      	mov	r3, fp
 800538e:	4640      	mov	r0, r8
 8005390:	4649      	mov	r1, r9
 8005392:	f7fb fa87 	bl	80008a4 <__aeabi_uldivmod>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	4613      	mov	r3, r2
 800539c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053a4:	d308      	bcc.n	80053b8 <UART_SetConfig+0x438>
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053ac:	d204      	bcs.n	80053b8 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6a3a      	ldr	r2, [r7, #32]
 80053b4:	60da      	str	r2, [r3, #12]
 80053b6:	e0ce      	b.n	8005556 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80053be:	e0ca      	b.n	8005556 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053c8:	d166      	bne.n	8005498 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 80053ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80053ce:	2b08      	cmp	r3, #8
 80053d0:	d827      	bhi.n	8005422 <UART_SetConfig+0x4a2>
 80053d2:	a201      	add	r2, pc, #4	@ (adr r2, 80053d8 <UART_SetConfig+0x458>)
 80053d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d8:	080053fd 	.word	0x080053fd
 80053dc:	08005405 	.word	0x08005405
 80053e0:	0800540d 	.word	0x0800540d
 80053e4:	08005423 	.word	0x08005423
 80053e8:	08005413 	.word	0x08005413
 80053ec:	08005423 	.word	0x08005423
 80053f0:	08005423 	.word	0x08005423
 80053f4:	08005423 	.word	0x08005423
 80053f8:	0800541b 	.word	0x0800541b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053fc:	f7fe feb4 	bl	8004168 <HAL_RCC_GetPCLK1Freq>
 8005400:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005402:	e014      	b.n	800542e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005404:	f7fe fec4 	bl	8004190 <HAL_RCC_GetPCLK2Freq>
 8005408:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800540a:	e010      	b.n	800542e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800540c:	4b4e      	ldr	r3, [pc, #312]	@ (8005548 <UART_SetConfig+0x5c8>)
 800540e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005410:	e00d      	b.n	800542e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005412:	f7fe fdf7 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8005416:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005418:	e009      	b.n	800542e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800541a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800541e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005420:	e005      	b.n	800542e <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8005422:	2300      	movs	r3, #0
 8005424:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800542c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800542e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 8090 	beq.w	8005556 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543a:	4a44      	ldr	r2, [pc, #272]	@ (800554c <UART_SetConfig+0x5cc>)
 800543c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005440:	461a      	mov	r2, r3
 8005442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005444:	fbb3 f3f2 	udiv	r3, r3, r2
 8005448:	005a      	lsls	r2, r3, #1
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	085b      	lsrs	r3, r3, #1
 8005450:	441a      	add	r2, r3
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	fbb2 f3f3 	udiv	r3, r2, r3
 800545a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	2b0f      	cmp	r3, #15
 8005460:	d916      	bls.n	8005490 <UART_SetConfig+0x510>
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005468:	d212      	bcs.n	8005490 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	b29b      	uxth	r3, r3
 800546e:	f023 030f 	bic.w	r3, r3, #15
 8005472:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	085b      	lsrs	r3, r3, #1
 8005478:	b29b      	uxth	r3, r3
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	b29a      	uxth	r2, r3
 8005480:	8bfb      	ldrh	r3, [r7, #30]
 8005482:	4313      	orrs	r3, r2
 8005484:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	8bfa      	ldrh	r2, [r7, #30]
 800548c:	60da      	str	r2, [r3, #12]
 800548e:	e062      	b.n	8005556 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005496:	e05e      	b.n	8005556 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005498:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800549c:	2b08      	cmp	r3, #8
 800549e:	d828      	bhi.n	80054f2 <UART_SetConfig+0x572>
 80054a0:	a201      	add	r2, pc, #4	@ (adr r2, 80054a8 <UART_SetConfig+0x528>)
 80054a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a6:	bf00      	nop
 80054a8:	080054cd 	.word	0x080054cd
 80054ac:	080054d5 	.word	0x080054d5
 80054b0:	080054dd 	.word	0x080054dd
 80054b4:	080054f3 	.word	0x080054f3
 80054b8:	080054e3 	.word	0x080054e3
 80054bc:	080054f3 	.word	0x080054f3
 80054c0:	080054f3 	.word	0x080054f3
 80054c4:	080054f3 	.word	0x080054f3
 80054c8:	080054eb 	.word	0x080054eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054cc:	f7fe fe4c 	bl	8004168 <HAL_RCC_GetPCLK1Freq>
 80054d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054d2:	e014      	b.n	80054fe <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054d4:	f7fe fe5c 	bl	8004190 <HAL_RCC_GetPCLK2Freq>
 80054d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054da:	e010      	b.n	80054fe <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005548 <UART_SetConfig+0x5c8>)
 80054de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054e0:	e00d      	b.n	80054fe <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054e2:	f7fe fd8f 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 80054e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054e8:	e009      	b.n	80054fe <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054f0:	e005      	b.n	80054fe <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80054fc:	bf00      	nop
    }

    if (pclk != 0U)
 80054fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005500:	2b00      	cmp	r3, #0
 8005502:	d028      	beq.n	8005556 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005508:	4a10      	ldr	r2, [pc, #64]	@ (800554c <UART_SetConfig+0x5cc>)
 800550a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800550e:	461a      	mov	r2, r3
 8005510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005512:	fbb3 f2f2 	udiv	r2, r3, r2
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	085b      	lsrs	r3, r3, #1
 800551c:	441a      	add	r2, r3
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	fbb2 f3f3 	udiv	r3, r2, r3
 8005526:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	2b0f      	cmp	r3, #15
 800552c:	d910      	bls.n	8005550 <UART_SetConfig+0x5d0>
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005534:	d20c      	bcs.n	8005550 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	b29a      	uxth	r2, r3
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	60da      	str	r2, [r3, #12]
 8005540:	e009      	b.n	8005556 <UART_SetConfig+0x5d6>
 8005542:	bf00      	nop
 8005544:	40008000 	.word	0x40008000
 8005548:	00f42400 	.word	0x00f42400
 800554c:	08006428 	.word	0x08006428
      }
      else
      {
        ret = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2201      	movs	r2, #1
 800555a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2201      	movs	r2, #1
 8005562:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2200      	movs	r2, #0
 800556a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	2200      	movs	r2, #0
 8005570:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005572:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005576:	4618      	mov	r0, r3
 8005578:	3730      	adds	r7, #48	@ 0x30
 800557a:	46bd      	mov	sp, r7
 800557c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005580 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00a      	beq.n	80055aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00a      	beq.n	80055ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00a      	beq.n	8005610 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	430a      	orrs	r2, r1
 800560e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00a      	beq.n	8005632 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00a      	beq.n	8005654 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800565c:	2b00      	cmp	r3, #0
 800565e:	d01a      	beq.n	8005696 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800567e:	d10a      	bne.n	8005696 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800569a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	605a      	str	r2, [r3, #4]
  }
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b098      	sub	sp, #96	@ 0x60
 80056c8:	af02      	add	r7, sp, #8
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056d4:	f7fc ffde 	bl	8002694 <HAL_GetTick>
 80056d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0308 	and.w	r3, r3, #8
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d12f      	bne.n	8005748 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056f0:	2200      	movs	r2, #0
 80056f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f88e 	bl	8005818 <UART_WaitOnFlagUntilTimeout>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d022      	beq.n	8005748 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570a:	e853 3f00 	ldrex	r3, [r3]
 800570e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005712:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005716:	653b      	str	r3, [r7, #80]	@ 0x50
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	461a      	mov	r2, r3
 800571e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005720:	647b      	str	r3, [r7, #68]	@ 0x44
 8005722:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005724:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005726:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005728:	e841 2300 	strex	r3, r2, [r1]
 800572c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800572e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1e6      	bne.n	8005702 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2220      	movs	r2, #32
 8005738:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e063      	b.n	8005810 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0304 	and.w	r3, r3, #4
 8005752:	2b04      	cmp	r3, #4
 8005754:	d149      	bne.n	80057ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005756:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800575e:	2200      	movs	r2, #0
 8005760:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f857 	bl	8005818 <UART_WaitOnFlagUntilTimeout>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d03c      	beq.n	80057ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005778:	e853 3f00 	ldrex	r3, [r3]
 800577c:	623b      	str	r3, [r7, #32]
   return(result);
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005784:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800578e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005790:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005792:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005794:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005796:	e841 2300 	strex	r3, r2, [r1]
 800579a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800579c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1e6      	bne.n	8005770 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	3308      	adds	r3, #8
 80057a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	e853 3f00 	ldrex	r3, [r3]
 80057b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f023 0301 	bic.w	r3, r3, #1
 80057b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3308      	adds	r3, #8
 80057c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057c2:	61fa      	str	r2, [r7, #28]
 80057c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c6:	69b9      	ldr	r1, [r7, #24]
 80057c8:	69fa      	ldr	r2, [r7, #28]
 80057ca:	e841 2300 	strex	r3, r2, [r1]
 80057ce:	617b      	str	r3, [r7, #20]
   return(result);
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1e5      	bne.n	80057a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2220      	movs	r2, #32
 80057da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e012      	b.n	8005810 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2220      	movs	r2, #32
 80057ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2220      	movs	r2, #32
 80057f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3758      	adds	r7, #88	@ 0x58
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	4613      	mov	r3, r2
 8005826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005828:	e04f      	b.n	80058ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005830:	d04b      	beq.n	80058ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005832:	f7fc ff2f 	bl	8002694 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	429a      	cmp	r2, r3
 8005840:	d302      	bcc.n	8005848 <UART_WaitOnFlagUntilTimeout+0x30>
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e04e      	b.n	80058ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0304 	and.w	r3, r3, #4
 8005856:	2b00      	cmp	r3, #0
 8005858:	d037      	beq.n	80058ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b80      	cmp	r3, #128	@ 0x80
 800585e:	d034      	beq.n	80058ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2b40      	cmp	r3, #64	@ 0x40
 8005864:	d031      	beq.n	80058ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69db      	ldr	r3, [r3, #28]
 800586c:	f003 0308 	and.w	r3, r3, #8
 8005870:	2b08      	cmp	r3, #8
 8005872:	d110      	bne.n	8005896 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2208      	movs	r2, #8
 800587a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 f920 	bl	8005ac2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2208      	movs	r2, #8
 8005886:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e029      	b.n	80058ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058a4:	d111      	bne.n	80058ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 f906 	bl	8005ac2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2220      	movs	r2, #32
 80058ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e00f      	b.n	80058ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69da      	ldr	r2, [r3, #28]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	4013      	ands	r3, r2
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	bf0c      	ite	eq
 80058da:	2301      	moveq	r3, #1
 80058dc:	2300      	movne	r3, #0
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	461a      	mov	r2, r3
 80058e2:	79fb      	ldrb	r3, [r7, #7]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d0a0      	beq.n	800582a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
	...

080058f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b096      	sub	sp, #88	@ 0x58
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	4613      	mov	r3, r2
 8005900:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	88fa      	ldrh	r2, [r7, #6]
 800590c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2222      	movs	r2, #34	@ 0x22
 800591c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005926:	2b00      	cmp	r3, #0
 8005928:	d02d      	beq.n	8005986 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005930:	4a40      	ldr	r2, [pc, #256]	@ (8005a34 <UART_Start_Receive_DMA+0x140>)
 8005932:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800593a:	4a3f      	ldr	r2, [pc, #252]	@ (8005a38 <UART_Start_Receive_DMA+0x144>)
 800593c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005944:	4a3d      	ldr	r2, [pc, #244]	@ (8005a3c <UART_Start_Receive_DMA+0x148>)
 8005946:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800594e:	2200      	movs	r2, #0
 8005950:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3324      	adds	r3, #36	@ 0x24
 800595e:	4619      	mov	r1, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005964:	461a      	mov	r2, r3
 8005966:	88fb      	ldrh	r3, [r7, #6]
 8005968:	f7fd f87c 	bl	8002a64 <HAL_DMA_Start_IT>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d009      	beq.n	8005986 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2210      	movs	r2, #16
 8005976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2220      	movs	r2, #32
 800597e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e051      	b.n	8005a2a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d018      	beq.n	80059c0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005996:	e853 3f00 	ldrex	r3, [r3]
 800599a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800599c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	461a      	mov	r2, r3
 80059aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059ae:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80059b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059b4:	e841 2300 	strex	r3, r2, [r1]
 80059b8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80059ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1e6      	bne.n	800598e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3308      	adds	r3, #8
 80059c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ca:	e853 3f00 	ldrex	r3, [r3]
 80059ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d2:	f043 0301 	orr.w	r3, r3, #1
 80059d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3308      	adds	r3, #8
 80059de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80059e0:	637a      	str	r2, [r7, #52]	@ 0x34
 80059e2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059e8:	e841 2300 	strex	r3, r2, [r1]
 80059ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80059ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e5      	bne.n	80059c0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3308      	adds	r3, #8
 80059fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	e853 3f00 	ldrex	r3, [r3]
 8005a02:	613b      	str	r3, [r7, #16]
   return(result);
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3308      	adds	r3, #8
 8005a12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a14:	623a      	str	r2, [r7, #32]
 8005a16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a18:	69f9      	ldr	r1, [r7, #28]
 8005a1a:	6a3a      	ldr	r2, [r7, #32]
 8005a1c:	e841 2300 	strex	r3, r2, [r1]
 8005a20:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1e5      	bne.n	80059f4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3758      	adds	r7, #88	@ 0x58
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	08005b8f 	.word	0x08005b8f
 8005a38:	08005cbb 	.word	0x08005cbb
 8005a3c:	08005cf9 	.word	0x08005cf9

08005a40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b08f      	sub	sp, #60	@ 0x3c
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005a5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	461a      	mov	r2, r3
 8005a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a68:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a6e:	e841 2300 	strex	r3, r2, [r1]
 8005a72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1e6      	bne.n	8005a48 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3308      	adds	r3, #8
 8005a80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	e853 3f00 	ldrex	r3, [r3]
 8005a88:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005a90:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3308      	adds	r3, #8
 8005a98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a9a:	61ba      	str	r2, [r7, #24]
 8005a9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9e:	6979      	ldr	r1, [r7, #20]
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	e841 2300 	strex	r3, r2, [r1]
 8005aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1e5      	bne.n	8005a7a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005ab6:	bf00      	nop
 8005ab8:	373c      	adds	r7, #60	@ 0x3c
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b095      	sub	sp, #84	@ 0x54
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ada:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ae8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005aea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005aee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005af0:	e841 2300 	strex	r3, r2, [r1]
 8005af4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e6      	bne.n	8005aca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3308      	adds	r3, #8
 8005b02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	e853 3f00 	ldrex	r3, [r3]
 8005b0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b12:	f023 0301 	bic.w	r3, r3, #1
 8005b16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3308      	adds	r3, #8
 8005b1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b28:	e841 2300 	strex	r3, r2, [r1]
 8005b2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1e3      	bne.n	8005afc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d118      	bne.n	8005b6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f023 0310 	bic.w	r3, r3, #16
 8005b50:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b5a:	61bb      	str	r3, [r7, #24]
 8005b5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5e:	6979      	ldr	r1, [r7, #20]
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	613b      	str	r3, [r7, #16]
   return(result);
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e6      	bne.n	8005b3c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005b82:	bf00      	nop
 8005b84:	3754      	adds	r7, #84	@ 0x54
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b09c      	sub	sp, #112	@ 0x70
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b9a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d171      	bne.n	8005c8e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005baa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bac:	2200      	movs	r2, #0
 8005bae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bba:	e853 3f00 	ldrex	r3, [r3]
 8005bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005bc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bc6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005bd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005bd2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005bd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005bd8:	e841 2300 	strex	r3, r2, [r1]
 8005bdc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005bde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1e6      	bne.n	8005bb2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3308      	adds	r3, #8
 8005bea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bee:	e853 3f00 	ldrex	r3, [r3]
 8005bf2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bf6:	f023 0301 	bic.w	r3, r3, #1
 8005bfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8005bfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3308      	adds	r3, #8
 8005c02:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005c04:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c06:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c0c:	e841 2300 	strex	r3, r2, [r1]
 8005c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1e5      	bne.n	8005be4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3308      	adds	r3, #8
 8005c1e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c22:	e853 3f00 	ldrex	r3, [r3]
 8005c26:	623b      	str	r3, [r7, #32]
   return(result);
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3308      	adds	r3, #8
 8005c36:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c38:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c40:	e841 2300 	strex	r3, r2, [r1]
 8005c44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1e5      	bne.n	8005c18 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c4e:	2220      	movs	r2, #32
 8005c50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d118      	bne.n	8005c8e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	e853 3f00 	ldrex	r3, [r3]
 8005c68:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f023 0310 	bic.w	r3, r3, #16
 8005c70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	461a      	mov	r2, r3
 8005c78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c7a:	61fb      	str	r3, [r7, #28]
 8005c7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7e:	69b9      	ldr	r1, [r7, #24]
 8005c80:	69fa      	ldr	r2, [r7, #28]
 8005c82:	e841 2300 	strex	r3, r2, [r1]
 8005c86:	617b      	str	r3, [r7, #20]
   return(result);
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1e6      	bne.n	8005c5c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c90:	2200      	movs	r2, #0
 8005c92:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d107      	bne.n	8005cac <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005ca6:	f7fb f9b9 	bl	800101c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005caa:	e002      	b.n	8005cb2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005cac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005cae:	f7ff f949 	bl	8004f44 <HAL_UART_RxCpltCallback>
}
 8005cb2:	bf00      	nop
 8005cb4:	3770      	adds	r7, #112	@ 0x70
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d109      	bne.n	8005cea <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005cdc:	085b      	lsrs	r3, r3, #1
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f7fb f99a 	bl	800101c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ce8:	e002      	b.n	8005cf0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f7ff f934 	bl	8004f58 <HAL_UART_RxHalfCpltCallback>
}
 8005cf0:	bf00      	nop
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d04:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d0c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d14:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d20:	2b80      	cmp	r3, #128	@ 0x80
 8005d22:	d109      	bne.n	8005d38 <UART_DMAError+0x40>
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	2b21      	cmp	r3, #33	@ 0x21
 8005d28:	d106      	bne.n	8005d38 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8005d32:	6978      	ldr	r0, [r7, #20]
 8005d34:	f7ff fe84 	bl	8005a40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d42:	2b40      	cmp	r3, #64	@ 0x40
 8005d44:	d109      	bne.n	8005d5a <UART_DMAError+0x62>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2b22      	cmp	r3, #34	@ 0x22
 8005d4a:	d106      	bne.n	8005d5a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8005d54:	6978      	ldr	r0, [r7, #20]
 8005d56:	f7ff feb4 	bl	8005ac2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d60:	f043 0210 	orr.w	r2, r3, #16
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d6a:	6978      	ldr	r0, [r7, #20]
 8005d6c:	f7ff f8fe 	bl	8004f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d70:	bf00      	nop
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d101      	bne.n	8005d8e <HAL_UARTEx_DisableFifoMode+0x16>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e027      	b.n	8005dde <HAL_UARTEx_DisableFifoMode+0x66>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2224      	movs	r2, #36	@ 0x24
 8005d9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 0201 	bic.w	r2, r2, #1
 8005db4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005dbc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d101      	bne.n	8005e02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	e02d      	b.n	8005e5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2224      	movs	r2, #36	@ 0x24
 8005e0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 0201 	bic.w	r2, r2, #1
 8005e28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f8a4 	bl	8005f8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d101      	bne.n	8005e7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	e02d      	b.n	8005eda <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2224      	movs	r2, #36	@ 0x24
 8005e8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0201 	bic.w	r2, r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f866 	bl	8005f8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b08c      	sub	sp, #48	@ 0x30
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	4613      	mov	r3, r2
 8005eee:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ef6:	2b20      	cmp	r3, #32
 8005ef8:	d142      	bne.n	8005f80 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d002      	beq.n	8005f06 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8005f00:	88fb      	ldrh	r3, [r7, #6]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e03b      	b.n	8005f82 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005f16:	88fb      	ldrh	r3, [r7, #6]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	68b9      	ldr	r1, [r7, #8]
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f7ff fce9 	bl	80058f4 <UART_Start_Receive_DMA>
 8005f22:	4603      	mov	r3, r0
 8005f24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005f28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d124      	bne.n	8005f7a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d11d      	bne.n	8005f74 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2210      	movs	r2, #16
 8005f3e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	e853 3f00 	ldrex	r3, [r3]
 8005f4c:	617b      	str	r3, [r7, #20]
   return(result);
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f043 0310 	orr.w	r3, r3, #16
 8005f54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f60:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f62:	6a39      	ldr	r1, [r7, #32]
 8005f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f66:	e841 2300 	strex	r3, r2, [r1]
 8005f6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1e6      	bne.n	8005f40 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8005f72:	e002      	b.n	8005f7a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005f7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f7e:	e000      	b.n	8005f82 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005f80:	2302      	movs	r3, #2
  }
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3730      	adds	r7, #48	@ 0x30
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d108      	bne.n	8005fae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005fac:	e031      	b.n	8006012 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005fae:	2308      	movs	r3, #8
 8005fb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005fb2:	2308      	movs	r3, #8
 8005fb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	0e5b      	lsrs	r3, r3, #25
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	0f5b      	lsrs	r3, r3, #29
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fd6:	7bbb      	ldrb	r3, [r7, #14]
 8005fd8:	7b3a      	ldrb	r2, [r7, #12]
 8005fda:	4911      	ldr	r1, [pc, #68]	@ (8006020 <UARTEx_SetNbDataToProcess+0x94>)
 8005fdc:	5c8a      	ldrb	r2, [r1, r2]
 8005fde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fe2:	7b3a      	ldrb	r2, [r7, #12]
 8005fe4:	490f      	ldr	r1, [pc, #60]	@ (8006024 <UARTEx_SetNbDataToProcess+0x98>)
 8005fe6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fe8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	7b7a      	ldrb	r2, [r7, #13]
 8005ff8:	4909      	ldr	r1, [pc, #36]	@ (8006020 <UARTEx_SetNbDataToProcess+0x94>)
 8005ffa:	5c8a      	ldrb	r2, [r1, r2]
 8005ffc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006000:	7b7a      	ldrb	r2, [r7, #13]
 8006002:	4908      	ldr	r1, [pc, #32]	@ (8006024 <UARTEx_SetNbDataToProcess+0x98>)
 8006004:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006006:	fb93 f3f2 	sdiv	r3, r3, r2
 800600a:	b29a      	uxth	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006012:	bf00      	nop
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	08006440 	.word	0x08006440
 8006024:	08006448 	.word	0x08006448

08006028 <_ZdlPvj>:
 8006028:	f000 b811 	b.w	800604e <_ZdlPv>

0800602c <_Znwj>:
 800602c:	2801      	cmp	r0, #1
 800602e:	bf38      	it	cc
 8006030:	2001      	movcc	r0, #1
 8006032:	b510      	push	{r4, lr}
 8006034:	4604      	mov	r4, r0
 8006036:	4620      	mov	r0, r4
 8006038:	f000 f81a 	bl	8006070 <malloc>
 800603c:	b100      	cbz	r0, 8006040 <_Znwj+0x14>
 800603e:	bd10      	pop	{r4, pc}
 8006040:	f000 f808 	bl	8006054 <_ZSt15get_new_handlerv>
 8006044:	b908      	cbnz	r0, 800604a <_Znwj+0x1e>
 8006046:	f000 f80b 	bl	8006060 <abort>
 800604a:	4780      	blx	r0
 800604c:	e7f3      	b.n	8006036 <_Znwj+0xa>

0800604e <_ZdlPv>:
 800604e:	f000 b817 	b.w	8006080 <free>
	...

08006054 <_ZSt15get_new_handlerv>:
 8006054:	4b01      	ldr	r3, [pc, #4]	@ (800605c <_ZSt15get_new_handlerv+0x8>)
 8006056:	e8d3 0faf 	lda	r0, [r3]
 800605a:	4770      	bx	lr
 800605c:	20000180 	.word	0x20000180

08006060 <abort>:
 8006060:	2006      	movs	r0, #6
 8006062:	b508      	push	{r3, lr}
 8006064:	f000 f8f2 	bl	800624c <raise>
 8006068:	2001      	movs	r0, #1
 800606a:	f7fb f91d 	bl	80012a8 <_exit>
	...

08006070 <malloc>:
 8006070:	4b02      	ldr	r3, [pc, #8]	@ (800607c <malloc+0xc>)
 8006072:	4601      	mov	r1, r0
 8006074:	6818      	ldr	r0, [r3, #0]
 8006076:	f000 b82d 	b.w	80060d4 <_malloc_r>
 800607a:	bf00      	nop
 800607c:	2000000c 	.word	0x2000000c

08006080 <free>:
 8006080:	4b02      	ldr	r3, [pc, #8]	@ (800608c <free+0xc>)
 8006082:	4601      	mov	r1, r0
 8006084:	6818      	ldr	r0, [r3, #0]
 8006086:	f000 b939 	b.w	80062fc <_free_r>
 800608a:	bf00      	nop
 800608c:	2000000c 	.word	0x2000000c

08006090 <sbrk_aligned>:
 8006090:	b570      	push	{r4, r5, r6, lr}
 8006092:	4e0f      	ldr	r6, [pc, #60]	@ (80060d0 <sbrk_aligned+0x40>)
 8006094:	460c      	mov	r4, r1
 8006096:	4605      	mov	r5, r0
 8006098:	6831      	ldr	r1, [r6, #0]
 800609a:	b911      	cbnz	r1, 80060a2 <sbrk_aligned+0x12>
 800609c:	f000 f8f2 	bl	8006284 <_sbrk_r>
 80060a0:	6030      	str	r0, [r6, #0]
 80060a2:	4621      	mov	r1, r4
 80060a4:	4628      	mov	r0, r5
 80060a6:	f000 f8ed 	bl	8006284 <_sbrk_r>
 80060aa:	1c43      	adds	r3, r0, #1
 80060ac:	d103      	bne.n	80060b6 <sbrk_aligned+0x26>
 80060ae:	f04f 34ff 	mov.w	r4, #4294967295
 80060b2:	4620      	mov	r0, r4
 80060b4:	bd70      	pop	{r4, r5, r6, pc}
 80060b6:	1cc4      	adds	r4, r0, #3
 80060b8:	f024 0403 	bic.w	r4, r4, #3
 80060bc:	42a0      	cmp	r0, r4
 80060be:	d0f8      	beq.n	80060b2 <sbrk_aligned+0x22>
 80060c0:	1a21      	subs	r1, r4, r0
 80060c2:	4628      	mov	r0, r5
 80060c4:	f000 f8de 	bl	8006284 <_sbrk_r>
 80060c8:	3001      	adds	r0, #1
 80060ca:	d1f2      	bne.n	80060b2 <sbrk_aligned+0x22>
 80060cc:	e7ef      	b.n	80060ae <sbrk_aligned+0x1e>
 80060ce:	bf00      	nop
 80060d0:	20000184 	.word	0x20000184

080060d4 <_malloc_r>:
 80060d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060d8:	1ccd      	adds	r5, r1, #3
 80060da:	4606      	mov	r6, r0
 80060dc:	f025 0503 	bic.w	r5, r5, #3
 80060e0:	3508      	adds	r5, #8
 80060e2:	2d0c      	cmp	r5, #12
 80060e4:	bf38      	it	cc
 80060e6:	250c      	movcc	r5, #12
 80060e8:	2d00      	cmp	r5, #0
 80060ea:	db01      	blt.n	80060f0 <_malloc_r+0x1c>
 80060ec:	42a9      	cmp	r1, r5
 80060ee:	d904      	bls.n	80060fa <_malloc_r+0x26>
 80060f0:	230c      	movs	r3, #12
 80060f2:	6033      	str	r3, [r6, #0]
 80060f4:	2000      	movs	r0, #0
 80060f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80061d0 <_malloc_r+0xfc>
 80060fe:	f000 f869 	bl	80061d4 <__malloc_lock>
 8006102:	f8d8 3000 	ldr.w	r3, [r8]
 8006106:	461c      	mov	r4, r3
 8006108:	bb44      	cbnz	r4, 800615c <_malloc_r+0x88>
 800610a:	4629      	mov	r1, r5
 800610c:	4630      	mov	r0, r6
 800610e:	f7ff ffbf 	bl	8006090 <sbrk_aligned>
 8006112:	1c43      	adds	r3, r0, #1
 8006114:	4604      	mov	r4, r0
 8006116:	d158      	bne.n	80061ca <_malloc_r+0xf6>
 8006118:	f8d8 4000 	ldr.w	r4, [r8]
 800611c:	4627      	mov	r7, r4
 800611e:	2f00      	cmp	r7, #0
 8006120:	d143      	bne.n	80061aa <_malloc_r+0xd6>
 8006122:	2c00      	cmp	r4, #0
 8006124:	d04b      	beq.n	80061be <_malloc_r+0xea>
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	4639      	mov	r1, r7
 800612a:	4630      	mov	r0, r6
 800612c:	eb04 0903 	add.w	r9, r4, r3
 8006130:	f000 f8a8 	bl	8006284 <_sbrk_r>
 8006134:	4581      	cmp	r9, r0
 8006136:	d142      	bne.n	80061be <_malloc_r+0xea>
 8006138:	6821      	ldr	r1, [r4, #0]
 800613a:	4630      	mov	r0, r6
 800613c:	1a6d      	subs	r5, r5, r1
 800613e:	4629      	mov	r1, r5
 8006140:	f7ff ffa6 	bl	8006090 <sbrk_aligned>
 8006144:	3001      	adds	r0, #1
 8006146:	d03a      	beq.n	80061be <_malloc_r+0xea>
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	442b      	add	r3, r5
 800614c:	6023      	str	r3, [r4, #0]
 800614e:	f8d8 3000 	ldr.w	r3, [r8]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	bb62      	cbnz	r2, 80061b0 <_malloc_r+0xdc>
 8006156:	f8c8 7000 	str.w	r7, [r8]
 800615a:	e00f      	b.n	800617c <_malloc_r+0xa8>
 800615c:	6822      	ldr	r2, [r4, #0]
 800615e:	1b52      	subs	r2, r2, r5
 8006160:	d420      	bmi.n	80061a4 <_malloc_r+0xd0>
 8006162:	2a0b      	cmp	r2, #11
 8006164:	d917      	bls.n	8006196 <_malloc_r+0xc2>
 8006166:	1961      	adds	r1, r4, r5
 8006168:	42a3      	cmp	r3, r4
 800616a:	6025      	str	r5, [r4, #0]
 800616c:	bf18      	it	ne
 800616e:	6059      	strne	r1, [r3, #4]
 8006170:	6863      	ldr	r3, [r4, #4]
 8006172:	bf08      	it	eq
 8006174:	f8c8 1000 	streq.w	r1, [r8]
 8006178:	5162      	str	r2, [r4, r5]
 800617a:	604b      	str	r3, [r1, #4]
 800617c:	4630      	mov	r0, r6
 800617e:	f000 f82f 	bl	80061e0 <__malloc_unlock>
 8006182:	f104 000b 	add.w	r0, r4, #11
 8006186:	1d23      	adds	r3, r4, #4
 8006188:	f020 0007 	bic.w	r0, r0, #7
 800618c:	1ac2      	subs	r2, r0, r3
 800618e:	bf1c      	itt	ne
 8006190:	1a1b      	subne	r3, r3, r0
 8006192:	50a3      	strne	r3, [r4, r2]
 8006194:	e7af      	b.n	80060f6 <_malloc_r+0x22>
 8006196:	6862      	ldr	r2, [r4, #4]
 8006198:	42a3      	cmp	r3, r4
 800619a:	bf0c      	ite	eq
 800619c:	f8c8 2000 	streq.w	r2, [r8]
 80061a0:	605a      	strne	r2, [r3, #4]
 80061a2:	e7eb      	b.n	800617c <_malloc_r+0xa8>
 80061a4:	4623      	mov	r3, r4
 80061a6:	6864      	ldr	r4, [r4, #4]
 80061a8:	e7ae      	b.n	8006108 <_malloc_r+0x34>
 80061aa:	463c      	mov	r4, r7
 80061ac:	687f      	ldr	r7, [r7, #4]
 80061ae:	e7b6      	b.n	800611e <_malloc_r+0x4a>
 80061b0:	461a      	mov	r2, r3
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	42a3      	cmp	r3, r4
 80061b6:	d1fb      	bne.n	80061b0 <_malloc_r+0xdc>
 80061b8:	2300      	movs	r3, #0
 80061ba:	6053      	str	r3, [r2, #4]
 80061bc:	e7de      	b.n	800617c <_malloc_r+0xa8>
 80061be:	230c      	movs	r3, #12
 80061c0:	4630      	mov	r0, r6
 80061c2:	6033      	str	r3, [r6, #0]
 80061c4:	f000 f80c 	bl	80061e0 <__malloc_unlock>
 80061c8:	e794      	b.n	80060f4 <_malloc_r+0x20>
 80061ca:	6005      	str	r5, [r0, #0]
 80061cc:	e7d6      	b.n	800617c <_malloc_r+0xa8>
 80061ce:	bf00      	nop
 80061d0:	20000188 	.word	0x20000188

080061d4 <__malloc_lock>:
 80061d4:	4801      	ldr	r0, [pc, #4]	@ (80061dc <__malloc_lock+0x8>)
 80061d6:	f000 b88f 	b.w	80062f8 <__retarget_lock_acquire_recursive>
 80061da:	bf00      	nop
 80061dc:	200002c8 	.word	0x200002c8

080061e0 <__malloc_unlock>:
 80061e0:	4801      	ldr	r0, [pc, #4]	@ (80061e8 <__malloc_unlock+0x8>)
 80061e2:	f000 b88a 	b.w	80062fa <__retarget_lock_release_recursive>
 80061e6:	bf00      	nop
 80061e8:	200002c8 	.word	0x200002c8

080061ec <memset>:
 80061ec:	4402      	add	r2, r0
 80061ee:	4603      	mov	r3, r0
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d100      	bne.n	80061f6 <memset+0xa>
 80061f4:	4770      	bx	lr
 80061f6:	f803 1b01 	strb.w	r1, [r3], #1
 80061fa:	e7f9      	b.n	80061f0 <memset+0x4>

080061fc <_raise_r>:
 80061fc:	291f      	cmp	r1, #31
 80061fe:	b538      	push	{r3, r4, r5, lr}
 8006200:	4605      	mov	r5, r0
 8006202:	460c      	mov	r4, r1
 8006204:	d904      	bls.n	8006210 <_raise_r+0x14>
 8006206:	2316      	movs	r3, #22
 8006208:	6003      	str	r3, [r0, #0]
 800620a:	f04f 30ff 	mov.w	r0, #4294967295
 800620e:	bd38      	pop	{r3, r4, r5, pc}
 8006210:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006212:	b112      	cbz	r2, 800621a <_raise_r+0x1e>
 8006214:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006218:	b94b      	cbnz	r3, 800622e <_raise_r+0x32>
 800621a:	4628      	mov	r0, r5
 800621c:	f000 f830 	bl	8006280 <_getpid_r>
 8006220:	4622      	mov	r2, r4
 8006222:	4601      	mov	r1, r0
 8006224:	4628      	mov	r0, r5
 8006226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800622a:	f000 b817 	b.w	800625c <_kill_r>
 800622e:	2b01      	cmp	r3, #1
 8006230:	d00a      	beq.n	8006248 <_raise_r+0x4c>
 8006232:	1c59      	adds	r1, r3, #1
 8006234:	d103      	bne.n	800623e <_raise_r+0x42>
 8006236:	2316      	movs	r3, #22
 8006238:	6003      	str	r3, [r0, #0]
 800623a:	2001      	movs	r0, #1
 800623c:	e7e7      	b.n	800620e <_raise_r+0x12>
 800623e:	2100      	movs	r1, #0
 8006240:	4620      	mov	r0, r4
 8006242:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006246:	4798      	blx	r3
 8006248:	2000      	movs	r0, #0
 800624a:	e7e0      	b.n	800620e <_raise_r+0x12>

0800624c <raise>:
 800624c:	4b02      	ldr	r3, [pc, #8]	@ (8006258 <raise+0xc>)
 800624e:	4601      	mov	r1, r0
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	f7ff bfd3 	b.w	80061fc <_raise_r>
 8006256:	bf00      	nop
 8006258:	2000000c 	.word	0x2000000c

0800625c <_kill_r>:
 800625c:	b538      	push	{r3, r4, r5, lr}
 800625e:	2300      	movs	r3, #0
 8006260:	4d06      	ldr	r5, [pc, #24]	@ (800627c <_kill_r+0x20>)
 8006262:	4604      	mov	r4, r0
 8006264:	4608      	mov	r0, r1
 8006266:	4611      	mov	r1, r2
 8006268:	602b      	str	r3, [r5, #0]
 800626a:	f7fb f80d 	bl	8001288 <_kill>
 800626e:	1c43      	adds	r3, r0, #1
 8006270:	d102      	bne.n	8006278 <_kill_r+0x1c>
 8006272:	682b      	ldr	r3, [r5, #0]
 8006274:	b103      	cbz	r3, 8006278 <_kill_r+0x1c>
 8006276:	6023      	str	r3, [r4, #0]
 8006278:	bd38      	pop	{r3, r4, r5, pc}
 800627a:	bf00      	nop
 800627c:	200002c4 	.word	0x200002c4

08006280 <_getpid_r>:
 8006280:	f7fa bffa 	b.w	8001278 <_getpid>

08006284 <_sbrk_r>:
 8006284:	b538      	push	{r3, r4, r5, lr}
 8006286:	2300      	movs	r3, #0
 8006288:	4d05      	ldr	r5, [pc, #20]	@ (80062a0 <_sbrk_r+0x1c>)
 800628a:	4604      	mov	r4, r0
 800628c:	4608      	mov	r0, r1
 800628e:	602b      	str	r3, [r5, #0]
 8006290:	f7fb f816 	bl	80012c0 <_sbrk>
 8006294:	1c43      	adds	r3, r0, #1
 8006296:	d102      	bne.n	800629e <_sbrk_r+0x1a>
 8006298:	682b      	ldr	r3, [r5, #0]
 800629a:	b103      	cbz	r3, 800629e <_sbrk_r+0x1a>
 800629c:	6023      	str	r3, [r4, #0]
 800629e:	bd38      	pop	{r3, r4, r5, pc}
 80062a0:	200002c4 	.word	0x200002c4

080062a4 <__errno>:
 80062a4:	4b01      	ldr	r3, [pc, #4]	@ (80062ac <__errno+0x8>)
 80062a6:	6818      	ldr	r0, [r3, #0]
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	2000000c 	.word	0x2000000c

080062b0 <__libc_init_array>:
 80062b0:	b570      	push	{r4, r5, r6, lr}
 80062b2:	4d0d      	ldr	r5, [pc, #52]	@ (80062e8 <__libc_init_array+0x38>)
 80062b4:	2600      	movs	r6, #0
 80062b6:	4c0d      	ldr	r4, [pc, #52]	@ (80062ec <__libc_init_array+0x3c>)
 80062b8:	1b64      	subs	r4, r4, r5
 80062ba:	10a4      	asrs	r4, r4, #2
 80062bc:	42a6      	cmp	r6, r4
 80062be:	d109      	bne.n	80062d4 <__libc_init_array+0x24>
 80062c0:	4d0b      	ldr	r5, [pc, #44]	@ (80062f0 <__libc_init_array+0x40>)
 80062c2:	2600      	movs	r6, #0
 80062c4:	4c0b      	ldr	r4, [pc, #44]	@ (80062f4 <__libc_init_array+0x44>)
 80062c6:	f000 f863 	bl	8006390 <_init>
 80062ca:	1b64      	subs	r4, r4, r5
 80062cc:	10a4      	asrs	r4, r4, #2
 80062ce:	42a6      	cmp	r6, r4
 80062d0:	d105      	bne.n	80062de <__libc_init_array+0x2e>
 80062d2:	bd70      	pop	{r4, r5, r6, pc}
 80062d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80062d8:	3601      	adds	r6, #1
 80062da:	4798      	blx	r3
 80062dc:	e7ee      	b.n	80062bc <__libc_init_array+0xc>
 80062de:	f855 3b04 	ldr.w	r3, [r5], #4
 80062e2:	3601      	adds	r6, #1
 80062e4:	4798      	blx	r3
 80062e6:	e7f2      	b.n	80062ce <__libc_init_array+0x1e>
 80062e8:	08006458 	.word	0x08006458
 80062ec:	08006458 	.word	0x08006458
 80062f0:	08006458 	.word	0x08006458
 80062f4:	08006460 	.word	0x08006460

080062f8 <__retarget_lock_acquire_recursive>:
 80062f8:	4770      	bx	lr

080062fa <__retarget_lock_release_recursive>:
 80062fa:	4770      	bx	lr

080062fc <_free_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	4605      	mov	r5, r0
 8006300:	2900      	cmp	r1, #0
 8006302:	d041      	beq.n	8006388 <_free_r+0x8c>
 8006304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006308:	1f0c      	subs	r4, r1, #4
 800630a:	2b00      	cmp	r3, #0
 800630c:	bfb8      	it	lt
 800630e:	18e4      	addlt	r4, r4, r3
 8006310:	f7ff ff60 	bl	80061d4 <__malloc_lock>
 8006314:	4a1d      	ldr	r2, [pc, #116]	@ (800638c <_free_r+0x90>)
 8006316:	6813      	ldr	r3, [r2, #0]
 8006318:	b933      	cbnz	r3, 8006328 <_free_r+0x2c>
 800631a:	6063      	str	r3, [r4, #4]
 800631c:	6014      	str	r4, [r2, #0]
 800631e:	4628      	mov	r0, r5
 8006320:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006324:	f7ff bf5c 	b.w	80061e0 <__malloc_unlock>
 8006328:	42a3      	cmp	r3, r4
 800632a:	d908      	bls.n	800633e <_free_r+0x42>
 800632c:	6820      	ldr	r0, [r4, #0]
 800632e:	1821      	adds	r1, r4, r0
 8006330:	428b      	cmp	r3, r1
 8006332:	bf01      	itttt	eq
 8006334:	6819      	ldreq	r1, [r3, #0]
 8006336:	685b      	ldreq	r3, [r3, #4]
 8006338:	1809      	addeq	r1, r1, r0
 800633a:	6021      	streq	r1, [r4, #0]
 800633c:	e7ed      	b.n	800631a <_free_r+0x1e>
 800633e:	461a      	mov	r2, r3
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	b10b      	cbz	r3, 8006348 <_free_r+0x4c>
 8006344:	42a3      	cmp	r3, r4
 8006346:	d9fa      	bls.n	800633e <_free_r+0x42>
 8006348:	6811      	ldr	r1, [r2, #0]
 800634a:	1850      	adds	r0, r2, r1
 800634c:	42a0      	cmp	r0, r4
 800634e:	d10b      	bne.n	8006368 <_free_r+0x6c>
 8006350:	6820      	ldr	r0, [r4, #0]
 8006352:	4401      	add	r1, r0
 8006354:	1850      	adds	r0, r2, r1
 8006356:	6011      	str	r1, [r2, #0]
 8006358:	4283      	cmp	r3, r0
 800635a:	d1e0      	bne.n	800631e <_free_r+0x22>
 800635c:	6818      	ldr	r0, [r3, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	4408      	add	r0, r1
 8006362:	6053      	str	r3, [r2, #4]
 8006364:	6010      	str	r0, [r2, #0]
 8006366:	e7da      	b.n	800631e <_free_r+0x22>
 8006368:	d902      	bls.n	8006370 <_free_r+0x74>
 800636a:	230c      	movs	r3, #12
 800636c:	602b      	str	r3, [r5, #0]
 800636e:	e7d6      	b.n	800631e <_free_r+0x22>
 8006370:	6820      	ldr	r0, [r4, #0]
 8006372:	1821      	adds	r1, r4, r0
 8006374:	428b      	cmp	r3, r1
 8006376:	bf02      	ittt	eq
 8006378:	6819      	ldreq	r1, [r3, #0]
 800637a:	685b      	ldreq	r3, [r3, #4]
 800637c:	1809      	addeq	r1, r1, r0
 800637e:	6063      	str	r3, [r4, #4]
 8006380:	bf08      	it	eq
 8006382:	6021      	streq	r1, [r4, #0]
 8006384:	6054      	str	r4, [r2, #4]
 8006386:	e7ca      	b.n	800631e <_free_r+0x22>
 8006388:	bd38      	pop	{r3, r4, r5, pc}
 800638a:	bf00      	nop
 800638c:	20000188 	.word	0x20000188

08006390 <_init>:
 8006390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006392:	bf00      	nop
 8006394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006396:	bc08      	pop	{r3}
 8006398:	469e      	mov	lr, r3
 800639a:	4770      	bx	lr

0800639c <_fini>:
 800639c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800639e:	bf00      	nop
 80063a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063a2:	bc08      	pop	{r3}
 80063a4:	469e      	mov	lr, r3
 80063a6:	4770      	bx	lr
