
zp3_gps_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054ec  080001f4  080001f4  000011f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080056e0  080056e0  000066e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005788  08005788  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005788  08005788  00006788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005790  08005790  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005790  08005790  00006790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005798  08005798  00006798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800579c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000005c  080057f8  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  080057f8  000072cc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ada  00000000  00000000  00007092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029c7  00000000  00000000  00017b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  0001a538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a20  00000000  00000000  0001b278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b4cd  00000000  00000000  0001bc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010633  00000000  00000000  00047165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102cd9  00000000  00000000  00057798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015a471  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003adc  00000000  00000000  0015a4b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0015df90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	@ (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000005c 	.word	0x2000005c
 8000210:	00000000 	.word	0x00000000
 8000214:	080056c8 	.word	0x080056c8

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	@ (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	@ (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	@ (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000060 	.word	0x20000060
 8000230:	080056c8 	.word	0x080056c8

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b9b0 	b.w	80005ac <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800026a:	4688      	mov	r8, r1
 800026c:	4604      	mov	r4, r0
 800026e:	468e      	mov	lr, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14a      	bne.n	800030a <__udivmoddi4+0xa6>
 8000274:	428a      	cmp	r2, r1
 8000276:	4617      	mov	r7, r2
 8000278:	d95f      	bls.n	800033a <__udivmoddi4+0xd6>
 800027a:	fab2 f682 	clz	r6, r2
 800027e:	b14e      	cbz	r6, 8000294 <__udivmoddi4+0x30>
 8000280:	f1c6 0320 	rsb	r3, r6, #32
 8000284:	fa01 fe06 	lsl.w	lr, r1, r6
 8000288:	40b7      	lsls	r7, r6
 800028a:	40b4      	lsls	r4, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	ea43 0e0e 	orr.w	lr, r3, lr
 8000294:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000298:	fa1f fc87 	uxth.w	ip, r7
 800029c:	0c23      	lsrs	r3, r4, #16
 800029e:	fbbe f1f8 	udiv	r1, lr, r8
 80002a2:	fb08 ee11 	mls	lr, r8, r1, lr
 80002a6:	fb01 f20c 	mul.w	r2, r1, ip
 80002aa:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d907      	bls.n	80002c2 <__udivmoddi4+0x5e>
 80002b2:	18fb      	adds	r3, r7, r3
 80002b4:	f101 30ff 	add.w	r0, r1, #4294967295
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x5c>
 80002ba:	429a      	cmp	r2, r3
 80002bc:	f200 8154 	bhi.w	8000568 <__udivmoddi4+0x304>
 80002c0:	4601      	mov	r1, r0
 80002c2:	1a9b      	subs	r3, r3, r2
 80002c4:	b2a2      	uxth	r2, r4
 80002c6:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ca:	fb08 3310 	mls	r3, r8, r0, r3
 80002ce:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80002d6:	4594      	cmp	ip, r2
 80002d8:	d90b      	bls.n	80002f2 <__udivmoddi4+0x8e>
 80002da:	18ba      	adds	r2, r7, r2
 80002dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e0:	bf2c      	ite	cs
 80002e2:	2401      	movcs	r4, #1
 80002e4:	2400      	movcc	r4, #0
 80002e6:	4594      	cmp	ip, r2
 80002e8:	d902      	bls.n	80002f0 <__udivmoddi4+0x8c>
 80002ea:	2c00      	cmp	r4, #0
 80002ec:	f000 813f 	beq.w	800056e <__udivmoddi4+0x30a>
 80002f0:	4618      	mov	r0, r3
 80002f2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f6:	eba2 020c 	sub.w	r2, r2, ip
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa2>
 80002fe:	40f2      	lsrs	r2, r6
 8000300:	2300      	movs	r3, #0
 8000302:	e9c5 2300 	strd	r2, r3, [r5]
 8000306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xb6>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb0>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa2>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d14e      	bne.n	80003c0 <__udivmoddi4+0x15c>
 8000322:	4543      	cmp	r3, r8
 8000324:	f0c0 8112 	bcc.w	800054c <__udivmoddi4+0x2e8>
 8000328:	4282      	cmp	r2, r0
 800032a:	f240 810f 	bls.w	800054c <__udivmoddi4+0x2e8>
 800032e:	4608      	mov	r0, r1
 8000330:	2d00      	cmp	r5, #0
 8000332:	d0e8      	beq.n	8000306 <__udivmoddi4+0xa2>
 8000334:	e9c5 4e00 	strd	r4, lr, [r5]
 8000338:	e7e5      	b.n	8000306 <__udivmoddi4+0xa2>
 800033a:	2a00      	cmp	r2, #0
 800033c:	f000 80ac 	beq.w	8000498 <__udivmoddi4+0x234>
 8000340:	fab2 f682 	clz	r6, r2
 8000344:	2e00      	cmp	r6, #0
 8000346:	f040 80bb 	bne.w	80004c0 <__udivmoddi4+0x25c>
 800034a:	1a8b      	subs	r3, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b2bc      	uxth	r4, r7
 8000352:	2101      	movs	r1, #1
 8000354:	0c02      	lsrs	r2, r0, #16
 8000356:	b280      	uxth	r0, r0
 8000358:	fbb3 fcfe 	udiv	ip, r3, lr
 800035c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000360:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000364:	fb04 f20c 	mul.w	r2, r4, ip
 8000368:	429a      	cmp	r2, r3
 800036a:	d90e      	bls.n	800038a <__udivmoddi4+0x126>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	429a      	cmp	r2, r3
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80ec 	beq.w	8000560 <__udivmoddi4+0x2fc>
 8000388:	46c4      	mov	ip, r8
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	fbb3 f8fe 	udiv	r8, r3, lr
 8000390:	fb0e 3318 	mls	r3, lr, r8, r3
 8000394:	fb04 f408 	mul.w	r4, r4, r8
 8000398:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800039c:	4294      	cmp	r4, r2
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x154>
 80003a0:	18ba      	adds	r2, r7, r2
 80003a2:	f108 33ff 	add.w	r3, r8, #4294967295
 80003a6:	bf2c      	ite	cs
 80003a8:	2001      	movcs	r0, #1
 80003aa:	2000      	movcc	r0, #0
 80003ac:	4294      	cmp	r4, r2
 80003ae:	d902      	bls.n	80003b6 <__udivmoddi4+0x152>
 80003b0:	2800      	cmp	r0, #0
 80003b2:	f000 80d1 	beq.w	8000558 <__udivmoddi4+0x2f4>
 80003b6:	4698      	mov	r8, r3
 80003b8:	1b12      	subs	r2, r2, r4
 80003ba:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 80003be:	e79d      	b.n	80002fc <__udivmoddi4+0x98>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa08 f401 	lsl.w	r4, r8, r1
 80003ca:	fa00 f901 	lsl.w	r9, r0, r1
 80003ce:	fa22 f706 	lsr.w	r7, r2, r6
 80003d2:	fa28 f806 	lsr.w	r8, r8, r6
 80003d6:	408a      	lsls	r2, r1
 80003d8:	431f      	orrs	r7, r3
 80003da:	fa20 f306 	lsr.w	r3, r0, r6
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	4323      	orrs	r3, r4
 80003e2:	fa1f fc87 	uxth.w	ip, r7
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	fbb8 fef0 	udiv	lr, r8, r0
 80003ec:	fb00 881e 	mls	r8, r0, lr, r8
 80003f0:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80003f4:	fb0e f80c 	mul.w	r8, lr, ip
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d90e      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	45a0      	cmp	r8, r4
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 80b8 	beq.w	8000588 <__udivmoddi4+0x324>
 8000418:	46d6      	mov	lr, sl
 800041a:	eba4 0408 	sub.w	r4, r4, r8
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	fbb4 f3f0 	udiv	r3, r4, r0
 8000426:	fb00 4413 	mls	r4, r0, r3, r4
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000432:	45a4      	cmp	ip, r4
 8000434:	d90e      	bls.n	8000454 <__udivmoddi4+0x1f0>
 8000436:	193c      	adds	r4, r7, r4
 8000438:	f103 30ff 	add.w	r0, r3, #4294967295
 800043c:	bf2c      	ite	cs
 800043e:	f04f 0801 	movcs.w	r8, #1
 8000442:	f04f 0800 	movcc.w	r8, #0
 8000446:	45a4      	cmp	ip, r4
 8000448:	d903      	bls.n	8000452 <__udivmoddi4+0x1ee>
 800044a:	f1b8 0f00 	cmp.w	r8, #0
 800044e:	f000 809f 	beq.w	8000590 <__udivmoddi4+0x32c>
 8000452:	4603      	mov	r3, r0
 8000454:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000458:	eba4 040c 	sub.w	r4, r4, ip
 800045c:	fba0 ec02 	umull	lr, ip, r0, r2
 8000460:	4564      	cmp	r4, ip
 8000462:	4673      	mov	r3, lr
 8000464:	46e0      	mov	r8, ip
 8000466:	d302      	bcc.n	800046e <__udivmoddi4+0x20a>
 8000468:	d107      	bne.n	800047a <__udivmoddi4+0x216>
 800046a:	45f1      	cmp	r9, lr
 800046c:	d205      	bcs.n	800047a <__udivmoddi4+0x216>
 800046e:	ebbe 0302 	subs.w	r3, lr, r2
 8000472:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000476:	3801      	subs	r0, #1
 8000478:	46e0      	mov	r8, ip
 800047a:	b15d      	cbz	r5, 8000494 <__udivmoddi4+0x230>
 800047c:	ebb9 0203 	subs.w	r2, r9, r3
 8000480:	eb64 0408 	sbc.w	r4, r4, r8
 8000484:	fa04 f606 	lsl.w	r6, r4, r6
 8000488:	fa22 f301 	lsr.w	r3, r2, r1
 800048c:	40cc      	lsrs	r4, r1
 800048e:	431e      	orrs	r6, r3
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e736      	b.n	8000306 <__udivmoddi4+0xa2>
 8000498:	fbb1 fcf2 	udiv	ip, r1, r2
 800049c:	0c01      	lsrs	r1, r0, #16
 800049e:	4614      	mov	r4, r2
 80004a0:	b280      	uxth	r0, r0
 80004a2:	4696      	mov	lr, r2
 80004a4:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004a8:	2620      	movs	r6, #32
 80004aa:	4690      	mov	r8, r2
 80004ac:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004b0:	4610      	mov	r0, r2
 80004b2:	fbb1 f1f2 	udiv	r1, r1, r2
 80004b6:	eba3 0308 	sub.w	r3, r3, r8
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	e74b      	b.n	8000358 <__udivmoddi4+0xf4>
 80004c0:	40b7      	lsls	r7, r6
 80004c2:	f1c6 0320 	rsb	r3, r6, #32
 80004c6:	fa01 f206 	lsl.w	r2, r1, r6
 80004ca:	fa21 f803 	lsr.w	r8, r1, r3
 80004ce:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d2:	fa20 f303 	lsr.w	r3, r0, r3
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	40b0      	lsls	r0, r6
 80004da:	4313      	orrs	r3, r2
 80004dc:	0c02      	lsrs	r2, r0, #16
 80004de:	0c19      	lsrs	r1, r3, #16
 80004e0:	b280      	uxth	r0, r0
 80004e2:	fbb8 f9fe 	udiv	r9, r8, lr
 80004e6:	fb0e 8819 	mls	r8, lr, r9, r8
 80004ea:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	4588      	cmp	r8, r1
 80004f4:	d951      	bls.n	800059a <__udivmoddi4+0x336>
 80004f6:	1879      	adds	r1, r7, r1
 80004f8:	f109 3cff 	add.w	ip, r9, #4294967295
 80004fc:	bf2c      	ite	cs
 80004fe:	f04f 0a01 	movcs.w	sl, #1
 8000502:	f04f 0a00 	movcc.w	sl, #0
 8000506:	4588      	cmp	r8, r1
 8000508:	d902      	bls.n	8000510 <__udivmoddi4+0x2ac>
 800050a:	f1ba 0f00 	cmp.w	sl, #0
 800050e:	d031      	beq.n	8000574 <__udivmoddi4+0x310>
 8000510:	eba1 0108 	sub.w	r1, r1, r8
 8000514:	fbb1 f9fe 	udiv	r9, r1, lr
 8000518:	fb09 f804 	mul.w	r8, r9, r4
 800051c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000520:	b29b      	uxth	r3, r3
 8000522:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000526:	4543      	cmp	r3, r8
 8000528:	d235      	bcs.n	8000596 <__udivmoddi4+0x332>
 800052a:	18fb      	adds	r3, r7, r3
 800052c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000530:	bf2c      	ite	cs
 8000532:	f04f 0a01 	movcs.w	sl, #1
 8000536:	f04f 0a00 	movcc.w	sl, #0
 800053a:	4543      	cmp	r3, r8
 800053c:	d2bb      	bcs.n	80004b6 <__udivmoddi4+0x252>
 800053e:	f1ba 0f00 	cmp.w	sl, #0
 8000542:	d1b8      	bne.n	80004b6 <__udivmoddi4+0x252>
 8000544:	f1a9 0102 	sub.w	r1, r9, #2
 8000548:	443b      	add	r3, r7
 800054a:	e7b4      	b.n	80004b6 <__udivmoddi4+0x252>
 800054c:	1a84      	subs	r4, r0, r2
 800054e:	eb68 0203 	sbc.w	r2, r8, r3
 8000552:	2001      	movs	r0, #1
 8000554:	4696      	mov	lr, r2
 8000556:	e6eb      	b.n	8000330 <__udivmoddi4+0xcc>
 8000558:	443a      	add	r2, r7
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	e72b      	b.n	80003b8 <__udivmoddi4+0x154>
 8000560:	f1ac 0c02 	sub.w	ip, ip, #2
 8000564:	443b      	add	r3, r7
 8000566:	e710      	b.n	800038a <__udivmoddi4+0x126>
 8000568:	3902      	subs	r1, #2
 800056a:	443b      	add	r3, r7
 800056c:	e6a9      	b.n	80002c2 <__udivmoddi4+0x5e>
 800056e:	443a      	add	r2, r7
 8000570:	3802      	subs	r0, #2
 8000572:	e6be      	b.n	80002f2 <__udivmoddi4+0x8e>
 8000574:	eba7 0808 	sub.w	r8, r7, r8
 8000578:	f1a9 0c02 	sub.w	ip, r9, #2
 800057c:	4441      	add	r1, r8
 800057e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000582:	fb09 f804 	mul.w	r8, r9, r4
 8000586:	e7c9      	b.n	800051c <__udivmoddi4+0x2b8>
 8000588:	f1ae 0e02 	sub.w	lr, lr, #2
 800058c:	443c      	add	r4, r7
 800058e:	e744      	b.n	800041a <__udivmoddi4+0x1b6>
 8000590:	3b02      	subs	r3, #2
 8000592:	443c      	add	r4, r7
 8000594:	e75e      	b.n	8000454 <__udivmoddi4+0x1f0>
 8000596:	4649      	mov	r1, r9
 8000598:	e78d      	b.n	80004b6 <__udivmoddi4+0x252>
 800059a:	eba1 0108 	sub.w	r1, r1, r8
 800059e:	46cc      	mov	ip, r9
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7b8      	b.n	800051c <__udivmoddi4+0x2b8>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f001 fa50 	bl	8001a5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f813 	bl	80005e4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f919 	bl	80007f4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80005c2:	f000 f8ed 	bl	80007a0 <_ZL11MX_DMA_Initv>
  MX_ICACHE_Init();
 80005c6:	f000 f86d 	bl	80006a4 <_ZL14MX_ICACHE_Initv>
  MX_USART2_UART_Init();
 80005ca:	f000 f889 	bl	80006e0 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  int initSuccess = gps->init();
 80005ce:	4b04      	ldr	r3, [pc, #16]	@ (80005e0 <main+0x30>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 fc7a 	bl	8000ecc <_ZN3GPS4initEv>
 80005d8:	4603      	mov	r3, r0
 80005da:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <main+0x2c>
 80005e0:	20000174 	.word	0x20000174

080005e4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b098      	sub	sp, #96	@ 0x60
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0318 	add.w	r3, r7, #24
 80005ee:	2248      	movs	r2, #72	@ 0x48
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f004 ff96 	bl	8005524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000606:	2000      	movs	r0, #0
 8000608:	f002 f878 	bl	80026fc <HAL_PWREx_ControlVoltageScaling>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	bf14      	ite	ne
 8000612:	2301      	movne	r3, #1
 8000614:	2300      	moveq	r3, #0
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 800061c:	f000 f9e2 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000620:	2310      	movs	r3, #16
 8000622:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000628:	2300      	movs	r3, #0
 800062a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800062c:	2360      	movs	r3, #96	@ 0x60
 800062e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2302      	movs	r3, #2
 8000632:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000634:	2301      	movs	r3, #1
 8000636:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000638:	2301      	movs	r3, #1
 800063a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 800063c:	2337      	movs	r3, #55	@ 0x37
 800063e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000640:	2307      	movs	r3, #7
 8000642:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0318 	add.w	r3, r7, #24
 8000650:	4618      	mov	r0, r3
 8000652:	f002 f8f3 	bl	800283c <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	bf14      	ite	ne
 800065c:	2301      	movne	r3, #1
 800065e:	2300      	moveq	r3, #0
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8000666:	f000 f9bd 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2303      	movs	r3, #3
 8000670:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2105      	movs	r1, #5
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fdb0 	bl	80031e8 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	bf14      	ite	ne
 800068e:	2301      	movne	r3, #1
 8000690:	2300      	moveq	r3, #0
 8000692:	b2db      	uxtb	r3, r3
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8000698:	f000 f9a4 	bl	80009e4 <Error_Handler>
  }
}
 800069c:	bf00      	nop
 800069e:	3760      	adds	r7, #96	@ 0x60
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80006a8:	2000      	movs	r0, #0
 80006aa:	f001 ffe9 	bl	8002680 <HAL_ICACHE_ConfigAssociativityMode>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	bf14      	ite	ne
 80006b4:	2301      	movne	r3, #1
 80006b6:	2300      	moveq	r3, #0
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <_ZL14MX_ICACHE_Initv+0x1e>
  {
    Error_Handler();
 80006be:	f000 f991 	bl	80009e4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80006c2:	f001 fffd 	bl	80026c0 <HAL_ICACHE_Enable>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	bf14      	ite	ne
 80006cc:	2301      	movne	r3, #1
 80006ce:	2300      	moveq	r3, #0
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <_ZL14MX_ICACHE_Initv+0x36>
  {
    Error_Handler();
 80006d6:	f000 f985 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000798 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80006e6:	4a2d      	ldr	r2, [pc, #180]	@ (800079c <_ZL19MX_USART2_UART_Initv+0xbc>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000798 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80006ec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b29      	ldr	r3, [pc, #164]	@ (8000798 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b27      	ldr	r3, [pc, #156]	@ (8000798 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b26      	ldr	r3, [pc, #152]	@ (8000798 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b24      	ldr	r3, [pc, #144]	@ (8000798 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b23      	ldr	r3, [pc, #140]	@ (8000798 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b21      	ldr	r3, [pc, #132]	@ (8000798 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000716:	4b20      	ldr	r3, [pc, #128]	@ (8000798 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800071c:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800071e:	2200      	movs	r2, #0
 8000720:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000722:	4b1d      	ldr	r3, [pc, #116]	@ (8000798 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000724:	2200      	movs	r2, #0
 8000726:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000728:	481b      	ldr	r0, [pc, #108]	@ (8000798 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800072a:	f003 fd57 	bl	80041dc <HAL_UART_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	bf14      	ite	ne
 8000734:	2301      	movne	r3, #1
 8000736:	2300      	moveq	r3, #0
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 800073e:	f000 f951 	bl	80009e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000742:	2100      	movs	r1, #0
 8000744:	4814      	ldr	r0, [pc, #80]	@ (8000798 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000746:	f004 fcec 	bl	8005122 <HAL_UARTEx_SetTxFifoThreshold>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	bf14      	ite	ne
 8000750:	2301      	movne	r3, #1
 8000752:	2300      	moveq	r3, #0
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 800075a:	f000 f943 	bl	80009e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800075e:	2100      	movs	r1, #0
 8000760:	480d      	ldr	r0, [pc, #52]	@ (8000798 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000762:	f004 fd1c 	bl	800519e <HAL_UARTEx_SetRxFifoThreshold>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	bf14      	ite	ne
 800076c:	2301      	movne	r3, #1
 800076e:	2300      	moveq	r3, #0
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8000776:	f000 f935 	bl	80009e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800077a:	4807      	ldr	r0, [pc, #28]	@ (8000798 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800077c:	f004 fc98 	bl	80050b0 <HAL_UARTEx_DisableFifoMode>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	bf14      	ite	ne
 8000786:	2301      	movne	r3, #1
 8000788:	2300      	moveq	r3, #0
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8000790:	f000 f928 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000078 	.word	0x20000078
 800079c:	40004400 	.word	0x40004400

080007a0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <_ZL11MX_DMA_Initv+0x50>)
 80007a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007aa:	4a11      	ldr	r2, [pc, #68]	@ (80007f0 <_ZL11MX_DMA_Initv+0x50>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80007b2:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <_ZL11MX_DMA_Initv+0x50>)
 80007b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <_ZL11MX_DMA_Initv+0x50>)
 80007c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007c2:	4a0b      	ldr	r2, [pc, #44]	@ (80007f0 <_ZL11MX_DMA_Initv+0x50>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80007ca:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <_ZL11MX_DMA_Initv+0x50>)
 80007cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	201d      	movs	r0, #29
 80007dc:	f001 fa8f 	bl	8001cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007e0:	201d      	movs	r0, #29
 80007e2:	f001 faa6 	bl	8001d32 <HAL_NVIC_EnableIRQ>

}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	@ 0x28
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	4b63      	ldr	r3, [pc, #396]	@ (8000998 <_ZL12MX_GPIO_Initv+0x1a4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	4a62      	ldr	r2, [pc, #392]	@ (8000998 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000816:	4b60      	ldr	r3, [pc, #384]	@ (8000998 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b5d      	ldr	r3, [pc, #372]	@ (8000998 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	4a5c      	ldr	r2, [pc, #368]	@ (8000998 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082e:	4b5a      	ldr	r3, [pc, #360]	@ (8000998 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	4b57      	ldr	r3, [pc, #348]	@ (8000998 <_ZL12MX_GPIO_Initv+0x1a4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	4a56      	ldr	r2, [pc, #344]	@ (8000998 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000846:	4b54      	ldr	r3, [pc, #336]	@ (8000998 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000852:	4b51      	ldr	r3, [pc, #324]	@ (8000998 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	4a50      	ldr	r2, [pc, #320]	@ (8000998 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800085c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085e:	4b4e      	ldr	r3, [pc, #312]	@ (8000998 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800086a:	f001 ffa3 	bl	80027b4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2180      	movs	r1, #128	@ 0x80
 8000872:	484a      	ldr	r0, [pc, #296]	@ (800099c <_ZL12MX_GPIO_Initv+0x1a8>)
 8000874:	f001 feec 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800087e:	4848      	ldr	r0, [pc, #288]	@ (80009a0 <_ZL12MX_GPIO_Initv+0x1ac>)
 8000880:	f001 fee6 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	21a0      	movs	r1, #160	@ 0xa0
 8000888:	4846      	ldr	r0, [pc, #280]	@ (80009a4 <_ZL12MX_GPIO_Initv+0x1b0>)
 800088a:	f001 fee1 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 800088e:	2304      	movs	r3, #4
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000892:	2303      	movs	r3, #3
 8000894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	483e      	ldr	r0, [pc, #248]	@ (800099c <_ZL12MX_GPIO_Initv+0x1a8>)
 80008a2:	f001 fd55 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80008a6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	4839      	ldr	r0, [pc, #228]	@ (80009a4 <_ZL12MX_GPIO_Initv+0x1b0>)
 80008be:	f001 fd47 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c8:	2303      	movs	r3, #3
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	4833      	ldr	r0, [pc, #204]	@ (80009a4 <_ZL12MX_GPIO_Initv+0x1b0>)
 80008d8:	f001 fd3a 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80008dc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80008e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80008ee:	2308      	movs	r3, #8
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	482b      	ldr	r0, [pc, #172]	@ (80009a8 <_ZL12MX_GPIO_Initv+0x1b4>)
 80008fa:	f001 fd29 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80008fe:	2380      	movs	r3, #128	@ 0x80
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	4821      	ldr	r0, [pc, #132]	@ (800099c <_ZL12MX_GPIO_Initv+0x1a8>)
 8000916:	f001 fd1b 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800091a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800091e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	481b      	ldr	r0, [pc, #108]	@ (80009a0 <_ZL12MX_GPIO_Initv+0x1ac>)
 8000934:	f001 fd0c 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000938:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800094a:	230a      	movs	r3, #10
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	4812      	ldr	r0, [pc, #72]	@ (80009a0 <_ZL12MX_GPIO_Initv+0x1ac>)
 8000956:	f001 fcfb 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800095a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000960:	2303      	movs	r3, #3
 8000962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	480c      	ldr	r0, [pc, #48]	@ (80009a0 <_ZL12MX_GPIO_Initv+0x1ac>)
 8000970:	f001 fcee 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8000974:	23a0      	movs	r3, #160	@ 0xa0
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	4806      	ldr	r0, [pc, #24]	@ (80009a4 <_ZL12MX_GPIO_Initv+0x1b0>)
 800098c:	f001 fce0 	bl	8002350 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	@ 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40021000 	.word	0x40021000
 800099c:	42020800 	.word	0x42020800
 80009a0:	42020000 	.word	0x42020000
 80009a4:	42020400 	.word	0x42020400
 80009a8:	42021800 	.word	0x42021800

080009ac <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

extern "C" {
	void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	807b      	strh	r3, [r7, #2]
		int success = -1;
 80009b8:	f04f 33ff 	mov.w	r3, #4294967295
 80009bc:	60fb      	str	r3, [r7, #12]
		if (&huart2 == huart) {
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a06      	ldr	r2, [pc, #24]	@ (80009dc <HAL_UARTEx_RxEventCallback+0x30>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d106      	bne.n	80009d4 <HAL_UARTEx_RxEventCallback+0x28>
			success = gps->processGPSData();
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <HAL_UARTEx_RxEventCallback+0x34>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 fadd 	bl	8000f8a <_ZN3GPS14processGPSDataEv>
 80009d0:	4603      	mov	r3, r0
 80009d2:	60fb      	str	r3, [r7, #12]
		}
	}
 80009d4:	bf00      	nop
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000078 	.word	0x20000078
 80009e0:	20000174 	.word	0x20000174

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <Error_Handler+0x8>

080009f0 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80009f0:	b598      	push	{r3, r4, r7, lr}
 80009f2:	af00      	add	r7, sp, #0
GPS* gps = new GPS (&huart2);
 80009f4:	f44f 7036 	mov.w	r0, #728	@ 0x2d8
 80009f8:	f004 fcb4 	bl	8005364 <_Znwj>
 80009fc:	4603      	mov	r3, r0
 80009fe:	461c      	mov	r4, r3
 8000a00:	4903      	ldr	r1, [pc, #12]	@ (8000a10 <_Z41__static_initialization_and_destruction_0v+0x20>)
 8000a02:	4620      	mov	r0, r4
 8000a04:	f000 fa4a 	bl	8000e9c <_ZN3GPSC1EP20__UART_HandleTypeDef>
 8000a08:	4b02      	ldr	r3, [pc, #8]	@ (8000a14 <_Z41__static_initialization_and_destruction_0v+0x24>)
 8000a0a:	601c      	str	r4, [r3, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	bd98      	pop	{r3, r4, r7, pc}
 8000a10:	20000078 	.word	0x20000078
 8000a14:	20000174 	.word	0x20000174

08000a18 <_GLOBAL__sub_I_huart2>:
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	f7ff ffe8 	bl	80009f0 <_Z41__static_initialization_and_destruction_0v>
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <HAL_MspInit+0x44>)
 8000a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a68 <HAL_MspInit+0x44>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a36:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <HAL_MspInit+0x44>)
 8000a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <HAL_MspInit+0x44>)
 8000a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a46:	4a08      	ldr	r2, [pc, #32]	@ (8000a68 <HAL_MspInit+0x44>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a4e:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <HAL_MspInit+0x44>)
 8000a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a5a:	f001 febb 	bl	80027d4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b0ae      	sub	sp, #184	@ 0xb8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	2294      	movs	r2, #148	@ 0x94
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f004 fd49 	bl	8005524 <memset>
  if(huart->Instance==USART2)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a3a      	ldr	r2, [pc, #232]	@ (8000b80 <HAL_UART_MspInit+0x114>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d16d      	bne.n	8000b78 <HAL_UART_MspInit+0x10c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f002 fe81 	bl	80037b0 <HAL_RCCEx_PeriphCLKConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ab4:	f7ff ff96 	bl	80009e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab8:	4b32      	ldr	r3, [pc, #200]	@ (8000b84 <HAL_UART_MspInit+0x118>)
 8000aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000abc:	4a31      	ldr	r2, [pc, #196]	@ (8000b84 <HAL_UART_MspInit+0x118>)
 8000abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ac4:	4b2f      	ldr	r3, [pc, #188]	@ (8000b84 <HAL_UART_MspInit+0x118>)
 8000ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b84 <HAL_UART_MspInit+0x118>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad4:	4a2b      	ldr	r2, [pc, #172]	@ (8000b84 <HAL_UART_MspInit+0x118>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000adc:	4b29      	ldr	r3, [pc, #164]	@ (8000b84 <HAL_UART_MspInit+0x118>)
 8000ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ae8:	230c      	movs	r3, #12
 8000aea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b00:	2307      	movs	r3, #7
 8000b02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	481e      	ldr	r0, [pc, #120]	@ (8000b88 <HAL_UART_MspInit+0x11c>)
 8000b0e:	f001 fc1f 	bl	8002350 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000b12:	4b1e      	ldr	r3, [pc, #120]	@ (8000b8c <HAL_UART_MspInit+0x120>)
 8000b14:	4a1e      	ldr	r2, [pc, #120]	@ (8000b90 <HAL_UART_MspInit+0x124>)
 8000b16:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000b18:	4b1c      	ldr	r3, [pc, #112]	@ (8000b8c <HAL_UART_MspInit+0x120>)
 8000b1a:	221b      	movs	r2, #27
 8000b1c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b8c <HAL_UART_MspInit+0x120>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b24:	4b19      	ldr	r3, [pc, #100]	@ (8000b8c <HAL_UART_MspInit+0x120>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b2a:	4b18      	ldr	r3, [pc, #96]	@ (8000b8c <HAL_UART_MspInit+0x120>)
 8000b2c:	2280      	movs	r2, #128	@ 0x80
 8000b2e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b30:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <HAL_UART_MspInit+0x120>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <HAL_UART_MspInit+0x120>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000b3c:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <HAL_UART_MspInit+0x120>)
 8000b3e:	2220      	movs	r2, #32
 8000b40:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b42:	4b12      	ldr	r3, [pc, #72]	@ (8000b8c <HAL_UART_MspInit+0x120>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b48:	4810      	ldr	r0, [pc, #64]	@ (8000b8c <HAL_UART_MspInit+0x120>)
 8000b4a:	f001 f90d 	bl	8001d68 <HAL_DMA_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8000b54:	f7ff ff46 	bl	80009e4 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000b58:	2110      	movs	r1, #16
 8000b5a:	480c      	ldr	r0, [pc, #48]	@ (8000b8c <HAL_UART_MspInit+0x120>)
 8000b5c:	f001 fb27 	bl	80021ae <HAL_DMA_ConfigChannelAttributes>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8000b66:	f7ff ff3d 	bl	80009e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	@ (8000b8c <HAL_UART_MspInit+0x120>)
 8000b6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000b72:	4a06      	ldr	r2, [pc, #24]	@ (8000b8c <HAL_UART_MspInit+0x120>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b78:	bf00      	nop
 8000b7a:	37b8      	adds	r7, #184	@ 0xb8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40004400 	.word	0x40004400
 8000b84:	40021000 	.word	0x40021000
 8000b88:	42020000 	.word	0x42020000
 8000b8c:	2000010c 	.word	0x2000010c
 8000b90:	40020008 	.word	0x40020008

08000b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <NMI_Handler+0x4>

08000b9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <MemManage_Handler+0x4>

08000bac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <BusFault_Handler+0x4>

08000bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <UsageFault_Handler+0x4>

08000bbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bea:	f000 ff8d 	bl	8001b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000bf8:	4802      	ldr	r0, [pc, #8]	@ (8000c04 <DMA1_Channel1_IRQHandler+0x10>)
 8000bfa:	f001 f9d8 	bl	8001fae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	2000010c 	.word	0x2000010c

08000c08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return 1;
 8000c0c:	2301      	movs	r3, #1
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <_kill>:

int _kill(int pid, int sig)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c22:	f004 fcdb 	bl	80055dc <__errno>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2216      	movs	r2, #22
 8000c2a:	601a      	str	r2, [r3, #0]
  return -1;
 8000c2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <_exit>:

void _exit (int status)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c40:	f04f 31ff 	mov.w	r1, #4294967295
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ffe7 	bl	8000c18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c4a:	bf00      	nop
 8000c4c:	e7fd      	b.n	8000c4a <_exit+0x12>
	...

08000c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c58:	4a14      	ldr	r2, [pc, #80]	@ (8000cac <_sbrk+0x5c>)
 8000c5a:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <_sbrk+0x60>)
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c64:	4b13      	ldr	r3, [pc, #76]	@ (8000cb4 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d102      	bne.n	8000c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <_sbrk+0x64>)
 8000c6e:	4a12      	ldr	r2, [pc, #72]	@ (8000cb8 <_sbrk+0x68>)
 8000c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c72:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d207      	bcs.n	8000c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c80:	f004 fcac 	bl	80055dc <__errno>
 8000c84:	4603      	mov	r3, r0
 8000c86:	220c      	movs	r2, #12
 8000c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8e:	e009      	b.n	8000ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c90:	4b08      	ldr	r3, [pc, #32]	@ (8000cb4 <_sbrk+0x64>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c96:	4b07      	ldr	r3, [pc, #28]	@ (8000cb4 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	4a05      	ldr	r2, [pc, #20]	@ (8000cb4 <_sbrk+0x64>)
 8000ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20030000 	.word	0x20030000
 8000cb0:	00000400 	.word	0x00000400
 8000cb4:	20000178 	.word	0x20000178
 8000cb8:	200002d0 	.word	0x200002d0

08000cbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cc0:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <SystemInit+0x20>)
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cc6:	4a05      	ldr	r2, [pc, #20]	@ (8000cdc <SystemInit+0x20>)
 8000cc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b087      	sub	sp, #28
 8000ce4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000ce6:	4b4f      	ldr	r3, [pc, #316]	@ (8000e24 <SystemCoreClockUpdate+0x144>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0308 	and.w	r3, r3, #8
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d107      	bne.n	8000d02 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000cf2:	4b4c      	ldr	r3, [pc, #304]	@ (8000e24 <SystemCoreClockUpdate+0x144>)
 8000cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	e005      	b.n	8000d0e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000d02:	4b48      	ldr	r3, [pc, #288]	@ (8000e24 <SystemCoreClockUpdate+0x144>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	091b      	lsrs	r3, r3, #4
 8000d08:	f003 030f 	and.w	r3, r3, #15
 8000d0c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000d0e:	4a46      	ldr	r2, [pc, #280]	@ (8000e28 <SystemCoreClockUpdate+0x148>)
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d16:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d18:	4b42      	ldr	r3, [pc, #264]	@ (8000e24 <SystemCoreClockUpdate+0x144>)
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	f003 030c 	and.w	r3, r3, #12
 8000d20:	2b0c      	cmp	r3, #12
 8000d22:	d866      	bhi.n	8000df2 <SystemCoreClockUpdate+0x112>
 8000d24:	a201      	add	r2, pc, #4	@ (adr r2, 8000d2c <SystemCoreClockUpdate+0x4c>)
 8000d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d2a:	bf00      	nop
 8000d2c:	08000d61 	.word	0x08000d61
 8000d30:	08000df3 	.word	0x08000df3
 8000d34:	08000df3 	.word	0x08000df3
 8000d38:	08000df3 	.word	0x08000df3
 8000d3c:	08000d69 	.word	0x08000d69
 8000d40:	08000df3 	.word	0x08000df3
 8000d44:	08000df3 	.word	0x08000df3
 8000d48:	08000df3 	.word	0x08000df3
 8000d4c:	08000d71 	.word	0x08000d71
 8000d50:	08000df3 	.word	0x08000df3
 8000d54:	08000df3 	.word	0x08000df3
 8000d58:	08000df3 	.word	0x08000df3
 8000d5c:	08000d79 	.word	0x08000d79
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000d60:	4a32      	ldr	r2, [pc, #200]	@ (8000e2c <SystemCoreClockUpdate+0x14c>)
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	6013      	str	r3, [r2, #0]
      break;
 8000d66:	e048      	b.n	8000dfa <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000d68:	4b30      	ldr	r3, [pc, #192]	@ (8000e2c <SystemCoreClockUpdate+0x14c>)
 8000d6a:	4a31      	ldr	r2, [pc, #196]	@ (8000e30 <SystemCoreClockUpdate+0x150>)
 8000d6c:	601a      	str	r2, [r3, #0]
      break;
 8000d6e:	e044      	b.n	8000dfa <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000d70:	4b2e      	ldr	r3, [pc, #184]	@ (8000e2c <SystemCoreClockUpdate+0x14c>)
 8000d72:	4a30      	ldr	r2, [pc, #192]	@ (8000e34 <SystemCoreClockUpdate+0x154>)
 8000d74:	601a      	str	r2, [r3, #0]
      break;
 8000d76:	e040      	b.n	8000dfa <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000d78:	4b2a      	ldr	r3, [pc, #168]	@ (8000e24 <SystemCoreClockUpdate+0x144>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000d82:	4b28      	ldr	r3, [pc, #160]	@ (8000e24 <SystemCoreClockUpdate+0x144>)
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	091b      	lsrs	r3, r3, #4
 8000d88:	f003 030f 	and.w	r3, r3, #15
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d003      	beq.n	8000d9e <SystemCoreClockUpdate+0xbe>
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d006      	beq.n	8000daa <SystemCoreClockUpdate+0xca>
 8000d9c:	e00b      	b.n	8000db6 <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000d9e:	4a24      	ldr	r2, [pc, #144]	@ (8000e30 <SystemCoreClockUpdate+0x150>)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da6:	613b      	str	r3, [r7, #16]
          break;
 8000da8:	e00b      	b.n	8000dc2 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000daa:	4a22      	ldr	r2, [pc, #136]	@ (8000e34 <SystemCoreClockUpdate+0x154>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	613b      	str	r3, [r7, #16]
          break;
 8000db4:	e005      	b.n	8000dc2 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000db6:	697a      	ldr	r2, [r7, #20]
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbe:	613b      	str	r3, [r7, #16]
          break;
 8000dc0:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000dc2:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <SystemCoreClockUpdate+0x144>)
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	0a1b      	lsrs	r3, r3, #8
 8000dc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	fb02 f303 	mul.w	r3, r2, r3
 8000dd2:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000dd4:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <SystemCoreClockUpdate+0x144>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	0e5b      	lsrs	r3, r3, #25
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	3301      	adds	r3, #1
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dec:	4a0f      	ldr	r2, [pc, #60]	@ (8000e2c <SystemCoreClockUpdate+0x14c>)
 8000dee:	6013      	str	r3, [r2, #0]
      break;
 8000df0:	e003      	b.n	8000dfa <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000df2:	4a0e      	ldr	r2, [pc, #56]	@ (8000e2c <SystemCoreClockUpdate+0x14c>)
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	6013      	str	r3, [r2, #0]
      break;
 8000df8:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <SystemCoreClockUpdate+0x144>)
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	091b      	lsrs	r3, r3, #4
 8000e00:	f003 030f 	and.w	r3, r3, #15
 8000e04:	4a0c      	ldr	r2, [pc, #48]	@ (8000e38 <SystemCoreClockUpdate+0x158>)
 8000e06:	5cd3      	ldrb	r3, [r2, r3]
 8000e08:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <SystemCoreClockUpdate+0x14c>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	fa22 f303 	lsr.w	r3, r2, r3
 8000e14:	4a05      	ldr	r2, [pc, #20]	@ (8000e2c <SystemCoreClockUpdate+0x14c>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	371c      	adds	r7, #28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	40021000 	.word	0x40021000
 8000e28:	080056f8 	.word	0x080056f8
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	00f42400 	.word	0x00f42400
 8000e34:	007a1200 	.word	0x007a1200
 8000e38:	080056e0 	.word	0x080056e0

08000e3c <_ZN4IGPSC1Ev>:
//#endif


class IGPS {
protected:
	IGPS() = default;
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	4a04      	ldr	r2, [pc, #16]	@ (8000e58 <_ZN4IGPSC1Ev+0x1c>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	08005754 	.word	0x08005754

08000e5c <_ZN4IGPSD1Ev>:

public:
	virtual ~IGPS() = default;
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	4a04      	ldr	r2, [pc, #16]	@ (8000e78 <_ZN4IGPSD1Ev+0x1c>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	08005754 	.word	0x08005754

08000e7c <_ZN4IGPSD0Ev>:
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ffe9 	bl	8000e5c <_ZN4IGPSD1Ev>
 8000e8a:	2104      	movs	r1, #4
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f004 fa67 	bl	8005360 <_ZdlPvj>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <_ZN3GPSC1EP20__UART_HandleTypeDef>:
#include "stm32l5xx_hal.h"

#include "zp_d_gps.hpp"

GPS::GPS(UART_HandleTypeDef* huart) : huart(huart) {}
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ffc7 	bl	8000e3c <_ZN4IGPSC1Ev>
 8000eae:	4a06      	ldr	r2, [pc, #24]	@ (8000ec8 <_ZN3GPSC1EP20__UART_HandleTypeDef+0x2c>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	08005740 	.word	0x08005740

08000ecc <_ZN3GPS4initEv>:

bool GPS::init() {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef success = HAL_UARTEx_ReceiveToIdle_DMA(
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
			huart,
			rxBuffer,
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3344      	adds	r3, #68	@ 0x44
	HAL_StatusTypeDef success = HAL_UARTEx_ReceiveToIdle_DMA(
 8000ede:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f004 f999 	bl	800521a <HAL_UARTEx_ReceiveToIdle_DMA>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	73fb      	strb	r3, [r7, #15]
			MAX_NMEA_DATA_LENGTH
	);

	__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f042 0210 	orr.w	r2, r2, #16
 8000f02:	601a      	str	r2, [r3, #0]

	return success == HAL_OK;
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	bf0c      	ite	eq
 8000f0a:	2301      	moveq	r3, #1
 8000f0c:	2300      	movne	r3, #0
 8000f0e:	b2db      	uxtb	r3, r3
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <_ZN3GPS8readDataEv>:

GpsData_t GPS::readData() {
 8000f18:	b4b0      	push	{r4, r5, r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
	__HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_TC);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8000f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8000f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f022 0202 	bic.w	r2, r2, #2
 8000f40:	601a      	str	r2, [r3, #0]

	GpsData_t data = validData;
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	4615      	mov	r5, r2
 8000f48:	1d1c      	adds	r4, r3, #4
 8000f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f4e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f52:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	validData.isNew = false;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2020 	strb.w	r2, [r3, #32]


	__HAL_DMA_ENABLE_IT(huart->hdmarx, DMA_IT_TC);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8000f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8000f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f042 0202 	orr.w	r2, r2, #2
 8000f7c:	601a      	str	r2, [r3, #0]

	return data;
 8000f7e:	bf00      	nop
}
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bcb0      	pop	{r4, r5, r7}
 8000f88:	4770      	bx	lr

08000f8a <_ZN3GPS14processGPSDataEv>:

bool GPS::processGPSData() {
 8000f8a:	b5b0      	push	{r4, r5, r7, lr}
 8000f8c:	b084      	sub	sp, #16
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
	__HAL_DMA_DISABLE(huart->hdmarx);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8000f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8000fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 0201 	bic.w	r2, r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]
	bool success = parseRMC() && parseGGA();
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 f831 	bl	800101a <_ZN3GPS8parseRMCEv>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d007      	beq.n	8000fce <_ZN3GPS14processGPSDataEv+0x44>
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 f904 	bl	80011cc <_ZN3GPS8parseGGAEv>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <_ZN3GPS14processGPSDataEv+0x44>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <_ZN3GPS14processGPSDataEv+0x46>
 8000fce:	2300      	movs	r3, #0
 8000fd0:	73fb      	strb	r3, [r7, #15]
	tempData.isNew = success;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	7bfa      	ldrb	r2, [r7, #15]
 8000fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	validData = tempData;
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	1d14      	adds	r4, r2, #4
 8000fe0:	f103 0524 	add.w	r5, r3, #36	@ 0x24
 8000fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	__HAL_DMA_ENABLE(huart->hdmarx);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8000ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8001004:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0201 	orr.w	r2, r2, #1
 800100e:	601a      	str	r2, [r3, #0]

	return success;
 8001010:	7bfb      	ldrb	r3, [r7, #15]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bdb0      	pop	{r4, r5, r7, pc}

0800101a <_ZN3GPS8parseRMCEv>:

bool GPS::parseRMC() {
 800101a:	b580      	push	{r7, lr}
 800101c:	b084      	sub	sp, #16
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
	int idx = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
	while (!(rxBuffer[idx] == 'R' && rxBuffer[idx+1] == 'M' && rxBuffer[idx+2] == 'C')) {
 8001026:	e008      	b.n	800103a <_ZN3GPS8parseRMCEv+0x20>
		idx++;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	3301      	adds	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
		if (idx == MAX_NMEA_DATA_LENGTH) return 0;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f5b3 7f24 	cmp.w	r3, #656	@ 0x290
 8001034:	d101      	bne.n	800103a <_ZN3GPS8parseRMCEv+0x20>
 8001036:	2300      	movs	r3, #0
 8001038:	e0c4      	b.n	80011c4 <_ZN3GPS8parseRMCEv+0x1aa>
	while (!(rxBuffer[idx] == 'R' && rxBuffer[idx+1] == 'M' && rxBuffer[idx+2] == 'C')) {
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	4413      	add	r3, r2
 8001040:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001044:	2b52      	cmp	r3, #82	@ 0x52
 8001046:	d1ef      	bne.n	8001028 <_ZN3GPS8parseRMCEv+0xe>
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	3301      	adds	r3, #1
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	4413      	add	r3, r2
 8001050:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001054:	2b4d      	cmp	r3, #77	@ 0x4d
 8001056:	d1e7      	bne.n	8001028 <_ZN3GPS8parseRMCEv+0xe>
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3302      	adds	r3, #2
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	4413      	add	r3, r2
 8001060:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001064:	2b43      	cmp	r3, #67	@ 0x43
 8001066:	d1df      	bne.n	8001028 <_ZN3GPS8parseRMCEv+0xe>
	}

	idx += 4;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	3304      	adds	r3, #4
 800106c:	60fb      	str	r3, [r7, #12]

	// Check if data exists
	if (rxBuffer[idx] == ',') {
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	4413      	add	r3, r2
 8001074:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001078:	2b2c      	cmp	r3, #44	@ 0x2c
 800107a:	d101      	bne.n	8001080 <_ZN3GPS8parseRMCEv+0x66>
		return 0;
 800107c:	2300      	movs	r3, #0
 800107e:	e0a1      	b.n	80011c4 <_ZN3GPS8parseRMCEv+0x1aa>
	}

	if (getTimeRMC(idx) == false) {
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	4619      	mov	r1, r3
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 f8fe 	bl	8001288 <_ZN3GPS10getTimeRMCERi>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	bf0c      	ite	eq
 8001092:	2301      	moveq	r3, #1
 8001094:	2300      	movne	r3, #0
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	d004      	beq.n	80010a6 <_ZN3GPS8parseRMCEv+0x8c>
		return 0;
 800109c:	2300      	movs	r3, #0
 800109e:	e091      	b.n	80011c4 <_ZN3GPS8parseRMCEv+0x1aa>
	}

	// Skip to status
	while (rxBuffer[idx] != ',') idx++;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	3301      	adds	r3, #1
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	4413      	add	r3, r2
 80010ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80010b0:	2b2c      	cmp	r3, #44	@ 0x2c
 80010b2:	d1f5      	bne.n	80010a0 <_ZN3GPS8parseRMCEv+0x86>

	// Begin status
	idx++;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	3301      	adds	r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]

	// Check if data valid
	if (rxBuffer[idx] == 'V') return 0;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	4413      	add	r3, r2
 80010c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80010c4:	2b56      	cmp	r3, #86	@ 0x56
 80010c6:	d101      	bne.n	80010cc <_ZN3GPS8parseRMCEv+0xb2>
 80010c8:	2300      	movs	r3, #0
 80010ca:	e07b      	b.n	80011c4 <_ZN3GPS8parseRMCEv+0x1aa>
	// End status

	idx += 2;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	3302      	adds	r3, #2
 80010d0:	60fb      	str	r3, [r7, #12]

	if (getLatitudeRMC(idx) == false) {
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	4619      	mov	r1, r3
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 f93f 	bl	800135c <_ZN3GPS14getLatitudeRMCERi>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	bf0c      	ite	eq
 80010e4:	2301      	moveq	r3, #1
 80010e6:	2300      	movne	r3, #0
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <_ZN3GPS8parseRMCEv+0xd8>
		return 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e068      	b.n	80011c4 <_ZN3GPS8parseRMCEv+0x1aa>
	}

	idx += 2;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3302      	adds	r3, #2
 80010f6:	60fb      	str	r3, [r7, #12]

	if (getLongitudeRMC(idx) == false) {
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4619      	mov	r1, r3
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f9fe 	bl	8001500 <_ZN3GPS15getLongitudeRMCERi>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	bf0c      	ite	eq
 800110a:	2301      	moveq	r3, #1
 800110c:	2300      	movne	r3, #0
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <_ZN3GPS8parseRMCEv+0xfe>
		return 0;
 8001114:	2300      	movs	r3, #0
 8001116:	e055      	b.n	80011c4 <_ZN3GPS8parseRMCEv+0x1aa>
	}

	idx += 2;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	3302      	adds	r3, #2
 800111c:	60fb      	str	r3, [r7, #12]

	if (getSpeedRMC(idx) == false) {
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	4619      	mov	r1, r3
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 fabd 	bl	80016a4 <_ZN3GPS11getSpeedRMCERi>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	bf0c      	ite	eq
 8001130:	2301      	moveq	r3, #1
 8001132:	2300      	movne	r3, #0
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d004      	beq.n	8001144 <_ZN3GPS8parseRMCEv+0x12a>
		return 0;
 800113a:	2300      	movs	r3, #0
 800113c:	e042      	b.n	80011c4 <_ZN3GPS8parseRMCEv+0x1aa>
	}

	while (rxBuffer[idx] != ',') idx++;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	3301      	adds	r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800114e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001150:	d1f5      	bne.n	800113e <_ZN3GPS8parseRMCEv+0x124>
	idx++;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	3301      	adds	r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
	if (getTrackAngleRMC(idx) == false) {
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	4619      	mov	r1, r3
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 fb12 	bl	8001788 <_ZN3GPS16getTrackAngleRMCERi>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	bf0c      	ite	eq
 800116a:	2301      	moveq	r3, #1
 800116c:	2300      	movne	r3, #0
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d004      	beq.n	800117e <_ZN3GPS8parseRMCEv+0x164>
		return 0;
 8001174:	2300      	movs	r3, #0
 8001176:	e025      	b.n	80011c4 <_ZN3GPS8parseRMCEv+0x1aa>
	}

	while (rxBuffer[idx] != ',') idx++;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3301      	adds	r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	4413      	add	r3, r2
 8001184:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001188:	2b2c      	cmp	r3, #44	@ 0x2c
 800118a:	d1f5      	bne.n	8001178 <_ZN3GPS8parseRMCEv+0x15e>
	while (rxBuffer[idx] == ',') idx++;
 800118c:	e002      	b.n	8001194 <_ZN3GPS8parseRMCEv+0x17a>
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	3301      	adds	r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800119e:	2b2c      	cmp	r3, #44	@ 0x2c
 80011a0:	d0f5      	beq.n	800118e <_ZN3GPS8parseRMCEv+0x174>
	if (getDateRMC(idx) == false) {
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	4619      	mov	r1, r3
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 fb6d 	bl	8001888 <_ZN3GPS10getDateRMCERi>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	bf0c      	ite	eq
 80011b4:	2301      	moveq	r3, #1
 80011b6:	2300      	movne	r3, #0
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <_ZN3GPS8parseRMCEv+0x1a8>
		return 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	e000      	b.n	80011c4 <_ZN3GPS8parseRMCEv+0x1aa>
	}

	return true;
 80011c2:	2301      	movs	r3, #1
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_ZN3GPS8parseGGAEv>:

bool GPS::parseGGA() {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	int idx = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
	while (!(rxBuffer[idx] == 'G' && rxBuffer[idx + 1] == 'G' && rxBuffer[idx + 2] == 'A')) {
 80011d8:	e008      	b.n	80011ec <_ZN3GPS8parseGGAEv+0x20>
		idx++;
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	3301      	adds	r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
		if (idx == MAX_NMEA_DATA_LENGTH) return 0;
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	f5b3 7f24 	cmp.w	r3, #656	@ 0x290
 80011e6:	d101      	bne.n	80011ec <_ZN3GPS8parseGGAEv+0x20>
 80011e8:	2300      	movs	r3, #0
 80011ea:	e049      	b.n	8001280 <_ZN3GPS8parseGGAEv+0xb4>
	while (!(rxBuffer[idx] == 'G' && rxBuffer[idx + 1] == 'G' && rxBuffer[idx + 2] == 'A')) {
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80011f6:	2b47      	cmp	r3, #71	@ 0x47
 80011f8:	d1ef      	bne.n	80011da <_ZN3GPS8parseGGAEv+0xe>
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	3301      	adds	r3, #1
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001206:	2b47      	cmp	r3, #71	@ 0x47
 8001208:	d1e7      	bne.n	80011da <_ZN3GPS8parseGGAEv+0xe>
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	3302      	adds	r3, #2
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001216:	2b41      	cmp	r3, #65	@ 0x41
 8001218:	d1df      	bne.n	80011da <_ZN3GPS8parseGGAEv+0xe>
	}
	idx+=4; // Skip to data
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	3304      	adds	r3, #4
 800121e:	60bb      	str	r3, [r7, #8]

	// Check if data exists
	if (rxBuffer[idx] == ',') {
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800122a:	2b2c      	cmp	r3, #44	@ 0x2c
 800122c:	d101      	bne.n	8001232 <_ZN3GPS8parseGGAEv+0x66>
		return 0;
 800122e:	2300      	movs	r3, #0
 8001230:	e026      	b.n	8001280 <_ZN3GPS8parseGGAEv+0xb4>
	}

	// Skip 7 sections of data
	for (int i = 0; i < 6; i++, idx++) {
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	e00f      	b.n	8001258 <_ZN3GPS8parseGGAEv+0x8c>
		while (rxBuffer[idx] != ',') idx++;
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	3301      	adds	r3, #1
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	4413      	add	r3, r2
 8001244:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001248:	2b2c      	cmp	r3, #44	@ 0x2c
 800124a:	d1f5      	bne.n	8001238 <_ZN3GPS8parseGGAEv+0x6c>
	for (int i = 0; i < 6; i++, idx++) {
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	3301      	adds	r3, #1
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	3301      	adds	r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2b05      	cmp	r3, #5
 800125c:	ddef      	ble.n	800123e <_ZN3GPS8parseGGAEv+0x72>
	}

	if (getNumSatellitesGGA(idx) == false) {
 800125e:	f107 0308 	add.w	r3, r7, #8
 8001262:	4619      	mov	r1, r3
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 fb79 	bl	800195c <_ZN3GPS19getNumSatellitesGGAERi>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	bf0c      	ite	eq
 8001270:	2301      	moveq	r3, #1
 8001272:	2300      	movne	r3, #0
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <_ZN3GPS8parseGGAEv+0xb2>
		return 0;
 800127a:	2300      	movs	r3, #0
 800127c:	e000      	b.n	8001280 <_ZN3GPS8parseGGAEv+0xb4>
	}

	return 1;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <_ZN3GPS10getTimeRMCERi>:

bool GPS::getTimeRMC(int &idx) {
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
	uint8_t hour = (rxBuffer[idx]-'0')*10 + (rxBuffer[idx+1]-'0');
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800129e:	461a      	mov	r2, r3
 80012a0:	0092      	lsls	r2, r2, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3301      	adds	r3, #1
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	440b      	add	r3, r1
 80012b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80012b6:	4413      	add	r3, r2
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	3320      	adds	r3, #32
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	3b30      	subs	r3, #48	@ 0x30
 80012c0:	73fb      	strb	r3, [r7, #15]
	idx += 2;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	1c9a      	adds	r2, r3, #2
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	601a      	str	r2, [r3, #0]
	uint8_t minute = (rxBuffer[idx]-'0')*10 + (rxBuffer[idx+1]-'0');
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	4413      	add	r3, r2
 80012d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80012d8:	461a      	mov	r2, r3
 80012da:	0092      	lsls	r2, r2, #2
 80012dc:	4413      	add	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	3301      	adds	r3, #1
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	440b      	add	r3, r1
 80012ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80012f0:	4413      	add	r3, r2
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	3320      	adds	r3, #32
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	3b30      	subs	r3, #48	@ 0x30
 80012fa:	73bb      	strb	r3, [r7, #14]
	idx += 2;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	1c9a      	adds	r2, r3, #2
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	601a      	str	r2, [r3, #0]
	uint8_t second = (rxBuffer[idx]-'0')*10 + (rxBuffer[idx+1]-'0');
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001312:	461a      	mov	r2, r3
 8001314:	0092      	lsls	r2, r2, #2
 8001316:	4413      	add	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	b2da      	uxtb	r2, r3
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	440b      	add	r3, r1
 8001326:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800132a:	4413      	add	r3, r2
 800132c:	b2db      	uxtb	r3, r3
 800132e:	3320      	adds	r3, #32
 8001330:	b2db      	uxtb	r3, r3
 8001332:	3b30      	subs	r3, #48	@ 0x30
 8001334:	737b      	strb	r3, [r7, #13]

	tempData.time.hour = hour;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	tempData.time.minute = minute;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	7bba      	ldrb	r2, [r7, #14]
 8001342:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	tempData.time.second= second;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	7b7a      	ldrb	r2, [r7, #13]
 800134a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

	return true;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <_ZN3GPS14getLatitudeRMCERi>:

bool GPS::getLatitudeRMC(int &idx) {
 800135c:	b480      	push	{r7}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
	float lat = 0;
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 2; i++, idx++) {
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	e020      	b.n	80013b4 <_ZN3GPS14getLatitudeRMCERi+0x58>
		lat *= 10;
 8001372:	edd7 7a05 	vldr	s15, [r7, #20]
 8001376:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800137a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137e:	edc7 7a05 	vstr	s15, [r7, #20]
		lat += ((float)(rxBuffer[idx] - '0'));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800138e:	3b30      	subs	r3, #48	@ 0x30
 8001390:	ee07 3a90 	vmov	s15, r3
 8001394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001398:	ed97 7a05 	vldr	s14, [r7, #20]
 800139c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a0:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 0; i < 2; i++, idx++) {
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	3301      	adds	r3, #1
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	dddb      	ble.n	8001372 <_ZN3GPS14getLatitudeRMCERi+0x16>
	}

	float lat_minutes = 0;
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
	while (rxBuffer[idx] != '.') {
 80013c0:	e01d      	b.n	80013fe <_ZN3GPS14getLatitudeRMCERi+0xa2>
		lat_minutes *= 10;
 80013c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013c6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ce:	edc7 7a03 	vstr	s15, [r7, #12]
		lat_minutes += ((float)(rxBuffer[idx] - '0'));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80013de:	3b30      	subs	r3, #48	@ 0x30
 80013e0:	ee07 3a90 	vmov	s15, r3
 80013e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80013ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f0:	edc7 7a03 	vstr	s15, [r7, #12]
		idx++;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	601a      	str	r2, [r3, #0]
	while (rxBuffer[idx] != '.') {
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800140a:	2b2e      	cmp	r3, #46	@ 0x2e
 800140c:	d1d9      	bne.n	80013c2 <_ZN3GPS14getLatitudeRMCERi+0x66>
	}
	idx++; // Skip decimal char
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	601a      	str	r2, [r3, #0]

	// Including two digits of minutes
	uint32_t mult = 10;
 8001418:	230a      	movs	r3, #10
 800141a:	60bb      	str	r3, [r7, #8]
	while (rxBuffer[idx] != ',' && mult <= DECIMAL_PRECISION) {
 800141c:	e022      	b.n	8001464 <_ZN3GPS14getLatitudeRMCERi+0x108>
		lat_minutes += ((float)(rxBuffer[idx] - '0'))/mult;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800142a:	3b30      	subs	r3, #48	@ 0x30
 800142c:	ee07 3a90 	vmov	s15, r3
 8001430:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	ee07 3a90 	vmov	s15, r3
 800143a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800143e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001442:	ed97 7a03 	vldr	s14, [r7, #12]
 8001446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144a:	edc7 7a03 	vstr	s15, [r7, #12]
		idx++;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	601a      	str	r2, [r3, #0]
		mult *= 10;
 8001458:	68ba      	ldr	r2, [r7, #8]
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
	while (rxBuffer[idx] != ',' && mult <= DECIMAL_PRECISION) {
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	4413      	add	r3, r2
 800146c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001470:	2b2c      	cmp	r3, #44	@ 0x2c
 8001472:	d003      	beq.n	800147c <_ZN3GPS14getLatitudeRMCERi+0x120>
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	4a20      	ldr	r2, [pc, #128]	@ (80014f8 <_ZN3GPS14getLatitudeRMCERi+0x19c>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d9d0      	bls.n	800141e <_ZN3GPS14getLatitudeRMCERi+0xc2>
	}

	lat += lat_minutes/60;
 800147c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001480:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80014fc <_ZN3GPS14getLatitudeRMCERi+0x1a0>
 8001484:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001488:	ed97 7a05 	vldr	s14, [r7, #20]
 800148c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001490:	edc7 7a05 	vstr	s15, [r7, #20]

	tempData.latitude = lat;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Skip to NS char indicator
	while (rxBuffer[idx] != ',') idx++;
 800149a:	e004      	b.n	80014a6 <_ZN3GPS14getLatitudeRMCERi+0x14a>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	1c5a      	adds	r2, r3, #1
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80014b2:	2b2c      	cmp	r3, #44	@ 0x2c
 80014b4:	d1f2      	bne.n	800149c <_ZN3GPS14getLatitudeRMCERi+0x140>
	idx++; // Skip over comma
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	601a      	str	r2, [r3, #0]
	tempData.latitude *= (rxBuffer[idx] == 'N') ? 1 : -1;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80014d2:	2b4e      	cmp	r3, #78	@ 0x4e
 80014d4:	d102      	bne.n	80014dc <_ZN3GPS14getLatitudeRMCERi+0x180>
 80014d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80014da:	e001      	b.n	80014e0 <_ZN3GPS14getLatitudeRMCERi+0x184>
 80014dc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80014e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	return true;
 80014ea:	2301      	movs	r3, #1
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	371c      	adds	r7, #28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	000f4240 	.word	0x000f4240
 80014fc:	42700000 	.word	0x42700000

08001500 <_ZN3GPS15getLongitudeRMCERi>:

bool GPS::getLongitudeRMC(int &idx) {
 8001500:	b480      	push	{r7}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
	float lon = 0;
 800150a:	f04f 0300 	mov.w	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 3; i++, idx++) {
 8001510:	2300      	movs	r3, #0
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	e020      	b.n	8001558 <_ZN3GPS15getLongitudeRMCERi+0x58>
		lon *= 10;
 8001516:	edd7 7a05 	vldr	s15, [r7, #20]
 800151a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800151e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001522:	edc7 7a05 	vstr	s15, [r7, #20]
		lon += ((float)(rxBuffer[idx]-'0'));
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001532:	3b30      	subs	r3, #48	@ 0x30
 8001534:	ee07 3a90 	vmov	s15, r3
 8001538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800153c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001544:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 0; i < 3; i++, idx++) {
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	3301      	adds	r3, #1
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	1c5a      	adds	r2, r3, #1
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	2b02      	cmp	r3, #2
 800155c:	dddb      	ble.n	8001516 <_ZN3GPS15getLongitudeRMCERi+0x16>
	}

	float lon_minutes = 0;
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
	while (rxBuffer[idx] != '.') {
 8001564:	e01d      	b.n	80015a2 <_ZN3GPS15getLongitudeRMCERi+0xa2>
		lon_minutes *= 10;
 8001566:	edd7 7a03 	vldr	s15, [r7, #12]
 800156a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800156e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001572:	edc7 7a03 	vstr	s15, [r7, #12]
		lon_minutes += ((float)(rxBuffer[idx]-'0'));
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001582:	3b30      	subs	r3, #48	@ 0x30
 8001584:	ee07 3a90 	vmov	s15, r3
 8001588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800158c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001594:	edc7 7a03 	vstr	s15, [r7, #12]
		idx++;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	601a      	str	r2, [r3, #0]
	while (rxBuffer[idx] != '.') {
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80015ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80015b0:	d1d9      	bne.n	8001566 <_ZN3GPS15getLongitudeRMCERi+0x66>
	}

	idx++; // Skip decimal char
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	601a      	str	r2, [r3, #0]

	// Including two digits of minutes
	uint32_t mult = 10;
 80015bc:	230a      	movs	r3, #10
 80015be:	60bb      	str	r3, [r7, #8]
	while (rxBuffer[idx] != ',' && mult <= DECIMAL_PRECISION) {
 80015c0:	e022      	b.n	8001608 <_ZN3GPS15getLongitudeRMCERi+0x108>
		lon_minutes += ((float)(rxBuffer[idx]-'0'))/mult;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80015ce:	3b30      	subs	r3, #48	@ 0x30
 80015d0:	ee07 3a90 	vmov	s15, r3
 80015d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	ee07 3a90 	vmov	s15, r3
 80015de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80015ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ee:	edc7 7a03 	vstr	s15, [r7, #12]
		idx++;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	601a      	str	r2, [r3, #0]
		mult *= 10;
 80015fc:	68ba      	ldr	r2, [r7, #8]
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
	while (rxBuffer[idx] != ',' && mult <= DECIMAL_PRECISION) {
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	4413      	add	r3, r2
 8001610:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001614:	2b2c      	cmp	r3, #44	@ 0x2c
 8001616:	d003      	beq.n	8001620 <_ZN3GPS15getLongitudeRMCERi+0x120>
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	4a20      	ldr	r2, [pc, #128]	@ (800169c <_ZN3GPS15getLongitudeRMCERi+0x19c>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d9d0      	bls.n	80015c2 <_ZN3GPS15getLongitudeRMCERi+0xc2>
	}

	lon += lon_minutes / 60;
 8001620:	ed97 7a03 	vldr	s14, [r7, #12]
 8001624:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80016a0 <_ZN3GPS15getLongitudeRMCERi+0x1a0>
 8001628:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800162c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001634:	edc7 7a05 	vstr	s15, [r7, #20]

	tempData.longitude = lon;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	631a      	str	r2, [r3, #48]	@ 0x30
	while (rxBuffer[idx] != ',') idx++;
 800163e:	e004      	b.n	800164a <_ZN3GPS15getLongitudeRMCERi+0x14a>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001656:	2b2c      	cmp	r3, #44	@ 0x2c
 8001658:	d1f2      	bne.n	8001640 <_ZN3GPS15getLongitudeRMCERi+0x140>
	idx++;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	601a      	str	r2, [r3, #0]
	tempData.longitude *= (rxBuffer[idx] == 'E') ? 1 : -1;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001676:	2b45      	cmp	r3, #69	@ 0x45
 8001678:	d102      	bne.n	8001680 <_ZN3GPS15getLongitudeRMCERi+0x180>
 800167a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800167e:	e001      	b.n	8001684 <_ZN3GPS15getLongitudeRMCERi+0x184>
 8001680:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	return true;
 800168e:	2301      	movs	r3, #1
}
 8001690:	4618      	mov	r0, r3
 8001692:	371c      	adds	r7, #28
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	000f4240 	.word	0x000f4240
 80016a0:	42700000 	.word	0x42700000

080016a4 <_ZN3GPS11getSpeedRMCERi>:

bool GPS::getSpeedRMC(int &idx) {
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
	float spd = 0;
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
	while (rxBuffer[idx] != '.') {
 80016b4:	e01d      	b.n	80016f2 <_ZN3GPS11getSpeedRMCERi+0x4e>
		spd *= 10;
 80016b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016ba:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80016be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c2:	edc7 7a03 	vstr	s15, [r7, #12]
		spd += rxBuffer[idx]-'0';
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80016d2:	3b30      	subs	r3, #48	@ 0x30
 80016d4:	ee07 3a90 	vmov	s15, r3
 80016d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80016e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e4:	edc7 7a03 	vstr	s15, [r7, #12]
		idx++;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	601a      	str	r2, [r3, #0]
	while (rxBuffer[idx] != '.') {
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80016fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8001700:	d1d9      	bne.n	80016b6 <_ZN3GPS11getSpeedRMCERi+0x12>
	}
	idx++; // Decimal char
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	1c5a      	adds	r2, r3, #1
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	601a      	str	r2, [r3, #0]
	int mult = 10;
 800170c:	230a      	movs	r3, #10
 800170e:	60bb      	str	r3, [r7, #8]
	while (rxBuffer[idx] != ',' && mult <= DECIMAL_PRECISION) {
 8001710:	e022      	b.n	8001758 <_ZN3GPS11getSpeedRMCERi+0xb4>
		spd += ((float)(rxBuffer[idx]-'0'))/mult;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800171e:	3b30      	subs	r3, #48	@ 0x30
 8001720:	ee07 3a90 	vmov	s15, r3
 8001724:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	ee07 3a90 	vmov	s15, r3
 800172e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001736:	ed97 7a03 	vldr	s14, [r7, #12]
 800173a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800173e:	edc7 7a03 	vstr	s15, [r7, #12]
		idx++;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	601a      	str	r2, [r3, #0]
		mult *= 10;
 800174c:	68ba      	ldr	r2, [r7, #8]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
	while (rxBuffer[idx] != ',' && mult <= DECIMAL_PRECISION) {
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	4413      	add	r3, r2
 8001760:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001764:	2b2c      	cmp	r3, #44	@ 0x2c
 8001766:	d003      	beq.n	8001770 <_ZN3GPS11getSpeedRMCERi+0xcc>
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4a06      	ldr	r2, [pc, #24]	@ (8001784 <_ZN3GPS11getSpeedRMCERi+0xe0>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d9d0      	bls.n	8001712 <_ZN3GPS11getSpeedRMCERi+0x6e>
	}

	tempData.groundSpeed = spd;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	635a      	str	r2, [r3, #52]	@ 0x34

	return true;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	000f4240 	.word	0x000f4240

08001788 <_ZN3GPS16getTrackAngleRMCERi>:

bool GPS::getTrackAngleRMC(int &idx) {
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
	float cog = 0;
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
	// Check if cog was calculated
	if (rxBuffer[idx] != ',') {
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	4413      	add	r3, r2
 80017a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80017a4:	2b2c      	cmp	r3, #44	@ 0x2c
 80017a6:	d05e      	beq.n	8001866 <_ZN3GPS16getTrackAngleRMCERi+0xde>
		while (rxBuffer[idx] != '.') {
 80017a8:	e01d      	b.n	80017e6 <_ZN3GPS16getTrackAngleRMCERi+0x5e>
			cog *= 10;
 80017aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ae:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80017b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017b6:	edc7 7a03 	vstr	s15, [r7, #12]
			cog += rxBuffer[idx]-'0';
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80017c6:	3b30      	subs	r3, #48	@ 0x30
 80017c8:	ee07 3a90 	vmov	s15, r3
 80017cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80017d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d8:	edc7 7a03 	vstr	s15, [r7, #12]
			idx++;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	601a      	str	r2, [r3, #0]
		while (rxBuffer[idx] != '.') {
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80017f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80017f4:	d1d9      	bne.n	80017aa <_ZN3GPS16getTrackAngleRMCERi+0x22>
		}
		idx++; // Decimal char
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	601a      	str	r2, [r3, #0]
		int mult = 10;
 8001800:	230a      	movs	r3, #10
 8001802:	60bb      	str	r3, [r7, #8]
		while (rxBuffer[idx] != ',' && mult <= DECIMAL_PRECISION) {
 8001804:	e022      	b.n	800184c <_ZN3GPS16getTrackAngleRMCERi+0xc4>
			cog += ((float)(rxBuffer[idx]-'0'))/mult;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001812:	3b30      	subs	r3, #48	@ 0x30
 8001814:	ee07 3a90 	vmov	s15, r3
 8001818:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800182a:	ed97 7a03 	vldr	s14, [r7, #12]
 800182e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001832:	edc7 7a03 	vstr	s15, [r7, #12]
			idx++;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	601a      	str	r2, [r3, #0]
			mult *= 10;
 8001840:	68ba      	ldr	r2, [r7, #8]
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	60bb      	str	r3, [r7, #8]
		while (rxBuffer[idx] != ',' && mult <= DECIMAL_PRECISION) {
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	4413      	add	r3, r2
 8001854:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001858:	2b2c      	cmp	r3, #44	@ 0x2c
 800185a:	d006      	beq.n	800186a <_ZN3GPS16getTrackAngleRMCERi+0xe2>
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	4a08      	ldr	r2, [pc, #32]	@ (8001880 <_ZN3GPS16getTrackAngleRMCERi+0xf8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d9d0      	bls.n	8001806 <_ZN3GPS16getTrackAngleRMCERi+0x7e>
 8001864:	e001      	b.n	800186a <_ZN3GPS16getTrackAngleRMCERi+0xe2>
		}
	}
	else {
		cog = INVALID_TRACK_ANGLE;
 8001866:	4b07      	ldr	r3, [pc, #28]	@ (8001884 <_ZN3GPS16getTrackAngleRMCERi+0xfc>)
 8001868:	60fb      	str	r3, [r7, #12]
	}

	tempData.trackAngle = cog;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	63da      	str	r2, [r3, #60]	@ 0x3c

	return true;
 8001870:	2301      	movs	r3, #1
}
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	000f4240 	.word	0x000f4240
 8001884:	bf800000 	.word	0xbf800000

08001888 <_ZN3GPS10getDateRMCERi>:

bool GPS::getDateRMC(int &idx) {
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
	int day = (rxBuffer[idx] - '0') * 10 + rxBuffer[idx + 1] - '0';
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800189e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4619      	mov	r1, r3
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	3301      	adds	r3, #1
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80018ba:	440b      	add	r3, r1
 80018bc:	3b30      	subs	r3, #48	@ 0x30
 80018be:	617b      	str	r3, [r7, #20]
	idx += 2;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	1c9a      	adds	r2, r3, #2
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	601a      	str	r2, [r3, #0]
	int month = (rxBuffer[idx] - '0') * 10 + rxBuffer[idx + 1] - '0';
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80018d6:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	4619      	mov	r1, r3
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	3301      	adds	r3, #1
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80018f2:	440b      	add	r3, r1
 80018f4:	3b30      	subs	r3, #48	@ 0x30
 80018f6:	613b      	str	r3, [r7, #16]
	idx += 2;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	1c9a      	adds	r2, r3, #2
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	601a      	str	r2, [r3, #0]
	int year = (rxBuffer[idx] - '0') * 10 + rxBuffer[idx + 1] - '0';
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800190e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	4619      	mov	r1, r3
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	3301      	adds	r3, #1
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800192a:	440b      	add	r3, r1
 800192c:	3b30      	subs	r3, #48	@ 0x30
 800192e:	60fb      	str	r3, [r7, #12]

	tempData.time.day = day;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	b2da      	uxtb	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	tempData.time.month= month;
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	tempData.time.year = year;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	return true;
 800194e:	2301      	movs	r3, #1
}
 8001950:	4618      	mov	r0, r3
 8001952:	371c      	adds	r7, #28
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_ZN3GPS19getNumSatellitesGGAERi>:

bool GPS::getNumSatellitesGGA(int &idx) {
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
	int numSats = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
	while (rxBuffer[idx] != ',') {
 800196a:	e014      	b.n	8001996 <_ZN3GPS19getNumSatellitesGGAERi+0x3a>
		numSats *= 10;
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
		numSats += rxBuffer[idx] - '0';
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	4413      	add	r3, r2
 8001980:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001984:	3b30      	subs	r3, #48	@ 0x30
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4413      	add	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]
		idx++;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	601a      	str	r2, [r3, #0]
	while (rxBuffer[idx] != ',') {
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80019a2:	2b2c      	cmp	r3, #44	@ 0x2c
 80019a4:	d1e2      	bne.n	800196c <_ZN3GPS19getNumSatellitesGGAERi+0x10>
	}

	tempData.numSatellites = numSats;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

	return true;
 80019b0:	2301      	movs	r3, #1
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <_ZN3GPSD1Ev>:
#include <stm32l5xx_hal_uart.h>
#include "gps_iface.hpp"
#include "gps_datatypes.hpp"
#include "gps_defines.hpp"

class GPS : public IGPS {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	4a05      	ldr	r2, [pc, #20]	@ (80019e0 <_ZN3GPSD1Ev+0x20>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fa43 	bl	8000e5c <_ZN4IGPSD1Ev>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	08005740 	.word	0x08005740

080019e4 <_ZN3GPSD0Ev>:
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff ffe7 	bl	80019c0 <_ZN3GPSD1Ev>
 80019f2:	f44f 7136 	mov.w	r1, #728	@ 0x2d8
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f003 fcb2 	bl	8005360 <_ZdlPvj>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001a08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a0c:	f7ff f956 	bl	8000cbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a12:	e003      	b.n	8001a1c <LoopCopyDataInit>

08001a14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a14:	4b0b      	ldr	r3, [pc, #44]	@ (8001a44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a1a:	3104      	adds	r1, #4

08001a1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a1c:	480a      	ldr	r0, [pc, #40]	@ (8001a48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a24:	d3f6      	bcc.n	8001a14 <CopyDataInit>
	ldr	r2, =_sbss
 8001a26:	4a0a      	ldr	r2, [pc, #40]	@ (8001a50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a28:	e002      	b.n	8001a30 <LoopFillZerobss>

08001a2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a2c:	f842 3b04 	str.w	r3, [r2], #4

08001a30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a30:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <LoopForever+0x16>)
	cmp	r2, r3
 8001a32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a34:	d3f9      	bcc.n	8001a2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a36:	f003 fdd7 	bl	80055e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a3a:	f7fe fdb9 	bl	80005b0 <main>

08001a3e <LoopForever>:

LoopForever:
    b LoopForever
 8001a3e:	e7fe      	b.n	8001a3e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001a40:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001a44:	0800579c 	.word	0x0800579c
	ldr	r0, =_sdata
 8001a48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a4c:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8001a50:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8001a54:	200002cc 	.word	0x200002cc

08001a58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a58:	e7fe      	b.n	8001a58 <ADC1_2_IRQHandler>

08001a5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001a64:	2004      	movs	r0, #4
 8001a66:	f000 f93f 	bl	8001ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001a6a:	f7ff f939 	bl	8000ce0 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f000 f80e 	bl	8001a90 <HAL_InitTick>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d002      	beq.n	8001a80 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	71fb      	strb	r3, [r7, #7]
 8001a7e:	e001      	b.n	8001a84 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a80:	f7fe ffd0 	bl	8000a24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a84:	79fb      	ldrb	r3, [r7, #7]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a9c:	4b17      	ldr	r3, [pc, #92]	@ (8001afc <HAL_InitTick+0x6c>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d023      	beq.n	8001aec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001aa4:	4b16      	ldr	r3, [pc, #88]	@ (8001b00 <HAL_InitTick+0x70>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b14      	ldr	r3, [pc, #80]	@ (8001afc <HAL_InitTick+0x6c>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4619      	mov	r1, r3
 8001aae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 f947 	bl	8001d4e <HAL_SYSTICK_Config>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10f      	bne.n	8001ae6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b07      	cmp	r3, #7
 8001aca:	d809      	bhi.n	8001ae0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001acc:	2200      	movs	r2, #0
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f000 f913 	bl	8001cfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8001b04 <HAL_InitTick+0x74>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e007      	b.n	8001af0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	73fb      	strb	r3, [r7, #15]
 8001ae4:	e004      	b.n	8001af0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	73fb      	strb	r3, [r7, #15]
 8001aea:	e001      	b.n	8001af0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000008 	.word	0x20000008
 8001b00:	20000000 	.word	0x20000000
 8001b04:	20000004 	.word	0x20000004

08001b08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <HAL_IncTick+0x20>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <HAL_IncTick+0x24>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	4a04      	ldr	r2, [pc, #16]	@ (8001b2c <HAL_IncTick+0x24>)
 8001b1a:	6013      	str	r3, [r2, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000008 	.word	0x20000008
 8001b2c:	2000017c 	.word	0x2000017c

08001b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return uwTick;
 8001b34:	4b03      	ldr	r3, [pc, #12]	@ (8001b44 <HAL_GetTick+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	2000017c 	.word	0x2000017c

08001b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b58:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b64:	4013      	ands	r3, r2
 8001b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7a:	4a04      	ldr	r2, [pc, #16]	@ (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	60d3      	str	r3, [r2, #12]
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b94:	4b04      	ldr	r3, [pc, #16]	@ (8001ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	0a1b      	lsrs	r3, r3, #8
 8001b9a:	f003 0307 	and.w	r3, r3, #7
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	db0b      	blt.n	8001bd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	f003 021f 	and.w	r2, r3, #31
 8001bc4:	4907      	ldr	r1, [pc, #28]	@ (8001be4 <__NVIC_EnableIRQ+0x38>)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	095b      	lsrs	r3, r3, #5
 8001bcc:	2001      	movs	r0, #1
 8001bce:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000e100 	.word	0xe000e100

08001be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	6039      	str	r1, [r7, #0]
 8001bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	db0a      	blt.n	8001c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	490c      	ldr	r1, [pc, #48]	@ (8001c34 <__NVIC_SetPriority+0x4c>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	0152      	lsls	r2, r2, #5
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c10:	e00a      	b.n	8001c28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4908      	ldr	r1, [pc, #32]	@ (8001c38 <__NVIC_SetPriority+0x50>)
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	3b04      	subs	r3, #4
 8001c20:	0152      	lsls	r2, r2, #5
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	440b      	add	r3, r1
 8001c26:	761a      	strb	r2, [r3, #24]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000e100 	.word	0xe000e100
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b089      	sub	sp, #36	@ 0x24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f1c3 0307 	rsb	r3, r3, #7
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	bf28      	it	cs
 8001c5a:	2303      	movcs	r3, #3
 8001c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3303      	adds	r3, #3
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d902      	bls.n	8001c6c <NVIC_EncodePriority+0x30>
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3b04      	subs	r3, #4
 8001c6a:	e000      	b.n	8001c6e <NVIC_EncodePriority+0x32>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	f04f 32ff 	mov.w	r2, #4294967295
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43da      	mvns	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	401a      	ands	r2, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c84:	f04f 31ff 	mov.w	r1, #4294967295
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8e:	43d9      	mvns	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	4313      	orrs	r3, r2
         );
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3724      	adds	r7, #36	@ 0x24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cb4:	d301      	bcc.n	8001cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e00f      	b.n	8001cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce4 <SysTick_Config+0x40>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cc2:	2107      	movs	r1, #7
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	f7ff ff8e 	bl	8001be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ccc:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <SysTick_Config+0x40>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cd2:	4b04      	ldr	r3, [pc, #16]	@ (8001ce4 <SysTick_Config+0x40>)
 8001cd4:	2207      	movs	r2, #7
 8001cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	e000e010 	.word	0xe000e010

08001ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ff29 	bl	8001b48 <__NVIC_SetPriorityGrouping>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b086      	sub	sp, #24
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
 8001d0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d0c:	f7ff ff40 	bl	8001b90 <__NVIC_GetPriorityGrouping>
 8001d10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	68b9      	ldr	r1, [r7, #8]
 8001d16:	6978      	ldr	r0, [r7, #20]
 8001d18:	f7ff ff90 	bl	8001c3c <NVIC_EncodePriority>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff5f 	bl	8001be8 <__NVIC_SetPriority>
}
 8001d2a:	bf00      	nop
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff33 	bl	8001bac <__NVIC_EnableIRQ>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff ffa4 	bl	8001ca4 <SysTick_Config>
 8001d5c:	4603      	mov	r3, r0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e08d      	b.n	8001e96 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4b47      	ldr	r3, [pc, #284]	@ (8001ea0 <HAL_DMA_Init+0x138>)
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d80f      	bhi.n	8001da6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4b45      	ldr	r3, [pc, #276]	@ (8001ea4 <HAL_DMA_Init+0x13c>)
 8001d8e:	4413      	add	r3, r2
 8001d90:	4a45      	ldr	r2, [pc, #276]	@ (8001ea8 <HAL_DMA_Init+0x140>)
 8001d92:	fba2 2303 	umull	r2, r3, r2, r3
 8001d96:	091b      	lsrs	r3, r3, #4
 8001d98:	009a      	lsls	r2, r3, #2
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hdma->DmaBaseAddress = DMA1;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a42      	ldr	r2, [pc, #264]	@ (8001eac <HAL_DMA_Init+0x144>)
 8001da2:	649a      	str	r2, [r3, #72]	@ 0x48
 8001da4:	e00e      	b.n	8001dc4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	4b40      	ldr	r3, [pc, #256]	@ (8001eb0 <HAL_DMA_Init+0x148>)
 8001dae:	4413      	add	r3, r2
 8001db0:	4a3d      	ldr	r2, [pc, #244]	@ (8001ea8 <HAL_DMA_Init+0x140>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	091b      	lsrs	r3, r3, #4
 8001db8:	009a      	lsls	r2, r3, #2
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hdma->DmaBaseAddress = DMA2;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a3c      	ldr	r2, [pc, #240]	@ (8001eb4 <HAL_DMA_Init+0x14c>)
 8001dc2:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f423 33ff 	bic.w	r3, r3, #130560	@ 0x1fe00
 8001dda:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 8001dde:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 fa38 	bl	800228c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e24:	d102      	bne.n	8001e2c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001e40:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d010      	beq.n	8001e6c <HAL_DMA_Init+0x104>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d80c      	bhi.n	8001e6c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 fa58 	bl	8002308 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	e008      	b.n	8001e7e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	65da      	str	r2, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40020407 	.word	0x40020407
 8001ea4:	bffdfff8 	.word	0xbffdfff8
 8001ea8:	cccccccd 	.word	0xcccccccd
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	bffdfbf8 	.word	0xbffdfbf8
 8001eb4:	40020400 	.word	0x40020400

08001eb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_DMA_Start_IT+0x20>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e066      	b.n	8001fa6 <HAL_DMA_Start_IT+0xee>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d155      	bne.n	8001f98 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0201 	bic.w	r2, r2, #1
 8001f08:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	68b9      	ldr	r1, [r7, #8]
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f000 f97c 	bl	800220e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d008      	beq.n	8001f30 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 020e 	orr.w	r2, r2, #14
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	e00f      	b.n	8001f50 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0204 	bic.w	r2, r2, #4
 8001f3e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 020a 	orr.w	r2, r2, #10
 8001f4e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d007      	beq.n	8001f6e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f6c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f84:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f042 0201 	orr.w	r2, r2, #1
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	e005      	b.n	8001fa4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b084      	sub	sp, #16
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fca:	f003 031c 	and.w	r3, r3, #28
 8001fce:	2204      	movs	r2, #4
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d053      	beq.n	8002082 <HAL_DMA_IRQHandler+0xd4>
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d04e      	beq.n	8002082 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d024      	beq.n	800203c <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff6:	f003 021c 	and.w	r2, r3, #28
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ffe:	2104      	movs	r1, #4
 8002000:	fa01 f202 	lsl.w	r2, r1, r2
 8002004:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d109      	bne.n	8002028 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80c0 	beq.w	800219e <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002026:	e0ba      	b.n	800219e <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 80b6 	beq.w	800219e <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800203a:	e0b0      	b.n	800219e <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	2b00      	cmp	r3, #0
 8002048:	d107      	bne.n	800205a <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0204 	bic.w	r2, r2, #4
 8002058:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205e:	f003 021c 	and.w	r2, r3, #28
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002066:	2104      	movs	r1, #4
 8002068:	fa01 f202 	lsl.w	r2, r1, r2
 800206c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 8093 	beq.w	800219e <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002080:	e08d      	b.n	800219e <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002086:	f003 031c 	and.w	r3, r3, #28
 800208a:	2202      	movs	r2, #2
 800208c:	409a      	lsls	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4013      	ands	r3, r2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d04e      	beq.n	8002134 <HAL_DMA_IRQHandler+0x186>
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d049      	beq.n	8002134 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d018      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d108      	bne.n	80020ce <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d06e      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80020cc:	e069      	b.n	80021a2 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d065      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80020de:	e060      	b.n	80021a2 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0320 	and.w	r3, r3, #32
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10b      	bne.n	8002106 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 020a 	bic.w	r2, r2, #10
 80020fc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210a:	f003 021c 	and.w	r2, r3, #28
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002112:	2102      	movs	r1, #2
 8002114:	fa01 f202 	lsl.w	r2, r1, r2
 8002118:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if(hdma->XferCpltCallback != NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002126:	2b00      	cmp	r3, #0
 8002128:	d03b      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002132:	e036      	b.n	80021a2 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002138:	f003 031c 	and.w	r3, r3, #28
 800213c:	2208      	movs	r2, #8
 800213e:	409a      	lsls	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4013      	ands	r3, r2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d02e      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x1f8>
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d029      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 020e 	bic.w	r2, r2, #14
 8002160:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002166:	f003 021c 	and.w	r2, r3, #28
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800216e:	2101      	movs	r1, #1
 8002170:	fa01 f202 	lsl.w	r2, r1, r2
 8002174:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800219c:	e002      	b.n	80021a4 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800219e:	bf00      	nop
 80021a0:	e000      	b.n	80021a4 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80021a2:	bf00      	nop
  return;
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
}
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b085      	sub	sp, #20
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d103      	bne.n	80021ca <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	72fb      	strb	r3, [r7, #11]
    return status;
 80021c6:	7afb      	ldrb	r3, [r7, #11]
 80021c8:	e01b      	b.n	8002202 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	f003 0310 	and.w	r3, r3, #16
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00d      	beq.n	80021f8 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d004      	beq.n	80021f0 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	e003      	b.n	80021f8 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80021f6:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	601a      	str	r2, [r3, #0]

  return status;
 8002200:	7afb      	ldrb	r3, [r7, #11]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800220e:	b480      	push	{r7}
 8002210:	b085      	sub	sp, #20
 8002212:	af00      	add	r7, sp, #0
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	607a      	str	r2, [r7, #4]
 800221a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002224:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800222a:	2b00      	cmp	r3, #0
 800222c:	d004      	beq.n	8002238 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8002236:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223c:	f003 021c 	and.w	r2, r3, #28
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002244:	2101      	movs	r1, #1
 8002246:	fa01 f202 	lsl.w	r2, r1, r2
 800224a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b10      	cmp	r3, #16
 800225a:	d108      	bne.n	800226e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 800226c:	e007      	b.n	800227e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	60da      	str	r2, [r3, #12]
}
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	4b17      	ldr	r3, [pc, #92]	@ (80022f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800229c:	429a      	cmp	r2, r3
 800229e:	d80a      	bhi.n	80022b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a4:	089b      	lsrs	r3, r3, #2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80022ac:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80022b4:	e007      	b.n	80022c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	009a      	lsls	r2, r3, #2
 80022be:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80022c0:	4413      	add	r3, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	3b08      	subs	r3, #8
 80022ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002300 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80022d0:	fba2 2303 	umull	r2, r3, r2, r3
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a0a      	ldr	r2, [pc, #40]	@ (8002304 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80022dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f003 031f 	and.w	r3, r3, #31
 80022e4:	2201      	movs	r2, #1
 80022e6:	409a      	lsls	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	40020407 	.word	0x40020407
 80022fc:	40020820 	.word	0x40020820
 8002300:	cccccccd 	.word	0xcccccccd
 8002304:	40020880 	.word	0x40020880

08002308 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	461a      	mov	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	65da      	str	r2, [r3, #92]	@ 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a08      	ldr	r2, [pc, #32]	@ (800234c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800232a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	3b01      	subs	r3, #1
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	2201      	movs	r2, #1
 8002336:	409a      	lsls	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	665a      	str	r2, [r3, #100]	@ 0x64
}
 800233c:	bf00      	nop
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	1000823f 	.word	0x1000823f
 800234c:	40020940 	.word	0x40020940

08002350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800235e:	e158      	b.n	8002612 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2101      	movs	r1, #1
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	fa01 f303 	lsl.w	r3, r1, r3
 800236c:	4013      	ands	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 814a 	beq.w	800260c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	2b01      	cmp	r3, #1
 8002382:	d005      	beq.n	8002390 <HAL_GPIO_Init+0x40>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d130      	bne.n	80023f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	2203      	movs	r2, #3
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023c6:	2201      	movs	r2, #1
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	091b      	lsrs	r3, r3, #4
 80023dc:	f003 0201 	and.w	r2, r3, #1
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d017      	beq.n	800242e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2203      	movs	r2, #3
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d123      	bne.n	8002482 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	08da      	lsrs	r2, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3208      	adds	r2, #8
 8002442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002446:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	220f      	movs	r2, #15
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4013      	ands	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	08da      	lsrs	r2, r3, #3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3208      	adds	r2, #8
 800247c:	6939      	ldr	r1, [r7, #16]
 800247e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	2203      	movs	r2, #3
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	4013      	ands	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f003 0203 	and.w	r2, r3, #3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 80a4 	beq.w	800260c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80024c4:	4a5a      	ldr	r2, [pc, #360]	@ (8002630 <HAL_GPIO_Init+0x2e0>)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	3318      	adds	r3, #24
 80024cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	220f      	movs	r2, #15
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a52      	ldr	r2, [pc, #328]	@ (8002634 <HAL_GPIO_Init+0x2e4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d025      	beq.n	800253c <HAL_GPIO_Init+0x1ec>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a51      	ldr	r2, [pc, #324]	@ (8002638 <HAL_GPIO_Init+0x2e8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d01f      	beq.n	8002538 <HAL_GPIO_Init+0x1e8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a50      	ldr	r2, [pc, #320]	@ (800263c <HAL_GPIO_Init+0x2ec>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d019      	beq.n	8002534 <HAL_GPIO_Init+0x1e4>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a4f      	ldr	r2, [pc, #316]	@ (8002640 <HAL_GPIO_Init+0x2f0>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d013      	beq.n	8002530 <HAL_GPIO_Init+0x1e0>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a4e      	ldr	r2, [pc, #312]	@ (8002644 <HAL_GPIO_Init+0x2f4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d00d      	beq.n	800252c <HAL_GPIO_Init+0x1dc>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a4d      	ldr	r2, [pc, #308]	@ (8002648 <HAL_GPIO_Init+0x2f8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d007      	beq.n	8002528 <HAL_GPIO_Init+0x1d8>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a4c      	ldr	r2, [pc, #304]	@ (800264c <HAL_GPIO_Init+0x2fc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d101      	bne.n	8002524 <HAL_GPIO_Init+0x1d4>
 8002520:	2306      	movs	r3, #6
 8002522:	e00c      	b.n	800253e <HAL_GPIO_Init+0x1ee>
 8002524:	2307      	movs	r3, #7
 8002526:	e00a      	b.n	800253e <HAL_GPIO_Init+0x1ee>
 8002528:	2305      	movs	r3, #5
 800252a:	e008      	b.n	800253e <HAL_GPIO_Init+0x1ee>
 800252c:	2304      	movs	r3, #4
 800252e:	e006      	b.n	800253e <HAL_GPIO_Init+0x1ee>
 8002530:	2303      	movs	r3, #3
 8002532:	e004      	b.n	800253e <HAL_GPIO_Init+0x1ee>
 8002534:	2302      	movs	r3, #2
 8002536:	e002      	b.n	800253e <HAL_GPIO_Init+0x1ee>
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <HAL_GPIO_Init+0x1ee>
 800253c:	2300      	movs	r3, #0
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	f002 0203 	and.w	r2, r2, #3
 8002544:	00d2      	lsls	r2, r2, #3
 8002546:	4093      	lsls	r3, r2
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800254e:	4938      	ldr	r1, [pc, #224]	@ (8002630 <HAL_GPIO_Init+0x2e0>)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	089b      	lsrs	r3, r3, #2
 8002554:	3318      	adds	r3, #24
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800255c:	4b34      	ldr	r3, [pc, #208]	@ (8002630 <HAL_GPIO_Init+0x2e0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	43db      	mvns	r3, r3
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002580:	4a2b      	ldr	r2, [pc, #172]	@ (8002630 <HAL_GPIO_Init+0x2e0>)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002586:	4b2a      	ldr	r3, [pc, #168]	@ (8002630 <HAL_GPIO_Init+0x2e0>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	43db      	mvns	r3, r3
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	4013      	ands	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025aa:	4a21      	ldr	r2, [pc, #132]	@ (8002630 <HAL_GPIO_Init+0x2e0>)
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002630 <HAL_GPIO_Init+0x2e0>)
 80025b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4013      	ands	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025d6:	4a16      	ldr	r2, [pc, #88]	@ (8002630 <HAL_GPIO_Init+0x2e0>)
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 80025de:	4b14      	ldr	r3, [pc, #80]	@ (8002630 <HAL_GPIO_Init+0x2e0>)
 80025e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002604:	4a0a      	ldr	r2, [pc, #40]	@ (8002630 <HAL_GPIO_Init+0x2e0>)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	3301      	adds	r3, #1
 8002610:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	fa22 f303 	lsr.w	r3, r2, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	f47f ae9f 	bne.w	8002360 <HAL_GPIO_Init+0x10>
  }
}
 8002622:	bf00      	nop
 8002624:	bf00      	nop
 8002626:	371c      	adds	r7, #28
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	4002f400 	.word	0x4002f400
 8002634:	42020000 	.word	0x42020000
 8002638:	42020400 	.word	0x42020400
 800263c:	42020800 	.word	0x42020800
 8002640:	42020c00 	.word	0x42020c00
 8002644:	42021000 	.word	0x42021000
 8002648:	42021400 	.word	0x42021400
 800264c:	42021800 	.word	0x42021800

08002650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	807b      	strh	r3, [r7, #2]
 800265c:	4613      	mov	r3, r2
 800265e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002660:	787b      	ldrb	r3, [r7, #1]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002666:	887a      	ldrh	r2, [r7, #2]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800266c:	e002      	b.n	8002674 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800266e:	887a      	ldrh	r2, [r7, #2]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800268c:	4b0b      	ldr	r3, [pc, #44]	@ (80026bc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
 800269c:	e007      	b.n	80026ae <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800269e:	4b07      	ldr	r3, [pc, #28]	@ (80026bc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 0204 	bic.w	r2, r3, #4
 80026a6:	4905      	ldr	r1, [pc, #20]	@ (80026bc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]
  }

  return status;
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	40030400 	.word	0x40030400

080026c0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80026c4:	4b05      	ldr	r3, [pc, #20]	@ (80026dc <HAL_ICACHE_Enable+0x1c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a04      	ldr	r2, [pc, #16]	@ (80026dc <HAL_ICACHE_Enable+0x1c>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	40030400 	.word	0x40030400

080026e0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80026e4:	4b04      	ldr	r3, [pc, #16]	@ (80026f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40007000 	.word	0x40007000

080026fc <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002704:	4b27      	ldr	r3, [pc, #156]	@ (80027a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800270c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800270e:	f000 f871 	bl	80027f4 <HAL_PWREx_SMPS_GetEffectiveMode>
 8002712:	4603      	mov	r3, r0
 8002714:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002718:	d101      	bne.n	800271e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e03e      	b.n	800279c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800271e:	4b21      	ldr	r3, [pc, #132]	@ (80027a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002726:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800272a:	d101      	bne.n	8002730 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e035      	b.n	800279c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	429a      	cmp	r2, r3
 8002736:	d101      	bne.n	800273c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	e02f      	b.n	800279c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800273c:	4b19      	ldr	r3, [pc, #100]	@ (80027a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8002744:	4917      	ldr	r1, [pc, #92]	@ (80027a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4313      	orrs	r3, r2
 800274a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 800274c:	4b16      	ldr	r3, [pc, #88]	@ (80027a8 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	095b      	lsrs	r3, r3, #5
 8002752:	4a16      	ldr	r2, [pc, #88]	@ (80027ac <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002754:	fba2 2303 	umull	r2, r3, r2, r3
 8002758:	09db      	lsrs	r3, r3, #7
 800275a:	2232      	movs	r2, #50	@ 0x32
 800275c:	fb02 f303 	mul.w	r3, r2, r3
 8002760:	4a13      	ldr	r2, [pc, #76]	@ (80027b0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002762:	fba2 2303 	umull	r2, r3, r2, r3
 8002766:	08db      	lsrs	r3, r3, #3
 8002768:	3301      	adds	r3, #1
 800276a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800276c:	e002      	b.n	8002774 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	3b01      	subs	r3, #1
 8002772:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002774:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800277c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002780:	d102      	bne.n	8002788 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f2      	bne.n	800276e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002788:	4b06      	ldr	r3, [pc, #24]	@ (80027a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002790:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002794:	d101      	bne.n	800279a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e000      	b.n	800279c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40007000 	.word	0x40007000
 80027a8:	20000000 	.word	0x20000000
 80027ac:	0a7c5ac5 	.word	0x0a7c5ac5
 80027b0:	cccccccd 	.word	0xcccccccd

080027b4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80027b8:	4b05      	ldr	r3, [pc, #20]	@ (80027d0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	4a04      	ldr	r2, [pc, #16]	@ (80027d0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80027be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027c2:	6053      	str	r3, [r2, #4]
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40007000 	.word	0x40007000

080027d4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80027d8:	4b05      	ldr	r3, [pc, #20]	@ (80027f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	4a04      	ldr	r2, [pc, #16]	@ (80027f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80027de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027e2:	6093      	str	r3, [r2, #8]
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40007000 	.word	0x40007000

080027f4 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80027fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002838 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800280a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	e00a      	b.n	8002828 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d103      	bne.n	8002824 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 800281c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	e001      	b.n	8002828 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002824:	2300      	movs	r3, #0
 8002826:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002828:	687b      	ldr	r3, [r7, #4]
}
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40007000 	.word	0x40007000

0800283c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d102      	bne.n	8002850 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	f000 bcc2 	b.w	80031d4 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002850:	4b99      	ldr	r3, [pc, #612]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 030c 	and.w	r3, r3, #12
 8002858:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800285a:	4b97      	ldr	r3, [pc, #604]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0310 	and.w	r3, r3, #16
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80e9 	beq.w	8002a44 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d006      	beq.n	8002886 <HAL_RCC_OscConfig+0x4a>
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	2b0c      	cmp	r3, #12
 800287c:	f040 8083 	bne.w	8002986 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d17f      	bne.n	8002986 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002886:	4b8c      	ldr	r3, [pc, #560]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d006      	beq.n	80028a0 <HAL_RCC_OscConfig+0x64>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d102      	bne.n	80028a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	f000 bc9a 	b.w	80031d4 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028a4:	4b84      	ldr	r3, [pc, #528]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d004      	beq.n	80028ba <HAL_RCC_OscConfig+0x7e>
 80028b0:	4b81      	ldr	r3, [pc, #516]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028b8:	e005      	b.n	80028c6 <HAL_RCC_OscConfig+0x8a>
 80028ba:	4b7f      	ldr	r3, [pc, #508]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 80028bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028c0:	091b      	lsrs	r3, r3, #4
 80028c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d224      	bcs.n	8002914 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fe9c 	bl	800360c <RCC_SetFlashLatencyFromMSIRange>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	f000 bc7a 	b.w	80031d4 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028e0:	4b75      	ldr	r3, [pc, #468]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a74      	ldr	r2, [pc, #464]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 80028e6:	f043 0308 	orr.w	r3, r3, #8
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	4b72      	ldr	r3, [pc, #456]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	496f      	ldr	r1, [pc, #444]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028fe:	4b6e      	ldr	r3, [pc, #440]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	021b      	lsls	r3, r3, #8
 800290c:	496a      	ldr	r1, [pc, #424]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 800290e:	4313      	orrs	r3, r2
 8002910:	604b      	str	r3, [r1, #4]
 8002912:	e026      	b.n	8002962 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002914:	4b68      	ldr	r3, [pc, #416]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a67      	ldr	r2, [pc, #412]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 800291a:	f043 0308 	orr.w	r3, r3, #8
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	4b65      	ldr	r3, [pc, #404]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292c:	4962      	ldr	r1, [pc, #392]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 800292e:	4313      	orrs	r3, r2
 8002930:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002932:	4b61      	ldr	r3, [pc, #388]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	021b      	lsls	r3, r3, #8
 8002940:	495d      	ldr	r1, [pc, #372]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 8002942:	4313      	orrs	r3, r2
 8002944:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10a      	bne.n	8002962 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	4618      	mov	r0, r3
 8002952:	f000 fe5b 	bl	800360c <RCC_SetFlashLatencyFromMSIRange>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	f000 bc39 	b.w	80031d4 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002962:	f000 fe17 	bl	8003594 <HAL_RCC_GetHCLKFreq>
 8002966:	4603      	mov	r3, r0
 8002968:	4a54      	ldr	r2, [pc, #336]	@ (8002abc <HAL_RCC_OscConfig+0x280>)
 800296a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800296c:	4b54      	ldr	r3, [pc, #336]	@ (8002ac0 <HAL_RCC_OscConfig+0x284>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff f88d 	bl	8001a90 <HAL_InitTick>
 8002976:	4603      	mov	r3, r0
 8002978:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d060      	beq.n	8002a42 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	f000 bc27 	b.w	80031d4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d039      	beq.n	8002a02 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800298e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a49      	ldr	r2, [pc, #292]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800299a:	f7ff f8c9 	bl	8001b30 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029a0:	e00f      	b.n	80029c2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029a2:	f7ff f8c5 	bl	8001b30 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d908      	bls.n	80029c2 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029b0:	4b41      	ldr	r3, [pc, #260]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d102      	bne.n	80029c2 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	f000 bc09 	b.w	80031d4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029c2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0e9      	beq.n	80029a2 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029ce:	4b3a      	ldr	r3, [pc, #232]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a39      	ldr	r2, [pc, #228]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 80029d4:	f043 0308 	orr.w	r3, r3, #8
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	4b37      	ldr	r3, [pc, #220]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e6:	4934      	ldr	r1, [pc, #208]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029ec:	4b32      	ldr	r3, [pc, #200]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	021b      	lsls	r3, r3, #8
 80029fa:	492f      	ldr	r1, [pc, #188]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]
 8002a00:	e020      	b.n	8002a44 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a02:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a2c      	ldr	r2, [pc, #176]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a0e:	f7ff f88f 	bl	8001b30 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a14:	e00e      	b.n	8002a34 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a16:	f7ff f88b 	bl	8001b30 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d907      	bls.n	8002a34 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a24:	4b24      	ldr	r3, [pc, #144]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e3cf      	b.n	80031d4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a34:	4b20      	ldr	r3, [pc, #128]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1ea      	bne.n	8002a16 <HAL_RCC_OscConfig+0x1da>
 8002a40:	e000      	b.n	8002a44 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a42:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d07e      	beq.n	8002b4e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d005      	beq.n	8002a62 <HAL_RCC_OscConfig+0x226>
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	2b0c      	cmp	r3, #12
 8002a5a:	d10e      	bne.n	8002a7a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d10b      	bne.n	8002a7a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a62:	4b15      	ldr	r3, [pc, #84]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d06e      	beq.n	8002b4c <HAL_RCC_OscConfig+0x310>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d16a      	bne.n	8002b4c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e3ac      	b.n	80031d4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a82:	d106      	bne.n	8002a92 <HAL_RCC_OscConfig+0x256>
 8002a84:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 8002a8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	e024      	b.n	8002adc <HAL_RCC_OscConfig+0x2a0>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a9a:	d113      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x288>
 8002a9c:	4b06      	ldr	r3, [pc, #24]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a05      	ldr	r2, [pc, #20]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 8002aa2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	4b03      	ldr	r3, [pc, #12]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a02      	ldr	r2, [pc, #8]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 8002aae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	e012      	b.n	8002adc <HAL_RCC_OscConfig+0x2a0>
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	20000000 	.word	0x20000000
 8002ac0:	20000004 	.word	0x20000004
 8002ac4:	4b8b      	ldr	r3, [pc, #556]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a8a      	ldr	r2, [pc, #552]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002aca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	4b88      	ldr	r3, [pc, #544]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a87      	ldr	r2, [pc, #540]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002ad6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d019      	beq.n	8002b18 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7ff f824 	bl	8001b30 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aea:	e00e      	b.n	8002b0a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aec:	f7ff f820 	bl	8001b30 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	@ 0x64
 8002af8:	d907      	bls.n	8002b0a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002afa:	4b7e      	ldr	r3, [pc, #504]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e364      	b.n	80031d4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b0a:	4b7a      	ldr	r3, [pc, #488]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0ea      	beq.n	8002aec <HAL_RCC_OscConfig+0x2b0>
 8002b16:	e01a      	b.n	8002b4e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7ff f80a 	bl	8001b30 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b1e:	e00e      	b.n	8002b3e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b20:	f7ff f806 	bl	8001b30 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	@ 0x64
 8002b2c:	d907      	bls.n	8002b3e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b2e:	4b71      	ldr	r3, [pc, #452]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e34a      	b.n	80031d4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b3e:	4b6d      	ldr	r3, [pc, #436]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1ea      	bne.n	8002b20 <HAL_RCC_OscConfig+0x2e4>
 8002b4a:	e000      	b.n	8002b4e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d06c      	beq.n	8002c34 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_OscConfig+0x330>
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	2b0c      	cmp	r3, #12
 8002b64:	d119      	bne.n	8002b9a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d116      	bne.n	8002b9a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b6c:	4b61      	ldr	r3, [pc, #388]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_OscConfig+0x348>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e327      	b.n	80031d4 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b84:	4b5b      	ldr	r3, [pc, #364]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	061b      	lsls	r3, r3, #24
 8002b92:	4958      	ldr	r1, [pc, #352]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b98:	e04c      	b.n	8002c34 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d029      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba2:	4b54      	ldr	r3, [pc, #336]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a53      	ldr	r2, [pc, #332]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bae:	f7fe ffbf 	bl	8001b30 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bb4:	e00e      	b.n	8002bd4 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb6:	f7fe ffbb 	bl	8001b30 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d907      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bc4:	4b4b      	ldr	r3, [pc, #300]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e2ff      	b.n	80031d4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bd4:	4b47      	ldr	r3, [pc, #284]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0ea      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be0:	4b44      	ldr	r3, [pc, #272]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	061b      	lsls	r3, r3, #24
 8002bee:	4941      	ldr	r1, [pc, #260]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
 8002bf4:	e01e      	b.n	8002c34 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bf6:	4b3f      	ldr	r3, [pc, #252]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a3e      	ldr	r2, [pc, #248]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002bfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c02:	f7fe ff95 	bl	8001b30 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c08:	e00e      	b.n	8002c28 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c0a:	f7fe ff91 	bl	8001b30 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d907      	bls.n	8002c28 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c18:	4b36      	ldr	r3, [pc, #216]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e2d5      	b.n	80031d4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c28:	4b32      	ldr	r3, [pc, #200]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1ea      	bne.n	8002c0a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d062      	beq.n	8002d06 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d038      	beq.n	8002cba <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d108      	bne.n	8002c62 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002c50:	4b28      	ldr	r3, [pc, #160]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c56:	4a27      	ldr	r2, [pc, #156]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002c58:	f023 0310 	bic.w	r3, r3, #16
 8002c5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002c60:	e007      	b.n	8002c72 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002c62:	4b24      	ldr	r3, [pc, #144]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c68:	4a22      	ldr	r2, [pc, #136]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002c6a:	f043 0310 	orr.w	r3, r3, #16
 8002c6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c72:	4b20      	ldr	r3, [pc, #128]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c78:	4a1e      	ldr	r2, [pc, #120]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c82:	f7fe ff55 	bl	8001b30 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c88:	e00f      	b.n	8002caa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c8a:	f7fe ff51 	bl	8001b30 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b07      	cmp	r3, #7
 8002c96:	d908      	bls.n	8002caa <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c98:	4b16      	ldr	r3, [pc, #88]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e294      	b.n	80031d4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002caa:	4b12      	ldr	r3, [pc, #72]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0e8      	beq.n	8002c8a <HAL_RCC_OscConfig+0x44e>
 8002cb8:	e025      	b.n	8002d06 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cba:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002cc2:	f023 0301 	bic.w	r3, r3, #1
 8002cc6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cca:	f7fe ff31 	bl	8001b30 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cd0:	e012      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd2:	f7fe ff2d 	bl	8001b30 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b07      	cmp	r3, #7
 8002cde:	d90b      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ce0:	4b04      	ldr	r3, [pc, #16]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b8>)
 8002ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d004      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e270      	b.n	80031d4 <HAL_RCC_OscConfig+0x998>
 8002cf2:	bf00      	nop
 8002cf4:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cf8:	4ba8      	ldr	r3, [pc, #672]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1e5      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 812d 	beq.w	8002f6e <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d14:	2300      	movs	r3, #0
 8002d16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d18:	4ba0      	ldr	r3, [pc, #640]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10d      	bne.n	8002d40 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d24:	4b9d      	ldr	r3, [pc, #628]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d28:	4a9c      	ldr	r2, [pc, #624]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002d2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d30:	4b9a      	ldr	r3, [pc, #616]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d40:	4b97      	ldr	r3, [pc, #604]	@ (8002fa0 <HAL_RCC_OscConfig+0x764>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d11e      	bne.n	8002d8a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d4c:	4b94      	ldr	r3, [pc, #592]	@ (8002fa0 <HAL_RCC_OscConfig+0x764>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a93      	ldr	r2, [pc, #588]	@ (8002fa0 <HAL_RCC_OscConfig+0x764>)
 8002d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d58:	f7fe feea 	bl	8001b30 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d5e:	e00e      	b.n	8002d7e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d60:	f7fe fee6 	bl	8001b30 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d907      	bls.n	8002d7e <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d6e:	4b8c      	ldr	r3, [pc, #560]	@ (8002fa0 <HAL_RCC_OscConfig+0x764>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e22a      	b.n	80031d4 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d7e:	4b88      	ldr	r3, [pc, #544]	@ (8002fa0 <HAL_RCC_OscConfig+0x764>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0ea      	beq.n	8002d60 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d01f      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d010      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002da2:	4b7e      	ldr	r3, [pc, #504]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da8:	4a7c      	ldr	r2, [pc, #496]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002daa:	f043 0304 	orr.w	r3, r3, #4
 8002dae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002db2:	4b7a      	ldr	r3, [pc, #488]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db8:	4a78      	ldr	r2, [pc, #480]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dc2:	e018      	b.n	8002df6 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002dc4:	4b75      	ldr	r3, [pc, #468]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dca:	4a74      	ldr	r2, [pc, #464]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dd4:	e00f      	b.n	8002df6 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002dd6:	4b71      	ldr	r3, [pc, #452]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ddc:	4a6f      	ldr	r2, [pc, #444]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002dde:	f023 0301 	bic.w	r3, r3, #1
 8002de2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002de6:	4b6d      	ldr	r3, [pc, #436]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dec:	4a6b      	ldr	r2, [pc, #428]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002dee:	f023 0304 	bic.w	r3, r3, #4
 8002df2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d068      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfe:	f7fe fe97 	bl	8001b30 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e04:	e011      	b.n	8002e2a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e06:	f7fe fe93 	bl	8001b30 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d908      	bls.n	8002e2a <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e18:	4b60      	ldr	r3, [pc, #384]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e1d4      	b.n	80031d4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e2a:	4b5c      	ldr	r3, [pc, #368]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0e6      	beq.n	8002e06 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d022      	beq.n	8002e8a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e44:	4b55      	ldr	r3, [pc, #340]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e4a:	4a54      	ldr	r2, [pc, #336]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002e4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002e54:	e011      	b.n	8002e7a <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e56:	f7fe fe6b 	bl	8001b30 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d908      	bls.n	8002e7a <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002e68:	4b4c      	ldr	r3, [pc, #304]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e1ac      	b.n	80031d4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002e7a:	4b48      	ldr	r3, [pc, #288]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0e6      	beq.n	8002e56 <HAL_RCC_OscConfig+0x61a>
 8002e88:	e068      	b.n	8002f5c <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e8a:	4b44      	ldr	r3, [pc, #272]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e90:	4a42      	ldr	r2, [pc, #264]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002e92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e9a:	e011      	b.n	8002ec0 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9c:	f7fe fe48 	bl	8001b30 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d908      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002eae:	4b3b      	ldr	r3, [pc, #236]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e189      	b.n	80031d4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ec0:	4b36      	ldr	r3, [pc, #216]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1e6      	bne.n	8002e9c <HAL_RCC_OscConfig+0x660>
 8002ece:	e045      	b.n	8002f5c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed0:	f7fe fe2e 	bl	8001b30 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ed6:	e011      	b.n	8002efc <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed8:	f7fe fe2a 	bl	8001b30 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d908      	bls.n	8002efc <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eea:	4b2c      	ldr	r3, [pc, #176]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e16b      	b.n	80031d4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002efc:	4b27      	ldr	r3, [pc, #156]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1e6      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002f0a:	4b24      	ldr	r3, [pc, #144]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d021      	beq.n	8002f5c <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f18:	4b20      	ldr	r3, [pc, #128]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f1e:	4a1f      	ldr	r2, [pc, #124]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002f20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f28:	e011      	b.n	8002f4e <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2a:	f7fe fe01 	bl	8001b30 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d908      	bls.n	8002f4e <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f3c:	4b17      	ldr	r3, [pc, #92]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e142      	b.n	80031d4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f4e:	4b13      	ldr	r3, [pc, #76]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1e6      	bne.n	8002f2a <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f5c:	7ffb      	ldrb	r3, [r7, #31]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d105      	bne.n	8002f6e <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f62:	4b0e      	ldr	r3, [pc, #56]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f66:	4a0d      	ldr	r2, [pc, #52]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002f68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f6c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0320 	and.w	r3, r3, #32
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d04f      	beq.n	800301a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d028      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f82:	4b06      	ldr	r3, [pc, #24]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002f84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f88:	4a04      	ldr	r2, [pc, #16]	@ (8002f9c <HAL_RCC_OscConfig+0x760>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f92:	f7fe fdcd 	bl	8001b30 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f98:	e014      	b.n	8002fc4 <HAL_RCC_OscConfig+0x788>
 8002f9a:	bf00      	nop
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fa4:	f7fe fdc4 	bl	8001b30 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d908      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fb2:	4b8a      	ldr	r3, [pc, #552]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 8002fb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e107      	b.n	80031d4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fc4:	4b85      	ldr	r3, [pc, #532]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 8002fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0e8      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x768>
 8002fd2:	e022      	b.n	800301a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fd4:	4b81      	ldr	r3, [pc, #516]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 8002fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fda:	4a80      	ldr	r2, [pc, #512]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 8002fdc:	f023 0301 	bic.w	r3, r3, #1
 8002fe0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe4:	f7fe fda4 	bl	8001b30 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fea:	e00f      	b.n	800300c <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fec:	f7fe fda0 	bl	8001b30 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d908      	bls.n	800300c <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ffa:	4b78      	ldr	r3, [pc, #480]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 8002ffc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e0e3      	b.n	80031d4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800300c:	4b73      	ldr	r3, [pc, #460]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 800300e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1e8      	bne.n	8002fec <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 80d7 	beq.w	80031d2 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003024:	4b6d      	ldr	r3, [pc, #436]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 030c 	and.w	r3, r3, #12
 800302c:	2b0c      	cmp	r3, #12
 800302e:	f000 8091 	beq.w	8003154 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003036:	2b02      	cmp	r3, #2
 8003038:	d166      	bne.n	8003108 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303a:	4b68      	ldr	r3, [pc, #416]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a67      	ldr	r2, [pc, #412]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 8003040:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003046:	f7fe fd73 	bl	8001b30 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800304c:	e00e      	b.n	800306c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304e:	f7fe fd6f 	bl	8001b30 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d907      	bls.n	800306c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800305c:	4b5f      	ldr	r3, [pc, #380]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e0b3      	b.n	80031d4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800306c:	4b5b      	ldr	r3, [pc, #364]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1ea      	bne.n	800304e <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003078:	4b58      	ldr	r3, [pc, #352]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	4b58      	ldr	r3, [pc, #352]	@ (80031e0 <HAL_RCC_OscConfig+0x9a4>)
 800307e:	4013      	ands	r3, r2
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003088:	3a01      	subs	r2, #1
 800308a:	0112      	lsls	r2, r2, #4
 800308c:	4311      	orrs	r1, r2
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003092:	0212      	lsls	r2, r2, #8
 8003094:	4311      	orrs	r1, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800309a:	0852      	lsrs	r2, r2, #1
 800309c:	3a01      	subs	r2, #1
 800309e:	0552      	lsls	r2, r2, #21
 80030a0:	4311      	orrs	r1, r2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80030a6:	0852      	lsrs	r2, r2, #1
 80030a8:	3a01      	subs	r2, #1
 80030aa:	0652      	lsls	r2, r2, #25
 80030ac:	4311      	orrs	r1, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80030b2:	06d2      	lsls	r2, r2, #27
 80030b4:	430a      	orrs	r2, r1
 80030b6:	4949      	ldr	r1, [pc, #292]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030bc:	4b47      	ldr	r3, [pc, #284]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a46      	ldr	r2, [pc, #280]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 80030c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030c8:	4b44      	ldr	r3, [pc, #272]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4a43      	ldr	r2, [pc, #268]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 80030ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d4:	f7fe fd2c 	bl	8001b30 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030da:	e00e      	b.n	80030fa <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030dc:	f7fe fd28 	bl	8001b30 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d907      	bls.n	80030fa <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ea:	4b3c      	ldr	r3, [pc, #240]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e06c      	b.n	80031d4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030fa:	4b38      	ldr	r3, [pc, #224]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0ea      	beq.n	80030dc <HAL_RCC_OscConfig+0x8a0>
 8003106:	e064      	b.n	80031d2 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003108:	4b34      	ldr	r3, [pc, #208]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a33      	ldr	r2, [pc, #204]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 800310e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7fe fd0c 	bl	8001b30 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800311a:	e00e      	b.n	800313a <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311c:	f7fe fd08 	bl	8001b30 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d907      	bls.n	800313a <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800312a:	4b2c      	ldr	r3, [pc, #176]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e04c      	b.n	80031d4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800313a:	4b28      	ldr	r3, [pc, #160]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1ea      	bne.n	800311c <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003146:	4b25      	ldr	r3, [pc, #148]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	4924      	ldr	r1, [pc, #144]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 800314c:	4b25      	ldr	r3, [pc, #148]	@ (80031e4 <HAL_RCC_OscConfig+0x9a8>)
 800314e:	4013      	ands	r3, r2
 8003150:	60cb      	str	r3, [r1, #12]
 8003152:	e03e      	b.n	80031d2 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e039      	b.n	80031d4 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003160:	4b1e      	ldr	r3, [pc, #120]	@ (80031dc <HAL_RCC_OscConfig+0x9a0>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f003 0203 	and.w	r2, r3, #3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003170:	429a      	cmp	r2, r3
 8003172:	d12c      	bne.n	80031ce <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800317e:	3b01      	subs	r3, #1
 8003180:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003182:	429a      	cmp	r2, r3
 8003184:	d123      	bne.n	80031ce <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003190:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003192:	429a      	cmp	r2, r3
 8003194:	d11b      	bne.n	80031ce <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a0:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d113      	bne.n	80031ce <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b0:	085b      	lsrs	r3, r3, #1
 80031b2:	3b01      	subs	r3, #1
 80031b4:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d109      	bne.n	80031ce <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c4:	085b      	lsrs	r3, r3, #1
 80031c6:	3b01      	subs	r3, #1
 80031c8:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d001      	beq.n	80031d2 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3720      	adds	r7, #32
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40021000 	.word	0x40021000
 80031e0:	019f800c 	.word	0x019f800c
 80031e4:	feeefffc 	.word	0xfeeefffc

080031e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e11c      	b.n	800343a <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003200:	4b90      	ldr	r3, [pc, #576]	@ (8003444 <HAL_RCC_ClockConfig+0x25c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d910      	bls.n	8003230 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b8d      	ldr	r3, [pc, #564]	@ (8003444 <HAL_RCC_ClockConfig+0x25c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 020f 	bic.w	r2, r3, #15
 8003216:	498b      	ldr	r1, [pc, #556]	@ (8003444 <HAL_RCC_ClockConfig+0x25c>)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b89      	ldr	r3, [pc, #548]	@ (8003444 <HAL_RCC_ClockConfig+0x25c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e104      	b.n	800343a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d010      	beq.n	800325e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	4b81      	ldr	r3, [pc, #516]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003248:	429a      	cmp	r2, r3
 800324a:	d908      	bls.n	800325e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800324c:	4b7e      	ldr	r3, [pc, #504]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	497b      	ldr	r1, [pc, #492]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 800325a:	4313      	orrs	r3, r2
 800325c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 8085 	beq.w	8003376 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b03      	cmp	r3, #3
 8003272:	d11f      	bne.n	80032b4 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003274:	4b74      	ldr	r3, [pc, #464]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0da      	b.n	800343a <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003284:	f000 fa26 	bl	80036d4 <RCC_GetSysClockFreqFromPLLSource>
 8003288:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4a6f      	ldr	r2, [pc, #444]	@ (800344c <HAL_RCC_ClockConfig+0x264>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d947      	bls.n	8003322 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003292:	4b6d      	ldr	r3, [pc, #436]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d141      	bne.n	8003322 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800329e:	4b6a      	ldr	r3, [pc, #424]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032a6:	4a68      	ldr	r2, [pc, #416]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 80032a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80032ae:	2380      	movs	r3, #128	@ 0x80
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	e036      	b.n	8003322 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d107      	bne.n	80032cc <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032bc:	4b62      	ldr	r3, [pc, #392]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d115      	bne.n	80032f4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0b6      	b.n	800343a <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d107      	bne.n	80032e4 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032d4:	4b5c      	ldr	r3, [pc, #368]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d109      	bne.n	80032f4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0aa      	b.n	800343a <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e4:	4b58      	ldr	r3, [pc, #352]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e0a2      	b.n	800343a <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80032f4:	f000 f8b0 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 80032f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4a53      	ldr	r2, [pc, #332]	@ (800344c <HAL_RCC_ClockConfig+0x264>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d90f      	bls.n	8003322 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003302:	4b51      	ldr	r3, [pc, #324]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d109      	bne.n	8003322 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800330e:	4b4e      	ldr	r3, [pc, #312]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003316:	4a4c      	ldr	r2, [pc, #304]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 8003318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800331c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800331e:	2380      	movs	r3, #128	@ 0x80
 8003320:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003322:	4b49      	ldr	r3, [pc, #292]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f023 0203 	bic.w	r2, r3, #3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4946      	ldr	r1, [pc, #280]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 8003330:	4313      	orrs	r3, r2
 8003332:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003334:	f7fe fbfc 	bl	8001b30 <HAL_GetTick>
 8003338:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333a:	e013      	b.n	8003364 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333c:	f7fe fbf8 	bl	8001b30 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d90a      	bls.n	8003364 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334e:	4b3e      	ldr	r3, [pc, #248]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 020c 	and.w	r2, r3, #12
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e06a      	b.n	800343a <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003364:	4b38      	ldr	r3, [pc, #224]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 020c 	and.w	r2, r3, #12
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	429a      	cmp	r2, r3
 8003374:	d1e2      	bne.n	800333c <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2b80      	cmp	r3, #128	@ 0x80
 800337a:	d105      	bne.n	8003388 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800337c:	4b32      	ldr	r3, [pc, #200]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4a31      	ldr	r2, [pc, #196]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 8003382:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003386:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d010      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	4b2b      	ldr	r3, [pc, #172]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d208      	bcs.n	80033b6 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a4:	4b28      	ldr	r3, [pc, #160]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	4925      	ldr	r1, [pc, #148]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033b6:	4b23      	ldr	r3, [pc, #140]	@ (8003444 <HAL_RCC_ClockConfig+0x25c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d210      	bcs.n	80033e6 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003444 <HAL_RCC_ClockConfig+0x25c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f023 020f 	bic.w	r2, r3, #15
 80033cc:	491d      	ldr	r1, [pc, #116]	@ (8003444 <HAL_RCC_ClockConfig+0x25c>)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003444 <HAL_RCC_ClockConfig+0x25c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d001      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e029      	b.n	800343a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0304 	and.w	r3, r3, #4
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d008      	beq.n	8003404 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033f2:	4b15      	ldr	r3, [pc, #84]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	4912      	ldr	r1, [pc, #72]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 8003400:	4313      	orrs	r3, r2
 8003402:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d009      	beq.n	8003424 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003410:	4b0d      	ldr	r3, [pc, #52]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	490a      	ldr	r1, [pc, #40]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 8003420:	4313      	orrs	r3, r2
 8003422:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003424:	f000 f8b6 	bl	8003594 <HAL_RCC_GetHCLKFreq>
 8003428:	4603      	mov	r3, r0
 800342a:	4a09      	ldr	r2, [pc, #36]	@ (8003450 <HAL_RCC_ClockConfig+0x268>)
 800342c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800342e:	4b09      	ldr	r3, [pc, #36]	@ (8003454 <HAL_RCC_ClockConfig+0x26c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe fb2c 	bl	8001a90 <HAL_InitTick>
 8003438:	4603      	mov	r3, r0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40022000 	.word	0x40022000
 8003448:	40021000 	.word	0x40021000
 800344c:	04c4b400 	.word	0x04c4b400
 8003450:	20000000 	.word	0x20000000
 8003454:	20000004 	.word	0x20000004

08003458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003458:	b480      	push	{r7}
 800345a:	b089      	sub	sp, #36	@ 0x24
 800345c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
 8003462:	2300      	movs	r3, #0
 8003464:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003466:	4b47      	ldr	r3, [pc, #284]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003470:	4b44      	ldr	r3, [pc, #272]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0303 	and.w	r3, r3, #3
 8003478:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0x34>
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	2b0c      	cmp	r3, #12
 8003484:	d121      	bne.n	80034ca <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d11e      	bne.n	80034ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800348c:	4b3d      	ldr	r3, [pc, #244]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x12c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	2b00      	cmp	r3, #0
 8003496:	d107      	bne.n	80034a8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003498:	4b3a      	ldr	r3, [pc, #232]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x12c>)
 800349a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800349e:	0a1b      	lsrs	r3, r3, #8
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	61fb      	str	r3, [r7, #28]
 80034a6:	e005      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034a8:	4b36      	ldr	r3, [pc, #216]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x12c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	091b      	lsrs	r3, r3, #4
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80034b4:	4a34      	ldr	r2, [pc, #208]	@ (8003588 <HAL_RCC_GetSysClockFreq+0x130>)
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034bc:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10d      	bne.n	80034e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034c8:	e00a      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d102      	bne.n	80034d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034d0:	4b2e      	ldr	r3, [pc, #184]	@ (800358c <HAL_RCC_GetSysClockFreq+0x134>)
 80034d2:	61bb      	str	r3, [r7, #24]
 80034d4:	e004      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d101      	bne.n	80034e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034dc:	4b2c      	ldr	r3, [pc, #176]	@ (8003590 <HAL_RCC_GetSysClockFreq+0x138>)
 80034de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	2b0c      	cmp	r3, #12
 80034e4:	d146      	bne.n	8003574 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80034e6:	4b27      	ldr	r3, [pc, #156]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x12c>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034f0:	4b24      	ldr	r3, [pc, #144]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x12c>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	091b      	lsrs	r3, r3, #4
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	3301      	adds	r3, #1
 80034fc:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d003      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0xb4>
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2b03      	cmp	r3, #3
 8003508:	d00d      	beq.n	8003526 <HAL_RCC_GetSysClockFreq+0xce>
 800350a:	e019      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800350c:	4a1f      	ldr	r2, [pc, #124]	@ (800358c <HAL_RCC_GetSysClockFreq+0x134>)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	fbb2 f3f3 	udiv	r3, r2, r3
 8003514:	4a1b      	ldr	r2, [pc, #108]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003516:	68d2      	ldr	r2, [r2, #12]
 8003518:	0a12      	lsrs	r2, r2, #8
 800351a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800351e:	fb02 f303 	mul.w	r3, r2, r3
 8003522:	617b      	str	r3, [r7, #20]
        break;
 8003524:	e019      	b.n	800355a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003526:	4a1a      	ldr	r2, [pc, #104]	@ (8003590 <HAL_RCC_GetSysClockFreq+0x138>)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	fbb2 f3f3 	udiv	r3, r2, r3
 800352e:	4a15      	ldr	r2, [pc, #84]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003530:	68d2      	ldr	r2, [r2, #12]
 8003532:	0a12      	lsrs	r2, r2, #8
 8003534:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003538:	fb02 f303 	mul.w	r3, r2, r3
 800353c:	617b      	str	r3, [r7, #20]
        break;
 800353e:	e00c      	b.n	800355a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003540:	69fa      	ldr	r2, [r7, #28]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	fbb2 f3f3 	udiv	r3, r2, r3
 8003548:	4a0e      	ldr	r2, [pc, #56]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x12c>)
 800354a:	68d2      	ldr	r2, [r2, #12]
 800354c:	0a12      	lsrs	r2, r2, #8
 800354e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	617b      	str	r3, [r7, #20]
        break;
 8003558:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800355a:	4b0a      	ldr	r3, [pc, #40]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x12c>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	0e5b      	lsrs	r3, r3, #25
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	3301      	adds	r3, #1
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003572:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003574:	69bb      	ldr	r3, [r7, #24]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3724      	adds	r7, #36	@ 0x24
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000
 8003588:	080056f8 	.word	0x080056f8
 800358c:	00f42400 	.word	0x00f42400
 8003590:	007a1200 	.word	0x007a1200

08003594 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8003598:	f7ff ff5e 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 800359c:	4602      	mov	r2, r0
 800359e:	4b05      	ldr	r3, [pc, #20]	@ (80035b4 <HAL_RCC_GetHCLKFreq+0x20>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	f003 030f 	and.w	r3, r3, #15
 80035a8:	4903      	ldr	r1, [pc, #12]	@ (80035b8 <HAL_RCC_GetHCLKFreq+0x24>)
 80035aa:	5ccb      	ldrb	r3, [r1, r3]
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40021000 	.word	0x40021000
 80035b8:	080056e0 	.word	0x080056e0

080035bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035c0:	f7ff ffe8 	bl	8003594 <HAL_RCC_GetHCLKFreq>
 80035c4:	4602      	mov	r2, r0
 80035c6:	4b05      	ldr	r3, [pc, #20]	@ (80035dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	0a1b      	lsrs	r3, r3, #8
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	4903      	ldr	r1, [pc, #12]	@ (80035e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035d2:	5ccb      	ldrb	r3, [r1, r3]
 80035d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d8:	4618      	mov	r0, r3
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40021000 	.word	0x40021000
 80035e0:	080056f0 	.word	0x080056f0

080035e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035e8:	f7ff ffd4 	bl	8003594 <HAL_RCC_GetHCLKFreq>
 80035ec:	4602      	mov	r2, r0
 80035ee:	4b05      	ldr	r3, [pc, #20]	@ (8003604 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	0adb      	lsrs	r3, r3, #11
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	4903      	ldr	r1, [pc, #12]	@ (8003608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035fa:	5ccb      	ldrb	r3, [r1, r3]
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40021000 	.word	0x40021000
 8003608:	080056f0 	.word	0x080056f0

0800360c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003618:	4b2c      	ldr	r3, [pc, #176]	@ (80036cc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800361a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003624:	f7ff f85c 	bl	80026e0 <HAL_PWREx_GetVoltageRange>
 8003628:	6138      	str	r0, [r7, #16]
 800362a:	e014      	b.n	8003656 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800362c:	4b27      	ldr	r3, [pc, #156]	@ (80036cc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800362e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003630:	4a26      	ldr	r2, [pc, #152]	@ (80036cc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003636:	6593      	str	r3, [r2, #88]	@ 0x58
 8003638:	4b24      	ldr	r3, [pc, #144]	@ (80036cc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800363a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003644:	f7ff f84c 	bl	80026e0 <HAL_PWREx_GetVoltageRange>
 8003648:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800364a:	4b20      	ldr	r3, [pc, #128]	@ (80036cc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800364c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364e:	4a1f      	ldr	r2, [pc, #124]	@ (80036cc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003650:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003654:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <RCC_SetFlashLatencyFromMSIRange+0x58>
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003662:	d10b      	bne.n	800367c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b80      	cmp	r3, #128	@ 0x80
 8003668:	d919      	bls.n	800369e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2ba0      	cmp	r3, #160	@ 0xa0
 800366e:	d902      	bls.n	8003676 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003670:	2302      	movs	r3, #2
 8003672:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003674:	e013      	b.n	800369e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003676:	2301      	movs	r3, #1
 8003678:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800367a:	e010      	b.n	800369e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b80      	cmp	r3, #128	@ 0x80
 8003680:	d902      	bls.n	8003688 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003682:	2303      	movs	r3, #3
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	e00a      	b.n	800369e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b80      	cmp	r3, #128	@ 0x80
 800368c:	d102      	bne.n	8003694 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800368e:	2302      	movs	r3, #2
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	e004      	b.n	800369e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b70      	cmp	r3, #112	@ 0x70
 8003698:	d101      	bne.n	800369e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800369a:	2301      	movs	r3, #1
 800369c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800369e:	4b0c      	ldr	r3, [pc, #48]	@ (80036d0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 020f 	bic.w	r2, r3, #15
 80036a6:	490a      	ldr	r1, [pc, #40]	@ (80036d0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80036ae:	4b08      	ldr	r3, [pc, #32]	@ (80036d0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e000      	b.n	80036c2 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40021000 	.word	0x40021000
 80036d0:	40022000 	.word	0x40022000

080036d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036da:	4b31      	ldr	r3, [pc, #196]	@ (80037a0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036e4:	4b2e      	ldr	r3, [pc, #184]	@ (80037a0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	091b      	lsrs	r3, r3, #4
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	3301      	adds	r3, #1
 80036f0:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d015      	beq.n	8003724 <RCC_GetSysClockFreqFromPLLSource+0x50>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d839      	bhi.n	8003772 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d01c      	beq.n	800373e <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d133      	bne.n	8003772 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800370a:	4a26      	ldr	r2, [pc, #152]	@ (80037a4 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003712:	4a23      	ldr	r2, [pc, #140]	@ (80037a0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003714:	68d2      	ldr	r2, [r2, #12]
 8003716:	0a12      	lsrs	r2, r2, #8
 8003718:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800371c:	fb02 f303 	mul.w	r3, r2, r3
 8003720:	613b      	str	r3, [r7, #16]
      break;
 8003722:	e029      	b.n	8003778 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003724:	4a20      	ldr	r2, [pc, #128]	@ (80037a8 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	fbb2 f3f3 	udiv	r3, r2, r3
 800372c:	4a1c      	ldr	r2, [pc, #112]	@ (80037a0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800372e:	68d2      	ldr	r2, [r2, #12]
 8003730:	0a12      	lsrs	r2, r2, #8
 8003732:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003736:	fb02 f303 	mul.w	r3, r2, r3
 800373a:	613b      	str	r3, [r7, #16]
      break;
 800373c:	e01c      	b.n	8003778 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800373e:	4b18      	ldr	r3, [pc, #96]	@ (80037a0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d107      	bne.n	800375a <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800374a:	4b15      	ldr	r3, [pc, #84]	@ (80037a0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800374c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003750:	0a1b      	lsrs	r3, r3, #8
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	e005      	b.n	8003766 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800375a:	4b11      	ldr	r3, [pc, #68]	@ (80037a0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	091b      	lsrs	r3, r3, #4
 8003760:	f003 030f 	and.w	r3, r3, #15
 8003764:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8003766:	4a11      	ldr	r2, [pc, #68]	@ (80037ac <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376e:	613b      	str	r3, [r7, #16]
        break;
 8003770:	e002      	b.n	8003778 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	613b      	str	r3, [r7, #16]
      break;
 8003776:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003778:	4b09      	ldr	r3, [pc, #36]	@ (80037a0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	0e5b      	lsrs	r3, r3, #25
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	3301      	adds	r3, #1
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003790:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003792:	683b      	ldr	r3, [r7, #0]
}
 8003794:	4618      	mov	r0, r3
 8003796:	371c      	adds	r7, #28
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	40021000 	.word	0x40021000
 80037a4:	00f42400 	.word	0x00f42400
 80037a8:	007a1200 	.word	0x007a1200
 80037ac:	080056f8 	.word	0x080056f8

080037b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b088      	sub	sp, #32
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037b8:	2300      	movs	r3, #0
 80037ba:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037bc:	2300      	movs	r3, #0
 80037be:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d040      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037d0:	2b80      	cmp	r3, #128	@ 0x80
 80037d2:	d02a      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80037d4:	2b80      	cmp	r3, #128	@ 0x80
 80037d6:	d825      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80037d8:	2b60      	cmp	r3, #96	@ 0x60
 80037da:	d026      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80037dc:	2b60      	cmp	r3, #96	@ 0x60
 80037de:	d821      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80037e0:	2b40      	cmp	r3, #64	@ 0x40
 80037e2:	d006      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80037e4:	2b40      	cmp	r3, #64	@ 0x40
 80037e6:	d81d      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d009      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	d010      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80037f0:	e018      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037f2:	4b8f      	ldr	r3, [pc, #572]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	4a8e      	ldr	r2, [pc, #568]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037fc:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80037fe:	e015      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3304      	adds	r3, #4
 8003804:	2100      	movs	r1, #0
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fb56 	bl	8003eb8 <RCCEx_PLLSAI1_Config>
 800380c:	4603      	mov	r3, r0
 800380e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003810:	e00c      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3320      	adds	r3, #32
 8003816:	2100      	movs	r1, #0
 8003818:	4618      	mov	r0, r3
 800381a:	f000 fc33 	bl	8004084 <RCCEx_PLLSAI2_Config>
 800381e:	4603      	mov	r3, r0
 8003820:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003822:	e003      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	77fb      	strb	r3, [r7, #31]
        break;
 8003828:	e000      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800382a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800382c:	7ffb      	ldrb	r3, [r7, #31]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10b      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003832:	4b7f      	ldr	r3, [pc, #508]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003834:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003838:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003840:	497b      	ldr	r1, [pc, #492]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003848:	e001      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384a:	7ffb      	ldrb	r3, [r7, #31]
 800384c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d047      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003862:	d030      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003864:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003868:	d82a      	bhi.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800386a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800386e:	d02a      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003870:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003874:	d824      	bhi.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003876:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800387a:	d008      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800387c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003880:	d81e      	bhi.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003886:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800388a:	d010      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800388c:	e018      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800388e:	4b68      	ldr	r3, [pc, #416]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	4a67      	ldr	r2, [pc, #412]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003898:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800389a:	e015      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3304      	adds	r3, #4
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fb08 	bl	8003eb8 <RCCEx_PLLSAI1_Config>
 80038a8:	4603      	mov	r3, r0
 80038aa:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80038ac:	e00c      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3320      	adds	r3, #32
 80038b2:	2100      	movs	r1, #0
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 fbe5 	bl	8004084 <RCCEx_PLLSAI2_Config>
 80038ba:	4603      	mov	r3, r0
 80038bc:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80038be:	e003      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	77fb      	strb	r3, [r7, #31]
        break;
 80038c4:	e000      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80038c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c8:	7ffb      	ldrb	r3, [r7, #31]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10b      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038ce:	4b58      	ldr	r3, [pc, #352]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038dc:	4954      	ldr	r1, [pc, #336]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80038e4:	e001      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e6:	7ffb      	ldrb	r3, [r7, #31]
 80038e8:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 80ab 	beq.w	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038f8:	2300      	movs	r3, #0
 80038fa:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038fc:	4b4c      	ldr	r3, [pc, #304]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10d      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003908:	4b49      	ldr	r3, [pc, #292]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800390a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800390c:	4a48      	ldr	r2, [pc, #288]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800390e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003912:	6593      	str	r3, [r2, #88]	@ 0x58
 8003914:	4b46      	ldr	r3, [pc, #280]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003920:	2301      	movs	r3, #1
 8003922:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003924:	4b43      	ldr	r3, [pc, #268]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a42      	ldr	r2, [pc, #264]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800392a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800392e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003930:	f7fe f8fe 	bl	8001b30 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003936:	e00f      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003938:	f7fe f8fa 	bl	8001b30 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d908      	bls.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003946:	4b3b      	ldr	r3, [pc, #236]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003956:	e006      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003958:	4b36      	ldr	r3, [pc, #216]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0e9      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003964:	e000      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8003966:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003968:	7ffb      	ldrb	r3, [r7, #31]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d164      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800396e:	4b30      	ldr	r3, [pc, #192]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003974:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003978:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d01f      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	429a      	cmp	r2, r3
 800398a:	d019      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800398c:	4b28      	ldr	r3, [pc, #160]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800398e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003992:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003996:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003998:	4b25      	ldr	r3, [pc, #148]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800399e:	4a24      	ldr	r2, [pc, #144]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039a8:	4b21      	ldr	r3, [pc, #132]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ae:	4a20      	ldr	r2, [pc, #128]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d01f      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ca:	f7fe f8b1 	bl	8001b30 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039d0:	e012      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d2:	f7fe f8ad 	bl	8001b30 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d909      	bls.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039e4:	4b12      	ldr	r3, [pc, #72]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10a      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80039f6:	e007      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0e5      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003a06:	e000      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003a08:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003a0a:	7ffb      	ldrb	r3, [r7, #31]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10c      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a10:	4b07      	ldr	r3, [pc, #28]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a16:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a20:	4903      	ldr	r1, [pc, #12]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003a28:	e008      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a2a:	7ffb      	ldrb	r3, [r7, #31]
 8003a2c:	77bb      	strb	r3, [r7, #30]
 8003a2e:	e005      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003a30:	40021000 	.word	0x40021000
 8003a34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a38:	7ffb      	ldrb	r3, [r7, #31]
 8003a3a:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a3c:	7dfb      	ldrb	r3, [r7, #23]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d105      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a42:	4b9c      	ldr	r3, [pc, #624]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a46:	4a9b      	ldr	r2, [pc, #620]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a4c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a5a:	4b96      	ldr	r3, [pc, #600]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a60:	f023 0203 	bic.w	r2, r3, #3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a68:	4992      	ldr	r1, [pc, #584]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a7c:	4b8d      	ldr	r3, [pc, #564]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a82:	f023 020c 	bic.w	r2, r3, #12
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a8a:	498a      	ldr	r1, [pc, #552]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a9e:	4b85      	ldr	r3, [pc, #532]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aac:	4981      	ldr	r1, [pc, #516]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00a      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ac0:	4b7c      	ldr	r3, [pc, #496]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ace:	4979      	ldr	r1, [pc, #484]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0310 	and.w	r3, r3, #16
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ae2:	4b74      	ldr	r3, [pc, #464]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af0:	4970      	ldr	r1, [pc, #448]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0320 	and.w	r3, r3, #32
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b04:	4b6b      	ldr	r3, [pc, #428]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b0a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b12:	4968      	ldr	r1, [pc, #416]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b26:	4b63      	ldr	r3, [pc, #396]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b34:	495f      	ldr	r1, [pc, #380]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b48:	4b5a      	ldr	r3, [pc, #360]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b56:	4957      	ldr	r1, [pc, #348]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003b6a:	4b52      	ldr	r3, [pc, #328]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b70:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b78:	494e      	ldr	r1, [pc, #312]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d031      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b94:	d00e      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003b96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b9a:	d814      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d015      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003ba0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ba4:	d10f      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ba6:	4b43      	ldr	r3, [pc, #268]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	4a42      	ldr	r2, [pc, #264]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bb0:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003bb2:	e00c      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 f97c 	bl	8003eb8 <RCCEx_PLLSAI1_Config>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003bc4:	e003      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	77fb      	strb	r3, [r7, #31]
        break;
 8003bca:	e000      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8003bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bce:	7ffb      	ldrb	r3, [r7, #31]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10b      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003bd4:	4b37      	ldr	r3, [pc, #220]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bda:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003be2:	4934      	ldr	r1, [pc, #208]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003bea:	e001      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bec:	7ffb      	ldrb	r3, [r7, #31]
 8003bee:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c02:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c0a:	492a      	ldr	r1, [pc, #168]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c1e:	4b25      	ldr	r3, [pc, #148]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c24:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c2c:	4921      	ldr	r1, [pc, #132]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00a      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c40:	4b1c      	ldr	r3, [pc, #112]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c46:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4e:	4919      	ldr	r1, [pc, #100]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c62:	4b14      	ldr	r3, [pc, #80]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c68:	f023 0203 	bic.w	r2, r3, #3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c70:	4910      	ldr	r1, [pc, #64]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d02b      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c84:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c92:	4908      	ldr	r1, [pc, #32]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ca2:	d109      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ca4:	4b03      	ldr	r3, [pc, #12]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	4a02      	ldr	r2, [pc, #8]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003caa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cae:	60d3      	str	r3, [r2, #12]
 8003cb0:	e014      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003cb2:	bf00      	nop
 8003cb4:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cbc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cc0:	d10c      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 f8f5 	bl	8003eb8 <RCCEx_PLLSAI1_Config>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8003cd2:	7ffb      	ldrb	r3, [r7, #31]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8003cd8:	7ffb      	ldrb	r3, [r7, #31]
 8003cda:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d04a      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cf0:	d108      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8003cf2:	4b70      	ldr	r3, [pc, #448]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003cf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003cf8:	4a6e      	ldr	r2, [pc, #440]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003cfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cfe:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003d02:	e012      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003d04:	4b6b      	ldr	r3, [pc, #428]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d12:	4968      	ldr	r1, [pc, #416]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d1a:	4b66      	ldr	r3, [pc, #408]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d20:	4a64      	ldr	r2, [pc, #400]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d26:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d32:	d10d      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3304      	adds	r3, #4
 8003d38:	2101      	movs	r1, #1
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f8bc 	bl	8003eb8 <RCCEx_PLLSAI1_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003d44:	7ffb      	ldrb	r3, [r7, #31]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d019      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8003d4a:	7ffb      	ldrb	r3, [r7, #31]
 8003d4c:	77bb      	strb	r3, [r7, #30]
 8003d4e:	e016      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d58:	d106      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d5a:	4b56      	ldr	r3, [pc, #344]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	4a55      	ldr	r2, [pc, #340]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d60:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d64:	60d3      	str	r3, [r2, #12]
 8003d66:	e00a      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d70:	d105      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d72:	4b50      	ldr	r3, [pc, #320]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	4a4f      	ldr	r2, [pc, #316]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d7c:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d028      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d8a:	4b4a      	ldr	r3, [pc, #296]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d90:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d98:	4946      	ldr	r1, [pc, #280]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003da4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003da8:	d106      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003daa:	4b42      	ldr	r3, [pc, #264]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	4a41      	ldr	r2, [pc, #260]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003db0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003db4:	60d3      	str	r3, [r2, #12]
 8003db6:	e011      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dbc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dc0:	d10c      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 f875 	bl	8003eb8 <RCCEx_PLLSAI1_Config>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003dd2:	7ffb      	ldrb	r3, [r7, #31]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8003dd8:	7ffb      	ldrb	r3, [r7, #31]
 8003dda:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d01e      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003de8:	4b32      	ldr	r3, [pc, #200]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003df8:	492e      	ldr	r1, [pc, #184]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e0a:	d10c      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	2102      	movs	r1, #2
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 f850 	bl	8003eb8 <RCCEx_PLLSAI1_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003e1c:	7ffb      	ldrb	r3, [r7, #31]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8003e22:	7ffb      	ldrb	r3, [r7, #31]
 8003e24:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00b      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e32:	4b20      	ldr	r3, [pc, #128]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e38:	f023 0204 	bic.w	r2, r3, #4
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e42:	491c      	ldr	r1, [pc, #112]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00b      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003e56:	4b17      	ldr	r3, [pc, #92]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e5c:	f023 0218 	bic.w	r2, r3, #24
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e66:	4913      	ldr	r1, [pc, #76]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d017      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e80:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e8a:	490a      	ldr	r1, [pc, #40]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e9c:	d105      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e9e:	4b05      	ldr	r3, [pc, #20]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	4a04      	ldr	r2, [pc, #16]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ea4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ea8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003eaa:	7fbb      	ldrb	r3, [r7, #30]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3720      	adds	r7, #32
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40021000 	.word	0x40021000

08003eb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d018      	beq.n	8003f00 <RCCEx_PLLSAI1_Config+0x48>
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	d81f      	bhi.n	8003f12 <RCCEx_PLLSAI1_Config+0x5a>
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d002      	beq.n	8003edc <RCCEx_PLLSAI1_Config+0x24>
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d009      	beq.n	8003eee <RCCEx_PLLSAI1_Config+0x36>
 8003eda:	e01a      	b.n	8003f12 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003edc:	4b65      	ldr	r3, [pc, #404]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d117      	bne.n	8003f18 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eec:	e014      	b.n	8003f18 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003eee:	4b61      	ldr	r3, [pc, #388]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d110      	bne.n	8003f1c <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003efe:	e00d      	b.n	8003f1c <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8003f00:	4b5c      	ldr	r3, [pc, #368]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d109      	bne.n	8003f20 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f10:	e006      	b.n	8003f20 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	73fb      	strb	r3, [r7, #15]
      break;
 8003f16:	e004      	b.n	8003f22 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8003f18:	bf00      	nop
 8003f1a:	e002      	b.n	8003f22 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8003f1c:	bf00      	nop
 8003f1e:	e000      	b.n	8003f22 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8003f20:	bf00      	nop
  }

  if (status == HAL_OK)
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f040 809f 	bne.w	8004068 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f2a:	4b52      	ldr	r3, [pc, #328]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a51      	ldr	r2, [pc, #324]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003f30:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f36:	f7fd fdfb 	bl	8001b30 <HAL_GetTick>
 8003f3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f3c:	e00f      	b.n	8003f5e <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f3e:	f7fd fdf7 	bl	8001b30 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d908      	bls.n	8003f5e <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f4c:	4b49      	ldr	r3, [pc, #292]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d009      	beq.n	8003f6c <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f5c:	e006      	b.n	8003f6c <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f5e:	4b45      	ldr	r3, [pc, #276]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1e9      	bne.n	8003f3e <RCCEx_PLLSAI1_Config+0x86>
 8003f6a:	e000      	b.n	8003f6e <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8003f6c:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d179      	bne.n	8004068 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d116      	bne.n	8003fa8 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003f7c:	691a      	ldr	r2, [r3, #16]
 8003f7e:	4b3e      	ldr	r3, [pc, #248]	@ (8004078 <RCCEx_PLLSAI1_Config+0x1c0>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6892      	ldr	r2, [r2, #8]
 8003f86:	0211      	lsls	r1, r2, #8
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	68d2      	ldr	r2, [r2, #12]
 8003f8c:	06d2      	lsls	r2, r2, #27
 8003f8e:	4311      	orrs	r1, r2
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6852      	ldr	r2, [r2, #4]
 8003f94:	3a01      	subs	r2, #1
 8003f96:	0112      	lsls	r2, r2, #4
 8003f98:	4311      	orrs	r1, r2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	4934      	ldr	r1, [pc, #208]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	610b      	str	r3, [r1, #16]
 8003fa6:	e033      	b.n	8004010 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d118      	bne.n	8003fe0 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fae:	4b31      	ldr	r3, [pc, #196]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003fb0:	691a      	ldr	r2, [r3, #16]
 8003fb2:	4b32      	ldr	r3, [pc, #200]	@ (800407c <RCCEx_PLLSAI1_Config+0x1c4>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6892      	ldr	r2, [r2, #8]
 8003fba:	0211      	lsls	r1, r2, #8
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6912      	ldr	r2, [r2, #16]
 8003fc0:	0852      	lsrs	r2, r2, #1
 8003fc2:	3a01      	subs	r2, #1
 8003fc4:	0552      	lsls	r2, r2, #21
 8003fc6:	4311      	orrs	r1, r2
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6852      	ldr	r2, [r2, #4]
 8003fcc:	3a01      	subs	r2, #1
 8003fce:	0112      	lsls	r2, r2, #4
 8003fd0:	4311      	orrs	r1, r2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6812      	ldr	r2, [r2, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	4926      	ldr	r1, [pc, #152]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	610b      	str	r3, [r1, #16]
 8003fde:	e017      	b.n	8004010 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fe0:	4b24      	ldr	r3, [pc, #144]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	4b26      	ldr	r3, [pc, #152]	@ (8004080 <RCCEx_PLLSAI1_Config+0x1c8>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6892      	ldr	r2, [r2, #8]
 8003fec:	0211      	lsls	r1, r2, #8
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6952      	ldr	r2, [r2, #20]
 8003ff2:	0852      	lsrs	r2, r2, #1
 8003ff4:	3a01      	subs	r2, #1
 8003ff6:	0652      	lsls	r2, r2, #25
 8003ff8:	4311      	orrs	r1, r2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6852      	ldr	r2, [r2, #4]
 8003ffe:	3a01      	subs	r2, #1
 8004000:	0112      	lsls	r2, r2, #4
 8004002:	4311      	orrs	r1, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6812      	ldr	r2, [r2, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	491a      	ldr	r1, [pc, #104]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1bc>)
 800400c:	4313      	orrs	r3, r2
 800400e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004010:	4b18      	ldr	r3, [pc, #96]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a17      	ldr	r2, [pc, #92]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004016:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800401a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800401c:	f7fd fd88 	bl	8001b30 <HAL_GetTick>
 8004020:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004022:	e00f      	b.n	8004044 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004024:	f7fd fd84 	bl	8001b30 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d908      	bls.n	8004044 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004032:	4b10      	ldr	r3, [pc, #64]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004042:	e006      	b.n	8004052 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004044:	4b0b      	ldr	r3, [pc, #44]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d0e9      	beq.n	8004024 <RCCEx_PLLSAI1_Config+0x16c>
 8004050:	e000      	b.n	8004054 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8004052:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004054:	7bfb      	ldrb	r3, [r7, #15]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800405a:	4b06      	ldr	r3, [pc, #24]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1bc>)
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	4904      	ldr	r1, [pc, #16]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004064:	4313      	orrs	r3, r2
 8004066:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004068:	7bfb      	ldrb	r3, [r7, #15]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40021000 	.word	0x40021000
 8004078:	07ff800c 	.word	0x07ff800c
 800407c:	ff9f800c 	.word	0xff9f800c
 8004080:	f9ff800c 	.word	0xf9ff800c

08004084 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b03      	cmp	r3, #3
 8004098:	d018      	beq.n	80040cc <RCCEx_PLLSAI2_Config+0x48>
 800409a:	2b03      	cmp	r3, #3
 800409c:	d81f      	bhi.n	80040de <RCCEx_PLLSAI2_Config+0x5a>
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d002      	beq.n	80040a8 <RCCEx_PLLSAI2_Config+0x24>
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d009      	beq.n	80040ba <RCCEx_PLLSAI2_Config+0x36>
 80040a6:	e01a      	b.n	80040de <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040a8:	4b4a      	ldr	r3, [pc, #296]	@ (80041d4 <RCCEx_PLLSAI2_Config+0x150>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d117      	bne.n	80040e4 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040b8:	e014      	b.n	80040e4 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040ba:	4b46      	ldr	r3, [pc, #280]	@ (80041d4 <RCCEx_PLLSAI2_Config+0x150>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d110      	bne.n	80040e8 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ca:	e00d      	b.n	80040e8 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80040cc:	4b41      	ldr	r3, [pc, #260]	@ (80041d4 <RCCEx_PLLSAI2_Config+0x150>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d109      	bne.n	80040ec <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040dc:	e006      	b.n	80040ec <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	73fb      	strb	r3, [r7, #15]
      break;
 80040e2:	e004      	b.n	80040ee <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80040e4:	bf00      	nop
 80040e6:	e002      	b.n	80040ee <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80040e8:	bf00      	nop
 80040ea:	e000      	b.n	80040ee <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80040ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d169      	bne.n	80041c8 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80040f4:	4b37      	ldr	r3, [pc, #220]	@ (80041d4 <RCCEx_PLLSAI2_Config+0x150>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a36      	ldr	r2, [pc, #216]	@ (80041d4 <RCCEx_PLLSAI2_Config+0x150>)
 80040fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004100:	f7fd fd16 	bl	8001b30 <HAL_GetTick>
 8004104:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004106:	e00f      	b.n	8004128 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004108:	f7fd fd12 	bl	8001b30 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d908      	bls.n	8004128 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004116:	4b2f      	ldr	r3, [pc, #188]	@ (80041d4 <RCCEx_PLLSAI2_Config+0x150>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d009      	beq.n	8004136 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004126:	e006      	b.n	8004136 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004128:	4b2a      	ldr	r3, [pc, #168]	@ (80041d4 <RCCEx_PLLSAI2_Config+0x150>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1e9      	bne.n	8004108 <RCCEx_PLLSAI2_Config+0x84>
 8004134:	e000      	b.n	8004138 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8004136:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d144      	bne.n	80041c8 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d115      	bne.n	8004170 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004144:	4b23      	ldr	r3, [pc, #140]	@ (80041d4 <RCCEx_PLLSAI2_Config+0x150>)
 8004146:	695a      	ldr	r2, [r3, #20]
 8004148:	4b23      	ldr	r3, [pc, #140]	@ (80041d8 <RCCEx_PLLSAI2_Config+0x154>)
 800414a:	4013      	ands	r3, r2
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6892      	ldr	r2, [r2, #8]
 8004150:	0211      	lsls	r1, r2, #8
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	68d2      	ldr	r2, [r2, #12]
 8004156:	06d2      	lsls	r2, r2, #27
 8004158:	4311      	orrs	r1, r2
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6852      	ldr	r2, [r2, #4]
 800415e:	3a01      	subs	r2, #1
 8004160:	0112      	lsls	r2, r2, #4
 8004162:	4311      	orrs	r1, r2
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	491a      	ldr	r1, [pc, #104]	@ (80041d4 <RCCEx_PLLSAI2_Config+0x150>)
 800416c:	4313      	orrs	r3, r2
 800416e:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004170:	4b18      	ldr	r3, [pc, #96]	@ (80041d4 <RCCEx_PLLSAI2_Config+0x150>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a17      	ldr	r2, [pc, #92]	@ (80041d4 <RCCEx_PLLSAI2_Config+0x150>)
 8004176:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800417a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417c:	f7fd fcd8 	bl	8001b30 <HAL_GetTick>
 8004180:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004182:	e00f      	b.n	80041a4 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004184:	f7fd fcd4 	bl	8001b30 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d908      	bls.n	80041a4 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004192:	4b10      	ldr	r3, [pc, #64]	@ (80041d4 <RCCEx_PLLSAI2_Config+0x150>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d109      	bne.n	80041b2 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80041a2:	e006      	b.n	80041b2 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041a4:	4b0b      	ldr	r3, [pc, #44]	@ (80041d4 <RCCEx_PLLSAI2_Config+0x150>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0e9      	beq.n	8004184 <RCCEx_PLLSAI2_Config+0x100>
 80041b0:	e000      	b.n	80041b4 <RCCEx_PLLSAI2_Config+0x130>
          break;
 80041b2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80041ba:	4b06      	ldr	r3, [pc, #24]	@ (80041d4 <RCCEx_PLLSAI2_Config+0x150>)
 80041bc:	695a      	ldr	r2, [r3, #20]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	4904      	ldr	r1, [pc, #16]	@ (80041d4 <RCCEx_PLLSAI2_Config+0x150>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40021000 	.word	0x40021000
 80041d8:	07ff800c 	.word	0x07ff800c

080041dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e042      	b.n	8004274 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d106      	bne.n	8004206 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7fc fc33 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2224      	movs	r2, #36	@ 0x24
 800420a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0201 	bic.w	r2, r2, #1
 800421c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fb46 	bl	80048b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f843 	bl	80042b8 <UART_SetConfig>
 8004232:	4603      	mov	r3, r0
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e01b      	b.n	8004274 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800424a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800425a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0201 	orr.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fbc5 	bl	80049fc <UART_CheckIdleState>
 8004272:	4603      	mov	r3, r0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042bc:	b08c      	sub	sp, #48	@ 0x30
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	431a      	orrs	r2, r3
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	431a      	orrs	r2, r3
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	4313      	orrs	r3, r2
 80042de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	4baa      	ldr	r3, [pc, #680]	@ (8004590 <UART_SetConfig+0x2d8>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	6812      	ldr	r2, [r2, #0]
 80042ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042f0:	430b      	orrs	r3, r1
 80042f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a9f      	ldr	r2, [pc, #636]	@ (8004594 <UART_SetConfig+0x2dc>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d004      	beq.n	8004324 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004320:	4313      	orrs	r3, r2
 8004322:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800432e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	6812      	ldr	r2, [r2, #0]
 8004336:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004338:	430b      	orrs	r3, r1
 800433a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004342:	f023 010f 	bic.w	r1, r3, #15
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a90      	ldr	r2, [pc, #576]	@ (8004598 <UART_SetConfig+0x2e0>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d125      	bne.n	80043a8 <UART_SetConfig+0xf0>
 800435c:	4b8f      	ldr	r3, [pc, #572]	@ (800459c <UART_SetConfig+0x2e4>)
 800435e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b03      	cmp	r3, #3
 8004368:	d81a      	bhi.n	80043a0 <UART_SetConfig+0xe8>
 800436a:	a201      	add	r2, pc, #4	@ (adr r2, 8004370 <UART_SetConfig+0xb8>)
 800436c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004370:	08004381 	.word	0x08004381
 8004374:	08004391 	.word	0x08004391
 8004378:	08004389 	.word	0x08004389
 800437c:	08004399 	.word	0x08004399
 8004380:	2301      	movs	r3, #1
 8004382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004386:	e116      	b.n	80045b6 <UART_SetConfig+0x2fe>
 8004388:	2302      	movs	r3, #2
 800438a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800438e:	e112      	b.n	80045b6 <UART_SetConfig+0x2fe>
 8004390:	2304      	movs	r3, #4
 8004392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004396:	e10e      	b.n	80045b6 <UART_SetConfig+0x2fe>
 8004398:	2308      	movs	r3, #8
 800439a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800439e:	e10a      	b.n	80045b6 <UART_SetConfig+0x2fe>
 80043a0:	2310      	movs	r3, #16
 80043a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043a6:	e106      	b.n	80045b6 <UART_SetConfig+0x2fe>
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a7c      	ldr	r2, [pc, #496]	@ (80045a0 <UART_SetConfig+0x2e8>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d138      	bne.n	8004424 <UART_SetConfig+0x16c>
 80043b2:	4b7a      	ldr	r3, [pc, #488]	@ (800459c <UART_SetConfig+0x2e4>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b8:	f003 030c 	and.w	r3, r3, #12
 80043bc:	2b0c      	cmp	r3, #12
 80043be:	d82d      	bhi.n	800441c <UART_SetConfig+0x164>
 80043c0:	a201      	add	r2, pc, #4	@ (adr r2, 80043c8 <UART_SetConfig+0x110>)
 80043c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c6:	bf00      	nop
 80043c8:	080043fd 	.word	0x080043fd
 80043cc:	0800441d 	.word	0x0800441d
 80043d0:	0800441d 	.word	0x0800441d
 80043d4:	0800441d 	.word	0x0800441d
 80043d8:	0800440d 	.word	0x0800440d
 80043dc:	0800441d 	.word	0x0800441d
 80043e0:	0800441d 	.word	0x0800441d
 80043e4:	0800441d 	.word	0x0800441d
 80043e8:	08004405 	.word	0x08004405
 80043ec:	0800441d 	.word	0x0800441d
 80043f0:	0800441d 	.word	0x0800441d
 80043f4:	0800441d 	.word	0x0800441d
 80043f8:	08004415 	.word	0x08004415
 80043fc:	2300      	movs	r3, #0
 80043fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004402:	e0d8      	b.n	80045b6 <UART_SetConfig+0x2fe>
 8004404:	2302      	movs	r3, #2
 8004406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800440a:	e0d4      	b.n	80045b6 <UART_SetConfig+0x2fe>
 800440c:	2304      	movs	r3, #4
 800440e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004412:	e0d0      	b.n	80045b6 <UART_SetConfig+0x2fe>
 8004414:	2308      	movs	r3, #8
 8004416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800441a:	e0cc      	b.n	80045b6 <UART_SetConfig+0x2fe>
 800441c:	2310      	movs	r3, #16
 800441e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004422:	e0c8      	b.n	80045b6 <UART_SetConfig+0x2fe>
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a5e      	ldr	r2, [pc, #376]	@ (80045a4 <UART_SetConfig+0x2ec>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d125      	bne.n	800447a <UART_SetConfig+0x1c2>
 800442e:	4b5b      	ldr	r3, [pc, #364]	@ (800459c <UART_SetConfig+0x2e4>)
 8004430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004434:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004438:	2b30      	cmp	r3, #48	@ 0x30
 800443a:	d016      	beq.n	800446a <UART_SetConfig+0x1b2>
 800443c:	2b30      	cmp	r3, #48	@ 0x30
 800443e:	d818      	bhi.n	8004472 <UART_SetConfig+0x1ba>
 8004440:	2b20      	cmp	r3, #32
 8004442:	d00a      	beq.n	800445a <UART_SetConfig+0x1a2>
 8004444:	2b20      	cmp	r3, #32
 8004446:	d814      	bhi.n	8004472 <UART_SetConfig+0x1ba>
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <UART_SetConfig+0x19a>
 800444c:	2b10      	cmp	r3, #16
 800444e:	d008      	beq.n	8004462 <UART_SetConfig+0x1aa>
 8004450:	e00f      	b.n	8004472 <UART_SetConfig+0x1ba>
 8004452:	2300      	movs	r3, #0
 8004454:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004458:	e0ad      	b.n	80045b6 <UART_SetConfig+0x2fe>
 800445a:	2302      	movs	r3, #2
 800445c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004460:	e0a9      	b.n	80045b6 <UART_SetConfig+0x2fe>
 8004462:	2304      	movs	r3, #4
 8004464:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004468:	e0a5      	b.n	80045b6 <UART_SetConfig+0x2fe>
 800446a:	2308      	movs	r3, #8
 800446c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004470:	e0a1      	b.n	80045b6 <UART_SetConfig+0x2fe>
 8004472:	2310      	movs	r3, #16
 8004474:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004478:	e09d      	b.n	80045b6 <UART_SetConfig+0x2fe>
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a4a      	ldr	r2, [pc, #296]	@ (80045a8 <UART_SetConfig+0x2f0>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d125      	bne.n	80044d0 <UART_SetConfig+0x218>
 8004484:	4b45      	ldr	r3, [pc, #276]	@ (800459c <UART_SetConfig+0x2e4>)
 8004486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800448a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800448e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004490:	d016      	beq.n	80044c0 <UART_SetConfig+0x208>
 8004492:	2bc0      	cmp	r3, #192	@ 0xc0
 8004494:	d818      	bhi.n	80044c8 <UART_SetConfig+0x210>
 8004496:	2b80      	cmp	r3, #128	@ 0x80
 8004498:	d00a      	beq.n	80044b0 <UART_SetConfig+0x1f8>
 800449a:	2b80      	cmp	r3, #128	@ 0x80
 800449c:	d814      	bhi.n	80044c8 <UART_SetConfig+0x210>
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <UART_SetConfig+0x1f0>
 80044a2:	2b40      	cmp	r3, #64	@ 0x40
 80044a4:	d008      	beq.n	80044b8 <UART_SetConfig+0x200>
 80044a6:	e00f      	b.n	80044c8 <UART_SetConfig+0x210>
 80044a8:	2300      	movs	r3, #0
 80044aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ae:	e082      	b.n	80045b6 <UART_SetConfig+0x2fe>
 80044b0:	2302      	movs	r3, #2
 80044b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044b6:	e07e      	b.n	80045b6 <UART_SetConfig+0x2fe>
 80044b8:	2304      	movs	r3, #4
 80044ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044be:	e07a      	b.n	80045b6 <UART_SetConfig+0x2fe>
 80044c0:	2308      	movs	r3, #8
 80044c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044c6:	e076      	b.n	80045b6 <UART_SetConfig+0x2fe>
 80044c8:	2310      	movs	r3, #16
 80044ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ce:	e072      	b.n	80045b6 <UART_SetConfig+0x2fe>
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a35      	ldr	r2, [pc, #212]	@ (80045ac <UART_SetConfig+0x2f4>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d12a      	bne.n	8004530 <UART_SetConfig+0x278>
 80044da:	4b30      	ldr	r3, [pc, #192]	@ (800459c <UART_SetConfig+0x2e4>)
 80044dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044e8:	d01a      	beq.n	8004520 <UART_SetConfig+0x268>
 80044ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044ee:	d81b      	bhi.n	8004528 <UART_SetConfig+0x270>
 80044f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044f4:	d00c      	beq.n	8004510 <UART_SetConfig+0x258>
 80044f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044fa:	d815      	bhi.n	8004528 <UART_SetConfig+0x270>
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <UART_SetConfig+0x250>
 8004500:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004504:	d008      	beq.n	8004518 <UART_SetConfig+0x260>
 8004506:	e00f      	b.n	8004528 <UART_SetConfig+0x270>
 8004508:	2300      	movs	r3, #0
 800450a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800450e:	e052      	b.n	80045b6 <UART_SetConfig+0x2fe>
 8004510:	2302      	movs	r3, #2
 8004512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004516:	e04e      	b.n	80045b6 <UART_SetConfig+0x2fe>
 8004518:	2304      	movs	r3, #4
 800451a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800451e:	e04a      	b.n	80045b6 <UART_SetConfig+0x2fe>
 8004520:	2308      	movs	r3, #8
 8004522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004526:	e046      	b.n	80045b6 <UART_SetConfig+0x2fe>
 8004528:	2310      	movs	r3, #16
 800452a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800452e:	e042      	b.n	80045b6 <UART_SetConfig+0x2fe>
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a17      	ldr	r2, [pc, #92]	@ (8004594 <UART_SetConfig+0x2dc>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d13a      	bne.n	80045b0 <UART_SetConfig+0x2f8>
 800453a:	4b18      	ldr	r3, [pc, #96]	@ (800459c <UART_SetConfig+0x2e4>)
 800453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004540:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004544:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004548:	d01a      	beq.n	8004580 <UART_SetConfig+0x2c8>
 800454a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800454e:	d81b      	bhi.n	8004588 <UART_SetConfig+0x2d0>
 8004550:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004554:	d00c      	beq.n	8004570 <UART_SetConfig+0x2b8>
 8004556:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800455a:	d815      	bhi.n	8004588 <UART_SetConfig+0x2d0>
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <UART_SetConfig+0x2b0>
 8004560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004564:	d008      	beq.n	8004578 <UART_SetConfig+0x2c0>
 8004566:	e00f      	b.n	8004588 <UART_SetConfig+0x2d0>
 8004568:	2300      	movs	r3, #0
 800456a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800456e:	e022      	b.n	80045b6 <UART_SetConfig+0x2fe>
 8004570:	2302      	movs	r3, #2
 8004572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004576:	e01e      	b.n	80045b6 <UART_SetConfig+0x2fe>
 8004578:	2304      	movs	r3, #4
 800457a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800457e:	e01a      	b.n	80045b6 <UART_SetConfig+0x2fe>
 8004580:	2308      	movs	r3, #8
 8004582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004586:	e016      	b.n	80045b6 <UART_SetConfig+0x2fe>
 8004588:	2310      	movs	r3, #16
 800458a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800458e:	e012      	b.n	80045b6 <UART_SetConfig+0x2fe>
 8004590:	cfff69f3 	.word	0xcfff69f3
 8004594:	40008000 	.word	0x40008000
 8004598:	40013800 	.word	0x40013800
 800459c:	40021000 	.word	0x40021000
 80045a0:	40004400 	.word	0x40004400
 80045a4:	40004800 	.word	0x40004800
 80045a8:	40004c00 	.word	0x40004c00
 80045ac:	40005000 	.word	0x40005000
 80045b0:	2310      	movs	r3, #16
 80045b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4ab0      	ldr	r2, [pc, #704]	@ (800487c <UART_SetConfig+0x5c4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	f040 809b 	bne.w	80046f8 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80045c6:	2b08      	cmp	r3, #8
 80045c8:	d827      	bhi.n	800461a <UART_SetConfig+0x362>
 80045ca:	a201      	add	r2, pc, #4	@ (adr r2, 80045d0 <UART_SetConfig+0x318>)
 80045cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d0:	080045f5 	.word	0x080045f5
 80045d4:	080045fd 	.word	0x080045fd
 80045d8:	08004605 	.word	0x08004605
 80045dc:	0800461b 	.word	0x0800461b
 80045e0:	0800460b 	.word	0x0800460b
 80045e4:	0800461b 	.word	0x0800461b
 80045e8:	0800461b 	.word	0x0800461b
 80045ec:	0800461b 	.word	0x0800461b
 80045f0:	08004613 	.word	0x08004613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045f4:	f7fe ffe2 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 80045f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045fa:	e014      	b.n	8004626 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045fc:	f7fe fff2 	bl	80035e4 <HAL_RCC_GetPCLK2Freq>
 8004600:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004602:	e010      	b.n	8004626 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004604:	4b9e      	ldr	r3, [pc, #632]	@ (8004880 <UART_SetConfig+0x5c8>)
 8004606:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004608:	e00d      	b.n	8004626 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800460a:	f7fe ff25 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 800460e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004610:	e009      	b.n	8004626 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004616:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004618:	e005      	b.n	8004626 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004624:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 8130 	beq.w	800488e <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004632:	4a94      	ldr	r2, [pc, #592]	@ (8004884 <UART_SetConfig+0x5cc>)
 8004634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004638:	461a      	mov	r2, r3
 800463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004640:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	4613      	mov	r3, r2
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	4413      	add	r3, r2
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	429a      	cmp	r2, r3
 8004650:	d305      	bcc.n	800465e <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	429a      	cmp	r2, r3
 800465c:	d903      	bls.n	8004666 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004664:	e113      	b.n	800488e <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004668:	2200      	movs	r2, #0
 800466a:	60bb      	str	r3, [r7, #8]
 800466c:	60fa      	str	r2, [r7, #12]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004672:	4a84      	ldr	r2, [pc, #528]	@ (8004884 <UART_SetConfig+0x5cc>)
 8004674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004678:	b29b      	uxth	r3, r3
 800467a:	2200      	movs	r2, #0
 800467c:	603b      	str	r3, [r7, #0]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004684:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004688:	f7fb fdd4 	bl	8000234 <__aeabi_uldivmod>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4610      	mov	r0, r2
 8004692:	4619      	mov	r1, r3
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	020b      	lsls	r3, r1, #8
 800469e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80046a2:	0202      	lsls	r2, r0, #8
 80046a4:	6979      	ldr	r1, [r7, #20]
 80046a6:	6849      	ldr	r1, [r1, #4]
 80046a8:	0849      	lsrs	r1, r1, #1
 80046aa:	2000      	movs	r0, #0
 80046ac:	460c      	mov	r4, r1
 80046ae:	4605      	mov	r5, r0
 80046b0:	eb12 0804 	adds.w	r8, r2, r4
 80046b4:	eb43 0905 	adc.w	r9, r3, r5
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	469a      	mov	sl, r3
 80046c0:	4693      	mov	fp, r2
 80046c2:	4652      	mov	r2, sl
 80046c4:	465b      	mov	r3, fp
 80046c6:	4640      	mov	r0, r8
 80046c8:	4649      	mov	r1, r9
 80046ca:	f7fb fdb3 	bl	8000234 <__aeabi_uldivmod>
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	4613      	mov	r3, r2
 80046d4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046dc:	d308      	bcc.n	80046f0 <UART_SetConfig+0x438>
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046e4:	d204      	bcs.n	80046f0 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6a3a      	ldr	r2, [r7, #32]
 80046ec:	60da      	str	r2, [r3, #12]
 80046ee:	e0ce      	b.n	800488e <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80046f6:	e0ca      	b.n	800488e <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004700:	d166      	bne.n	80047d0 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8004702:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004706:	2b08      	cmp	r3, #8
 8004708:	d827      	bhi.n	800475a <UART_SetConfig+0x4a2>
 800470a:	a201      	add	r2, pc, #4	@ (adr r2, 8004710 <UART_SetConfig+0x458>)
 800470c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004710:	08004735 	.word	0x08004735
 8004714:	0800473d 	.word	0x0800473d
 8004718:	08004745 	.word	0x08004745
 800471c:	0800475b 	.word	0x0800475b
 8004720:	0800474b 	.word	0x0800474b
 8004724:	0800475b 	.word	0x0800475b
 8004728:	0800475b 	.word	0x0800475b
 800472c:	0800475b 	.word	0x0800475b
 8004730:	08004753 	.word	0x08004753
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004734:	f7fe ff42 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 8004738:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800473a:	e014      	b.n	8004766 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800473c:	f7fe ff52 	bl	80035e4 <HAL_RCC_GetPCLK2Freq>
 8004740:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004742:	e010      	b.n	8004766 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004744:	4b4e      	ldr	r3, [pc, #312]	@ (8004880 <UART_SetConfig+0x5c8>)
 8004746:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004748:	e00d      	b.n	8004766 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800474a:	f7fe fe85 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 800474e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004750:	e009      	b.n	8004766 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004756:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004758:	e005      	b.n	8004766 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004764:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 8090 	beq.w	800488e <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004772:	4a44      	ldr	r2, [pc, #272]	@ (8004884 <UART_SetConfig+0x5cc>)
 8004774:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004778:	461a      	mov	r2, r3
 800477a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004780:	005a      	lsls	r2, r3, #1
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	085b      	lsrs	r3, r3, #1
 8004788:	441a      	add	r2, r3
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004792:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	2b0f      	cmp	r3, #15
 8004798:	d916      	bls.n	80047c8 <UART_SetConfig+0x510>
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a0:	d212      	bcs.n	80047c8 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	f023 030f 	bic.w	r3, r3, #15
 80047aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	085b      	lsrs	r3, r3, #1
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	8bfb      	ldrh	r3, [r7, #30]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	8bfa      	ldrh	r2, [r7, #30]
 80047c4:	60da      	str	r2, [r3, #12]
 80047c6:	e062      	b.n	800488e <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80047ce:	e05e      	b.n	800488e <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d828      	bhi.n	800482a <UART_SetConfig+0x572>
 80047d8:	a201      	add	r2, pc, #4	@ (adr r2, 80047e0 <UART_SetConfig+0x528>)
 80047da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047de:	bf00      	nop
 80047e0:	08004805 	.word	0x08004805
 80047e4:	0800480d 	.word	0x0800480d
 80047e8:	08004815 	.word	0x08004815
 80047ec:	0800482b 	.word	0x0800482b
 80047f0:	0800481b 	.word	0x0800481b
 80047f4:	0800482b 	.word	0x0800482b
 80047f8:	0800482b 	.word	0x0800482b
 80047fc:	0800482b 	.word	0x0800482b
 8004800:	08004823 	.word	0x08004823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004804:	f7fe feda 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 8004808:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800480a:	e014      	b.n	8004836 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800480c:	f7fe feea 	bl	80035e4 <HAL_RCC_GetPCLK2Freq>
 8004810:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004812:	e010      	b.n	8004836 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004814:	4b1a      	ldr	r3, [pc, #104]	@ (8004880 <UART_SetConfig+0x5c8>)
 8004816:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004818:	e00d      	b.n	8004836 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800481a:	f7fe fe1d 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 800481e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004820:	e009      	b.n	8004836 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004826:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004828:	e005      	b.n	8004836 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004834:	bf00      	nop
    }

    if (pclk != 0U)
 8004836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004838:	2b00      	cmp	r3, #0
 800483a:	d028      	beq.n	800488e <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004840:	4a10      	ldr	r2, [pc, #64]	@ (8004884 <UART_SetConfig+0x5cc>)
 8004842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004846:	461a      	mov	r2, r3
 8004848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484a:	fbb3 f2f2 	udiv	r2, r3, r2
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	085b      	lsrs	r3, r3, #1
 8004854:	441a      	add	r2, r3
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	fbb2 f3f3 	udiv	r3, r2, r3
 800485e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	2b0f      	cmp	r3, #15
 8004864:	d910      	bls.n	8004888 <UART_SetConfig+0x5d0>
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800486c:	d20c      	bcs.n	8004888 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	b29a      	uxth	r2, r3
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	60da      	str	r2, [r3, #12]
 8004878:	e009      	b.n	800488e <UART_SetConfig+0x5d6>
 800487a:	bf00      	nop
 800487c:	40008000 	.word	0x40008000
 8004880:	00f42400 	.word	0x00f42400
 8004884:	08005760 	.word	0x08005760
      }
      else
      {
        ret = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2201      	movs	r2, #1
 8004892:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2201      	movs	r2, #1
 800489a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2200      	movs	r2, #0
 80048a2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2200      	movs	r2, #0
 80048a8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80048aa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3730      	adds	r7, #48	@ 0x30
 80048b2:	46bd      	mov	sp, r7
 80048b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080048b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c4:	f003 0308 	and.w	r3, r3, #8
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494c:	f003 0310 	and.w	r3, r3, #16
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004994:	2b00      	cmp	r3, #0
 8004996:	d01a      	beq.n	80049ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049b6:	d10a      	bne.n	80049ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	605a      	str	r2, [r3, #4]
  }
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b098      	sub	sp, #96	@ 0x60
 8004a00:	af02      	add	r7, sp, #8
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a0c:	f7fd f890 	bl	8001b30 <HAL_GetTick>
 8004a10:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d12f      	bne.n	8004a80 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f88e 	bl	8004b50 <UART_WaitOnFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d022      	beq.n	8004a80 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a42:	e853 3f00 	ldrex	r3, [r3]
 8004a46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a58:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a5a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a60:	e841 2300 	strex	r3, r2, [r1]
 8004a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1e6      	bne.n	8004a3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e063      	b.n	8004b48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0304 	and.w	r3, r3, #4
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d149      	bne.n	8004b22 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a8e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a96:	2200      	movs	r2, #0
 8004a98:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f857 	bl	8004b50 <UART_WaitOnFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d03c      	beq.n	8004b22 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab0:	e853 3f00 	ldrex	r3, [r3]
 8004ab4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ac6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ac8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ace:	e841 2300 	strex	r3, r2, [r1]
 8004ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1e6      	bne.n	8004aa8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3308      	adds	r3, #8
 8004ae0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f023 0301 	bic.w	r3, r3, #1
 8004af0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3308      	adds	r3, #8
 8004af8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004afa:	61fa      	str	r2, [r7, #28]
 8004afc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afe:	69b9      	ldr	r1, [r7, #24]
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	e841 2300 	strex	r3, r2, [r1]
 8004b06:	617b      	str	r3, [r7, #20]
   return(result);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1e5      	bne.n	8004ada <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2220      	movs	r2, #32
 8004b12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e012      	b.n	8004b48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3758      	adds	r7, #88	@ 0x58
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	603b      	str	r3, [r7, #0]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b60:	e04f      	b.n	8004c02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b68:	d04b      	beq.n	8004c02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6a:	f7fc ffe1 	bl	8001b30 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d302      	bcc.n	8004b80 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e04e      	b.n	8004c22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d037      	beq.n	8004c02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b80      	cmp	r3, #128	@ 0x80
 8004b96:	d034      	beq.n	8004c02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2b40      	cmp	r3, #64	@ 0x40
 8004b9c:	d031      	beq.n	8004c02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d110      	bne.n	8004bce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 f920 	bl	8004dfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2208      	movs	r2, #8
 8004bbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e029      	b.n	8004c22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bdc:	d111      	bne.n	8004c02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004be6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 f906 	bl	8004dfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e00f      	b.n	8004c22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69da      	ldr	r2, [r3, #28]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	bf0c      	ite	eq
 8004c12:	2301      	moveq	r3, #1
 8004c14:	2300      	movne	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	79fb      	ldrb	r3, [r7, #7]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d0a0      	beq.n	8004b62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b096      	sub	sp, #88	@ 0x58
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	4613      	mov	r3, r2
 8004c38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	88fa      	ldrh	r2, [r7, #6]
 8004c44:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2222      	movs	r2, #34	@ 0x22
 8004c54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d02d      	beq.n	8004cbe <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c68:	4a40      	ldr	r2, [pc, #256]	@ (8004d6c <UART_Start_Receive_DMA+0x140>)
 8004c6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c72:	4a3f      	ldr	r2, [pc, #252]	@ (8004d70 <UART_Start_Receive_DMA+0x144>)
 8004c74:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c7c:	4a3d      	ldr	r2, [pc, #244]	@ (8004d74 <UART_Start_Receive_DMA+0x148>)
 8004c7e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c86:	2200      	movs	r2, #0
 8004c88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3324      	adds	r3, #36	@ 0x24
 8004c96:	4619      	mov	r1, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
 8004ca0:	f7fd f90a 	bl	8001eb8 <HAL_DMA_Start_IT>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d009      	beq.n	8004cbe <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2210      	movs	r2, #16
 8004cae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e051      	b.n	8004d62 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d018      	beq.n	8004cf8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cce:	e853 3f00 	ldrex	r3, [r3]
 8004cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cda:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ce6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004cea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cec:	e841 2300 	strex	r3, r2, [r1]
 8004cf0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1e6      	bne.n	8004cc6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3308      	adds	r3, #8
 8004cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0a:	f043 0301 	orr.w	r3, r3, #1
 8004d0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3308      	adds	r3, #8
 8004d16:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004d18:	637a      	str	r2, [r7, #52]	@ 0x34
 8004d1a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d20:	e841 2300 	strex	r3, r2, [r1]
 8004d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e5      	bne.n	8004cf8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3308      	adds	r3, #8
 8004d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	e853 3f00 	ldrex	r3, [r3]
 8004d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3308      	adds	r3, #8
 8004d4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d4c:	623a      	str	r2, [r7, #32]
 8004d4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d50:	69f9      	ldr	r1, [r7, #28]
 8004d52:	6a3a      	ldr	r2, [r7, #32]
 8004d54:	e841 2300 	strex	r3, r2, [r1]
 8004d58:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e5      	bne.n	8004d2c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3758      	adds	r7, #88	@ 0x58
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	08004ec7 	.word	0x08004ec7
 8004d70:	08004ff3 	.word	0x08004ff3
 8004d74:	08005031 	.word	0x08005031

08004d78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b08f      	sub	sp, #60	@ 0x3c
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004da0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004da4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004da6:	e841 2300 	strex	r3, r2, [r1]
 8004daa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1e6      	bne.n	8004d80 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3308      	adds	r3, #8
 8004db8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	e853 3f00 	ldrex	r3, [r3]
 8004dc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004dc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3308      	adds	r3, #8
 8004dd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dd2:	61ba      	str	r2, [r7, #24]
 8004dd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd6:	6979      	ldr	r1, [r7, #20]
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	e841 2300 	strex	r3, r2, [r1]
 8004dde:	613b      	str	r3, [r7, #16]
   return(result);
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1e5      	bne.n	8004db2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8004dee:	bf00      	nop
 8004df0:	373c      	adds	r7, #60	@ 0x3c
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b095      	sub	sp, #84	@ 0x54
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e0a:	e853 3f00 	ldrex	r3, [r3]
 8004e0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e20:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e22:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e28:	e841 2300 	strex	r3, r2, [r1]
 8004e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e6      	bne.n	8004e02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3308      	adds	r3, #8
 8004e3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	e853 3f00 	ldrex	r3, [r3]
 8004e42:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e4a:	f023 0301 	bic.w	r3, r3, #1
 8004e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3308      	adds	r3, #8
 8004e56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e60:	e841 2300 	strex	r3, r2, [r1]
 8004e64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1e3      	bne.n	8004e34 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d118      	bne.n	8004ea6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	e853 3f00 	ldrex	r3, [r3]
 8004e80:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	f023 0310 	bic.w	r3, r3, #16
 8004e88:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e92:	61bb      	str	r3, [r7, #24]
 8004e94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	6979      	ldr	r1, [r7, #20]
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e6      	bne.n	8004e74 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004eba:	bf00      	nop
 8004ebc:	3754      	adds	r7, #84	@ 0x54
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b09c      	sub	sp, #112	@ 0x70
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0320 	and.w	r3, r3, #32
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d171      	bne.n	8004fc6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8004ee2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ef2:	e853 3f00 	ldrex	r3, [r3]
 8004ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ef8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004efa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004efe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	461a      	mov	r2, r3
 8004f06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f0a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f10:	e841 2300 	strex	r3, r2, [r1]
 8004f14:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e6      	bne.n	8004eea <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3308      	adds	r3, #8
 8004f22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f26:	e853 3f00 	ldrex	r3, [r3]
 8004f2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f2e:	f023 0301 	bic.w	r3, r3, #1
 8004f32:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3308      	adds	r3, #8
 8004f3a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004f3c:	647a      	str	r2, [r7, #68]	@ 0x44
 8004f3e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f44:	e841 2300 	strex	r3, r2, [r1]
 8004f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e5      	bne.n	8004f1c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3308      	adds	r3, #8
 8004f56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5a:	e853 3f00 	ldrex	r3, [r3]
 8004f5e:	623b      	str	r3, [r7, #32]
   return(result);
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f66:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3308      	adds	r3, #8
 8004f6e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004f70:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f78:	e841 2300 	strex	r3, r2, [r1]
 8004f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1e5      	bne.n	8004f50 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f86:	2220      	movs	r2, #32
 8004f88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d118      	bne.n	8004fc6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	e853 3f00 	ldrex	r3, [r3]
 8004fa0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f023 0310 	bic.w	r3, r3, #16
 8004fa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004faa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fb2:	61fb      	str	r3, [r7, #28]
 8004fb4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb6:	69b9      	ldr	r1, [r7, #24]
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	e841 2300 	strex	r3, r2, [r1]
 8004fbe:	617b      	str	r3, [r7, #20]
   return(result);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1e6      	bne.n	8004f94 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fc8:	2200      	movs	r2, #0
 8004fca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d107      	bne.n	8004fe4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004fda:	4619      	mov	r1, r3
 8004fdc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004fde:	f7fb fce5 	bl	80009ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004fe2:	e002      	b.n	8004fea <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004fe4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004fe6:	f7ff f949 	bl	800427c <HAL_UART_RxCpltCallback>
}
 8004fea:	bf00      	nop
 8004fec:	3770      	adds	r7, #112	@ 0x70
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2201      	movs	r2, #1
 8005004:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800500a:	2b01      	cmp	r3, #1
 800500c:	d109      	bne.n	8005022 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005014:	085b      	lsrs	r3, r3, #1
 8005016:	b29b      	uxth	r3, r3
 8005018:	4619      	mov	r1, r3
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f7fb fcc6 	bl	80009ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005020:	e002      	b.n	8005028 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f7ff f934 	bl	8004290 <HAL_UART_RxHalfCpltCallback>
}
 8005028:	bf00      	nop
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005044:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800504c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005058:	2b80      	cmp	r3, #128	@ 0x80
 800505a:	d109      	bne.n	8005070 <UART_DMAError+0x40>
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	2b21      	cmp	r3, #33	@ 0x21
 8005060:	d106      	bne.n	8005070 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2200      	movs	r2, #0
 8005066:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800506a:	6978      	ldr	r0, [r7, #20]
 800506c:	f7ff fe84 	bl	8004d78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800507a:	2b40      	cmp	r3, #64	@ 0x40
 800507c:	d109      	bne.n	8005092 <UART_DMAError+0x62>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b22      	cmp	r3, #34	@ 0x22
 8005082:	d106      	bne.n	8005092 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	2200      	movs	r2, #0
 8005088:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800508c:	6978      	ldr	r0, [r7, #20]
 800508e:	f7ff feb4 	bl	8004dfa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005098:	f043 0210 	orr.w	r2, r3, #16
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050a2:	6978      	ldr	r0, [r7, #20]
 80050a4:	f7ff f8fe 	bl	80042a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050a8:	bf00      	nop
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e027      	b.n	8005116 <HAL_UARTEx_DisableFifoMode+0x66>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2224      	movs	r2, #36	@ 0x24
 80050d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 0201 	bic.w	r2, r2, #1
 80050ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80050f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2220      	movs	r2, #32
 8005108:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b084      	sub	sp, #16
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005132:	2b01      	cmp	r3, #1
 8005134:	d101      	bne.n	800513a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005136:	2302      	movs	r3, #2
 8005138:	e02d      	b.n	8005196 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2224      	movs	r2, #36	@ 0x24
 8005146:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0201 	bic.w	r2, r2, #1
 8005160:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f8a4 	bl	80052c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2220      	movs	r2, #32
 8005188:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b084      	sub	sp, #16
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d101      	bne.n	80051b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051b2:	2302      	movs	r3, #2
 80051b4:	e02d      	b.n	8005212 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2224      	movs	r2, #36	@ 0x24
 80051c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0201 	bic.w	r2, r2, #1
 80051dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f866 	bl	80052c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b08c      	sub	sp, #48	@ 0x30
 800521e:	af00      	add	r7, sp, #0
 8005220:	60f8      	str	r0, [r7, #12]
 8005222:	60b9      	str	r1, [r7, #8]
 8005224:	4613      	mov	r3, r2
 8005226:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800522e:	2b20      	cmp	r3, #32
 8005230:	d142      	bne.n	80052b8 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8005238:	88fb      	ldrh	r3, [r7, #6]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e03b      	b.n	80052ba <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2201      	movs	r2, #1
 8005246:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800524e:	88fb      	ldrh	r3, [r7, #6]
 8005250:	461a      	mov	r2, r3
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f7ff fce9 	bl	8004c2c <UART_Start_Receive_DMA>
 800525a:	4603      	mov	r3, r0
 800525c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005260:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005264:	2b00      	cmp	r3, #0
 8005266:	d124      	bne.n	80052b2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800526c:	2b01      	cmp	r3, #1
 800526e:	d11d      	bne.n	80052ac <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2210      	movs	r2, #16
 8005276:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	e853 3f00 	ldrex	r3, [r3]
 8005284:	617b      	str	r3, [r7, #20]
   return(result);
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f043 0310 	orr.w	r3, r3, #16
 800528c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005296:	627b      	str	r3, [r7, #36]	@ 0x24
 8005298:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	6a39      	ldr	r1, [r7, #32]
 800529c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800529e:	e841 2300 	strex	r3, r2, [r1]
 80052a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1e6      	bne.n	8005278 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80052aa:	e002      	b.n	80052b2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80052b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80052b6:	e000      	b.n	80052ba <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80052b8:	2302      	movs	r3, #2
  }
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3730      	adds	r7, #48	@ 0x30
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
	...

080052c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d108      	bne.n	80052e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80052e4:	e031      	b.n	800534a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80052e6:	2308      	movs	r3, #8
 80052e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80052ea:	2308      	movs	r3, #8
 80052ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	0e5b      	lsrs	r3, r3, #25
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	0f5b      	lsrs	r3, r3, #29
 8005306:	b2db      	uxtb	r3, r3
 8005308:	f003 0307 	and.w	r3, r3, #7
 800530c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800530e:	7bbb      	ldrb	r3, [r7, #14]
 8005310:	7b3a      	ldrb	r2, [r7, #12]
 8005312:	4911      	ldr	r1, [pc, #68]	@ (8005358 <UARTEx_SetNbDataToProcess+0x94>)
 8005314:	5c8a      	ldrb	r2, [r1, r2]
 8005316:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800531a:	7b3a      	ldrb	r2, [r7, #12]
 800531c:	490f      	ldr	r1, [pc, #60]	@ (800535c <UARTEx_SetNbDataToProcess+0x98>)
 800531e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005320:	fb93 f3f2 	sdiv	r3, r3, r2
 8005324:	b29a      	uxth	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800532c:	7bfb      	ldrb	r3, [r7, #15]
 800532e:	7b7a      	ldrb	r2, [r7, #13]
 8005330:	4909      	ldr	r1, [pc, #36]	@ (8005358 <UARTEx_SetNbDataToProcess+0x94>)
 8005332:	5c8a      	ldrb	r2, [r1, r2]
 8005334:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005338:	7b7a      	ldrb	r2, [r7, #13]
 800533a:	4908      	ldr	r1, [pc, #32]	@ (800535c <UARTEx_SetNbDataToProcess+0x98>)
 800533c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800533e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005342:	b29a      	uxth	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800534a:	bf00      	nop
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	08005778 	.word	0x08005778
 800535c:	08005780 	.word	0x08005780

08005360 <_ZdlPvj>:
 8005360:	f000 b811 	b.w	8005386 <_ZdlPv>

08005364 <_Znwj>:
 8005364:	2801      	cmp	r0, #1
 8005366:	bf38      	it	cc
 8005368:	2001      	movcc	r0, #1
 800536a:	b510      	push	{r4, lr}
 800536c:	4604      	mov	r4, r0
 800536e:	4620      	mov	r0, r4
 8005370:	f000 f81a 	bl	80053a8 <malloc>
 8005374:	b100      	cbz	r0, 8005378 <_Znwj+0x14>
 8005376:	bd10      	pop	{r4, pc}
 8005378:	f000 f808 	bl	800538c <_ZSt15get_new_handlerv>
 800537c:	b908      	cbnz	r0, 8005382 <_Znwj+0x1e>
 800537e:	f000 f80b 	bl	8005398 <abort>
 8005382:	4780      	blx	r0
 8005384:	e7f3      	b.n	800536e <_Znwj+0xa>

08005386 <_ZdlPv>:
 8005386:	f000 b817 	b.w	80053b8 <free>
	...

0800538c <_ZSt15get_new_handlerv>:
 800538c:	4b01      	ldr	r3, [pc, #4]	@ (8005394 <_ZSt15get_new_handlerv+0x8>)
 800538e:	e8d3 0faf 	lda	r0, [r3]
 8005392:	4770      	bx	lr
 8005394:	20000180 	.word	0x20000180

08005398 <abort>:
 8005398:	2006      	movs	r0, #6
 800539a:	b508      	push	{r3, lr}
 800539c:	f000 f8f2 	bl	8005584 <raise>
 80053a0:	2001      	movs	r0, #1
 80053a2:	f7fb fc49 	bl	8000c38 <_exit>
	...

080053a8 <malloc>:
 80053a8:	4b02      	ldr	r3, [pc, #8]	@ (80053b4 <malloc+0xc>)
 80053aa:	4601      	mov	r1, r0
 80053ac:	6818      	ldr	r0, [r3, #0]
 80053ae:	f000 b82d 	b.w	800540c <_malloc_r>
 80053b2:	bf00      	nop
 80053b4:	2000000c 	.word	0x2000000c

080053b8 <free>:
 80053b8:	4b02      	ldr	r3, [pc, #8]	@ (80053c4 <free+0xc>)
 80053ba:	4601      	mov	r1, r0
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	f000 b939 	b.w	8005634 <_free_r>
 80053c2:	bf00      	nop
 80053c4:	2000000c 	.word	0x2000000c

080053c8 <sbrk_aligned>:
 80053c8:	b570      	push	{r4, r5, r6, lr}
 80053ca:	4e0f      	ldr	r6, [pc, #60]	@ (8005408 <sbrk_aligned+0x40>)
 80053cc:	460c      	mov	r4, r1
 80053ce:	4605      	mov	r5, r0
 80053d0:	6831      	ldr	r1, [r6, #0]
 80053d2:	b911      	cbnz	r1, 80053da <sbrk_aligned+0x12>
 80053d4:	f000 f8f2 	bl	80055bc <_sbrk_r>
 80053d8:	6030      	str	r0, [r6, #0]
 80053da:	4621      	mov	r1, r4
 80053dc:	4628      	mov	r0, r5
 80053de:	f000 f8ed 	bl	80055bc <_sbrk_r>
 80053e2:	1c43      	adds	r3, r0, #1
 80053e4:	d103      	bne.n	80053ee <sbrk_aligned+0x26>
 80053e6:	f04f 34ff 	mov.w	r4, #4294967295
 80053ea:	4620      	mov	r0, r4
 80053ec:	bd70      	pop	{r4, r5, r6, pc}
 80053ee:	1cc4      	adds	r4, r0, #3
 80053f0:	f024 0403 	bic.w	r4, r4, #3
 80053f4:	42a0      	cmp	r0, r4
 80053f6:	d0f8      	beq.n	80053ea <sbrk_aligned+0x22>
 80053f8:	1a21      	subs	r1, r4, r0
 80053fa:	4628      	mov	r0, r5
 80053fc:	f000 f8de 	bl	80055bc <_sbrk_r>
 8005400:	3001      	adds	r0, #1
 8005402:	d1f2      	bne.n	80053ea <sbrk_aligned+0x22>
 8005404:	e7ef      	b.n	80053e6 <sbrk_aligned+0x1e>
 8005406:	bf00      	nop
 8005408:	20000184 	.word	0x20000184

0800540c <_malloc_r>:
 800540c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005410:	1ccd      	adds	r5, r1, #3
 8005412:	4606      	mov	r6, r0
 8005414:	f025 0503 	bic.w	r5, r5, #3
 8005418:	3508      	adds	r5, #8
 800541a:	2d0c      	cmp	r5, #12
 800541c:	bf38      	it	cc
 800541e:	250c      	movcc	r5, #12
 8005420:	2d00      	cmp	r5, #0
 8005422:	db01      	blt.n	8005428 <_malloc_r+0x1c>
 8005424:	42a9      	cmp	r1, r5
 8005426:	d904      	bls.n	8005432 <_malloc_r+0x26>
 8005428:	230c      	movs	r3, #12
 800542a:	6033      	str	r3, [r6, #0]
 800542c:	2000      	movs	r0, #0
 800542e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005432:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005508 <_malloc_r+0xfc>
 8005436:	f000 f869 	bl	800550c <__malloc_lock>
 800543a:	f8d8 3000 	ldr.w	r3, [r8]
 800543e:	461c      	mov	r4, r3
 8005440:	bb44      	cbnz	r4, 8005494 <_malloc_r+0x88>
 8005442:	4629      	mov	r1, r5
 8005444:	4630      	mov	r0, r6
 8005446:	f7ff ffbf 	bl	80053c8 <sbrk_aligned>
 800544a:	1c43      	adds	r3, r0, #1
 800544c:	4604      	mov	r4, r0
 800544e:	d158      	bne.n	8005502 <_malloc_r+0xf6>
 8005450:	f8d8 4000 	ldr.w	r4, [r8]
 8005454:	4627      	mov	r7, r4
 8005456:	2f00      	cmp	r7, #0
 8005458:	d143      	bne.n	80054e2 <_malloc_r+0xd6>
 800545a:	2c00      	cmp	r4, #0
 800545c:	d04b      	beq.n	80054f6 <_malloc_r+0xea>
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	4639      	mov	r1, r7
 8005462:	4630      	mov	r0, r6
 8005464:	eb04 0903 	add.w	r9, r4, r3
 8005468:	f000 f8a8 	bl	80055bc <_sbrk_r>
 800546c:	4581      	cmp	r9, r0
 800546e:	d142      	bne.n	80054f6 <_malloc_r+0xea>
 8005470:	6821      	ldr	r1, [r4, #0]
 8005472:	4630      	mov	r0, r6
 8005474:	1a6d      	subs	r5, r5, r1
 8005476:	4629      	mov	r1, r5
 8005478:	f7ff ffa6 	bl	80053c8 <sbrk_aligned>
 800547c:	3001      	adds	r0, #1
 800547e:	d03a      	beq.n	80054f6 <_malloc_r+0xea>
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	442b      	add	r3, r5
 8005484:	6023      	str	r3, [r4, #0]
 8005486:	f8d8 3000 	ldr.w	r3, [r8]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	bb62      	cbnz	r2, 80054e8 <_malloc_r+0xdc>
 800548e:	f8c8 7000 	str.w	r7, [r8]
 8005492:	e00f      	b.n	80054b4 <_malloc_r+0xa8>
 8005494:	6822      	ldr	r2, [r4, #0]
 8005496:	1b52      	subs	r2, r2, r5
 8005498:	d420      	bmi.n	80054dc <_malloc_r+0xd0>
 800549a:	2a0b      	cmp	r2, #11
 800549c:	d917      	bls.n	80054ce <_malloc_r+0xc2>
 800549e:	1961      	adds	r1, r4, r5
 80054a0:	42a3      	cmp	r3, r4
 80054a2:	6025      	str	r5, [r4, #0]
 80054a4:	bf18      	it	ne
 80054a6:	6059      	strne	r1, [r3, #4]
 80054a8:	6863      	ldr	r3, [r4, #4]
 80054aa:	bf08      	it	eq
 80054ac:	f8c8 1000 	streq.w	r1, [r8]
 80054b0:	5162      	str	r2, [r4, r5]
 80054b2:	604b      	str	r3, [r1, #4]
 80054b4:	4630      	mov	r0, r6
 80054b6:	f000 f82f 	bl	8005518 <__malloc_unlock>
 80054ba:	f104 000b 	add.w	r0, r4, #11
 80054be:	1d23      	adds	r3, r4, #4
 80054c0:	f020 0007 	bic.w	r0, r0, #7
 80054c4:	1ac2      	subs	r2, r0, r3
 80054c6:	bf1c      	itt	ne
 80054c8:	1a1b      	subne	r3, r3, r0
 80054ca:	50a3      	strne	r3, [r4, r2]
 80054cc:	e7af      	b.n	800542e <_malloc_r+0x22>
 80054ce:	6862      	ldr	r2, [r4, #4]
 80054d0:	42a3      	cmp	r3, r4
 80054d2:	bf0c      	ite	eq
 80054d4:	f8c8 2000 	streq.w	r2, [r8]
 80054d8:	605a      	strne	r2, [r3, #4]
 80054da:	e7eb      	b.n	80054b4 <_malloc_r+0xa8>
 80054dc:	4623      	mov	r3, r4
 80054de:	6864      	ldr	r4, [r4, #4]
 80054e0:	e7ae      	b.n	8005440 <_malloc_r+0x34>
 80054e2:	463c      	mov	r4, r7
 80054e4:	687f      	ldr	r7, [r7, #4]
 80054e6:	e7b6      	b.n	8005456 <_malloc_r+0x4a>
 80054e8:	461a      	mov	r2, r3
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	42a3      	cmp	r3, r4
 80054ee:	d1fb      	bne.n	80054e8 <_malloc_r+0xdc>
 80054f0:	2300      	movs	r3, #0
 80054f2:	6053      	str	r3, [r2, #4]
 80054f4:	e7de      	b.n	80054b4 <_malloc_r+0xa8>
 80054f6:	230c      	movs	r3, #12
 80054f8:	4630      	mov	r0, r6
 80054fa:	6033      	str	r3, [r6, #0]
 80054fc:	f000 f80c 	bl	8005518 <__malloc_unlock>
 8005500:	e794      	b.n	800542c <_malloc_r+0x20>
 8005502:	6005      	str	r5, [r0, #0]
 8005504:	e7d6      	b.n	80054b4 <_malloc_r+0xa8>
 8005506:	bf00      	nop
 8005508:	20000188 	.word	0x20000188

0800550c <__malloc_lock>:
 800550c:	4801      	ldr	r0, [pc, #4]	@ (8005514 <__malloc_lock+0x8>)
 800550e:	f000 b88f 	b.w	8005630 <__retarget_lock_acquire_recursive>
 8005512:	bf00      	nop
 8005514:	200002c8 	.word	0x200002c8

08005518 <__malloc_unlock>:
 8005518:	4801      	ldr	r0, [pc, #4]	@ (8005520 <__malloc_unlock+0x8>)
 800551a:	f000 b88a 	b.w	8005632 <__retarget_lock_release_recursive>
 800551e:	bf00      	nop
 8005520:	200002c8 	.word	0x200002c8

08005524 <memset>:
 8005524:	4402      	add	r2, r0
 8005526:	4603      	mov	r3, r0
 8005528:	4293      	cmp	r3, r2
 800552a:	d100      	bne.n	800552e <memset+0xa>
 800552c:	4770      	bx	lr
 800552e:	f803 1b01 	strb.w	r1, [r3], #1
 8005532:	e7f9      	b.n	8005528 <memset+0x4>

08005534 <_raise_r>:
 8005534:	291f      	cmp	r1, #31
 8005536:	b538      	push	{r3, r4, r5, lr}
 8005538:	4605      	mov	r5, r0
 800553a:	460c      	mov	r4, r1
 800553c:	d904      	bls.n	8005548 <_raise_r+0x14>
 800553e:	2316      	movs	r3, #22
 8005540:	6003      	str	r3, [r0, #0]
 8005542:	f04f 30ff 	mov.w	r0, #4294967295
 8005546:	bd38      	pop	{r3, r4, r5, pc}
 8005548:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800554a:	b112      	cbz	r2, 8005552 <_raise_r+0x1e>
 800554c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005550:	b94b      	cbnz	r3, 8005566 <_raise_r+0x32>
 8005552:	4628      	mov	r0, r5
 8005554:	f000 f830 	bl	80055b8 <_getpid_r>
 8005558:	4622      	mov	r2, r4
 800555a:	4601      	mov	r1, r0
 800555c:	4628      	mov	r0, r5
 800555e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005562:	f000 b817 	b.w	8005594 <_kill_r>
 8005566:	2b01      	cmp	r3, #1
 8005568:	d00a      	beq.n	8005580 <_raise_r+0x4c>
 800556a:	1c59      	adds	r1, r3, #1
 800556c:	d103      	bne.n	8005576 <_raise_r+0x42>
 800556e:	2316      	movs	r3, #22
 8005570:	6003      	str	r3, [r0, #0]
 8005572:	2001      	movs	r0, #1
 8005574:	e7e7      	b.n	8005546 <_raise_r+0x12>
 8005576:	2100      	movs	r1, #0
 8005578:	4620      	mov	r0, r4
 800557a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800557e:	4798      	blx	r3
 8005580:	2000      	movs	r0, #0
 8005582:	e7e0      	b.n	8005546 <_raise_r+0x12>

08005584 <raise>:
 8005584:	4b02      	ldr	r3, [pc, #8]	@ (8005590 <raise+0xc>)
 8005586:	4601      	mov	r1, r0
 8005588:	6818      	ldr	r0, [r3, #0]
 800558a:	f7ff bfd3 	b.w	8005534 <_raise_r>
 800558e:	bf00      	nop
 8005590:	2000000c 	.word	0x2000000c

08005594 <_kill_r>:
 8005594:	b538      	push	{r3, r4, r5, lr}
 8005596:	2300      	movs	r3, #0
 8005598:	4d06      	ldr	r5, [pc, #24]	@ (80055b4 <_kill_r+0x20>)
 800559a:	4604      	mov	r4, r0
 800559c:	4608      	mov	r0, r1
 800559e:	4611      	mov	r1, r2
 80055a0:	602b      	str	r3, [r5, #0]
 80055a2:	f7fb fb39 	bl	8000c18 <_kill>
 80055a6:	1c43      	adds	r3, r0, #1
 80055a8:	d102      	bne.n	80055b0 <_kill_r+0x1c>
 80055aa:	682b      	ldr	r3, [r5, #0]
 80055ac:	b103      	cbz	r3, 80055b0 <_kill_r+0x1c>
 80055ae:	6023      	str	r3, [r4, #0]
 80055b0:	bd38      	pop	{r3, r4, r5, pc}
 80055b2:	bf00      	nop
 80055b4:	200002c4 	.word	0x200002c4

080055b8 <_getpid_r>:
 80055b8:	f7fb bb26 	b.w	8000c08 <_getpid>

080055bc <_sbrk_r>:
 80055bc:	b538      	push	{r3, r4, r5, lr}
 80055be:	2300      	movs	r3, #0
 80055c0:	4d05      	ldr	r5, [pc, #20]	@ (80055d8 <_sbrk_r+0x1c>)
 80055c2:	4604      	mov	r4, r0
 80055c4:	4608      	mov	r0, r1
 80055c6:	602b      	str	r3, [r5, #0]
 80055c8:	f7fb fb42 	bl	8000c50 <_sbrk>
 80055cc:	1c43      	adds	r3, r0, #1
 80055ce:	d102      	bne.n	80055d6 <_sbrk_r+0x1a>
 80055d0:	682b      	ldr	r3, [r5, #0]
 80055d2:	b103      	cbz	r3, 80055d6 <_sbrk_r+0x1a>
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	bd38      	pop	{r3, r4, r5, pc}
 80055d8:	200002c4 	.word	0x200002c4

080055dc <__errno>:
 80055dc:	4b01      	ldr	r3, [pc, #4]	@ (80055e4 <__errno+0x8>)
 80055de:	6818      	ldr	r0, [r3, #0]
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	2000000c 	.word	0x2000000c

080055e8 <__libc_init_array>:
 80055e8:	b570      	push	{r4, r5, r6, lr}
 80055ea:	4d0d      	ldr	r5, [pc, #52]	@ (8005620 <__libc_init_array+0x38>)
 80055ec:	2600      	movs	r6, #0
 80055ee:	4c0d      	ldr	r4, [pc, #52]	@ (8005624 <__libc_init_array+0x3c>)
 80055f0:	1b64      	subs	r4, r4, r5
 80055f2:	10a4      	asrs	r4, r4, #2
 80055f4:	42a6      	cmp	r6, r4
 80055f6:	d109      	bne.n	800560c <__libc_init_array+0x24>
 80055f8:	4d0b      	ldr	r5, [pc, #44]	@ (8005628 <__libc_init_array+0x40>)
 80055fa:	2600      	movs	r6, #0
 80055fc:	4c0b      	ldr	r4, [pc, #44]	@ (800562c <__libc_init_array+0x44>)
 80055fe:	f000 f863 	bl	80056c8 <_init>
 8005602:	1b64      	subs	r4, r4, r5
 8005604:	10a4      	asrs	r4, r4, #2
 8005606:	42a6      	cmp	r6, r4
 8005608:	d105      	bne.n	8005616 <__libc_init_array+0x2e>
 800560a:	bd70      	pop	{r4, r5, r6, pc}
 800560c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005610:	3601      	adds	r6, #1
 8005612:	4798      	blx	r3
 8005614:	e7ee      	b.n	80055f4 <__libc_init_array+0xc>
 8005616:	f855 3b04 	ldr.w	r3, [r5], #4
 800561a:	3601      	adds	r6, #1
 800561c:	4798      	blx	r3
 800561e:	e7f2      	b.n	8005606 <__libc_init_array+0x1e>
 8005620:	08005790 	.word	0x08005790
 8005624:	08005790 	.word	0x08005790
 8005628:	08005790 	.word	0x08005790
 800562c:	08005798 	.word	0x08005798

08005630 <__retarget_lock_acquire_recursive>:
 8005630:	4770      	bx	lr

08005632 <__retarget_lock_release_recursive>:
 8005632:	4770      	bx	lr

08005634 <_free_r>:
 8005634:	b538      	push	{r3, r4, r5, lr}
 8005636:	4605      	mov	r5, r0
 8005638:	2900      	cmp	r1, #0
 800563a:	d041      	beq.n	80056c0 <_free_r+0x8c>
 800563c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005640:	1f0c      	subs	r4, r1, #4
 8005642:	2b00      	cmp	r3, #0
 8005644:	bfb8      	it	lt
 8005646:	18e4      	addlt	r4, r4, r3
 8005648:	f7ff ff60 	bl	800550c <__malloc_lock>
 800564c:	4a1d      	ldr	r2, [pc, #116]	@ (80056c4 <_free_r+0x90>)
 800564e:	6813      	ldr	r3, [r2, #0]
 8005650:	b933      	cbnz	r3, 8005660 <_free_r+0x2c>
 8005652:	6063      	str	r3, [r4, #4]
 8005654:	6014      	str	r4, [r2, #0]
 8005656:	4628      	mov	r0, r5
 8005658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800565c:	f7ff bf5c 	b.w	8005518 <__malloc_unlock>
 8005660:	42a3      	cmp	r3, r4
 8005662:	d908      	bls.n	8005676 <_free_r+0x42>
 8005664:	6820      	ldr	r0, [r4, #0]
 8005666:	1821      	adds	r1, r4, r0
 8005668:	428b      	cmp	r3, r1
 800566a:	bf01      	itttt	eq
 800566c:	6819      	ldreq	r1, [r3, #0]
 800566e:	685b      	ldreq	r3, [r3, #4]
 8005670:	1809      	addeq	r1, r1, r0
 8005672:	6021      	streq	r1, [r4, #0]
 8005674:	e7ed      	b.n	8005652 <_free_r+0x1e>
 8005676:	461a      	mov	r2, r3
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	b10b      	cbz	r3, 8005680 <_free_r+0x4c>
 800567c:	42a3      	cmp	r3, r4
 800567e:	d9fa      	bls.n	8005676 <_free_r+0x42>
 8005680:	6811      	ldr	r1, [r2, #0]
 8005682:	1850      	adds	r0, r2, r1
 8005684:	42a0      	cmp	r0, r4
 8005686:	d10b      	bne.n	80056a0 <_free_r+0x6c>
 8005688:	6820      	ldr	r0, [r4, #0]
 800568a:	4401      	add	r1, r0
 800568c:	1850      	adds	r0, r2, r1
 800568e:	6011      	str	r1, [r2, #0]
 8005690:	4283      	cmp	r3, r0
 8005692:	d1e0      	bne.n	8005656 <_free_r+0x22>
 8005694:	6818      	ldr	r0, [r3, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	4408      	add	r0, r1
 800569a:	6053      	str	r3, [r2, #4]
 800569c:	6010      	str	r0, [r2, #0]
 800569e:	e7da      	b.n	8005656 <_free_r+0x22>
 80056a0:	d902      	bls.n	80056a8 <_free_r+0x74>
 80056a2:	230c      	movs	r3, #12
 80056a4:	602b      	str	r3, [r5, #0]
 80056a6:	e7d6      	b.n	8005656 <_free_r+0x22>
 80056a8:	6820      	ldr	r0, [r4, #0]
 80056aa:	1821      	adds	r1, r4, r0
 80056ac:	428b      	cmp	r3, r1
 80056ae:	bf02      	ittt	eq
 80056b0:	6819      	ldreq	r1, [r3, #0]
 80056b2:	685b      	ldreq	r3, [r3, #4]
 80056b4:	1809      	addeq	r1, r1, r0
 80056b6:	6063      	str	r3, [r4, #4]
 80056b8:	bf08      	it	eq
 80056ba:	6021      	streq	r1, [r4, #0]
 80056bc:	6054      	str	r4, [r2, #4]
 80056be:	e7ca      	b.n	8005656 <_free_r+0x22>
 80056c0:	bd38      	pop	{r3, r4, r5, pc}
 80056c2:	bf00      	nop
 80056c4:	20000188 	.word	0x20000188

080056c8 <_init>:
 80056c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ca:	bf00      	nop
 80056cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ce:	bc08      	pop	{r3}
 80056d0:	469e      	mov	lr, r3
 80056d2:	4770      	bx	lr

080056d4 <_fini>:
 80056d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d6:	bf00      	nop
 80056d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056da:	bc08      	pop	{r3}
 80056dc:	469e      	mov	lr, r3
 80056de:	4770      	bx	lr
