
icm42688.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ddc8  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e8  0800dfc0  0800dfc0  0000efc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8a8  0800e8a8  000101f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8a8  0800e8a8  0000f8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8b0  0800e8b0  000101f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8b0  0800e8b0  0000f8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e8b4  0800e8b4  0000f8b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800e8b8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006dc  200001f0  0800eaa8  000101f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008cc  0800eaa8  000108cc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000101f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f6ba  00000000  00000000  00010226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046d2  00000000  00000000  0002f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001930  00000000  00000000  00033fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000132e  00000000  00000000  000358e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f3bb  00000000  00000000  00036c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020c5d  00000000  00000000  00065fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012fc73  00000000  00000000  00086c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b68a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081a8  00000000  00000000  001b68e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001bea8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001f0 	.word	0x200001f0
 8000214:	00000000 	.word	0x00000000
 8000218:	0800dfa8 	.word	0x0800dfa8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001f4 	.word	0x200001f4
 8000234:	0800dfa8 	.word	0x0800dfa8

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_drsub>:
 8000248:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800024c:	e002      	b.n	8000254 <__adddf3>
 800024e:	bf00      	nop

08000250 <__aeabi_dsub>:
 8000250:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000254 <__adddf3>:
 8000254:	b530      	push	{r4, r5, lr}
 8000256:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025e:	ea94 0f05 	teq	r4, r5
 8000262:	bf08      	it	eq
 8000264:	ea90 0f02 	teqeq	r0, r2
 8000268:	bf1f      	itttt	ne
 800026a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000272:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000276:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027a:	f000 80e2 	beq.w	8000442 <__adddf3+0x1ee>
 800027e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000282:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000286:	bfb8      	it	lt
 8000288:	426d      	neglt	r5, r5
 800028a:	dd0c      	ble.n	80002a6 <__adddf3+0x52>
 800028c:	442c      	add	r4, r5
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	ea82 0000 	eor.w	r0, r2, r0
 800029a:	ea83 0101 	eor.w	r1, r3, r1
 800029e:	ea80 0202 	eor.w	r2, r0, r2
 80002a2:	ea81 0303 	eor.w	r3, r1, r3
 80002a6:	2d36      	cmp	r5, #54	@ 0x36
 80002a8:	bf88      	it	hi
 80002aa:	bd30      	pophi	{r4, r5, pc}
 80002ac:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x70>
 80002be:	4240      	negs	r0, r0
 80002c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x84>
 80002d2:	4252      	negs	r2, r2
 80002d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d8:	ea94 0f05 	teq	r4, r5
 80002dc:	f000 80a7 	beq.w	800042e <__adddf3+0x1da>
 80002e0:	f1a4 0401 	sub.w	r4, r4, #1
 80002e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e8:	db0d      	blt.n	8000306 <__adddf3+0xb2>
 80002ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ee:	fa22 f205 	lsr.w	r2, r2, r5
 80002f2:	1880      	adds	r0, r0, r2
 80002f4:	f141 0100 	adc.w	r1, r1, #0
 80002f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002fc:	1880      	adds	r0, r0, r2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	4159      	adcs	r1, r3
 8000304:	e00e      	b.n	8000324 <__adddf3+0xd0>
 8000306:	f1a5 0520 	sub.w	r5, r5, #32
 800030a:	f10e 0e20 	add.w	lr, lr, #32
 800030e:	2a01      	cmp	r2, #1
 8000310:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000314:	bf28      	it	cs
 8000316:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	18c0      	adds	r0, r0, r3
 8000320:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000324:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000328:	d507      	bpl.n	800033a <__adddf3+0xe6>
 800032a:	f04f 0e00 	mov.w	lr, #0
 800032e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000332:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000336:	eb6e 0101 	sbc.w	r1, lr, r1
 800033a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800033e:	d31b      	bcc.n	8000378 <__adddf3+0x124>
 8000340:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000344:	d30c      	bcc.n	8000360 <__adddf3+0x10c>
 8000346:	0849      	lsrs	r1, r1, #1
 8000348:	ea5f 0030 	movs.w	r0, r0, rrx
 800034c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000350:	f104 0401 	add.w	r4, r4, #1
 8000354:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000358:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800035c:	f080 809a 	bcs.w	8000494 <__adddf3+0x240>
 8000360:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	ea41 0105 	orr.w	r1, r1, r5
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800037c:	4140      	adcs	r0, r0
 800037e:	eb41 0101 	adc.w	r1, r1, r1
 8000382:	3c01      	subs	r4, #1
 8000384:	bf28      	it	cs
 8000386:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800038a:	d2e9      	bcs.n	8000360 <__adddf3+0x10c>
 800038c:	f091 0f00 	teq	r1, #0
 8000390:	bf04      	itt	eq
 8000392:	4601      	moveq	r1, r0
 8000394:	2000      	moveq	r0, #0
 8000396:	fab1 f381 	clz	r3, r1
 800039a:	bf08      	it	eq
 800039c:	3320      	addeq	r3, #32
 800039e:	f1a3 030b 	sub.w	r3, r3, #11
 80003a2:	f1b3 0220 	subs.w	r2, r3, #32
 80003a6:	da0c      	bge.n	80003c2 <__adddf3+0x16e>
 80003a8:	320c      	adds	r2, #12
 80003aa:	dd08      	ble.n	80003be <__adddf3+0x16a>
 80003ac:	f102 0c14 	add.w	ip, r2, #20
 80003b0:	f1c2 020c 	rsb	r2, r2, #12
 80003b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b8:	fa21 f102 	lsr.w	r1, r1, r2
 80003bc:	e00c      	b.n	80003d8 <__adddf3+0x184>
 80003be:	f102 0214 	add.w	r2, r2, #20
 80003c2:	bfd8      	it	le
 80003c4:	f1c2 0c20 	rsble	ip, r2, #32
 80003c8:	fa01 f102 	lsl.w	r1, r1, r2
 80003cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d0:	bfdc      	itt	le
 80003d2:	ea41 010c 	orrle.w	r1, r1, ip
 80003d6:	4090      	lslle	r0, r2
 80003d8:	1ae4      	subs	r4, r4, r3
 80003da:	bfa2      	ittt	ge
 80003dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e0:	4329      	orrge	r1, r5
 80003e2:	bd30      	popge	{r4, r5, pc}
 80003e4:	ea6f 0404 	mvn.w	r4, r4
 80003e8:	3c1f      	subs	r4, #31
 80003ea:	da1c      	bge.n	8000426 <__adddf3+0x1d2>
 80003ec:	340c      	adds	r4, #12
 80003ee:	dc0e      	bgt.n	800040e <__adddf3+0x1ba>
 80003f0:	f104 0414 	add.w	r4, r4, #20
 80003f4:	f1c4 0220 	rsb	r2, r4, #32
 80003f8:	fa20 f004 	lsr.w	r0, r0, r4
 80003fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000400:	ea40 0003 	orr.w	r0, r0, r3
 8000404:	fa21 f304 	lsr.w	r3, r1, r4
 8000408:	ea45 0103 	orr.w	r1, r5, r3
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f1c4 040c 	rsb	r4, r4, #12
 8000412:	f1c4 0220 	rsb	r2, r4, #32
 8000416:	fa20 f002 	lsr.w	r0, r0, r2
 800041a:	fa01 f304 	lsl.w	r3, r1, r4
 800041e:	ea40 0003 	orr.w	r0, r0, r3
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	fa21 f004 	lsr.w	r0, r1, r4
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	f094 0f00 	teq	r4, #0
 8000432:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000436:	bf06      	itte	eq
 8000438:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800043c:	3401      	addeq	r4, #1
 800043e:	3d01      	subne	r5, #1
 8000440:	e74e      	b.n	80002e0 <__adddf3+0x8c>
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf18      	it	ne
 8000448:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044c:	d029      	beq.n	80004a2 <__adddf3+0x24e>
 800044e:	ea94 0f05 	teq	r4, r5
 8000452:	bf08      	it	eq
 8000454:	ea90 0f02 	teqeq	r0, r2
 8000458:	d005      	beq.n	8000466 <__adddf3+0x212>
 800045a:	ea54 0c00 	orrs.w	ip, r4, r0
 800045e:	bf04      	itt	eq
 8000460:	4619      	moveq	r1, r3
 8000462:	4610      	moveq	r0, r2
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	ea91 0f03 	teq	r1, r3
 800046a:	bf1e      	ittt	ne
 800046c:	2100      	movne	r1, #0
 800046e:	2000      	movne	r0, #0
 8000470:	bd30      	popne	{r4, r5, pc}
 8000472:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000476:	d105      	bne.n	8000484 <__adddf3+0x230>
 8000478:	0040      	lsls	r0, r0, #1
 800047a:	4149      	adcs	r1, r1
 800047c:	bf28      	it	cs
 800047e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000482:	bd30      	pop	{r4, r5, pc}
 8000484:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000488:	bf3c      	itt	cc
 800048a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800048e:	bd30      	popcc	{r4, r5, pc}
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000498:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800049c:	f04f 0000 	mov.w	r0, #0
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf1a      	itte	ne
 80004a8:	4619      	movne	r1, r3
 80004aa:	4610      	movne	r0, r2
 80004ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b0:	bf1c      	itt	ne
 80004b2:	460b      	movne	r3, r1
 80004b4:	4602      	movne	r2, r0
 80004b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ba:	bf06      	itte	eq
 80004bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c0:	ea91 0f03 	teqeq	r1, r3
 80004c4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	bf00      	nop

080004cc <__aeabi_ui2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f04f 0500 	mov.w	r5, #0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e750      	b.n	800038c <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_i2d>:
 80004ec:	f090 0f00 	teq	r0, #0
 80004f0:	bf04      	itt	eq
 80004f2:	2100      	moveq	r1, #0
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000500:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	f04f 0100 	mov.w	r1, #0
 800050c:	e73e      	b.n	800038c <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_f2d>:
 8000510:	0042      	lsls	r2, r0, #1
 8000512:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000516:	ea4f 0131 	mov.w	r1, r1, rrx
 800051a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051e:	bf1f      	itttt	ne
 8000520:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000524:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000528:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800052c:	4770      	bxne	lr
 800052e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000532:	bf08      	it	eq
 8000534:	4770      	bxeq	lr
 8000536:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800053a:	bf04      	itt	eq
 800053c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000550:	e71c      	b.n	800038c <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_ul2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f04f 0500 	mov.w	r5, #0
 8000562:	e00a      	b.n	800057a <__aeabi_l2d+0x16>

08000564 <__aeabi_l2d>:
 8000564:	ea50 0201 	orrs.w	r2, r0, r1
 8000568:	bf08      	it	eq
 800056a:	4770      	bxeq	lr
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000572:	d502      	bpl.n	800057a <__aeabi_l2d+0x16>
 8000574:	4240      	negs	r0, r0
 8000576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000582:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000586:	f43f aed8 	beq.w	800033a <__adddf3+0xe6>
 800058a:	f04f 0203 	mov.w	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b2:	ea40 000e 	orr.w	r0, r0, lr
 80005b6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ba:	4414      	add	r4, r2
 80005bc:	e6bd      	b.n	800033a <__adddf3+0xe6>
 80005be:	bf00      	nop

080005c0 <__aeabi_dmul>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ce:	bf1d      	ittte	ne
 80005d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d4:	ea94 0f0c 	teqne	r4, ip
 80005d8:	ea95 0f0c 	teqne	r5, ip
 80005dc:	f000 f8de 	bleq	800079c <__aeabi_dmul+0x1dc>
 80005e0:	442c      	add	r4, r5
 80005e2:	ea81 0603 	eor.w	r6, r1, r3
 80005e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f2:	bf18      	it	ne
 80005f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000600:	d038      	beq.n	8000674 <__aeabi_dmul+0xb4>
 8000602:	fba0 ce02 	umull	ip, lr, r0, r2
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000612:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000616:	f04f 0600 	mov.w	r6, #0
 800061a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061e:	f09c 0f00 	teq	ip, #0
 8000622:	bf18      	it	ne
 8000624:	f04e 0e01 	orrne.w	lr, lr, #1
 8000628:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800062c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000630:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000634:	d204      	bcs.n	8000640 <__aeabi_dmul+0x80>
 8000636:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063a:	416d      	adcs	r5, r5
 800063c:	eb46 0606 	adc.w	r6, r6, r6
 8000640:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000644:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000648:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800064c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000650:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000654:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000658:	bf88      	it	hi
 800065a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800065e:	d81e      	bhi.n	800069e <__aeabi_dmul+0xde>
 8000660:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000664:	bf08      	it	eq
 8000666:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066a:	f150 0000 	adcs.w	r0, r0, #0
 800066e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000678:	ea46 0101 	orr.w	r1, r6, r1
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	ea81 0103 	eor.w	r1, r1, r3
 8000684:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000688:	bfc2      	ittt	gt
 800068a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000692:	bd70      	popgt	{r4, r5, r6, pc}
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000698:	f04f 0e00 	mov.w	lr, #0
 800069c:	3c01      	subs	r4, #1
 800069e:	f300 80ab 	bgt.w	80007f8 <__aeabi_dmul+0x238>
 80006a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006a6:	bfde      	ittt	le
 80006a8:	2000      	movle	r0, #0
 80006aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ae:	bd70      	pople	{r4, r5, r6, pc}
 80006b0:	f1c4 0400 	rsb	r4, r4, #0
 80006b4:	3c20      	subs	r4, #32
 80006b6:	da35      	bge.n	8000724 <__aeabi_dmul+0x164>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc1b      	bgt.n	80006f4 <__aeabi_dmul+0x134>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f305 	lsl.w	r3, r0, r5
 80006c8:	fa20 f004 	lsr.w	r0, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	fa21 f604 	lsr.w	r6, r1, r4
 80006e4:	eb42 0106 	adc.w	r1, r2, r6
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 040c 	rsb	r4, r4, #12
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000700:	fa20 f005 	lsr.w	r0, r0, r5
 8000704:	fa01 f204 	lsl.w	r2, r1, r4
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000714:	f141 0100 	adc.w	r1, r1, #0
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f205 	lsl.w	r2, r0, r5
 800072c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000730:	fa20 f304 	lsr.w	r3, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea43 0302 	orr.w	r3, r3, r2
 800073c:	fa21 f004 	lsr.w	r0, r1, r4
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	fa21 f204 	lsr.w	r2, r1, r4
 8000748:	ea20 0002 	bic.w	r0, r0, r2
 800074c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f094 0f00 	teq	r4, #0
 8000760:	d10f      	bne.n	8000782 <__aeabi_dmul+0x1c2>
 8000762:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000766:	0040      	lsls	r0, r0, #1
 8000768:	eb41 0101 	adc.w	r1, r1, r1
 800076c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3c01      	subeq	r4, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1a6>
 8000776:	ea41 0106 	orr.w	r1, r1, r6
 800077a:	f095 0f00 	teq	r5, #0
 800077e:	bf18      	it	ne
 8000780:	4770      	bxne	lr
 8000782:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000786:	0052      	lsls	r2, r2, #1
 8000788:	eb43 0303 	adc.w	r3, r3, r3
 800078c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000790:	bf08      	it	eq
 8000792:	3d01      	subeq	r5, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1c6>
 8000796:	ea43 0306 	orr.w	r3, r3, r6
 800079a:	4770      	bx	lr
 800079c:	ea94 0f0c 	teq	r4, ip
 80007a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a4:	bf18      	it	ne
 80007a6:	ea95 0f0c 	teqne	r5, ip
 80007aa:	d00c      	beq.n	80007c6 <__aeabi_dmul+0x206>
 80007ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b0:	bf18      	it	ne
 80007b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b6:	d1d1      	bne.n	800075c <__aeabi_dmul+0x19c>
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ca:	bf06      	itte	eq
 80007cc:	4610      	moveq	r0, r2
 80007ce:	4619      	moveq	r1, r3
 80007d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d4:	d019      	beq.n	800080a <__aeabi_dmul+0x24a>
 80007d6:	ea94 0f0c 	teq	r4, ip
 80007da:	d102      	bne.n	80007e2 <__aeabi_dmul+0x222>
 80007dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e0:	d113      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007e2:	ea95 0f0c 	teq	r5, ip
 80007e6:	d105      	bne.n	80007f4 <__aeabi_dmul+0x234>
 80007e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ec:	bf1c      	itt	ne
 80007ee:	4610      	movne	r0, r2
 80007f0:	4619      	movne	r1, r3
 80007f2:	d10a      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007f4:	ea81 0103 	eor.w	r1, r1, r3
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000800:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	bd70      	pop	{r4, r5, r6, pc}
 800080a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800080e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000812:	bd70      	pop	{r4, r5, r6, pc}

08000814 <__aeabi_ddiv>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800081a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800081e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000822:	bf1d      	ittte	ne
 8000824:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000828:	ea94 0f0c 	teqne	r4, ip
 800082c:	ea95 0f0c 	teqne	r5, ip
 8000830:	f000 f8a7 	bleq	8000982 <__aeabi_ddiv+0x16e>
 8000834:	eba4 0405 	sub.w	r4, r4, r5
 8000838:	ea81 0e03 	eor.w	lr, r1, r3
 800083c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000840:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000844:	f000 8088 	beq.w	8000958 <__aeabi_ddiv+0x144>
 8000848:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800084c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000850:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000854:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000858:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800085c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000860:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000864:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000868:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800086c:	429d      	cmp	r5, r3
 800086e:	bf08      	it	eq
 8000870:	4296      	cmpeq	r6, r2
 8000872:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000876:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800087a:	d202      	bcs.n	8000882 <__aeabi_ddiv+0x6e>
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	1ab6      	subs	r6, r6, r2
 8000884:	eb65 0503 	sbc.w	r5, r5, r3
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000892:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f4:	d018      	beq.n	8000928 <__aeabi_ddiv+0x114>
 80008f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000906:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000912:	d1c0      	bne.n	8000896 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000918:	d10b      	bne.n	8000932 <__aeabi_ddiv+0x11e>
 800091a:	ea41 0100 	orr.w	r1, r1, r0
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000926:	e7b6      	b.n	8000896 <__aeabi_ddiv+0x82>
 8000928:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800092c:	bf04      	itt	eq
 800092e:	4301      	orreq	r1, r0
 8000930:	2000      	moveq	r0, #0
 8000932:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000936:	bf88      	it	hi
 8000938:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800093c:	f63f aeaf 	bhi.w	800069e <__aeabi_dmul+0xde>
 8000940:	ebb5 0c03 	subs.w	ip, r5, r3
 8000944:	bf04      	itt	eq
 8000946:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094e:	f150 0000 	adcs.w	r0, r0, #0
 8000952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800095c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000960:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000964:	bfc2      	ittt	gt
 8000966:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096e:	bd70      	popgt	{r4, r5, r6, pc}
 8000970:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000974:	f04f 0e00 	mov.w	lr, #0
 8000978:	3c01      	subs	r4, #1
 800097a:	e690      	b.n	800069e <__aeabi_dmul+0xde>
 800097c:	ea45 0e06 	orr.w	lr, r5, r6
 8000980:	e68d      	b.n	800069e <__aeabi_dmul+0xde>
 8000982:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000986:	ea94 0f0c 	teq	r4, ip
 800098a:	bf08      	it	eq
 800098c:	ea95 0f0c 	teqeq	r5, ip
 8000990:	f43f af3b 	beq.w	800080a <__aeabi_dmul+0x24a>
 8000994:	ea94 0f0c 	teq	r4, ip
 8000998:	d10a      	bne.n	80009b0 <__aeabi_ddiv+0x19c>
 800099a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099e:	f47f af34 	bne.w	800080a <__aeabi_dmul+0x24a>
 80009a2:	ea95 0f0c 	teq	r5, ip
 80009a6:	f47f af25 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e72c      	b.n	800080a <__aeabi_dmul+0x24a>
 80009b0:	ea95 0f0c 	teq	r5, ip
 80009b4:	d106      	bne.n	80009c4 <__aeabi_ddiv+0x1b0>
 80009b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ba:	f43f aefd 	beq.w	80007b8 <__aeabi_dmul+0x1f8>
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	e722      	b.n	800080a <__aeabi_dmul+0x24a>
 80009c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ce:	f47f aec5 	bne.w	800075c <__aeabi_dmul+0x19c>
 80009d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d6:	f47f af0d 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009de:	f47f aeeb 	bne.w	80007b8 <__aeabi_dmul+0x1f8>
 80009e2:	e712      	b.n	800080a <__aeabi_dmul+0x24a>

080009e4 <__gedf2>:
 80009e4:	f04f 3cff 	mov.w	ip, #4294967295
 80009e8:	e006      	b.n	80009f8 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__ledf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	e002      	b.n	80009f8 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__cmpdf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0e:	d01b      	beq.n	8000a48 <__cmpdf2+0x54>
 8000a10:	b001      	add	sp, #4
 8000a12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a16:	bf0c      	ite	eq
 8000a18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a1c:	ea91 0f03 	teqne	r1, r3
 8000a20:	bf02      	ittt	eq
 8000a22:	ea90 0f02 	teqeq	r0, r2
 8000a26:	2000      	moveq	r0, #0
 8000a28:	4770      	bxeq	lr
 8000a2a:	f110 0f00 	cmn.w	r0, #0
 8000a2e:	ea91 0f03 	teq	r1, r3
 8000a32:	bf58      	it	pl
 8000a34:	4299      	cmppl	r1, r3
 8000a36:	bf08      	it	eq
 8000a38:	4290      	cmpeq	r0, r2
 8000a3a:	bf2c      	ite	cs
 8000a3c:	17d8      	asrcs	r0, r3, #31
 8000a3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a42:	f040 0001 	orr.w	r0, r0, #1
 8000a46:	4770      	bx	lr
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d102      	bne.n	8000a58 <__cmpdf2+0x64>
 8000a52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a56:	d107      	bne.n	8000a68 <__cmpdf2+0x74>
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	d1d6      	bne.n	8000a10 <__cmpdf2+0x1c>
 8000a62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a66:	d0d3      	beq.n	8000a10 <__cmpdf2+0x1c>
 8000a68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdrcmple>:
 8000a70:	4684      	mov	ip, r0
 8000a72:	4610      	mov	r0, r2
 8000a74:	4662      	mov	r2, ip
 8000a76:	468c      	mov	ip, r1
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	e000      	b.n	8000a80 <__aeabi_cdcmpeq>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cdcmpeq>:
 8000a80:	b501      	push	{r0, lr}
 8000a82:	f7ff ffb7 	bl	80009f4 <__cmpdf2>
 8000a86:	2800      	cmp	r0, #0
 8000a88:	bf48      	it	mi
 8000a8a:	f110 0f00 	cmnmi.w	r0, #0
 8000a8e:	bd01      	pop	{r0, pc}

08000a90 <__aeabi_dcmpeq>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff fff4 	bl	8000a80 <__aeabi_cdcmpeq>
 8000a98:	bf0c      	ite	eq
 8000a9a:	2001      	moveq	r0, #1
 8000a9c:	2000      	movne	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmplt>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffea 	bl	8000a80 <__aeabi_cdcmpeq>
 8000aac:	bf34      	ite	cc
 8000aae:	2001      	movcc	r0, #1
 8000ab0:	2000      	movcs	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmple>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffe0 	bl	8000a80 <__aeabi_cdcmpeq>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpge>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffce 	bl	8000a70 <__aeabi_cdrcmple>
 8000ad4:	bf94      	ite	ls
 8000ad6:	2001      	movls	r0, #1
 8000ad8:	2000      	movhi	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpgt>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffc4 	bl	8000a70 <__aeabi_cdrcmple>
 8000ae8:	bf34      	ite	cc
 8000aea:	2001      	movcc	r0, #1
 8000aec:	2000      	movcs	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpun>:
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x10>
 8000afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b02:	d10a      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d102      	bne.n	8000b14 <__aeabi_dcmpun+0x20>
 8000b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0001 	mov.w	r0, #1
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2iz>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b28:	d215      	bcs.n	8000b56 <__aeabi_d2iz+0x36>
 8000b2a:	d511      	bpl.n	8000b50 <__aeabi_d2iz+0x30>
 8000b2c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b34:	d912      	bls.n	8000b5c <__aeabi_d2iz+0x3c>
 8000b36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	4240      	negne	r0, r0
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5a:	d105      	bne.n	8000b68 <__aeabi_d2iz+0x48>
 8000b5c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b60:	bf08      	it	eq
 8000b62:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <__aeabi_d2f>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b78:	bf24      	itt	cs
 8000b7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b82:	d90d      	bls.n	8000ba0 <__aeabi_d2f+0x30>
 8000b84:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b90:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b98:	bf08      	it	eq
 8000b9a:	f020 0001 	biceq.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ba4:	d121      	bne.n	8000bea <__aeabi_d2f+0x7a>
 8000ba6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000baa:	bfbc      	itt	lt
 8000bac:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bb0:	4770      	bxlt	lr
 8000bb2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bba:	f1c2 0218 	rsb	r2, r2, #24
 8000bbe:	f1c2 0c20 	rsb	ip, r2, #32
 8000bc2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bca:	bf18      	it	ne
 8000bcc:	f040 0001 	orrne.w	r0, r0, #1
 8000bd0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bdc:	ea40 000c 	orr.w	r0, r0, ip
 8000be0:	fa23 f302 	lsr.w	r3, r3, r2
 8000be4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be8:	e7cc      	b.n	8000b84 <__aeabi_d2f+0x14>
 8000bea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bee:	d107      	bne.n	8000c00 <__aeabi_d2f+0x90>
 8000bf0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf4:	bf1e      	ittt	ne
 8000bf6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bfa:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bfe:	4770      	bxne	lr
 8000c00:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c04:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c08:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__aeabi_uldivmod>:
 8000c10:	b953      	cbnz	r3, 8000c28 <__aeabi_uldivmod+0x18>
 8000c12:	b94a      	cbnz	r2, 8000c28 <__aeabi_uldivmod+0x18>
 8000c14:	2900      	cmp	r1, #0
 8000c16:	bf08      	it	eq
 8000c18:	2800      	cmpeq	r0, #0
 8000c1a:	bf1c      	itt	ne
 8000c1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c20:	f04f 30ff 	movne.w	r0, #4294967295
 8000c24:	f000 b97e 	b.w	8000f24 <__aeabi_idiv0>
 8000c28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c30:	f000 f806 	bl	8000c40 <__udivmoddi4>
 8000c34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3c:	b004      	add	sp, #16
 8000c3e:	4770      	bx	lr

08000c40 <__udivmoddi4>:
 8000c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c44:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000c46:	460c      	mov	r4, r1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d14d      	bne.n	8000ce8 <__udivmoddi4+0xa8>
 8000c4c:	428a      	cmp	r2, r1
 8000c4e:	460f      	mov	r7, r1
 8000c50:	4684      	mov	ip, r0
 8000c52:	4696      	mov	lr, r2
 8000c54:	fab2 f382 	clz	r3, r2
 8000c58:	d960      	bls.n	8000d1c <__udivmoddi4+0xdc>
 8000c5a:	b14b      	cbz	r3, 8000c70 <__udivmoddi4+0x30>
 8000c5c:	fa02 fe03 	lsl.w	lr, r2, r3
 8000c60:	f1c3 0220 	rsb	r2, r3, #32
 8000c64:	409f      	lsls	r7, r3
 8000c66:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c6e:	4317      	orrs	r7, r2
 8000c70:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000c74:	fa1f f48e 	uxth.w	r4, lr
 8000c78:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c7c:	fbb7 f1f6 	udiv	r1, r7, r6
 8000c80:	fb06 7711 	mls	r7, r6, r1, r7
 8000c84:	fb01 f004 	mul.w	r0, r1, r4
 8000c88:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c8c:	4290      	cmp	r0, r2
 8000c8e:	d908      	bls.n	8000ca2 <__udivmoddi4+0x62>
 8000c90:	eb1e 0202 	adds.w	r2, lr, r2
 8000c94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c98:	d202      	bcs.n	8000ca0 <__udivmoddi4+0x60>
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	f200 812d 	bhi.w	8000efa <__udivmoddi4+0x2ba>
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	1a12      	subs	r2, r2, r0
 8000ca4:	fa1f fc8c 	uxth.w	ip, ip
 8000ca8:	fbb2 f0f6 	udiv	r0, r2, r6
 8000cac:	fb06 2210 	mls	r2, r6, r0, r2
 8000cb0:	fb00 f404 	mul.w	r4, r0, r4
 8000cb4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000cb8:	4564      	cmp	r4, ip
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x8e>
 8000cbc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000cc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cc4:	d202      	bcs.n	8000ccc <__udivmoddi4+0x8c>
 8000cc6:	4564      	cmp	r4, ip
 8000cc8:	f200 811a 	bhi.w	8000f00 <__udivmoddi4+0x2c0>
 8000ccc:	4610      	mov	r0, r2
 8000cce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cd2:	ebac 0c04 	sub.w	ip, ip, r4
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	b125      	cbz	r5, 8000ce4 <__udivmoddi4+0xa4>
 8000cda:	fa2c f303 	lsr.w	r3, ip, r3
 8000cde:	2200      	movs	r2, #0
 8000ce0:	e9c5 3200 	strd	r3, r2, [r5]
 8000ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d905      	bls.n	8000cf8 <__udivmoddi4+0xb8>
 8000cec:	b10d      	cbz	r5, 8000cf2 <__udivmoddi4+0xb2>
 8000cee:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4608      	mov	r0, r1
 8000cf6:	e7f5      	b.n	8000ce4 <__udivmoddi4+0xa4>
 8000cf8:	fab3 f183 	clz	r1, r3
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	d14d      	bne.n	8000d9c <__udivmoddi4+0x15c>
 8000d00:	42a3      	cmp	r3, r4
 8000d02:	f0c0 80f2 	bcc.w	8000eea <__udivmoddi4+0x2aa>
 8000d06:	4290      	cmp	r0, r2
 8000d08:	f080 80ef 	bcs.w	8000eea <__udivmoddi4+0x2aa>
 8000d0c:	4606      	mov	r6, r0
 8000d0e:	4623      	mov	r3, r4
 8000d10:	4608      	mov	r0, r1
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	d0e6      	beq.n	8000ce4 <__udivmoddi4+0xa4>
 8000d16:	e9c5 6300 	strd	r6, r3, [r5]
 8000d1a:	e7e3      	b.n	8000ce4 <__udivmoddi4+0xa4>
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f040 80a2 	bne.w	8000e66 <__udivmoddi4+0x226>
 8000d22:	1a8a      	subs	r2, r1, r2
 8000d24:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000d28:	fa1f f68e 	uxth.w	r6, lr
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fbb2 f4f7 	udiv	r4, r2, r7
 8000d32:	fb07 2014 	mls	r0, r7, r4, r2
 8000d36:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d3e:	fb06 f004 	mul.w	r0, r6, r4
 8000d42:	4290      	cmp	r0, r2
 8000d44:	d90f      	bls.n	8000d66 <__udivmoddi4+0x126>
 8000d46:	eb1e 0202 	adds.w	r2, lr, r2
 8000d4a:	f104 38ff 	add.w	r8, r4, #4294967295
 8000d4e:	bf2c      	ite	cs
 8000d50:	f04f 0901 	movcs.w	r9, #1
 8000d54:	f04f 0900 	movcc.w	r9, #0
 8000d58:	4290      	cmp	r0, r2
 8000d5a:	d903      	bls.n	8000d64 <__udivmoddi4+0x124>
 8000d5c:	f1b9 0f00 	cmp.w	r9, #0
 8000d60:	f000 80c8 	beq.w	8000ef4 <__udivmoddi4+0x2b4>
 8000d64:	4644      	mov	r4, r8
 8000d66:	1a12      	subs	r2, r2, r0
 8000d68:	fa1f fc8c 	uxth.w	ip, ip
 8000d6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d70:	fb07 2210 	mls	r2, r7, r0, r2
 8000d74:	fb00 f606 	mul.w	r6, r0, r6
 8000d78:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d7c:	4566      	cmp	r6, ip
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x152>
 8000d80:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d88:	d202      	bcs.n	8000d90 <__udivmoddi4+0x150>
 8000d8a:	4566      	cmp	r6, ip
 8000d8c:	f200 80bb 	bhi.w	8000f06 <__udivmoddi4+0x2c6>
 8000d90:	4610      	mov	r0, r2
 8000d92:	ebac 0c06 	sub.w	ip, ip, r6
 8000d96:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d9a:	e79d      	b.n	8000cd8 <__udivmoddi4+0x98>
 8000d9c:	f1c1 0620 	rsb	r6, r1, #32
 8000da0:	408b      	lsls	r3, r1
 8000da2:	fa04 fe01 	lsl.w	lr, r4, r1
 8000da6:	fa22 f706 	lsr.w	r7, r2, r6
 8000daa:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dae:	40f4      	lsrs	r4, r6
 8000db0:	408a      	lsls	r2, r1
 8000db2:	431f      	orrs	r7, r3
 8000db4:	ea4e 030c 	orr.w	r3, lr, ip
 8000db8:	fa00 fe01 	lsl.w	lr, r0, r1
 8000dbc:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dc0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dc4:	fa1f fc87 	uxth.w	ip, r7
 8000dc8:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dcc:	fb08 4410 	mls	r4, r8, r0, r4
 8000dd0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd4:	fb00 f90c 	mul.w	r9, r0, ip
 8000dd8:	45a1      	cmp	r9, r4
 8000dda:	d90e      	bls.n	8000dfa <__udivmoddi4+0x1ba>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 3aff 	add.w	sl, r0, #4294967295
 8000de2:	bf2c      	ite	cs
 8000de4:	f04f 0b01 	movcs.w	fp, #1
 8000de8:	f04f 0b00 	movcc.w	fp, #0
 8000dec:	45a1      	cmp	r9, r4
 8000dee:	d903      	bls.n	8000df8 <__udivmoddi4+0x1b8>
 8000df0:	f1bb 0f00 	cmp.w	fp, #0
 8000df4:	f000 8093 	beq.w	8000f1e <__udivmoddi4+0x2de>
 8000df8:	4650      	mov	r0, sl
 8000dfa:	eba4 0409 	sub.w	r4, r4, r9
 8000dfe:	fa1f f983 	uxth.w	r9, r3
 8000e02:	fbb4 f3f8 	udiv	r3, r4, r8
 8000e06:	fb08 4413 	mls	r4, r8, r3, r4
 8000e0a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e0e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e12:	45a4      	cmp	ip, r4
 8000e14:	d906      	bls.n	8000e24 <__udivmoddi4+0x1e4>
 8000e16:	193c      	adds	r4, r7, r4
 8000e18:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e1c:	d201      	bcs.n	8000e22 <__udivmoddi4+0x1e2>
 8000e1e:	45a4      	cmp	ip, r4
 8000e20:	d87a      	bhi.n	8000f18 <__udivmoddi4+0x2d8>
 8000e22:	4643      	mov	r3, r8
 8000e24:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e28:	eba4 040c 	sub.w	r4, r4, ip
 8000e2c:	fba0 9802 	umull	r9, r8, r0, r2
 8000e30:	4544      	cmp	r4, r8
 8000e32:	46cc      	mov	ip, r9
 8000e34:	4643      	mov	r3, r8
 8000e36:	d302      	bcc.n	8000e3e <__udivmoddi4+0x1fe>
 8000e38:	d106      	bne.n	8000e48 <__udivmoddi4+0x208>
 8000e3a:	45ce      	cmp	lr, r9
 8000e3c:	d204      	bcs.n	8000e48 <__udivmoddi4+0x208>
 8000e3e:	3801      	subs	r0, #1
 8000e40:	ebb9 0c02 	subs.w	ip, r9, r2
 8000e44:	eb68 0307 	sbc.w	r3, r8, r7
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x222>
 8000e4a:	ebbe 020c 	subs.w	r2, lr, ip
 8000e4e:	eb64 0403 	sbc.w	r4, r4, r3
 8000e52:	fa04 f606 	lsl.w	r6, r4, r6
 8000e56:	fa22 f301 	lsr.w	r3, r2, r1
 8000e5a:	40cc      	lsrs	r4, r1
 8000e5c:	431e      	orrs	r6, r3
 8000e5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e62:	2100      	movs	r1, #0
 8000e64:	e73e      	b.n	8000ce4 <__udivmoddi4+0xa4>
 8000e66:	fa02 fe03 	lsl.w	lr, r2, r3
 8000e6a:	f1c3 0120 	rsb	r1, r3, #32
 8000e6e:	fa04 f203 	lsl.w	r2, r4, r3
 8000e72:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e76:	40cc      	lsrs	r4, r1
 8000e78:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e7c:	fa20 f101 	lsr.w	r1, r0, r1
 8000e80:	fa1f f68e 	uxth.w	r6, lr
 8000e84:	fbb4 f0f7 	udiv	r0, r4, r7
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	fb07 4410 	mls	r4, r7, r0, r4
 8000e8e:	0c11      	lsrs	r1, r2, #16
 8000e90:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000e94:	fb00 f406 	mul.w	r4, r0, r6
 8000e98:	428c      	cmp	r4, r1
 8000e9a:	d90e      	bls.n	8000eba <__udivmoddi4+0x27a>
 8000e9c:	eb1e 0101 	adds.w	r1, lr, r1
 8000ea0:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ea4:	bf2c      	ite	cs
 8000ea6:	f04f 0901 	movcs.w	r9, #1
 8000eaa:	f04f 0900 	movcc.w	r9, #0
 8000eae:	428c      	cmp	r4, r1
 8000eb0:	d902      	bls.n	8000eb8 <__udivmoddi4+0x278>
 8000eb2:	f1b9 0f00 	cmp.w	r9, #0
 8000eb6:	d02c      	beq.n	8000f12 <__udivmoddi4+0x2d2>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	1b09      	subs	r1, r1, r4
 8000ebc:	b292      	uxth	r2, r2
 8000ebe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ec2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ec6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eca:	fb04 f106 	mul.w	r1, r4, r6
 8000ece:	4291      	cmp	r1, r2
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x2a2>
 8000ed2:	eb1e 0202 	adds.w	r2, lr, r2
 8000ed6:	f104 38ff 	add.w	r8, r4, #4294967295
 8000eda:	d201      	bcs.n	8000ee0 <__udivmoddi4+0x2a0>
 8000edc:	4291      	cmp	r1, r2
 8000ede:	d815      	bhi.n	8000f0c <__udivmoddi4+0x2cc>
 8000ee0:	4644      	mov	r4, r8
 8000ee2:	1a52      	subs	r2, r2, r1
 8000ee4:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000ee8:	e721      	b.n	8000d2e <__udivmoddi4+0xee>
 8000eea:	1a86      	subs	r6, r0, r2
 8000eec:	eb64 0303 	sbc.w	r3, r4, r3
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	e70e      	b.n	8000d12 <__udivmoddi4+0xd2>
 8000ef4:	3c02      	subs	r4, #2
 8000ef6:	4472      	add	r2, lr
 8000ef8:	e735      	b.n	8000d66 <__udivmoddi4+0x126>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4472      	add	r2, lr
 8000efe:	e6d0      	b.n	8000ca2 <__udivmoddi4+0x62>
 8000f00:	44f4      	add	ip, lr
 8000f02:	3802      	subs	r0, #2
 8000f04:	e6e3      	b.n	8000cce <__udivmoddi4+0x8e>
 8000f06:	44f4      	add	ip, lr
 8000f08:	3802      	subs	r0, #2
 8000f0a:	e742      	b.n	8000d92 <__udivmoddi4+0x152>
 8000f0c:	3c02      	subs	r4, #2
 8000f0e:	4472      	add	r2, lr
 8000f10:	e7e7      	b.n	8000ee2 <__udivmoddi4+0x2a2>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4471      	add	r1, lr
 8000f16:	e7d0      	b.n	8000eba <__udivmoddi4+0x27a>
 8000f18:	3b02      	subs	r3, #2
 8000f1a:	443c      	add	r4, r7
 8000f1c:	e782      	b.n	8000e24 <__udivmoddi4+0x1e4>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	443c      	add	r4, r7
 8000f22:	e76a      	b.n	8000dfa <__udivmoddi4+0x1ba>

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	@ 0x28
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
 8000f48:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8001008 <MX_ADC1_Init+0xe0>)
 8000f4c:	4a2f      	ldr	r2, [pc, #188]	@ (800100c <MX_ADC1_Init+0xe4>)
 8000f4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f50:	4b2d      	ldr	r3, [pc, #180]	@ (8001008 <MX_ADC1_Init+0xe0>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f56:	4b2c      	ldr	r3, [pc, #176]	@ (8001008 <MX_ADC1_Init+0xe0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001008 <MX_ADC1_Init+0xe0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f62:	4b29      	ldr	r3, [pc, #164]	@ (8001008 <MX_ADC1_Init+0xe0>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f68:	4b27      	ldr	r3, [pc, #156]	@ (8001008 <MX_ADC1_Init+0xe0>)
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f6e:	4b26      	ldr	r3, [pc, #152]	@ (8001008 <MX_ADC1_Init+0xe0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f74:	4b24      	ldr	r3, [pc, #144]	@ (8001008 <MX_ADC1_Init+0xe0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f7a:	4b23      	ldr	r3, [pc, #140]	@ (8001008 <MX_ADC1_Init+0xe0>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f80:	4b21      	ldr	r3, [pc, #132]	@ (8001008 <MX_ADC1_Init+0xe0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f88:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <MX_ADC1_Init+0xe0>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001008 <MX_ADC1_Init+0xe0>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f94:	4b1c      	ldr	r3, [pc, #112]	@ (8001008 <MX_ADC1_Init+0xe0>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001008 <MX_ADC1_Init+0xe0>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <MX_ADC1_Init+0xe0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000faa:	4817      	ldr	r0, [pc, #92]	@ (8001008 <MX_ADC1_Init+0xe0>)
 8000fac:	f002 fe82 	bl	8003cb4 <HAL_ADC_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000fb6:	f001 ffb3 	bl	8002f20 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4810      	ldr	r0, [pc, #64]	@ (8001008 <MX_ADC1_Init+0xe0>)
 8000fc6:	f003 fbd1 	bl	800476c <HAL_ADCEx_MultiModeConfigChannel>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000fd0:	f001 ffa6 	bl	8002f20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <MX_ADC1_Init+0xe8>)
 8000fd6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd8:	2306      	movs	r3, #6
 8000fda:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fe0:	237f      	movs	r3, #127	@ 0x7f
 8000fe2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	@ (8001008 <MX_ADC1_Init+0xe0>)
 8000ff2:	f002 ffab 	bl	8003f4c <HAL_ADC_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000ffc:	f001 ff90 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	3728      	adds	r7, #40	@ 0x28
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000020c 	.word	0x2000020c
 800100c:	42028000 	.word	0x42028000
 8001010:	0c900008 	.word	0x0c900008

08001014 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b0ae      	sub	sp, #184	@ 0xb8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800102c:	f107 0310 	add.w	r3, r7, #16
 8001030:	2294      	movs	r2, #148	@ 0x94
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f008 f9d0 	bl	80093da <memset>
  if(adcHandle->Instance==ADC1)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a1f      	ldr	r2, [pc, #124]	@ (80010bc <HAL_ADC_MspInit+0xa8>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d137      	bne.n	80010b4 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001044:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001048:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800104a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800104e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	4618      	mov	r0, r3
 8001058:	f004 fff8 	bl	800604c <HAL_RCCEx_PeriphCLKConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001062:	f001 ff5d 	bl	8002f20 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001066:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <HAL_ADC_MspInit+0xac>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106a:	4a15      	ldr	r2, [pc, #84]	@ (80010c0 <HAL_ADC_MspInit+0xac>)
 800106c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001070:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001072:	4b13      	ldr	r3, [pc, #76]	@ (80010c0 <HAL_ADC_MspInit+0xac>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001076:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	4b10      	ldr	r3, [pc, #64]	@ (80010c0 <HAL_ADC_MspInit+0xac>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001082:	4a0f      	ldr	r2, [pc, #60]	@ (80010c0 <HAL_ADC_MspInit+0xac>)
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800108a:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <HAL_ADC_MspInit+0xac>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	f003 0304 	and.w	r3, r3, #4
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001096:	2304      	movs	r3, #4
 8001098:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109c:	2303      	movs	r3, #3
 800109e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010ac:	4619      	mov	r1, r3
 80010ae:	4805      	ldr	r0, [pc, #20]	@ (80010c4 <HAL_ADC_MspInit+0xb0>)
 80010b0:	f003 fce4 	bl	8004a7c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010b4:	bf00      	nop
 80010b6:	37b8      	adds	r7, #184	@ 0xb8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	42028000 	.word	0x42028000
 80010c0:	40021000 	.word	0x40021000
 80010c4:	42020800 	.word	0x42020800

080010c8 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010de:	4b3b      	ldr	r3, [pc, #236]	@ (80011cc <MX_GPIO_Init+0x104>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e2:	4a3a      	ldr	r2, [pc, #232]	@ (80011cc <MX_GPIO_Init+0x104>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ea:	4b38      	ldr	r3, [pc, #224]	@ (80011cc <MX_GPIO_Init+0x104>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	4b35      	ldr	r3, [pc, #212]	@ (80011cc <MX_GPIO_Init+0x104>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fa:	4a34      	ldr	r2, [pc, #208]	@ (80011cc <MX_GPIO_Init+0x104>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001102:	4b32      	ldr	r3, [pc, #200]	@ (80011cc <MX_GPIO_Init+0x104>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	4b2f      	ldr	r3, [pc, #188]	@ (80011cc <MX_GPIO_Init+0x104>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001112:	4a2e      	ldr	r2, [pc, #184]	@ (80011cc <MX_GPIO_Init+0x104>)
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111a:	4b2c      	ldr	r3, [pc, #176]	@ (80011cc <MX_GPIO_Init+0x104>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001126:	2201      	movs	r2, #1
 8001128:	2110      	movs	r1, #16
 800112a:	4829      	ldr	r0, [pc, #164]	@ (80011d0 <MX_GPIO_Init+0x108>)
 800112c:	f003 fe26 	bl	8004d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	2180      	movs	r1, #128	@ 0x80
 8001134:	4827      	ldr	r0, [pc, #156]	@ (80011d4 <MX_GPIO_Init+0x10c>)
 8001136:	f003 fe21 	bl	8004d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001140:	4823      	ldr	r0, [pc, #140]	@ (80011d0 <MX_GPIO_Init+0x108>)
 8001142:	f003 fe1b 	bl	8004d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	21a0      	movs	r1, #160	@ 0xa0
 800114a:	4823      	ldr	r0, [pc, #140]	@ (80011d8 <MX_GPIO_Init+0x110>)
 800114c:	f003 fe16 	bl	8004d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 LED_RED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LED_RED_Pin;
 8001150:	f44f 7304 	mov.w	r3, #528	@ 0x210
 8001154:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001156:	2301      	movs	r3, #1
 8001158:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	4619      	mov	r1, r3
 8001168:	4819      	ldr	r0, [pc, #100]	@ (80011d0 <MX_GPIO_Init+0x108>)
 800116a:	f003 fc87 	bl	8004a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800116e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001172:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001174:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001178:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	4619      	mov	r1, r3
 8001184:	4814      	ldr	r0, [pc, #80]	@ (80011d8 <MX_GPIO_Init+0x110>)
 8001186:	f003 fc79 	bl	8004a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800118a:	2380      	movs	r3, #128	@ 0x80
 800118c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	2301      	movs	r3, #1
 8001190:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	4619      	mov	r1, r3
 80011a0:	480c      	ldr	r0, [pc, #48]	@ (80011d4 <MX_GPIO_Init+0x10c>)
 80011a2:	f003 fc6b 	bl	8004a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 80011a6:	23a0      	movs	r3, #160	@ 0xa0
 80011a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	4619      	mov	r1, r3
 80011bc:	4806      	ldr	r0, [pc, #24]	@ (80011d8 <MX_GPIO_Init+0x110>)
 80011be:	f003 fc5d 	bl	8004a7c <HAL_GPIO_Init>

}
 80011c2:	bf00      	nop
 80011c4:	3720      	adds	r7, #32
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000
 80011d0:	42020000 	.word	0x42020000
 80011d4:	42020800 	.word	0x42020800
 80011d8:	42020400 	.word	0x42020400

080011dc <Mahony_init>:
#define twoKpDef    (30.0f)   /* 2 * proportional gain */
#define twoKiDef    (2.0f)   /* 2 * integral gain */

/* Initialize Mahony structure with defaults */
void Mahony_init(Mahony *m)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    if (m == NULL) return;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d033      	beq.n	8001252 <Mahony_init+0x76>

    m->twoKp = twoKpDef;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001260 <Mahony_init+0x84>)
 80011ee:	601a      	str	r2, [r3, #0]
    m->twoKi = twoKiDef;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011f6:	605a      	str	r2, [r3, #4]
    m->q0 = 1.0f;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80011fe:	609a      	str	r2, [r3, #8]
    m->q1 = 0.0f;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
    m->q2 = 0.0f;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
    m->q3 = 0.0f;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	615a      	str	r2, [r3, #20]
    m->integralFBx = 0.0f;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f04f 0200 	mov.w	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
    m->integralFBy = 0.0f;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
    m->integralFBz = 0.0f;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
    m->invSampleFreq = 1.0f / DEFAULT_SAMPLE_FREQ;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f04f 526c 	mov.w	r2, #989855744	@ 0x3b000000
 8001236:	625a      	str	r2, [r3, #36]	@ 0x24
    m->roll = 0.0f;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	629a      	str	r2, [r3, #40]	@ 0x28
    m->pitch = 0.0f;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	62da      	str	r2, [r3, #44]	@ 0x2c
    m->yaw = 0.0f;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001250:	e000      	b.n	8001254 <Mahony_init+0x78>
    if (m == NULL) return;
 8001252:	bf00      	nop
}
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	41f00000 	.word	0x41f00000

08001264 <Mahony_invSqrt>:

/* Fast inverse square-root (Quake III style) */
float Mahony_invSqrt(float x)
{
 8001264:	b480      	push	{r7}
 8001266:	b087      	sub	sp, #28
 8001268:	af00      	add	r7, sp, #0
 800126a:	ed87 0a01 	vstr	s0, [r7, #4]
    if (x <= 0.0f) return 0.0f;
 800126e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001272:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	d802      	bhi.n	8001282 <Mahony_invSqrt+0x1e>
 800127c:	f04f 0300 	mov.w	r3, #0
 8001280:	e039      	b.n	80012f6 <Mahony_invSqrt+0x92>

    float halfx = 0.5f * x;
 8001282:	edd7 7a01 	vldr	s15, [r7, #4]
 8001286:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800128a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800128e:	edc7 7a05 	vstr	s15, [r7, #20]
    union {
        float f;
        uint32_t i;
    } u;

    u.f = x;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	60fb      	str	r3, [r7, #12]
    /* magic number and bit-level hack */
    u.i = 0x5f3759df - (u.i >> 1);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	085a      	lsrs	r2, r3, #1
 800129a:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <Mahony_invSqrt+0xa4>)
 800129c:	1a9b      	subs	r3, r3, r2
 800129e:	60fb      	str	r3, [r7, #12]
    float y = u.f;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	613b      	str	r3, [r7, #16]
    /* two Newton-Raphson iterations for accuracy */
    y = y * (1.5f - (halfx * y * y));
 80012a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80012a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80012ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b8:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80012bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c0:	ed97 7a04 	vldr	s14, [r7, #16]
 80012c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c8:	edc7 7a04 	vstr	s15, [r7, #16]
    y = y * (1.5f - (halfx * y * y));
 80012cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80012d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80012dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e0:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80012e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80012ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f0:	edc7 7a04 	vstr	s15, [r7, #16]
    return y;
 80012f4:	693b      	ldr	r3, [r7, #16]
}
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eeb0 0a67 	vmov.f32	s0, s15
 80012fe:	371c      	adds	r7, #28
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	5f3759df 	.word	0x5f3759df

0800130c <Mahony_updateIMU>:

/* IMU-only update (no magnetometer) */
/* gx,gy,gz expected in degrees/sec (function converts to rad/sec) */
void Mahony_updateIMU(Mahony *m, float gx, float gy, float gz,
                      float ax, float ay, float az)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b094      	sub	sp, #80	@ 0x50
 8001310:	af00      	add	r7, sp, #0
 8001312:	61f8      	str	r0, [r7, #28]
 8001314:	ed87 0a06 	vstr	s0, [r7, #24]
 8001318:	edc7 0a05 	vstr	s1, [r7, #20]
 800131c:	ed87 1a04 	vstr	s2, [r7, #16]
 8001320:	edc7 1a03 	vstr	s3, [r7, #12]
 8001324:	ed87 2a02 	vstr	s4, [r7, #8]
 8001328:	edc7 2a01 	vstr	s5, [r7, #4]
    if (m == NULL) return;
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 830a 	beq.w	8001948 <Mahony_updateIMU+0x63c>
    float halfvx, halfvy, halfvz;
    float halfex, halfey, halfez;
    float qa, qb, qc;

    /* convert deg/s to rad/s */
    const float DEG_TO_RAD = 0.01745329251994329576923690768489f; /* more accurate */
 8001334:	4b96      	ldr	r3, [pc, #600]	@ (8001590 <Mahony_updateIMU+0x284>)
 8001336:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gx *= DEG_TO_RAD;
 8001338:	ed97 7a06 	vldr	s14, [r7, #24]
 800133c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001344:	edc7 7a06 	vstr	s15, [r7, #24]
    gy *= DEG_TO_RAD;
 8001348:	ed97 7a05 	vldr	s14, [r7, #20]
 800134c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001354:	edc7 7a05 	vstr	s15, [r7, #20]
    gz *= DEG_TO_RAD;
 8001358:	ed97 7a04 	vldr	s14, [r7, #16]
 800135c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001364:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Compute feedback only if accelerometer measurement valid
       (avoids NaN in accelerometer normalisation) */
    if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001368:	edd7 7a03 	vldr	s15, [r7, #12]
 800136c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001374:	d10e      	bne.n	8001394 <Mahony_updateIMU+0x88>
 8001376:	edd7 7a02 	vldr	s15, [r7, #8]
 800137a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001382:	d107      	bne.n	8001394 <Mahony_updateIMU+0x88>
 8001384:	edd7 7a01 	vldr	s15, [r7, #4]
 8001388:	eef5 7a40 	vcmp.f32	s15, #0.0
 800138c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001390:	f000 8133 	beq.w	80015fa <Mahony_updateIMU+0x2ee>

        /* Normalise accelerometer measurement */
        recipNorm = Mahony_invSqrt(ax * ax + ay * ay + az * az);
 8001394:	edd7 7a03 	vldr	s15, [r7, #12]
 8001398:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800139c:	edd7 7a02 	vldr	s15, [r7, #8]
 80013a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80013a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80013b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b4:	eeb0 0a67 	vmov.f32	s0, s15
 80013b8:	f7ff ff54 	bl	8001264 <Mahony_invSqrt>
 80013bc:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
        ax *= recipNorm;
 80013c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80013c4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80013c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013cc:	edc7 7a03 	vstr	s15, [r7, #12]
        ay *= recipNorm;
 80013d0:	ed97 7a02 	vldr	s14, [r7, #8]
 80013d4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80013d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013dc:	edc7 7a02 	vstr	s15, [r7, #8]
        az *= recipNorm;
 80013e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80013e4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80013e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ec:	edc7 7a01 	vstr	s15, [r7, #4]

        /* Estimated direction of gravity (half vector) */
        halfvx = m->q1 * m->q3 - m->q0 * m->q2;
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	ed93 7a03 	vldr	s14, [r3, #12]
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	edd3 7a05 	vldr	s15, [r3, #20]
 80013fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	edd3 6a02 	vldr	s13, [r3, #8]
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	edd3 7a04 	vldr	s15, [r3, #16]
 800140c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001410:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001414:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        halfvy = m->q0 * m->q1 + m->q2 * m->q3;
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	ed93 7a02 	vldr	s14, [r3, #8]
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	edd3 7a03 	vldr	s15, [r3, #12]
 8001424:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	edd3 6a04 	vldr	s13, [r3, #16]
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	edd3 7a05 	vldr	s15, [r3, #20]
 8001434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        halfvz = m->q0 * m->q0 - 0.5f + m->q3 * m->q3;
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	ed93 7a02 	vldr	s14, [r3, #8]
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	edd3 7a02 	vldr	s15, [r3, #8]
 800144c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001450:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001454:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	edd3 6a05 	vldr	s13, [r3, #20]
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	edd3 7a05 	vldr	s15, [r3, #20]
 8001464:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800146c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

        /* Error is sum of cross product between estimated
           and measured direction of gravity */
        halfex = (ay * halfvz - az * halfvy);
 8001470:	ed97 7a02 	vldr	s14, [r7, #8]
 8001474:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001478:	ee27 7a27 	vmul.f32	s14, s14, s15
 800147c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001480:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        halfey = (az * halfvx - ax * halfvz);
 8001490:	ed97 7a01 	vldr	s14, [r7, #4]
 8001494:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001498:	ee27 7a27 	vmul.f32	s14, s14, s15
 800149c:	edd7 6a03 	vldr	s13, [r7, #12]
 80014a0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80014a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ac:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        halfez = (ax * halfvy - ay * halfvx);
 80014b0:	ed97 7a03 	vldr	s14, [r7, #12]
 80014b4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80014b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014bc:	edd7 6a02 	vldr	s13, [r7, #8]
 80014c0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80014c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014cc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

        /* Compute and apply integral feedback if enabled */
        if (m->twoKi > 0.0f) {
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80014d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014de:	dd59      	ble.n	8001594 <Mahony_updateIMU+0x288>
            m->integralFBx += m->twoKi * halfex * m->invSampleFreq;
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	ed93 7a06 	vldr	s14, [r3, #24]
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	edd3 6a01 	vldr	s13, [r3, #4]
 80014ec:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80014f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80014fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	edc3 7a06 	vstr	s15, [r3, #24]
            m->integralFBy += m->twoKi * halfey * m->invSampleFreq;
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	ed93 7a07 	vldr	s14, [r3, #28]
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	edd3 6a01 	vldr	s13, [r3, #4]
 8001514:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001518:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	edc3 7a07 	vstr	s15, [r3, #28]
            m->integralFBz += m->twoKi * halfez * m->invSampleFreq;
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	ed93 7a08 	vldr	s14, [r3, #32]
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	edd3 6a01 	vldr	s13, [r3, #4]
 800153c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001540:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800154a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800154e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	edc3 7a08 	vstr	s15, [r3, #32]
            gx += m->integralFBx; /* apply integral feedback */
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	edd3 7a06 	vldr	s15, [r3, #24]
 800155e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001566:	edc7 7a06 	vstr	s15, [r7, #24]
            gy += m->integralFBy;
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001570:	ed97 7a05 	vldr	s14, [r7, #20]
 8001574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001578:	edc7 7a05 	vstr	s15, [r7, #20]
            gz += m->integralFBz;
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001582:	ed97 7a04 	vldr	s14, [r7, #16]
 8001586:	ee77 7a27 	vadd.f32	s15, s14, s15
 800158a:	edc7 7a04 	vstr	s15, [r7, #16]
 800158e:	e00d      	b.n	80015ac <Mahony_updateIMU+0x2a0>
 8001590:	3c8efa35 	.word	0x3c8efa35
        } else {
            m->integralFBx = 0.0f; /* prevent integral windup */
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
            m->integralFBy = 0.0f;
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	61da      	str	r2, [r3, #28]
            m->integralFBz = 0.0f;
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
        }

        /* Apply proportional feedback */
        gx += m->twoKp * halfex;
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	ed93 7a00 	vldr	s14, [r3]
 80015b2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80015b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ba:	ed97 7a06 	vldr	s14, [r7, #24]
 80015be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c2:	edc7 7a06 	vstr	s15, [r7, #24]
        gy += m->twoKp * halfey;
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	ed93 7a00 	vldr	s14, [r3]
 80015cc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80015d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d4:	ed97 7a05 	vldr	s14, [r7, #20]
 80015d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015dc:	edc7 7a05 	vstr	s15, [r7, #20]
        gz += m->twoKp * halfez;
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	ed93 7a00 	vldr	s14, [r3]
 80015e6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80015ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80015f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f6:	edc7 7a04 	vstr	s15, [r7, #16]
    }

    /* Integrate rate of change of quaternion */
    gx *= (0.5f * m->invSampleFreq);
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001600:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001604:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001608:	ed97 7a06 	vldr	s14, [r7, #24]
 800160c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001610:	edc7 7a06 	vstr	s15, [r7, #24]
    gy *= (0.5f * m->invSampleFreq);
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800161a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800161e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001622:	ed97 7a05 	vldr	s14, [r7, #20]
 8001626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800162a:	edc7 7a05 	vstr	s15, [r7, #20]
    gz *= (0.5f * m->invSampleFreq);
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001634:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001638:	ee67 7a87 	vmul.f32	s15, s15, s14
 800163c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001644:	edc7 7a04 	vstr	s15, [r7, #16]

    qa = m->q0;
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    qb = m->q1;
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	62bb      	str	r3, [r7, #40]	@ 0x28
    qc = m->q2;
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	627b      	str	r3, [r7, #36]	@ 0x24

    m->q0 += (-qb * gx - qc * gy - m->q3 * gz);
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001660:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001664:	eef1 6a67 	vneg.f32	s13, s15
 8001668:	edd7 7a06 	vldr	s15, [r7, #24]
 800166c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001670:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8001674:	edd7 7a05 	vldr	s15, [r7, #20]
 8001678:	ee66 7a27 	vmul.f32	s15, s12, s15
 800167c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	ed93 6a05 	vldr	s12, [r3, #20]
 8001686:	edd7 7a04 	vldr	s15, [r7, #16]
 800168a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800168e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	edc3 7a02 	vstr	s15, [r3, #8]
    m->q1 += (qa * gx + qc * gz - m->q3 * gy);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	ed93 7a03 	vldr	s14, [r3, #12]
 80016a2:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 80016a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80016aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016ae:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 80016b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80016b6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80016ba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	ed93 6a05 	vldr	s12, [r3, #20]
 80016c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80016cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	edc3 7a03 	vstr	s15, [r3, #12]
    m->q2 += (qa * gy - qb * gz + m->q3 * gx);
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	ed93 7a04 	vldr	s14, [r3, #16]
 80016e0:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 80016e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016ec:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 80016f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80016f4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80016f8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	ed93 6a05 	vldr	s12, [r3, #20]
 8001702:	edd7 7a06 	vldr	s15, [r7, #24]
 8001706:	ee66 7a27 	vmul.f32	s15, s12, s15
 800170a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800170e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	edc3 7a04 	vstr	s15, [r3, #16]
    m->q3 += (qa * gz + qb * gy - qc * gx);
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	ed93 7a05 	vldr	s14, [r3, #20]
 800171e:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001722:	edd7 7a04 	vldr	s15, [r7, #16]
 8001726:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800172a:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 800172e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001732:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001736:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800173a:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 800173e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001742:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001746:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800174a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	edc3 7a05 	vstr	s15, [r3, #20]

    /* Normalise quaternion */
    recipNorm = Mahony_invSqrt(m->q0 * m->q0 + m->q1 * m->q1 +
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	ed93 7a02 	vldr	s14, [r3, #8]
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001760:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	edd3 6a03 	vldr	s13, [r3, #12]
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001770:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001774:	ee37 7a27 	vadd.f32	s14, s14, s15
                              m->q2 * m->q2 + m->q3 * m->q3);
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	edd3 6a04 	vldr	s13, [r3, #16]
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	edd3 7a04 	vldr	s15, [r3, #16]
 8001784:	ee66 7aa7 	vmul.f32	s15, s13, s15
    recipNorm = Mahony_invSqrt(m->q0 * m->q0 + m->q1 * m->q1 +
 8001788:	ee37 7a27 	vadd.f32	s14, s14, s15
                              m->q2 * m->q2 + m->q3 * m->q3);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	edd3 6a05 	vldr	s13, [r3, #20]
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	edd3 7a05 	vldr	s15, [r3, #20]
 8001798:	ee66 7aa7 	vmul.f32	s15, s13, s15
    recipNorm = Mahony_invSqrt(m->q0 * m->q0 + m->q1 * m->q1 +
 800179c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a0:	eeb0 0a67 	vmov.f32	s0, s15
 80017a4:	f7ff fd5e 	bl	8001264 <Mahony_invSqrt>
 80017a8:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    m->q0 *= recipNorm;
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	ed93 7a02 	vldr	s14, [r3, #8]
 80017b2:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80017b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	edc3 7a02 	vstr	s15, [r3, #8]
    m->q1 *= recipNorm;
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	ed93 7a03 	vldr	s14, [r3, #12]
 80017c6:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80017ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	edc3 7a03 	vstr	s15, [r3, #12]
    m->q2 *= recipNorm;
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	ed93 7a04 	vldr	s14, [r3, #16]
 80017da:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80017de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	edc3 7a04 	vstr	s15, [r3, #16]
    m->q3 *= recipNorm;
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	ed93 7a05 	vldr	s14, [r3, #20]
 80017ee:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80017f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	edc3 7a05 	vstr	s15, [r3, #20]

    /* Compute Euler angles (radians) */
    m->roll  = atan2f(m->q0 * m->q1 + m->q2 * m->q3,
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	edd3 7a03 	vldr	s15, [r3, #12]
 8001808:	ee27 7a27 	vmul.f32	s14, s14, s15
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	edd3 7a05 	vldr	s15, [r3, #20]
 8001818:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800181c:	ee37 6a27 	vadd.f32	s12, s14, s15
                      0.5f - m->q1 * m->q1 - m->q2 * m->q2);
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	ed93 7a03 	vldr	s14, [r3, #12]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	edd3 7a03 	vldr	s15, [r3, #12]
 800182c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001830:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001834:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	edd3 6a04 	vldr	s13, [r3, #16]
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	edd3 7a04 	vldr	s15, [r3, #16]
 8001844:	ee66 7aa7 	vmul.f32	s15, s13, s15
    m->roll  = atan2f(m->q0 * m->q1 + m->q2 * m->q3,
 8001848:	ee77 7a67 	vsub.f32	s15, s14, s15
 800184c:	eef0 0a67 	vmov.f32	s1, s15
 8001850:	eeb0 0a46 	vmov.f32	s0, s12
 8001854:	f009 fe2c 	bl	800b4b0 <atan2f>
 8001858:	eef0 7a40 	vmov.f32	s15, s0
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    m->pitch = asinf(-2.0f * (m->q1 * m->q3 - m->q0 * m->q2));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	ed93 7a03 	vldr	s14, [r3, #12]
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	edd3 7a05 	vldr	s15, [r3, #20]
 800186e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	edd3 6a02 	vldr	s13, [r3, #8]
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	edd3 7a04 	vldr	s15, [r3, #16]
 800187e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001882:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001886:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800188a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800188e:	eeb0 0a67 	vmov.f32	s0, s15
 8001892:	f009 fde1 	bl	800b458 <asinf>
 8001896:	eef0 7a40 	vmov.f32	s15, s0
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    m->yaw   = atan2f(m->q1 * m->q2 + m->q0 * m->q3,
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80018ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	edd3 6a02 	vldr	s13, [r3, #8]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	edd3 7a05 	vldr	s15, [r3, #20]
 80018bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c0:	ee37 6a27 	vadd.f32	s12, s14, s15
                      0.5f - m->q2 * m->q2 - m->q3 * m->q3);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	ed93 7a04 	vldr	s14, [r3, #16]
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80018d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80018d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	edd3 6a05 	vldr	s13, [r3, #20]
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	edd3 7a05 	vldr	s15, [r3, #20]
 80018e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
    m->yaw   = atan2f(m->q1 * m->q2 + m->q0 * m->q3,
 80018ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f0:	eef0 0a67 	vmov.f32	s1, s15
 80018f4:	eeb0 0a46 	vmov.f32	s0, s12
 80018f8:	f009 fdda 	bl	800b4b0 <atan2f>
 80018fc:	eef0 7a40 	vmov.f32	s15, s0
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    /* Convert to degrees */
    const float RAD_TO_DEG = 57.29577951308232f;
 8001906:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <Mahony_updateIMU+0x644>)
 8001908:	623b      	str	r3, [r7, #32]
    m->roll  *= RAD_TO_DEG;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001910:	edd7 7a08 	vldr	s15, [r7, #32]
 8001914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    m->pitch *= RAD_TO_DEG;
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001924:	edd7 7a08 	vldr	s15, [r7, #32]
 8001928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    m->yaw   *= RAD_TO_DEG;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001938:	edd7 7a08 	vldr	s15, [r7, #32]
 800193c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 8001946:	e000      	b.n	800194a <Mahony_updateIMU+0x63e>
    if (m == NULL) return;
 8001948:	bf00      	nop
}
 800194a:	3750      	adds	r7, #80	@ 0x50
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	42652ee1 	.word	0x42652ee1

08001954 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800195c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001960:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d013      	beq.n	8001994 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800196c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001970:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001974:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00b      	beq.n	8001994 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800197c:	e000      	b.n	8001980 <ITM_SendChar+0x2c>
    {
      __NOP();
 800197e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001980:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f9      	beq.n	800197e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800198a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001994:	687b      	ldr	r3, [r7, #4]
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <readRegisters>:

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 80019a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019a8:	b089      	sub	sp, #36	@ 0x24
 80019aa:	af02      	add	r7, sp, #8
 80019ac:	4603      	mov	r3, r0
 80019ae:	603a      	str	r2, [r7, #0]
 80019b0:	71fb      	strb	r3, [r7, #7]
 80019b2:	460b      	mov	r3, r1
 80019b4:	71bb      	strb	r3, [r7, #6]
 80019b6:	466b      	mov	r3, sp
 80019b8:	461e      	mov	r6, r3

	uint8_t tx = subAddress | 0x80; //
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	73bb      	strb	r3, [r7, #14]
	uint8_t dummy_tx[count]; //
 80019c4:	79b9      	ldrb	r1, [r7, #6]
 80019c6:	460b      	mov	r3, r1
 80019c8:	3b01      	subs	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	b2cb      	uxtb	r3, r1
 80019ce:	2200      	movs	r2, #0
 80019d0:	4698      	mov	r8, r3
 80019d2:	4691      	mov	r9, r2
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019e8:	b2cb      	uxtb	r3, r1
 80019ea:	2200      	movs	r2, #0
 80019ec:	461c      	mov	r4, r3
 80019ee:	4615      	mov	r5, r2
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	00eb      	lsls	r3, r5, #3
 80019fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019fe:	00e2      	lsls	r2, r4, #3
 8001a00:	460b      	mov	r3, r1
 8001a02:	3307      	adds	r3, #7
 8001a04:	08db      	lsrs	r3, r3, #3
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	ebad 0d03 	sub.w	sp, sp, r3
 8001a0c:	ab02      	add	r3, sp, #8
 8001a0e:	3300      	adds	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
	memset(dummy_tx, 0, count*sizeof(dummy_tx[0]));
 8001a12:	79bb      	ldrb	r3, [r7, #6]
 8001a14:	461a      	mov	r2, r3
 8001a16:	2100      	movs	r1, #0
 8001a18:	6938      	ldr	r0, [r7, #16]
 8001a1a:	f007 fcde 	bl	80093da <memset>
	uint8_t dummy_rx;
	HAL_StatusTypeDef ret;

	HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2110      	movs	r1, #16
 8001a22:	4814      	ldr	r0, [pc, #80]	@ (8001a74 <readRegisters+0xd0>)
 8001a24:	f003 f9aa 	bl	8004d7c <HAL_GPIO_WritePin>

	ret = HAL_SPI_TransmitReceive(&hspi1, &tx, &dummy_rx, 1, HAL_MAX_DELAY);
 8001a28:	f107 020d 	add.w	r2, r7, #13
 8001a2c:	f107 010e 	add.w	r1, r7, #14
 8001a30:	f04f 33ff 	mov.w	r3, #4294967295
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	2301      	movs	r3, #1
 8001a38:	480f      	ldr	r0, [pc, #60]	@ (8001a78 <readRegisters+0xd4>)
 8001a3a:	f005 fb6f 	bl	800711c <HAL_SPI_TransmitReceive>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	73fb      	strb	r3, [r7, #15]

	ret = HAL_SPI_TransmitReceive(&hspi1, dummy_tx, dest, count, HAL_MAX_DELAY);
 8001a42:	79bb      	ldrb	r3, [r7, #6]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	f04f 32ff 	mov.w	r2, #4294967295
 8001a4a:	9200      	str	r2, [sp, #0]
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	6939      	ldr	r1, [r7, #16]
 8001a50:	4809      	ldr	r0, [pc, #36]	@ (8001a78 <readRegisters+0xd4>)
 8001a52:	f005 fb63 	bl	800711c <HAL_SPI_TransmitReceive>
 8001a56:	4603      	mov	r3, r0
 8001a58:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	2110      	movs	r1, #16
 8001a5e:	4805      	ldr	r0, [pc, #20]	@ (8001a74 <readRegisters+0xd0>)
 8001a60:	f003 f98c 	bl	8004d7c <HAL_GPIO_WritePin>

	return 1;
 8001a64:	2301      	movs	r3, #1
 8001a66:	46b5      	mov	sp, r6
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	371c      	adds	r7, #28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a72:	bf00      	nop
 8001a74:	42020000 	.word	0x42020000
 8001a78:	200003a4 	.word	0x200003a4

08001a7c <writeRegister>:

void writeRegister(uint8_t subAddress, uint8_t data){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	460a      	mov	r2, r1
 8001a86:	71fb      	strb	r3, [r7, #7]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buf[2] = {subAddress, data};
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	733b      	strb	r3, [r7, #12]
 8001a90:	79bb      	ldrb	r3, [r7, #6]
 8001a92:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret;

	HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2110      	movs	r1, #16
 8001a98:	480a      	ldr	r0, [pc, #40]	@ (8001ac4 <writeRegister+0x48>)
 8001a9a:	f003 f96f 	bl	8004d7c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, tx_buf, 2, HAL_MAX_DELAY);
 8001a9e:	f107 010c 	add.w	r1, r7, #12
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	4807      	ldr	r0, [pc, #28]	@ (8001ac8 <writeRegister+0x4c>)
 8001aaa:	f005 f9c2 	bl	8006e32 <HAL_SPI_Transmit>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2110      	movs	r1, #16
 8001ab6:	4803      	ldr	r0, [pc, #12]	@ (8001ac4 <writeRegister+0x48>)
 8001ab8:	f003 f960 	bl	8004d7c <HAL_GPIO_WritePin>
//	  else{
//		return -1;
//	  }
//
//	return 1;
}
 8001abc:	bf00      	nop
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	42020000 	.word	0x42020000
 8001ac8:	200003a4 	.word	0x200003a4

08001acc <begin>:

int begin(){
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	2110      	movs	r1, #16
 8001ad6:	480e      	ldr	r0, [pc, #56]	@ (8001b10 <begin+0x44>)
 8001ad8:	f003 f950 	bl	8004d7c <HAL_GPIO_WritePin>
	reset();
 8001adc:	f000 f831 	bl	8001b42 <reset>
	uint8_t address = whoAmI();
 8001ae0:	f000 f83d 	bl	8001b5e <whoAmI>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	71fb      	strb	r3, [r7, #7]
	setLowNoiseMode();
 8001ae8:	f000 f823 	bl	8001b32 <setLowNoiseMode>
	setAccelFS(0b01101001);
 8001aec:	2069      	movs	r0, #105	@ 0x69
 8001aee:	f000 f95d 	bl	8001dac <setAccelFS>
	configureNotchFilter();
 8001af2:	f000 f999 	bl	8001e28 <configureNotchFilter>
	setAntiAliasFilter(213, true, true);
 8001af6:	2201      	movs	r2, #1
 8001af8:	2101      	movs	r1, #1
 8001afa:	20d5      	movs	r0, #213	@ 0xd5
 8001afc:	f000 fae2 	bl	80020c4 <setAntiAliasFilter>
	calibrateGyro();
 8001b00:	f000 f88a 	bl	8001c18 <calibrateGyro>
	return address;
 8001b04:	79fb      	ldrb	r3, [r7, #7]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	42020000 	.word	0x42020000

08001b14 <setBank>:

int setBank(uint8_t bank){
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
	writeRegister(REG_BANK_SEL , bank);
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	4619      	mov	r1, r3
 8001b22:	2076      	movs	r0, #118	@ 0x76
 8001b24:	f7ff ffaa 	bl	8001a7c <writeRegister>
	return 1;
 8001b28:	2301      	movs	r3, #1
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <setLowNoiseMode>:

void setLowNoiseMode(){
 8001b32:	b580      	push	{r7, lr}
 8001b34:	af00      	add	r7, sp, #0
	writeRegister(UB0_REG_PWR_MGMT0, 0x0F);
 8001b36:	210f      	movs	r1, #15
 8001b38:	204e      	movs	r0, #78	@ 0x4e
 8001b3a:	f7ff ff9f 	bl	8001a7c <writeRegister>
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <reset>:

void reset(){
 8001b42:	b580      	push	{r7, lr}
 8001b44:	af00      	add	r7, sp, #0
	setBank(0);
 8001b46:	2000      	movs	r0, #0
 8001b48:	f7ff ffe4 	bl	8001b14 <setBank>

	writeRegister(UB0_REG_DEVICE_CONFIG, 0x01);
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	2011      	movs	r0, #17
 8001b50:	f7ff ff94 	bl	8001a7c <writeRegister>

	HAL_Delay(1);
 8001b54:	2001      	movs	r0, #1
 8001b56:	f001 fee9 	bl	800392c <HAL_Delay>
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <whoAmI>:

uint8_t whoAmI(){
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
	uint8_t buffer;
	readRegisters(UB0_REG_WHO_AM_I, 1, &buffer);
 8001b64:	1dfb      	adds	r3, r7, #7
 8001b66:	461a      	mov	r2, r3
 8001b68:	2101      	movs	r1, #1
 8001b6a:	2075      	movs	r0, #117	@ 0x75
 8001b6c:	f7ff ff1a 	bl	80019a4 <readRegisters>
	return buffer;
 8001b70:	79fb      	ldrb	r3, [r7, #7]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <AGT>:

void AGT(uint8_t *dataBuffer){
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
	readRegisters(UB0_REG_TEMP_DATA1, 14, dataBuffer);
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	210e      	movs	r1, #14
 8001b86:	201d      	movs	r0, #29
 8001b88:	f7ff ff0c 	bl	80019a4 <readRegisters>
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <setGyroFS>:
float _gyrB[3] = {0, 0, 0};
float _gyr[3] = {0, 0, 0};
uint8_t gyroBuffer[14];
int16_t rawMeasGyro[7];

void setGyroFS(uint8_t fssel){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]

	setBank(0);
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f7ff ffb8 	bl	8001b14 <setBank>
	uint8_t reg;
	readRegisters(0x4F, 1, &reg);
 8001ba4:	f107 030f 	add.w	r3, r7, #15
 8001ba8:	461a      	mov	r2, r3
 8001baa:	2101      	movs	r1, #1
 8001bac:	204f      	movs	r0, #79	@ 0x4f
 8001bae:	f7ff fef9 	bl	80019a4 <readRegisters>
	reg = (fssel << 5) | (reg & 0x1F);
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	015b      	lsls	r3, r3, #5
 8001bb6:	b25a      	sxtb	r2, r3
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	b25b      	sxtb	r3, r3
 8001bbc:	f003 031f 	and.w	r3, r3, #31
 8001bc0:	b25b      	sxtb	r3, r3
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	b25b      	sxtb	r3, r3
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	73fb      	strb	r3, [r7, #15]
	writeRegister(0x4F, reg);
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	204f      	movs	r0, #79	@ 0x4f
 8001bd0:	f7ff ff54 	bl	8001a7c <writeRegister>
	_gyroScale = (2000.0f / (float)(1 << fssel)) / 32768.0f;
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	ee07 3a90 	vmov	s15, r3
 8001be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be4:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001c08 <setGyroFS+0x74>
 8001be8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bec:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001c0c <setGyroFS+0x78>
 8001bf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bf4:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <setGyroFS+0x7c>)
 8001bf6:	edc3 7a00 	vstr	s15, [r3]
	_gyroFS = fssel;
 8001bfa:	4a06      	ldr	r2, [pc, #24]	@ (8001c14 <setGyroFS+0x80>)
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	7013      	strb	r3, [r2, #0]
}
 8001c00:	bf00      	nop
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	44fa0000 	.word	0x44fa0000
 8001c0c:	47000000 	.word	0x47000000
 8001c10:	20000274 	.word	0x20000274
 8001c14:	20000278 	.word	0x20000278

08001c18 <calibrateGyro>:

void calibrateGyro(){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
	const uint8_t current_fssel = _gyroFS;
 8001c1e:	4b5c      	ldr	r3, [pc, #368]	@ (8001d90 <calibrateGyro+0x178>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	70fb      	strb	r3, [r7, #3]
	setGyroFS(0x03);
 8001c24:	2003      	movs	r0, #3
 8001c26:	f7ff ffb5 	bl	8001b94 <setGyroFS>
	_gyroBD[0] = 0;
 8001c2a:	4b5a      	ldr	r3, [pc, #360]	@ (8001d94 <calibrateGyro+0x17c>)
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
	_gyroBD[1] = 0;
 8001c32:	4b58      	ldr	r3, [pc, #352]	@ (8001d94 <calibrateGyro+0x17c>)
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	605a      	str	r2, [r3, #4]
	_gyroBD[2] = 0;
 8001c3a:	4b56      	ldr	r3, [pc, #344]	@ (8001d94 <calibrateGyro+0x17c>)
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
	for (size_t i=0; i < 1000; i++) {
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	e086      	b.n	8001d56 <calibrateGyro+0x13e>
		AGT(gyroBuffer);
 8001c48:	4853      	ldr	r0, [pc, #332]	@ (8001d98 <calibrateGyro+0x180>)
 8001c4a:	f7ff ff96 	bl	8001b7a <AGT>
		for (size_t i=0; i<7; i++) {
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	e014      	b.n	8001c7e <calibrateGyro+0x66>
			rawMeasGyro[i] = ((int16_t)gyroBuffer[i*2] << 8) | gyroBuffer[i*2+1];
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4a4f      	ldr	r2, [pc, #316]	@ (8001d98 <calibrateGyro+0x180>)
 8001c5a:	5cd3      	ldrb	r3, [r2, r3]
 8001c5c:	021b      	lsls	r3, r3, #8
 8001c5e:	b21a      	sxth	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	3301      	adds	r3, #1
 8001c66:	494c      	ldr	r1, [pc, #304]	@ (8001d98 <calibrateGyro+0x180>)
 8001c68:	5ccb      	ldrb	r3, [r1, r3]
 8001c6a:	b21b      	sxth	r3, r3
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	b219      	sxth	r1, r3
 8001c70:	4a4a      	ldr	r2, [pc, #296]	@ (8001d9c <calibrateGyro+0x184>)
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (size_t i=0; i<7; i++) {
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	2b06      	cmp	r3, #6
 8001c82:	d9e7      	bls.n	8001c54 <calibrateGyro+0x3c>
		}
		for (size_t i=0; i<3; i++) {
 8001c84:	2300      	movs	r3, #0
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	e020      	b.n	8001ccc <calibrateGyro+0xb4>
			_gyr[i] = (float)rawMeasGyro[i+4] / 16.4;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	4a43      	ldr	r2, [pc, #268]	@ (8001d9c <calibrateGyro+0x184>)
 8001c90:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001c94:	ee07 3a90 	vmov	s15, r3
 8001c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c9c:	ee17 0a90 	vmov	r0, s15
 8001ca0:	f7fe fc36 	bl	8000510 <__aeabi_f2d>
 8001ca4:	a338      	add	r3, pc, #224	@ (adr r3, 8001d88 <calibrateGyro+0x170>)
 8001ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001caa:	f7fe fdb3 	bl	8000814 <__aeabi_ddiv>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7fe ff5b 	bl	8000b70 <__aeabi_d2f>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	4938      	ldr	r1, [pc, #224]	@ (8001da0 <calibrateGyro+0x188>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	601a      	str	r2, [r3, #0]
		for (size_t i=0; i<3; i++) {
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d9db      	bls.n	8001c8a <calibrateGyro+0x72>
		}
		_gyroBD[0] += (_gyr[0] + _gyrB[0]) / 1000;
 8001cd2:	4b30      	ldr	r3, [pc, #192]	@ (8001d94 <calibrateGyro+0x17c>)
 8001cd4:	ed93 7a00 	vldr	s14, [r3]
 8001cd8:	4b31      	ldr	r3, [pc, #196]	@ (8001da0 <calibrateGyro+0x188>)
 8001cda:	edd3 6a00 	vldr	s13, [r3]
 8001cde:	4b31      	ldr	r3, [pc, #196]	@ (8001da4 <calibrateGyro+0x18c>)
 8001ce0:	edd3 7a00 	vldr	s15, [r3]
 8001ce4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ce8:	ed9f 6a2f 	vldr	s12, [pc, #188]	@ 8001da8 <calibrateGyro+0x190>
 8001cec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf4:	4b27      	ldr	r3, [pc, #156]	@ (8001d94 <calibrateGyro+0x17c>)
 8001cf6:	edc3 7a00 	vstr	s15, [r3]
		_gyroBD[1] += (_gyr[1] + _gyrB[1]) / 1000;
 8001cfa:	4b26      	ldr	r3, [pc, #152]	@ (8001d94 <calibrateGyro+0x17c>)
 8001cfc:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d00:	4b27      	ldr	r3, [pc, #156]	@ (8001da0 <calibrateGyro+0x188>)
 8001d02:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d06:	4b27      	ldr	r3, [pc, #156]	@ (8001da4 <calibrateGyro+0x18c>)
 8001d08:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d0c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d10:	ed9f 6a25 	vldr	s12, [pc, #148]	@ 8001da8 <calibrateGyro+0x190>
 8001d14:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001d94 <calibrateGyro+0x17c>)
 8001d1e:	edc3 7a01 	vstr	s15, [r3, #4]
		_gyroBD[2] += (_gyr[2] + _gyrB[2]) / 1000;
 8001d22:	4b1c      	ldr	r3, [pc, #112]	@ (8001d94 <calibrateGyro+0x17c>)
 8001d24:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d28:	4b1d      	ldr	r3, [pc, #116]	@ (8001da0 <calibrateGyro+0x188>)
 8001d2a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001da4 <calibrateGyro+0x18c>)
 8001d30:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d34:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d38:	ed9f 6a1b 	vldr	s12, [pc, #108]	@ 8001da8 <calibrateGyro+0x190>
 8001d3c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d44:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <calibrateGyro+0x17c>)
 8001d46:	edc3 7a02 	vstr	s15, [r3, #8]
		HAL_Delay(1);
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	f001 fdee 	bl	800392c <HAL_Delay>
	for (size_t i=0; i < 1000; i++) {
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	3301      	adds	r3, #1
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d5c:	f4ff af74 	bcc.w	8001c48 <calibrateGyro+0x30>
	}
	_gyrB[0] = _gyroBD[0];
 8001d60:	4b0c      	ldr	r3, [pc, #48]	@ (8001d94 <calibrateGyro+0x17c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0f      	ldr	r2, [pc, #60]	@ (8001da4 <calibrateGyro+0x18c>)
 8001d66:	6013      	str	r3, [r2, #0]
	_gyrB[1] = _gyroBD[1];
 8001d68:	4b0a      	ldr	r3, [pc, #40]	@ (8001d94 <calibrateGyro+0x17c>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001da4 <calibrateGyro+0x18c>)
 8001d6e:	6053      	str	r3, [r2, #4]
	_gyrB[2] = _gyroBD[2];
 8001d70:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <calibrateGyro+0x17c>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	4a0b      	ldr	r2, [pc, #44]	@ (8001da4 <calibrateGyro+0x18c>)
 8001d76:	6093      	str	r3, [r2, #8]
	setGyroFS(current_fssel);
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff ff0a 	bl	8001b94 <setGyroFS>
}
 8001d80:	bf00      	nop
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	66666666 	.word	0x66666666
 8001d8c:	40306666 	.word	0x40306666
 8001d90:	20000278 	.word	0x20000278
 8001d94:	2000027c 	.word	0x2000027c
 8001d98:	200002a0 	.word	0x200002a0
 8001d9c:	200002b0 	.word	0x200002b0
 8001da0:	20000294 	.word	0x20000294
 8001da4:	20000288 	.word	0x20000288
 8001da8:	447a0000 	.word	0x447a0000

08001dac <setAccelFS>:
int16_t rawMeasAccel[7];
float _accMax[3] = {};
float _accMin[3] = {};


void setAccelFS(uint8_t fssel){
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
	setBank(0);
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7ff feac 	bl	8001b14 <setBank>
	uint8_t reg;
	readRegisters(0x50, 1, &reg);
 8001dbc:	f107 030f 	add.w	r3, r7, #15
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	2050      	movs	r0, #80	@ 0x50
 8001dc6:	f7ff fded 	bl	80019a4 <readRegisters>
	reg = (fssel << 5) | (reg & 0x1F);
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	015b      	lsls	r3, r3, #5
 8001dce:	b25a      	sxtb	r2, r3
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	b25b      	sxtb	r3, r3
 8001dd4:	f003 031f 	and.w	r3, r3, #31
 8001dd8:	b25b      	sxtb	r3, r3
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	b25b      	sxtb	r3, r3
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	73fb      	strb	r3, [r7, #15]
	writeRegister(0x50, reg);
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
 8001de4:	4619      	mov	r1, r3
 8001de6:	2050      	movs	r0, #80	@ 0x50
 8001de8:	f7ff fe48 	bl	8001a7c <writeRegister>
	_accelScale = (float)(1 << (4 - fssel)) / 32768.0f;
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	f1c3 0304 	rsb	r3, r3, #4
 8001df2:	2201      	movs	r2, #1
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	ee07 3a90 	vmov	s15, r3
 8001dfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e00:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8001e1c <setAccelFS+0x70>
 8001e04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e08:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <setAccelFS+0x74>)
 8001e0a:	edc3 7a00 	vstr	s15, [r3]
	_accelFS = fssel;
 8001e0e:	4a05      	ldr	r2, [pc, #20]	@ (8001e24 <setAccelFS+0x78>)
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	7013      	strb	r3, [r2, #0]
}
 8001e14:	bf00      	nop
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	47000000 	.word	0x47000000
 8001e20:	200002c0 	.word	0x200002c0
 8001e24:	200002be 	.word	0x200002be

08001e28 <configureNotchFilter>:

void configureNotchFilter(){
 8001e28:	b5b0      	push	{r4, r5, r7, lr}
 8001e2a:	b08a      	sub	sp, #40	@ 0x28
 8001e2c:	af00      	add	r7, sp, #0
	uint8_t BW_SEL = 7;
 8001e2e:	2307      	movs	r3, #7
 8001e30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	uint32_t f_des = 1300;
 8001e34:	f240 5314 	movw	r3, #1300	@ 0x514
 8001e38:	61fb      	str	r3, [r7, #28]
	double pi = 3.14159265;
 8001e3a:	a38d      	add	r3, pc, #564	@ (adr r3, 8002070 <configureNotchFilter+0x248>)
 8001e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e40:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double COSWZ = cos(2 * pi * f_des / 32);
 8001e44:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	f7fe fa02 	bl	8000254 <__adddf3>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4614      	mov	r4, r2
 8001e56:	461d      	mov	r5, r3
 8001e58:	69f8      	ldr	r0, [r7, #28]
 8001e5a:	f7fe fb37 	bl	80004cc <__aeabi_ui2d>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4620      	mov	r0, r4
 8001e64:	4629      	mov	r1, r5
 8001e66:	f7fe fbab 	bl	80005c0 <__aeabi_dmul>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4610      	mov	r0, r2
 8001e70:	4619      	mov	r1, r3
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	4b78      	ldr	r3, [pc, #480]	@ (8002058 <configureNotchFilter+0x230>)
 8001e78:	f7fe fccc 	bl	8000814 <__aeabi_ddiv>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	ec43 2b17 	vmov	d7, r2, r3
 8001e84:	eeb0 0a47 	vmov.f32	s0, s14
 8001e88:	eef0 0a67 	vmov.f32	s1, s15
 8001e8c:	f009 fa88 	bl	800b3a0 <cos>
 8001e90:	ed87 0b02 	vstr	d0, [r7, #8]
	int NF_COSWZ = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	627b      	str	r3, [r7, #36]	@ 0x24
	bool NF_COSWZ_SEL = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if(abs(COSWZ) <= 0.875){
 8001e9e:	ed97 0b02 	vldr	d0, [r7, #8]
 8001ea2:	f006 fd24 	bl	80088ee <abs>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	dc1c      	bgt.n	8001ee6 <configureNotchFilter+0xbe>
		NF_COSWZ_SEL = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		NF_COSWZ = round(COSWZ * 256);
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	4b69      	ldr	r3, [pc, #420]	@ (800205c <configureNotchFilter+0x234>)
 8001eb8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ebc:	f7fe fb80 	bl	80005c0 <__aeabi_dmul>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	ec43 2b17 	vmov	d7, r2, r3
 8001ec8:	eeb0 0a47 	vmov.f32	s0, s14
 8001ecc:	eef0 0a67 	vmov.f32	s1, s15
 8001ed0:	f009 fb34 	bl	800b53c <round>
 8001ed4:	ec53 2b10 	vmov	r2, r3, d0
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	f7fe fe20 	bl	8000b20 <__aeabi_d2iz>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ee4:	e063      	b.n	8001fae <configureNotchFilter+0x186>
	}else{
		NF_COSWZ_SEL = 1;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		if(COSWZ > 0.875){
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	4b5b      	ldr	r3, [pc, #364]	@ (8002060 <configureNotchFilter+0x238>)
 8001ef2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ef6:	f7fe fdf3 	bl	8000ae0 <__aeabi_dcmpgt>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d02b      	beq.n	8001f58 <configureNotchFilter+0x130>
			NF_COSWZ = round(8 * (1 - COSWZ) * 256);
 8001f00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f04:	f04f 0000 	mov.w	r0, #0
 8001f08:	4956      	ldr	r1, [pc, #344]	@ (8002064 <configureNotchFilter+0x23c>)
 8001f0a:	f7fe f9a1 	bl	8000250 <__aeabi_dsub>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	4b53      	ldr	r3, [pc, #332]	@ (8002068 <configureNotchFilter+0x240>)
 8001f1c:	f7fe fb50 	bl	80005c0 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	4b4b      	ldr	r3, [pc, #300]	@ (800205c <configureNotchFilter+0x234>)
 8001f2e:	f7fe fb47 	bl	80005c0 <__aeabi_dmul>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	ec43 2b17 	vmov	d7, r2, r3
 8001f3a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f3e:	eef0 0a67 	vmov.f32	s1, s15
 8001f42:	f009 fafb 	bl	800b53c <round>
 8001f46:	ec53 2b10 	vmov	r2, r3, d0
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f7fe fde7 	bl	8000b20 <__aeabi_d2iz>
 8001f52:	4603      	mov	r3, r0
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f56:	e02a      	b.n	8001fae <configureNotchFilter+0x186>
		}else{
			NF_COSWZ = round(-8 * (1 + COSWZ) * 256);
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	4b41      	ldr	r3, [pc, #260]	@ (8002064 <configureNotchFilter+0x23c>)
 8001f5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f62:	f7fe f977 	bl	8000254 <__adddf3>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	4b3e      	ldr	r3, [pc, #248]	@ (800206c <configureNotchFilter+0x244>)
 8001f74:	f7fe fb24 	bl	80005c0 <__aeabi_dmul>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	4b35      	ldr	r3, [pc, #212]	@ (800205c <configureNotchFilter+0x234>)
 8001f86:	f7fe fb1b 	bl	80005c0 <__aeabi_dmul>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	ec43 2b17 	vmov	d7, r2, r3
 8001f92:	eeb0 0a47 	vmov.f32	s0, s14
 8001f96:	eef0 0a67 	vmov.f32	s1, s15
 8001f9a:	f009 facf 	bl	800b53c <round>
 8001f9e:	ec53 2b10 	vmov	r2, r3, d0
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f7fe fdbb 	bl	8000b20 <__aeabi_d2iz>
 8001faa:	4603      	mov	r3, r0
 8001fac:	627b      	str	r3, [r7, #36]	@ 0x24
		}
	}
	setBank(1);
 8001fae:	2001      	movs	r0, #1
 8001fb0:	f7ff fdb0 	bl	8001b14 <setBank>
	writeRegister(0x0F, (uint8_t)(NF_COSWZ & 0xFF));  // Lower byte for X-axis
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	4619      	mov	r1, r3
 8001fba:	200f      	movs	r0, #15
 8001fbc:	f7ff fd5e 	bl	8001a7c <writeRegister>
	writeRegister(0x10, (uint8_t)(NF_COSWZ & 0xFF));  // Lower byte for Y-axis
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	2010      	movs	r0, #16
 8001fc8:	f7ff fd58 	bl	8001a7c <writeRegister>
	writeRegister(0x11, (uint8_t)(NF_COSWZ & 0xFF));  // Lower byte for Z-axis
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	2011      	movs	r0, #17
 8001fd4:	f7ff fd52 	bl	8001a7c <writeRegister>
	writeRegister(0x12, (uint8_t)((NF_COSWZ >> 8) & 0x01));  // Upper bit for all axes
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fda:	121b      	asrs	r3, r3, #8
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	2012      	movs	r0, #18
 8001fe8:	f7ff fd48 	bl	8001a7c <writeRegister>

	uint8_t reg_0x12;
	readRegisters(0x12, 1, &reg_0x12);
 8001fec:	1dfb      	adds	r3, r7, #7
 8001fee:	461a      	mov	r2, r3
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	2012      	movs	r0, #18
 8001ff4:	f7ff fcd6 	bl	80019a4 <readRegisters>
	// Modify only necessary bits (Bit 3 = X, Bit 4 = Y, Bit 5 = Z)
	reg_0x12 &= ~(0b00111000);  // Clear bits 3, 4, 5
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	71fb      	strb	r3, [r7, #7]
	reg_0x12 |= (NF_COSWZ_SEL << 3) | (NF_COSWZ_SEL << 4) | (NF_COSWZ_SEL << 5);
 8002002:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002006:	461a      	mov	r2, r3
 8002008:	0052      	lsls	r2, r2, #1
 800200a:	4413      	add	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	b25a      	sxtb	r2, r3
 8002012:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002016:	015b      	lsls	r3, r3, #5
 8002018:	b25b      	sxtb	r3, r3
 800201a:	4313      	orrs	r3, r2
 800201c:	b25a      	sxtb	r2, r3
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	b25b      	sxtb	r3, r3
 8002022:	4313      	orrs	r3, r2
 8002024:	b25b      	sxtb	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	71fb      	strb	r3, [r7, #7]
	writeRegister(0x12, reg_0x12);
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	4619      	mov	r1, r3
 800202e:	2012      	movs	r0, #18
 8002030:	f7ff fd24 	bl	8001a7c <writeRegister>

	// Set Notch Filter Bandwidth
	writeRegister(0x13, BW_SEL << 4);
 8002034:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	b2db      	uxtb	r3, r3
 800203c:	4619      	mov	r1, r3
 800203e:	2013      	movs	r0, #19
 8002040:	f7ff fd1c 	bl	8001a7c <writeRegister>
//	writeRegister(0x12, NF_COSWZ_SEL << 5);
//
//	writeRegister(0x13, BW_SEL << 4);
//	writeRegister(0x0b, 0x00);

	setBank(0);
 8002044:	2000      	movs	r0, #0
 8002046:	f7ff fd65 	bl	8001b14 <setBank>
}
 800204a:	bf00      	nop
 800204c:	3728      	adds	r7, #40	@ 0x28
 800204e:	46bd      	mov	sp, r7
 8002050:	bdb0      	pop	{r4, r5, r7, pc}
 8002052:	bf00      	nop
 8002054:	f3af 8000 	nop.w
 8002058:	40400000 	.word	0x40400000
 800205c:	40700000 	.word	0x40700000
 8002060:	3fec0000 	.word	0x3fec0000
 8002064:	3ff00000 	.word	0x3ff00000
 8002068:	40200000 	.word	0x40200000
 800206c:	c0200000 	.word	0xc0200000
 8002070:	53c8d4f1 	.word	0x53c8d4f1
 8002074:	400921fb 	.word	0x400921fb

08002078 <getAAFConfig>:
    {3299,55, 3008,    3}, {3381,56, 3136,    3}, {3464,57, 3264,    3},
    {3548,58, 3392,    3}, {3633,59, 3456,    3}, {3718,60, 3584,    3},
    {3805,61, 3712,    3}, {3892,62, 3840,    3}, {3979,63, 3968,    3}
};

static const AAF_Config *getAAFConfig(uint16_t bandwidth) {
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	80fb      	strh	r3, [r7, #6]
    const AAF_Config *best = &aaf_table[0];
 8002082:	4b0f      	ldr	r3, [pc, #60]	@ (80020c0 <getAAFConfig+0x48>)
 8002084:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < sizeof(aaf_table)/sizeof(aaf_table[0]); i++) {
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	e00f      	b.n	80020ac <getAAFConfig+0x34>
        if (aaf_table[i].bandwidth >= bandwidth) {
 800208c:	4a0c      	ldr	r2, [pc, #48]	@ (80020c0 <getAAFConfig+0x48>)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8002094:	88fa      	ldrh	r2, [r7, #6]
 8002096:	429a      	cmp	r2, r3
 8002098:	d805      	bhi.n	80020a6 <getAAFConfig+0x2e>
            best = &aaf_table[i];
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4a08      	ldr	r2, [pc, #32]	@ (80020c0 <getAAFConfig+0x48>)
 80020a0:	4413      	add	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]
            break;
 80020a4:	e005      	b.n	80020b2 <getAAFConfig+0x3a>
    for (size_t i = 0; i < sizeof(aaf_table)/sizeof(aaf_table[0]); i++) {
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	3301      	adds	r3, #1
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80020b0:	d9ec      	bls.n	800208c <getAAFConfig+0x14>
        }
    }
    return best;
 80020b2:	68fb      	ldr	r3, [r7, #12]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	0800e00c 	.word	0x0800e00c

080020c4 <setAntiAliasFilter>:

void setAntiAliasFilter(uint16_t bandwidth_hz, bool accel_enable, bool gyro_enable) {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	80fb      	strh	r3, [r7, #6]
 80020ce:	460b      	mov	r3, r1
 80020d0:	717b      	strb	r3, [r7, #5]
 80020d2:	4613      	mov	r3, r2
 80020d4:	713b      	strb	r3, [r7, #4]
    const AAF_Config *cfg = getAAFConfig(bandwidth_hz);
 80020d6:	88fb      	ldrh	r3, [r7, #6]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ffcd 	bl	8002078 <getAAFConfig>
 80020de:	6178      	str	r0, [r7, #20]

    // accel
    setBank(2);
 80020e0:	2002      	movs	r0, #2
 80020e2:	f7ff fd17 	bl	8001b14 <setBank>

    uint8_t reg03;
    readRegisters(0x03, 1, &reg03);
 80020e6:	f107 0313 	add.w	r3, r7, #19
 80020ea:	461a      	mov	r2, r3
 80020ec:	2101      	movs	r1, #1
 80020ee:	2003      	movs	r0, #3
 80020f0:	f7ff fc58 	bl	80019a4 <readRegisters>
    reg03 &= ~0x7E;                         // Clear bits 6:1
 80020f4:	7cfb      	ldrb	r3, [r7, #19]
 80020f6:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	74fb      	strb	r3, [r7, #19]
    reg03 |= (cfg->delt & 0x3F) << 1;       // ACCEL_AAF_DELT
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	789b      	ldrb	r3, [r3, #2]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	b25b      	sxtb	r3, r3
 8002106:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800210a:	b25a      	sxtb	r2, r3
 800210c:	7cfb      	ldrb	r3, [r7, #19]
 800210e:	b25b      	sxtb	r3, r3
 8002110:	4313      	orrs	r3, r2
 8002112:	b25b      	sxtb	r3, r3
 8002114:	b2db      	uxtb	r3, r3
 8002116:	74fb      	strb	r3, [r7, #19]
    if (!accel_enable)
 8002118:	797b      	ldrb	r3, [r7, #5]
 800211a:	f083 0301 	eor.w	r3, r3, #1
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <setAntiAliasFilter+0x6c>
        reg03 |= 1 << 0;                    // ACCEL_AAF_DIS = 1
 8002124:	7cfb      	ldrb	r3, [r7, #19]
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	b2db      	uxtb	r3, r3
 800212c:	74fb      	strb	r3, [r7, #19]
 800212e:	e004      	b.n	800213a <setAntiAliasFilter+0x76>
    else
        reg03 &= ~(1 << 0);                 // Enable AAF
 8002130:	7cfb      	ldrb	r3, [r7, #19]
 8002132:	f023 0301 	bic.w	r3, r3, #1
 8002136:	b2db      	uxtb	r3, r3
 8002138:	74fb      	strb	r3, [r7, #19]
    writeRegister(0x03, reg03);
 800213a:	7cfb      	ldrb	r3, [r7, #19]
 800213c:	4619      	mov	r1, r3
 800213e:	2003      	movs	r0, #3
 8002140:	f7ff fc9c 	bl	8001a7c <writeRegister>

    writeRegister(0x04, (uint8_t)(cfg->deltsqr & 0xFF));  // Lower 8 bits of DELTSQR
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	889b      	ldrh	r3, [r3, #4]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	4619      	mov	r1, r3
 800214c:	2004      	movs	r0, #4
 800214e:	f7ff fc95 	bl	8001a7c <writeRegister>
    uint8_t reg05;
    readRegisters(0x05, 1, &reg05);
 8002152:	f107 0312 	add.w	r3, r7, #18
 8002156:	461a      	mov	r2, r3
 8002158:	2101      	movs	r1, #1
 800215a:	2005      	movs	r0, #5
 800215c:	f7ff fc22 	bl	80019a4 <readRegisters>
    reg05 &= 0x00;                          // Clear bits 7:0
 8002160:	2300      	movs	r3, #0
 8002162:	74bb      	strb	r3, [r7, #18]
    reg05 |= ((cfg->deltsqr >> 8) & 0x0F);  // Upper 4 bits of DELTSQR
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	889b      	ldrh	r3, [r3, #4]
 8002168:	0a1b      	lsrs	r3, r3, #8
 800216a:	b29b      	uxth	r3, r3
 800216c:	b25b      	sxtb	r3, r3
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	b25a      	sxtb	r2, r3
 8002174:	7cbb      	ldrb	r3, [r7, #18]
 8002176:	b25b      	sxtb	r3, r3
 8002178:	4313      	orrs	r3, r2
 800217a:	b25b      	sxtb	r3, r3
 800217c:	b2db      	uxtb	r3, r3
 800217e:	74bb      	strb	r3, [r7, #18]
    reg05 |= (cfg->bitshift << 4) & 0xF0;   // ACCEL_AAF_BITSHIFT
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	799b      	ldrb	r3, [r3, #6]
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	b25a      	sxtb	r2, r3
 8002188:	7cbb      	ldrb	r3, [r7, #18]
 800218a:	b25b      	sxtb	r3, r3
 800218c:	4313      	orrs	r3, r2
 800218e:	b25b      	sxtb	r3, r3
 8002190:	b2db      	uxtb	r3, r3
 8002192:	74bb      	strb	r3, [r7, #18]
    writeRegister(0x05, reg05);
 8002194:	7cbb      	ldrb	r3, [r7, #18]
 8002196:	4619      	mov	r1, r3
 8002198:	2005      	movs	r0, #5
 800219a:	f7ff fc6f 	bl	8001a7c <writeRegister>

    // gyro
    setBank(1);
 800219e:	2001      	movs	r0, #1
 80021a0:	f7ff fcb8 	bl	8001b14 <setBank>

    uint8_t reg0C;
    readRegisters(0x0C, 1, &reg0C);
 80021a4:	f107 0311 	add.w	r3, r7, #17
 80021a8:	461a      	mov	r2, r3
 80021aa:	2101      	movs	r1, #1
 80021ac:	200c      	movs	r0, #12
 80021ae:	f7ff fbf9 	bl	80019a4 <readRegisters>
    reg0C &= ~0x3F;                        // Clear bits 5:0
 80021b2:	7c7b      	ldrb	r3, [r7, #17]
 80021b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	747b      	strb	r3, [r7, #17]
    reg0C |= (cfg->delt & 0x3F);           // GYRO_AAF_DELT
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	789b      	ldrb	r3, [r3, #2]
 80021c0:	b25b      	sxtb	r3, r3
 80021c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021c6:	b25a      	sxtb	r2, r3
 80021c8:	7c7b      	ldrb	r3, [r7, #17]
 80021ca:	b25b      	sxtb	r3, r3
 80021cc:	4313      	orrs	r3, r2
 80021ce:	b25b      	sxtb	r3, r3
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	747b      	strb	r3, [r7, #17]
    writeRegister(0x0C, reg0C);
 80021d4:	7c7b      	ldrb	r3, [r7, #17]
 80021d6:	4619      	mov	r1, r3
 80021d8:	200c      	movs	r0, #12
 80021da:	f7ff fc4f 	bl	8001a7c <writeRegister>

    writeRegister(0x0D, (uint8_t)(cfg->deltsqr & 0xFF));  // Lower 8 bits
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	889b      	ldrh	r3, [r3, #4]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	4619      	mov	r1, r3
 80021e6:	200d      	movs	r0, #13
 80021e8:	f7ff fc48 	bl	8001a7c <writeRegister>
    uint8_t reg0E;
    readRegisters(0x0E, 1, &reg0E);
 80021ec:	f107 0310 	add.w	r3, r7, #16
 80021f0:	461a      	mov	r2, r3
 80021f2:	2101      	movs	r1, #1
 80021f4:	200e      	movs	r0, #14
 80021f6:	f7ff fbd5 	bl	80019a4 <readRegisters>
    reg0E &= 0x00;                         // Clear bits
 80021fa:	2300      	movs	r3, #0
 80021fc:	743b      	strb	r3, [r7, #16]
    reg0E |= ((cfg->deltsqr >> 8) & 0x0F); // Upper 4 bits
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	889b      	ldrh	r3, [r3, #4]
 8002202:	0a1b      	lsrs	r3, r3, #8
 8002204:	b29b      	uxth	r3, r3
 8002206:	b25b      	sxtb	r3, r3
 8002208:	f003 030f 	and.w	r3, r3, #15
 800220c:	b25a      	sxtb	r2, r3
 800220e:	7c3b      	ldrb	r3, [r7, #16]
 8002210:	b25b      	sxtb	r3, r3
 8002212:	4313      	orrs	r3, r2
 8002214:	b25b      	sxtb	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	743b      	strb	r3, [r7, #16]
    reg0E |= (cfg->bitshift << 4) & 0xF0;  // GYRO_AAF_BITSHIFT
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	799b      	ldrb	r3, [r3, #6]
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	b25a      	sxtb	r2, r3
 8002222:	7c3b      	ldrb	r3, [r7, #16]
 8002224:	b25b      	sxtb	r3, r3
 8002226:	4313      	orrs	r3, r2
 8002228:	b25b      	sxtb	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	743b      	strb	r3, [r7, #16]
    writeRegister(0x0E, reg0E);
 800222e:	7c3b      	ldrb	r3, [r7, #16]
 8002230:	4619      	mov	r1, r3
 8002232:	200e      	movs	r0, #14
 8002234:	f7ff fc22 	bl	8001a7c <writeRegister>

    uint8_t reg0B;
    readRegisters(0x0B, 1, &reg0B);
 8002238:	f107 030f 	add.w	r3, r7, #15
 800223c:	461a      	mov	r2, r3
 800223e:	2101      	movs	r1, #1
 8002240:	200b      	movs	r0, #11
 8002242:	f7ff fbaf 	bl	80019a4 <readRegisters>
    if (!gyro_enable)
 8002246:	793b      	ldrb	r3, [r7, #4]
 8002248:	f083 0301 	eor.w	r3, r3, #1
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d005      	beq.n	800225e <setAntiAliasFilter+0x19a>
        reg0B |= (1 << 1);                 // Disable Gyro AAF
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	b2db      	uxtb	r3, r3
 800225a:	73fb      	strb	r3, [r7, #15]
 800225c:	e004      	b.n	8002268 <setAntiAliasFilter+0x1a4>
    else
        reg0B &= ~(1 << 1);                // Enable Gyro AAF
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	f023 0302 	bic.w	r3, r3, #2
 8002264:	b2db      	uxtb	r3, r3
 8002266:	73fb      	strb	r3, [r7, #15]
    writeRegister(0x0B, reg0B);
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	4619      	mov	r1, r3
 800226c:	200b      	movs	r0, #11
 800226e:	f7ff fc05 	bl	8001a7c <writeRegister>

    setBank(0);
 8002272:	2000      	movs	r0, #0
 8002274:	f7ff fc4e 	bl	8001b14 <setBank>
}
 8002278:	bf00      	nop
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <lowPassFilter>:
float filtered_gyro_x = 0;  // Store previous value for X-axis
float filtered_gyro_y = 0;  // Store previous value for Y-axis
float filtered_gyro_z = 0;  // Store previous value for Z-axis

// Low-pass filter function
float lowPassFilter(float raw_value, int select) {
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	ed87 0a01 	vstr	s0, [r7, #4]
 800228a:	6038      	str	r0, [r7, #0]
	if(select == 0){
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d11a      	bne.n	80022c8 <lowPassFilter+0x48>
		filtered_gyro_x = alpha * raw_value + (1 - alpha) * filtered_gyro_x;
 8002292:	4b2e      	ldr	r3, [pc, #184]	@ (800234c <lowPassFilter+0xcc>)
 8002294:	ed93 7a00 	vldr	s14, [r3]
 8002298:	edd7 7a01 	vldr	s15, [r7, #4]
 800229c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022a0:	4b2a      	ldr	r3, [pc, #168]	@ (800234c <lowPassFilter+0xcc>)
 80022a2:	edd3 7a00 	vldr	s15, [r3]
 80022a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022aa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80022ae:	4b28      	ldr	r3, [pc, #160]	@ (8002350 <lowPassFilter+0xd0>)
 80022b0:	edd3 7a00 	vldr	s15, [r3]
 80022b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022bc:	4b24      	ldr	r3, [pc, #144]	@ (8002350 <lowPassFilter+0xd0>)
 80022be:	edc3 7a00 	vstr	s15, [r3]
		    return filtered_gyro_x;
 80022c2:	4b23      	ldr	r3, [pc, #140]	@ (8002350 <lowPassFilter+0xd0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	e037      	b.n	8002338 <lowPassFilter+0xb8>
	}
	if(select == 1){
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d11a      	bne.n	8002304 <lowPassFilter+0x84>
		filtered_gyro_y = alpha * raw_value + (1 - alpha) * filtered_gyro_y;
 80022ce:	4b1f      	ldr	r3, [pc, #124]	@ (800234c <lowPassFilter+0xcc>)
 80022d0:	ed93 7a00 	vldr	s14, [r3]
 80022d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80022d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022dc:	4b1b      	ldr	r3, [pc, #108]	@ (800234c <lowPassFilter+0xcc>)
 80022de:	edd3 7a00 	vldr	s15, [r3]
 80022e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80022ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002354 <lowPassFilter+0xd4>)
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f8:	4b16      	ldr	r3, [pc, #88]	@ (8002354 <lowPassFilter+0xd4>)
 80022fa:	edc3 7a00 	vstr	s15, [r3]
		return filtered_gyro_y;
 80022fe:	4b15      	ldr	r3, [pc, #84]	@ (8002354 <lowPassFilter+0xd4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	e019      	b.n	8002338 <lowPassFilter+0xb8>
	}
	filtered_gyro_z = alpha * raw_value + (1 - alpha) * filtered_gyro_z;
 8002304:	4b11      	ldr	r3, [pc, #68]	@ (800234c <lowPassFilter+0xcc>)
 8002306:	ed93 7a00 	vldr	s14, [r3]
 800230a:	edd7 7a01 	vldr	s15, [r7, #4]
 800230e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002312:	4b0e      	ldr	r3, [pc, #56]	@ (800234c <lowPassFilter+0xcc>)
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800231c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002320:	4b0d      	ldr	r3, [pc, #52]	@ (8002358 <lowPassFilter+0xd8>)
 8002322:	edd3 7a00 	vldr	s15, [r3]
 8002326:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800232a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800232e:	4b0a      	ldr	r3, [pc, #40]	@ (8002358 <lowPassFilter+0xd8>)
 8002330:	edc3 7a00 	vstr	s15, [r3]
	return filtered_gyro_z;
 8002334:	4b08      	ldr	r3, [pc, #32]	@ (8002358 <lowPassFilter+0xd8>)
 8002336:	681b      	ldr	r3, [r3, #0]


}
 8002338:	ee07 3a90 	vmov	s15, r3
 800233c:	eeb0 0a67 	vmov.f32	s0, s15
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20000000 	.word	0x20000000
 8002350:	200002c4 	.word	0x200002c4
 8002354:	200002c8 	.word	0x200002c8
 8002358:	200002cc 	.word	0x200002cc

0800235c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int le, char *ptr, int len)

{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]

int DataIdx;

for(DataIdx = 0; DataIdx < len; DataIdx++)
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	e009      	b.n	8002382 <_write+0x26>

{

ITM_SendChar(*ptr++);
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	60ba      	str	r2, [r7, #8]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff faec 	bl	8001954 <ITM_SendChar>
for(DataIdx = 0; DataIdx < len; DataIdx++)
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	3301      	adds	r3, #1
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	429a      	cmp	r2, r3
 8002388:	dbf1      	blt.n	800236e <_write+0x12>

}

return len;
 800238a:	687b      	ldr	r3, [r7, #4]

}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <MahonyAHRSupdate>:
// Integral error terms
static float integralFBx = 0.0f, integralFBy = 0.0f, integralFBz = 0.0f;

void MahonyAHRSupdate(float gx, float gy, float gz,
                      float ax, float ay, float az,
                      float dt) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b092      	sub	sp, #72	@ 0x48
 8002398:	af00      	add	r7, sp, #0
 800239a:	ed87 0a07 	vstr	s0, [r7, #28]
 800239e:	edc7 0a06 	vstr	s1, [r7, #24]
 80023a2:	ed87 1a05 	vstr	s2, [r7, #20]
 80023a6:	edc7 1a04 	vstr	s3, [r7, #16]
 80023aa:	ed87 2a03 	vstr	s4, [r7, #12]
 80023ae:	edc7 2a02 	vstr	s5, [r7, #8]
 80023b2:	ed87 3a01 	vstr	s6, [r7, #4]
    float recipNorm;
    float halfvx, halfvy, halfvz;
    float halfex, halfey, halfez;

    // Normalize accelerometer
    recipNorm = sqrtf(ax * ax + ay * ay + az * az);
 80023b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80023ba:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80023be:	edd7 7a03 	vldr	s15, [r7, #12]
 80023c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80023ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d6:	eeb0 0a67 	vmov.f32	s0, s15
 80023da:	f009 f86b 	bl	800b4b4 <sqrtf>
 80023de:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
    if (recipNorm > 1e-6f) {
 80023e2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80023e6:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 80023f8 <MahonyAHRSupdate+0x64>
 80023ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f2:	dc03      	bgt.n	80023fc <MahonyAHRSupdate+0x68>
        ax /= recipNorm;
        ay /= recipNorm;
        az /= recipNorm;
    } else {
        return;
 80023f4:	e209      	b.n	800280a <MahonyAHRSupdate+0x476>
 80023f6:	bf00      	nop
 80023f8:	358637bd 	.word	0x358637bd
        ax /= recipNorm;
 80023fc:	edd7 6a04 	vldr	s13, [r7, #16]
 8002400:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002408:	edc7 7a04 	vstr	s15, [r7, #16]
        ay /= recipNorm;
 800240c:	edd7 6a03 	vldr	s13, [r7, #12]
 8002410:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002418:	edc7 7a03 	vstr	s15, [r7, #12]
        az /= recipNorm;
 800241c:	edd7 6a02 	vldr	s13, [r7, #8]
 8002420:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002428:	edc7 7a02 	vstr	s15, [r7, #8]
    }

    // Estimated direction of gravity
    halfvx = q1 * q3 - q0 * q2;
 800242c:	4be3      	ldr	r3, [pc, #908]	@ (80027bc <MahonyAHRSupdate+0x428>)
 800242e:	ed93 7a00 	vldr	s14, [r3]
 8002432:	4be3      	ldr	r3, [pc, #908]	@ (80027c0 <MahonyAHRSupdate+0x42c>)
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	ee27 7a27 	vmul.f32	s14, s14, s15
 800243c:	4be1      	ldr	r3, [pc, #900]	@ (80027c4 <MahonyAHRSupdate+0x430>)
 800243e:	edd3 6a00 	vldr	s13, [r3]
 8002442:	4be1      	ldr	r3, [pc, #900]	@ (80027c8 <MahonyAHRSupdate+0x434>)
 8002444:	edd3 7a00 	vldr	s15, [r3]
 8002448:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800244c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002450:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    halfvy = q0 * q1 + q2 * q3;
 8002454:	4bdb      	ldr	r3, [pc, #876]	@ (80027c4 <MahonyAHRSupdate+0x430>)
 8002456:	ed93 7a00 	vldr	s14, [r3]
 800245a:	4bd8      	ldr	r3, [pc, #864]	@ (80027bc <MahonyAHRSupdate+0x428>)
 800245c:	edd3 7a00 	vldr	s15, [r3]
 8002460:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002464:	4bd8      	ldr	r3, [pc, #864]	@ (80027c8 <MahonyAHRSupdate+0x434>)
 8002466:	edd3 6a00 	vldr	s13, [r3]
 800246a:	4bd5      	ldr	r3, [pc, #852]	@ (80027c0 <MahonyAHRSupdate+0x42c>)
 800246c:	edd3 7a00 	vldr	s15, [r3]
 8002470:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002478:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    halfvz = q0 * q0 - 0.5f + q3 * q3;
 800247c:	4bd1      	ldr	r3, [pc, #836]	@ (80027c4 <MahonyAHRSupdate+0x430>)
 800247e:	ed93 7a00 	vldr	s14, [r3]
 8002482:	4bd0      	ldr	r3, [pc, #832]	@ (80027c4 <MahonyAHRSupdate+0x430>)
 8002484:	edd3 7a00 	vldr	s15, [r3]
 8002488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800248c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002490:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002494:	4bca      	ldr	r3, [pc, #808]	@ (80027c0 <MahonyAHRSupdate+0x42c>)
 8002496:	edd3 6a00 	vldr	s13, [r3]
 800249a:	4bc9      	ldr	r3, [pc, #804]	@ (80027c0 <MahonyAHRSupdate+0x42c>)
 800249c:	edd3 7a00 	vldr	s15, [r3]
 80024a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    // Error is cross product between estimated and measured direction of gravity
    halfex = (ay * halfvz - az * halfvy);
 80024ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80024b0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80024b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024b8:	edd7 6a02 	vldr	s13, [r7, #8]
 80024bc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80024c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    halfey = (az * halfvx - ax * halfvz);
 80024cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80024d0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80024d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024d8:	edd7 6a04 	vldr	s13, [r7, #16]
 80024dc:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80024e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024e8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    halfez = (ax * halfvy - ay * halfvx);
 80024ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80024f0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80024f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024f8:	edd7 6a03 	vldr	s13, [r7, #12]
 80024fc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002508:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Integral feedback
    if (TWO_KI > 0.0f) {
        integralFBx += TWO_KI * halfex * dt;
 800250c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002510:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 80027cc <MahonyAHRSupdate+0x438>
 8002514:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002518:	edd7 7a01 	vldr	s15, [r7, #4]
 800251c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002520:	4bab      	ldr	r3, [pc, #684]	@ (80027d0 <MahonyAHRSupdate+0x43c>)
 8002522:	edd3 7a00 	vldr	s15, [r3]
 8002526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800252a:	4ba9      	ldr	r3, [pc, #676]	@ (80027d0 <MahonyAHRSupdate+0x43c>)
 800252c:	edc3 7a00 	vstr	s15, [r3]
        integralFBy += TWO_KI * halfey * dt;
 8002530:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002534:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 80027cc <MahonyAHRSupdate+0x438>
 8002538:	ee27 7a87 	vmul.f32	s14, s15, s14
 800253c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002540:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002544:	4ba3      	ldr	r3, [pc, #652]	@ (80027d4 <MahonyAHRSupdate+0x440>)
 8002546:	edd3 7a00 	vldr	s15, [r3]
 800254a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800254e:	4ba1      	ldr	r3, [pc, #644]	@ (80027d4 <MahonyAHRSupdate+0x440>)
 8002550:	edc3 7a00 	vstr	s15, [r3]
        integralFBz += TWO_KI * halfez * dt;
 8002554:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002558:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 80027cc <MahonyAHRSupdate+0x438>
 800255c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002560:	edd7 7a01 	vldr	s15, [r7, #4]
 8002564:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002568:	4b9b      	ldr	r3, [pc, #620]	@ (80027d8 <MahonyAHRSupdate+0x444>)
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002572:	4b99      	ldr	r3, [pc, #612]	@ (80027d8 <MahonyAHRSupdate+0x444>)
 8002574:	edc3 7a00 	vstr	s15, [r3]
        gx += integralFBx;
 8002578:	4b95      	ldr	r3, [pc, #596]	@ (80027d0 <MahonyAHRSupdate+0x43c>)
 800257a:	edd3 7a00 	vldr	s15, [r3]
 800257e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002586:	edc7 7a07 	vstr	s15, [r7, #28]
        gy += integralFBy;
 800258a:	4b92      	ldr	r3, [pc, #584]	@ (80027d4 <MahonyAHRSupdate+0x440>)
 800258c:	edd3 7a00 	vldr	s15, [r3]
 8002590:	ed97 7a06 	vldr	s14, [r7, #24]
 8002594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002598:	edc7 7a06 	vstr	s15, [r7, #24]
        gz += integralFBz;
 800259c:	4b8e      	ldr	r3, [pc, #568]	@ (80027d8 <MahonyAHRSupdate+0x444>)
 800259e:	edd3 7a00 	vldr	s15, [r3]
 80025a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80025a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025aa:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    // Proportional feedback
    gx += TWO_KP * halfex;
 80025ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80025b2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80025b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ba:	edc7 7a07 	vstr	s15, [r7, #28]
    gy += TWO_KP * halfey;
 80025be:	ed97 7a06 	vldr	s14, [r7, #24]
 80025c2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80025c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ca:	edc7 7a06 	vstr	s15, [r7, #24]
    gz += TWO_KP * halfez;
 80025ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80025d2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80025d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025da:	edc7 7a05 	vstr	s15, [r7, #20]

    // Integrate rate of change of quaternion
    gx *= 0.5f * dt;
 80025de:	edd7 7a01 	vldr	s15, [r7, #4]
 80025e2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80025e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80025ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025f2:	edc7 7a07 	vstr	s15, [r7, #28]
    gy *= 0.5f * dt;
 80025f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80025fa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80025fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002602:	ed97 7a06 	vldr	s14, [r7, #24]
 8002606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800260a:	edc7 7a06 	vstr	s15, [r7, #24]
    gz *= 0.5f * dt;
 800260e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002612:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002616:	ee67 7a87 	vmul.f32	s15, s15, s14
 800261a:	ed97 7a05 	vldr	s14, [r7, #20]
 800261e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002622:	edc7 7a05 	vstr	s15, [r7, #20]

    float qa = q0;
 8002626:	4b67      	ldr	r3, [pc, #412]	@ (80027c4 <MahonyAHRSupdate+0x430>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	62bb      	str	r3, [r7, #40]	@ 0x28
    float qb = q1;
 800262c:	4b63      	ldr	r3, [pc, #396]	@ (80027bc <MahonyAHRSupdate+0x428>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24
    float qc = q2;
 8002632:	4b65      	ldr	r3, [pc, #404]	@ (80027c8 <MahonyAHRSupdate+0x434>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	623b      	str	r3, [r7, #32]

    q0 += (-qb * gx - qc * gy - q3 * gz);
 8002638:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800263c:	eeb1 7a67 	vneg.f32	s14, s15
 8002640:	edd7 7a07 	vldr	s15, [r7, #28]
 8002644:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002648:	edd7 6a08 	vldr	s13, [r7, #32]
 800264c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002650:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002654:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002658:	4b59      	ldr	r3, [pc, #356]	@ (80027c0 <MahonyAHRSupdate+0x42c>)
 800265a:	edd3 6a00 	vldr	s13, [r3]
 800265e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002666:	ee37 7a67 	vsub.f32	s14, s14, s15
 800266a:	4b56      	ldr	r3, [pc, #344]	@ (80027c4 <MahonyAHRSupdate+0x430>)
 800266c:	edd3 7a00 	vldr	s15, [r3]
 8002670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002674:	4b53      	ldr	r3, [pc, #332]	@ (80027c4 <MahonyAHRSupdate+0x430>)
 8002676:	edc3 7a00 	vstr	s15, [r3]
    q1 += (qa * gx + qc * gz - q3 * gy);
 800267a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800267e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002682:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002686:	edd7 6a08 	vldr	s13, [r7, #32]
 800268a:	edd7 7a05 	vldr	s15, [r7, #20]
 800268e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002692:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002696:	4b4a      	ldr	r3, [pc, #296]	@ (80027c0 <MahonyAHRSupdate+0x42c>)
 8002698:	edd3 6a00 	vldr	s13, [r3]
 800269c:	edd7 7a06 	vldr	s15, [r7, #24]
 80026a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026a8:	4b44      	ldr	r3, [pc, #272]	@ (80027bc <MahonyAHRSupdate+0x428>)
 80026aa:	edd3 7a00 	vldr	s15, [r3]
 80026ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b2:	4b42      	ldr	r3, [pc, #264]	@ (80027bc <MahonyAHRSupdate+0x428>)
 80026b4:	edc3 7a00 	vstr	s15, [r3]
    q2 += (qa * gy - qb * gz + q3 * gx);
 80026b8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80026bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80026c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026c4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80026c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80026cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026d4:	4b3a      	ldr	r3, [pc, #232]	@ (80027c0 <MahonyAHRSupdate+0x42c>)
 80026d6:	edd3 6a00 	vldr	s13, [r3]
 80026da:	edd7 7a07 	vldr	s15, [r7, #28]
 80026de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026e6:	4b38      	ldr	r3, [pc, #224]	@ (80027c8 <MahonyAHRSupdate+0x434>)
 80026e8:	edd3 7a00 	vldr	s15, [r3]
 80026ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026f0:	4b35      	ldr	r3, [pc, #212]	@ (80027c8 <MahonyAHRSupdate+0x434>)
 80026f2:	edc3 7a00 	vstr	s15, [r3]
    q3 += (qa * gz + qb * gy - qc * gx);
 80026f6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80026fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80026fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002702:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002706:	edd7 7a06 	vldr	s15, [r7, #24]
 800270a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800270e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002712:	edd7 6a08 	vldr	s13, [r7, #32]
 8002716:	edd7 7a07 	vldr	s15, [r7, #28]
 800271a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800271e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002722:	4b27      	ldr	r3, [pc, #156]	@ (80027c0 <MahonyAHRSupdate+0x42c>)
 8002724:	edd3 7a00 	vldr	s15, [r3]
 8002728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800272c:	4b24      	ldr	r3, [pc, #144]	@ (80027c0 <MahonyAHRSupdate+0x42c>)
 800272e:	edc3 7a00 	vstr	s15, [r3]

    // Normalize quaternion
    recipNorm = 1.0f / sqrtf(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002732:	4b24      	ldr	r3, [pc, #144]	@ (80027c4 <MahonyAHRSupdate+0x430>)
 8002734:	ed93 7a00 	vldr	s14, [r3]
 8002738:	4b22      	ldr	r3, [pc, #136]	@ (80027c4 <MahonyAHRSupdate+0x430>)
 800273a:	edd3 7a00 	vldr	s15, [r3]
 800273e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002742:	4b1e      	ldr	r3, [pc, #120]	@ (80027bc <MahonyAHRSupdate+0x428>)
 8002744:	edd3 6a00 	vldr	s13, [r3]
 8002748:	4b1c      	ldr	r3, [pc, #112]	@ (80027bc <MahonyAHRSupdate+0x428>)
 800274a:	edd3 7a00 	vldr	s15, [r3]
 800274e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002752:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002756:	4b1c      	ldr	r3, [pc, #112]	@ (80027c8 <MahonyAHRSupdate+0x434>)
 8002758:	edd3 6a00 	vldr	s13, [r3]
 800275c:	4b1a      	ldr	r3, [pc, #104]	@ (80027c8 <MahonyAHRSupdate+0x434>)
 800275e:	edd3 7a00 	vldr	s15, [r3]
 8002762:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002766:	ee37 7a27 	vadd.f32	s14, s14, s15
 800276a:	4b15      	ldr	r3, [pc, #84]	@ (80027c0 <MahonyAHRSupdate+0x42c>)
 800276c:	edd3 6a00 	vldr	s13, [r3]
 8002770:	4b13      	ldr	r3, [pc, #76]	@ (80027c0 <MahonyAHRSupdate+0x42c>)
 8002772:	edd3 7a00 	vldr	s15, [r3]
 8002776:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800277a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800277e:	eeb0 0a67 	vmov.f32	s0, s15
 8002782:	f008 fe97 	bl	800b4b4 <sqrtf>
 8002786:	eeb0 7a40 	vmov.f32	s14, s0
 800278a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800278e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002792:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    q0 *= recipNorm;
 8002796:	4b0b      	ldr	r3, [pc, #44]	@ (80027c4 <MahonyAHRSupdate+0x430>)
 8002798:	ed93 7a00 	vldr	s14, [r3]
 800279c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80027a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a4:	4b07      	ldr	r3, [pc, #28]	@ (80027c4 <MahonyAHRSupdate+0x430>)
 80027a6:	edc3 7a00 	vstr	s15, [r3]
    q1 *= recipNorm;
 80027aa:	4b04      	ldr	r3, [pc, #16]	@ (80027bc <MahonyAHRSupdate+0x428>)
 80027ac:	ed93 7a00 	vldr	s14, [r3]
 80027b0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80027b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b8:	e010      	b.n	80027dc <MahonyAHRSupdate+0x448>
 80027ba:	bf00      	nop
 80027bc:	20000364 	.word	0x20000364
 80027c0:	2000036c 	.word	0x2000036c
 80027c4:	20000004 	.word	0x20000004
 80027c8:	20000368 	.word	0x20000368
 80027cc:	3e4ccccd 	.word	0x3e4ccccd
 80027d0:	20000370 	.word	0x20000370
 80027d4:	20000374 	.word	0x20000374
 80027d8:	20000378 	.word	0x20000378
 80027dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002810 <MahonyAHRSupdate+0x47c>)
 80027de:	edc3 7a00 	vstr	s15, [r3]
    q2 *= recipNorm;
 80027e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002814 <MahonyAHRSupdate+0x480>)
 80027e4:	ed93 7a00 	vldr	s14, [r3]
 80027e8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80027ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f0:	4b08      	ldr	r3, [pc, #32]	@ (8002814 <MahonyAHRSupdate+0x480>)
 80027f2:	edc3 7a00 	vstr	s15, [r3]
    q3 *= recipNorm;
 80027f6:	4b08      	ldr	r3, [pc, #32]	@ (8002818 <MahonyAHRSupdate+0x484>)
 80027f8:	ed93 7a00 	vldr	s14, [r3]
 80027fc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002804:	4b04      	ldr	r3, [pc, #16]	@ (8002818 <MahonyAHRSupdate+0x484>)
 8002806:	edc3 7a00 	vstr	s15, [r3]
}
 800280a:	3748      	adds	r7, #72	@ 0x48
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20000364 	.word	0x20000364
 8002814:	20000368 	.word	0x20000368
 8002818:	2000036c 	.word	0x2000036c
 800281c:	00000000 	.word	0x00000000

08002820 <GetEulerAngles>:

// Convert quaternion to Euler angles (NED frame) with doubles
void GetEulerAngles(double *roll, double *pitch, double *yaw) {
 8002820:	b5b0      	push	{r4, r5, r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
    // Roll (x-axis = East)
    *roll  = atan2((double)(2.0f * (q0 * q1 + q2 * q3)),
 800282c:	4b6e      	ldr	r3, [pc, #440]	@ (80029e8 <GetEulerAngles+0x1c8>)
 800282e:	ed93 7a00 	vldr	s14, [r3]
 8002832:	4b6e      	ldr	r3, [pc, #440]	@ (80029ec <GetEulerAngles+0x1cc>)
 8002834:	edd3 7a00 	vldr	s15, [r3]
 8002838:	ee27 7a27 	vmul.f32	s14, s14, s15
 800283c:	4b6c      	ldr	r3, [pc, #432]	@ (80029f0 <GetEulerAngles+0x1d0>)
 800283e:	edd3 6a00 	vldr	s13, [r3]
 8002842:	4b6c      	ldr	r3, [pc, #432]	@ (80029f4 <GetEulerAngles+0x1d4>)
 8002844:	edd3 7a00 	vldr	s15, [r3]
 8002848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800284c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002850:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002854:	ee17 0a90 	vmov	r0, s15
 8002858:	f7fd fe5a 	bl	8000510 <__aeabi_f2d>
 800285c:	4604      	mov	r4, r0
 800285e:	460d      	mov	r5, r1
                   (double)(1.0f - 2.0f * (q1 * q1 + q2 * q2)));
 8002860:	4b62      	ldr	r3, [pc, #392]	@ (80029ec <GetEulerAngles+0x1cc>)
 8002862:	ed93 7a00 	vldr	s14, [r3]
 8002866:	4b61      	ldr	r3, [pc, #388]	@ (80029ec <GetEulerAngles+0x1cc>)
 8002868:	edd3 7a00 	vldr	s15, [r3]
 800286c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002870:	4b5f      	ldr	r3, [pc, #380]	@ (80029f0 <GetEulerAngles+0x1d0>)
 8002872:	edd3 6a00 	vldr	s13, [r3]
 8002876:	4b5e      	ldr	r3, [pc, #376]	@ (80029f0 <GetEulerAngles+0x1d0>)
 8002878:	edd3 7a00 	vldr	s15, [r3]
 800287c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002884:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002888:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800288c:	ee77 7a67 	vsub.f32	s15, s14, s15
    *roll  = atan2((double)(2.0f * (q0 * q1 + q2 * q3)),
 8002890:	ee17 0a90 	vmov	r0, s15
 8002894:	f7fd fe3c 	bl	8000510 <__aeabi_f2d>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	ec43 2b11 	vmov	d1, r2, r3
 80028a0:	ec45 4b10 	vmov	d0, r4, r5
 80028a4:	f008 fd08 	bl	800b2b8 <atan2>
 80028a8:	eeb0 7a40 	vmov.f32	s14, s0
 80028ac:	eef0 7a60 	vmov.f32	s15, s1
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	ed83 7b00 	vstr	d7, [r3]

    // Pitch (y-axis = North)
    *pitch = asin((double)(2.0f * (q0 * q2 - q3 * q1)));
 80028b6:	4b4c      	ldr	r3, [pc, #304]	@ (80029e8 <GetEulerAngles+0x1c8>)
 80028b8:	ed93 7a00 	vldr	s14, [r3]
 80028bc:	4b4c      	ldr	r3, [pc, #304]	@ (80029f0 <GetEulerAngles+0x1d0>)
 80028be:	edd3 7a00 	vldr	s15, [r3]
 80028c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028c6:	4b4b      	ldr	r3, [pc, #300]	@ (80029f4 <GetEulerAngles+0x1d4>)
 80028c8:	edd3 6a00 	vldr	s13, [r3]
 80028cc:	4b47      	ldr	r3, [pc, #284]	@ (80029ec <GetEulerAngles+0x1cc>)
 80028ce:	edd3 7a00 	vldr	s15, [r3]
 80028d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80028de:	ee17 0a90 	vmov	r0, s15
 80028e2:	f7fd fe15 	bl	8000510 <__aeabi_f2d>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	ec43 2b10 	vmov	d0, r2, r3
 80028ee:	f008 fcaf 	bl	800b250 <asin>
 80028f2:	eeb0 7a40 	vmov.f32	s14, s0
 80028f6:	eef0 7a60 	vmov.f32	s15, s1
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	ed83 7b00 	vstr	d7, [r3]

    // Yaw (z-axis = Down)
    *yaw   = atan2((double)(2.0f * (q0 * q3 + q1 * q2)),
 8002900:	4b39      	ldr	r3, [pc, #228]	@ (80029e8 <GetEulerAngles+0x1c8>)
 8002902:	ed93 7a00 	vldr	s14, [r3]
 8002906:	4b3b      	ldr	r3, [pc, #236]	@ (80029f4 <GetEulerAngles+0x1d4>)
 8002908:	edd3 7a00 	vldr	s15, [r3]
 800290c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002910:	4b36      	ldr	r3, [pc, #216]	@ (80029ec <GetEulerAngles+0x1cc>)
 8002912:	edd3 6a00 	vldr	s13, [r3]
 8002916:	4b36      	ldr	r3, [pc, #216]	@ (80029f0 <GetEulerAngles+0x1d0>)
 8002918:	edd3 7a00 	vldr	s15, [r3]
 800291c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002924:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002928:	ee17 0a90 	vmov	r0, s15
 800292c:	f7fd fdf0 	bl	8000510 <__aeabi_f2d>
 8002930:	4604      	mov	r4, r0
 8002932:	460d      	mov	r5, r1
                   (double)(1.0f - 2.0f * (q2 * q2 + q3 * q3)));
 8002934:	4b2e      	ldr	r3, [pc, #184]	@ (80029f0 <GetEulerAngles+0x1d0>)
 8002936:	ed93 7a00 	vldr	s14, [r3]
 800293a:	4b2d      	ldr	r3, [pc, #180]	@ (80029f0 <GetEulerAngles+0x1d0>)
 800293c:	edd3 7a00 	vldr	s15, [r3]
 8002940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002944:	4b2b      	ldr	r3, [pc, #172]	@ (80029f4 <GetEulerAngles+0x1d4>)
 8002946:	edd3 6a00 	vldr	s13, [r3]
 800294a:	4b2a      	ldr	r3, [pc, #168]	@ (80029f4 <GetEulerAngles+0x1d4>)
 800294c:	edd3 7a00 	vldr	s15, [r3]
 8002950:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002958:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800295c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002960:	ee77 7a67 	vsub.f32	s15, s14, s15
    *yaw   = atan2((double)(2.0f * (q0 * q3 + q1 * q2)),
 8002964:	ee17 0a90 	vmov	r0, s15
 8002968:	f7fd fdd2 	bl	8000510 <__aeabi_f2d>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	ec43 2b11 	vmov	d1, r2, r3
 8002974:	ec45 4b10 	vmov	d0, r4, r5
 8002978:	f008 fc9e 	bl	800b2b8 <atan2>
 800297c:	eeb0 7a40 	vmov.f32	s14, s0
 8002980:	eef0 7a60 	vmov.f32	s15, s1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	ed83 7b00 	vstr	d7, [r3]

    // Convert to degrees
    *roll  *= 180.0 / M_PI;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002990:	a313      	add	r3, pc, #76	@ (adr r3, 80029e0 <GetEulerAngles+0x1c0>)
 8002992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002996:	f7fd fe13 	bl	80005c0 <__aeabi_dmul>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	68f9      	ldr	r1, [r7, #12]
 80029a0:	e9c1 2300 	strd	r2, r3, [r1]
    *pitch *= 180.0 / M_PI;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029aa:	a30d      	add	r3, pc, #52	@ (adr r3, 80029e0 <GetEulerAngles+0x1c0>)
 80029ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b0:	f7fd fe06 	bl	80005c0 <__aeabi_dmul>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	68b9      	ldr	r1, [r7, #8]
 80029ba:	e9c1 2300 	strd	r2, r3, [r1]
    *yaw   *= 180.0 / M_PI;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029c4:	a306      	add	r3, pc, #24	@ (adr r3, 80029e0 <GetEulerAngles+0x1c0>)
 80029c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ca:	f7fd fdf9 	bl	80005c0 <__aeabi_dmul>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	e9c1 2300 	strd	r2, r3, [r1]
}
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bdb0      	pop	{r4, r5, r7, pc}
 80029e0:	1a63c1f8 	.word	0x1a63c1f8
 80029e4:	404ca5dc 	.word	0x404ca5dc
 80029e8:	20000004 	.word	0x20000004
 80029ec:	20000364 	.word	0x20000364
 80029f0:	20000368 	.word	0x20000368
 80029f4:	2000036c 	.word	0x2000036c

080029f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029fc:	b09a      	sub	sp, #104	@ 0x68
 80029fe:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a00:	f000 ff1d 	bl	800383e <HAL_Init>
//  	FusionAhrs ahrs;
//  	FusionAhrsInitialise(&ahrs);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a04:	f000 fa26 	bl	8002e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a08:	f7fe fb5e 	bl	80010c8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002a0c:	f7fe fa8c 	bl	8000f28 <MX_ADC1_Init>
  MX_RTC_Init();
 8002a10:	f000 fa8c 	bl	8002f2c <MX_RTC_Init>
  MX_UCPD1_Init();
 8002a14:	f000 fd82 	bl	800351c <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8002a18:	f000 fe60 	bl	80036dc <MX_USB_PCD_Init>
  MX_SPI1_Init();
 8002a1c:	f000 fb0e 	bl	800303c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002a20:	f000 fdb2 	bl	8003588 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t address = begin();
 8002a24:	f7ff f852 	bl	8001acc <begin>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  printf("Gyro X: %.2f, Y: %.2f, Z: %.2f\r\n", gyro[0], gyro[1], gyro[2]);
 8002a2e:	4b6c      	ldr	r3, [pc, #432]	@ (8002be0 <main+0x1e8>)
 8002a30:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a34:	4b6a      	ldr	r3, [pc, #424]	@ (8002be0 <main+0x1e8>)
 8002a36:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a3a:	4969      	ldr	r1, [pc, #420]	@ (8002be0 <main+0x1e8>)
 8002a3c:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8002a40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a44:	e9cd 2300 	strd	r2, r3, [sp]
 8002a48:	4622      	mov	r2, r4
 8002a4a:	462b      	mov	r3, r5
 8002a4c:	4865      	ldr	r0, [pc, #404]	@ (8002be4 <main+0x1ec>)
 8002a4e:	f006 fc6f 	bl	8009330 <iprintf>

  uint8_t new_buffer[1];
  uint8_t new_buffer_accel[1];


  int sample = readRegisters(0x4F, 1, new_buffer);
 8002a52:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002a56:	461a      	mov	r2, r3
 8002a58:	2101      	movs	r1, #1
 8002a5a:	204f      	movs	r0, #79	@ 0x4f
 8002a5c:	f7fe ffa2 	bl	80019a4 <readRegisters>
 8002a60:	6478      	str	r0, [r7, #68]	@ 0x44
  int sample_accel = readRegisters(0x50, 1, new_buffer_accel);
 8002a62:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a66:	461a      	mov	r2, r3
 8002a68:	2101      	movs	r1, #1
 8002a6a:	2050      	movs	r0, #80	@ 0x50
 8002a6c:	f7fe ff9a 	bl	80019a4 <readRegisters>
 8002a70:	6438      	str	r0, [r7, #64]	@ 0x40

  Mahony ahrs;
  Mahony_init(&ahrs);
 8002a72:	1d3b      	adds	r3, r7, #4
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fe fbb1 	bl	80011dc <Mahony_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  AGT(myBuffer);
 8002a7a:	485b      	ldr	r0, [pc, #364]	@ (8002be8 <main+0x1f0>)
 8002a7c:	f7ff f87d 	bl	8001b7a <AGT>
	  for (size_t i=0; i<7; i++) {
 8002a80:	2300      	movs	r3, #0
 8002a82:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a84:	e014      	b.n	8002ab0 <main+0xb8>
	      rawMeas[i] = ((int16_t)myBuffer[i*2] << 8) | myBuffer[i*2+1];
 8002a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	4a57      	ldr	r2, [pc, #348]	@ (8002be8 <main+0x1f0>)
 8002a8c:	5cd3      	ldrb	r3, [r2, r3]
 8002a8e:	021b      	lsls	r3, r3, #8
 8002a90:	b21a      	sxth	r2, r3
 8002a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	3301      	adds	r3, #1
 8002a98:	4953      	ldr	r1, [pc, #332]	@ (8002be8 <main+0x1f0>)
 8002a9a:	5ccb      	ldrb	r3, [r1, r3]
 8002a9c:	b21b      	sxth	r3, r3
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	b219      	sxth	r1, r3
 8002aa2:	4a52      	ldr	r2, [pc, #328]	@ (8002bec <main+0x1f4>)
 8002aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for (size_t i=0; i<7; i++) {
 8002aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aac:	3301      	adds	r3, #1
 8002aae:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ab2:	2b06      	cmp	r3, #6
 8002ab4:	d9e7      	bls.n	8002a86 <main+0x8e>
	   }
	  int16_t temperature = rawMeas[0] / 132.48f + 25;
 8002ab6:	4b4d      	ldr	r3, [pc, #308]	@ (8002bec <main+0x1f4>)
 8002ab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002abc:	ee07 3a90 	vmov	s15, r3
 8002ac0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ac4:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8002bf0 <main+0x1f8>
 8002ac8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002acc:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002ad0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ad8:	ee17 3a90 	vmov	r3, s15
 8002adc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
	  for (size_t i=0; i<3; i++) {
 8002ade:	2300      	movs	r3, #0
 8002ae0:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ae2:	e02f      	b.n	8002b44 <main+0x14c>
		  accel[i] = (float)rawMeas[i+1] / 2048.0 * 9.81 / 2.0;
 8002ae4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	4a40      	ldr	r2, [pc, #256]	@ (8002bec <main+0x1f4>)
 8002aea:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002aee:	ee07 3a90 	vmov	s15, r3
 8002af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002af6:	ee17 0a90 	vmov	r0, s15
 8002afa:	f7fd fd09 	bl	8000510 <__aeabi_f2d>
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	4b3c      	ldr	r3, [pc, #240]	@ (8002bf4 <main+0x1fc>)
 8002b04:	f7fd fe86 	bl	8000814 <__aeabi_ddiv>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	a32f      	add	r3, pc, #188	@ (adr r3, 8002bd0 <main+0x1d8>)
 8002b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b16:	f7fd fd53 	bl	80005c0 <__aeabi_dmul>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4610      	mov	r0, r2
 8002b20:	4619      	mov	r1, r3
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002b2a:	f7fd fe73 	bl	8000814 <__aeabi_ddiv>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4831      	ldr	r0, [pc, #196]	@ (8002bf8 <main+0x200>)
 8002b34:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002b36:	00c9      	lsls	r1, r1, #3
 8002b38:	4401      	add	r1, r0
 8002b3a:	e9c1 2300 	strd	r2, r3, [r1]
	  for (size_t i=0; i<3; i++) {
 8002b3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b40:	3301      	adds	r3, #1
 8002b42:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d9cc      	bls.n	8002ae4 <main+0xec>
	  }

	  accel[3] = pow(((accel[0]*accel[0]) + (accel[1]*accel[1]) + (accel[2]*accel[2])), 0.5);
 8002b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf8 <main+0x200>)
 8002b4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b50:	4b29      	ldr	r3, [pc, #164]	@ (8002bf8 <main+0x200>)
 8002b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b56:	f7fd fd33 	bl	80005c0 <__aeabi_dmul>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4614      	mov	r4, r2
 8002b60:	461d      	mov	r5, r3
 8002b62:	4b25      	ldr	r3, [pc, #148]	@ (8002bf8 <main+0x200>)
 8002b64:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002b68:	4b23      	ldr	r3, [pc, #140]	@ (8002bf8 <main+0x200>)
 8002b6a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002b6e:	f7fd fd27 	bl	80005c0 <__aeabi_dmul>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4620      	mov	r0, r4
 8002b78:	4629      	mov	r1, r5
 8002b7a:	f7fd fb6b 	bl	8000254 <__adddf3>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4614      	mov	r4, r2
 8002b84:	461d      	mov	r5, r3
 8002b86:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf8 <main+0x200>)
 8002b88:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf8 <main+0x200>)
 8002b8e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002b92:	f7fd fd15 	bl	80005c0 <__aeabi_dmul>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	4629      	mov	r1, r5
 8002b9e:	f7fd fb59 	bl	8000254 <__adddf3>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	ec43 2b17 	vmov	d7, r2, r3
 8002baa:	ed9f 1b0b 	vldr	d1, [pc, #44]	@ 8002bd8 <main+0x1e0>
 8002bae:	eeb0 0a47 	vmov.f32	s0, s14
 8002bb2:	eef0 0a67 	vmov.f32	s1, s15
 8002bb6:	f008 fb81 	bl	800b2bc <pow>
 8002bba:	eeb0 7a40 	vmov.f32	s14, s0
 8002bbe:	eef0 7a60 	vmov.f32	s15, s1
 8002bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf8 <main+0x200>)
 8002bc4:	ed83 7b06 	vstr	d7, [r3, #24]

	  for (size_t i=0; i<3; i++) {
 8002bc8:	2300      	movs	r3, #0
 8002bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bcc:	e045      	b.n	8002c5a <main+0x262>
 8002bce:	bf00      	nop
 8002bd0:	51eb851f 	.word	0x51eb851f
 8002bd4:	40239eb8 	.word	0x40239eb8
 8002bd8:	00000000 	.word	0x00000000
 8002bdc:	3fe00000 	.word	0x3fe00000
 8002be0:	20000310 	.word	0x20000310
 8002be4:	0800dfc0 	.word	0x0800dfc0
 8002be8:	200002d0 	.word	0x200002d0
 8002bec:	200002e0 	.word	0x200002e0
 8002bf0:	43047ae1 	.word	0x43047ae1
 8002bf4:	40a00000 	.word	0x40a00000
 8002bf8:	200002f0 	.word	0x200002f0
		  gyro[i] = lowPassFilter((float)rawMeas[i+4] / 16.4, i);
 8002bfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bfe:	3304      	adds	r3, #4
 8002c00:	4a83      	ldr	r2, [pc, #524]	@ (8002e10 <main+0x418>)
 8002c02:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002c06:	ee07 3a90 	vmov	s15, r3
 8002c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c0e:	ee17 0a90 	vmov	r0, s15
 8002c12:	f7fd fc7d 	bl	8000510 <__aeabi_f2d>
 8002c16:	a37c      	add	r3, pc, #496	@ (adr r3, 8002e08 <main+0x410>)
 8002c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1c:	f7fd fdfa 	bl	8000814 <__aeabi_ddiv>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4610      	mov	r0, r2
 8002c26:	4619      	mov	r1, r3
 8002c28:	f7fd ffa2 	bl	8000b70 <__aeabi_d2f>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c30:	4618      	mov	r0, r3
 8002c32:	ee00 2a10 	vmov	s0, r2
 8002c36:	f7ff fb23 	bl	8002280 <lowPassFilter>
 8002c3a:	ee10 3a10 	vmov	r3, s0
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fd fc66 	bl	8000510 <__aeabi_f2d>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4872      	ldr	r0, [pc, #456]	@ (8002e14 <main+0x41c>)
 8002c4a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002c4c:	00c9      	lsls	r1, r1, #3
 8002c4e:	4401      	add	r1, r0
 8002c50:	e9c1 2300 	strd	r2, r3, [r1]
	  for (size_t i=0; i<3; i++) {
 8002c54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c56:	3301      	adds	r3, #1
 8002c58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d9cd      	bls.n	8002bfc <main+0x204>
//	      gx = ((float)-gyro[0]);        // rad/s
//	      gy = ((float)-gyro[1]);
//	      gz = ((float)gyro[2]);

	      // NED
	      ax = (float)accel[1];                    // g
 8002c60:	4b6d      	ldr	r3, [pc, #436]	@ (8002e18 <main+0x420>)
 8002c62:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c66:	4610      	mov	r0, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f7fd ff81 	bl	8000b70 <__aeabi_d2f>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4a6a      	ldr	r2, [pc, #424]	@ (8002e1c <main+0x424>)
 8002c72:	6013      	str	r3, [r2, #0]
		  ay = (float)accel[0];
 8002c74:	4b68      	ldr	r3, [pc, #416]	@ (8002e18 <main+0x420>)
 8002c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f7fd ff77 	bl	8000b70 <__aeabi_d2f>
 8002c82:	4603      	mov	r3, r0
 8002c84:	4a66      	ldr	r2, [pc, #408]	@ (8002e20 <main+0x428>)
 8002c86:	6013      	str	r3, [r2, #0]
		  az = ((float)accel[2]);
 8002c88:	4b63      	ldr	r3, [pc, #396]	@ (8002e18 <main+0x420>)
 8002c8a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c8e:	4610      	mov	r0, r2
 8002c90:	4619      	mov	r1, r3
 8002c92:	f7fd ff6d 	bl	8000b70 <__aeabi_d2f>
 8002c96:	4603      	mov	r3, r0
 8002c98:	4a62      	ldr	r2, [pc, #392]	@ (8002e24 <main+0x42c>)
 8002c9a:	6013      	str	r3, [r2, #0]
		  gx = ((float)-gyro[1]);        // rad/s
 8002c9c:	4b5d      	ldr	r3, [pc, #372]	@ (8002e14 <main+0x41c>)
 8002c9e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f7fd ff63 	bl	8000b70 <__aeabi_d2f>
 8002caa:	4603      	mov	r3, r0
 8002cac:	ee07 3a90 	vmov	s15, r3
 8002cb0:	eef1 7a67 	vneg.f32	s15, s15
 8002cb4:	4b5c      	ldr	r3, [pc, #368]	@ (8002e28 <main+0x430>)
 8002cb6:	edc3 7a00 	vstr	s15, [r3]
		  gy = ((float)-gyro[0]);
 8002cba:	4b56      	ldr	r3, [pc, #344]	@ (8002e14 <main+0x41c>)
 8002cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	f7fd ff54 	bl	8000b70 <__aeabi_d2f>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	ee07 3a90 	vmov	s15, r3
 8002cce:	eef1 7a67 	vneg.f32	s15, s15
 8002cd2:	4b56      	ldr	r3, [pc, #344]	@ (8002e2c <main+0x434>)
 8002cd4:	edc3 7a00 	vstr	s15, [r3]
		  gz = ((float)-gyro[2]);
 8002cd8:	4b4e      	ldr	r3, [pc, #312]	@ (8002e14 <main+0x41c>)
 8002cda:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002cde:	4610      	mov	r0, r2
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f7fd ff45 	bl	8000b70 <__aeabi_d2f>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	ee07 3a90 	vmov	s15, r3
 8002cec:	eef1 7a67 	vneg.f32	s15, s15
 8002cf0:	4b4f      	ldr	r3, [pc, #316]	@ (8002e30 <main+0x438>)
 8002cf2:	edc3 7a00 	vstr	s15, [r3]

	      Mahony_updateIMU(&ahrs, gx, gy, gz, ax, ay, az);
 8002cf6:	4b4c      	ldr	r3, [pc, #304]	@ (8002e28 <main+0x430>)
 8002cf8:	edd3 7a00 	vldr	s15, [r3]
 8002cfc:	4b4b      	ldr	r3, [pc, #300]	@ (8002e2c <main+0x434>)
 8002cfe:	ed93 7a00 	vldr	s14, [r3]
 8002d02:	4b4b      	ldr	r3, [pc, #300]	@ (8002e30 <main+0x438>)
 8002d04:	edd3 6a00 	vldr	s13, [r3]
 8002d08:	4b44      	ldr	r3, [pc, #272]	@ (8002e1c <main+0x424>)
 8002d0a:	ed93 6a00 	vldr	s12, [r3]
 8002d0e:	4b44      	ldr	r3, [pc, #272]	@ (8002e20 <main+0x428>)
 8002d10:	edd3 5a00 	vldr	s11, [r3]
 8002d14:	4b43      	ldr	r3, [pc, #268]	@ (8002e24 <main+0x42c>)
 8002d16:	ed93 5a00 	vldr	s10, [r3]
 8002d1a:	1d3b      	adds	r3, r7, #4
 8002d1c:	eef0 2a45 	vmov.f32	s5, s10
 8002d20:	eeb0 2a65 	vmov.f32	s4, s11
 8002d24:	eef0 1a46 	vmov.f32	s3, s12
 8002d28:	eeb0 1a66 	vmov.f32	s2, s13
 8002d2c:	eef0 0a47 	vmov.f32	s1, s14
 8002d30:	eeb0 0a67 	vmov.f32	s0, s15
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fe fae9 	bl	800130c <Mahony_updateIMU>

	      test_roll = ahrs.roll;
 8002d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d3c:	4a3d      	ldr	r2, [pc, #244]	@ (8002e34 <main+0x43c>)
 8002d3e:	6013      	str	r3, [r2, #0]
	      test_pitch = ahrs.pitch;
 8002d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d42:	4a3d      	ldr	r2, [pc, #244]	@ (8002e38 <main+0x440>)
 8002d44:	6013      	str	r3, [r2, #0]
	      test_yaw = ahrs.yaw;
 8002d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d48:	4a3c      	ldr	r2, [pc, #240]	@ (8002e3c <main+0x444>)
 8002d4a:	6013      	str	r3, [r2, #0]

	      // Update Mahony filter (dt matches loop rate)
	      MahonyAHRSupdate(gx, gy, gz, ax, ay, az, 0.05f); // East North Down for some reason??
 8002d4c:	4b36      	ldr	r3, [pc, #216]	@ (8002e28 <main+0x430>)
 8002d4e:	edd3 7a00 	vldr	s15, [r3]
 8002d52:	4b36      	ldr	r3, [pc, #216]	@ (8002e2c <main+0x434>)
 8002d54:	ed93 7a00 	vldr	s14, [r3]
 8002d58:	4b35      	ldr	r3, [pc, #212]	@ (8002e30 <main+0x438>)
 8002d5a:	edd3 6a00 	vldr	s13, [r3]
 8002d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8002e1c <main+0x424>)
 8002d60:	ed93 6a00 	vldr	s12, [r3]
 8002d64:	4b2e      	ldr	r3, [pc, #184]	@ (8002e20 <main+0x428>)
 8002d66:	edd3 5a00 	vldr	s11, [r3]
 8002d6a:	4b2e      	ldr	r3, [pc, #184]	@ (8002e24 <main+0x42c>)
 8002d6c:	ed93 5a00 	vldr	s10, [r3]
 8002d70:	ed9f 3a33 	vldr	s6, [pc, #204]	@ 8002e40 <main+0x448>
 8002d74:	eef0 2a45 	vmov.f32	s5, s10
 8002d78:	eeb0 2a65 	vmov.f32	s4, s11
 8002d7c:	eef0 1a46 	vmov.f32	s3, s12
 8002d80:	eeb0 1a66 	vmov.f32	s2, s13
 8002d84:	eef0 0a47 	vmov.f32	s1, s14
 8002d88:	eeb0 0a67 	vmov.f32	s0, s15
 8002d8c:	f7ff fb02 	bl	8002394 <MahonyAHRSupdate>

	      printf("Roll: %.2f  Pitch: %.2f  Yaw: %.2f\r\n", test_roll, test_pitch, test_yaw);
 8002d90:	4b28      	ldr	r3, [pc, #160]	@ (8002e34 <main+0x43c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fd fbbb 	bl	8000510 <__aeabi_f2d>
 8002d9a:	4680      	mov	r8, r0
 8002d9c:	4689      	mov	r9, r1
 8002d9e:	4b26      	ldr	r3, [pc, #152]	@ (8002e38 <main+0x440>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fd fbb4 	bl	8000510 <__aeabi_f2d>
 8002da8:	4604      	mov	r4, r0
 8002daa:	460d      	mov	r5, r1
 8002dac:	4b23      	ldr	r3, [pc, #140]	@ (8002e3c <main+0x444>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fd fbad 	bl	8000510 <__aeabi_f2d>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002dbe:	e9cd 4500 	strd	r4, r5, [sp]
 8002dc2:	4642      	mov	r2, r8
 8002dc4:	464b      	mov	r3, r9
 8002dc6:	481f      	ldr	r0, [pc, #124]	@ (8002e44 <main+0x44c>)
 8002dc8:	f006 fab2 	bl	8009330 <iprintf>
	      // Get Euler angles

	      GetEulerAngles(&roll, &pitch, &yaw);
 8002dcc:	4a1e      	ldr	r2, [pc, #120]	@ (8002e48 <main+0x450>)
 8002dce:	491f      	ldr	r1, [pc, #124]	@ (8002e4c <main+0x454>)
 8002dd0:	481f      	ldr	r0, [pc, #124]	@ (8002e50 <main+0x458>)
 8002dd2:	f7ff fd25 	bl	8002820 <GetEulerAngles>

	      printf("Roll: %.2f  Pitch: %.2f  Yaw: %.2f\r\n", roll, pitch, yaw);
 8002dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e50 <main+0x458>)
 8002dd8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e4c <main+0x454>)
 8002dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de2:	4919      	ldr	r1, [pc, #100]	@ (8002e48 <main+0x450>)
 8002de4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002de8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002dec:	e9cd 2300 	strd	r2, r3, [sp]
 8002df0:	4622      	mov	r2, r4
 8002df2:	462b      	mov	r3, r5
 8002df4:	4813      	ldr	r0, [pc, #76]	@ (8002e44 <main+0x44c>)
 8002df6:	f006 fa9b 	bl	8009330 <iprintf>

	      HAL_Delay(50);   // 50 ms loop → dt = 0.05
 8002dfa:	2032      	movs	r0, #50	@ 0x32
 8002dfc:	f000 fd96 	bl	800392c <HAL_Delay>
  {
 8002e00:	e63b      	b.n	8002a7a <main+0x82>
 8002e02:	bf00      	nop
 8002e04:	f3af 8000 	nop.w
 8002e08:	66666666 	.word	0x66666666
 8002e0c:	40306666 	.word	0x40306666
 8002e10:	200002e0 	.word	0x200002e0
 8002e14:	20000310 	.word	0x20000310
 8002e18:	200002f0 	.word	0x200002f0
 8002e1c:	2000034c 	.word	0x2000034c
 8002e20:	20000350 	.word	0x20000350
 8002e24:	20000354 	.word	0x20000354
 8002e28:	20000358 	.word	0x20000358
 8002e2c:	2000035c 	.word	0x2000035c
 8002e30:	20000360 	.word	0x20000360
 8002e34:	20000340 	.word	0x20000340
 8002e38:	20000344 	.word	0x20000344
 8002e3c:	20000348 	.word	0x20000348
 8002e40:	3d4ccccd 	.word	0x3d4ccccd
 8002e44:	0800dfe4 	.word	0x0800dfe4
 8002e48:	20000338 	.word	0x20000338
 8002e4c:	20000330 	.word	0x20000330
 8002e50:	20000328 	.word	0x20000328

08002e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b098      	sub	sp, #96	@ 0x60
 8002e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e5a:	f107 0318 	add.w	r3, r7, #24
 8002e5e:	2248      	movs	r2, #72	@ 0x48
 8002e60:	2100      	movs	r1, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f006 fab9 	bl	80093da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e68:	1d3b      	adds	r3, r7, #4
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	605a      	str	r2, [r3, #4]
 8002e70:	609a      	str	r2, [r3, #8]
 8002e72:	60da      	str	r2, [r3, #12]
 8002e74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8002e76:	2000      	movs	r0, #0
 8002e78:	f002 f8ae 	bl	8004fd8 <HAL_PWREx_ControlVoltageScaling>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8002e82:	f000 f84d 	bl	8002f20 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002e86:	f002 f889 	bl	8004f9c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002e8a:	4b24      	ldr	r3, [pc, #144]	@ (8002f1c <SystemClock_Config+0xc8>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e90:	4a22      	ldr	r2, [pc, #136]	@ (8002f1c <SystemClock_Config+0xc8>)
 8002e92:	f023 0318 	bic.w	r3, r3, #24
 8002e96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8002e9a:	2336      	movs	r3, #54	@ 0x36
 8002e9c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002e9e:	2381      	movs	r3, #129	@ 0x81
 8002ea0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ea2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002eac:	2340      	movs	r3, #64	@ 0x40
 8002eae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002eb8:	2360      	movs	r3, #96	@ 0x60
 8002eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8002ec8:	2337      	movs	r3, #55	@ 0x37
 8002eca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002ecc:	2307      	movs	r3, #7
 8002ece:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ed8:	f107 0318 	add.w	r3, r7, #24
 8002edc:	4618      	mov	r0, r3
 8002ede:	f002 f8fb 	bl	80050d8 <HAL_RCC_OscConfig>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002ee8:	f000 f81a 	bl	8002f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002eec:	230f      	movs	r3, #15
 8002eee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f00:	1d3b      	adds	r3, r7, #4
 8002f02:	2105      	movs	r1, #5
 8002f04:	4618      	mov	r0, r3
 8002f06:	f002 fdbd 	bl	8005a84 <HAL_RCC_ClockConfig>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002f10:	f000 f806 	bl	8002f20 <Error_Handler>
  }
}
 8002f14:	bf00      	nop
 8002f16:	3760      	adds	r7, #96	@ 0x60
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40021000 	.word	0x40021000

08002f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f24:	b672      	cpsid	i
}
 8002f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f28:	bf00      	nop
 8002f2a:	e7fd      	b.n	8002f28 <Error_Handler+0x8>

08002f2c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8002f32:	463b      	mov	r3, r7
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	605a      	str	r2, [r3, #4]
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	60da      	str	r2, [r3, #12]
 8002f3e:	611a      	str	r2, [r3, #16]
 8002f40:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002f42:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb8 <MX_RTC_Init+0x8c>)
 8002f44:	4a1d      	ldr	r2, [pc, #116]	@ (8002fbc <MX_RTC_Init+0x90>)
 8002f46:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002f48:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb8 <MX_RTC_Init+0x8c>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb8 <MX_RTC_Init+0x8c>)
 8002f50:	227f      	movs	r2, #127	@ 0x7f
 8002f52:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002f54:	4b18      	ldr	r3, [pc, #96]	@ (8002fb8 <MX_RTC_Init+0x8c>)
 8002f56:	22ff      	movs	r2, #255	@ 0xff
 8002f58:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002f5a:	4b17      	ldr	r3, [pc, #92]	@ (8002fb8 <MX_RTC_Init+0x8c>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002f60:	4b15      	ldr	r3, [pc, #84]	@ (8002fb8 <MX_RTC_Init+0x8c>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002f66:	4b14      	ldr	r3, [pc, #80]	@ (8002fb8 <MX_RTC_Init+0x8c>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002f6c:	4b12      	ldr	r3, [pc, #72]	@ (8002fb8 <MX_RTC_Init+0x8c>)
 8002f6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f72:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002f74:	4b10      	ldr	r3, [pc, #64]	@ (8002fb8 <MX_RTC_Init+0x8c>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002f7a:	480f      	ldr	r0, [pc, #60]	@ (8002fb8 <MX_RTC_Init+0x8c>)
 8002f7c:	f003 fd7c 	bl	8006a78 <HAL_RTC_Init>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8002f86:	f7ff ffcb 	bl	8002f20 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8002f92:	2300      	movs	r3, #0
 8002f94:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8002f9a:	463b      	mov	r3, r7
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4806      	ldr	r0, [pc, #24]	@ (8002fb8 <MX_RTC_Init+0x8c>)
 8002fa0:	f003 fe78 	bl	8006c94 <HAL_RTCEx_PrivilegeModeSet>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8002faa:	f7ff ffb9 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002fae:	bf00      	nop
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	2000037c 	.word	0x2000037c
 8002fbc:	40002800 	.word	0x40002800

08002fc0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b0a8      	sub	sp, #160	@ 0xa0
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fc8:	f107 030c 	add.w	r3, r7, #12
 8002fcc:	2294      	movs	r2, #148	@ 0x94
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f006 fa02 	bl	80093da <memset>
  if(rtcHandle->Instance==RTC)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a16      	ldr	r2, [pc, #88]	@ (8003034 <HAL_RTC_MspInit+0x74>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d124      	bne.n	800302a <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002fe0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fe4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002fe6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fee:	f107 030c 	add.w	r3, r7, #12
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f003 f82a 	bl	800604c <HAL_RCCEx_PeriphCLKConfig>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002ffe:	f7ff ff8f 	bl	8002f20 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003002:	4b0d      	ldr	r3, [pc, #52]	@ (8003038 <HAL_RTC_MspInit+0x78>)
 8003004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003008:	4a0b      	ldr	r2, [pc, #44]	@ (8003038 <HAL_RTC_MspInit+0x78>)
 800300a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800300e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003012:	4b09      	ldr	r3, [pc, #36]	@ (8003038 <HAL_RTC_MspInit+0x78>)
 8003014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003016:	4a08      	ldr	r2, [pc, #32]	@ (8003038 <HAL_RTC_MspInit+0x78>)
 8003018:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800301c:	6593      	str	r3, [r2, #88]	@ 0x58
 800301e:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <HAL_RTC_MspInit+0x78>)
 8003020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003022:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800302a:	bf00      	nop
 800302c:	37a0      	adds	r7, #160	@ 0xa0
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40002800 	.word	0x40002800
 8003038:	40021000 	.word	0x40021000

0800303c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003040:	4b1b      	ldr	r3, [pc, #108]	@ (80030b0 <MX_SPI1_Init+0x74>)
 8003042:	4a1c      	ldr	r2, [pc, #112]	@ (80030b4 <MX_SPI1_Init+0x78>)
 8003044:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003046:	4b1a      	ldr	r3, [pc, #104]	@ (80030b0 <MX_SPI1_Init+0x74>)
 8003048:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800304c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800304e:	4b18      	ldr	r3, [pc, #96]	@ (80030b0 <MX_SPI1_Init+0x74>)
 8003050:	2200      	movs	r2, #0
 8003052:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003054:	4b16      	ldr	r3, [pc, #88]	@ (80030b0 <MX_SPI1_Init+0x74>)
 8003056:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800305a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800305c:	4b14      	ldr	r3, [pc, #80]	@ (80030b0 <MX_SPI1_Init+0x74>)
 800305e:	2200      	movs	r2, #0
 8003060:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003062:	4b13      	ldr	r3, [pc, #76]	@ (80030b0 <MX_SPI1_Init+0x74>)
 8003064:	2200      	movs	r2, #0
 8003066:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003068:	4b11      	ldr	r3, [pc, #68]	@ (80030b0 <MX_SPI1_Init+0x74>)
 800306a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800306e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003070:	4b0f      	ldr	r3, [pc, #60]	@ (80030b0 <MX_SPI1_Init+0x74>)
 8003072:	2218      	movs	r2, #24
 8003074:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003076:	4b0e      	ldr	r3, [pc, #56]	@ (80030b0 <MX_SPI1_Init+0x74>)
 8003078:	2200      	movs	r2, #0
 800307a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800307c:	4b0c      	ldr	r3, [pc, #48]	@ (80030b0 <MX_SPI1_Init+0x74>)
 800307e:	2200      	movs	r2, #0
 8003080:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003082:	4b0b      	ldr	r3, [pc, #44]	@ (80030b0 <MX_SPI1_Init+0x74>)
 8003084:	2200      	movs	r2, #0
 8003086:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003088:	4b09      	ldr	r3, [pc, #36]	@ (80030b0 <MX_SPI1_Init+0x74>)
 800308a:	2207      	movs	r2, #7
 800308c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800308e:	4b08      	ldr	r3, [pc, #32]	@ (80030b0 <MX_SPI1_Init+0x74>)
 8003090:	2200      	movs	r2, #0
 8003092:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003094:	4b06      	ldr	r3, [pc, #24]	@ (80030b0 <MX_SPI1_Init+0x74>)
 8003096:	2208      	movs	r2, #8
 8003098:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800309a:	4805      	ldr	r0, [pc, #20]	@ (80030b0 <MX_SPI1_Init+0x74>)
 800309c:	f003 fe26 	bl	8006cec <HAL_SPI_Init>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80030a6:	f7ff ff3b 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	200003a4 	.word	0x200003a4
 80030b4:	40013000 	.word	0x40013000

080030b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08a      	sub	sp, #40	@ 0x28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c0:	f107 0314 	add.w	r3, r7, #20
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	60da      	str	r2, [r3, #12]
 80030ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a17      	ldr	r2, [pc, #92]	@ (8003134 <HAL_SPI_MspInit+0x7c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d127      	bne.n	800312a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030da:	4b17      	ldr	r3, [pc, #92]	@ (8003138 <HAL_SPI_MspInit+0x80>)
 80030dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030de:	4a16      	ldr	r2, [pc, #88]	@ (8003138 <HAL_SPI_MspInit+0x80>)
 80030e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80030e6:	4b14      	ldr	r3, [pc, #80]	@ (8003138 <HAL_SPI_MspInit+0x80>)
 80030e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f2:	4b11      	ldr	r3, [pc, #68]	@ (8003138 <HAL_SPI_MspInit+0x80>)
 80030f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f6:	4a10      	ldr	r2, [pc, #64]	@ (8003138 <HAL_SPI_MspInit+0x80>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003138 <HAL_SPI_MspInit+0x80>)
 8003100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800310a:	23c2      	movs	r3, #194	@ 0xc2
 800310c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310e:	2302      	movs	r3, #2
 8003110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003116:	2300      	movs	r3, #0
 8003118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800311a:	2305      	movs	r3, #5
 800311c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311e:	f107 0314 	add.w	r3, r7, #20
 8003122:	4619      	mov	r1, r3
 8003124:	4805      	ldr	r0, [pc, #20]	@ (800313c <HAL_SPI_MspInit+0x84>)
 8003126:	f001 fca9 	bl	8004a7c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800312a:	bf00      	nop
 800312c:	3728      	adds	r7, #40	@ 0x28
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40013000 	.word	0x40013000
 8003138:	40021000 	.word	0x40021000
 800313c:	42020000 	.word	0x42020000

08003140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003146:	4b0f      	ldr	r3, [pc, #60]	@ (8003184 <HAL_MspInit+0x44>)
 8003148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800314a:	4a0e      	ldr	r2, [pc, #56]	@ (8003184 <HAL_MspInit+0x44>)
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	6613      	str	r3, [r2, #96]	@ 0x60
 8003152:	4b0c      	ldr	r3, [pc, #48]	@ (8003184 <HAL_MspInit+0x44>)
 8003154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	607b      	str	r3, [r7, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800315e:	4b09      	ldr	r3, [pc, #36]	@ (8003184 <HAL_MspInit+0x44>)
 8003160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003162:	4a08      	ldr	r2, [pc, #32]	@ (8003184 <HAL_MspInit+0x44>)
 8003164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003168:	6593      	str	r3, [r2, #88]	@ 0x58
 800316a:	4b06      	ldr	r3, [pc, #24]	@ (8003184 <HAL_MspInit+0x44>)
 800316c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40021000 	.word	0x40021000

08003188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800318c:	bf00      	nop
 800318e:	e7fd      	b.n	800318c <NMI_Handler+0x4>

08003190 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003194:	bf00      	nop
 8003196:	e7fd      	b.n	8003194 <HardFault_Handler+0x4>

08003198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800319c:	bf00      	nop
 800319e:	e7fd      	b.n	800319c <MemManage_Handler+0x4>

080031a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031a4:	bf00      	nop
 80031a6:	e7fd      	b.n	80031a4 <BusFault_Handler+0x4>

080031a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031ac:	bf00      	nop
 80031ae:	e7fd      	b.n	80031ac <UsageFault_Handler+0x4>

080031b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031b4:	bf00      	nop
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031be:	b480      	push	{r7}
 80031c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031c2:	bf00      	nop
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031de:	f000 fb85 	bl	80038ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031e2:	bf00      	nop
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031e6:	b480      	push	{r7}
 80031e8:	af00      	add	r7, sp, #0
  return 1;
 80031ea:	2301      	movs	r3, #1
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <_kill>:

int _kill(int pid, int sig)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b082      	sub	sp, #8
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003200:	f006 f93e 	bl	8009480 <__errno>
 8003204:	4603      	mov	r3, r0
 8003206:	2216      	movs	r2, #22
 8003208:	601a      	str	r2, [r3, #0]
  return -1;
 800320a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <_exit>:

void _exit (int status)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b082      	sub	sp, #8
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800321e:	f04f 31ff 	mov.w	r1, #4294967295
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff ffe7 	bl	80031f6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003228:	bf00      	nop
 800322a:	e7fd      	b.n	8003228 <_exit+0x12>

0800322c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	e00a      	b.n	8003254 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800323e:	f3af 8000 	nop.w
 8003242:	4601      	mov	r1, r0
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	60ba      	str	r2, [r7, #8]
 800324a:	b2ca      	uxtb	r2, r1
 800324c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	3301      	adds	r3, #1
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	429a      	cmp	r2, r3
 800325a:	dbf0      	blt.n	800323e <_read+0x12>
  }

  return len;
 800325c:	687b      	ldr	r3, [r7, #4]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800326e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003272:	4618      	mov	r0, r3
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800328e:	605a      	str	r2, [r3, #4]
  return 0;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <_isatty>:

int _isatty(int file)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032a6:	2301      	movs	r3, #1
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
	...

080032d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032d8:	4a14      	ldr	r2, [pc, #80]	@ (800332c <_sbrk+0x5c>)
 80032da:	4b15      	ldr	r3, [pc, #84]	@ (8003330 <_sbrk+0x60>)
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032e4:	4b13      	ldr	r3, [pc, #76]	@ (8003334 <_sbrk+0x64>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d102      	bne.n	80032f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032ec:	4b11      	ldr	r3, [pc, #68]	@ (8003334 <_sbrk+0x64>)
 80032ee:	4a12      	ldr	r2, [pc, #72]	@ (8003338 <_sbrk+0x68>)
 80032f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032f2:	4b10      	ldr	r3, [pc, #64]	@ (8003334 <_sbrk+0x64>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4413      	add	r3, r2
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d207      	bcs.n	8003310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003300:	f006 f8be 	bl	8009480 <__errno>
 8003304:	4603      	mov	r3, r0
 8003306:	220c      	movs	r2, #12
 8003308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800330a:	f04f 33ff 	mov.w	r3, #4294967295
 800330e:	e009      	b.n	8003324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003310:	4b08      	ldr	r3, [pc, #32]	@ (8003334 <_sbrk+0x64>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003316:	4b07      	ldr	r3, [pc, #28]	@ (8003334 <_sbrk+0x64>)
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4413      	add	r3, r2
 800331e:	4a05      	ldr	r2, [pc, #20]	@ (8003334 <_sbrk+0x64>)
 8003320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003322:	68fb      	ldr	r3, [r7, #12]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20030000 	.word	0x20030000
 8003330:	00000400 	.word	0x00000400
 8003334:	20000408 	.word	0x20000408
 8003338:	200008d0 	.word	0x200008d0

0800333c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003340:	4b06      	ldr	r3, [pc, #24]	@ (800335c <SystemInit+0x20>)
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003346:	4a05      	ldr	r2, [pc, #20]	@ (800335c <SystemInit+0x20>)
 8003348:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800334c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003360:	b480      	push	{r7}
 8003362:	b087      	sub	sp, #28
 8003364:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8003366:	4b4f      	ldr	r3, [pc, #316]	@ (80034a4 <SystemCoreClockUpdate+0x144>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d107      	bne.n	8003382 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8003372:	4b4c      	ldr	r3, [pc, #304]	@ (80034a4 <SystemCoreClockUpdate+0x144>)
 8003374:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003378:	0a1b      	lsrs	r3, r3, #8
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	e005      	b.n	800338e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8003382:	4b48      	ldr	r3, [pc, #288]	@ (80034a4 <SystemCoreClockUpdate+0x144>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	091b      	lsrs	r3, r3, #4
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800338e:	4a46      	ldr	r2, [pc, #280]	@ (80034a8 <SystemCoreClockUpdate+0x148>)
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003396:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003398:	4b42      	ldr	r3, [pc, #264]	@ (80034a4 <SystemCoreClockUpdate+0x144>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 030c 	and.w	r3, r3, #12
 80033a0:	2b0c      	cmp	r3, #12
 80033a2:	d866      	bhi.n	8003472 <SystemCoreClockUpdate+0x112>
 80033a4:	a201      	add	r2, pc, #4	@ (adr r2, 80033ac <SystemCoreClockUpdate+0x4c>)
 80033a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033aa:	bf00      	nop
 80033ac:	080033e1 	.word	0x080033e1
 80033b0:	08003473 	.word	0x08003473
 80033b4:	08003473 	.word	0x08003473
 80033b8:	08003473 	.word	0x08003473
 80033bc:	080033e9 	.word	0x080033e9
 80033c0:	08003473 	.word	0x08003473
 80033c4:	08003473 	.word	0x08003473
 80033c8:	08003473 	.word	0x08003473
 80033cc:	080033f1 	.word	0x080033f1
 80033d0:	08003473 	.word	0x08003473
 80033d4:	08003473 	.word	0x08003473
 80033d8:	08003473 	.word	0x08003473
 80033dc:	080033f9 	.word	0x080033f9
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80033e0:	4a32      	ldr	r2, [pc, #200]	@ (80034ac <SystemCoreClockUpdate+0x14c>)
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	6013      	str	r3, [r2, #0]
      break;
 80033e6:	e048      	b.n	800347a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80033e8:	4b30      	ldr	r3, [pc, #192]	@ (80034ac <SystemCoreClockUpdate+0x14c>)
 80033ea:	4a31      	ldr	r2, [pc, #196]	@ (80034b0 <SystemCoreClockUpdate+0x150>)
 80033ec:	601a      	str	r2, [r3, #0]
      break;
 80033ee:	e044      	b.n	800347a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80033f0:	4b2e      	ldr	r3, [pc, #184]	@ (80034ac <SystemCoreClockUpdate+0x14c>)
 80033f2:	4a30      	ldr	r2, [pc, #192]	@ (80034b4 <SystemCoreClockUpdate+0x154>)
 80033f4:	601a      	str	r2, [r3, #0]
      break;
 80033f6:	e040      	b.n	800347a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80033f8:	4b2a      	ldr	r3, [pc, #168]	@ (80034a4 <SystemCoreClockUpdate+0x144>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8003402:	4b28      	ldr	r3, [pc, #160]	@ (80034a4 <SystemCoreClockUpdate+0x144>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	091b      	lsrs	r3, r3, #4
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	3301      	adds	r3, #1
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d003      	beq.n	800341e <SystemCoreClockUpdate+0xbe>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2b03      	cmp	r3, #3
 800341a:	d006      	beq.n	800342a <SystemCoreClockUpdate+0xca>
 800341c:	e00b      	b.n	8003436 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800341e:	4a24      	ldr	r2, [pc, #144]	@ (80034b0 <SystemCoreClockUpdate+0x150>)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	fbb2 f3f3 	udiv	r3, r2, r3
 8003426:	613b      	str	r3, [r7, #16]
          break;
 8003428:	e00b      	b.n	8003442 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800342a:	4a22      	ldr	r2, [pc, #136]	@ (80034b4 <SystemCoreClockUpdate+0x154>)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003432:	613b      	str	r3, [r7, #16]
          break;
 8003434:	e005      	b.n	8003442 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	fbb2 f3f3 	udiv	r3, r2, r3
 800343e:	613b      	str	r3, [r7, #16]
          break;
 8003440:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8003442:	4b18      	ldr	r3, [pc, #96]	@ (80034a4 <SystemCoreClockUpdate+0x144>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	0a1b      	lsrs	r3, r3, #8
 8003448:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	fb02 f303 	mul.w	r3, r2, r3
 8003452:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8003454:	4b13      	ldr	r3, [pc, #76]	@ (80034a4 <SystemCoreClockUpdate+0x144>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	0e5b      	lsrs	r3, r3, #25
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	3301      	adds	r3, #1
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	fbb2 f3f3 	udiv	r3, r2, r3
 800346c:	4a0f      	ldr	r2, [pc, #60]	@ (80034ac <SystemCoreClockUpdate+0x14c>)
 800346e:	6013      	str	r3, [r2, #0]
      break;
 8003470:	e003      	b.n	800347a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8003472:	4a0e      	ldr	r2, [pc, #56]	@ (80034ac <SystemCoreClockUpdate+0x14c>)
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	6013      	str	r3, [r2, #0]
      break;
 8003478:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800347a:	4b0a      	ldr	r3, [pc, #40]	@ (80034a4 <SystemCoreClockUpdate+0x144>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	091b      	lsrs	r3, r3, #4
 8003480:	f003 030f 	and.w	r3, r3, #15
 8003484:	4a0c      	ldr	r2, [pc, #48]	@ (80034b8 <SystemCoreClockUpdate+0x158>)
 8003486:	5cd3      	ldrb	r3, [r2, r3]
 8003488:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800348a:	4b08      	ldr	r3, [pc, #32]	@ (80034ac <SystemCoreClockUpdate+0x14c>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	fa22 f303 	lsr.w	r3, r2, r3
 8003494:	4a05      	ldr	r2, [pc, #20]	@ (80034ac <SystemCoreClockUpdate+0x14c>)
 8003496:	6013      	str	r3, [r2, #0]
}
 8003498:	bf00      	nop
 800349a:	371c      	adds	r7, #28
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	40021000 	.word	0x40021000
 80034a8:	0800e21c 	.word	0x0800e21c
 80034ac:	20000008 	.word	0x20000008
 80034b0:	00f42400 	.word	0x00f42400
 80034b4:	007a1200 	.word	0x007a1200
 80034b8:	0800e204 	.word	0x0800e204

080034bc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80034c4:	4b08      	ldr	r3, [pc, #32]	@ (80034e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80034c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034c8:	4907      	ldr	r1, [pc, #28]	@ (80034e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80034d0:	4b05      	ldr	r3, [pc, #20]	@ (80034e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80034d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4013      	ands	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80034da:	68fb      	ldr	r3, [r7, #12]
}
 80034dc:	bf00      	nop
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	40021000 	.word	0x40021000

080034ec <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80034f4:	4b08      	ldr	r3, [pc, #32]	@ (8003518 <LL_APB1_GRP2_EnableClock+0x2c>)
 80034f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80034f8:	4907      	ldr	r1, [pc, #28]	@ (8003518 <LL_APB1_GRP2_EnableClock+0x2c>)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8003500:	4b05      	ldr	r3, [pc, #20]	@ (8003518 <LL_APB1_GRP2_EnableClock+0x2c>)
 8003502:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4013      	ands	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800350a:	68fb      	ldr	r3, [r7, #12]
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	40021000 	.word	0x40021000

0800351c <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003522:	463b      	mov	r3, r7
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	609a      	str	r2, [r3, #8]
 800352c:	60da      	str	r2, [r3, #12]
 800352e:	611a      	str	r2, [r3, #16]
 8003530:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8003532:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8003536:	f7ff ffd9 	bl	80034ec <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800353a:	2002      	movs	r0, #2
 800353c:	f7ff ffbe 	bl	80034bc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8003540:	2001      	movs	r0, #1
 8003542:	f7ff ffbb 	bl	80034bc <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003546:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800354a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800354c:	2303      	movs	r3, #3
 800354e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003550:	2300      	movs	r3, #0
 8003552:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003554:	463b      	mov	r3, r7
 8003556:	4619      	mov	r1, r3
 8003558:	4809      	ldr	r0, [pc, #36]	@ (8003580 <MX_UCPD1_Init+0x64>)
 800355a:	f005 f922 	bl	80087a2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800355e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003562:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003564:	2303      	movs	r3, #3
 8003566:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003568:	2300      	movs	r3, #0
 800356a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800356c:	463b      	mov	r3, r7
 800356e:	4619      	mov	r1, r3
 8003570:	4804      	ldr	r0, [pc, #16]	@ (8003584 <MX_UCPD1_Init+0x68>)
 8003572:	f005 f916 	bl	80087a2 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8003576:	bf00      	nop
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	42020400 	.word	0x42020400
 8003584:	42020000 	.word	0x42020000

08003588 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800358c:	4b22      	ldr	r3, [pc, #136]	@ (8003618 <MX_USART2_UART_Init+0x90>)
 800358e:	4a23      	ldr	r2, [pc, #140]	@ (800361c <MX_USART2_UART_Init+0x94>)
 8003590:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003592:	4b21      	ldr	r3, [pc, #132]	@ (8003618 <MX_USART2_UART_Init+0x90>)
 8003594:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003598:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800359a:	4b1f      	ldr	r3, [pc, #124]	@ (8003618 <MX_USART2_UART_Init+0x90>)
 800359c:	2200      	movs	r2, #0
 800359e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80035a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003618 <MX_USART2_UART_Init+0x90>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80035a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003618 <MX_USART2_UART_Init+0x90>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003618 <MX_USART2_UART_Init+0x90>)
 80035ae:	220c      	movs	r2, #12
 80035b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035b2:	4b19      	ldr	r3, [pc, #100]	@ (8003618 <MX_USART2_UART_Init+0x90>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80035b8:	4b17      	ldr	r3, [pc, #92]	@ (8003618 <MX_USART2_UART_Init+0x90>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035be:	4b16      	ldr	r3, [pc, #88]	@ (8003618 <MX_USART2_UART_Init+0x90>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80035c4:	4b14      	ldr	r3, [pc, #80]	@ (8003618 <MX_USART2_UART_Init+0x90>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035ca:	4b13      	ldr	r3, [pc, #76]	@ (8003618 <MX_USART2_UART_Init+0x90>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80035d0:	4811      	ldr	r0, [pc, #68]	@ (8003618 <MX_USART2_UART_Init+0x90>)
 80035d2:	f004 f929 	bl	8007828 <HAL_UART_Init>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80035dc:	f7ff fca0 	bl	8002f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035e0:	2100      	movs	r1, #0
 80035e2:	480d      	ldr	r0, [pc, #52]	@ (8003618 <MX_USART2_UART_Init+0x90>)
 80035e4:	f004 fec8 	bl	8008378 <HAL_UARTEx_SetTxFifoThreshold>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80035ee:	f7ff fc97 	bl	8002f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035f2:	2100      	movs	r1, #0
 80035f4:	4808      	ldr	r0, [pc, #32]	@ (8003618 <MX_USART2_UART_Init+0x90>)
 80035f6:	f004 fefd 	bl	80083f4 <HAL_UARTEx_SetRxFifoThreshold>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003600:	f7ff fc8e 	bl	8002f20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003604:	4804      	ldr	r0, [pc, #16]	@ (8003618 <MX_USART2_UART_Init+0x90>)
 8003606:	f004 fe7e 	bl	8008306 <HAL_UARTEx_DisableFifoMode>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003610:	f7ff fc86 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003614:	bf00      	nop
 8003616:	bd80      	pop	{r7, pc}
 8003618:	2000040c 	.word	0x2000040c
 800361c:	40004400 	.word	0x40004400

08003620 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b0ae      	sub	sp, #184	@ 0xb8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003628:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	609a      	str	r2, [r3, #8]
 8003634:	60da      	str	r2, [r3, #12]
 8003636:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003638:	f107 0310 	add.w	r3, r7, #16
 800363c:	2294      	movs	r2, #148	@ 0x94
 800363e:	2100      	movs	r1, #0
 8003640:	4618      	mov	r0, r3
 8003642:	f005 feca 	bl	80093da <memset>
  if(uartHandle->Instance==USART2)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a21      	ldr	r2, [pc, #132]	@ (80036d0 <HAL_UART_MspInit+0xb0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d13a      	bne.n	80036c6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003650:	2302      	movs	r3, #2
 8003652:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003654:	2300      	movs	r3, #0
 8003656:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003658:	f107 0310 	add.w	r3, r7, #16
 800365c:	4618      	mov	r0, r3
 800365e:	f002 fcf5 	bl	800604c <HAL_RCCEx_PeriphCLKConfig>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003668:	f7ff fc5a 	bl	8002f20 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800366c:	4b19      	ldr	r3, [pc, #100]	@ (80036d4 <HAL_UART_MspInit+0xb4>)
 800366e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003670:	4a18      	ldr	r2, [pc, #96]	@ (80036d4 <HAL_UART_MspInit+0xb4>)
 8003672:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003676:	6593      	str	r3, [r2, #88]	@ 0x58
 8003678:	4b16      	ldr	r3, [pc, #88]	@ (80036d4 <HAL_UART_MspInit+0xb4>)
 800367a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003684:	4b13      	ldr	r3, [pc, #76]	@ (80036d4 <HAL_UART_MspInit+0xb4>)
 8003686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003688:	4a12      	ldr	r2, [pc, #72]	@ (80036d4 <HAL_UART_MspInit+0xb4>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003690:	4b10      	ldr	r3, [pc, #64]	@ (80036d4 <HAL_UART_MspInit+0xb4>)
 8003692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800369c:	230c      	movs	r3, #12
 800369e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a2:	2302      	movs	r3, #2
 80036a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ae:	2300      	movs	r3, #0
 80036b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036b4:	2307      	movs	r3, #7
 80036b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ba:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80036be:	4619      	mov	r1, r3
 80036c0:	4805      	ldr	r0, [pc, #20]	@ (80036d8 <HAL_UART_MspInit+0xb8>)
 80036c2:	f001 f9db 	bl	8004a7c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80036c6:	bf00      	nop
 80036c8:	37b8      	adds	r7, #184	@ 0xb8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40004400 	.word	0x40004400
 80036d4:	40021000 	.word	0x40021000
 80036d8:	42020000 	.word	0x42020000

080036dc <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80036e0:	4b10      	ldr	r3, [pc, #64]	@ (8003724 <MX_USB_PCD_Init+0x48>)
 80036e2:	4a11      	ldr	r2, [pc, #68]	@ (8003728 <MX_USB_PCD_Init+0x4c>)
 80036e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80036e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003724 <MX_USB_PCD_Init+0x48>)
 80036e8:	2208      	movs	r2, #8
 80036ea:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80036ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003724 <MX_USB_PCD_Init+0x48>)
 80036ee:	2202      	movs	r2, #2
 80036f0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80036f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003724 <MX_USB_PCD_Init+0x48>)
 80036f4:	2202      	movs	r2, #2
 80036f6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80036f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003724 <MX_USB_PCD_Init+0x48>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80036fe:	4b09      	ldr	r3, [pc, #36]	@ (8003724 <MX_USB_PCD_Init+0x48>)
 8003700:	2200      	movs	r2, #0
 8003702:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003704:	4b07      	ldr	r3, [pc, #28]	@ (8003724 <MX_USB_PCD_Init+0x48>)
 8003706:	2200      	movs	r2, #0
 8003708:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800370a:	4b06      	ldr	r3, [pc, #24]	@ (8003724 <MX_USB_PCD_Init+0x48>)
 800370c:	2200      	movs	r2, #0
 800370e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003710:	4804      	ldr	r0, [pc, #16]	@ (8003724 <MX_USB_PCD_Init+0x48>)
 8003712:	f001 fb4b 	bl	8004dac <HAL_PCD_Init>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800371c:	f7ff fc00 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8003720:	bf00      	nop
 8003722:	bd80      	pop	{r7, pc}
 8003724:	200004a0 	.word	0x200004a0
 8003728:	4000d400 	.word	0x4000d400

0800372c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b0ae      	sub	sp, #184	@ 0xb8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003734:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	60da      	str	r2, [r3, #12]
 8003742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003744:	f107 0310 	add.w	r3, r7, #16
 8003748:	2294      	movs	r2, #148	@ 0x94
 800374a:	2100      	movs	r1, #0
 800374c:	4618      	mov	r0, r3
 800374e:	f005 fe44 	bl	80093da <memset>
  if(pcdHandle->Instance==USB)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a22      	ldr	r2, [pc, #136]	@ (80037e0 <HAL_PCD_MspInit+0xb4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d13d      	bne.n	80037d8 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800375c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003760:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003762:	2300      	movs	r3, #0
 8003764:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003768:	f107 0310 	add.w	r3, r7, #16
 800376c:	4618      	mov	r0, r3
 800376e:	f002 fc6d 	bl	800604c <HAL_RCCEx_PeriphCLKConfig>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8003778:	f7ff fbd2 	bl	8002f20 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800377c:	4b19      	ldr	r3, [pc, #100]	@ (80037e4 <HAL_PCD_MspInit+0xb8>)
 800377e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003780:	4a18      	ldr	r2, [pc, #96]	@ (80037e4 <HAL_PCD_MspInit+0xb8>)
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003788:	4b16      	ldr	r3, [pc, #88]	@ (80037e4 <HAL_PCD_MspInit+0xb8>)
 800378a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003794:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003798:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379c:	2302      	movs	r3, #2
 800379e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a2:	2300      	movs	r3, #0
 80037a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a8:	2300      	movs	r3, #0
 80037aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80037ae:	230a      	movs	r3, #10
 80037b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80037b8:	4619      	mov	r1, r3
 80037ba:	480b      	ldr	r0, [pc, #44]	@ (80037e8 <HAL_PCD_MspInit+0xbc>)
 80037bc:	f001 f95e 	bl	8004a7c <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80037c0:	4b08      	ldr	r3, [pc, #32]	@ (80037e4 <HAL_PCD_MspInit+0xb8>)
 80037c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c4:	4a07      	ldr	r2, [pc, #28]	@ (80037e4 <HAL_PCD_MspInit+0xb8>)
 80037c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80037ca:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80037cc:	4b05      	ldr	r3, [pc, #20]	@ (80037e4 <HAL_PCD_MspInit+0xb8>)
 80037ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80037d8:	bf00      	nop
 80037da:	37b8      	adds	r7, #184	@ 0xb8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	4000d400 	.word	0x4000d400
 80037e4:	40021000 	.word	0x40021000
 80037e8:	42020000 	.word	0x42020000

080037ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80037ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003824 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80037f0:	f7ff fda4 	bl	800333c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80037f4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80037f6:	e003      	b.n	8003800 <LoopCopyDataInit>

080037f8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80037f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003828 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80037fa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80037fc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80037fe:	3104      	adds	r1, #4

08003800 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003800:	480a      	ldr	r0, [pc, #40]	@ (800382c <LoopForever+0xa>)
	ldr	r3, =_edata
 8003802:	4b0b      	ldr	r3, [pc, #44]	@ (8003830 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003804:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003806:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003808:	d3f6      	bcc.n	80037f8 <CopyDataInit>
	ldr	r2, =_sbss
 800380a:	4a0a      	ldr	r2, [pc, #40]	@ (8003834 <LoopForever+0x12>)
	b	LoopFillZerobss
 800380c:	e002      	b.n	8003814 <LoopFillZerobss>

0800380e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800380e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003810:	f842 3b04 	str.w	r3, [r2], #4

08003814 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003814:	4b08      	ldr	r3, [pc, #32]	@ (8003838 <LoopForever+0x16>)
	cmp	r2, r3
 8003816:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003818:	d3f9      	bcc.n	800380e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800381a:	f005 fe37 	bl	800948c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800381e:	f7ff f8eb 	bl	80029f8 <main>

08003822 <LoopForever>:

LoopForever:
    b LoopForever
 8003822:	e7fe      	b.n	8003822 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003824:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8003828:	0800e8b8 	.word	0x0800e8b8
	ldr	r0, =_sdata
 800382c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003830:	200001f0 	.word	0x200001f0
	ldr	r2, =_sbss
 8003834:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 8003838:	200008cc 	.word	0x200008cc

0800383c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800383c:	e7fe      	b.n	800383c <ADC1_2_IRQHandler>

0800383e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003844:	2300      	movs	r3, #0
 8003846:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003848:	2004      	movs	r0, #4
 800384a:	f001 f8e5 	bl	8004a18 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800384e:	f7ff fd87 	bl	8003360 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003852:	2000      	movs	r0, #0
 8003854:	f000 f80e 	bl	8003874 <HAL_InitTick>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	71fb      	strb	r3, [r7, #7]
 8003862:	e001      	b.n	8003868 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003864:	f7ff fc6c 	bl	8003140 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003868:	79fb      	ldrb	r3, [r7, #7]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003880:	4b17      	ldr	r3, [pc, #92]	@ (80038e0 <HAL_InitTick+0x6c>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d023      	beq.n	80038d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003888:	4b16      	ldr	r3, [pc, #88]	@ (80038e4 <HAL_InitTick+0x70>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	4b14      	ldr	r3, [pc, #80]	@ (80038e0 <HAL_InitTick+0x6c>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	4619      	mov	r1, r3
 8003892:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003896:	fbb3 f3f1 	udiv	r3, r3, r1
 800389a:	fbb2 f3f3 	udiv	r3, r2, r3
 800389e:	4618      	mov	r0, r3
 80038a0:	f001 f8df 	bl	8004a62 <HAL_SYSTICK_Config>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10f      	bne.n	80038ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b07      	cmp	r3, #7
 80038ae:	d809      	bhi.n	80038c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038b0:	2200      	movs	r2, #0
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	f04f 30ff 	mov.w	r0, #4294967295
 80038b8:	f001 f8b9 	bl	8004a2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038bc:	4a0a      	ldr	r2, [pc, #40]	@ (80038e8 <HAL_InitTick+0x74>)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	e007      	b.n	80038d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	73fb      	strb	r3, [r7, #15]
 80038c8:	e004      	b.n	80038d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
 80038ce:	e001      	b.n	80038d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20000010 	.word	0x20000010
 80038e4:	20000008 	.word	0x20000008
 80038e8:	2000000c 	.word	0x2000000c

080038ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038f0:	4b06      	ldr	r3, [pc, #24]	@ (800390c <HAL_IncTick+0x20>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	461a      	mov	r2, r3
 80038f6:	4b06      	ldr	r3, [pc, #24]	@ (8003910 <HAL_IncTick+0x24>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4413      	add	r3, r2
 80038fc:	4a04      	ldr	r2, [pc, #16]	@ (8003910 <HAL_IncTick+0x24>)
 80038fe:	6013      	str	r3, [r2, #0]
}
 8003900:	bf00      	nop
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	20000010 	.word	0x20000010
 8003910:	2000077c 	.word	0x2000077c

08003914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return uwTick;
 8003918:	4b03      	ldr	r3, [pc, #12]	@ (8003928 <HAL_GetTick+0x14>)
 800391a:	681b      	ldr	r3, [r3, #0]
}
 800391c:	4618      	mov	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	2000077c 	.word	0x2000077c

0800392c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003934:	f7ff ffee 	bl	8003914 <HAL_GetTick>
 8003938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003944:	d005      	beq.n	8003952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003946:	4b0a      	ldr	r3, [pc, #40]	@ (8003970 <HAL_Delay+0x44>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4413      	add	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003952:	bf00      	nop
 8003954:	f7ff ffde 	bl	8003914 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	429a      	cmp	r2, r3
 8003962:	d8f7      	bhi.n	8003954 <HAL_Delay+0x28>
  {
  }
}
 8003964:	bf00      	nop
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000010 	.word	0x20000010

08003974 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	609a      	str	r2, [r3, #8]
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	609a      	str	r2, [r3, #8]
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	3360      	adds	r3, #96	@ 0x60
 80039ee:	461a      	mov	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4b08      	ldr	r3, [pc, #32]	@ (8003a20 <LL_ADC_SetOffset+0x44>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003a14:	bf00      	nop
 8003a16:	371c      	adds	r7, #28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	03fff000 	.word	0x03fff000

08003a24 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	3360      	adds	r3, #96	@ 0x60
 8003a32:	461a      	mov	r2, r3
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3360      	adds	r3, #96	@ 0x60
 8003a60:	461a      	mov	r2, r3
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	431a      	orrs	r2, r3
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	615a      	str	r2, [r3, #20]
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	3330      	adds	r3, #48	@ 0x30
 8003abc:	461a      	mov	r2, r3
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	0a1b      	lsrs	r3, r3, #8
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	f003 030c 	and.w	r3, r3, #12
 8003ac8:	4413      	add	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f003 031f 	and.w	r3, r3, #31
 8003ad6:	211f      	movs	r1, #31
 8003ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8003adc:	43db      	mvns	r3, r3
 8003ade:	401a      	ands	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	0e9b      	lsrs	r3, r3, #26
 8003ae4:	f003 011f 	and.w	r1, r3, #31
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f003 031f 	and.w	r3, r3, #31
 8003aee:	fa01 f303 	lsl.w	r3, r1, r3
 8003af2:	431a      	orrs	r2, r3
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003af8:	bf00      	nop
 8003afa:	371c      	adds	r7, #28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	3314      	adds	r3, #20
 8003b14:	461a      	mov	r2, r3
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	0e5b      	lsrs	r3, r3, #25
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	4413      	add	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	0d1b      	lsrs	r3, r3, #20
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	2107      	movs	r1, #7
 8003b32:	fa01 f303 	lsl.w	r3, r1, r3
 8003b36:	43db      	mvns	r3, r3
 8003b38:	401a      	ands	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	0d1b      	lsrs	r3, r3, #20
 8003b3e:	f003 031f 	and.w	r3, r3, #31
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	fa01 f303 	lsl.w	r3, r1, r3
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003b4e:	bf00      	nop
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
	...

08003b5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b74:	43db      	mvns	r3, r3
 8003b76:	401a      	ands	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f003 0318 	and.w	r3, r3, #24
 8003b7e:	4908      	ldr	r1, [pc, #32]	@ (8003ba0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003b80:	40d9      	lsrs	r1, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	400b      	ands	r3, r1
 8003b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003b92:	bf00      	nop
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	0007ffff 	.word	0x0007ffff

08003ba4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003bb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6093      	str	r3, [r2, #8]
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bdc:	d101      	bne.n	8003be2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003c00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c04:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c2c:	d101      	bne.n	8003c32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <LL_ADC_IsEnabled+0x18>
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <LL_ADC_IsEnabled+0x1a>
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d101      	bne.n	8003c7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d101      	bne.n	8003ca4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
	...

08003cb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003cb4:	b590      	push	{r4, r7, lr}
 8003cb6:	b089      	sub	sp, #36	@ 0x24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e12e      	b.n	8003f2c <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d109      	bne.n	8003cf0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7fd f999 	bl	8001014 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff ff67 	bl	8003bc8 <LL_ADC_IsDeepPowerDownEnabled>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d004      	beq.n	8003d0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff ff4d 	bl	8003ba4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff ff82 	bl	8003c18 <LL_ADC_IsInternalRegulatorEnabled>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d115      	bne.n	8003d46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff ff66 	bl	8003bf0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d24:	4b83      	ldr	r3, [pc, #524]	@ (8003f34 <HAL_ADC_Init+0x280>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	099b      	lsrs	r3, r3, #6
 8003d2a:	4a83      	ldr	r2, [pc, #524]	@ (8003f38 <HAL_ADC_Init+0x284>)
 8003d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d30:	099b      	lsrs	r3, r3, #6
 8003d32:	3301      	adds	r3, #1
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d38:	e002      	b.n	8003d40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f9      	bne.n	8003d3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7ff ff64 	bl	8003c18 <LL_ADC_IsInternalRegulatorEnabled>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10d      	bne.n	8003d72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5a:	f043 0210 	orr.w	r2, r3, #16
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d66:	f043 0201 	orr.w	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff ff75 	bl	8003c66 <LL_ADC_REG_IsConversionOngoing>
 8003d7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f040 80c7 	bne.w	8003f1a <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f040 80c3 	bne.w	8003f1a <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d98:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003d9c:	f043 0202 	orr.w	r2, r3, #2
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff ff49 	bl	8003c40 <LL_ADC_IsEnabled>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d110      	bne.n	8003dd6 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003db4:	4861      	ldr	r0, [pc, #388]	@ (8003f3c <HAL_ADC_Init+0x288>)
 8003db6:	f7ff ff43 	bl	8003c40 <LL_ADC_IsEnabled>
 8003dba:	4604      	mov	r4, r0
 8003dbc:	4860      	ldr	r0, [pc, #384]	@ (8003f40 <HAL_ADC_Init+0x28c>)
 8003dbe:	f7ff ff3f 	bl	8003c40 <LL_ADC_IsEnabled>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	4323      	orrs	r3, r4
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d105      	bne.n	8003dd6 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	4619      	mov	r1, r3
 8003dd0:	485c      	ldr	r0, [pc, #368]	@ (8003f44 <HAL_ADC_Init+0x290>)
 8003dd2:	f7ff fdcf 	bl	8003974 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	7e5b      	ldrb	r3, [r3, #25]
 8003dda:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003de0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003de6:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003dec:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003df4:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003df6:	4313      	orrs	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d106      	bne.n	8003e12 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	045b      	lsls	r3, r3, #17
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d009      	beq.n	8003e2e <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1e:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e26:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	4b44      	ldr	r3, [pc, #272]	@ (8003f48 <HAL_ADC_Init+0x294>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	69b9      	ldr	r1, [r7, #24]
 8003e3e:	430b      	orrs	r3, r1
 8003e40:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff ff20 	bl	8003c8c <LL_ADC_INJ_IsConversionOngoing>
 8003e4c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d140      	bne.n	8003ed6 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d13d      	bne.n	8003ed6 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	7e1b      	ldrb	r3, [r3, #24]
 8003e62:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e64:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e6c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e7c:	f023 0306 	bic.w	r3, r3, #6
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	69b9      	ldr	r1, [r7, #24]
 8003e86:	430b      	orrs	r3, r1
 8003e88:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d118      	bne.n	8003ec6 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003e9e:	f023 0304 	bic.w	r3, r3, #4
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003eaa:	4311      	orrs	r1, r2
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003eb0:	4311      	orrs	r1, r2
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0201 	orr.w	r2, r2, #1
 8003ec2:	611a      	str	r2, [r3, #16]
 8003ec4:	e007      	b.n	8003ed6 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d10c      	bne.n	8003ef8 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee4:	f023 010f 	bic.w	r1, r3, #15
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	1e5a      	subs	r2, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ef6:	e007      	b.n	8003f08 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 020f 	bic.w	r2, r2, #15
 8003f06:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f0c:	f023 0303 	bic.w	r3, r3, #3
 8003f10:	f043 0201 	orr.w	r2, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f18:	e007      	b.n	8003f2a <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f1e:	f043 0210 	orr.w	r2, r3, #16
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3724      	adds	r7, #36	@ 0x24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd90      	pop	{r4, r7, pc}
 8003f34:	20000008 	.word	0x20000008
 8003f38:	053e2d63 	.word	0x053e2d63
 8003f3c:	42028000 	.word	0x42028000
 8003f40:	42028100 	.word	0x42028100
 8003f44:	42028300 	.word	0x42028300
 8003f48:	fff0c007 	.word	0xfff0c007

08003f4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003f4c:	b590      	push	{r4, r7, lr}
 8003f4e:	b0b7      	sub	sp, #220	@ 0xdc
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d101      	bne.n	8003f6e <HAL_ADC_ConfigChannel+0x22>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	e3c1      	b.n	80046f2 <HAL_ADC_ConfigChannel+0x7a6>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff fe73 	bl	8003c66 <LL_ADC_REG_IsConversionOngoing>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f040 83a6 	bne.w	80046d4 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	6859      	ldr	r1, [r3, #4]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	f7ff fd89 	bl	8003aac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff fe61 	bl	8003c66 <LL_ADC_REG_IsConversionOngoing>
 8003fa4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff fe6d 	bl	8003c8c <LL_ADC_INJ_IsConversionOngoing>
 8003fb2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fb6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f040 81c1 	bne.w	8004342 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f040 81bc 	bne.w	8004342 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fd2:	d10f      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6818      	ldr	r0, [r3, #0]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	4619      	mov	r1, r3
 8003fe0:	f7ff fd90 	bl	8003b04 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff fd4a 	bl	8003a86 <LL_ADC_SetSamplingTimeCommonConfig>
 8003ff2:	e00e      	b.n	8004012 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6818      	ldr	r0, [r3, #0]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	6819      	ldr	r1, [r3, #0]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	461a      	mov	r2, r3
 8004002:	f7ff fd7f 	bl	8003b04 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2100      	movs	r1, #0
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff fd3a 	bl	8003a86 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	695a      	ldr	r2, [r3, #20]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	08db      	lsrs	r3, r3, #3
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	2b04      	cmp	r3, #4
 8004032:	d00a      	beq.n	800404a <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6818      	ldr	r0, [r3, #0]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	6919      	ldr	r1, [r3, #16]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004044:	f7ff fcca 	bl	80039dc <LL_ADC_SetOffset>
 8004048:	e17b      	b.n	8004342 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2100      	movs	r1, #0
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff fce7 	bl	8003a24 <LL_ADC_GetOffsetChannel>
 8004056:	4603      	mov	r3, r0
 8004058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10a      	bne.n	8004076 <HAL_ADC_ConfigChannel+0x12a>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2100      	movs	r1, #0
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff fcdc 	bl	8003a24 <LL_ADC_GetOffsetChannel>
 800406c:	4603      	mov	r3, r0
 800406e:	0e9b      	lsrs	r3, r3, #26
 8004070:	f003 021f 	and.w	r2, r3, #31
 8004074:	e01e      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x168>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2100      	movs	r1, #0
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff fcd1 	bl	8003a24 <LL_ADC_GetOffsetChannel>
 8004082:	4603      	mov	r3, r0
 8004084:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004088:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800408c:	fa93 f3a3 	rbit	r3, r3
 8004090:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004094:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004098:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800409c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 80040a4:	2320      	movs	r3, #32
 80040a6:	e004      	b.n	80040b2 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 80040a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80040ac:	fab3 f383 	clz	r3, r3
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d105      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x180>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	0e9b      	lsrs	r3, r3, #26
 80040c6:	f003 031f 	and.w	r3, r3, #31
 80040ca:	e018      	b.n	80040fe <HAL_ADC_ConfigChannel+0x1b2>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80040d8:	fa93 f3a3 	rbit	r3, r3
 80040dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80040e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80040e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 80040f0:	2320      	movs	r3, #32
 80040f2:	e004      	b.n	80040fe <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 80040f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80040f8:	fab3 f383 	clz	r3, r3
 80040fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80040fe:	429a      	cmp	r2, r3
 8004100:	d106      	bne.n	8004110 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2200      	movs	r2, #0
 8004108:	2100      	movs	r1, #0
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff fca0 	bl	8003a50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2101      	movs	r1, #1
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff fc84 	bl	8003a24 <LL_ADC_GetOffsetChannel>
 800411c:	4603      	mov	r3, r0
 800411e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10a      	bne.n	800413c <HAL_ADC_ConfigChannel+0x1f0>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2101      	movs	r1, #1
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff fc79 	bl	8003a24 <LL_ADC_GetOffsetChannel>
 8004132:	4603      	mov	r3, r0
 8004134:	0e9b      	lsrs	r3, r3, #26
 8004136:	f003 021f 	and.w	r2, r3, #31
 800413a:	e01e      	b.n	800417a <HAL_ADC_ConfigChannel+0x22e>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2101      	movs	r1, #1
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff fc6e 	bl	8003a24 <LL_ADC_GetOffsetChannel>
 8004148:	4603      	mov	r3, r0
 800414a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004152:	fa93 f3a3 	rbit	r3, r3
 8004156:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800415a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800415e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004162:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 800416a:	2320      	movs	r3, #32
 800416c:	e004      	b.n	8004178 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 800416e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004172:	fab3 f383 	clz	r3, r3
 8004176:	b2db      	uxtb	r3, r3
 8004178:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004182:	2b00      	cmp	r3, #0
 8004184:	d105      	bne.n	8004192 <HAL_ADC_ConfigChannel+0x246>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	0e9b      	lsrs	r3, r3, #26
 800418c:	f003 031f 	and.w	r3, r3, #31
 8004190:	e018      	b.n	80041c4 <HAL_ADC_ConfigChannel+0x278>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800419e:	fa93 f3a3 	rbit	r3, r3
 80041a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80041a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80041ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 80041b6:	2320      	movs	r3, #32
 80041b8:	e004      	b.n	80041c4 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 80041ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041be:	fab3 f383 	clz	r3, r3
 80041c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d106      	bne.n	80041d6 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2200      	movs	r2, #0
 80041ce:	2101      	movs	r1, #1
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff fc3d 	bl	8003a50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2102      	movs	r1, #2
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff fc21 	bl	8003a24 <LL_ADC_GetOffsetChannel>
 80041e2:	4603      	mov	r3, r0
 80041e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10a      	bne.n	8004202 <HAL_ADC_ConfigChannel+0x2b6>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2102      	movs	r1, #2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff fc16 	bl	8003a24 <LL_ADC_GetOffsetChannel>
 80041f8:	4603      	mov	r3, r0
 80041fa:	0e9b      	lsrs	r3, r3, #26
 80041fc:	f003 021f 	and.w	r2, r3, #31
 8004200:	e01e      	b.n	8004240 <HAL_ADC_ConfigChannel+0x2f4>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2102      	movs	r1, #2
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fc0b 	bl	8003a24 <LL_ADC_GetOffsetChannel>
 800420e:	4603      	mov	r3, r0
 8004210:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004214:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004218:	fa93 f3a3 	rbit	r3, r3
 800421c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004220:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004224:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004228:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8004230:	2320      	movs	r3, #32
 8004232:	e004      	b.n	800423e <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8004234:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004238:	fab3 f383 	clz	r3, r3
 800423c:	b2db      	uxtb	r3, r3
 800423e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004248:	2b00      	cmp	r3, #0
 800424a:	d105      	bne.n	8004258 <HAL_ADC_ConfigChannel+0x30c>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	0e9b      	lsrs	r3, r3, #26
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	e016      	b.n	8004286 <HAL_ADC_ConfigChannel+0x33a>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004260:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004264:	fa93 f3a3 	rbit	r3, r3
 8004268:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800426a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800426c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004270:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8004278:	2320      	movs	r3, #32
 800427a:	e004      	b.n	8004286 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 800427c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004280:	fab3 f383 	clz	r3, r3
 8004284:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004286:	429a      	cmp	r2, r3
 8004288:	d106      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2200      	movs	r2, #0
 8004290:	2102      	movs	r1, #2
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff fbdc 	bl	8003a50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2103      	movs	r1, #3
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff fbc0 	bl	8003a24 <LL_ADC_GetOffsetChannel>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10a      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x378>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2103      	movs	r1, #3
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff fbb5 	bl	8003a24 <LL_ADC_GetOffsetChannel>
 80042ba:	4603      	mov	r3, r0
 80042bc:	0e9b      	lsrs	r3, r3, #26
 80042be:	f003 021f 	and.w	r2, r3, #31
 80042c2:	e017      	b.n	80042f4 <HAL_ADC_ConfigChannel+0x3a8>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2103      	movs	r1, #3
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff fbaa 	bl	8003a24 <LL_ADC_GetOffsetChannel>
 80042d0:	4603      	mov	r3, r0
 80042d2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042d6:	fa93 f3a3 	rbit	r3, r3
 80042da:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80042dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042de:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80042e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 80042e6:	2320      	movs	r3, #32
 80042e8:	e003      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 80042ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042ec:	fab3 f383 	clz	r3, r3
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d105      	bne.n	800430c <HAL_ADC_ConfigChannel+0x3c0>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	0e9b      	lsrs	r3, r3, #26
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	e011      	b.n	8004330 <HAL_ADC_ConfigChannel+0x3e4>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004312:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004314:	fa93 f3a3 	rbit	r3, r3
 8004318:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800431a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800431c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800431e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8004324:	2320      	movs	r3, #32
 8004326:	e003      	b.n	8004330 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8004328:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800432a:	fab3 f383 	clz	r3, r3
 800432e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004330:	429a      	cmp	r2, r3
 8004332:	d106      	bne.n	8004342 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2200      	movs	r2, #0
 800433a:	2103      	movs	r1, #3
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff fb87 	bl	8003a50 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff fc7a 	bl	8003c40 <LL_ADC_IsEnabled>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	f040 81c9 	bne.w	80046e6 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6818      	ldr	r0, [r3, #0]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	6819      	ldr	r1, [r3, #0]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	461a      	mov	r2, r3
 8004362:	f7ff fbfb 	bl	8003b5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	4a8f      	ldr	r2, [pc, #572]	@ (80045a8 <HAL_ADC_ConfigChannel+0x65c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	f040 8131 	bne.w	80045d4 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10b      	bne.n	800439a <HAL_ADC_ConfigChannel+0x44e>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	0e9b      	lsrs	r3, r3, #26
 8004388:	3301      	adds	r3, #1
 800438a:	f003 031f 	and.w	r3, r3, #31
 800438e:	2b09      	cmp	r3, #9
 8004390:	bf94      	ite	ls
 8004392:	2301      	movls	r3, #1
 8004394:	2300      	movhi	r3, #0
 8004396:	b2db      	uxtb	r3, r3
 8004398:	e019      	b.n	80043ce <HAL_ADC_ConfigChannel+0x482>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043a2:	fa93 f3a3 	rbit	r3, r3
 80043a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80043a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043aa:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80043ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 80043b2:	2320      	movs	r3, #32
 80043b4:	e003      	b.n	80043be <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 80043b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043b8:	fab3 f383 	clz	r3, r3
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	3301      	adds	r3, #1
 80043c0:	f003 031f 	and.w	r3, r3, #31
 80043c4:	2b09      	cmp	r3, #9
 80043c6:	bf94      	ite	ls
 80043c8:	2301      	movls	r3, #1
 80043ca:	2300      	movhi	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d079      	beq.n	80044c6 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d107      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x4a2>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	0e9b      	lsrs	r3, r3, #26
 80043e4:	3301      	adds	r3, #1
 80043e6:	069b      	lsls	r3, r3, #26
 80043e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043ec:	e015      	b.n	800441a <HAL_ADC_ConfigChannel+0x4ce>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043f6:	fa93 f3a3 	rbit	r3, r3
 80043fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80043fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043fe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004400:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8004406:	2320      	movs	r3, #32
 8004408:	e003      	b.n	8004412 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800440a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800440c:	fab3 f383 	clz	r3, r3
 8004410:	b2db      	uxtb	r3, r3
 8004412:	3301      	adds	r3, #1
 8004414:	069b      	lsls	r3, r3, #26
 8004416:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004422:	2b00      	cmp	r3, #0
 8004424:	d109      	bne.n	800443a <HAL_ADC_ConfigChannel+0x4ee>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	0e9b      	lsrs	r3, r3, #26
 800442c:	3301      	adds	r3, #1
 800442e:	f003 031f 	and.w	r3, r3, #31
 8004432:	2101      	movs	r1, #1
 8004434:	fa01 f303 	lsl.w	r3, r1, r3
 8004438:	e017      	b.n	800446a <HAL_ADC_ConfigChannel+0x51e>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004442:	fa93 f3a3 	rbit	r3, r3
 8004446:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004448:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800444a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800444c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8004452:	2320      	movs	r3, #32
 8004454:	e003      	b.n	800445e <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8004456:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004458:	fab3 f383 	clz	r3, r3
 800445c:	b2db      	uxtb	r3, r3
 800445e:	3301      	adds	r3, #1
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	2101      	movs	r1, #1
 8004466:	fa01 f303 	lsl.w	r3, r1, r3
 800446a:	ea42 0103 	orr.w	r1, r2, r3
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10a      	bne.n	8004490 <HAL_ADC_ConfigChannel+0x544>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	0e9b      	lsrs	r3, r3, #26
 8004480:	3301      	adds	r3, #1
 8004482:	f003 021f 	and.w	r2, r3, #31
 8004486:	4613      	mov	r3, r2
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	4413      	add	r3, r2
 800448c:	051b      	lsls	r3, r3, #20
 800448e:	e018      	b.n	80044c2 <HAL_ADC_ConfigChannel+0x576>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004498:	fa93 f3a3 	rbit	r3, r3
 800449c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800449e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80044a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80044a8:	2320      	movs	r3, #32
 80044aa:	e003      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80044ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044ae:	fab3 f383 	clz	r3, r3
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	3301      	adds	r3, #1
 80044b6:	f003 021f 	and.w	r2, r3, #31
 80044ba:	4613      	mov	r3, r2
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	4413      	add	r3, r2
 80044c0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044c2:	430b      	orrs	r3, r1
 80044c4:	e081      	b.n	80045ca <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d107      	bne.n	80044e2 <HAL_ADC_ConfigChannel+0x596>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	0e9b      	lsrs	r3, r3, #26
 80044d8:	3301      	adds	r3, #1
 80044da:	069b      	lsls	r3, r3, #26
 80044dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044e0:	e015      	b.n	800450e <HAL_ADC_ConfigChannel+0x5c2>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ea:	fa93 f3a3 	rbit	r3, r3
 80044ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80044f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80044f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80044fa:	2320      	movs	r3, #32
 80044fc:	e003      	b.n	8004506 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80044fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004500:	fab3 f383 	clz	r3, r3
 8004504:	b2db      	uxtb	r3, r3
 8004506:	3301      	adds	r3, #1
 8004508:	069b      	lsls	r3, r3, #26
 800450a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004516:	2b00      	cmp	r3, #0
 8004518:	d109      	bne.n	800452e <HAL_ADC_ConfigChannel+0x5e2>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	0e9b      	lsrs	r3, r3, #26
 8004520:	3301      	adds	r3, #1
 8004522:	f003 031f 	and.w	r3, r3, #31
 8004526:	2101      	movs	r1, #1
 8004528:	fa01 f303 	lsl.w	r3, r1, r3
 800452c:	e017      	b.n	800455e <HAL_ADC_ConfigChannel+0x612>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	fa93 f3a3 	rbit	r3, r3
 800453a:	61fb      	str	r3, [r7, #28]
  return result;
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8004546:	2320      	movs	r3, #32
 8004548:	e003      	b.n	8004552 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 800454a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454c:	fab3 f383 	clz	r3, r3
 8004550:	b2db      	uxtb	r3, r3
 8004552:	3301      	adds	r3, #1
 8004554:	f003 031f 	and.w	r3, r3, #31
 8004558:	2101      	movs	r1, #1
 800455a:	fa01 f303 	lsl.w	r3, r1, r3
 800455e:	ea42 0103 	orr.w	r1, r2, r3
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10d      	bne.n	800458a <HAL_ADC_ConfigChannel+0x63e>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	0e9b      	lsrs	r3, r3, #26
 8004574:	3301      	adds	r3, #1
 8004576:	f003 021f 	and.w	r2, r3, #31
 800457a:	4613      	mov	r3, r2
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	4413      	add	r3, r2
 8004580:	3b1e      	subs	r3, #30
 8004582:	051b      	lsls	r3, r3, #20
 8004584:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004588:	e01e      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x67c>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	fa93 f3a3 	rbit	r3, r3
 8004596:	613b      	str	r3, [r7, #16]
  return result;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d104      	bne.n	80045ac <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 80045a2:	2320      	movs	r3, #32
 80045a4:	e006      	b.n	80045b4 <HAL_ADC_ConfigChannel+0x668>
 80045a6:	bf00      	nop
 80045a8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	fab3 f383 	clz	r3, r3
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	3301      	adds	r3, #1
 80045b6:	f003 021f 	and.w	r2, r3, #31
 80045ba:	4613      	mov	r3, r2
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	4413      	add	r3, r2
 80045c0:	3b1e      	subs	r3, #30
 80045c2:	051b      	lsls	r3, r3, #20
 80045c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045c8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045ce:	4619      	mov	r1, r3
 80045d0:	f7ff fa98 	bl	8003b04 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	4b48      	ldr	r3, [pc, #288]	@ (80046fc <HAL_ADC_ConfigChannel+0x7b0>)
 80045da:	4013      	ands	r3, r2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 8082 	beq.w	80046e6 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045e2:	4847      	ldr	r0, [pc, #284]	@ (8004700 <HAL_ADC_ConfigChannel+0x7b4>)
 80045e4:	f7ff f9ec 	bl	80039c0 <LL_ADC_GetCommonPathInternalCh>
 80045e8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045ec:	4845      	ldr	r0, [pc, #276]	@ (8004704 <HAL_ADC_ConfigChannel+0x7b8>)
 80045ee:	f7ff fb27 	bl	8003c40 <LL_ADC_IsEnabled>
 80045f2:	4604      	mov	r4, r0
 80045f4:	4844      	ldr	r0, [pc, #272]	@ (8004708 <HAL_ADC_ConfigChannel+0x7bc>)
 80045f6:	f7ff fb23 	bl	8003c40 <LL_ADC_IsEnabled>
 80045fa:	4603      	mov	r3, r0
 80045fc:	4323      	orrs	r3, r4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d15e      	bne.n	80046c0 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a41      	ldr	r2, [pc, #260]	@ (800470c <HAL_ADC_ConfigChannel+0x7c0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d127      	bne.n	800465c <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800460c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004610:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d121      	bne.n	800465c <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a39      	ldr	r2, [pc, #228]	@ (8004704 <HAL_ADC_ConfigChannel+0x7b8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d161      	bne.n	80046e6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004622:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004626:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800462a:	4619      	mov	r1, r3
 800462c:	4834      	ldr	r0, [pc, #208]	@ (8004700 <HAL_ADC_ConfigChannel+0x7b4>)
 800462e:	f7ff f9b4 	bl	800399a <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004632:	4b37      	ldr	r3, [pc, #220]	@ (8004710 <HAL_ADC_ConfigChannel+0x7c4>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	099b      	lsrs	r3, r3, #6
 8004638:	4a36      	ldr	r2, [pc, #216]	@ (8004714 <HAL_ADC_ConfigChannel+0x7c8>)
 800463a:	fba2 2303 	umull	r2, r3, r2, r3
 800463e:	099b      	lsrs	r3, r3, #6
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	4613      	mov	r3, r2
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800464a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800464c:	e002      	b.n	8004654 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	3b01      	subs	r3, #1
 8004652:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f9      	bne.n	800464e <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800465a:	e044      	b.n	80046e6 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a2d      	ldr	r2, [pc, #180]	@ (8004718 <HAL_ADC_ConfigChannel+0x7cc>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d113      	bne.n	800468e <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004666:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800466a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10d      	bne.n	800468e <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a23      	ldr	r2, [pc, #140]	@ (8004704 <HAL_ADC_ConfigChannel+0x7b8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d134      	bne.n	80046e6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800467c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004680:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004684:	4619      	mov	r1, r3
 8004686:	481e      	ldr	r0, [pc, #120]	@ (8004700 <HAL_ADC_ConfigChannel+0x7b4>)
 8004688:	f7ff f987 	bl	800399a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800468c:	e02b      	b.n	80046e6 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a22      	ldr	r2, [pc, #136]	@ (800471c <HAL_ADC_ConfigChannel+0x7d0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d126      	bne.n	80046e6 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004698:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800469c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d120      	bne.n	80046e6 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a16      	ldr	r2, [pc, #88]	@ (8004704 <HAL_ADC_ConfigChannel+0x7b8>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d11b      	bne.n	80046e6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80046b6:	4619      	mov	r1, r3
 80046b8:	4811      	ldr	r0, [pc, #68]	@ (8004700 <HAL_ADC_ConfigChannel+0x7b4>)
 80046ba:	f7ff f96e 	bl	800399a <LL_ADC_SetCommonPathInternalCh>
 80046be:	e012      	b.n	80046e6 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c4:	f043 0220 	orr.w	r2, r3, #32
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	659a      	str	r2, [r3, #88]	@ 0x58

          tmp_hal_status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80046d2:	e008      	b.n	80046e6 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d8:	f043 0220 	orr.w	r2, r3, #32
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80046ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	37dc      	adds	r7, #220	@ 0xdc
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd90      	pop	{r4, r7, pc}
 80046fa:	bf00      	nop
 80046fc:	80080000 	.word	0x80080000
 8004700:	42028300 	.word	0x42028300
 8004704:	42028000 	.word	0x42028000
 8004708:	42028100 	.word	0x42028100
 800470c:	c7520000 	.word	0xc7520000
 8004710:	20000008 	.word	0x20000008
 8004714:	053e2d63 	.word	0x053e2d63
 8004718:	cb840000 	.word	0xcb840000
 800471c:	80000001 	.word	0x80000001

08004720 <LL_ADC_IsEnabled>:
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <LL_ADC_IsEnabled+0x18>
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <LL_ADC_IsEnabled+0x1a>
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <LL_ADC_REG_IsConversionOngoing>:
{
 8004746:	b480      	push	{r7}
 8004748:	b083      	sub	sp, #12
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 0304 	and.w	r3, r3, #4
 8004756:	2b04      	cmp	r3, #4
 8004758:	d101      	bne.n	800475e <LL_ADC_REG_IsConversionOngoing+0x18>
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800476c:	b590      	push	{r4, r7, lr}
 800476e:	b0a1      	sub	sp, #132	@ 0x84
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004782:	2b01      	cmp	r3, #1
 8004784:	d101      	bne.n	800478a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004786:	2302      	movs	r3, #2
 8004788:	e089      	b.n	800489e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004792:	2300      	movs	r3, #0
 8004794:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004796:	2300      	movs	r3, #0
 8004798:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a42      	ldr	r2, [pc, #264]	@ (80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d102      	bne.n	80047aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80047a4:	4b41      	ldr	r3, [pc, #260]	@ (80048ac <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	e001      	b.n	80047ae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80047aa:	2300      	movs	r3, #0
 80047ac:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10b      	bne.n	80047cc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b8:	f043 0220 	orr.w	r2, r3, #32
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e068      	b.n	800489e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff ffb9 	bl	8004746 <LL_ADC_REG_IsConversionOngoing>
 80047d4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff ffb3 	bl	8004746 <LL_ADC_REG_IsConversionOngoing>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d14a      	bne.n	800487c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80047e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d147      	bne.n	800487c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80047ec:	4b30      	ldr	r3, [pc, #192]	@ (80048b0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80047ee:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d027      	beq.n	8004848 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80047f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	6859      	ldr	r1, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800480a:	035b      	lsls	r3, r3, #13
 800480c:	430b      	orrs	r3, r1
 800480e:	431a      	orrs	r2, r3
 8004810:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004812:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004814:	4824      	ldr	r0, [pc, #144]	@ (80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004816:	f7ff ff83 	bl	8004720 <LL_ADC_IsEnabled>
 800481a:	4604      	mov	r4, r0
 800481c:	4823      	ldr	r0, [pc, #140]	@ (80048ac <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800481e:	f7ff ff7f 	bl	8004720 <LL_ADC_IsEnabled>
 8004822:	4603      	mov	r3, r0
 8004824:	4323      	orrs	r3, r4
 8004826:	2b00      	cmp	r3, #0
 8004828:	d132      	bne.n	8004890 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800482a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004832:	f023 030f 	bic.w	r3, r3, #15
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	6811      	ldr	r1, [r2, #0]
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	6892      	ldr	r2, [r2, #8]
 800483e:	430a      	orrs	r2, r1
 8004840:	431a      	orrs	r2, r3
 8004842:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004844:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004846:	e023      	b.n	8004890 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004848:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004850:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004852:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004854:	4814      	ldr	r0, [pc, #80]	@ (80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004856:	f7ff ff63 	bl	8004720 <LL_ADC_IsEnabled>
 800485a:	4604      	mov	r4, r0
 800485c:	4813      	ldr	r0, [pc, #76]	@ (80048ac <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800485e:	f7ff ff5f 	bl	8004720 <LL_ADC_IsEnabled>
 8004862:	4603      	mov	r3, r0
 8004864:	4323      	orrs	r3, r4
 8004866:	2b00      	cmp	r3, #0
 8004868:	d112      	bne.n	8004890 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800486a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004872:	f023 030f 	bic.w	r3, r3, #15
 8004876:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004878:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800487a:	e009      	b.n	8004890 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004880:	f043 0220 	orr.w	r2, r3, #32
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800488e:	e000      	b.n	8004892 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004890:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800489a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3784      	adds	r7, #132	@ 0x84
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd90      	pop	{r4, r7, pc}
 80048a6:	bf00      	nop
 80048a8:	42028000 	.word	0x42028000
 80048ac:	42028100 	.word	0x42028100
 80048b0:	42028300 	.word	0x42028300

080048b4 <__NVIC_SetPriorityGrouping>:
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048c4:	4b0c      	ldr	r3, [pc, #48]	@ (80048f8 <__NVIC_SetPriorityGrouping+0x44>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048d0:	4013      	ands	r3, r2
 80048d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048e6:	4a04      	ldr	r2, [pc, #16]	@ (80048f8 <__NVIC_SetPriorityGrouping+0x44>)
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	60d3      	str	r3, [r2, #12]
}
 80048ec:	bf00      	nop
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	e000ed00 	.word	0xe000ed00

080048fc <__NVIC_GetPriorityGrouping>:
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004900:	4b04      	ldr	r3, [pc, #16]	@ (8004914 <__NVIC_GetPriorityGrouping+0x18>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	0a1b      	lsrs	r3, r3, #8
 8004906:	f003 0307 	and.w	r3, r3, #7
}
 800490a:	4618      	mov	r0, r3
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	e000ed00 	.word	0xe000ed00

08004918 <__NVIC_SetPriority>:
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	6039      	str	r1, [r7, #0]
 8004922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004928:	2b00      	cmp	r3, #0
 800492a:	db0a      	blt.n	8004942 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	b2da      	uxtb	r2, r3
 8004930:	490c      	ldr	r1, [pc, #48]	@ (8004964 <__NVIC_SetPriority+0x4c>)
 8004932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004936:	0152      	lsls	r2, r2, #5
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	440b      	add	r3, r1
 800493c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004940:	e00a      	b.n	8004958 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	b2da      	uxtb	r2, r3
 8004946:	4908      	ldr	r1, [pc, #32]	@ (8004968 <__NVIC_SetPriority+0x50>)
 8004948:	79fb      	ldrb	r3, [r7, #7]
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	3b04      	subs	r3, #4
 8004950:	0152      	lsls	r2, r2, #5
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	440b      	add	r3, r1
 8004956:	761a      	strb	r2, [r3, #24]
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	e000e100 	.word	0xe000e100
 8004968:	e000ed00 	.word	0xe000ed00

0800496c <NVIC_EncodePriority>:
{
 800496c:	b480      	push	{r7}
 800496e:	b089      	sub	sp, #36	@ 0x24
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	f1c3 0307 	rsb	r3, r3, #7
 8004986:	2b03      	cmp	r3, #3
 8004988:	bf28      	it	cs
 800498a:	2303      	movcs	r3, #3
 800498c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	3303      	adds	r3, #3
 8004992:	2b06      	cmp	r3, #6
 8004994:	d902      	bls.n	800499c <NVIC_EncodePriority+0x30>
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	3b04      	subs	r3, #4
 800499a:	e000      	b.n	800499e <NVIC_EncodePriority+0x32>
 800499c:	2300      	movs	r3, #0
 800499e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049a0:	f04f 32ff 	mov.w	r2, #4294967295
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	43da      	mvns	r2, r3
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	401a      	ands	r2, r3
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049b4:	f04f 31ff 	mov.w	r1, #4294967295
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	fa01 f303 	lsl.w	r3, r1, r3
 80049be:	43d9      	mvns	r1, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049c4:	4313      	orrs	r3, r2
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3724      	adds	r7, #36	@ 0x24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
	...

080049d4 <SysTick_Config>:
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3b01      	subs	r3, #1
 80049e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049e4:	d301      	bcc.n	80049ea <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80049e6:	2301      	movs	r3, #1
 80049e8:	e00f      	b.n	8004a0a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004a14 <SysTick_Config+0x40>)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049f2:	2107      	movs	r1, #7
 80049f4:	f04f 30ff 	mov.w	r0, #4294967295
 80049f8:	f7ff ff8e 	bl	8004918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049fc:	4b05      	ldr	r3, [pc, #20]	@ (8004a14 <SysTick_Config+0x40>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a02:	4b04      	ldr	r3, [pc, #16]	@ (8004a14 <SysTick_Config+0x40>)
 8004a04:	2207      	movs	r2, #7
 8004a06:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	e000e010 	.word	0xe000e010

08004a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff ff47 	bl	80048b4 <__NVIC_SetPriorityGrouping>
}
 8004a26:	bf00      	nop
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b086      	sub	sp, #24
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	4603      	mov	r3, r0
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	607a      	str	r2, [r7, #4]
 8004a3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a3c:	f7ff ff5e 	bl	80048fc <__NVIC_GetPriorityGrouping>
 8004a40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	68b9      	ldr	r1, [r7, #8]
 8004a46:	6978      	ldr	r0, [r7, #20]
 8004a48:	f7ff ff90 	bl	800496c <NVIC_EncodePriority>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a52:	4611      	mov	r1, r2
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff ff5f 	bl	8004918 <__NVIC_SetPriority>
}
 8004a5a:	bf00      	nop
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b082      	sub	sp, #8
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7ff ffb2 	bl	80049d4 <SysTick_Config>
 8004a70:	4603      	mov	r3, r0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
	...

08004a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a8a:	e158      	b.n	8004d3e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	2101      	movs	r1, #1
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	fa01 f303 	lsl.w	r3, r1, r3
 8004a98:	4013      	ands	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 814a 	beq.w	8004d38 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f003 0303 	and.w	r3, r3, #3
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d005      	beq.n	8004abc <HAL_GPIO_Init+0x40>
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f003 0303 	and.w	r3, r3, #3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d130      	bne.n	8004b1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	2203      	movs	r2, #3
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	43db      	mvns	r3, r3
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004af2:	2201      	movs	r2, #1
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	43db      	mvns	r3, r3
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	4013      	ands	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	091b      	lsrs	r3, r3, #4
 8004b08:	f003 0201 	and.w	r2, r3, #1
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d017      	beq.n	8004b5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	2203      	movs	r2, #3
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d123      	bne.n	8004bae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	08da      	lsrs	r2, r3, #3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3208      	adds	r2, #8
 8004b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b72:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	220f      	movs	r2, #15
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	43db      	mvns	r3, r3
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	4013      	ands	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	691a      	ldr	r2, [r3, #16]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	08da      	lsrs	r2, r3, #3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	3208      	adds	r2, #8
 8004ba8:	6939      	ldr	r1, [r7, #16]
 8004baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	2203      	movs	r2, #3
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f003 0203 	and.w	r2, r3, #3
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 80a4 	beq.w	8004d38 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8004bf0:	4a5a      	ldr	r2, [pc, #360]	@ (8004d5c <HAL_GPIO_Init+0x2e0>)
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	089b      	lsrs	r3, r3, #2
 8004bf6:	3318      	adds	r3, #24
 8004bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bfc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	00db      	lsls	r3, r3, #3
 8004c06:	220f      	movs	r2, #15
 8004c08:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0c:	43db      	mvns	r3, r3
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4013      	ands	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a52      	ldr	r2, [pc, #328]	@ (8004d60 <HAL_GPIO_Init+0x2e4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d025      	beq.n	8004c68 <HAL_GPIO_Init+0x1ec>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a51      	ldr	r2, [pc, #324]	@ (8004d64 <HAL_GPIO_Init+0x2e8>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d01f      	beq.n	8004c64 <HAL_GPIO_Init+0x1e8>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a50      	ldr	r2, [pc, #320]	@ (8004d68 <HAL_GPIO_Init+0x2ec>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d019      	beq.n	8004c60 <HAL_GPIO_Init+0x1e4>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a4f      	ldr	r2, [pc, #316]	@ (8004d6c <HAL_GPIO_Init+0x2f0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d013      	beq.n	8004c5c <HAL_GPIO_Init+0x1e0>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a4e      	ldr	r2, [pc, #312]	@ (8004d70 <HAL_GPIO_Init+0x2f4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d00d      	beq.n	8004c58 <HAL_GPIO_Init+0x1dc>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a4d      	ldr	r2, [pc, #308]	@ (8004d74 <HAL_GPIO_Init+0x2f8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d007      	beq.n	8004c54 <HAL_GPIO_Init+0x1d8>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a4c      	ldr	r2, [pc, #304]	@ (8004d78 <HAL_GPIO_Init+0x2fc>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d101      	bne.n	8004c50 <HAL_GPIO_Init+0x1d4>
 8004c4c:	2306      	movs	r3, #6
 8004c4e:	e00c      	b.n	8004c6a <HAL_GPIO_Init+0x1ee>
 8004c50:	2307      	movs	r3, #7
 8004c52:	e00a      	b.n	8004c6a <HAL_GPIO_Init+0x1ee>
 8004c54:	2305      	movs	r3, #5
 8004c56:	e008      	b.n	8004c6a <HAL_GPIO_Init+0x1ee>
 8004c58:	2304      	movs	r3, #4
 8004c5a:	e006      	b.n	8004c6a <HAL_GPIO_Init+0x1ee>
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e004      	b.n	8004c6a <HAL_GPIO_Init+0x1ee>
 8004c60:	2302      	movs	r3, #2
 8004c62:	e002      	b.n	8004c6a <HAL_GPIO_Init+0x1ee>
 8004c64:	2301      	movs	r3, #1
 8004c66:	e000      	b.n	8004c6a <HAL_GPIO_Init+0x1ee>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	f002 0203 	and.w	r2, r2, #3
 8004c70:	00d2      	lsls	r2, r2, #3
 8004c72:	4093      	lsls	r3, r2
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8004c7a:	4938      	ldr	r1, [pc, #224]	@ (8004d5c <HAL_GPIO_Init+0x2e0>)
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	089b      	lsrs	r3, r3, #2
 8004c80:	3318      	adds	r3, #24
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c88:	4b34      	ldr	r3, [pc, #208]	@ (8004d5c <HAL_GPIO_Init+0x2e0>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	43db      	mvns	r3, r3
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4013      	ands	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004cac:	4a2b      	ldr	r2, [pc, #172]	@ (8004d5c <HAL_GPIO_Init+0x2e0>)
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8004d5c <HAL_GPIO_Init+0x2e0>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004cd6:	4a21      	ldr	r2, [pc, #132]	@ (8004d5c <HAL_GPIO_Init+0x2e0>)
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8004d5c <HAL_GPIO_Init+0x2e0>)
 8004cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	43db      	mvns	r3, r3
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	4013      	ands	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d02:	4a16      	ldr	r2, [pc, #88]	@ (8004d5c <HAL_GPIO_Init+0x2e0>)
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8004d0a:	4b14      	ldr	r3, [pc, #80]	@ (8004d5c <HAL_GPIO_Init+0x2e0>)
 8004d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	43db      	mvns	r3, r3
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d003      	beq.n	8004d30 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d30:	4a0a      	ldr	r2, [pc, #40]	@ (8004d5c <HAL_GPIO_Init+0x2e0>)
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	fa22 f303 	lsr.w	r3, r2, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f47f ae9f 	bne.w	8004a8c <HAL_GPIO_Init+0x10>
  }
}
 8004d4e:	bf00      	nop
 8004d50:	bf00      	nop
 8004d52:	371c      	adds	r7, #28
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	4002f400 	.word	0x4002f400
 8004d60:	42020000 	.word	0x42020000
 8004d64:	42020400 	.word	0x42020400
 8004d68:	42020800 	.word	0x42020800
 8004d6c:	42020c00 	.word	0x42020c00
 8004d70:	42021000 	.word	0x42021000
 8004d74:	42021400 	.word	0x42021400
 8004d78:	42021800 	.word	0x42021800

08004d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	460b      	mov	r3, r1
 8004d86:	807b      	strh	r3, [r7, #2]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d8c:	787b      	ldrb	r3, [r7, #1]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d92:	887a      	ldrh	r2, [r7, #2]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d98:	e002      	b.n	8004da0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d9a:	887a      	ldrh	r2, [r7, #2]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e0c0      	b.n	8004f40 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7fe fcaa 	bl	800372c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2203      	movs	r2, #3
 8004ddc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f003 fd49 	bl	800887c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dea:	2300      	movs	r3, #0
 8004dec:	73fb      	strb	r3, [r7, #15]
 8004dee:	e03e      	b.n	8004e6e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004df0:	7bfa      	ldrb	r2, [r7, #15]
 8004df2:	6879      	ldr	r1, [r7, #4]
 8004df4:	4613      	mov	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	440b      	add	r3, r1
 8004dfe:	3311      	adds	r3, #17
 8004e00:	2201      	movs	r2, #1
 8004e02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e04:	7bfa      	ldrb	r2, [r7, #15]
 8004e06:	6879      	ldr	r1, [r7, #4]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	440b      	add	r3, r1
 8004e12:	3310      	adds	r3, #16
 8004e14:	7bfa      	ldrb	r2, [r7, #15]
 8004e16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e18:	7bfa      	ldrb	r2, [r7, #15]
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	440b      	add	r3, r1
 8004e26:	3313      	adds	r3, #19
 8004e28:	2200      	movs	r2, #0
 8004e2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e2c:	7bfa      	ldrb	r2, [r7, #15]
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	4613      	mov	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	440b      	add	r3, r1
 8004e3a:	3320      	adds	r3, #32
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e40:	7bfa      	ldrb	r2, [r7, #15]
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	4613      	mov	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	440b      	add	r3, r1
 8004e4e:	3324      	adds	r3, #36	@ 0x24
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	6879      	ldr	r1, [r7, #4]
 8004e58:	1c5a      	adds	r2, r3, #1
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	440b      	add	r3, r1
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	73fb      	strb	r3, [r7, #15]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	791b      	ldrb	r3, [r3, #4]
 8004e72:	7bfa      	ldrb	r2, [r7, #15]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d3bb      	bcc.n	8004df0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e78:	2300      	movs	r3, #0
 8004e7a:	73fb      	strb	r3, [r7, #15]
 8004e7c:	e044      	b.n	8004f08 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e7e:	7bfa      	ldrb	r2, [r7, #15]
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	4613      	mov	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	440b      	add	r3, r1
 8004e8c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004e90:	2200      	movs	r2, #0
 8004e92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e94:	7bfa      	ldrb	r2, [r7, #15]
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	440b      	add	r3, r1
 8004ea2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004ea6:	7bfa      	ldrb	r2, [r7, #15]
 8004ea8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004eaa:	7bfa      	ldrb	r2, [r7, #15]
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	440b      	add	r3, r1
 8004eb8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ec0:	7bfa      	ldrb	r2, [r7, #15]
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	440b      	add	r3, r1
 8004ece:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ed6:	7bfa      	ldrb	r2, [r7, #15]
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	440b      	add	r3, r1
 8004ee4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004eec:	7bfa      	ldrb	r2, [r7, #15]
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	440b      	add	r3, r1
 8004efa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
 8004f04:	3301      	adds	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	791b      	ldrb	r3, [r3, #4]
 8004f0c:	7bfa      	ldrb	r2, [r7, #15]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d3b5      	bcc.n	8004e7e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3304      	adds	r3, #4
 8004f1a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004f1e:	f003 fcc8 	bl	80088b2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	7a9b      	ldrb	r3, [r3, #10]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d102      	bne.n	8004f3e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f805 	bl	8004f48 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	f043 0301 	orr.w	r3, r3, #1
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	f043 0302 	orr.w	r3, r3, #2
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fa0:	4b05      	ldr	r3, [pc, #20]	@ (8004fb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a04      	ldr	r2, [pc, #16]	@ (8004fb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004fa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004faa:	6013      	str	r3, [r2, #0]
}
 8004fac:	bf00      	nop
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40007000 	.word	0x40007000

08004fbc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004fc0:	4b04      	ldr	r3, [pc, #16]	@ (8004fd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40007000 	.word	0x40007000

08004fd8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8004fe0:	4b27      	ldr	r3, [pc, #156]	@ (8005080 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004fe8:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8004fea:	f000 f851 	bl	8005090 <HAL_PWREx_SMPS_GetEffectiveMode>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ff4:	d101      	bne.n	8004ffa <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e03e      	b.n	8005078 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8004ffa:	4b21      	ldr	r3, [pc, #132]	@ (8005080 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005002:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005006:	d101      	bne.n	800500c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e035      	b.n	8005078 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	429a      	cmp	r2, r3
 8005012:	d101      	bne.n	8005018 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8005014:	2300      	movs	r3, #0
 8005016:	e02f      	b.n	8005078 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005018:	4b19      	ldr	r3, [pc, #100]	@ (8005080 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005020:	4917      	ldr	r1, [pc, #92]	@ (8005080 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4313      	orrs	r3, r2
 8005026:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8005028:	4b16      	ldr	r3, [pc, #88]	@ (8005084 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	095b      	lsrs	r3, r3, #5
 800502e:	4a16      	ldr	r2, [pc, #88]	@ (8005088 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8005030:	fba2 2303 	umull	r2, r3, r2, r3
 8005034:	09db      	lsrs	r3, r3, #7
 8005036:	2232      	movs	r2, #50	@ 0x32
 8005038:	fb02 f303 	mul.w	r3, r2, r3
 800503c:	4a13      	ldr	r2, [pc, #76]	@ (800508c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800503e:	fba2 2303 	umull	r2, r3, r2, r3
 8005042:	08db      	lsrs	r3, r3, #3
 8005044:	3301      	adds	r3, #1
 8005046:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005048:	e002      	b.n	8005050 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	3b01      	subs	r3, #1
 800504e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005050:	4b0b      	ldr	r3, [pc, #44]	@ (8005080 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005058:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800505c:	d102      	bne.n	8005064 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1f2      	bne.n	800504a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005064:	4b06      	ldr	r3, [pc, #24]	@ (8005080 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800506c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005070:	d101      	bne.n	8005076 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e000      	b.n	8005078 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40007000 	.word	0x40007000
 8005084:	20000008 	.word	0x20000008
 8005088:	0a7c5ac5 	.word	0x0a7c5ac5
 800508c:	cccccccd 	.word	0xcccccccd

08005090 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8005096:	4b0f      	ldr	r3, [pc, #60]	@ (80050d4 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80050a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80050aa:	607b      	str	r3, [r7, #4]
 80050ac:	e00a      	b.n	80050c4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d103      	bne.n	80050c0 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80050b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050bc:	607b      	str	r3, [r7, #4]
 80050be:	e001      	b.n	80050c4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80050c0:	2300      	movs	r3, #0
 80050c2:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80050c4:	687b      	ldr	r3, [r7, #4]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40007000 	.word	0x40007000

080050d8 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b088      	sub	sp, #32
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d102      	bne.n	80050ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	f000 bcc2 	b.w	8005a70 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ec:	4b99      	ldr	r3, [pc, #612]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f003 030c 	and.w	r3, r3, #12
 80050f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050f6:	4b97      	ldr	r3, [pc, #604]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 80e9 	beq.w	80052e0 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d006      	beq.n	8005122 <HAL_RCC_OscConfig+0x4a>
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	2b0c      	cmp	r3, #12
 8005118:	f040 8083 	bne.w	8005222 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d17f      	bne.n	8005222 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005122:	4b8c      	ldr	r3, [pc, #560]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d006      	beq.n	800513c <HAL_RCC_OscConfig+0x64>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d102      	bne.n	800513c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	f000 bc9a 	b.w	8005a70 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005140:	4b84      	ldr	r3, [pc, #528]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0308 	and.w	r3, r3, #8
 8005148:	2b00      	cmp	r3, #0
 800514a:	d004      	beq.n	8005156 <HAL_RCC_OscConfig+0x7e>
 800514c:	4b81      	ldr	r3, [pc, #516]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005154:	e005      	b.n	8005162 <HAL_RCC_OscConfig+0x8a>
 8005156:	4b7f      	ldr	r3, [pc, #508]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005158:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800515c:	091b      	lsrs	r3, r3, #4
 800515e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005162:	4293      	cmp	r3, r2
 8005164:	d224      	bcs.n	80051b0 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516a:	4618      	mov	r0, r3
 800516c:	f000 fe9c 	bl	8005ea8 <RCC_SetFlashLatencyFromMSIRange>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	f000 bc7a 	b.w	8005a70 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800517c:	4b75      	ldr	r3, [pc, #468]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a74      	ldr	r2, [pc, #464]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005182:	f043 0308 	orr.w	r3, r3, #8
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	4b72      	ldr	r3, [pc, #456]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005194:	496f      	ldr	r1, [pc, #444]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005196:	4313      	orrs	r3, r2
 8005198:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800519a:	4b6e      	ldr	r3, [pc, #440]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	021b      	lsls	r3, r3, #8
 80051a8:	496a      	ldr	r1, [pc, #424]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	604b      	str	r3, [r1, #4]
 80051ae:	e026      	b.n	80051fe <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051b0:	4b68      	ldr	r3, [pc, #416]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a67      	ldr	r2, [pc, #412]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 80051b6:	f043 0308 	orr.w	r3, r3, #8
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	4b65      	ldr	r3, [pc, #404]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c8:	4962      	ldr	r1, [pc, #392]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051ce:	4b61      	ldr	r3, [pc, #388]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	021b      	lsls	r3, r3, #8
 80051dc:	495d      	ldr	r1, [pc, #372]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10a      	bne.n	80051fe <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 fe5b 	bl	8005ea8 <RCC_SetFlashLatencyFromMSIRange>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	f000 bc39 	b.w	8005a70 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80051fe:	f000 fe17 	bl	8005e30 <HAL_RCC_GetHCLKFreq>
 8005202:	4603      	mov	r3, r0
 8005204:	4a54      	ldr	r2, [pc, #336]	@ (8005358 <HAL_RCC_OscConfig+0x280>)
 8005206:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005208:	4b54      	ldr	r3, [pc, #336]	@ (800535c <HAL_RCC_OscConfig+0x284>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4618      	mov	r0, r3
 800520e:	f7fe fb31 	bl	8003874 <HAL_InitTick>
 8005212:	4603      	mov	r3, r0
 8005214:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d060      	beq.n	80052de <HAL_RCC_OscConfig+0x206>
        {
          return status;
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	f000 bc27 	b.w	8005a70 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d039      	beq.n	800529e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800522a:	4b4a      	ldr	r3, [pc, #296]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a49      	ldr	r2, [pc, #292]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005230:	f043 0301 	orr.w	r3, r3, #1
 8005234:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005236:	f7fe fb6d 	bl	8003914 <HAL_GetTick>
 800523a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800523c:	e00f      	b.n	800525e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800523e:	f7fe fb69 	bl	8003914 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d908      	bls.n	800525e <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800524c:	4b41      	ldr	r3, [pc, #260]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d102      	bne.n	800525e <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	f000 bc09 	b.w	8005a70 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800525e:	4b3d      	ldr	r3, [pc, #244]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d0e9      	beq.n	800523e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800526a:	4b3a      	ldr	r3, [pc, #232]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a39      	ldr	r2, [pc, #228]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005270:	f043 0308 	orr.w	r3, r3, #8
 8005274:	6013      	str	r3, [r2, #0]
 8005276:	4b37      	ldr	r3, [pc, #220]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005282:	4934      	ldr	r1, [pc, #208]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005284:	4313      	orrs	r3, r2
 8005286:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005288:	4b32      	ldr	r3, [pc, #200]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	021b      	lsls	r3, r3, #8
 8005296:	492f      	ldr	r1, [pc, #188]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005298:	4313      	orrs	r3, r2
 800529a:	604b      	str	r3, [r1, #4]
 800529c:	e020      	b.n	80052e0 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800529e:	4b2d      	ldr	r3, [pc, #180]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 80052a4:	f023 0301 	bic.w	r3, r3, #1
 80052a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052aa:	f7fe fb33 	bl	8003914 <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052b0:	e00e      	b.n	80052d0 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052b2:	f7fe fb2f 	bl	8003914 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d907      	bls.n	80052d0 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052c0:	4b24      	ldr	r3, [pc, #144]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e3cf      	b.n	8005a70 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052d0:	4b20      	ldr	r3, [pc, #128]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1ea      	bne.n	80052b2 <HAL_RCC_OscConfig+0x1da>
 80052dc:	e000      	b.n	80052e0 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d07e      	beq.n	80053ea <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	2b08      	cmp	r3, #8
 80052f0:	d005      	beq.n	80052fe <HAL_RCC_OscConfig+0x226>
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	2b0c      	cmp	r3, #12
 80052f6:	d10e      	bne.n	8005316 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d10b      	bne.n	8005316 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052fe:	4b15      	ldr	r3, [pc, #84]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d06e      	beq.n	80053e8 <HAL_RCC_OscConfig+0x310>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d16a      	bne.n	80053e8 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e3ac      	b.n	8005a70 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800531e:	d106      	bne.n	800532e <HAL_RCC_OscConfig+0x256>
 8005320:	4b0c      	ldr	r3, [pc, #48]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a0b      	ldr	r2, [pc, #44]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005326:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	e024      	b.n	8005378 <HAL_RCC_OscConfig+0x2a0>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005336:	d113      	bne.n	8005360 <HAL_RCC_OscConfig+0x288>
 8005338:	4b06      	ldr	r3, [pc, #24]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a05      	ldr	r2, [pc, #20]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 800533e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005342:	6013      	str	r3, [r2, #0]
 8005344:	4b03      	ldr	r3, [pc, #12]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a02      	ldr	r2, [pc, #8]	@ (8005354 <HAL_RCC_OscConfig+0x27c>)
 800534a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800534e:	6013      	str	r3, [r2, #0]
 8005350:	e012      	b.n	8005378 <HAL_RCC_OscConfig+0x2a0>
 8005352:	bf00      	nop
 8005354:	40021000 	.word	0x40021000
 8005358:	20000008 	.word	0x20000008
 800535c:	2000000c 	.word	0x2000000c
 8005360:	4b8b      	ldr	r3, [pc, #556]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a8a      	ldr	r2, [pc, #552]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005366:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800536a:	6013      	str	r3, [r2, #0]
 800536c:	4b88      	ldr	r3, [pc, #544]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a87      	ldr	r2, [pc, #540]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005372:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d019      	beq.n	80053b4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005380:	f7fe fac8 	bl	8003914 <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005386:	e00e      	b.n	80053a6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005388:	f7fe fac4 	bl	8003914 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b64      	cmp	r3, #100	@ 0x64
 8005394:	d907      	bls.n	80053a6 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005396:	4b7e      	ldr	r3, [pc, #504]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e364      	b.n	8005a70 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053a6:	4b7a      	ldr	r3, [pc, #488]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0ea      	beq.n	8005388 <HAL_RCC_OscConfig+0x2b0>
 80053b2:	e01a      	b.n	80053ea <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b4:	f7fe faae 	bl	8003914 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053ba:	e00e      	b.n	80053da <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053bc:	f7fe faaa 	bl	8003914 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b64      	cmp	r3, #100	@ 0x64
 80053c8:	d907      	bls.n	80053da <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053ca:	4b71      	ldr	r3, [pc, #452]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e34a      	b.n	8005a70 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053da:	4b6d      	ldr	r3, [pc, #436]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1ea      	bne.n	80053bc <HAL_RCC_OscConfig+0x2e4>
 80053e6:	e000      	b.n	80053ea <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d06c      	beq.n	80054d0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d005      	beq.n	8005408 <HAL_RCC_OscConfig+0x330>
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	2b0c      	cmp	r3, #12
 8005400:	d119      	bne.n	8005436 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b02      	cmp	r3, #2
 8005406:	d116      	bne.n	8005436 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005408:	4b61      	ldr	r3, [pc, #388]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <HAL_RCC_OscConfig+0x348>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e327      	b.n	8005a70 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005420:	4b5b      	ldr	r3, [pc, #364]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	061b      	lsls	r3, r3, #24
 800542e:	4958      	ldr	r1, [pc, #352]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005430:	4313      	orrs	r3, r2
 8005432:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005434:	e04c      	b.n	80054d0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d029      	beq.n	8005492 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800543e:	4b54      	ldr	r3, [pc, #336]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a53      	ldr	r2, [pc, #332]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800544a:	f7fe fa63 	bl	8003914 <HAL_GetTick>
 800544e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005450:	e00e      	b.n	8005470 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005452:	f7fe fa5f 	bl	8003914 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d907      	bls.n	8005470 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005460:	4b4b      	ldr	r3, [pc, #300]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e2ff      	b.n	8005a70 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005470:	4b47      	ldr	r3, [pc, #284]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0ea      	beq.n	8005452 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800547c:	4b44      	ldr	r3, [pc, #272]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	061b      	lsls	r3, r3, #24
 800548a:	4941      	ldr	r1, [pc, #260]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 800548c:	4313      	orrs	r3, r2
 800548e:	604b      	str	r3, [r1, #4]
 8005490:	e01e      	b.n	80054d0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005492:	4b3f      	ldr	r3, [pc, #252]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a3e      	ldr	r2, [pc, #248]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005498:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800549c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549e:	f7fe fa39 	bl	8003914 <HAL_GetTick>
 80054a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054a4:	e00e      	b.n	80054c4 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054a6:	f7fe fa35 	bl	8003914 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d907      	bls.n	80054c4 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054b4:	4b36      	ldr	r3, [pc, #216]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e2d5      	b.n	8005a70 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054c4:	4b32      	ldr	r3, [pc, #200]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1ea      	bne.n	80054a6 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0308 	and.w	r3, r3, #8
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d062      	beq.n	80055a2 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d038      	beq.n	8005556 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d108      	bne.n	80054fe <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80054ec:	4b28      	ldr	r3, [pc, #160]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 80054ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054f2:	4a27      	ldr	r2, [pc, #156]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 80054f4:	f023 0310 	bic.w	r3, r3, #16
 80054f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80054fc:	e007      	b.n	800550e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80054fe:	4b24      	ldr	r3, [pc, #144]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005500:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005504:	4a22      	ldr	r2, [pc, #136]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005506:	f043 0310 	orr.w	r3, r3, #16
 800550a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800550e:	4b20      	ldr	r3, [pc, #128]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005510:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005514:	4a1e      	ldr	r2, [pc, #120]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005516:	f043 0301 	orr.w	r3, r3, #1
 800551a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800551e:	f7fe f9f9 	bl	8003914 <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005524:	e00f      	b.n	8005546 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005526:	f7fe f9f5 	bl	8003914 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b07      	cmp	r3, #7
 8005532:	d908      	bls.n	8005546 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005534:	4b16      	ldr	r3, [pc, #88]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005536:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e294      	b.n	8005a70 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005546:	4b12      	ldr	r3, [pc, #72]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005548:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0e8      	beq.n	8005526 <HAL_RCC_OscConfig+0x44e>
 8005554:	e025      	b.n	80055a2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005556:	4b0e      	ldr	r3, [pc, #56]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005558:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800555c:	4a0c      	ldr	r2, [pc, #48]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 800555e:	f023 0301 	bic.w	r3, r3, #1
 8005562:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005566:	f7fe f9d5 	bl	8003914 <HAL_GetTick>
 800556a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800556c:	e012      	b.n	8005594 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800556e:	f7fe f9d1 	bl	8003914 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b07      	cmp	r3, #7
 800557a:	d90b      	bls.n	8005594 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800557c:	4b04      	ldr	r3, [pc, #16]	@ (8005590 <HAL_RCC_OscConfig+0x4b8>)
 800557e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d004      	beq.n	8005594 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e270      	b.n	8005a70 <HAL_RCC_OscConfig+0x998>
 800558e:	bf00      	nop
 8005590:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005594:	4ba8      	ldr	r3, [pc, #672]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 8005596:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e5      	bne.n	800556e <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0304 	and.w	r3, r3, #4
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 812d 	beq.w	800580a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055b0:	2300      	movs	r3, #0
 80055b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80055b4:	4ba0      	ldr	r3, [pc, #640]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 80055b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10d      	bne.n	80055dc <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055c0:	4b9d      	ldr	r3, [pc, #628]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 80055c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c4:	4a9c      	ldr	r2, [pc, #624]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 80055c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80055cc:	4b9a      	ldr	r3, [pc, #616]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 80055ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055d4:	60bb      	str	r3, [r7, #8]
 80055d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055d8:	2301      	movs	r3, #1
 80055da:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055dc:	4b97      	ldr	r3, [pc, #604]	@ (800583c <HAL_RCC_OscConfig+0x764>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d11e      	bne.n	8005626 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055e8:	4b94      	ldr	r3, [pc, #592]	@ (800583c <HAL_RCC_OscConfig+0x764>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a93      	ldr	r2, [pc, #588]	@ (800583c <HAL_RCC_OscConfig+0x764>)
 80055ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055f4:	f7fe f98e 	bl	8003914 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055fa:	e00e      	b.n	800561a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055fc:	f7fe f98a 	bl	8003914 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d907      	bls.n	800561a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800560a:	4b8c      	ldr	r3, [pc, #560]	@ (800583c <HAL_RCC_OscConfig+0x764>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e22a      	b.n	8005a70 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800561a:	4b88      	ldr	r3, [pc, #544]	@ (800583c <HAL_RCC_OscConfig+0x764>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0ea      	beq.n	80055fc <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d01f      	beq.n	8005672 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f003 0304 	and.w	r3, r3, #4
 800563a:	2b00      	cmp	r3, #0
 800563c:	d010      	beq.n	8005660 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800563e:	4b7e      	ldr	r3, [pc, #504]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 8005640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005644:	4a7c      	ldr	r2, [pc, #496]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 8005646:	f043 0304 	orr.w	r3, r3, #4
 800564a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800564e:	4b7a      	ldr	r3, [pc, #488]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 8005650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005654:	4a78      	ldr	r2, [pc, #480]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 8005656:	f043 0301 	orr.w	r3, r3, #1
 800565a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800565e:	e018      	b.n	8005692 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005660:	4b75      	ldr	r3, [pc, #468]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 8005662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005666:	4a74      	ldr	r2, [pc, #464]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 8005668:	f043 0301 	orr.w	r3, r3, #1
 800566c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005670:	e00f      	b.n	8005692 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005672:	4b71      	ldr	r3, [pc, #452]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 8005674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005678:	4a6f      	ldr	r2, [pc, #444]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 800567a:	f023 0301 	bic.w	r3, r3, #1
 800567e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005682:	4b6d      	ldr	r3, [pc, #436]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 8005684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005688:	4a6b      	ldr	r2, [pc, #428]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 800568a:	f023 0304 	bic.w	r3, r3, #4
 800568e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d068      	beq.n	800576c <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569a:	f7fe f93b 	bl	8003914 <HAL_GetTick>
 800569e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056a0:	e011      	b.n	80056c6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a2:	f7fe f937 	bl	8003914 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d908      	bls.n	80056c6 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056b4:	4b60      	ldr	r3, [pc, #384]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 80056b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e1d4      	b.n	8005a70 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056c6:	4b5c      	ldr	r3, [pc, #368]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 80056c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0e6      	beq.n	80056a2 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d022      	beq.n	8005726 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80056e0:	4b55      	ldr	r3, [pc, #340]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 80056e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056e6:	4a54      	ldr	r2, [pc, #336]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 80056e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80056f0:	e011      	b.n	8005716 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056f2:	f7fe f90f 	bl	8003914 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005700:	4293      	cmp	r3, r2
 8005702:	d908      	bls.n	8005716 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005704:	4b4c      	ldr	r3, [pc, #304]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 8005706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800570a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e1ac      	b.n	8005a70 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005716:	4b48      	ldr	r3, [pc, #288]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 8005718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800571c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0e6      	beq.n	80056f2 <HAL_RCC_OscConfig+0x61a>
 8005724:	e068      	b.n	80057f8 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005726:	4b44      	ldr	r3, [pc, #272]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 8005728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800572c:	4a42      	ldr	r2, [pc, #264]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 800572e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005732:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005736:	e011      	b.n	800575c <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005738:	f7fe f8ec 	bl	8003914 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005746:	4293      	cmp	r3, r2
 8005748:	d908      	bls.n	800575c <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800574a:	4b3b      	ldr	r3, [pc, #236]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 800574c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e189      	b.n	8005a70 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800575c:	4b36      	ldr	r3, [pc, #216]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 800575e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005762:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1e6      	bne.n	8005738 <HAL_RCC_OscConfig+0x660>
 800576a:	e045      	b.n	80057f8 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800576c:	f7fe f8d2 	bl	8003914 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005772:	e011      	b.n	8005798 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005774:	f7fe f8ce 	bl	8003914 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005782:	4293      	cmp	r3, r2
 8005784:	d908      	bls.n	8005798 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005786:	4b2c      	ldr	r3, [pc, #176]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 8005788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e16b      	b.n	8005a70 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005798:	4b27      	ldr	r3, [pc, #156]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 800579a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1e6      	bne.n	8005774 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80057a6:	4b24      	ldr	r3, [pc, #144]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 80057a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d021      	beq.n	80057f8 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80057b4:	4b20      	ldr	r3, [pc, #128]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 80057b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 80057bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80057c4:	e011      	b.n	80057ea <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057c6:	f7fe f8a5 	bl	8003914 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d908      	bls.n	80057ea <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80057d8:	4b17      	ldr	r3, [pc, #92]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 80057da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e142      	b.n	8005a70 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80057ea:	4b13      	ldr	r3, [pc, #76]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 80057ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e6      	bne.n	80057c6 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057f8:	7ffb      	ldrb	r3, [r7, #31]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d105      	bne.n	800580a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 8005800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005802:	4a0d      	ldr	r2, [pc, #52]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 8005804:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005808:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0320 	and.w	r3, r3, #32
 8005812:	2b00      	cmp	r3, #0
 8005814:	d04f      	beq.n	80058b6 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581a:	2b00      	cmp	r3, #0
 800581c:	d028      	beq.n	8005870 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800581e:	4b06      	ldr	r3, [pc, #24]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 8005820:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005824:	4a04      	ldr	r2, [pc, #16]	@ (8005838 <HAL_RCC_OscConfig+0x760>)
 8005826:	f043 0301 	orr.w	r3, r3, #1
 800582a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800582e:	f7fe f871 	bl	8003914 <HAL_GetTick>
 8005832:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005834:	e014      	b.n	8005860 <HAL_RCC_OscConfig+0x788>
 8005836:	bf00      	nop
 8005838:	40021000 	.word	0x40021000
 800583c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005840:	f7fe f868 	bl	8003914 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d908      	bls.n	8005860 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800584e:	4b8a      	ldr	r3, [pc, #552]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 8005850:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e107      	b.n	8005a70 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005860:	4b85      	ldr	r3, [pc, #532]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 8005862:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d0e8      	beq.n	8005840 <HAL_RCC_OscConfig+0x768>
 800586e:	e022      	b.n	80058b6 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005870:	4b81      	ldr	r3, [pc, #516]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 8005872:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005876:	4a80      	ldr	r2, [pc, #512]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 8005878:	f023 0301 	bic.w	r3, r3, #1
 800587c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005880:	f7fe f848 	bl	8003914 <HAL_GetTick>
 8005884:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005886:	e00f      	b.n	80058a8 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005888:	f7fe f844 	bl	8003914 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d908      	bls.n	80058a8 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005896:	4b78      	ldr	r3, [pc, #480]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 8005898:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e0e3      	b.n	8005a70 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80058a8:	4b73      	ldr	r3, [pc, #460]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 80058aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e8      	bne.n	8005888 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 80d7 	beq.w	8005a6e <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058c0:	4b6d      	ldr	r3, [pc, #436]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f003 030c 	and.w	r3, r3, #12
 80058c8:	2b0c      	cmp	r3, #12
 80058ca:	f000 8091 	beq.w	80059f0 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d166      	bne.n	80059a4 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058d6:	4b68      	ldr	r3, [pc, #416]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a67      	ldr	r2, [pc, #412]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 80058dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e2:	f7fe f817 	bl	8003914 <HAL_GetTick>
 80058e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058e8:	e00e      	b.n	8005908 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ea:	f7fe f813 	bl	8003914 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d907      	bls.n	8005908 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058f8:	4b5f      	ldr	r3, [pc, #380]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e0b3      	b.n	8005a70 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005908:	4b5b      	ldr	r3, [pc, #364]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1ea      	bne.n	80058ea <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005914:	4b58      	ldr	r3, [pc, #352]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 8005916:	68da      	ldr	r2, [r3, #12]
 8005918:	4b58      	ldr	r3, [pc, #352]	@ (8005a7c <HAL_RCC_OscConfig+0x9a4>)
 800591a:	4013      	ands	r3, r2
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005924:	3a01      	subs	r2, #1
 8005926:	0112      	lsls	r2, r2, #4
 8005928:	4311      	orrs	r1, r2
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800592e:	0212      	lsls	r2, r2, #8
 8005930:	4311      	orrs	r1, r2
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005936:	0852      	lsrs	r2, r2, #1
 8005938:	3a01      	subs	r2, #1
 800593a:	0552      	lsls	r2, r2, #21
 800593c:	4311      	orrs	r1, r2
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005942:	0852      	lsrs	r2, r2, #1
 8005944:	3a01      	subs	r2, #1
 8005946:	0652      	lsls	r2, r2, #25
 8005948:	4311      	orrs	r1, r2
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800594e:	06d2      	lsls	r2, r2, #27
 8005950:	430a      	orrs	r2, r1
 8005952:	4949      	ldr	r1, [pc, #292]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 8005954:	4313      	orrs	r3, r2
 8005956:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005958:	4b47      	ldr	r3, [pc, #284]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a46      	ldr	r2, [pc, #280]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 800595e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005962:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005964:	4b44      	ldr	r3, [pc, #272]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	4a43      	ldr	r2, [pc, #268]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 800596a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800596e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005970:	f7fd ffd0 	bl	8003914 <HAL_GetTick>
 8005974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005976:	e00e      	b.n	8005996 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005978:	f7fd ffcc 	bl	8003914 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d907      	bls.n	8005996 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005986:	4b3c      	ldr	r3, [pc, #240]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e06c      	b.n	8005a70 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005996:	4b38      	ldr	r3, [pc, #224]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0ea      	beq.n	8005978 <HAL_RCC_OscConfig+0x8a0>
 80059a2:	e064      	b.n	8005a6e <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059a4:	4b34      	ldr	r3, [pc, #208]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a33      	ldr	r2, [pc, #204]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 80059aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b0:	f7fd ffb0 	bl	8003914 <HAL_GetTick>
 80059b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059b6:	e00e      	b.n	80059d6 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059b8:	f7fd ffac 	bl	8003914 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d907      	bls.n	80059d6 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059c6:	4b2c      	ldr	r3, [pc, #176]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e04c      	b.n	8005a70 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059d6:	4b28      	ldr	r3, [pc, #160]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1ea      	bne.n	80059b8 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80059e2:	4b25      	ldr	r3, [pc, #148]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	4924      	ldr	r1, [pc, #144]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 80059e8:	4b25      	ldr	r3, [pc, #148]	@ (8005a80 <HAL_RCC_OscConfig+0x9a8>)
 80059ea:	4013      	ands	r3, r2
 80059ec:	60cb      	str	r3, [r1, #12]
 80059ee:	e03e      	b.n	8005a6e <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d101      	bne.n	80059fc <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e039      	b.n	8005a70 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80059fc:	4b1e      	ldr	r3, [pc, #120]	@ (8005a78 <HAL_RCC_OscConfig+0x9a0>)
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f003 0203 	and.w	r2, r3, #3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d12c      	bne.n	8005a6a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d123      	bne.n	8005a6a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d11b      	bne.n	8005a6a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a3c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d113      	bne.n	8005a6a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4c:	085b      	lsrs	r3, r3, #1
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d109      	bne.n	8005a6a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a60:	085b      	lsrs	r3, r3, #1
 8005a62:	3b01      	subs	r3, #1
 8005a64:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d001      	beq.n	8005a6e <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e000      	b.n	8005a70 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3720      	adds	r7, #32
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	019f800c 	.word	0x019f800c
 8005a80:	feeefffc 	.word	0xfeeefffc

08005a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e11c      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a9c:	4b90      	ldr	r3, [pc, #576]	@ (8005ce0 <HAL_RCC_ClockConfig+0x25c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 030f 	and.w	r3, r3, #15
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d910      	bls.n	8005acc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aaa:	4b8d      	ldr	r3, [pc, #564]	@ (8005ce0 <HAL_RCC_ClockConfig+0x25c>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f023 020f 	bic.w	r2, r3, #15
 8005ab2:	498b      	ldr	r1, [pc, #556]	@ (8005ce0 <HAL_RCC_ClockConfig+0x25c>)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aba:	4b89      	ldr	r3, [pc, #548]	@ (8005ce0 <HAL_RCC_ClockConfig+0x25c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 030f 	and.w	r3, r3, #15
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d001      	beq.n	8005acc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e104      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d010      	beq.n	8005afa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	4b81      	ldr	r3, [pc, #516]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d908      	bls.n	8005afa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ae8:	4b7e      	ldr	r3, [pc, #504]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	497b      	ldr	r1, [pc, #492]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f000 8085 	beq.w	8005c12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	2b03      	cmp	r3, #3
 8005b0e:	d11f      	bne.n	8005b50 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b10:	4b74      	ldr	r3, [pc, #464]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e0da      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005b20:	f000 fa26 	bl	8005f70 <RCC_GetSysClockFreqFromPLLSource>
 8005b24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	4a6f      	ldr	r2, [pc, #444]	@ (8005ce8 <HAL_RCC_ClockConfig+0x264>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d947      	bls.n	8005bbe <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005b2e:	4b6d      	ldr	r3, [pc, #436]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d141      	bne.n	8005bbe <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b3a:	4b6a      	ldr	r3, [pc, #424]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b42:	4a68      	ldr	r2, [pc, #416]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b4a:	2380      	movs	r3, #128	@ 0x80
 8005b4c:	617b      	str	r3, [r7, #20]
 8005b4e:	e036      	b.n	8005bbe <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d107      	bne.n	8005b68 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b58:	4b62      	ldr	r3, [pc, #392]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d115      	bne.n	8005b90 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e0b6      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d107      	bne.n	8005b80 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b70:	4b5c      	ldr	r3, [pc, #368]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d109      	bne.n	8005b90 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e0aa      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b80:	4b58      	ldr	r3, [pc, #352]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e0a2      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005b90:	f000 f8b0 	bl	8005cf4 <HAL_RCC_GetSysClockFreq>
 8005b94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	4a53      	ldr	r2, [pc, #332]	@ (8005ce8 <HAL_RCC_ClockConfig+0x264>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d90f      	bls.n	8005bbe <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005b9e:	4b51      	ldr	r3, [pc, #324]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d109      	bne.n	8005bbe <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005baa:	4b4e      	ldr	r3, [pc, #312]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bb2:	4a4c      	ldr	r2, [pc, #304]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005bb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bb8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005bba:	2380      	movs	r3, #128	@ 0x80
 8005bbc:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bbe:	4b49      	ldr	r3, [pc, #292]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f023 0203 	bic.w	r2, r3, #3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	4946      	ldr	r1, [pc, #280]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bd0:	f7fd fea0 	bl	8003914 <HAL_GetTick>
 8005bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bd6:	e013      	b.n	8005c00 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bd8:	f7fd fe9c 	bl	8003914 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d90a      	bls.n	8005c00 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bea:	4b3e      	ldr	r3, [pc, #248]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f003 020c 	and.w	r2, r3, #12
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d001      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e06a      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c00:	4b38      	ldr	r3, [pc, #224]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f003 020c 	and.w	r2, r3, #12
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d1e2      	bne.n	8005bd8 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2b80      	cmp	r3, #128	@ 0x80
 8005c16:	d105      	bne.n	8005c24 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005c18:	4b32      	ldr	r3, [pc, #200]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	4a31      	ldr	r2, [pc, #196]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005c1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c22:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d010      	beq.n	8005c52 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	4b2b      	ldr	r3, [pc, #172]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d208      	bcs.n	8005c52 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c40:	4b28      	ldr	r3, [pc, #160]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	4925      	ldr	r1, [pc, #148]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c52:	4b23      	ldr	r3, [pc, #140]	@ (8005ce0 <HAL_RCC_ClockConfig+0x25c>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 030f 	and.w	r3, r3, #15
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d210      	bcs.n	8005c82 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c60:	4b1f      	ldr	r3, [pc, #124]	@ (8005ce0 <HAL_RCC_ClockConfig+0x25c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f023 020f 	bic.w	r2, r3, #15
 8005c68:	491d      	ldr	r1, [pc, #116]	@ (8005ce0 <HAL_RCC_ClockConfig+0x25c>)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c70:	4b1b      	ldr	r3, [pc, #108]	@ (8005ce0 <HAL_RCC_ClockConfig+0x25c>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 030f 	and.w	r3, r3, #15
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d001      	beq.n	8005c82 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e029      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0304 	and.w	r3, r3, #4
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d008      	beq.n	8005ca0 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c8e:	4b15      	ldr	r3, [pc, #84]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	4912      	ldr	r1, [pc, #72]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0308 	and.w	r3, r3, #8
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d009      	beq.n	8005cc0 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cac:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	490a      	ldr	r1, [pc, #40]	@ (8005ce4 <HAL_RCC_ClockConfig+0x260>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005cc0:	f000 f8b6 	bl	8005e30 <HAL_RCC_GetHCLKFreq>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	4a09      	ldr	r2, [pc, #36]	@ (8005cec <HAL_RCC_ClockConfig+0x268>)
 8005cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005cca:	4b09      	ldr	r3, [pc, #36]	@ (8005cf0 <HAL_RCC_ClockConfig+0x26c>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fd fdd0 	bl	8003874 <HAL_InitTick>
 8005cd4:	4603      	mov	r3, r0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3718      	adds	r7, #24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	40022000 	.word	0x40022000
 8005ce4:	40021000 	.word	0x40021000
 8005ce8:	04c4b400 	.word	0x04c4b400
 8005cec:	20000008 	.word	0x20000008
 8005cf0:	2000000c 	.word	0x2000000c

08005cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b089      	sub	sp, #36	@ 0x24
 8005cf8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61fb      	str	r3, [r7, #28]
 8005cfe:	2300      	movs	r3, #0
 8005d00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d02:	4b47      	ldr	r3, [pc, #284]	@ (8005e20 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 030c 	and.w	r3, r3, #12
 8005d0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d0c:	4b44      	ldr	r3, [pc, #272]	@ (8005e20 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f003 0303 	and.w	r3, r3, #3
 8005d14:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d005      	beq.n	8005d28 <HAL_RCC_GetSysClockFreq+0x34>
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	2b0c      	cmp	r3, #12
 8005d20:	d121      	bne.n	8005d66 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d11e      	bne.n	8005d66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005d28:	4b3d      	ldr	r3, [pc, #244]	@ (8005e20 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0308 	and.w	r3, r3, #8
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d107      	bne.n	8005d44 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005d34:	4b3a      	ldr	r3, [pc, #232]	@ (8005e20 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d3a:	0a1b      	lsrs	r3, r3, #8
 8005d3c:	f003 030f 	and.w	r3, r3, #15
 8005d40:	61fb      	str	r3, [r7, #28]
 8005d42:	e005      	b.n	8005d50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005d44:	4b36      	ldr	r3, [pc, #216]	@ (8005e20 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	091b      	lsrs	r3, r3, #4
 8005d4a:	f003 030f 	and.w	r3, r3, #15
 8005d4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8005d50:	4a34      	ldr	r2, [pc, #208]	@ (8005e24 <HAL_RCC_GetSysClockFreq+0x130>)
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d58:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10d      	bne.n	8005d7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005d64:	e00a      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2b04      	cmp	r3, #4
 8005d6a:	d102      	bne.n	8005d72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8005e28 <HAL_RCC_GetSysClockFreq+0x134>)
 8005d6e:	61bb      	str	r3, [r7, #24]
 8005d70:	e004      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	2b08      	cmp	r3, #8
 8005d76:	d101      	bne.n	8005d7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d78:	4b2c      	ldr	r3, [pc, #176]	@ (8005e2c <HAL_RCC_GetSysClockFreq+0x138>)
 8005d7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	2b0c      	cmp	r3, #12
 8005d80:	d146      	bne.n	8005e10 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005d82:	4b27      	ldr	r3, [pc, #156]	@ (8005e20 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d8c:	4b24      	ldr	r3, [pc, #144]	@ (8005e20 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	091b      	lsrs	r3, r3, #4
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	3301      	adds	r3, #1
 8005d98:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d003      	beq.n	8005da8 <HAL_RCC_GetSysClockFreq+0xb4>
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	d00d      	beq.n	8005dc2 <HAL_RCC_GetSysClockFreq+0xce>
 8005da6:	e019      	b.n	8005ddc <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005da8:	4a1f      	ldr	r2, [pc, #124]	@ (8005e28 <HAL_RCC_GetSysClockFreq+0x134>)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db0:	4a1b      	ldr	r2, [pc, #108]	@ (8005e20 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005db2:	68d2      	ldr	r2, [r2, #12]
 8005db4:	0a12      	lsrs	r2, r2, #8
 8005db6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005dba:	fb02 f303 	mul.w	r3, r2, r3
 8005dbe:	617b      	str	r3, [r7, #20]
        break;
 8005dc0:	e019      	b.n	8005df6 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dc2:	4a1a      	ldr	r2, [pc, #104]	@ (8005e2c <HAL_RCC_GetSysClockFreq+0x138>)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dca:	4a15      	ldr	r2, [pc, #84]	@ (8005e20 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005dcc:	68d2      	ldr	r2, [r2, #12]
 8005dce:	0a12      	lsrs	r2, r2, #8
 8005dd0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005dd4:	fb02 f303 	mul.w	r3, r2, r3
 8005dd8:	617b      	str	r3, [r7, #20]
        break;
 8005dda:	e00c      	b.n	8005df6 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ddc:	69fa      	ldr	r2, [r7, #28]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de4:	4a0e      	ldr	r2, [pc, #56]	@ (8005e20 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005de6:	68d2      	ldr	r2, [r2, #12]
 8005de8:	0a12      	lsrs	r2, r2, #8
 8005dea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005dee:	fb02 f303 	mul.w	r3, r2, r3
 8005df2:	617b      	str	r3, [r7, #20]
        break;
 8005df4:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005df6:	4b0a      	ldr	r3, [pc, #40]	@ (8005e20 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	0e5b      	lsrs	r3, r3, #25
 8005dfc:	f003 0303 	and.w	r3, r3, #3
 8005e00:	3301      	adds	r3, #1
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005e10:	69bb      	ldr	r3, [r7, #24]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3724      	adds	r7, #36	@ 0x24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	40021000 	.word	0x40021000
 8005e24:	0800e21c 	.word	0x0800e21c
 8005e28:	00f42400 	.word	0x00f42400
 8005e2c:	007a1200 	.word	0x007a1200

08005e30 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8005e34:	f7ff ff5e 	bl	8005cf4 <HAL_RCC_GetSysClockFreq>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	4b05      	ldr	r3, [pc, #20]	@ (8005e50 <HAL_RCC_GetHCLKFreq+0x20>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	091b      	lsrs	r3, r3, #4
 8005e40:	f003 030f 	and.w	r3, r3, #15
 8005e44:	4903      	ldr	r1, [pc, #12]	@ (8005e54 <HAL_RCC_GetHCLKFreq+0x24>)
 8005e46:	5ccb      	ldrb	r3, [r1, r3]
 8005e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	40021000 	.word	0x40021000
 8005e54:	0800e204 	.word	0x0800e204

08005e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e5c:	f7ff ffe8 	bl	8005e30 <HAL_RCC_GetHCLKFreq>
 8005e60:	4602      	mov	r2, r0
 8005e62:	4b05      	ldr	r3, [pc, #20]	@ (8005e78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	0a1b      	lsrs	r3, r3, #8
 8005e68:	f003 0307 	and.w	r3, r3, #7
 8005e6c:	4903      	ldr	r1, [pc, #12]	@ (8005e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e6e:	5ccb      	ldrb	r3, [r1, r3]
 8005e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	40021000 	.word	0x40021000
 8005e7c:	0800e214 	.word	0x0800e214

08005e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e84:	f7ff ffd4 	bl	8005e30 <HAL_RCC_GetHCLKFreq>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	4b05      	ldr	r3, [pc, #20]	@ (8005ea0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	0adb      	lsrs	r3, r3, #11
 8005e90:	f003 0307 	and.w	r3, r3, #7
 8005e94:	4903      	ldr	r1, [pc, #12]	@ (8005ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e96:	5ccb      	ldrb	r3, [r1, r3]
 8005e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	0800e214 	.word	0x0800e214

08005ea8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005eb4:	4b2c      	ldr	r3, [pc, #176]	@ (8005f68 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d003      	beq.n	8005ec8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005ec0:	f7ff f87c 	bl	8004fbc <HAL_PWREx_GetVoltageRange>
 8005ec4:	6138      	str	r0, [r7, #16]
 8005ec6:	e014      	b.n	8005ef2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ec8:	4b27      	ldr	r3, [pc, #156]	@ (8005f68 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ecc:	4a26      	ldr	r2, [pc, #152]	@ (8005f68 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005ece:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ed2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ed4:	4b24      	ldr	r3, [pc, #144]	@ (8005f68 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005ee0:	f7ff f86c 	bl	8004fbc <HAL_PWREx_GetVoltageRange>
 8005ee4:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005ee6:	4b20      	ldr	r3, [pc, #128]	@ (8005f68 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eea:	4a1f      	ldr	r2, [pc, #124]	@ (8005f68 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005eec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ef0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d003      	beq.n	8005f00 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005efe:	d10b      	bne.n	8005f18 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b80      	cmp	r3, #128	@ 0x80
 8005f04:	d919      	bls.n	8005f3a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2ba0      	cmp	r3, #160	@ 0xa0
 8005f0a:	d902      	bls.n	8005f12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005f10:	e013      	b.n	8005f3a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f12:	2301      	movs	r3, #1
 8005f14:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005f16:	e010      	b.n	8005f3a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b80      	cmp	r3, #128	@ 0x80
 8005f1c:	d902      	bls.n	8005f24 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005f1e:	2303      	movs	r3, #3
 8005f20:	617b      	str	r3, [r7, #20]
 8005f22:	e00a      	b.n	8005f3a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b80      	cmp	r3, #128	@ 0x80
 8005f28:	d102      	bne.n	8005f30 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	617b      	str	r3, [r7, #20]
 8005f2e:	e004      	b.n	8005f3a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b70      	cmp	r3, #112	@ 0x70
 8005f34:	d101      	bne.n	8005f3a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f36:	2301      	movs	r3, #1
 8005f38:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f6c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f023 020f 	bic.w	r2, r3, #15
 8005f42:	490a      	ldr	r1, [pc, #40]	@ (8005f6c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005f4a:	4b08      	ldr	r3, [pc, #32]	@ (8005f6c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 030f 	and.w	r3, r3, #15
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d001      	beq.n	8005f5c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e000      	b.n	8005f5e <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	40021000 	.word	0x40021000
 8005f6c:	40022000 	.word	0x40022000

08005f70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b087      	sub	sp, #28
 8005f74:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f76:	4b31      	ldr	r3, [pc, #196]	@ (800603c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f003 0303 	and.w	r3, r3, #3
 8005f7e:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f80:	4b2e      	ldr	r3, [pc, #184]	@ (800603c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	091b      	lsrs	r3, r3, #4
 8005f86:	f003 030f 	and.w	r3, r3, #15
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d015      	beq.n	8005fc0 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d839      	bhi.n	800600e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d01c      	beq.n	8005fda <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d133      	bne.n	800600e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fa6:	4a26      	ldr	r2, [pc, #152]	@ (8006040 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fae:	4a23      	ldr	r2, [pc, #140]	@ (800603c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005fb0:	68d2      	ldr	r2, [r2, #12]
 8005fb2:	0a12      	lsrs	r2, r2, #8
 8005fb4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005fb8:	fb02 f303 	mul.w	r3, r2, r3
 8005fbc:	613b      	str	r3, [r7, #16]
      break;
 8005fbe:	e029      	b.n	8006014 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fc0:	4a20      	ldr	r2, [pc, #128]	@ (8006044 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc8:	4a1c      	ldr	r2, [pc, #112]	@ (800603c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005fca:	68d2      	ldr	r2, [r2, #12]
 8005fcc:	0a12      	lsrs	r2, r2, #8
 8005fce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005fd2:	fb02 f303 	mul.w	r3, r2, r3
 8005fd6:	613b      	str	r3, [r7, #16]
      break;
 8005fd8:	e01c      	b.n	8006014 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005fda:	4b18      	ldr	r3, [pc, #96]	@ (800603c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0308 	and.w	r3, r3, #8
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d107      	bne.n	8005ff6 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005fe6:	4b15      	ldr	r3, [pc, #84]	@ (800603c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fec:	0a1b      	lsrs	r3, r3, #8
 8005fee:	f003 030f 	and.w	r3, r3, #15
 8005ff2:	617b      	str	r3, [r7, #20]
 8005ff4:	e005      	b.n	8006002 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ff6:	4b11      	ldr	r3, [pc, #68]	@ (800603c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	091b      	lsrs	r3, r3, #4
 8005ffc:	f003 030f 	and.w	r3, r3, #15
 8006000:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8006002:	4a11      	ldr	r2, [pc, #68]	@ (8006048 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800600a:	613b      	str	r3, [r7, #16]
        break;
 800600c:	e002      	b.n	8006014 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800600e:	2300      	movs	r3, #0
 8006010:	613b      	str	r3, [r7, #16]
      break;
 8006012:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8006014:	4b09      	ldr	r3, [pc, #36]	@ (800603c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	0e5b      	lsrs	r3, r3, #25
 800601a:	f003 0303 	and.w	r3, r3, #3
 800601e:	3301      	adds	r3, #1
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	fbb2 f3f3 	udiv	r3, r2, r3
 800602c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800602e:	683b      	ldr	r3, [r7, #0]
}
 8006030:	4618      	mov	r0, r3
 8006032:	371c      	adds	r7, #28
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	40021000 	.word	0x40021000
 8006040:	00f42400 	.word	0x00f42400
 8006044:	007a1200 	.word	0x007a1200
 8006048:	0800e21c 	.word	0x0800e21c

0800604c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006054:	2300      	movs	r3, #0
 8006056:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006058:	2300      	movs	r3, #0
 800605a:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006064:	2b00      	cmp	r3, #0
 8006066:	d040      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800606c:	2b80      	cmp	r3, #128	@ 0x80
 800606e:	d02a      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006070:	2b80      	cmp	r3, #128	@ 0x80
 8006072:	d825      	bhi.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006074:	2b60      	cmp	r3, #96	@ 0x60
 8006076:	d026      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006078:	2b60      	cmp	r3, #96	@ 0x60
 800607a:	d821      	bhi.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800607c:	2b40      	cmp	r3, #64	@ 0x40
 800607e:	d006      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006080:	2b40      	cmp	r3, #64	@ 0x40
 8006082:	d81d      	bhi.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006084:	2b00      	cmp	r3, #0
 8006086:	d009      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006088:	2b20      	cmp	r3, #32
 800608a:	d010      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x62>
 800608c:	e018      	b.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800608e:	4b8f      	ldr	r3, [pc, #572]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	4a8e      	ldr	r2, [pc, #568]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006098:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800609a:	e015      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	3304      	adds	r3, #4
 80060a0:	2100      	movs	r1, #0
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 fb56 	bl	8006754 <RCCEx_PLLSAI1_Config>
 80060a8:	4603      	mov	r3, r0
 80060aa:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80060ac:	e00c      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	3320      	adds	r3, #32
 80060b2:	2100      	movs	r1, #0
 80060b4:	4618      	mov	r0, r3
 80060b6:	f000 fc33 	bl	8006920 <RCCEx_PLLSAI2_Config>
 80060ba:	4603      	mov	r3, r0
 80060bc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80060be:	e003      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	77fb      	strb	r3, [r7, #31]
        break;
 80060c4:	e000      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80060c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060c8:	7ffb      	ldrb	r3, [r7, #31]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10b      	bne.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060ce:	4b7f      	ldr	r3, [pc, #508]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060d4:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060dc:	497b      	ldr	r1, [pc, #492]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80060e4:	e001      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e6:	7ffb      	ldrb	r3, [r7, #31]
 80060e8:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d047      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060fe:	d030      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006100:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006104:	d82a      	bhi.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006106:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800610a:	d02a      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800610c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006110:	d824      	bhi.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006112:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006116:	d008      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800611c:	d81e      	bhi.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00a      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006122:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006126:	d010      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006128:	e018      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800612a:	4b68      	ldr	r3, [pc, #416]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	4a67      	ldr	r2, [pc, #412]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006134:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006136:	e015      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3304      	adds	r3, #4
 800613c:	2100      	movs	r1, #0
 800613e:	4618      	mov	r0, r3
 8006140:	f000 fb08 	bl	8006754 <RCCEx_PLLSAI1_Config>
 8006144:	4603      	mov	r3, r0
 8006146:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006148:	e00c      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	3320      	adds	r3, #32
 800614e:	2100      	movs	r1, #0
 8006150:	4618      	mov	r0, r3
 8006152:	f000 fbe5 	bl	8006920 <RCCEx_PLLSAI2_Config>
 8006156:	4603      	mov	r3, r0
 8006158:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800615a:	e003      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	77fb      	strb	r3, [r7, #31]
        break;
 8006160:	e000      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8006162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006164:	7ffb      	ldrb	r3, [r7, #31]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10b      	bne.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800616a:	4b58      	ldr	r3, [pc, #352]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800616c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006170:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006178:	4954      	ldr	r1, [pc, #336]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800617a:	4313      	orrs	r3, r2
 800617c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006180:	e001      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006182:	7ffb      	ldrb	r3, [r7, #31]
 8006184:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 80ab 	beq.w	80062ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006194:	2300      	movs	r3, #0
 8006196:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006198:	4b4c      	ldr	r3, [pc, #304]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800619a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800619c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10d      	bne.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061a4:	4b49      	ldr	r3, [pc, #292]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061a8:	4a48      	ldr	r2, [pc, #288]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80061b0:	4b46      	ldr	r3, [pc, #280]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061b8:	60fb      	str	r3, [r7, #12]
 80061ba:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80061bc:	2301      	movs	r3, #1
 80061be:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061c0:	4b43      	ldr	r3, [pc, #268]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a42      	ldr	r2, [pc, #264]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80061c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061cc:	f7fd fba2 	bl	8003914 <HAL_GetTick>
 80061d0:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061d2:	e00f      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061d4:	f7fd fb9e 	bl	8003914 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d908      	bls.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061e2:	4b3b      	ldr	r3, [pc, #236]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d109      	bne.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	77fb      	strb	r3, [r7, #31]
        }
        break;
 80061f2:	e006      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061f4:	4b36      	ldr	r3, [pc, #216]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0e9      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8006200:	e000      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8006202:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8006204:	7ffb      	ldrb	r3, [r7, #31]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d164      	bne.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800620a:	4b30      	ldr	r3, [pc, #192]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800620c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006210:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006214:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d01f      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x210>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	429a      	cmp	r2, r3
 8006226:	d019      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006228:	4b28      	ldr	r3, [pc, #160]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800622a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800622e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006232:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006234:	4b25      	ldr	r3, [pc, #148]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800623a:	4a24      	ldr	r2, [pc, #144]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800623c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006240:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006244:	4b21      	ldr	r3, [pc, #132]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800624a:	4a20      	ldr	r2, [pc, #128]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800624c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006250:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006254:	4a1d      	ldr	r2, [pc, #116]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d01f      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006266:	f7fd fb55 	bl	8003914 <HAL_GetTick>
 800626a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800626c:	e012      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800626e:	f7fd fb51 	bl	8003914 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	f241 3288 	movw	r2, #5000	@ 0x1388
 800627c:	4293      	cmp	r3, r2
 800627e:	d909      	bls.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006280:	4b12      	ldr	r3, [pc, #72]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10a      	bne.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8006292:	e007      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006294:	4b0d      	ldr	r3, [pc, #52]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0e5      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x222>
 80062a2:	e000      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80062a4:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80062a6:	7ffb      	ldrb	r3, [r7, #31]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10c      	bne.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062ac:	4b07      	ldr	r3, [pc, #28]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062bc:	4903      	ldr	r1, [pc, #12]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80062c4:	e008      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062c6:	7ffb      	ldrb	r3, [r7, #31]
 80062c8:	77bb      	strb	r3, [r7, #30]
 80062ca:	e005      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80062cc:	40021000 	.word	0x40021000
 80062d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d4:	7ffb      	ldrb	r3, [r7, #31]
 80062d6:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80062d8:	7dfb      	ldrb	r3, [r7, #23]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d105      	bne.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062de:	4b9c      	ldr	r3, [pc, #624]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80062e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e2:	4a9b      	ldr	r2, [pc, #620]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80062e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00a      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062f6:	4b96      	ldr	r3, [pc, #600]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80062f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062fc:	f023 0203 	bic.w	r2, r3, #3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006304:	4992      	ldr	r1, [pc, #584]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006306:	4313      	orrs	r3, r2
 8006308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00a      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006318:	4b8d      	ldr	r3, [pc, #564]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800631a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800631e:	f023 020c 	bic.w	r2, r3, #12
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006326:	498a      	ldr	r1, [pc, #552]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006328:	4313      	orrs	r3, r2
 800632a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0304 	and.w	r3, r3, #4
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00a      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800633a:	4b85      	ldr	r3, [pc, #532]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800633c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006340:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006348:	4981      	ldr	r1, [pc, #516]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800634a:	4313      	orrs	r3, r2
 800634c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0308 	and.w	r3, r3, #8
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00a      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800635c:	4b7c      	ldr	r3, [pc, #496]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800635e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006362:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636a:	4979      	ldr	r1, [pc, #484]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800636c:	4313      	orrs	r3, r2
 800636e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0310 	and.w	r3, r3, #16
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00a      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800637e:	4b74      	ldr	r3, [pc, #464]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006384:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800638c:	4970      	ldr	r1, [pc, #448]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800638e:	4313      	orrs	r3, r2
 8006390:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0320 	and.w	r3, r3, #32
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00a      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063a0:	4b6b      	ldr	r3, [pc, #428]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80063a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063ae:	4968      	ldr	r1, [pc, #416]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00a      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063c2:	4b63      	ldr	r3, [pc, #396]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80063c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063d0:	495f      	ldr	r1, [pc, #380]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00a      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063e4:	4b5a      	ldr	r3, [pc, #360]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80063e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063f2:	4957      	ldr	r1, [pc, #348]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00a      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006406:	4b52      	ldr	r3, [pc, #328]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800640c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006414:	494e      	ldr	r1, [pc, #312]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006416:	4313      	orrs	r3, r2
 8006418:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d031      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800642c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006430:	d00e      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006432:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006436:	d814      	bhi.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006438:	2b00      	cmp	r3, #0
 800643a:	d015      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800643c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006440:	d10f      	bne.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006442:	4b43      	ldr	r3, [pc, #268]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	4a42      	ldr	r2, [pc, #264]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006448:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800644c:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800644e:	e00c      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3304      	adds	r3, #4
 8006454:	2100      	movs	r1, #0
 8006456:	4618      	mov	r0, r3
 8006458:	f000 f97c 	bl	8006754 <RCCEx_PLLSAI1_Config>
 800645c:	4603      	mov	r3, r0
 800645e:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006460:	e003      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	77fb      	strb	r3, [r7, #31]
        break;
 8006466:	e000      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8006468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800646a:	7ffb      	ldrb	r3, [r7, #31]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10b      	bne.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006470:	4b37      	ldr	r3, [pc, #220]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006476:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800647e:	4934      	ldr	r1, [pc, #208]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006480:	4313      	orrs	r3, r2
 8006482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006486:	e001      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006488:	7ffb      	ldrb	r3, [r7, #31]
 800648a:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00a      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006498:	4b2d      	ldr	r3, [pc, #180]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800649a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800649e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064a6:	492a      	ldr	r1, [pc, #168]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80064ba:	4b25      	ldr	r3, [pc, #148]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80064bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064c8:	4921      	ldr	r1, [pc, #132]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00a      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064dc:	4b1c      	ldr	r3, [pc, #112]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80064de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ea:	4919      	ldr	r1, [pc, #100]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00a      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064fe:	4b14      	ldr	r3, [pc, #80]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006500:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006504:	f023 0203 	bic.w	r2, r3, #3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800650c:	4910      	ldr	r1, [pc, #64]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800650e:	4313      	orrs	r3, r2
 8006510:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d02b      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006520:	4b0b      	ldr	r3, [pc, #44]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006526:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800652e:	4908      	ldr	r1, [pc, #32]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006530:	4313      	orrs	r3, r2
 8006532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800653a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800653e:	d109      	bne.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006540:	4b03      	ldr	r3, [pc, #12]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	4a02      	ldr	r2, [pc, #8]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006546:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800654a:	60d3      	str	r3, [r2, #12]
 800654c:	e014      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800654e:	bf00      	nop
 8006550:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006558:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800655c:	d10c      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3304      	adds	r3, #4
 8006562:	2101      	movs	r1, #1
 8006564:	4618      	mov	r0, r3
 8006566:	f000 f8f5 	bl	8006754 <RCCEx_PLLSAI1_Config>
 800656a:	4603      	mov	r3, r0
 800656c:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 800656e:	7ffb      	ldrb	r3, [r7, #31]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8006574:	7ffb      	ldrb	r3, [r7, #31]
 8006576:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d04a      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006588:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800658c:	d108      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x554>
 800658e:	4b70      	ldr	r3, [pc, #448]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006590:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006594:	4a6e      	ldr	r2, [pc, #440]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006596:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800659a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800659e:	e012      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80065a0:	4b6b      	ldr	r3, [pc, #428]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80065a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065ae:	4968      	ldr	r1, [pc, #416]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80065b6:	4b66      	ldr	r3, [pc, #408]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80065b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065bc:	4a64      	ldr	r2, [pc, #400]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80065be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065c2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065ce:	d10d      	bne.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	3304      	adds	r3, #4
 80065d4:	2101      	movs	r1, #1
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 f8bc 	bl	8006754 <RCCEx_PLLSAI1_Config>
 80065dc:	4603      	mov	r3, r0
 80065de:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80065e0:	7ffb      	ldrb	r3, [r7, #31]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d019      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80065e6:	7ffb      	ldrb	r3, [r7, #31]
 80065e8:	77bb      	strb	r3, [r7, #30]
 80065ea:	e016      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065f4:	d106      	bne.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065f6:	4b56      	ldr	r3, [pc, #344]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	4a55      	ldr	r2, [pc, #340]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80065fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006600:	60d3      	str	r3, [r2, #12]
 8006602:	e00a      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006608:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800660c:	d105      	bne.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800660e:	4b50      	ldr	r3, [pc, #320]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	4a4f      	ldr	r2, [pc, #316]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006618:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d028      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006626:	4b4a      	ldr	r3, [pc, #296]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800662c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006634:	4946      	ldr	r1, [pc, #280]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006636:	4313      	orrs	r3, r2
 8006638:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006640:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006644:	d106      	bne.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006646:	4b42      	ldr	r3, [pc, #264]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	4a41      	ldr	r2, [pc, #260]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800664c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006650:	60d3      	str	r3, [r2, #12]
 8006652:	e011      	b.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006658:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800665c:	d10c      	bne.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	3304      	adds	r3, #4
 8006662:	2101      	movs	r1, #1
 8006664:	4618      	mov	r0, r3
 8006666:	f000 f875 	bl	8006754 <RCCEx_PLLSAI1_Config>
 800666a:	4603      	mov	r3, r0
 800666c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800666e:	7ffb      	ldrb	r3, [r7, #31]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8006674:	7ffb      	ldrb	r3, [r7, #31]
 8006676:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d01e      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006684:	4b32      	ldr	r3, [pc, #200]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800668a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006694:	492e      	ldr	r1, [pc, #184]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006696:	4313      	orrs	r3, r2
 8006698:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066a6:	d10c      	bne.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	3304      	adds	r3, #4
 80066ac:	2102      	movs	r1, #2
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 f850 	bl	8006754 <RCCEx_PLLSAI1_Config>
 80066b4:	4603      	mov	r3, r0
 80066b6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80066b8:	7ffb      	ldrb	r3, [r7, #31]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80066be:	7ffb      	ldrb	r3, [r7, #31]
 80066c0:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00b      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80066ce:	4b20      	ldr	r3, [pc, #128]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80066d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066d4:	f023 0204 	bic.w	r2, r3, #4
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066de:	491c      	ldr	r1, [pc, #112]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00b      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80066f2:	4b17      	ldr	r3, [pc, #92]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80066f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066f8:	f023 0218 	bic.w	r2, r3, #24
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006702:	4913      	ldr	r1, [pc, #76]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006704:	4313      	orrs	r3, r2
 8006706:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d017      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006716:	4b0e      	ldr	r3, [pc, #56]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006718:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800671c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006726:	490a      	ldr	r1, [pc, #40]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006728:	4313      	orrs	r3, r2
 800672a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006734:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006738:	d105      	bne.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800673a:	4b05      	ldr	r3, [pc, #20]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	4a04      	ldr	r2, [pc, #16]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006740:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006744:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006746:	7fbb      	ldrb	r3, [r7, #30]
}
 8006748:	4618      	mov	r0, r3
 800674a:	3720      	adds	r7, #32
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	40021000 	.word	0x40021000

08006754 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b03      	cmp	r3, #3
 8006768:	d018      	beq.n	800679c <RCCEx_PLLSAI1_Config+0x48>
 800676a:	2b03      	cmp	r3, #3
 800676c:	d81f      	bhi.n	80067ae <RCCEx_PLLSAI1_Config+0x5a>
 800676e:	2b01      	cmp	r3, #1
 8006770:	d002      	beq.n	8006778 <RCCEx_PLLSAI1_Config+0x24>
 8006772:	2b02      	cmp	r3, #2
 8006774:	d009      	beq.n	800678a <RCCEx_PLLSAI1_Config+0x36>
 8006776:	e01a      	b.n	80067ae <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006778:	4b65      	ldr	r3, [pc, #404]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1bc>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0302 	and.w	r3, r3, #2
 8006780:	2b00      	cmp	r3, #0
 8006782:	d117      	bne.n	80067b4 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006788:	e014      	b.n	80067b4 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800678a:	4b61      	ldr	r3, [pc, #388]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1bc>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006792:	2b00      	cmp	r3, #0
 8006794:	d110      	bne.n	80067b8 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800679a:	e00d      	b.n	80067b8 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800679c:	4b5c      	ldr	r3, [pc, #368]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1bc>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d109      	bne.n	80067bc <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067ac:	e006      	b.n	80067bc <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	73fb      	strb	r3, [r7, #15]
      break;
 80067b2:	e004      	b.n	80067be <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80067b4:	bf00      	nop
 80067b6:	e002      	b.n	80067be <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80067b8:	bf00      	nop
 80067ba:	e000      	b.n	80067be <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80067bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80067be:	7bfb      	ldrb	r3, [r7, #15]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f040 809f 	bne.w	8006904 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80067c6:	4b52      	ldr	r3, [pc, #328]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1bc>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a51      	ldr	r2, [pc, #324]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1bc>)
 80067cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80067d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067d2:	f7fd f89f 	bl	8003914 <HAL_GetTick>
 80067d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80067d8:	e00f      	b.n	80067fa <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067da:	f7fd f89b 	bl	8003914 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d908      	bls.n	80067fa <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80067e8:	4b49      	ldr	r3, [pc, #292]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1bc>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d009      	beq.n	8006808 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067f8:	e006      	b.n	8006808 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80067fa:	4b45      	ldr	r3, [pc, #276]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1bc>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1e9      	bne.n	80067da <RCCEx_PLLSAI1_Config+0x86>
 8006806:	e000      	b.n	800680a <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8006808:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800680a:	7bfb      	ldrb	r3, [r7, #15]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d179      	bne.n	8006904 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d116      	bne.n	8006844 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006816:	4b3e      	ldr	r3, [pc, #248]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006818:	691a      	ldr	r2, [r3, #16]
 800681a:	4b3e      	ldr	r3, [pc, #248]	@ (8006914 <RCCEx_PLLSAI1_Config+0x1c0>)
 800681c:	4013      	ands	r3, r2
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	6892      	ldr	r2, [r2, #8]
 8006822:	0211      	lsls	r1, r2, #8
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	68d2      	ldr	r2, [r2, #12]
 8006828:	06d2      	lsls	r2, r2, #27
 800682a:	4311      	orrs	r1, r2
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	6852      	ldr	r2, [r2, #4]
 8006830:	3a01      	subs	r2, #1
 8006832:	0112      	lsls	r2, r2, #4
 8006834:	4311      	orrs	r1, r2
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	6812      	ldr	r2, [r2, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	4934      	ldr	r1, [pc, #208]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1bc>)
 800683e:	4313      	orrs	r3, r2
 8006840:	610b      	str	r3, [r1, #16]
 8006842:	e033      	b.n	80068ac <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d118      	bne.n	800687c <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800684a:	4b31      	ldr	r3, [pc, #196]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1bc>)
 800684c:	691a      	ldr	r2, [r3, #16]
 800684e:	4b32      	ldr	r3, [pc, #200]	@ (8006918 <RCCEx_PLLSAI1_Config+0x1c4>)
 8006850:	4013      	ands	r3, r2
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	6892      	ldr	r2, [r2, #8]
 8006856:	0211      	lsls	r1, r2, #8
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6912      	ldr	r2, [r2, #16]
 800685c:	0852      	lsrs	r2, r2, #1
 800685e:	3a01      	subs	r2, #1
 8006860:	0552      	lsls	r2, r2, #21
 8006862:	4311      	orrs	r1, r2
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	6852      	ldr	r2, [r2, #4]
 8006868:	3a01      	subs	r2, #1
 800686a:	0112      	lsls	r2, r2, #4
 800686c:	4311      	orrs	r1, r2
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	6812      	ldr	r2, [r2, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	4926      	ldr	r1, [pc, #152]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006876:	4313      	orrs	r3, r2
 8006878:	610b      	str	r3, [r1, #16]
 800687a:	e017      	b.n	80068ac <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800687c:	4b24      	ldr	r3, [pc, #144]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1bc>)
 800687e:	691a      	ldr	r2, [r3, #16]
 8006880:	4b26      	ldr	r3, [pc, #152]	@ (800691c <RCCEx_PLLSAI1_Config+0x1c8>)
 8006882:	4013      	ands	r3, r2
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	6892      	ldr	r2, [r2, #8]
 8006888:	0211      	lsls	r1, r2, #8
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	6952      	ldr	r2, [r2, #20]
 800688e:	0852      	lsrs	r2, r2, #1
 8006890:	3a01      	subs	r2, #1
 8006892:	0652      	lsls	r2, r2, #25
 8006894:	4311      	orrs	r1, r2
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	6852      	ldr	r2, [r2, #4]
 800689a:	3a01      	subs	r2, #1
 800689c:	0112      	lsls	r2, r2, #4
 800689e:	4311      	orrs	r1, r2
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	6812      	ldr	r2, [r2, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	491a      	ldr	r1, [pc, #104]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1bc>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80068ac:	4b18      	ldr	r3, [pc, #96]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1bc>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a17      	ldr	r2, [pc, #92]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1bc>)
 80068b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80068b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b8:	f7fd f82c 	bl	8003914 <HAL_GetTick>
 80068bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80068be:	e00f      	b.n	80068e0 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068c0:	f7fd f828 	bl	8003914 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d908      	bls.n	80068e0 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80068ce:	4b10      	ldr	r3, [pc, #64]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1bc>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d109      	bne.n	80068ee <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80068de:	e006      	b.n	80068ee <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80068e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1bc>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d0e9      	beq.n	80068c0 <RCCEx_PLLSAI1_Config+0x16c>
 80068ec:	e000      	b.n	80068f0 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80068ee:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d106      	bne.n	8006904 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80068f6:	4b06      	ldr	r3, [pc, #24]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1bc>)
 80068f8:	691a      	ldr	r2, [r3, #16]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	4904      	ldr	r1, [pc, #16]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006900:	4313      	orrs	r3, r2
 8006902:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006904:	7bfb      	ldrb	r3, [r7, #15]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	40021000 	.word	0x40021000
 8006914:	07ff800c 	.word	0x07ff800c
 8006918:	ff9f800c 	.word	0xff9f800c
 800691c:	f9ff800c 	.word	0xf9ff800c

08006920 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b03      	cmp	r3, #3
 8006934:	d018      	beq.n	8006968 <RCCEx_PLLSAI2_Config+0x48>
 8006936:	2b03      	cmp	r3, #3
 8006938:	d81f      	bhi.n	800697a <RCCEx_PLLSAI2_Config+0x5a>
 800693a:	2b01      	cmp	r3, #1
 800693c:	d002      	beq.n	8006944 <RCCEx_PLLSAI2_Config+0x24>
 800693e:	2b02      	cmp	r3, #2
 8006940:	d009      	beq.n	8006956 <RCCEx_PLLSAI2_Config+0x36>
 8006942:	e01a      	b.n	800697a <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006944:	4b4a      	ldr	r3, [pc, #296]	@ (8006a70 <RCCEx_PLLSAI2_Config+0x150>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0302 	and.w	r3, r3, #2
 800694c:	2b00      	cmp	r3, #0
 800694e:	d117      	bne.n	8006980 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006954:	e014      	b.n	8006980 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006956:	4b46      	ldr	r3, [pc, #280]	@ (8006a70 <RCCEx_PLLSAI2_Config+0x150>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800695e:	2b00      	cmp	r3, #0
 8006960:	d110      	bne.n	8006984 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006966:	e00d      	b.n	8006984 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8006968:	4b41      	ldr	r3, [pc, #260]	@ (8006a70 <RCCEx_PLLSAI2_Config+0x150>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d109      	bne.n	8006988 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006978:	e006      	b.n	8006988 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	73fb      	strb	r3, [r7, #15]
      break;
 800697e:	e004      	b.n	800698a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006980:	bf00      	nop
 8006982:	e002      	b.n	800698a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006984:	bf00      	nop
 8006986:	e000      	b.n	800698a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006988:	bf00      	nop
  }

  if (status == HAL_OK)
 800698a:	7bfb      	ldrb	r3, [r7, #15]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d169      	bne.n	8006a64 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006990:	4b37      	ldr	r3, [pc, #220]	@ (8006a70 <RCCEx_PLLSAI2_Config+0x150>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a36      	ldr	r2, [pc, #216]	@ (8006a70 <RCCEx_PLLSAI2_Config+0x150>)
 8006996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800699a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800699c:	f7fc ffba 	bl	8003914 <HAL_GetTick>
 80069a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80069a2:	e00f      	b.n	80069c4 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80069a4:	f7fc ffb6 	bl	8003914 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d908      	bls.n	80069c4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80069b2:	4b2f      	ldr	r3, [pc, #188]	@ (8006a70 <RCCEx_PLLSAI2_Config+0x150>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d009      	beq.n	80069d2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80069c2:	e006      	b.n	80069d2 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80069c4:	4b2a      	ldr	r3, [pc, #168]	@ (8006a70 <RCCEx_PLLSAI2_Config+0x150>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1e9      	bne.n	80069a4 <RCCEx_PLLSAI2_Config+0x84>
 80069d0:	e000      	b.n	80069d4 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80069d2:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d144      	bne.n	8006a64 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d115      	bne.n	8006a0c <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80069e0:	4b23      	ldr	r3, [pc, #140]	@ (8006a70 <RCCEx_PLLSAI2_Config+0x150>)
 80069e2:	695a      	ldr	r2, [r3, #20]
 80069e4:	4b23      	ldr	r3, [pc, #140]	@ (8006a74 <RCCEx_PLLSAI2_Config+0x154>)
 80069e6:	4013      	ands	r3, r2
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	6892      	ldr	r2, [r2, #8]
 80069ec:	0211      	lsls	r1, r2, #8
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	68d2      	ldr	r2, [r2, #12]
 80069f2:	06d2      	lsls	r2, r2, #27
 80069f4:	4311      	orrs	r1, r2
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	6852      	ldr	r2, [r2, #4]
 80069fa:	3a01      	subs	r2, #1
 80069fc:	0112      	lsls	r2, r2, #4
 80069fe:	4311      	orrs	r1, r2
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	6812      	ldr	r2, [r2, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	491a      	ldr	r1, [pc, #104]	@ (8006a70 <RCCEx_PLLSAI2_Config+0x150>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006a0c:	4b18      	ldr	r3, [pc, #96]	@ (8006a70 <RCCEx_PLLSAI2_Config+0x150>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a17      	ldr	r2, [pc, #92]	@ (8006a70 <RCCEx_PLLSAI2_Config+0x150>)
 8006a12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a18:	f7fc ff7c 	bl	8003914 <HAL_GetTick>
 8006a1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006a1e:	e00f      	b.n	8006a40 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a20:	f7fc ff78 	bl	8003914 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d908      	bls.n	8006a40 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006a2e:	4b10      	ldr	r3, [pc, #64]	@ (8006a70 <RCCEx_PLLSAI2_Config+0x150>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d109      	bne.n	8006a4e <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8006a3e:	e006      	b.n	8006a4e <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006a40:	4b0b      	ldr	r3, [pc, #44]	@ (8006a70 <RCCEx_PLLSAI2_Config+0x150>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d0e9      	beq.n	8006a20 <RCCEx_PLLSAI2_Config+0x100>
 8006a4c:	e000      	b.n	8006a50 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8006a4e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d106      	bne.n	8006a64 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8006a56:	4b06      	ldr	r3, [pc, #24]	@ (8006a70 <RCCEx_PLLSAI2_Config+0x150>)
 8006a58:	695a      	ldr	r2, [r3, #20]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	4904      	ldr	r1, [pc, #16]	@ (8006a70 <RCCEx_PLLSAI2_Config+0x150>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	40021000 	.word	0x40021000
 8006a74:	07ff800c 	.word	0x07ff800c

08006a78 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d066      	beq.n	8006b58 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d106      	bne.n	8006aa4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7fc fa8e 	bl	8002fc0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	f003 0310 	and.w	r3, r3, #16
 8006ab6:	2b10      	cmp	r3, #16
 8006ab8:	d045      	beq.n	8006b46 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006aba:	4b2a      	ldr	r3, [pc, #168]	@ (8006b64 <HAL_RTC_Init+0xec>)
 8006abc:	22ca      	movs	r2, #202	@ 0xca
 8006abe:	625a      	str	r2, [r3, #36]	@ 0x24
 8006ac0:	4b28      	ldr	r3, [pc, #160]	@ (8006b64 <HAL_RTC_Init+0xec>)
 8006ac2:	2253      	movs	r2, #83	@ 0x53
 8006ac4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f872 	bl	8006bb0 <RTC_EnterInitMode>
 8006acc:	4603      	mov	r3, r0
 8006ace:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006ad0:	7bfb      	ldrb	r3, [r7, #15]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d121      	bne.n	8006b1a <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006ad6:	4b23      	ldr	r3, [pc, #140]	@ (8006b64 <HAL_RTC_Init+0xec>)
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	4a22      	ldr	r2, [pc, #136]	@ (8006b64 <HAL_RTC_Init+0xec>)
 8006adc:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006ae0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ae4:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8006b64 <HAL_RTC_Init+0xec>)
 8006ae8:	699a      	ldr	r2, [r3, #24]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6859      	ldr	r1, [r3, #4]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	4319      	orrs	r1, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	430b      	orrs	r3, r1
 8006afa:	491a      	ldr	r1, [pc, #104]	@ (8006b64 <HAL_RTC_Init+0xec>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68da      	ldr	r2, [r3, #12]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	041b      	lsls	r3, r3, #16
 8006b0a:	4916      	ldr	r1, [pc, #88]	@ (8006b64 <HAL_RTC_Init+0xec>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f881 	bl	8006c18 <RTC_ExitInitMode>
 8006b16:	4603      	mov	r3, r0
 8006b18:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10e      	bne.n	8006b3e <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8006b20:	4b10      	ldr	r3, [pc, #64]	@ (8006b64 <HAL_RTC_Init+0xec>)
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a19      	ldr	r1, [r3, #32]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	4319      	orrs	r1, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	430b      	orrs	r3, r1
 8006b38:	490a      	ldr	r1, [pc, #40]	@ (8006b64 <HAL_RTC_Init+0xec>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b3e:	4b09      	ldr	r3, [pc, #36]	@ (8006b64 <HAL_RTC_Init+0xec>)
 8006b40:	22ff      	movs	r2, #255	@ 0xff
 8006b42:	625a      	str	r2, [r3, #36]	@ 0x24
 8006b44:	e001      	b.n	8006b4a <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006b4a:	7bfb      	ldrb	r3, [r7, #15]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d103      	bne.n	8006b58 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	40002800 	.word	0x40002800

08006b68 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8006b70:	4b0d      	ldr	r3, [pc, #52]	@ (8006ba8 <HAL_RTC_WaitForSynchro+0x40>)
 8006b72:	4a0e      	ldr	r2, [pc, #56]	@ (8006bac <HAL_RTC_WaitForSynchro+0x44>)
 8006b74:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006b76:	f7fc fecd 	bl	8003914 <HAL_GetTick>
 8006b7a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006b7c:	e009      	b.n	8006b92 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b7e:	f7fc fec9 	bl	8003914 <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b8c:	d901      	bls.n	8006b92 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e006      	b.n	8006ba0 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006b92:	4b05      	ldr	r3, [pc, #20]	@ (8006ba8 <HAL_RTC_WaitForSynchro+0x40>)
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f003 0320 	and.w	r3, r3, #32
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d0ef      	beq.n	8006b7e <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	40002800 	.word	0x40002800
 8006bac:	0001005c 	.word	0x0001005c

08006bb0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006bbc:	4b15      	ldr	r3, [pc, #84]	@ (8006c14 <RTC_EnterInitMode+0x64>)
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d120      	bne.n	8006c0a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006bc8:	4b12      	ldr	r3, [pc, #72]	@ (8006c14 <RTC_EnterInitMode+0x64>)
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	4a11      	ldr	r2, [pc, #68]	@ (8006c14 <RTC_EnterInitMode+0x64>)
 8006bce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bd2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006bd4:	f7fc fe9e 	bl	8003914 <HAL_GetTick>
 8006bd8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006bda:	e00d      	b.n	8006bf8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006bdc:	f7fc fe9a 	bl	8003914 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006bea:	d905      	bls.n	8006bf8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2203      	movs	r2, #3
 8006bf4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006bf8:	4b06      	ldr	r3, [pc, #24]	@ (8006c14 <RTC_EnterInitMode+0x64>)
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d102      	bne.n	8006c0a <RTC_EnterInitMode+0x5a>
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	d1e8      	bne.n	8006bdc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	40002800 	.word	0x40002800

08006c18 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c20:	2300      	movs	r3, #0
 8006c22:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006c24:	4b1a      	ldr	r3, [pc, #104]	@ (8006c90 <RTC_ExitInitMode+0x78>)
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	4a19      	ldr	r2, [pc, #100]	@ (8006c90 <RTC_ExitInitMode+0x78>)
 8006c2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c2e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006c30:	4b17      	ldr	r3, [pc, #92]	@ (8006c90 <RTC_ExitInitMode+0x78>)
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	f003 0320 	and.w	r3, r3, #32
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10c      	bne.n	8006c56 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f7ff ff93 	bl	8006b68 <HAL_RTC_WaitForSynchro>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d01e      	beq.n	8006c86 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2203      	movs	r2, #3
 8006c4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	73fb      	strb	r3, [r7, #15]
 8006c54:	e017      	b.n	8006c86 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006c56:	4b0e      	ldr	r3, [pc, #56]	@ (8006c90 <RTC_ExitInitMode+0x78>)
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	4a0d      	ldr	r2, [pc, #52]	@ (8006c90 <RTC_ExitInitMode+0x78>)
 8006c5c:	f023 0320 	bic.w	r3, r3, #32
 8006c60:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f7ff ff80 	bl	8006b68 <HAL_RTC_WaitForSynchro>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d005      	beq.n	8006c7a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2203      	movs	r2, #3
 8006c72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006c7a:	4b05      	ldr	r3, [pc, #20]	@ (8006c90 <RTC_ExitInitMode+0x78>)
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	4a04      	ldr	r2, [pc, #16]	@ (8006c90 <RTC_ExitInitMode+0x78>)
 8006c80:	f043 0320 	orr.w	r3, r3, #32
 8006c84:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	40002800 	.word	0x40002800

08006c94 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	490f      	ldr	r1, [pc, #60]	@ (8006ce4 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	689a      	ldr	r2, [r3, #8]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	490c      	ldr	r1, [pc, #48]	@ (8006ce8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	624b      	str	r3, [r1, #36]	@ 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8006cba:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	6919      	ldr	r1, [r3, #16]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	041b      	lsls	r3, r3, #16
 8006ccc:	430b      	orrs	r3, r1
 8006cce:	4906      	ldr	r1, [pc, #24]	@ (8006ce8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	40002800 	.word	0x40002800
 8006ce8:	40003400 	.word	0x40003400

08006cec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e095      	b.n	8006e2a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d108      	bne.n	8006d18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d0e:	d009      	beq.n	8006d24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	61da      	str	r2, [r3, #28]
 8006d16:	e005      	b.n	8006d24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d106      	bne.n	8006d44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7fc f9ba 	bl	80030b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d64:	d902      	bls.n	8006d6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d66:	2300      	movs	r3, #0
 8006d68:	60fb      	str	r3, [r7, #12]
 8006d6a:	e002      	b.n	8006d72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006d70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006d7a:	d007      	beq.n	8006d8c <HAL_SPI_Init+0xa0>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d84:	d002      	beq.n	8006d8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	431a      	orrs	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	431a      	orrs	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	69db      	ldr	r3, [r3, #28]
 8006dc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dce:	ea42 0103 	orr.w	r1, r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	0c1b      	lsrs	r3, r3, #16
 8006de8:	f003 0204 	and.w	r2, r3, #4
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df0:	f003 0310 	and.w	r3, r3, #16
 8006df4:	431a      	orrs	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dfa:	f003 0308 	and.w	r3, r3, #8
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006e08:	ea42 0103 	orr.w	r1, r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b088      	sub	sp, #32
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	60f8      	str	r0, [r7, #12]
 8006e3a:	60b9      	str	r1, [r7, #8]
 8006e3c:	603b      	str	r3, [r7, #0]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d101      	bne.n	8006e54 <HAL_SPI_Transmit+0x22>
 8006e50:	2302      	movs	r3, #2
 8006e52:	e15f      	b.n	8007114 <HAL_SPI_Transmit+0x2e2>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e5c:	f7fc fd5a 	bl	8003914 <HAL_GetTick>
 8006e60:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006e62:	88fb      	ldrh	r3, [r7, #6]
 8006e64:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d002      	beq.n	8006e78 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006e72:	2302      	movs	r3, #2
 8006e74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e76:	e148      	b.n	800710a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d002      	beq.n	8006e84 <HAL_SPI_Transmit+0x52>
 8006e7e:	88fb      	ldrh	r3, [r7, #6]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d102      	bne.n	8006e8a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e88:	e13f      	b.n	800710a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2203      	movs	r2, #3
 8006e8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	88fa      	ldrh	r2, [r7, #6]
 8006ea2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	88fa      	ldrh	r2, [r7, #6]
 8006ea8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ed4:	d10f      	bne.n	8006ef6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ee4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ef4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f00:	2b40      	cmp	r3, #64	@ 0x40
 8006f02:	d007      	beq.n	8006f14 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006f1c:	d94f      	bls.n	8006fbe <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <HAL_SPI_Transmit+0xfa>
 8006f26:	8afb      	ldrh	r3, [r7, #22]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d142      	bne.n	8006fb2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f30:	881a      	ldrh	r2, [r3, #0]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f3c:	1c9a      	adds	r2, r3, #2
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f50:	e02f      	b.n	8006fb2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f003 0302 	and.w	r3, r3, #2
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d112      	bne.n	8006f86 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f64:	881a      	ldrh	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f70:	1c9a      	adds	r2, r3, #2
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f84:	e015      	b.n	8006fb2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f86:	f7fc fcc5 	bl	8003914 <HAL_GetTick>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d803      	bhi.n	8006f9e <HAL_SPI_Transmit+0x16c>
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9c:	d102      	bne.n	8006fa4 <HAL_SPI_Transmit+0x172>
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d106      	bne.n	8006fb2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006fb0:	e0ab      	b.n	800710a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1ca      	bne.n	8006f52 <HAL_SPI_Transmit+0x120>
 8006fbc:	e080      	b.n	80070c0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d002      	beq.n	8006fcc <HAL_SPI_Transmit+0x19a>
 8006fc6:	8afb      	ldrh	r3, [r7, #22]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d174      	bne.n	80070b6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d912      	bls.n	8006ffc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fda:	881a      	ldrh	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe6:	1c9a      	adds	r2, r3, #2
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	3b02      	subs	r3, #2
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ffa:	e05c      	b.n	80070b6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	330c      	adds	r3, #12
 8007006:	7812      	ldrb	r2, [r2, #0]
 8007008:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800700e:	1c5a      	adds	r2, r3, #1
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007018:	b29b      	uxth	r3, r3
 800701a:	3b01      	subs	r3, #1
 800701c:	b29a      	uxth	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007022:	e048      	b.n	80070b6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	2b02      	cmp	r3, #2
 8007030:	d12b      	bne.n	800708a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007036:	b29b      	uxth	r3, r3
 8007038:	2b01      	cmp	r3, #1
 800703a:	d912      	bls.n	8007062 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007040:	881a      	ldrh	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704c:	1c9a      	adds	r2, r3, #2
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007056:	b29b      	uxth	r3, r3
 8007058:	3b02      	subs	r3, #2
 800705a:	b29a      	uxth	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007060:	e029      	b.n	80070b6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	330c      	adds	r3, #12
 800706c:	7812      	ldrb	r2, [r2, #0]
 800706e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007074:	1c5a      	adds	r2, r3, #1
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800707e:	b29b      	uxth	r3, r3
 8007080:	3b01      	subs	r3, #1
 8007082:	b29a      	uxth	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007088:	e015      	b.n	80070b6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800708a:	f7fc fc43 	bl	8003914 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	429a      	cmp	r2, r3
 8007098:	d803      	bhi.n	80070a2 <HAL_SPI_Transmit+0x270>
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a0:	d102      	bne.n	80070a8 <HAL_SPI_Transmit+0x276>
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d106      	bne.n	80070b6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80070b4:	e029      	b.n	800710a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1b1      	bne.n	8007024 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070c0:	69ba      	ldr	r2, [r7, #24]
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f000 fb69 	bl	800779c <SPI_EndRxTxTransaction>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d002      	beq.n	80070d6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2220      	movs	r2, #32
 80070d4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10a      	bne.n	80070f4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070de:	2300      	movs	r3, #0
 80070e0:	613b      	str	r3, [r7, #16]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	613b      	str	r3, [r7, #16]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	613b      	str	r3, [r7, #16]
 80070f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	77fb      	strb	r3, [r7, #31]
 8007100:	e003      	b.n	800710a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007112:	7ffb      	ldrb	r3, [r7, #31]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3720      	adds	r7, #32
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b08a      	sub	sp, #40	@ 0x28
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800712a:	2301      	movs	r3, #1
 800712c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800713a:	2b01      	cmp	r3, #1
 800713c:	d101      	bne.n	8007142 <HAL_SPI_TransmitReceive+0x26>
 800713e:	2302      	movs	r3, #2
 8007140:	e20a      	b.n	8007558 <HAL_SPI_TransmitReceive+0x43c>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800714a:	f7fc fbe3 	bl	8003914 <HAL_GetTick>
 800714e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007156:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800715e:	887b      	ldrh	r3, [r7, #2]
 8007160:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007162:	887b      	ldrh	r3, [r7, #2]
 8007164:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007166:	7efb      	ldrb	r3, [r7, #27]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d00e      	beq.n	800718a <HAL_SPI_TransmitReceive+0x6e>
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007172:	d106      	bne.n	8007182 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d102      	bne.n	8007182 <HAL_SPI_TransmitReceive+0x66>
 800717c:	7efb      	ldrb	r3, [r7, #27]
 800717e:	2b04      	cmp	r3, #4
 8007180:	d003      	beq.n	800718a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007182:	2302      	movs	r3, #2
 8007184:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007188:	e1e0      	b.n	800754c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d005      	beq.n	800719c <HAL_SPI_TransmitReceive+0x80>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d002      	beq.n	800719c <HAL_SPI_TransmitReceive+0x80>
 8007196:	887b      	ldrh	r3, [r7, #2]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d103      	bne.n	80071a4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80071a2:	e1d3      	b.n	800754c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b04      	cmp	r3, #4
 80071ae:	d003      	beq.n	80071b8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2205      	movs	r2, #5
 80071b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	887a      	ldrh	r2, [r7, #2]
 80071c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	887a      	ldrh	r2, [r7, #2]
 80071d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	887a      	ldrh	r2, [r7, #2]
 80071de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	887a      	ldrh	r2, [r7, #2]
 80071e4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80071fa:	d802      	bhi.n	8007202 <HAL_SPI_TransmitReceive+0xe6>
 80071fc:	8a3b      	ldrh	r3, [r7, #16]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d908      	bls.n	8007214 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007210:	605a      	str	r2, [r3, #4]
 8007212:	e007      	b.n	8007224 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685a      	ldr	r2, [r3, #4]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007222:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800722e:	2b40      	cmp	r3, #64	@ 0x40
 8007230:	d007      	beq.n	8007242 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007240:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800724a:	f240 8081 	bls.w	8007350 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <HAL_SPI_TransmitReceive+0x140>
 8007256:	8a7b      	ldrh	r3, [r7, #18]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d16d      	bne.n	8007338 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007260:	881a      	ldrh	r2, [r3, #0]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800726c:	1c9a      	adds	r2, r3, #2
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007276:	b29b      	uxth	r3, r3
 8007278:	3b01      	subs	r3, #1
 800727a:	b29a      	uxth	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007280:	e05a      	b.n	8007338 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	f003 0302 	and.w	r3, r3, #2
 800728c:	2b02      	cmp	r3, #2
 800728e:	d11b      	bne.n	80072c8 <HAL_SPI_TransmitReceive+0x1ac>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007294:	b29b      	uxth	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d016      	beq.n	80072c8 <HAL_SPI_TransmitReceive+0x1ac>
 800729a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729c:	2b01      	cmp	r3, #1
 800729e:	d113      	bne.n	80072c8 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a4:	881a      	ldrh	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b0:	1c9a      	adds	r2, r3, #2
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	3b01      	subs	r3, #1
 80072be:	b29a      	uxth	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072c4:	2300      	movs	r3, #0
 80072c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d11c      	bne.n	8007310 <HAL_SPI_TransmitReceive+0x1f4>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072dc:	b29b      	uxth	r3, r3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d016      	beq.n	8007310 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68da      	ldr	r2, [r3, #12]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ec:	b292      	uxth	r2, r2
 80072ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f4:	1c9a      	adds	r2, r3, #2
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007300:	b29b      	uxth	r3, r3
 8007302:	3b01      	subs	r3, #1
 8007304:	b29a      	uxth	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800730c:	2301      	movs	r3, #1
 800730e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007310:	f7fc fb00 	bl	8003914 <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800731c:	429a      	cmp	r2, r3
 800731e:	d80b      	bhi.n	8007338 <HAL_SPI_TransmitReceive+0x21c>
 8007320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007326:	d007      	beq.n	8007338 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007336:	e109      	b.n	800754c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800733c:	b29b      	uxth	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d19f      	bne.n	8007282 <HAL_SPI_TransmitReceive+0x166>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007348:	b29b      	uxth	r3, r3
 800734a:	2b00      	cmp	r3, #0
 800734c:	d199      	bne.n	8007282 <HAL_SPI_TransmitReceive+0x166>
 800734e:	e0e3      	b.n	8007518 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <HAL_SPI_TransmitReceive+0x244>
 8007358:	8a7b      	ldrh	r3, [r7, #18]
 800735a:	2b01      	cmp	r3, #1
 800735c:	f040 80cf 	bne.w	80074fe <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007364:	b29b      	uxth	r3, r3
 8007366:	2b01      	cmp	r3, #1
 8007368:	d912      	bls.n	8007390 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800736e:	881a      	ldrh	r2, [r3, #0]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800737a:	1c9a      	adds	r2, r3, #2
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007384:	b29b      	uxth	r3, r3
 8007386:	3b02      	subs	r3, #2
 8007388:	b29a      	uxth	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800738e:	e0b6      	b.n	80074fe <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	330c      	adds	r3, #12
 800739a:	7812      	ldrb	r2, [r2, #0]
 800739c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a2:	1c5a      	adds	r2, r3, #1
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	3b01      	subs	r3, #1
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073b6:	e0a2      	b.n	80074fe <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f003 0302 	and.w	r3, r3, #2
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d134      	bne.n	8007430 <HAL_SPI_TransmitReceive+0x314>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d02f      	beq.n	8007430 <HAL_SPI_TransmitReceive+0x314>
 80073d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d12c      	bne.n	8007430 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073da:	b29b      	uxth	r3, r3
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d912      	bls.n	8007406 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e4:	881a      	ldrh	r2, [r3, #0]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f0:	1c9a      	adds	r2, r3, #2
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	3b02      	subs	r3, #2
 80073fe:	b29a      	uxth	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007404:	e012      	b.n	800742c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	330c      	adds	r3, #12
 8007410:	7812      	ldrb	r2, [r2, #0]
 8007412:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007418:	1c5a      	adds	r2, r3, #1
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007422:	b29b      	uxth	r3, r3
 8007424:	3b01      	subs	r3, #1
 8007426:	b29a      	uxth	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800742c:	2300      	movs	r3, #0
 800742e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b01      	cmp	r3, #1
 800743c:	d148      	bne.n	80074d0 <HAL_SPI_TransmitReceive+0x3b4>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007444:	b29b      	uxth	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d042      	beq.n	80074d0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007450:	b29b      	uxth	r3, r3
 8007452:	2b01      	cmp	r3, #1
 8007454:	d923      	bls.n	800749e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68da      	ldr	r2, [r3, #12]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007460:	b292      	uxth	r2, r2
 8007462:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007468:	1c9a      	adds	r2, r3, #2
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007474:	b29b      	uxth	r3, r3
 8007476:	3b02      	subs	r3, #2
 8007478:	b29a      	uxth	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007486:	b29b      	uxth	r3, r3
 8007488:	2b01      	cmp	r3, #1
 800748a:	d81f      	bhi.n	80074cc <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800749a:	605a      	str	r2, [r3, #4]
 800749c:	e016      	b.n	80074cc <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f103 020c 	add.w	r2, r3, #12
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074aa:	7812      	ldrb	r2, [r2, #0]
 80074ac:	b2d2      	uxtb	r2, r2
 80074ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b4:	1c5a      	adds	r2, r3, #1
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	3b01      	subs	r3, #1
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074cc:	2301      	movs	r3, #1
 80074ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80074d0:	f7fc fa20 	bl	8003914 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074dc:	429a      	cmp	r2, r3
 80074de:	d803      	bhi.n	80074e8 <HAL_SPI_TransmitReceive+0x3cc>
 80074e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e6:	d102      	bne.n	80074ee <HAL_SPI_TransmitReceive+0x3d2>
 80074e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d107      	bne.n	80074fe <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80074fc:	e026      	b.n	800754c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007502:	b29b      	uxth	r3, r3
 8007504:	2b00      	cmp	r3, #0
 8007506:	f47f af57 	bne.w	80073b8 <HAL_SPI_TransmitReceive+0x29c>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007510:	b29b      	uxth	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	f47f af50 	bne.w	80073b8 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007518:	69fa      	ldr	r2, [r7, #28]
 800751a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f000 f93d 	bl	800779c <SPI_EndRxTxTransaction>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2220      	movs	r2, #32
 8007532:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007538:	2b00      	cmp	r3, #0
 800753a:	d003      	beq.n	8007544 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007542:	e003      	b.n	800754c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007554:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007558:	4618      	mov	r0, r3
 800755a:	3728      	adds	r7, #40	@ 0x28
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b088      	sub	sp, #32
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	603b      	str	r3, [r7, #0]
 800756c:	4613      	mov	r3, r2
 800756e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007570:	f7fc f9d0 	bl	8003914 <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007578:	1a9b      	subs	r3, r3, r2
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	4413      	add	r3, r2
 800757e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007580:	f7fc f9c8 	bl	8003914 <HAL_GetTick>
 8007584:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007586:	4b39      	ldr	r3, [pc, #228]	@ (800766c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	015b      	lsls	r3, r3, #5
 800758c:	0d1b      	lsrs	r3, r3, #20
 800758e:	69fa      	ldr	r2, [r7, #28]
 8007590:	fb02 f303 	mul.w	r3, r2, r3
 8007594:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007596:	e054      	b.n	8007642 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759e:	d050      	beq.n	8007642 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80075a0:	f7fc f9b8 	bl	8003914 <HAL_GetTick>
 80075a4:	4602      	mov	r2, r0
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	69fa      	ldr	r2, [r7, #28]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d902      	bls.n	80075b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d13d      	bne.n	8007632 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80075c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075ce:	d111      	bne.n	80075f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075d8:	d004      	beq.n	80075e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075e2:	d107      	bne.n	80075f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075fc:	d10f      	bne.n	800761e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800761c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e017      	b.n	8007662 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	3b01      	subs	r3, #1
 8007640:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	689a      	ldr	r2, [r3, #8]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	4013      	ands	r3, r2
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	429a      	cmp	r2, r3
 8007650:	bf0c      	ite	eq
 8007652:	2301      	moveq	r3, #1
 8007654:	2300      	movne	r3, #0
 8007656:	b2db      	uxtb	r3, r3
 8007658:	461a      	mov	r2, r3
 800765a:	79fb      	ldrb	r3, [r7, #7]
 800765c:	429a      	cmp	r2, r3
 800765e:	d19b      	bne.n	8007598 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3720      	adds	r7, #32
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	20000008 	.word	0x20000008

08007670 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b08a      	sub	sp, #40	@ 0x28
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	607a      	str	r2, [r7, #4]
 800767c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800767e:	2300      	movs	r3, #0
 8007680:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007682:	f7fc f947 	bl	8003914 <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768a:	1a9b      	subs	r3, r3, r2
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	4413      	add	r3, r2
 8007690:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007692:	f7fc f93f 	bl	8003914 <HAL_GetTick>
 8007696:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	330c      	adds	r3, #12
 800769e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80076a0:	4b3d      	ldr	r3, [pc, #244]	@ (8007798 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	4613      	mov	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4413      	add	r3, r2
 80076aa:	00da      	lsls	r2, r3, #3
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	0d1b      	lsrs	r3, r3, #20
 80076b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076b2:	fb02 f303 	mul.w	r3, r2, r3
 80076b6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80076b8:	e060      	b.n	800777c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80076c0:	d107      	bne.n	80076d2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d104      	bne.n	80076d2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80076d0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d8:	d050      	beq.n	800777c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076da:	f7fc f91b 	bl	8003914 <HAL_GetTick>
 80076de:	4602      	mov	r2, r0
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d902      	bls.n	80076f0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d13d      	bne.n	800776c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80076fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007708:	d111      	bne.n	800772e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007712:	d004      	beq.n	800771e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800771c:	d107      	bne.n	800772e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800772c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007732:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007736:	d10f      	bne.n	8007758 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007746:	601a      	str	r2, [r3, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007756:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e010      	b.n	800778e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d101      	bne.n	8007776 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007772:	2300      	movs	r3, #0
 8007774:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	3b01      	subs	r3, #1
 800777a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689a      	ldr	r2, [r3, #8]
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	4013      	ands	r3, r2
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	429a      	cmp	r2, r3
 800778a:	d196      	bne.n	80076ba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3728      	adds	r7, #40	@ 0x28
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	20000008 	.word	0x20000008

0800779c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af02      	add	r7, sp, #8
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f7ff ff5b 	bl	8007670 <SPI_WaitFifoStateUntilTimeout>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d007      	beq.n	80077d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077c4:	f043 0220 	orr.w	r2, r3, #32
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e027      	b.n	8007820 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	9300      	str	r3, [sp, #0]
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2200      	movs	r2, #0
 80077d8:	2180      	movs	r1, #128	@ 0x80
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f7ff fec0 	bl	8007560 <SPI_WaitFlagStateUntilTimeout>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d007      	beq.n	80077f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077ea:	f043 0220 	orr.w	r2, r3, #32
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e014      	b.n	8007820 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f7ff ff34 	bl	8007670 <SPI_WaitFifoStateUntilTimeout>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d007      	beq.n	800781e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007812:	f043 0220 	orr.w	r2, r3, #32
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e000      	b.n	8007820 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d101      	bne.n	800783a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e042      	b.n	80078c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007840:	2b00      	cmp	r3, #0
 8007842:	d106      	bne.n	8007852 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7fb fee7 	bl	8003620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2224      	movs	r2, #36	@ 0x24
 8007856:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f022 0201 	bic.w	r2, r2, #1
 8007868:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800786e:	2b00      	cmp	r3, #0
 8007870:	d002      	beq.n	8007878 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fb28 	bl	8007ec8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f825 	bl	80078c8 <UART_SetConfig>
 800787e:	4603      	mov	r3, r0
 8007880:	2b01      	cmp	r3, #1
 8007882:	d101      	bne.n	8007888 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e01b      	b.n	80078c0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	685a      	ldr	r2, [r3, #4]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007896:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	689a      	ldr	r2, [r3, #8]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80078a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f042 0201 	orr.w	r2, r2, #1
 80078b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fba7 	bl	800800c <UART_CheckIdleState>
 80078be:	4603      	mov	r3, r0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078cc:	b08c      	sub	sp, #48	@ 0x30
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	431a      	orrs	r2, r3
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	431a      	orrs	r2, r3
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	69db      	ldr	r3, [r3, #28]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	4baa      	ldr	r3, [pc, #680]	@ (8007ba0 <UART_SetConfig+0x2d8>)
 80078f8:	4013      	ands	r3, r2
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	6812      	ldr	r2, [r2, #0]
 80078fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007900:	430b      	orrs	r3, r1
 8007902:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	68da      	ldr	r2, [r3, #12]
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	430a      	orrs	r2, r1
 8007918:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a9f      	ldr	r2, [pc, #636]	@ (8007ba4 <UART_SetConfig+0x2dc>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d004      	beq.n	8007934 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007930:	4313      	orrs	r3, r2
 8007932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800793e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	6812      	ldr	r2, [r2, #0]
 8007946:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007948:	430b      	orrs	r3, r1
 800794a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007952:	f023 010f 	bic.w	r1, r3, #15
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a90      	ldr	r2, [pc, #576]	@ (8007ba8 <UART_SetConfig+0x2e0>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d125      	bne.n	80079b8 <UART_SetConfig+0xf0>
 800796c:	4b8f      	ldr	r3, [pc, #572]	@ (8007bac <UART_SetConfig+0x2e4>)
 800796e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007972:	f003 0303 	and.w	r3, r3, #3
 8007976:	2b03      	cmp	r3, #3
 8007978:	d81a      	bhi.n	80079b0 <UART_SetConfig+0xe8>
 800797a:	a201      	add	r2, pc, #4	@ (adr r2, 8007980 <UART_SetConfig+0xb8>)
 800797c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007980:	08007991 	.word	0x08007991
 8007984:	080079a1 	.word	0x080079a1
 8007988:	08007999 	.word	0x08007999
 800798c:	080079a9 	.word	0x080079a9
 8007990:	2301      	movs	r3, #1
 8007992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007996:	e116      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007998:	2302      	movs	r3, #2
 800799a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800799e:	e112      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 80079a0:	2304      	movs	r3, #4
 80079a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079a6:	e10e      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 80079a8:	2308      	movs	r3, #8
 80079aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079ae:	e10a      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 80079b0:	2310      	movs	r3, #16
 80079b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079b6:	e106      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a7c      	ldr	r2, [pc, #496]	@ (8007bb0 <UART_SetConfig+0x2e8>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d138      	bne.n	8007a34 <UART_SetConfig+0x16c>
 80079c2:	4b7a      	ldr	r3, [pc, #488]	@ (8007bac <UART_SetConfig+0x2e4>)
 80079c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079c8:	f003 030c 	and.w	r3, r3, #12
 80079cc:	2b0c      	cmp	r3, #12
 80079ce:	d82d      	bhi.n	8007a2c <UART_SetConfig+0x164>
 80079d0:	a201      	add	r2, pc, #4	@ (adr r2, 80079d8 <UART_SetConfig+0x110>)
 80079d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d6:	bf00      	nop
 80079d8:	08007a0d 	.word	0x08007a0d
 80079dc:	08007a2d 	.word	0x08007a2d
 80079e0:	08007a2d 	.word	0x08007a2d
 80079e4:	08007a2d 	.word	0x08007a2d
 80079e8:	08007a1d 	.word	0x08007a1d
 80079ec:	08007a2d 	.word	0x08007a2d
 80079f0:	08007a2d 	.word	0x08007a2d
 80079f4:	08007a2d 	.word	0x08007a2d
 80079f8:	08007a15 	.word	0x08007a15
 80079fc:	08007a2d 	.word	0x08007a2d
 8007a00:	08007a2d 	.word	0x08007a2d
 8007a04:	08007a2d 	.word	0x08007a2d
 8007a08:	08007a25 	.word	0x08007a25
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a12:	e0d8      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007a14:	2302      	movs	r3, #2
 8007a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a1a:	e0d4      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007a1c:	2304      	movs	r3, #4
 8007a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a22:	e0d0      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007a24:	2308      	movs	r3, #8
 8007a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a2a:	e0cc      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007a2c:	2310      	movs	r3, #16
 8007a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a32:	e0c8      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a5e      	ldr	r2, [pc, #376]	@ (8007bb4 <UART_SetConfig+0x2ec>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d125      	bne.n	8007a8a <UART_SetConfig+0x1c2>
 8007a3e:	4b5b      	ldr	r3, [pc, #364]	@ (8007bac <UART_SetConfig+0x2e4>)
 8007a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a44:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007a48:	2b30      	cmp	r3, #48	@ 0x30
 8007a4a:	d016      	beq.n	8007a7a <UART_SetConfig+0x1b2>
 8007a4c:	2b30      	cmp	r3, #48	@ 0x30
 8007a4e:	d818      	bhi.n	8007a82 <UART_SetConfig+0x1ba>
 8007a50:	2b20      	cmp	r3, #32
 8007a52:	d00a      	beq.n	8007a6a <UART_SetConfig+0x1a2>
 8007a54:	2b20      	cmp	r3, #32
 8007a56:	d814      	bhi.n	8007a82 <UART_SetConfig+0x1ba>
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d002      	beq.n	8007a62 <UART_SetConfig+0x19a>
 8007a5c:	2b10      	cmp	r3, #16
 8007a5e:	d008      	beq.n	8007a72 <UART_SetConfig+0x1aa>
 8007a60:	e00f      	b.n	8007a82 <UART_SetConfig+0x1ba>
 8007a62:	2300      	movs	r3, #0
 8007a64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a68:	e0ad      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a70:	e0a9      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007a72:	2304      	movs	r3, #4
 8007a74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a78:	e0a5      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007a7a:	2308      	movs	r3, #8
 8007a7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a80:	e0a1      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007a82:	2310      	movs	r3, #16
 8007a84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a88:	e09d      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a4a      	ldr	r2, [pc, #296]	@ (8007bb8 <UART_SetConfig+0x2f0>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d125      	bne.n	8007ae0 <UART_SetConfig+0x218>
 8007a94:	4b45      	ldr	r3, [pc, #276]	@ (8007bac <UART_SetConfig+0x2e4>)
 8007a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007a9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007aa0:	d016      	beq.n	8007ad0 <UART_SetConfig+0x208>
 8007aa2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007aa4:	d818      	bhi.n	8007ad8 <UART_SetConfig+0x210>
 8007aa6:	2b80      	cmp	r3, #128	@ 0x80
 8007aa8:	d00a      	beq.n	8007ac0 <UART_SetConfig+0x1f8>
 8007aaa:	2b80      	cmp	r3, #128	@ 0x80
 8007aac:	d814      	bhi.n	8007ad8 <UART_SetConfig+0x210>
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d002      	beq.n	8007ab8 <UART_SetConfig+0x1f0>
 8007ab2:	2b40      	cmp	r3, #64	@ 0x40
 8007ab4:	d008      	beq.n	8007ac8 <UART_SetConfig+0x200>
 8007ab6:	e00f      	b.n	8007ad8 <UART_SetConfig+0x210>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007abe:	e082      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ac6:	e07e      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007ac8:	2304      	movs	r3, #4
 8007aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ace:	e07a      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007ad0:	2308      	movs	r3, #8
 8007ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ad6:	e076      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007ad8:	2310      	movs	r3, #16
 8007ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ade:	e072      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a35      	ldr	r2, [pc, #212]	@ (8007bbc <UART_SetConfig+0x2f4>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d12a      	bne.n	8007b40 <UART_SetConfig+0x278>
 8007aea:	4b30      	ldr	r3, [pc, #192]	@ (8007bac <UART_SetConfig+0x2e4>)
 8007aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007af0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007af4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007af8:	d01a      	beq.n	8007b30 <UART_SetConfig+0x268>
 8007afa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007afe:	d81b      	bhi.n	8007b38 <UART_SetConfig+0x270>
 8007b00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b04:	d00c      	beq.n	8007b20 <UART_SetConfig+0x258>
 8007b06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b0a:	d815      	bhi.n	8007b38 <UART_SetConfig+0x270>
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d003      	beq.n	8007b18 <UART_SetConfig+0x250>
 8007b10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b14:	d008      	beq.n	8007b28 <UART_SetConfig+0x260>
 8007b16:	e00f      	b.n	8007b38 <UART_SetConfig+0x270>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b1e:	e052      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007b20:	2302      	movs	r3, #2
 8007b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b26:	e04e      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007b28:	2304      	movs	r3, #4
 8007b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b2e:	e04a      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007b30:	2308      	movs	r3, #8
 8007b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b36:	e046      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007b38:	2310      	movs	r3, #16
 8007b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b3e:	e042      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a17      	ldr	r2, [pc, #92]	@ (8007ba4 <UART_SetConfig+0x2dc>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d13a      	bne.n	8007bc0 <UART_SetConfig+0x2f8>
 8007b4a:	4b18      	ldr	r3, [pc, #96]	@ (8007bac <UART_SetConfig+0x2e4>)
 8007b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b50:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007b54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b58:	d01a      	beq.n	8007b90 <UART_SetConfig+0x2c8>
 8007b5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b5e:	d81b      	bhi.n	8007b98 <UART_SetConfig+0x2d0>
 8007b60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b64:	d00c      	beq.n	8007b80 <UART_SetConfig+0x2b8>
 8007b66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b6a:	d815      	bhi.n	8007b98 <UART_SetConfig+0x2d0>
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d003      	beq.n	8007b78 <UART_SetConfig+0x2b0>
 8007b70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b74:	d008      	beq.n	8007b88 <UART_SetConfig+0x2c0>
 8007b76:	e00f      	b.n	8007b98 <UART_SetConfig+0x2d0>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b7e:	e022      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007b80:	2302      	movs	r3, #2
 8007b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b86:	e01e      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007b88:	2304      	movs	r3, #4
 8007b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b8e:	e01a      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007b90:	2308      	movs	r3, #8
 8007b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b96:	e016      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007b98:	2310      	movs	r3, #16
 8007b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b9e:	e012      	b.n	8007bc6 <UART_SetConfig+0x2fe>
 8007ba0:	cfff69f3 	.word	0xcfff69f3
 8007ba4:	40008000 	.word	0x40008000
 8007ba8:	40013800 	.word	0x40013800
 8007bac:	40021000 	.word	0x40021000
 8007bb0:	40004400 	.word	0x40004400
 8007bb4:	40004800 	.word	0x40004800
 8007bb8:	40004c00 	.word	0x40004c00
 8007bbc:	40005000 	.word	0x40005000
 8007bc0:	2310      	movs	r3, #16
 8007bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4ab0      	ldr	r2, [pc, #704]	@ (8007e8c <UART_SetConfig+0x5c4>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	f040 809b 	bne.w	8007d08 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bd2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007bd6:	2b08      	cmp	r3, #8
 8007bd8:	d827      	bhi.n	8007c2a <UART_SetConfig+0x362>
 8007bda:	a201      	add	r2, pc, #4	@ (adr r2, 8007be0 <UART_SetConfig+0x318>)
 8007bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be0:	08007c05 	.word	0x08007c05
 8007be4:	08007c0d 	.word	0x08007c0d
 8007be8:	08007c15 	.word	0x08007c15
 8007bec:	08007c2b 	.word	0x08007c2b
 8007bf0:	08007c1b 	.word	0x08007c1b
 8007bf4:	08007c2b 	.word	0x08007c2b
 8007bf8:	08007c2b 	.word	0x08007c2b
 8007bfc:	08007c2b 	.word	0x08007c2b
 8007c00:	08007c23 	.word	0x08007c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c04:	f7fe f928 	bl	8005e58 <HAL_RCC_GetPCLK1Freq>
 8007c08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c0a:	e014      	b.n	8007c36 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c0c:	f7fe f938 	bl	8005e80 <HAL_RCC_GetPCLK2Freq>
 8007c10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c12:	e010      	b.n	8007c36 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c14:	4b9e      	ldr	r3, [pc, #632]	@ (8007e90 <UART_SetConfig+0x5c8>)
 8007c16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c18:	e00d      	b.n	8007c36 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c1a:	f7fe f86b 	bl	8005cf4 <HAL_RCC_GetSysClockFreq>
 8007c1e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c20:	e009      	b.n	8007c36 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c28:	e005      	b.n	8007c36 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007c34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 8130 	beq.w	8007e9e <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c42:	4a94      	ldr	r2, [pc, #592]	@ (8007e94 <UART_SetConfig+0x5cc>)
 8007c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c48:	461a      	mov	r2, r3
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c50:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	4613      	mov	r3, r2
 8007c58:	005b      	lsls	r3, r3, #1
 8007c5a:	4413      	add	r3, r2
 8007c5c:	69ba      	ldr	r2, [r7, #24]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d305      	bcc.n	8007c6e <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c68:	69ba      	ldr	r2, [r7, #24]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d903      	bls.n	8007c76 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007c74:	e113      	b.n	8007e9e <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c78:	2200      	movs	r2, #0
 8007c7a:	60bb      	str	r3, [r7, #8]
 8007c7c:	60fa      	str	r2, [r7, #12]
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c82:	4a84      	ldr	r2, [pc, #528]	@ (8007e94 <UART_SetConfig+0x5cc>)
 8007c84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	603b      	str	r3, [r7, #0]
 8007c8e:	607a      	str	r2, [r7, #4]
 8007c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c98:	f7f8 ffba 	bl	8000c10 <__aeabi_uldivmod>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	f04f 0200 	mov.w	r2, #0
 8007ca8:	f04f 0300 	mov.w	r3, #0
 8007cac:	020b      	lsls	r3, r1, #8
 8007cae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007cb2:	0202      	lsls	r2, r0, #8
 8007cb4:	6979      	ldr	r1, [r7, #20]
 8007cb6:	6849      	ldr	r1, [r1, #4]
 8007cb8:	0849      	lsrs	r1, r1, #1
 8007cba:	2000      	movs	r0, #0
 8007cbc:	460c      	mov	r4, r1
 8007cbe:	4605      	mov	r5, r0
 8007cc0:	eb12 0804 	adds.w	r8, r2, r4
 8007cc4:	eb43 0905 	adc.w	r9, r3, r5
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	469a      	mov	sl, r3
 8007cd0:	4693      	mov	fp, r2
 8007cd2:	4652      	mov	r2, sl
 8007cd4:	465b      	mov	r3, fp
 8007cd6:	4640      	mov	r0, r8
 8007cd8:	4649      	mov	r1, r9
 8007cda:	f7f8 ff99 	bl	8000c10 <__aeabi_uldivmod>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007cec:	d308      	bcc.n	8007d00 <UART_SetConfig+0x438>
 8007cee:	6a3b      	ldr	r3, [r7, #32]
 8007cf0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cf4:	d204      	bcs.n	8007d00 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	6a3a      	ldr	r2, [r7, #32]
 8007cfc:	60da      	str	r2, [r3, #12]
 8007cfe:	e0ce      	b.n	8007e9e <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007d06:	e0ca      	b.n	8007e9e <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d10:	d166      	bne.n	8007de0 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8007d12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d16:	2b08      	cmp	r3, #8
 8007d18:	d827      	bhi.n	8007d6a <UART_SetConfig+0x4a2>
 8007d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d20 <UART_SetConfig+0x458>)
 8007d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d20:	08007d45 	.word	0x08007d45
 8007d24:	08007d4d 	.word	0x08007d4d
 8007d28:	08007d55 	.word	0x08007d55
 8007d2c:	08007d6b 	.word	0x08007d6b
 8007d30:	08007d5b 	.word	0x08007d5b
 8007d34:	08007d6b 	.word	0x08007d6b
 8007d38:	08007d6b 	.word	0x08007d6b
 8007d3c:	08007d6b 	.word	0x08007d6b
 8007d40:	08007d63 	.word	0x08007d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d44:	f7fe f888 	bl	8005e58 <HAL_RCC_GetPCLK1Freq>
 8007d48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d4a:	e014      	b.n	8007d76 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d4c:	f7fe f898 	bl	8005e80 <HAL_RCC_GetPCLK2Freq>
 8007d50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d52:	e010      	b.n	8007d76 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d54:	4b4e      	ldr	r3, [pc, #312]	@ (8007e90 <UART_SetConfig+0x5c8>)
 8007d56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d58:	e00d      	b.n	8007d76 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d5a:	f7fd ffcb 	bl	8005cf4 <HAL_RCC_GetSysClockFreq>
 8007d5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d60:	e009      	b.n	8007d76 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d68:	e005      	b.n	8007d76 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007d74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f000 8090 	beq.w	8007e9e <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d82:	4a44      	ldr	r2, [pc, #272]	@ (8007e94 <UART_SetConfig+0x5cc>)
 8007d84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d88:	461a      	mov	r2, r3
 8007d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d90:	005a      	lsls	r2, r3, #1
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	085b      	lsrs	r3, r3, #1
 8007d98:	441a      	add	r2, r3
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	2b0f      	cmp	r3, #15
 8007da8:	d916      	bls.n	8007dd8 <UART_SetConfig+0x510>
 8007daa:	6a3b      	ldr	r3, [r7, #32]
 8007dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007db0:	d212      	bcs.n	8007dd8 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007db2:	6a3b      	ldr	r3, [r7, #32]
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	f023 030f 	bic.w	r3, r3, #15
 8007dba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007dbc:	6a3b      	ldr	r3, [r7, #32]
 8007dbe:	085b      	lsrs	r3, r3, #1
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	f003 0307 	and.w	r3, r3, #7
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	8bfb      	ldrh	r3, [r7, #30]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	8bfa      	ldrh	r2, [r7, #30]
 8007dd4:	60da      	str	r2, [r3, #12]
 8007dd6:	e062      	b.n	8007e9e <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007dde:	e05e      	b.n	8007e9e <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007de0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007de4:	2b08      	cmp	r3, #8
 8007de6:	d828      	bhi.n	8007e3a <UART_SetConfig+0x572>
 8007de8:	a201      	add	r2, pc, #4	@ (adr r2, 8007df0 <UART_SetConfig+0x528>)
 8007dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dee:	bf00      	nop
 8007df0:	08007e15 	.word	0x08007e15
 8007df4:	08007e1d 	.word	0x08007e1d
 8007df8:	08007e25 	.word	0x08007e25
 8007dfc:	08007e3b 	.word	0x08007e3b
 8007e00:	08007e2b 	.word	0x08007e2b
 8007e04:	08007e3b 	.word	0x08007e3b
 8007e08:	08007e3b 	.word	0x08007e3b
 8007e0c:	08007e3b 	.word	0x08007e3b
 8007e10:	08007e33 	.word	0x08007e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e14:	f7fe f820 	bl	8005e58 <HAL_RCC_GetPCLK1Freq>
 8007e18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e1a:	e014      	b.n	8007e46 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e1c:	f7fe f830 	bl	8005e80 <HAL_RCC_GetPCLK2Freq>
 8007e20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e22:	e010      	b.n	8007e46 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e24:	4b1a      	ldr	r3, [pc, #104]	@ (8007e90 <UART_SetConfig+0x5c8>)
 8007e26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e28:	e00d      	b.n	8007e46 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e2a:	f7fd ff63 	bl	8005cf4 <HAL_RCC_GetSysClockFreq>
 8007e2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e30:	e009      	b.n	8007e46 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e38:	e005      	b.n	8007e46 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007e44:	bf00      	nop
    }

    if (pclk != 0U)
 8007e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d028      	beq.n	8007e9e <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e50:	4a10      	ldr	r2, [pc, #64]	@ (8007e94 <UART_SetConfig+0x5cc>)
 8007e52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e56:	461a      	mov	r2, r3
 8007e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	085b      	lsrs	r3, r3, #1
 8007e64:	441a      	add	r2, r3
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	2b0f      	cmp	r3, #15
 8007e74:	d910      	bls.n	8007e98 <UART_SetConfig+0x5d0>
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e7c:	d20c      	bcs.n	8007e98 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e7e:	6a3b      	ldr	r3, [r7, #32]
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	60da      	str	r2, [r3, #12]
 8007e88:	e009      	b.n	8007e9e <UART_SetConfig+0x5d6>
 8007e8a:	bf00      	nop
 8007e8c:	40008000 	.word	0x40008000
 8007e90:	00f42400 	.word	0x00f42400
 8007e94:	0800e25c 	.word	0x0800e25c
      }
      else
      {
        ret = HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007eba:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3730      	adds	r7, #48	@ 0x30
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007ec8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed4:	f003 0308 	and.w	r3, r3, #8
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00a      	beq.n	8007ef2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00a      	beq.n	8007f14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	430a      	orrs	r2, r1
 8007f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f18:	f003 0302 	and.w	r3, r3, #2
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00a      	beq.n	8007f36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	430a      	orrs	r2, r1
 8007f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f3a:	f003 0304 	and.w	r3, r3, #4
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00a      	beq.n	8007f58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	430a      	orrs	r2, r1
 8007f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f5c:	f003 0310 	and.w	r3, r3, #16
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00a      	beq.n	8007f7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	430a      	orrs	r2, r1
 8007f78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f7e:	f003 0320 	and.w	r3, r3, #32
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00a      	beq.n	8007f9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	430a      	orrs	r2, r1
 8007f9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d01a      	beq.n	8007fde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fc6:	d10a      	bne.n	8007fde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00a      	beq.n	8008000 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	430a      	orrs	r2, r1
 8007ffe:	605a      	str	r2, [r3, #4]
  }
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b098      	sub	sp, #96	@ 0x60
 8008010:	af02      	add	r7, sp, #8
 8008012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800801c:	f7fb fc7a 	bl	8003914 <HAL_GetTick>
 8008020:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0308 	and.w	r3, r3, #8
 800802c:	2b08      	cmp	r3, #8
 800802e:	d12f      	bne.n	8008090 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008030:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008038:	2200      	movs	r2, #0
 800803a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f88e 	bl	8008160 <UART_WaitOnFlagUntilTimeout>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d022      	beq.n	8008090 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008052:	e853 3f00 	ldrex	r3, [r3]
 8008056:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800805a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800805e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	461a      	mov	r2, r3
 8008066:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008068:	647b      	str	r3, [r7, #68]	@ 0x44
 800806a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800806e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008070:	e841 2300 	strex	r3, r2, [r1]
 8008074:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1e6      	bne.n	800804a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2220      	movs	r2, #32
 8008080:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800808c:	2303      	movs	r3, #3
 800808e:	e063      	b.n	8008158 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 0304 	and.w	r3, r3, #4
 800809a:	2b04      	cmp	r3, #4
 800809c:	d149      	bne.n	8008132 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800809e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080a2:	9300      	str	r3, [sp, #0]
 80080a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080a6:	2200      	movs	r2, #0
 80080a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f857 	bl	8008160 <UART_WaitOnFlagUntilTimeout>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d03c      	beq.n	8008132 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c0:	e853 3f00 	ldrex	r3, [r3]
 80080c4:	623b      	str	r3, [r7, #32]
   return(result);
 80080c6:	6a3b      	ldr	r3, [r7, #32]
 80080c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80080d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080de:	e841 2300 	strex	r3, r2, [r1]
 80080e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1e6      	bne.n	80080b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	3308      	adds	r3, #8
 80080f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	e853 3f00 	ldrex	r3, [r3]
 80080f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f023 0301 	bic.w	r3, r3, #1
 8008100:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	3308      	adds	r3, #8
 8008108:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800810a:	61fa      	str	r2, [r7, #28]
 800810c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810e:	69b9      	ldr	r1, [r7, #24]
 8008110:	69fa      	ldr	r2, [r7, #28]
 8008112:	e841 2300 	strex	r3, r2, [r1]
 8008116:	617b      	str	r3, [r7, #20]
   return(result);
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1e5      	bne.n	80080ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2220      	movs	r2, #32
 8008122:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e012      	b.n	8008158 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2220      	movs	r2, #32
 8008136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2220      	movs	r2, #32
 800813e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3758      	adds	r7, #88	@ 0x58
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	603b      	str	r3, [r7, #0]
 800816c:	4613      	mov	r3, r2
 800816e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008170:	e04f      	b.n	8008212 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008178:	d04b      	beq.n	8008212 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800817a:	f7fb fbcb 	bl	8003914 <HAL_GetTick>
 800817e:	4602      	mov	r2, r0
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	69ba      	ldr	r2, [r7, #24]
 8008186:	429a      	cmp	r2, r3
 8008188:	d302      	bcc.n	8008190 <UART_WaitOnFlagUntilTimeout+0x30>
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d101      	bne.n	8008194 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	e04e      	b.n	8008232 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0304 	and.w	r3, r3, #4
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d037      	beq.n	8008212 <UART_WaitOnFlagUntilTimeout+0xb2>
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2b80      	cmp	r3, #128	@ 0x80
 80081a6:	d034      	beq.n	8008212 <UART_WaitOnFlagUntilTimeout+0xb2>
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2b40      	cmp	r3, #64	@ 0x40
 80081ac:	d031      	beq.n	8008212 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	f003 0308 	and.w	r3, r3, #8
 80081b8:	2b08      	cmp	r3, #8
 80081ba:	d110      	bne.n	80081de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2208      	movs	r2, #8
 80081c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f000 f838 	bl	800823a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2208      	movs	r2, #8
 80081ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e029      	b.n	8008232 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	69db      	ldr	r3, [r3, #28]
 80081e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081ec:	d111      	bne.n	8008212 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f000 f81e 	bl	800823a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2220      	movs	r2, #32
 8008202:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e00f      	b.n	8008232 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	69da      	ldr	r2, [r3, #28]
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	4013      	ands	r3, r2
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	429a      	cmp	r2, r3
 8008220:	bf0c      	ite	eq
 8008222:	2301      	moveq	r3, #1
 8008224:	2300      	movne	r3, #0
 8008226:	b2db      	uxtb	r3, r3
 8008228:	461a      	mov	r2, r3
 800822a:	79fb      	ldrb	r3, [r7, #7]
 800822c:	429a      	cmp	r2, r3
 800822e:	d0a0      	beq.n	8008172 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800823a:	b480      	push	{r7}
 800823c:	b095      	sub	sp, #84	@ 0x54
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800824a:	e853 3f00 	ldrex	r3, [r3]
 800824e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008252:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008256:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	461a      	mov	r2, r3
 800825e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008260:	643b      	str	r3, [r7, #64]	@ 0x40
 8008262:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008264:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008266:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008268:	e841 2300 	strex	r3, r2, [r1]
 800826c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800826e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1e6      	bne.n	8008242 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3308      	adds	r3, #8
 800827a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827c:	6a3b      	ldr	r3, [r7, #32]
 800827e:	e853 3f00 	ldrex	r3, [r3]
 8008282:	61fb      	str	r3, [r7, #28]
   return(result);
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800828a:	f023 0301 	bic.w	r3, r3, #1
 800828e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3308      	adds	r3, #8
 8008296:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008298:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800829a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800829e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082a0:	e841 2300 	strex	r3, r2, [r1]
 80082a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1e3      	bne.n	8008274 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d118      	bne.n	80082e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	e853 3f00 	ldrex	r3, [r3]
 80082c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	f023 0310 	bic.w	r3, r3, #16
 80082c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	461a      	mov	r2, r3
 80082d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082d2:	61bb      	str	r3, [r7, #24]
 80082d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d6:	6979      	ldr	r1, [r7, #20]
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	e841 2300 	strex	r3, r2, [r1]
 80082de:	613b      	str	r3, [r7, #16]
   return(result);
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1e6      	bne.n	80082b4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2220      	movs	r2, #32
 80082ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80082fa:	bf00      	nop
 80082fc:	3754      	adds	r7, #84	@ 0x54
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr

08008306 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008306:	b480      	push	{r7}
 8008308:	b085      	sub	sp, #20
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008314:	2b01      	cmp	r3, #1
 8008316:	d101      	bne.n	800831c <HAL_UARTEx_DisableFifoMode+0x16>
 8008318:	2302      	movs	r3, #2
 800831a:	e027      	b.n	800836c <HAL_UARTEx_DisableFifoMode+0x66>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2224      	movs	r2, #36	@ 0x24
 8008328:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f022 0201 	bic.w	r2, r2, #1
 8008342:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800834a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2220      	movs	r2, #32
 800835e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008388:	2b01      	cmp	r3, #1
 800838a:	d101      	bne.n	8008390 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800838c:	2302      	movs	r3, #2
 800838e:	e02d      	b.n	80083ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2224      	movs	r2, #36	@ 0x24
 800839c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f022 0201 	bic.w	r2, r2, #1
 80083b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	430a      	orrs	r2, r1
 80083ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f84f 	bl	8008470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2220      	movs	r2, #32
 80083de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008404:	2b01      	cmp	r3, #1
 8008406:	d101      	bne.n	800840c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008408:	2302      	movs	r3, #2
 800840a:	e02d      	b.n	8008468 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2224      	movs	r2, #36	@ 0x24
 8008418:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f022 0201 	bic.w	r2, r2, #1
 8008432:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	430a      	orrs	r2, r1
 8008446:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f811 	bl	8008470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2220      	movs	r2, #32
 800845a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800847c:	2b00      	cmp	r3, #0
 800847e:	d108      	bne.n	8008492 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008490:	e031      	b.n	80084f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008492:	2308      	movs	r3, #8
 8008494:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008496:	2308      	movs	r3, #8
 8008498:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	0e5b      	lsrs	r3, r3, #25
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	f003 0307 	and.w	r3, r3, #7
 80084a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	0f5b      	lsrs	r3, r3, #29
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	f003 0307 	and.w	r3, r3, #7
 80084b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084ba:	7bbb      	ldrb	r3, [r7, #14]
 80084bc:	7b3a      	ldrb	r2, [r7, #12]
 80084be:	4911      	ldr	r1, [pc, #68]	@ (8008504 <UARTEx_SetNbDataToProcess+0x94>)
 80084c0:	5c8a      	ldrb	r2, [r1, r2]
 80084c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80084c6:	7b3a      	ldrb	r2, [r7, #12]
 80084c8:	490f      	ldr	r1, [pc, #60]	@ (8008508 <UARTEx_SetNbDataToProcess+0x98>)
 80084ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
 80084da:	7b7a      	ldrb	r2, [r7, #13]
 80084dc:	4909      	ldr	r1, [pc, #36]	@ (8008504 <UARTEx_SetNbDataToProcess+0x94>)
 80084de:	5c8a      	ldrb	r2, [r1, r2]
 80084e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80084e4:	7b7a      	ldrb	r2, [r7, #13]
 80084e6:	4908      	ldr	r1, [pc, #32]	@ (8008508 <UARTEx_SetNbDataToProcess+0x98>)
 80084e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80084f6:	bf00      	nop
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	0800e274 	.word	0x0800e274
 8008508:	0800e27c 	.word	0x0800e27c

0800850c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800850c:	b480      	push	{r7}
 800850e:	b08b      	sub	sp, #44	@ 0x2c
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	fa93 f3a3 	rbit	r3, r3
 8008526:	613b      	str	r3, [r7, #16]
  return result;
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8008532:	2320      	movs	r3, #32
 8008534:	e003      	b.n	800853e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	fab3 f383 	clz	r3, r3
 800853c:	b2db      	uxtb	r3, r3
 800853e:	005b      	lsls	r3, r3, #1
 8008540:	2103      	movs	r1, #3
 8008542:	fa01 f303 	lsl.w	r3, r1, r3
 8008546:	43db      	mvns	r3, r3
 8008548:	401a      	ands	r2, r3
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800854e:	6a3b      	ldr	r3, [r7, #32]
 8008550:	fa93 f3a3 	rbit	r3, r3
 8008554:	61fb      	str	r3, [r7, #28]
  return result;
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800855a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855c:	2b00      	cmp	r3, #0
 800855e:	d101      	bne.n	8008564 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8008560:	2320      	movs	r3, #32
 8008562:	e003      	b.n	800856c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8008564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008566:	fab3 f383 	clz	r3, r3
 800856a:	b2db      	uxtb	r3, r3
 800856c:	005b      	lsls	r3, r3, #1
 800856e:	6879      	ldr	r1, [r7, #4]
 8008570:	fa01 f303 	lsl.w	r3, r1, r3
 8008574:	431a      	orrs	r2, r3
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	601a      	str	r2, [r3, #0]
}
 800857a:	bf00      	nop
 800857c:	372c      	adds	r7, #44	@ 0x2c
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr

08008586 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8008586:	b480      	push	{r7}
 8008588:	b085      	sub	sp, #20
 800858a:	af00      	add	r7, sp, #0
 800858c:	60f8      	str	r0, [r7, #12]
 800858e:	60b9      	str	r1, [r7, #8]
 8008590:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	685a      	ldr	r2, [r3, #4]
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	43db      	mvns	r3, r3
 800859a:	401a      	ands	r2, r3
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	6879      	ldr	r1, [r7, #4]
 80085a0:	fb01 f303 	mul.w	r3, r1, r3
 80085a4:	431a      	orrs	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	605a      	str	r2, [r3, #4]
}
 80085aa:	bf00      	nop
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b08b      	sub	sp, #44	@ 0x2c
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	60f8      	str	r0, [r7, #12]
 80085be:	60b9      	str	r1, [r7, #8]
 80085c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	689a      	ldr	r2, [r3, #8]
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	fa93 f3a3 	rbit	r3, r3
 80085d0:	613b      	str	r3, [r7, #16]
  return result;
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d101      	bne.n	80085e0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80085dc:	2320      	movs	r3, #32
 80085de:	e003      	b.n	80085e8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	fab3 f383 	clz	r3, r3
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	005b      	lsls	r3, r3, #1
 80085ea:	2103      	movs	r1, #3
 80085ec:	fa01 f303 	lsl.w	r3, r1, r3
 80085f0:	43db      	mvns	r3, r3
 80085f2:	401a      	ands	r2, r3
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085f8:	6a3b      	ldr	r3, [r7, #32]
 80085fa:	fa93 f3a3 	rbit	r3, r3
 80085fe:	61fb      	str	r3, [r7, #28]
  return result;
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008606:	2b00      	cmp	r3, #0
 8008608:	d101      	bne.n	800860e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800860a:	2320      	movs	r3, #32
 800860c:	e003      	b.n	8008616 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800860e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008610:	fab3 f383 	clz	r3, r3
 8008614:	b2db      	uxtb	r3, r3
 8008616:	005b      	lsls	r3, r3, #1
 8008618:	6879      	ldr	r1, [r7, #4]
 800861a:	fa01 f303 	lsl.w	r3, r1, r3
 800861e:	431a      	orrs	r2, r3
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8008624:	bf00      	nop
 8008626:	372c      	adds	r7, #44	@ 0x2c
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8008630:	b480      	push	{r7}
 8008632:	b08b      	sub	sp, #44	@ 0x2c
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	68da      	ldr	r2, [r3, #12]
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	fa93 f3a3 	rbit	r3, r3
 800864a:	613b      	str	r3, [r7, #16]
  return result;
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d101      	bne.n	800865a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8008656:	2320      	movs	r3, #32
 8008658:	e003      	b.n	8008662 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	fab3 f383 	clz	r3, r3
 8008660:	b2db      	uxtb	r3, r3
 8008662:	005b      	lsls	r3, r3, #1
 8008664:	2103      	movs	r1, #3
 8008666:	fa01 f303 	lsl.w	r3, r1, r3
 800866a:	43db      	mvns	r3, r3
 800866c:	401a      	ands	r2, r3
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008672:	6a3b      	ldr	r3, [r7, #32]
 8008674:	fa93 f3a3 	rbit	r3, r3
 8008678:	61fb      	str	r3, [r7, #28]
  return result;
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800867e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008680:	2b00      	cmp	r3, #0
 8008682:	d101      	bne.n	8008688 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8008684:	2320      	movs	r3, #32
 8008686:	e003      	b.n	8008690 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8008688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868a:	fab3 f383 	clz	r3, r3
 800868e:	b2db      	uxtb	r3, r3
 8008690:	005b      	lsls	r3, r3, #1
 8008692:	6879      	ldr	r1, [r7, #4]
 8008694:	fa01 f303 	lsl.w	r3, r1, r3
 8008698:	431a      	orrs	r2, r3
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	60da      	str	r2, [r3, #12]
}
 800869e:	bf00      	nop
 80086a0:	372c      	adds	r7, #44	@ 0x2c
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr

080086aa <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b08b      	sub	sp, #44	@ 0x2c
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	60f8      	str	r0, [r7, #12]
 80086b2:	60b9      	str	r1, [r7, #8]
 80086b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6a1a      	ldr	r2, [r3, #32]
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	fa93 f3a3 	rbit	r3, r3
 80086c4:	613b      	str	r3, [r7, #16]
  return result;
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80086d0:	2320      	movs	r3, #32
 80086d2:	e003      	b.n	80086dc <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	fab3 f383 	clz	r3, r3
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	210f      	movs	r1, #15
 80086e0:	fa01 f303 	lsl.w	r3, r1, r3
 80086e4:	43db      	mvns	r3, r3
 80086e6:	401a      	ands	r2, r3
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086ec:	6a3b      	ldr	r3, [r7, #32]
 80086ee:	fa93 f3a3 	rbit	r3, r3
 80086f2:	61fb      	str	r3, [r7, #28]
  return result;
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80086f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d101      	bne.n	8008702 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80086fe:	2320      	movs	r3, #32
 8008700:	e003      	b.n	800870a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8008702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008704:	fab3 f383 	clz	r3, r3
 8008708:	b2db      	uxtb	r3, r3
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	6879      	ldr	r1, [r7, #4]
 800870e:	fa01 f303 	lsl.w	r3, r1, r3
 8008712:	431a      	orrs	r2, r3
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8008718:	bf00      	nop
 800871a:	372c      	adds	r7, #44	@ 0x2c
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008724:	b480      	push	{r7}
 8008726:	b08b      	sub	sp, #44	@ 0x2c
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	0a1b      	lsrs	r3, r3, #8
 8008738:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	fa93 f3a3 	rbit	r3, r3
 8008740:	613b      	str	r3, [r7, #16]
  return result;
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d101      	bne.n	8008750 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800874c:	2320      	movs	r3, #32
 800874e:	e003      	b.n	8008758 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	fab3 f383 	clz	r3, r3
 8008756:	b2db      	uxtb	r3, r3
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	210f      	movs	r1, #15
 800875c:	fa01 f303 	lsl.w	r3, r1, r3
 8008760:	43db      	mvns	r3, r3
 8008762:	401a      	ands	r2, r3
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	0a1b      	lsrs	r3, r3, #8
 8008768:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800876a:	6a3b      	ldr	r3, [r7, #32]
 800876c:	fa93 f3a3 	rbit	r3, r3
 8008770:	61fb      	str	r3, [r7, #28]
  return result;
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008778:	2b00      	cmp	r3, #0
 800877a:	d101      	bne.n	8008780 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800877c:	2320      	movs	r3, #32
 800877e:	e003      	b.n	8008788 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8008780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008782:	fab3 f383 	clz	r3, r3
 8008786:	b2db      	uxtb	r3, r3
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	6879      	ldr	r1, [r7, #4]
 800878c:	fa01 f303 	lsl.w	r3, r1, r3
 8008790:	431a      	orrs	r2, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8008796:	bf00      	nop
 8008798:	372c      	adds	r7, #44	@ 0x2c
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr

080087a2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b088      	sub	sp, #32
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
 80087aa:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	fa93 f3a3 	rbit	r3, r3
 80087b8:	60fb      	str	r3, [r7, #12]
  return result;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <LL_GPIO_Init+0x26>
    return 32U;
 80087c4:	2320      	movs	r3, #32
 80087c6:	e003      	b.n	80087d0 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	fab3 f383 	clz	r3, r3
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80087d2:	e047      	b.n	8008864 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	2101      	movs	r1, #1
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	fa01 f303 	lsl.w	r3, r1, r3
 80087e0:	4013      	ands	r3, r2
 80087e2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d039      	beq.n	800885e <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d003      	beq.n	80087fa <LL_GPIO_Init+0x58>
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d10d      	bne.n	8008816 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	461a      	mov	r2, r3
 8008800:	69b9      	ldr	r1, [r7, #24]
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7ff fed7 	bl	80085b6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	461a      	mov	r2, r3
 800880e:	69b9      	ldr	r1, [r7, #24]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7ff feb8 	bl	8008586 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	461a      	mov	r2, r3
 800881c:	69b9      	ldr	r1, [r7, #24]
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f7ff ff06 	bl	8008630 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	2b02      	cmp	r3, #2
 800882a:	d111      	bne.n	8008850 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	2bff      	cmp	r3, #255	@ 0xff
 8008830:	d807      	bhi.n	8008842 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	461a      	mov	r2, r3
 8008838:	69b9      	ldr	r1, [r7, #24]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7ff ff35 	bl	80086aa <LL_GPIO_SetAFPin_0_7>
 8008840:	e006      	b.n	8008850 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	461a      	mov	r2, r3
 8008848:	69b9      	ldr	r1, [r7, #24]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7ff ff6a 	bl	8008724 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	461a      	mov	r2, r3
 8008856:	69b9      	ldr	r1, [r7, #24]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f7ff fe57 	bl	800850c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	3301      	adds	r3, #1
 8008862:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	fa22 f303 	lsr.w	r3, r2, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1b0      	bne.n	80087d4 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3720      	adds	r7, #32
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008884:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008888:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008890:	b29a      	uxth	r2, r3
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	b29b      	uxth	r3, r3
 8008896:	43db      	mvns	r3, r3
 8008898:	b29b      	uxth	r3, r3
 800889a:	4013      	ands	r3, r2
 800889c:	b29a      	uxth	r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80088b2:	b480      	push	{r7}
 80088b4:	b085      	sub	sp, #20
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	60f8      	str	r0, [r7, #12]
 80088ba:	1d3b      	adds	r3, r7, #4
 80088bc:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3714      	adds	r7, #20
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr

080088ee <abs>:
 80088ee:	2800      	cmp	r0, #0
 80088f0:	bfb8      	it	lt
 80088f2:	4240      	neglt	r0, r0
 80088f4:	4770      	bx	lr

080088f6 <__cvt>:
 80088f6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088fa:	ec57 6b10 	vmov	r6, r7, d0
 80088fe:	2f00      	cmp	r7, #0
 8008900:	460c      	mov	r4, r1
 8008902:	4619      	mov	r1, r3
 8008904:	463b      	mov	r3, r7
 8008906:	bfb4      	ite	lt
 8008908:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800890c:	2300      	movge	r3, #0
 800890e:	4691      	mov	r9, r2
 8008910:	bfbf      	itttt	lt
 8008912:	4632      	movlt	r2, r6
 8008914:	461f      	movlt	r7, r3
 8008916:	232d      	movlt	r3, #45	@ 0x2d
 8008918:	4616      	movlt	r6, r2
 800891a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800891e:	700b      	strb	r3, [r1, #0]
 8008920:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008922:	f023 0820 	bic.w	r8, r3, #32
 8008926:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800892a:	d005      	beq.n	8008938 <__cvt+0x42>
 800892c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008930:	d100      	bne.n	8008934 <__cvt+0x3e>
 8008932:	3401      	adds	r4, #1
 8008934:	2102      	movs	r1, #2
 8008936:	e000      	b.n	800893a <__cvt+0x44>
 8008938:	2103      	movs	r1, #3
 800893a:	ab03      	add	r3, sp, #12
 800893c:	4622      	mov	r2, r4
 800893e:	9301      	str	r3, [sp, #4]
 8008940:	ab02      	add	r3, sp, #8
 8008942:	ec47 6b10 	vmov	d0, r6, r7
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	4653      	mov	r3, sl
 800894a:	f000 fe61 	bl	8009610 <_dtoa_r>
 800894e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008952:	4605      	mov	r5, r0
 8008954:	d119      	bne.n	800898a <__cvt+0x94>
 8008956:	f019 0f01 	tst.w	r9, #1
 800895a:	d00e      	beq.n	800897a <__cvt+0x84>
 800895c:	eb00 0904 	add.w	r9, r0, r4
 8008960:	2200      	movs	r2, #0
 8008962:	2300      	movs	r3, #0
 8008964:	4630      	mov	r0, r6
 8008966:	4639      	mov	r1, r7
 8008968:	f7f8 f892 	bl	8000a90 <__aeabi_dcmpeq>
 800896c:	b108      	cbz	r0, 8008972 <__cvt+0x7c>
 800896e:	f8cd 900c 	str.w	r9, [sp, #12]
 8008972:	2230      	movs	r2, #48	@ 0x30
 8008974:	9b03      	ldr	r3, [sp, #12]
 8008976:	454b      	cmp	r3, r9
 8008978:	d31e      	bcc.n	80089b8 <__cvt+0xc2>
 800897a:	9b03      	ldr	r3, [sp, #12]
 800897c:	4628      	mov	r0, r5
 800897e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008980:	1b5b      	subs	r3, r3, r5
 8008982:	6013      	str	r3, [r2, #0]
 8008984:	b004      	add	sp, #16
 8008986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800898a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800898e:	eb00 0904 	add.w	r9, r0, r4
 8008992:	d1e5      	bne.n	8008960 <__cvt+0x6a>
 8008994:	7803      	ldrb	r3, [r0, #0]
 8008996:	2b30      	cmp	r3, #48	@ 0x30
 8008998:	d10a      	bne.n	80089b0 <__cvt+0xba>
 800899a:	2200      	movs	r2, #0
 800899c:	2300      	movs	r3, #0
 800899e:	4630      	mov	r0, r6
 80089a0:	4639      	mov	r1, r7
 80089a2:	f7f8 f875 	bl	8000a90 <__aeabi_dcmpeq>
 80089a6:	b918      	cbnz	r0, 80089b0 <__cvt+0xba>
 80089a8:	f1c4 0401 	rsb	r4, r4, #1
 80089ac:	f8ca 4000 	str.w	r4, [sl]
 80089b0:	f8da 3000 	ldr.w	r3, [sl]
 80089b4:	4499      	add	r9, r3
 80089b6:	e7d3      	b.n	8008960 <__cvt+0x6a>
 80089b8:	1c59      	adds	r1, r3, #1
 80089ba:	9103      	str	r1, [sp, #12]
 80089bc:	701a      	strb	r2, [r3, #0]
 80089be:	e7d9      	b.n	8008974 <__cvt+0x7e>

080089c0 <__exponent>:
 80089c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089c2:	2900      	cmp	r1, #0
 80089c4:	7002      	strb	r2, [r0, #0]
 80089c6:	bfba      	itte	lt
 80089c8:	4249      	neglt	r1, r1
 80089ca:	232d      	movlt	r3, #45	@ 0x2d
 80089cc:	232b      	movge	r3, #43	@ 0x2b
 80089ce:	2909      	cmp	r1, #9
 80089d0:	7043      	strb	r3, [r0, #1]
 80089d2:	dd28      	ble.n	8008a26 <__exponent+0x66>
 80089d4:	f10d 0307 	add.w	r3, sp, #7
 80089d8:	270a      	movs	r7, #10
 80089da:	461d      	mov	r5, r3
 80089dc:	461a      	mov	r2, r3
 80089de:	3b01      	subs	r3, #1
 80089e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80089e4:	fb07 1416 	mls	r4, r7, r6, r1
 80089e8:	3430      	adds	r4, #48	@ 0x30
 80089ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 80089ee:	460c      	mov	r4, r1
 80089f0:	4631      	mov	r1, r6
 80089f2:	2c63      	cmp	r4, #99	@ 0x63
 80089f4:	dcf2      	bgt.n	80089dc <__exponent+0x1c>
 80089f6:	3130      	adds	r1, #48	@ 0x30
 80089f8:	1e94      	subs	r4, r2, #2
 80089fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80089fe:	1c41      	adds	r1, r0, #1
 8008a00:	4623      	mov	r3, r4
 8008a02:	42ab      	cmp	r3, r5
 8008a04:	d30a      	bcc.n	8008a1c <__exponent+0x5c>
 8008a06:	f10d 0309 	add.w	r3, sp, #9
 8008a0a:	1a9b      	subs	r3, r3, r2
 8008a0c:	42ac      	cmp	r4, r5
 8008a0e:	bf88      	it	hi
 8008a10:	2300      	movhi	r3, #0
 8008a12:	3302      	adds	r3, #2
 8008a14:	4403      	add	r3, r0
 8008a16:	1a18      	subs	r0, r3, r0
 8008a18:	b003      	add	sp, #12
 8008a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a1c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008a20:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008a24:	e7ed      	b.n	8008a02 <__exponent+0x42>
 8008a26:	2330      	movs	r3, #48	@ 0x30
 8008a28:	3130      	adds	r1, #48	@ 0x30
 8008a2a:	7083      	strb	r3, [r0, #2]
 8008a2c:	1d03      	adds	r3, r0, #4
 8008a2e:	70c1      	strb	r1, [r0, #3]
 8008a30:	e7f1      	b.n	8008a16 <__exponent+0x56>
	...

08008a34 <_printf_float>:
 8008a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a38:	b08d      	sub	sp, #52	@ 0x34
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	4616      	mov	r6, r2
 8008a3e:	461f      	mov	r7, r3
 8008a40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008a44:	4605      	mov	r5, r0
 8008a46:	f000 fcd1 	bl	80093ec <_localeconv_r>
 8008a4a:	6803      	ldr	r3, [r0, #0]
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	9304      	str	r3, [sp, #16]
 8008a50:	f7f7 fbf2 	bl	8000238 <strlen>
 8008a54:	2300      	movs	r3, #0
 8008a56:	9005      	str	r0, [sp, #20]
 8008a58:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8008a5e:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008a62:	3307      	adds	r3, #7
 8008a64:	f8d4 b000 	ldr.w	fp, [r4]
 8008a68:	f023 0307 	bic.w	r3, r3, #7
 8008a6c:	f103 0208 	add.w	r2, r3, #8
 8008a70:	f8c8 2000 	str.w	r2, [r8]
 8008a74:	f04f 32ff 	mov.w	r2, #4294967295
 8008a78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008a80:	f8cd 8018 	str.w	r8, [sp, #24]
 8008a84:	9307      	str	r3, [sp, #28]
 8008a86:	4b9d      	ldr	r3, [pc, #628]	@ (8008cfc <_printf_float+0x2c8>)
 8008a88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a8c:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008a90:	f7f8 f830 	bl	8000af4 <__aeabi_dcmpun>
 8008a94:	bb70      	cbnz	r0, 8008af4 <_printf_float+0xc0>
 8008a96:	f04f 32ff 	mov.w	r2, #4294967295
 8008a9a:	4b98      	ldr	r3, [pc, #608]	@ (8008cfc <_printf_float+0x2c8>)
 8008a9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008aa0:	f7f8 f80a 	bl	8000ab8 <__aeabi_dcmple>
 8008aa4:	bb30      	cbnz	r0, 8008af4 <_printf_float+0xc0>
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	4640      	mov	r0, r8
 8008aac:	4649      	mov	r1, r9
 8008aae:	f7f7 fff9 	bl	8000aa4 <__aeabi_dcmplt>
 8008ab2:	b110      	cbz	r0, 8008aba <_printf_float+0x86>
 8008ab4:	232d      	movs	r3, #45	@ 0x2d
 8008ab6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008aba:	4a91      	ldr	r2, [pc, #580]	@ (8008d00 <_printf_float+0x2cc>)
 8008abc:	4b91      	ldr	r3, [pc, #580]	@ (8008d04 <_printf_float+0x2d0>)
 8008abe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008ac2:	bf94      	ite	ls
 8008ac4:	4690      	movls	r8, r2
 8008ac6:	4698      	movhi	r8, r3
 8008ac8:	2303      	movs	r3, #3
 8008aca:	f04f 0900 	mov.w	r9, #0
 8008ace:	6123      	str	r3, [r4, #16]
 8008ad0:	f02b 0304 	bic.w	r3, fp, #4
 8008ad4:	6023      	str	r3, [r4, #0]
 8008ad6:	4633      	mov	r3, r6
 8008ad8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008ada:	4621      	mov	r1, r4
 8008adc:	4628      	mov	r0, r5
 8008ade:	9700      	str	r7, [sp, #0]
 8008ae0:	f000 f9d2 	bl	8008e88 <_printf_common>
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	f040 808d 	bne.w	8008c04 <_printf_float+0x1d0>
 8008aea:	f04f 30ff 	mov.w	r0, #4294967295
 8008aee:	b00d      	add	sp, #52	@ 0x34
 8008af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af4:	4642      	mov	r2, r8
 8008af6:	464b      	mov	r3, r9
 8008af8:	4640      	mov	r0, r8
 8008afa:	4649      	mov	r1, r9
 8008afc:	f7f7 fffa 	bl	8000af4 <__aeabi_dcmpun>
 8008b00:	b140      	cbz	r0, 8008b14 <_printf_float+0xe0>
 8008b02:	464b      	mov	r3, r9
 8008b04:	4a80      	ldr	r2, [pc, #512]	@ (8008d08 <_printf_float+0x2d4>)
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	bfbc      	itt	lt
 8008b0a:	232d      	movlt	r3, #45	@ 0x2d
 8008b0c:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008b10:	4b7e      	ldr	r3, [pc, #504]	@ (8008d0c <_printf_float+0x2d8>)
 8008b12:	e7d4      	b.n	8008abe <_printf_float+0x8a>
 8008b14:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008b18:	6863      	ldr	r3, [r4, #4]
 8008b1a:	9206      	str	r2, [sp, #24]
 8008b1c:	1c5a      	adds	r2, r3, #1
 8008b1e:	d13b      	bne.n	8008b98 <_printf_float+0x164>
 8008b20:	2306      	movs	r3, #6
 8008b22:	6063      	str	r3, [r4, #4]
 8008b24:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008b28:	2300      	movs	r3, #0
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	6022      	str	r2, [r4, #0]
 8008b2e:	9303      	str	r3, [sp, #12]
 8008b30:	ab0a      	add	r3, sp, #40	@ 0x28
 8008b32:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008b36:	ab09      	add	r3, sp, #36	@ 0x24
 8008b38:	ec49 8b10 	vmov	d0, r8, r9
 8008b3c:	9300      	str	r3, [sp, #0]
 8008b3e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008b42:	6861      	ldr	r1, [r4, #4]
 8008b44:	f7ff fed7 	bl	80088f6 <__cvt>
 8008b48:	9b06      	ldr	r3, [sp, #24]
 8008b4a:	4680      	mov	r8, r0
 8008b4c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008b4e:	2b47      	cmp	r3, #71	@ 0x47
 8008b50:	d129      	bne.n	8008ba6 <_printf_float+0x172>
 8008b52:	1cc8      	adds	r0, r1, #3
 8008b54:	db02      	blt.n	8008b5c <_printf_float+0x128>
 8008b56:	6863      	ldr	r3, [r4, #4]
 8008b58:	4299      	cmp	r1, r3
 8008b5a:	dd41      	ble.n	8008be0 <_printf_float+0x1ac>
 8008b5c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008b60:	fa5f fa8a 	uxtb.w	sl, sl
 8008b64:	3901      	subs	r1, #1
 8008b66:	4652      	mov	r2, sl
 8008b68:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008b6c:	9109      	str	r1, [sp, #36]	@ 0x24
 8008b6e:	f7ff ff27 	bl	80089c0 <__exponent>
 8008b72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008b74:	4681      	mov	r9, r0
 8008b76:	1813      	adds	r3, r2, r0
 8008b78:	2a01      	cmp	r2, #1
 8008b7a:	6123      	str	r3, [r4, #16]
 8008b7c:	dc02      	bgt.n	8008b84 <_printf_float+0x150>
 8008b7e:	6822      	ldr	r2, [r4, #0]
 8008b80:	07d2      	lsls	r2, r2, #31
 8008b82:	d501      	bpl.n	8008b88 <_printf_float+0x154>
 8008b84:	3301      	adds	r3, #1
 8008b86:	6123      	str	r3, [r4, #16]
 8008b88:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d0a2      	beq.n	8008ad6 <_printf_float+0xa2>
 8008b90:	232d      	movs	r3, #45	@ 0x2d
 8008b92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b96:	e79e      	b.n	8008ad6 <_printf_float+0xa2>
 8008b98:	9a06      	ldr	r2, [sp, #24]
 8008b9a:	2a47      	cmp	r2, #71	@ 0x47
 8008b9c:	d1c2      	bne.n	8008b24 <_printf_float+0xf0>
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1c0      	bne.n	8008b24 <_printf_float+0xf0>
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e7bd      	b.n	8008b22 <_printf_float+0xee>
 8008ba6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008baa:	d9db      	bls.n	8008b64 <_printf_float+0x130>
 8008bac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008bb0:	d118      	bne.n	8008be4 <_printf_float+0x1b0>
 8008bb2:	2900      	cmp	r1, #0
 8008bb4:	6863      	ldr	r3, [r4, #4]
 8008bb6:	dd0b      	ble.n	8008bd0 <_printf_float+0x19c>
 8008bb8:	6121      	str	r1, [r4, #16]
 8008bba:	b913      	cbnz	r3, 8008bc2 <_printf_float+0x18e>
 8008bbc:	6822      	ldr	r2, [r4, #0]
 8008bbe:	07d0      	lsls	r0, r2, #31
 8008bc0:	d502      	bpl.n	8008bc8 <_printf_float+0x194>
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	440b      	add	r3, r1
 8008bc6:	6123      	str	r3, [r4, #16]
 8008bc8:	f04f 0900 	mov.w	r9, #0
 8008bcc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008bce:	e7db      	b.n	8008b88 <_printf_float+0x154>
 8008bd0:	b913      	cbnz	r3, 8008bd8 <_printf_float+0x1a4>
 8008bd2:	6822      	ldr	r2, [r4, #0]
 8008bd4:	07d2      	lsls	r2, r2, #31
 8008bd6:	d501      	bpl.n	8008bdc <_printf_float+0x1a8>
 8008bd8:	3302      	adds	r3, #2
 8008bda:	e7f4      	b.n	8008bc6 <_printf_float+0x192>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e7f2      	b.n	8008bc6 <_printf_float+0x192>
 8008be0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008be4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008be6:	4299      	cmp	r1, r3
 8008be8:	db05      	blt.n	8008bf6 <_printf_float+0x1c2>
 8008bea:	6823      	ldr	r3, [r4, #0]
 8008bec:	6121      	str	r1, [r4, #16]
 8008bee:	07d8      	lsls	r0, r3, #31
 8008bf0:	d5ea      	bpl.n	8008bc8 <_printf_float+0x194>
 8008bf2:	1c4b      	adds	r3, r1, #1
 8008bf4:	e7e7      	b.n	8008bc6 <_printf_float+0x192>
 8008bf6:	2900      	cmp	r1, #0
 8008bf8:	bfd4      	ite	le
 8008bfa:	f1c1 0202 	rsble	r2, r1, #2
 8008bfe:	2201      	movgt	r2, #1
 8008c00:	4413      	add	r3, r2
 8008c02:	e7e0      	b.n	8008bc6 <_printf_float+0x192>
 8008c04:	6823      	ldr	r3, [r4, #0]
 8008c06:	055a      	lsls	r2, r3, #21
 8008c08:	d407      	bmi.n	8008c1a <_printf_float+0x1e6>
 8008c0a:	6923      	ldr	r3, [r4, #16]
 8008c0c:	4642      	mov	r2, r8
 8008c0e:	4631      	mov	r1, r6
 8008c10:	4628      	mov	r0, r5
 8008c12:	47b8      	blx	r7
 8008c14:	3001      	adds	r0, #1
 8008c16:	d12b      	bne.n	8008c70 <_printf_float+0x23c>
 8008c18:	e767      	b.n	8008aea <_printf_float+0xb6>
 8008c1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008c1e:	f240 80dd 	bls.w	8008ddc <_printf_float+0x3a8>
 8008c22:	2200      	movs	r2, #0
 8008c24:	2300      	movs	r3, #0
 8008c26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008c2a:	f7f7 ff31 	bl	8000a90 <__aeabi_dcmpeq>
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	d033      	beq.n	8008c9a <_printf_float+0x266>
 8008c32:	2301      	movs	r3, #1
 8008c34:	4a36      	ldr	r2, [pc, #216]	@ (8008d10 <_printf_float+0x2dc>)
 8008c36:	4631      	mov	r1, r6
 8008c38:	4628      	mov	r0, r5
 8008c3a:	47b8      	blx	r7
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	f43f af54 	beq.w	8008aea <_printf_float+0xb6>
 8008c42:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008c46:	4543      	cmp	r3, r8
 8008c48:	db02      	blt.n	8008c50 <_printf_float+0x21c>
 8008c4a:	6823      	ldr	r3, [r4, #0]
 8008c4c:	07d8      	lsls	r0, r3, #31
 8008c4e:	d50f      	bpl.n	8008c70 <_printf_float+0x23c>
 8008c50:	4631      	mov	r1, r6
 8008c52:	4628      	mov	r0, r5
 8008c54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c58:	47b8      	blx	r7
 8008c5a:	3001      	adds	r0, #1
 8008c5c:	f43f af45 	beq.w	8008aea <_printf_float+0xb6>
 8008c60:	f04f 0900 	mov.w	r9, #0
 8008c64:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c68:	f104 0a1a 	add.w	sl, r4, #26
 8008c6c:	45c8      	cmp	r8, r9
 8008c6e:	dc09      	bgt.n	8008c84 <_printf_float+0x250>
 8008c70:	6823      	ldr	r3, [r4, #0]
 8008c72:	079b      	lsls	r3, r3, #30
 8008c74:	f100 8103 	bmi.w	8008e7e <_printf_float+0x44a>
 8008c78:	68e0      	ldr	r0, [r4, #12]
 8008c7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c7c:	4298      	cmp	r0, r3
 8008c7e:	bfb8      	it	lt
 8008c80:	4618      	movlt	r0, r3
 8008c82:	e734      	b.n	8008aee <_printf_float+0xba>
 8008c84:	2301      	movs	r3, #1
 8008c86:	4652      	mov	r2, sl
 8008c88:	4631      	mov	r1, r6
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	47b8      	blx	r7
 8008c8e:	3001      	adds	r0, #1
 8008c90:	f43f af2b 	beq.w	8008aea <_printf_float+0xb6>
 8008c94:	f109 0901 	add.w	r9, r9, #1
 8008c98:	e7e8      	b.n	8008c6c <_printf_float+0x238>
 8008c9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	dc39      	bgt.n	8008d14 <_printf_float+0x2e0>
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	4a1b      	ldr	r2, [pc, #108]	@ (8008d10 <_printf_float+0x2dc>)
 8008ca4:	4631      	mov	r1, r6
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	47b8      	blx	r7
 8008caa:	3001      	adds	r0, #1
 8008cac:	f43f af1d 	beq.w	8008aea <_printf_float+0xb6>
 8008cb0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008cb4:	ea59 0303 	orrs.w	r3, r9, r3
 8008cb8:	d102      	bne.n	8008cc0 <_printf_float+0x28c>
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	07d9      	lsls	r1, r3, #31
 8008cbe:	d5d7      	bpl.n	8008c70 <_printf_float+0x23c>
 8008cc0:	4631      	mov	r1, r6
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cc8:	47b8      	blx	r7
 8008cca:	3001      	adds	r0, #1
 8008ccc:	f43f af0d 	beq.w	8008aea <_printf_float+0xb6>
 8008cd0:	f04f 0a00 	mov.w	sl, #0
 8008cd4:	f104 0b1a 	add.w	fp, r4, #26
 8008cd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cda:	425b      	negs	r3, r3
 8008cdc:	4553      	cmp	r3, sl
 8008cde:	dc01      	bgt.n	8008ce4 <_printf_float+0x2b0>
 8008ce0:	464b      	mov	r3, r9
 8008ce2:	e793      	b.n	8008c0c <_printf_float+0x1d8>
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	465a      	mov	r2, fp
 8008ce8:	4631      	mov	r1, r6
 8008cea:	4628      	mov	r0, r5
 8008cec:	47b8      	blx	r7
 8008cee:	3001      	adds	r0, #1
 8008cf0:	f43f aefb 	beq.w	8008aea <_printf_float+0xb6>
 8008cf4:	f10a 0a01 	add.w	sl, sl, #1
 8008cf8:	e7ee      	b.n	8008cd8 <_printf_float+0x2a4>
 8008cfa:	bf00      	nop
 8008cfc:	7fefffff 	.word	0x7fefffff
 8008d00:	0800e284 	.word	0x0800e284
 8008d04:	0800e288 	.word	0x0800e288
 8008d08:	0800e28c 	.word	0x0800e28c
 8008d0c:	0800e290 	.word	0x0800e290
 8008d10:	0800e294 	.word	0x0800e294
 8008d14:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008d16:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008d1a:	4553      	cmp	r3, sl
 8008d1c:	bfa8      	it	ge
 8008d1e:	4653      	movge	r3, sl
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	4699      	mov	r9, r3
 8008d24:	dc36      	bgt.n	8008d94 <_printf_float+0x360>
 8008d26:	f04f 0b00 	mov.w	fp, #0
 8008d2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d2e:	f104 021a 	add.w	r2, r4, #26
 8008d32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008d34:	9306      	str	r3, [sp, #24]
 8008d36:	eba3 0309 	sub.w	r3, r3, r9
 8008d3a:	455b      	cmp	r3, fp
 8008d3c:	dc31      	bgt.n	8008da2 <_printf_float+0x36e>
 8008d3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d40:	459a      	cmp	sl, r3
 8008d42:	dc3a      	bgt.n	8008dba <_printf_float+0x386>
 8008d44:	6823      	ldr	r3, [r4, #0]
 8008d46:	07da      	lsls	r2, r3, #31
 8008d48:	d437      	bmi.n	8008dba <_printf_float+0x386>
 8008d4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d4c:	ebaa 0903 	sub.w	r9, sl, r3
 8008d50:	9b06      	ldr	r3, [sp, #24]
 8008d52:	ebaa 0303 	sub.w	r3, sl, r3
 8008d56:	4599      	cmp	r9, r3
 8008d58:	bfa8      	it	ge
 8008d5a:	4699      	movge	r9, r3
 8008d5c:	f1b9 0f00 	cmp.w	r9, #0
 8008d60:	dc33      	bgt.n	8008dca <_printf_float+0x396>
 8008d62:	f04f 0800 	mov.w	r8, #0
 8008d66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d6a:	f104 0b1a 	add.w	fp, r4, #26
 8008d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d70:	ebaa 0303 	sub.w	r3, sl, r3
 8008d74:	eba3 0309 	sub.w	r3, r3, r9
 8008d78:	4543      	cmp	r3, r8
 8008d7a:	f77f af79 	ble.w	8008c70 <_printf_float+0x23c>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	465a      	mov	r2, fp
 8008d82:	4631      	mov	r1, r6
 8008d84:	4628      	mov	r0, r5
 8008d86:	47b8      	blx	r7
 8008d88:	3001      	adds	r0, #1
 8008d8a:	f43f aeae 	beq.w	8008aea <_printf_float+0xb6>
 8008d8e:	f108 0801 	add.w	r8, r8, #1
 8008d92:	e7ec      	b.n	8008d6e <_printf_float+0x33a>
 8008d94:	4642      	mov	r2, r8
 8008d96:	4631      	mov	r1, r6
 8008d98:	4628      	mov	r0, r5
 8008d9a:	47b8      	blx	r7
 8008d9c:	3001      	adds	r0, #1
 8008d9e:	d1c2      	bne.n	8008d26 <_printf_float+0x2f2>
 8008da0:	e6a3      	b.n	8008aea <_printf_float+0xb6>
 8008da2:	2301      	movs	r3, #1
 8008da4:	4631      	mov	r1, r6
 8008da6:	4628      	mov	r0, r5
 8008da8:	9206      	str	r2, [sp, #24]
 8008daa:	47b8      	blx	r7
 8008dac:	3001      	adds	r0, #1
 8008dae:	f43f ae9c 	beq.w	8008aea <_printf_float+0xb6>
 8008db2:	f10b 0b01 	add.w	fp, fp, #1
 8008db6:	9a06      	ldr	r2, [sp, #24]
 8008db8:	e7bb      	b.n	8008d32 <_printf_float+0x2fe>
 8008dba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dbe:	4631      	mov	r1, r6
 8008dc0:	4628      	mov	r0, r5
 8008dc2:	47b8      	blx	r7
 8008dc4:	3001      	adds	r0, #1
 8008dc6:	d1c0      	bne.n	8008d4a <_printf_float+0x316>
 8008dc8:	e68f      	b.n	8008aea <_printf_float+0xb6>
 8008dca:	9a06      	ldr	r2, [sp, #24]
 8008dcc:	464b      	mov	r3, r9
 8008dce:	4631      	mov	r1, r6
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	4442      	add	r2, r8
 8008dd4:	47b8      	blx	r7
 8008dd6:	3001      	adds	r0, #1
 8008dd8:	d1c3      	bne.n	8008d62 <_printf_float+0x32e>
 8008dda:	e686      	b.n	8008aea <_printf_float+0xb6>
 8008ddc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008de0:	f1ba 0f01 	cmp.w	sl, #1
 8008de4:	dc01      	bgt.n	8008dea <_printf_float+0x3b6>
 8008de6:	07db      	lsls	r3, r3, #31
 8008de8:	d536      	bpl.n	8008e58 <_printf_float+0x424>
 8008dea:	2301      	movs	r3, #1
 8008dec:	4642      	mov	r2, r8
 8008dee:	4631      	mov	r1, r6
 8008df0:	4628      	mov	r0, r5
 8008df2:	47b8      	blx	r7
 8008df4:	3001      	adds	r0, #1
 8008df6:	f43f ae78 	beq.w	8008aea <_printf_float+0xb6>
 8008dfa:	4631      	mov	r1, r6
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e02:	47b8      	blx	r7
 8008e04:	3001      	adds	r0, #1
 8008e06:	f43f ae70 	beq.w	8008aea <_printf_float+0xb6>
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008e16:	f7f7 fe3b 	bl	8000a90 <__aeabi_dcmpeq>
 8008e1a:	b9c0      	cbnz	r0, 8008e4e <_printf_float+0x41a>
 8008e1c:	4653      	mov	r3, sl
 8008e1e:	f108 0201 	add.w	r2, r8, #1
 8008e22:	4631      	mov	r1, r6
 8008e24:	4628      	mov	r0, r5
 8008e26:	47b8      	blx	r7
 8008e28:	3001      	adds	r0, #1
 8008e2a:	d10c      	bne.n	8008e46 <_printf_float+0x412>
 8008e2c:	e65d      	b.n	8008aea <_printf_float+0xb6>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	465a      	mov	r2, fp
 8008e32:	4631      	mov	r1, r6
 8008e34:	4628      	mov	r0, r5
 8008e36:	47b8      	blx	r7
 8008e38:	3001      	adds	r0, #1
 8008e3a:	f43f ae56 	beq.w	8008aea <_printf_float+0xb6>
 8008e3e:	f108 0801 	add.w	r8, r8, #1
 8008e42:	45d0      	cmp	r8, sl
 8008e44:	dbf3      	blt.n	8008e2e <_printf_float+0x3fa>
 8008e46:	464b      	mov	r3, r9
 8008e48:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008e4c:	e6df      	b.n	8008c0e <_printf_float+0x1da>
 8008e4e:	f04f 0800 	mov.w	r8, #0
 8008e52:	f104 0b1a 	add.w	fp, r4, #26
 8008e56:	e7f4      	b.n	8008e42 <_printf_float+0x40e>
 8008e58:	2301      	movs	r3, #1
 8008e5a:	4642      	mov	r2, r8
 8008e5c:	e7e1      	b.n	8008e22 <_printf_float+0x3ee>
 8008e5e:	2301      	movs	r3, #1
 8008e60:	464a      	mov	r2, r9
 8008e62:	4631      	mov	r1, r6
 8008e64:	4628      	mov	r0, r5
 8008e66:	47b8      	blx	r7
 8008e68:	3001      	adds	r0, #1
 8008e6a:	f43f ae3e 	beq.w	8008aea <_printf_float+0xb6>
 8008e6e:	f108 0801 	add.w	r8, r8, #1
 8008e72:	68e3      	ldr	r3, [r4, #12]
 8008e74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e76:	1a5b      	subs	r3, r3, r1
 8008e78:	4543      	cmp	r3, r8
 8008e7a:	dcf0      	bgt.n	8008e5e <_printf_float+0x42a>
 8008e7c:	e6fc      	b.n	8008c78 <_printf_float+0x244>
 8008e7e:	f04f 0800 	mov.w	r8, #0
 8008e82:	f104 0919 	add.w	r9, r4, #25
 8008e86:	e7f4      	b.n	8008e72 <_printf_float+0x43e>

08008e88 <_printf_common>:
 8008e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e8c:	4616      	mov	r6, r2
 8008e8e:	4698      	mov	r8, r3
 8008e90:	688a      	ldr	r2, [r1, #8]
 8008e92:	4607      	mov	r7, r0
 8008e94:	690b      	ldr	r3, [r1, #16]
 8008e96:	460c      	mov	r4, r1
 8008e98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	bfb8      	it	lt
 8008ea0:	4613      	movlt	r3, r2
 8008ea2:	6033      	str	r3, [r6, #0]
 8008ea4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ea8:	b10a      	cbz	r2, 8008eae <_printf_common+0x26>
 8008eaa:	3301      	adds	r3, #1
 8008eac:	6033      	str	r3, [r6, #0]
 8008eae:	6823      	ldr	r3, [r4, #0]
 8008eb0:	0699      	lsls	r1, r3, #26
 8008eb2:	bf42      	ittt	mi
 8008eb4:	6833      	ldrmi	r3, [r6, #0]
 8008eb6:	3302      	addmi	r3, #2
 8008eb8:	6033      	strmi	r3, [r6, #0]
 8008eba:	6825      	ldr	r5, [r4, #0]
 8008ebc:	f015 0506 	ands.w	r5, r5, #6
 8008ec0:	d106      	bne.n	8008ed0 <_printf_common+0x48>
 8008ec2:	f104 0a19 	add.w	sl, r4, #25
 8008ec6:	68e3      	ldr	r3, [r4, #12]
 8008ec8:	6832      	ldr	r2, [r6, #0]
 8008eca:	1a9b      	subs	r3, r3, r2
 8008ecc:	42ab      	cmp	r3, r5
 8008ece:	dc2b      	bgt.n	8008f28 <_printf_common+0xa0>
 8008ed0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ed4:	6822      	ldr	r2, [r4, #0]
 8008ed6:	3b00      	subs	r3, #0
 8008ed8:	bf18      	it	ne
 8008eda:	2301      	movne	r3, #1
 8008edc:	0692      	lsls	r2, r2, #26
 8008ede:	d430      	bmi.n	8008f42 <_printf_common+0xba>
 8008ee0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ee4:	4641      	mov	r1, r8
 8008ee6:	4638      	mov	r0, r7
 8008ee8:	47c8      	blx	r9
 8008eea:	3001      	adds	r0, #1
 8008eec:	d023      	beq.n	8008f36 <_printf_common+0xae>
 8008eee:	6823      	ldr	r3, [r4, #0]
 8008ef0:	341a      	adds	r4, #26
 8008ef2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8008ef6:	f003 0306 	and.w	r3, r3, #6
 8008efa:	2b04      	cmp	r3, #4
 8008efc:	bf0a      	itet	eq
 8008efe:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8008f02:	2500      	movne	r5, #0
 8008f04:	6833      	ldreq	r3, [r6, #0]
 8008f06:	f04f 0600 	mov.w	r6, #0
 8008f0a:	bf08      	it	eq
 8008f0c:	1aed      	subeq	r5, r5, r3
 8008f0e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008f12:	bf08      	it	eq
 8008f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	bfc4      	itt	gt
 8008f1c:	1a9b      	subgt	r3, r3, r2
 8008f1e:	18ed      	addgt	r5, r5, r3
 8008f20:	42b5      	cmp	r5, r6
 8008f22:	d11a      	bne.n	8008f5a <_printf_common+0xd2>
 8008f24:	2000      	movs	r0, #0
 8008f26:	e008      	b.n	8008f3a <_printf_common+0xb2>
 8008f28:	2301      	movs	r3, #1
 8008f2a:	4652      	mov	r2, sl
 8008f2c:	4641      	mov	r1, r8
 8008f2e:	4638      	mov	r0, r7
 8008f30:	47c8      	blx	r9
 8008f32:	3001      	adds	r0, #1
 8008f34:	d103      	bne.n	8008f3e <_printf_common+0xb6>
 8008f36:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f3e:	3501      	adds	r5, #1
 8008f40:	e7c1      	b.n	8008ec6 <_printf_common+0x3e>
 8008f42:	18e1      	adds	r1, r4, r3
 8008f44:	1c5a      	adds	r2, r3, #1
 8008f46:	2030      	movs	r0, #48	@ 0x30
 8008f48:	3302      	adds	r3, #2
 8008f4a:	4422      	add	r2, r4
 8008f4c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f58:	e7c2      	b.n	8008ee0 <_printf_common+0x58>
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	4622      	mov	r2, r4
 8008f5e:	4641      	mov	r1, r8
 8008f60:	4638      	mov	r0, r7
 8008f62:	47c8      	blx	r9
 8008f64:	3001      	adds	r0, #1
 8008f66:	d0e6      	beq.n	8008f36 <_printf_common+0xae>
 8008f68:	3601      	adds	r6, #1
 8008f6a:	e7d9      	b.n	8008f20 <_printf_common+0x98>

08008f6c <_printf_i>:
 8008f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f70:	7e0f      	ldrb	r7, [r1, #24]
 8008f72:	4691      	mov	r9, r2
 8008f74:	4680      	mov	r8, r0
 8008f76:	460c      	mov	r4, r1
 8008f78:	2f78      	cmp	r7, #120	@ 0x78
 8008f7a:	469a      	mov	sl, r3
 8008f7c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f82:	d807      	bhi.n	8008f94 <_printf_i+0x28>
 8008f84:	2f62      	cmp	r7, #98	@ 0x62
 8008f86:	d80a      	bhi.n	8008f9e <_printf_i+0x32>
 8008f88:	2f00      	cmp	r7, #0
 8008f8a:	f000 80d2 	beq.w	8009132 <_printf_i+0x1c6>
 8008f8e:	2f58      	cmp	r7, #88	@ 0x58
 8008f90:	f000 80b9 	beq.w	8009106 <_printf_i+0x19a>
 8008f94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008f9c:	e03a      	b.n	8009014 <_printf_i+0xa8>
 8008f9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008fa2:	2b15      	cmp	r3, #21
 8008fa4:	d8f6      	bhi.n	8008f94 <_printf_i+0x28>
 8008fa6:	a101      	add	r1, pc, #4	@ (adr r1, 8008fac <_printf_i+0x40>)
 8008fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fac:	08009005 	.word	0x08009005
 8008fb0:	08009019 	.word	0x08009019
 8008fb4:	08008f95 	.word	0x08008f95
 8008fb8:	08008f95 	.word	0x08008f95
 8008fbc:	08008f95 	.word	0x08008f95
 8008fc0:	08008f95 	.word	0x08008f95
 8008fc4:	08009019 	.word	0x08009019
 8008fc8:	08008f95 	.word	0x08008f95
 8008fcc:	08008f95 	.word	0x08008f95
 8008fd0:	08008f95 	.word	0x08008f95
 8008fd4:	08008f95 	.word	0x08008f95
 8008fd8:	08009119 	.word	0x08009119
 8008fdc:	08009043 	.word	0x08009043
 8008fe0:	080090d3 	.word	0x080090d3
 8008fe4:	08008f95 	.word	0x08008f95
 8008fe8:	08008f95 	.word	0x08008f95
 8008fec:	0800913b 	.word	0x0800913b
 8008ff0:	08008f95 	.word	0x08008f95
 8008ff4:	08009043 	.word	0x08009043
 8008ff8:	08008f95 	.word	0x08008f95
 8008ffc:	08008f95 	.word	0x08008f95
 8009000:	080090db 	.word	0x080090db
 8009004:	6833      	ldr	r3, [r6, #0]
 8009006:	1d1a      	adds	r2, r3, #4
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6032      	str	r2, [r6, #0]
 800900c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009010:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009014:	2301      	movs	r3, #1
 8009016:	e09d      	b.n	8009154 <_printf_i+0x1e8>
 8009018:	6833      	ldr	r3, [r6, #0]
 800901a:	6820      	ldr	r0, [r4, #0]
 800901c:	1d19      	adds	r1, r3, #4
 800901e:	6031      	str	r1, [r6, #0]
 8009020:	0606      	lsls	r6, r0, #24
 8009022:	d501      	bpl.n	8009028 <_printf_i+0xbc>
 8009024:	681d      	ldr	r5, [r3, #0]
 8009026:	e003      	b.n	8009030 <_printf_i+0xc4>
 8009028:	0645      	lsls	r5, r0, #25
 800902a:	d5fb      	bpl.n	8009024 <_printf_i+0xb8>
 800902c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009030:	2d00      	cmp	r5, #0
 8009032:	da03      	bge.n	800903c <_printf_i+0xd0>
 8009034:	232d      	movs	r3, #45	@ 0x2d
 8009036:	426d      	negs	r5, r5
 8009038:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800903c:	4859      	ldr	r0, [pc, #356]	@ (80091a4 <_printf_i+0x238>)
 800903e:	230a      	movs	r3, #10
 8009040:	e011      	b.n	8009066 <_printf_i+0xfa>
 8009042:	6821      	ldr	r1, [r4, #0]
 8009044:	6833      	ldr	r3, [r6, #0]
 8009046:	0608      	lsls	r0, r1, #24
 8009048:	f853 5b04 	ldr.w	r5, [r3], #4
 800904c:	d402      	bmi.n	8009054 <_printf_i+0xe8>
 800904e:	0649      	lsls	r1, r1, #25
 8009050:	bf48      	it	mi
 8009052:	b2ad      	uxthmi	r5, r5
 8009054:	2f6f      	cmp	r7, #111	@ 0x6f
 8009056:	6033      	str	r3, [r6, #0]
 8009058:	4852      	ldr	r0, [pc, #328]	@ (80091a4 <_printf_i+0x238>)
 800905a:	bf14      	ite	ne
 800905c:	230a      	movne	r3, #10
 800905e:	2308      	moveq	r3, #8
 8009060:	2100      	movs	r1, #0
 8009062:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009066:	6866      	ldr	r6, [r4, #4]
 8009068:	2e00      	cmp	r6, #0
 800906a:	60a6      	str	r6, [r4, #8]
 800906c:	bfa2      	ittt	ge
 800906e:	6821      	ldrge	r1, [r4, #0]
 8009070:	f021 0104 	bicge.w	r1, r1, #4
 8009074:	6021      	strge	r1, [r4, #0]
 8009076:	b90d      	cbnz	r5, 800907c <_printf_i+0x110>
 8009078:	2e00      	cmp	r6, #0
 800907a:	d04b      	beq.n	8009114 <_printf_i+0x1a8>
 800907c:	4616      	mov	r6, r2
 800907e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009082:	fb03 5711 	mls	r7, r3, r1, r5
 8009086:	5dc7      	ldrb	r7, [r0, r7]
 8009088:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800908c:	462f      	mov	r7, r5
 800908e:	460d      	mov	r5, r1
 8009090:	42bb      	cmp	r3, r7
 8009092:	d9f4      	bls.n	800907e <_printf_i+0x112>
 8009094:	2b08      	cmp	r3, #8
 8009096:	d10b      	bne.n	80090b0 <_printf_i+0x144>
 8009098:	6823      	ldr	r3, [r4, #0]
 800909a:	07df      	lsls	r7, r3, #31
 800909c:	d508      	bpl.n	80090b0 <_printf_i+0x144>
 800909e:	6923      	ldr	r3, [r4, #16]
 80090a0:	6861      	ldr	r1, [r4, #4]
 80090a2:	4299      	cmp	r1, r3
 80090a4:	bfde      	ittt	le
 80090a6:	2330      	movle	r3, #48	@ 0x30
 80090a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090b0:	1b92      	subs	r2, r2, r6
 80090b2:	6122      	str	r2, [r4, #16]
 80090b4:	464b      	mov	r3, r9
 80090b6:	aa03      	add	r2, sp, #12
 80090b8:	4621      	mov	r1, r4
 80090ba:	4640      	mov	r0, r8
 80090bc:	f8cd a000 	str.w	sl, [sp]
 80090c0:	f7ff fee2 	bl	8008e88 <_printf_common>
 80090c4:	3001      	adds	r0, #1
 80090c6:	d14a      	bne.n	800915e <_printf_i+0x1f2>
 80090c8:	f04f 30ff 	mov.w	r0, #4294967295
 80090cc:	b004      	add	sp, #16
 80090ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	f043 0320 	orr.w	r3, r3, #32
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	2778      	movs	r7, #120	@ 0x78
 80090dc:	4832      	ldr	r0, [pc, #200]	@ (80091a8 <_printf_i+0x23c>)
 80090de:	6823      	ldr	r3, [r4, #0]
 80090e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80090e4:	061f      	lsls	r7, r3, #24
 80090e6:	6831      	ldr	r1, [r6, #0]
 80090e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80090ec:	d402      	bmi.n	80090f4 <_printf_i+0x188>
 80090ee:	065f      	lsls	r7, r3, #25
 80090f0:	bf48      	it	mi
 80090f2:	b2ad      	uxthmi	r5, r5
 80090f4:	6031      	str	r1, [r6, #0]
 80090f6:	07d9      	lsls	r1, r3, #31
 80090f8:	bf44      	itt	mi
 80090fa:	f043 0320 	orrmi.w	r3, r3, #32
 80090fe:	6023      	strmi	r3, [r4, #0]
 8009100:	b11d      	cbz	r5, 800910a <_printf_i+0x19e>
 8009102:	2310      	movs	r3, #16
 8009104:	e7ac      	b.n	8009060 <_printf_i+0xf4>
 8009106:	4827      	ldr	r0, [pc, #156]	@ (80091a4 <_printf_i+0x238>)
 8009108:	e7e9      	b.n	80090de <_printf_i+0x172>
 800910a:	6823      	ldr	r3, [r4, #0]
 800910c:	f023 0320 	bic.w	r3, r3, #32
 8009110:	6023      	str	r3, [r4, #0]
 8009112:	e7f6      	b.n	8009102 <_printf_i+0x196>
 8009114:	4616      	mov	r6, r2
 8009116:	e7bd      	b.n	8009094 <_printf_i+0x128>
 8009118:	6833      	ldr	r3, [r6, #0]
 800911a:	6825      	ldr	r5, [r4, #0]
 800911c:	1d18      	adds	r0, r3, #4
 800911e:	6961      	ldr	r1, [r4, #20]
 8009120:	6030      	str	r0, [r6, #0]
 8009122:	062e      	lsls	r6, r5, #24
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	d501      	bpl.n	800912c <_printf_i+0x1c0>
 8009128:	6019      	str	r1, [r3, #0]
 800912a:	e002      	b.n	8009132 <_printf_i+0x1c6>
 800912c:	0668      	lsls	r0, r5, #25
 800912e:	d5fb      	bpl.n	8009128 <_printf_i+0x1bc>
 8009130:	8019      	strh	r1, [r3, #0]
 8009132:	2300      	movs	r3, #0
 8009134:	4616      	mov	r6, r2
 8009136:	6123      	str	r3, [r4, #16]
 8009138:	e7bc      	b.n	80090b4 <_printf_i+0x148>
 800913a:	6833      	ldr	r3, [r6, #0]
 800913c:	2100      	movs	r1, #0
 800913e:	1d1a      	adds	r2, r3, #4
 8009140:	6032      	str	r2, [r6, #0]
 8009142:	681e      	ldr	r6, [r3, #0]
 8009144:	6862      	ldr	r2, [r4, #4]
 8009146:	4630      	mov	r0, r6
 8009148:	f000 f9c7 	bl	80094da <memchr>
 800914c:	b108      	cbz	r0, 8009152 <_printf_i+0x1e6>
 800914e:	1b80      	subs	r0, r0, r6
 8009150:	6060      	str	r0, [r4, #4]
 8009152:	6863      	ldr	r3, [r4, #4]
 8009154:	6123      	str	r3, [r4, #16]
 8009156:	2300      	movs	r3, #0
 8009158:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800915c:	e7aa      	b.n	80090b4 <_printf_i+0x148>
 800915e:	6923      	ldr	r3, [r4, #16]
 8009160:	4632      	mov	r2, r6
 8009162:	4649      	mov	r1, r9
 8009164:	4640      	mov	r0, r8
 8009166:	47d0      	blx	sl
 8009168:	3001      	adds	r0, #1
 800916a:	d0ad      	beq.n	80090c8 <_printf_i+0x15c>
 800916c:	6823      	ldr	r3, [r4, #0]
 800916e:	079b      	lsls	r3, r3, #30
 8009170:	d413      	bmi.n	800919a <_printf_i+0x22e>
 8009172:	68e0      	ldr	r0, [r4, #12]
 8009174:	9b03      	ldr	r3, [sp, #12]
 8009176:	4298      	cmp	r0, r3
 8009178:	bfb8      	it	lt
 800917a:	4618      	movlt	r0, r3
 800917c:	e7a6      	b.n	80090cc <_printf_i+0x160>
 800917e:	2301      	movs	r3, #1
 8009180:	4632      	mov	r2, r6
 8009182:	4649      	mov	r1, r9
 8009184:	4640      	mov	r0, r8
 8009186:	47d0      	blx	sl
 8009188:	3001      	adds	r0, #1
 800918a:	d09d      	beq.n	80090c8 <_printf_i+0x15c>
 800918c:	3501      	adds	r5, #1
 800918e:	68e3      	ldr	r3, [r4, #12]
 8009190:	9903      	ldr	r1, [sp, #12]
 8009192:	1a5b      	subs	r3, r3, r1
 8009194:	42ab      	cmp	r3, r5
 8009196:	dcf2      	bgt.n	800917e <_printf_i+0x212>
 8009198:	e7eb      	b.n	8009172 <_printf_i+0x206>
 800919a:	2500      	movs	r5, #0
 800919c:	f104 0619 	add.w	r6, r4, #25
 80091a0:	e7f5      	b.n	800918e <_printf_i+0x222>
 80091a2:	bf00      	nop
 80091a4:	0800e296 	.word	0x0800e296
 80091a8:	0800e2a7 	.word	0x0800e2a7

080091ac <std>:
 80091ac:	2300      	movs	r3, #0
 80091ae:	b510      	push	{r4, lr}
 80091b0:	4604      	mov	r4, r0
 80091b2:	6083      	str	r3, [r0, #8]
 80091b4:	8181      	strh	r1, [r0, #12]
 80091b6:	4619      	mov	r1, r3
 80091b8:	6643      	str	r3, [r0, #100]	@ 0x64
 80091ba:	81c2      	strh	r2, [r0, #14]
 80091bc:	2208      	movs	r2, #8
 80091be:	6183      	str	r3, [r0, #24]
 80091c0:	e9c0 3300 	strd	r3, r3, [r0]
 80091c4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091c8:	305c      	adds	r0, #92	@ 0x5c
 80091ca:	f000 f906 	bl	80093da <memset>
 80091ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009204 <std+0x58>)
 80091d0:	6224      	str	r4, [r4, #32]
 80091d2:	6263      	str	r3, [r4, #36]	@ 0x24
 80091d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009208 <std+0x5c>)
 80091d6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80091d8:	4b0c      	ldr	r3, [pc, #48]	@ (800920c <std+0x60>)
 80091da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80091dc:	4b0c      	ldr	r3, [pc, #48]	@ (8009210 <std+0x64>)
 80091de:	6323      	str	r3, [r4, #48]	@ 0x30
 80091e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009214 <std+0x68>)
 80091e2:	429c      	cmp	r4, r3
 80091e4:	d006      	beq.n	80091f4 <std+0x48>
 80091e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80091ea:	4294      	cmp	r4, r2
 80091ec:	d002      	beq.n	80091f4 <std+0x48>
 80091ee:	33d0      	adds	r3, #208	@ 0xd0
 80091f0:	429c      	cmp	r4, r3
 80091f2:	d105      	bne.n	8009200 <std+0x54>
 80091f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80091f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091fc:	f000 b96a 	b.w	80094d4 <__retarget_lock_init_recursive>
 8009200:	bd10      	pop	{r4, pc}
 8009202:	bf00      	nop
 8009204:	08009355 	.word	0x08009355
 8009208:	08009377 	.word	0x08009377
 800920c:	080093af 	.word	0x080093af
 8009210:	080093d3 	.word	0x080093d3
 8009214:	20000780 	.word	0x20000780

08009218 <stdio_exit_handler>:
 8009218:	4a02      	ldr	r2, [pc, #8]	@ (8009224 <stdio_exit_handler+0xc>)
 800921a:	4903      	ldr	r1, [pc, #12]	@ (8009228 <stdio_exit_handler+0x10>)
 800921c:	4803      	ldr	r0, [pc, #12]	@ (800922c <stdio_exit_handler+0x14>)
 800921e:	f000 b869 	b.w	80092f4 <_fwalk_sglue>
 8009222:	bf00      	nop
 8009224:	20000014 	.word	0x20000014
 8009228:	0800ae35 	.word	0x0800ae35
 800922c:	20000024 	.word	0x20000024

08009230 <cleanup_stdio>:
 8009230:	6841      	ldr	r1, [r0, #4]
 8009232:	4b0c      	ldr	r3, [pc, #48]	@ (8009264 <cleanup_stdio+0x34>)
 8009234:	4299      	cmp	r1, r3
 8009236:	b510      	push	{r4, lr}
 8009238:	4604      	mov	r4, r0
 800923a:	d001      	beq.n	8009240 <cleanup_stdio+0x10>
 800923c:	f001 fdfa 	bl	800ae34 <_fflush_r>
 8009240:	68a1      	ldr	r1, [r4, #8]
 8009242:	4b09      	ldr	r3, [pc, #36]	@ (8009268 <cleanup_stdio+0x38>)
 8009244:	4299      	cmp	r1, r3
 8009246:	d002      	beq.n	800924e <cleanup_stdio+0x1e>
 8009248:	4620      	mov	r0, r4
 800924a:	f001 fdf3 	bl	800ae34 <_fflush_r>
 800924e:	68e1      	ldr	r1, [r4, #12]
 8009250:	4b06      	ldr	r3, [pc, #24]	@ (800926c <cleanup_stdio+0x3c>)
 8009252:	4299      	cmp	r1, r3
 8009254:	d004      	beq.n	8009260 <cleanup_stdio+0x30>
 8009256:	4620      	mov	r0, r4
 8009258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800925c:	f001 bdea 	b.w	800ae34 <_fflush_r>
 8009260:	bd10      	pop	{r4, pc}
 8009262:	bf00      	nop
 8009264:	20000780 	.word	0x20000780
 8009268:	200007e8 	.word	0x200007e8
 800926c:	20000850 	.word	0x20000850

08009270 <global_stdio_init.part.0>:
 8009270:	b510      	push	{r4, lr}
 8009272:	4b0b      	ldr	r3, [pc, #44]	@ (80092a0 <global_stdio_init.part.0+0x30>)
 8009274:	2104      	movs	r1, #4
 8009276:	4c0b      	ldr	r4, [pc, #44]	@ (80092a4 <global_stdio_init.part.0+0x34>)
 8009278:	4a0b      	ldr	r2, [pc, #44]	@ (80092a8 <global_stdio_init.part.0+0x38>)
 800927a:	4620      	mov	r0, r4
 800927c:	601a      	str	r2, [r3, #0]
 800927e:	2200      	movs	r2, #0
 8009280:	f7ff ff94 	bl	80091ac <std>
 8009284:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009288:	2201      	movs	r2, #1
 800928a:	2109      	movs	r1, #9
 800928c:	f7ff ff8e 	bl	80091ac <std>
 8009290:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009294:	2202      	movs	r2, #2
 8009296:	2112      	movs	r1, #18
 8009298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800929c:	f7ff bf86 	b.w	80091ac <std>
 80092a0:	200008b8 	.word	0x200008b8
 80092a4:	20000780 	.word	0x20000780
 80092a8:	08009219 	.word	0x08009219

080092ac <__sfp_lock_acquire>:
 80092ac:	4801      	ldr	r0, [pc, #4]	@ (80092b4 <__sfp_lock_acquire+0x8>)
 80092ae:	f000 b912 	b.w	80094d6 <__retarget_lock_acquire_recursive>
 80092b2:	bf00      	nop
 80092b4:	200008c1 	.word	0x200008c1

080092b8 <__sfp_lock_release>:
 80092b8:	4801      	ldr	r0, [pc, #4]	@ (80092c0 <__sfp_lock_release+0x8>)
 80092ba:	f000 b90d 	b.w	80094d8 <__retarget_lock_release_recursive>
 80092be:	bf00      	nop
 80092c0:	200008c1 	.word	0x200008c1

080092c4 <__sinit>:
 80092c4:	b510      	push	{r4, lr}
 80092c6:	4604      	mov	r4, r0
 80092c8:	f7ff fff0 	bl	80092ac <__sfp_lock_acquire>
 80092cc:	6a23      	ldr	r3, [r4, #32]
 80092ce:	b11b      	cbz	r3, 80092d8 <__sinit+0x14>
 80092d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092d4:	f7ff bff0 	b.w	80092b8 <__sfp_lock_release>
 80092d8:	4b04      	ldr	r3, [pc, #16]	@ (80092ec <__sinit+0x28>)
 80092da:	6223      	str	r3, [r4, #32]
 80092dc:	4b04      	ldr	r3, [pc, #16]	@ (80092f0 <__sinit+0x2c>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d1f5      	bne.n	80092d0 <__sinit+0xc>
 80092e4:	f7ff ffc4 	bl	8009270 <global_stdio_init.part.0>
 80092e8:	e7f2      	b.n	80092d0 <__sinit+0xc>
 80092ea:	bf00      	nop
 80092ec:	08009231 	.word	0x08009231
 80092f0:	200008b8 	.word	0x200008b8

080092f4 <_fwalk_sglue>:
 80092f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092f8:	4607      	mov	r7, r0
 80092fa:	4688      	mov	r8, r1
 80092fc:	4614      	mov	r4, r2
 80092fe:	2600      	movs	r6, #0
 8009300:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009304:	f1b9 0901 	subs.w	r9, r9, #1
 8009308:	d505      	bpl.n	8009316 <_fwalk_sglue+0x22>
 800930a:	6824      	ldr	r4, [r4, #0]
 800930c:	2c00      	cmp	r4, #0
 800930e:	d1f7      	bne.n	8009300 <_fwalk_sglue+0xc>
 8009310:	4630      	mov	r0, r6
 8009312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009316:	89ab      	ldrh	r3, [r5, #12]
 8009318:	2b01      	cmp	r3, #1
 800931a:	d907      	bls.n	800932c <_fwalk_sglue+0x38>
 800931c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009320:	3301      	adds	r3, #1
 8009322:	d003      	beq.n	800932c <_fwalk_sglue+0x38>
 8009324:	4629      	mov	r1, r5
 8009326:	4638      	mov	r0, r7
 8009328:	47c0      	blx	r8
 800932a:	4306      	orrs	r6, r0
 800932c:	3568      	adds	r5, #104	@ 0x68
 800932e:	e7e9      	b.n	8009304 <_fwalk_sglue+0x10>

08009330 <iprintf>:
 8009330:	b40f      	push	{r0, r1, r2, r3}
 8009332:	b507      	push	{r0, r1, r2, lr}
 8009334:	4906      	ldr	r1, [pc, #24]	@ (8009350 <iprintf+0x20>)
 8009336:	ab04      	add	r3, sp, #16
 8009338:	6808      	ldr	r0, [r1, #0]
 800933a:	f853 2b04 	ldr.w	r2, [r3], #4
 800933e:	6881      	ldr	r1, [r0, #8]
 8009340:	9301      	str	r3, [sp, #4]
 8009342:	f001 fbdb 	bl	800aafc <_vfiprintf_r>
 8009346:	b003      	add	sp, #12
 8009348:	f85d eb04 	ldr.w	lr, [sp], #4
 800934c:	b004      	add	sp, #16
 800934e:	4770      	bx	lr
 8009350:	20000020 	.word	0x20000020

08009354 <__sread>:
 8009354:	b510      	push	{r4, lr}
 8009356:	460c      	mov	r4, r1
 8009358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800935c:	f000 f86c 	bl	8009438 <_read_r>
 8009360:	2800      	cmp	r0, #0
 8009362:	bfab      	itete	ge
 8009364:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009366:	89a3      	ldrhlt	r3, [r4, #12]
 8009368:	181b      	addge	r3, r3, r0
 800936a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800936e:	bfac      	ite	ge
 8009370:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009372:	81a3      	strhlt	r3, [r4, #12]
 8009374:	bd10      	pop	{r4, pc}

08009376 <__swrite>:
 8009376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800937a:	461f      	mov	r7, r3
 800937c:	898b      	ldrh	r3, [r1, #12]
 800937e:	4605      	mov	r5, r0
 8009380:	460c      	mov	r4, r1
 8009382:	05db      	lsls	r3, r3, #23
 8009384:	4616      	mov	r6, r2
 8009386:	d505      	bpl.n	8009394 <__swrite+0x1e>
 8009388:	2302      	movs	r3, #2
 800938a:	2200      	movs	r2, #0
 800938c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009390:	f000 f840 	bl	8009414 <_lseek_r>
 8009394:	89a3      	ldrh	r3, [r4, #12]
 8009396:	4632      	mov	r2, r6
 8009398:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800939c:	4628      	mov	r0, r5
 800939e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093a2:	81a3      	strh	r3, [r4, #12]
 80093a4:	463b      	mov	r3, r7
 80093a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093aa:	f000 b857 	b.w	800945c <_write_r>

080093ae <__sseek>:
 80093ae:	b510      	push	{r4, lr}
 80093b0:	460c      	mov	r4, r1
 80093b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093b6:	f000 f82d 	bl	8009414 <_lseek_r>
 80093ba:	1c43      	adds	r3, r0, #1
 80093bc:	89a3      	ldrh	r3, [r4, #12]
 80093be:	bf15      	itete	ne
 80093c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80093c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80093c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80093ca:	81a3      	strheq	r3, [r4, #12]
 80093cc:	bf18      	it	ne
 80093ce:	81a3      	strhne	r3, [r4, #12]
 80093d0:	bd10      	pop	{r4, pc}

080093d2 <__sclose>:
 80093d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093d6:	f000 b80d 	b.w	80093f4 <_close_r>

080093da <memset>:
 80093da:	4402      	add	r2, r0
 80093dc:	4603      	mov	r3, r0
 80093de:	4293      	cmp	r3, r2
 80093e0:	d100      	bne.n	80093e4 <memset+0xa>
 80093e2:	4770      	bx	lr
 80093e4:	f803 1b01 	strb.w	r1, [r3], #1
 80093e8:	e7f9      	b.n	80093de <memset+0x4>
	...

080093ec <_localeconv_r>:
 80093ec:	4800      	ldr	r0, [pc, #0]	@ (80093f0 <_localeconv_r+0x4>)
 80093ee:	4770      	bx	lr
 80093f0:	20000160 	.word	0x20000160

080093f4 <_close_r>:
 80093f4:	b538      	push	{r3, r4, r5, lr}
 80093f6:	2300      	movs	r3, #0
 80093f8:	4d05      	ldr	r5, [pc, #20]	@ (8009410 <_close_r+0x1c>)
 80093fa:	4604      	mov	r4, r0
 80093fc:	4608      	mov	r0, r1
 80093fe:	602b      	str	r3, [r5, #0]
 8009400:	f7f9 ff31 	bl	8003266 <_close>
 8009404:	1c43      	adds	r3, r0, #1
 8009406:	d102      	bne.n	800940e <_close_r+0x1a>
 8009408:	682b      	ldr	r3, [r5, #0]
 800940a:	b103      	cbz	r3, 800940e <_close_r+0x1a>
 800940c:	6023      	str	r3, [r4, #0]
 800940e:	bd38      	pop	{r3, r4, r5, pc}
 8009410:	200008bc 	.word	0x200008bc

08009414 <_lseek_r>:
 8009414:	b538      	push	{r3, r4, r5, lr}
 8009416:	4604      	mov	r4, r0
 8009418:	4d06      	ldr	r5, [pc, #24]	@ (8009434 <_lseek_r+0x20>)
 800941a:	4608      	mov	r0, r1
 800941c:	4611      	mov	r1, r2
 800941e:	2200      	movs	r2, #0
 8009420:	602a      	str	r2, [r5, #0]
 8009422:	461a      	mov	r2, r3
 8009424:	f7f9 ff46 	bl	80032b4 <_lseek>
 8009428:	1c43      	adds	r3, r0, #1
 800942a:	d102      	bne.n	8009432 <_lseek_r+0x1e>
 800942c:	682b      	ldr	r3, [r5, #0]
 800942e:	b103      	cbz	r3, 8009432 <_lseek_r+0x1e>
 8009430:	6023      	str	r3, [r4, #0]
 8009432:	bd38      	pop	{r3, r4, r5, pc}
 8009434:	200008bc 	.word	0x200008bc

08009438 <_read_r>:
 8009438:	b538      	push	{r3, r4, r5, lr}
 800943a:	4604      	mov	r4, r0
 800943c:	4d06      	ldr	r5, [pc, #24]	@ (8009458 <_read_r+0x20>)
 800943e:	4608      	mov	r0, r1
 8009440:	4611      	mov	r1, r2
 8009442:	2200      	movs	r2, #0
 8009444:	602a      	str	r2, [r5, #0]
 8009446:	461a      	mov	r2, r3
 8009448:	f7f9 fef0 	bl	800322c <_read>
 800944c:	1c43      	adds	r3, r0, #1
 800944e:	d102      	bne.n	8009456 <_read_r+0x1e>
 8009450:	682b      	ldr	r3, [r5, #0]
 8009452:	b103      	cbz	r3, 8009456 <_read_r+0x1e>
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	bd38      	pop	{r3, r4, r5, pc}
 8009458:	200008bc 	.word	0x200008bc

0800945c <_write_r>:
 800945c:	b538      	push	{r3, r4, r5, lr}
 800945e:	4604      	mov	r4, r0
 8009460:	4d06      	ldr	r5, [pc, #24]	@ (800947c <_write_r+0x20>)
 8009462:	4608      	mov	r0, r1
 8009464:	4611      	mov	r1, r2
 8009466:	2200      	movs	r2, #0
 8009468:	602a      	str	r2, [r5, #0]
 800946a:	461a      	mov	r2, r3
 800946c:	f7f8 ff76 	bl	800235c <_write>
 8009470:	1c43      	adds	r3, r0, #1
 8009472:	d102      	bne.n	800947a <_write_r+0x1e>
 8009474:	682b      	ldr	r3, [r5, #0]
 8009476:	b103      	cbz	r3, 800947a <_write_r+0x1e>
 8009478:	6023      	str	r3, [r4, #0]
 800947a:	bd38      	pop	{r3, r4, r5, pc}
 800947c:	200008bc 	.word	0x200008bc

08009480 <__errno>:
 8009480:	4b01      	ldr	r3, [pc, #4]	@ (8009488 <__errno+0x8>)
 8009482:	6818      	ldr	r0, [r3, #0]
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop
 8009488:	20000020 	.word	0x20000020

0800948c <__libc_init_array>:
 800948c:	b570      	push	{r4, r5, r6, lr}
 800948e:	4d0d      	ldr	r5, [pc, #52]	@ (80094c4 <__libc_init_array+0x38>)
 8009490:	2600      	movs	r6, #0
 8009492:	4c0d      	ldr	r4, [pc, #52]	@ (80094c8 <__libc_init_array+0x3c>)
 8009494:	1b64      	subs	r4, r4, r5
 8009496:	10a4      	asrs	r4, r4, #2
 8009498:	42a6      	cmp	r6, r4
 800949a:	d109      	bne.n	80094b0 <__libc_init_array+0x24>
 800949c:	4d0b      	ldr	r5, [pc, #44]	@ (80094cc <__libc_init_array+0x40>)
 800949e:	2600      	movs	r6, #0
 80094a0:	4c0b      	ldr	r4, [pc, #44]	@ (80094d0 <__libc_init_array+0x44>)
 80094a2:	f004 fd81 	bl	800dfa8 <_init>
 80094a6:	1b64      	subs	r4, r4, r5
 80094a8:	10a4      	asrs	r4, r4, #2
 80094aa:	42a6      	cmp	r6, r4
 80094ac:	d105      	bne.n	80094ba <__libc_init_array+0x2e>
 80094ae:	bd70      	pop	{r4, r5, r6, pc}
 80094b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80094b4:	3601      	adds	r6, #1
 80094b6:	4798      	blx	r3
 80094b8:	e7ee      	b.n	8009498 <__libc_init_array+0xc>
 80094ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80094be:	3601      	adds	r6, #1
 80094c0:	4798      	blx	r3
 80094c2:	e7f2      	b.n	80094aa <__libc_init_array+0x1e>
 80094c4:	0800e8b0 	.word	0x0800e8b0
 80094c8:	0800e8b0 	.word	0x0800e8b0
 80094cc:	0800e8b0 	.word	0x0800e8b0
 80094d0:	0800e8b4 	.word	0x0800e8b4

080094d4 <__retarget_lock_init_recursive>:
 80094d4:	4770      	bx	lr

080094d6 <__retarget_lock_acquire_recursive>:
 80094d6:	4770      	bx	lr

080094d8 <__retarget_lock_release_recursive>:
 80094d8:	4770      	bx	lr

080094da <memchr>:
 80094da:	b2c9      	uxtb	r1, r1
 80094dc:	4603      	mov	r3, r0
 80094de:	4402      	add	r2, r0
 80094e0:	b510      	push	{r4, lr}
 80094e2:	4293      	cmp	r3, r2
 80094e4:	4618      	mov	r0, r3
 80094e6:	d101      	bne.n	80094ec <memchr+0x12>
 80094e8:	2000      	movs	r0, #0
 80094ea:	e003      	b.n	80094f4 <memchr+0x1a>
 80094ec:	7804      	ldrb	r4, [r0, #0]
 80094ee:	3301      	adds	r3, #1
 80094f0:	428c      	cmp	r4, r1
 80094f2:	d1f6      	bne.n	80094e2 <memchr+0x8>
 80094f4:	bd10      	pop	{r4, pc}

080094f6 <quorem>:
 80094f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094fa:	6903      	ldr	r3, [r0, #16]
 80094fc:	4607      	mov	r7, r0
 80094fe:	690c      	ldr	r4, [r1, #16]
 8009500:	42a3      	cmp	r3, r4
 8009502:	f2c0 8083 	blt.w	800960c <quorem+0x116>
 8009506:	3c01      	subs	r4, #1
 8009508:	f100 0514 	add.w	r5, r0, #20
 800950c:	f101 0814 	add.w	r8, r1, #20
 8009510:	00a3      	lsls	r3, r4, #2
 8009512:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009516:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009520:	9301      	str	r3, [sp, #4]
 8009522:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009526:	3301      	adds	r3, #1
 8009528:	429a      	cmp	r2, r3
 800952a:	fbb2 f6f3 	udiv	r6, r2, r3
 800952e:	d331      	bcc.n	8009594 <quorem+0x9e>
 8009530:	f04f 0a00 	mov.w	sl, #0
 8009534:	46c4      	mov	ip, r8
 8009536:	46ae      	mov	lr, r5
 8009538:	46d3      	mov	fp, sl
 800953a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800953e:	b298      	uxth	r0, r3
 8009540:	45e1      	cmp	r9, ip
 8009542:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8009546:	fb06 a000 	mla	r0, r6, r0, sl
 800954a:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800954e:	b280      	uxth	r0, r0
 8009550:	fb06 2303 	mla	r3, r6, r3, r2
 8009554:	f8de 2000 	ldr.w	r2, [lr]
 8009558:	b292      	uxth	r2, r2
 800955a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800955e:	eba2 0200 	sub.w	r2, r2, r0
 8009562:	b29b      	uxth	r3, r3
 8009564:	f8de 0000 	ldr.w	r0, [lr]
 8009568:	445a      	add	r2, fp
 800956a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800956e:	b292      	uxth	r2, r2
 8009570:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009574:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009578:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800957c:	f84e 2b04 	str.w	r2, [lr], #4
 8009580:	d2db      	bcs.n	800953a <quorem+0x44>
 8009582:	9b00      	ldr	r3, [sp, #0]
 8009584:	58eb      	ldr	r3, [r5, r3]
 8009586:	b92b      	cbnz	r3, 8009594 <quorem+0x9e>
 8009588:	9b01      	ldr	r3, [sp, #4]
 800958a:	3b04      	subs	r3, #4
 800958c:	429d      	cmp	r5, r3
 800958e:	461a      	mov	r2, r3
 8009590:	d330      	bcc.n	80095f4 <quorem+0xfe>
 8009592:	613c      	str	r4, [r7, #16]
 8009594:	4638      	mov	r0, r7
 8009596:	f001 f97b 	bl	800a890 <__mcmp>
 800959a:	2800      	cmp	r0, #0
 800959c:	db26      	blt.n	80095ec <quorem+0xf6>
 800959e:	4629      	mov	r1, r5
 80095a0:	2000      	movs	r0, #0
 80095a2:	f858 2b04 	ldr.w	r2, [r8], #4
 80095a6:	f8d1 c000 	ldr.w	ip, [r1]
 80095aa:	fa1f fe82 	uxth.w	lr, r2
 80095ae:	45c1      	cmp	r9, r8
 80095b0:	fa1f f38c 	uxth.w	r3, ip
 80095b4:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80095b8:	eba3 030e 	sub.w	r3, r3, lr
 80095bc:	4403      	add	r3, r0
 80095be:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80095c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80095d0:	f841 3b04 	str.w	r3, [r1], #4
 80095d4:	d2e5      	bcs.n	80095a2 <quorem+0xac>
 80095d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095de:	b922      	cbnz	r2, 80095ea <quorem+0xf4>
 80095e0:	3b04      	subs	r3, #4
 80095e2:	429d      	cmp	r5, r3
 80095e4:	461a      	mov	r2, r3
 80095e6:	d30b      	bcc.n	8009600 <quorem+0x10a>
 80095e8:	613c      	str	r4, [r7, #16]
 80095ea:	3601      	adds	r6, #1
 80095ec:	4630      	mov	r0, r6
 80095ee:	b003      	add	sp, #12
 80095f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f4:	6812      	ldr	r2, [r2, #0]
 80095f6:	3b04      	subs	r3, #4
 80095f8:	2a00      	cmp	r2, #0
 80095fa:	d1ca      	bne.n	8009592 <quorem+0x9c>
 80095fc:	3c01      	subs	r4, #1
 80095fe:	e7c5      	b.n	800958c <quorem+0x96>
 8009600:	6812      	ldr	r2, [r2, #0]
 8009602:	3b04      	subs	r3, #4
 8009604:	2a00      	cmp	r2, #0
 8009606:	d1ef      	bne.n	80095e8 <quorem+0xf2>
 8009608:	3c01      	subs	r4, #1
 800960a:	e7ea      	b.n	80095e2 <quorem+0xec>
 800960c:	2000      	movs	r0, #0
 800960e:	e7ee      	b.n	80095ee <quorem+0xf8>

08009610 <_dtoa_r>:
 8009610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009614:	69c7      	ldr	r7, [r0, #28]
 8009616:	b099      	sub	sp, #100	@ 0x64
 8009618:	4683      	mov	fp, r0
 800961a:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800961c:	9109      	str	r1, [sp, #36]	@ 0x24
 800961e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009620:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009622:	ec55 4b10 	vmov	r4, r5, d0
 8009626:	ed8d 0b02 	vstr	d0, [sp, #8]
 800962a:	b97f      	cbnz	r7, 800964c <_dtoa_r+0x3c>
 800962c:	2010      	movs	r0, #16
 800962e:	f000 fdfd 	bl	800a22c <malloc>
 8009632:	4602      	mov	r2, r0
 8009634:	f8cb 001c 	str.w	r0, [fp, #28]
 8009638:	b920      	cbnz	r0, 8009644 <_dtoa_r+0x34>
 800963a:	4ba7      	ldr	r3, [pc, #668]	@ (80098d8 <_dtoa_r+0x2c8>)
 800963c:	21ef      	movs	r1, #239	@ 0xef
 800963e:	48a7      	ldr	r0, [pc, #668]	@ (80098dc <_dtoa_r+0x2cc>)
 8009640:	f001 fcd2 	bl	800afe8 <__assert_func>
 8009644:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009648:	6007      	str	r7, [r0, #0]
 800964a:	60c7      	str	r7, [r0, #12]
 800964c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009650:	6819      	ldr	r1, [r3, #0]
 8009652:	b159      	cbz	r1, 800966c <_dtoa_r+0x5c>
 8009654:	685a      	ldr	r2, [r3, #4]
 8009656:	2301      	movs	r3, #1
 8009658:	4658      	mov	r0, fp
 800965a:	4093      	lsls	r3, r2
 800965c:	604a      	str	r2, [r1, #4]
 800965e:	608b      	str	r3, [r1, #8]
 8009660:	f000 feda 	bl	800a418 <_Bfree>
 8009664:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009668:	2200      	movs	r2, #0
 800966a:	601a      	str	r2, [r3, #0]
 800966c:	1e2b      	subs	r3, r5, #0
 800966e:	bfb7      	itett	lt
 8009670:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009674:	2300      	movge	r3, #0
 8009676:	2201      	movlt	r2, #1
 8009678:	9303      	strlt	r3, [sp, #12]
 800967a:	bfa8      	it	ge
 800967c:	6033      	strge	r3, [r6, #0]
 800967e:	9f03      	ldr	r7, [sp, #12]
 8009680:	4b97      	ldr	r3, [pc, #604]	@ (80098e0 <_dtoa_r+0x2d0>)
 8009682:	bfb8      	it	lt
 8009684:	6032      	strlt	r2, [r6, #0]
 8009686:	43bb      	bics	r3, r7
 8009688:	d112      	bne.n	80096b0 <_dtoa_r+0xa0>
 800968a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800968e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009690:	6013      	str	r3, [r2, #0]
 8009692:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009696:	4323      	orrs	r3, r4
 8009698:	f000 854c 	beq.w	800a134 <_dtoa_r+0xb24>
 800969c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800969e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80098f4 <_dtoa_r+0x2e4>
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f000 854e 	beq.w	800a144 <_dtoa_r+0xb34>
 80096a8:	f10a 0303 	add.w	r3, sl, #3
 80096ac:	f000 bd48 	b.w	800a140 <_dtoa_r+0xb30>
 80096b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80096b4:	2200      	movs	r2, #0
 80096b6:	2300      	movs	r3, #0
 80096b8:	ec51 0b17 	vmov	r0, r1, d7
 80096bc:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80096c0:	f7f7 f9e6 	bl	8000a90 <__aeabi_dcmpeq>
 80096c4:	4680      	mov	r8, r0
 80096c6:	b158      	cbz	r0, 80096e0 <_dtoa_r+0xd0>
 80096c8:	2301      	movs	r3, #1
 80096ca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80096cc:	6013      	str	r3, [r2, #0]
 80096ce:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80096d0:	b113      	cbz	r3, 80096d8 <_dtoa_r+0xc8>
 80096d2:	4b84      	ldr	r3, [pc, #528]	@ (80098e4 <_dtoa_r+0x2d4>)
 80096d4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80096d6:	6013      	str	r3, [r2, #0]
 80096d8:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 80098f8 <_dtoa_r+0x2e8>
 80096dc:	f000 bd32 	b.w	800a144 <_dtoa_r+0xb34>
 80096e0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80096e4:	aa16      	add	r2, sp, #88	@ 0x58
 80096e6:	a917      	add	r1, sp, #92	@ 0x5c
 80096e8:	4658      	mov	r0, fp
 80096ea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80096ee:	f001 f983 	bl	800a9f8 <__d2b>
 80096f2:	4681      	mov	r9, r0
 80096f4:	2e00      	cmp	r6, #0
 80096f6:	d075      	beq.n	80097e4 <_dtoa_r+0x1d4>
 80096f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80096fa:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80096fe:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009702:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009706:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800970a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800970e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009712:	4619      	mov	r1, r3
 8009714:	2200      	movs	r2, #0
 8009716:	4b74      	ldr	r3, [pc, #464]	@ (80098e8 <_dtoa_r+0x2d8>)
 8009718:	f7f6 fd9a 	bl	8000250 <__aeabi_dsub>
 800971c:	a368      	add	r3, pc, #416	@ (adr r3, 80098c0 <_dtoa_r+0x2b0>)
 800971e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009722:	f7f6 ff4d 	bl	80005c0 <__aeabi_dmul>
 8009726:	a368      	add	r3, pc, #416	@ (adr r3, 80098c8 <_dtoa_r+0x2b8>)
 8009728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972c:	f7f6 fd92 	bl	8000254 <__adddf3>
 8009730:	4604      	mov	r4, r0
 8009732:	460d      	mov	r5, r1
 8009734:	4630      	mov	r0, r6
 8009736:	f7f6 fed9 	bl	80004ec <__aeabi_i2d>
 800973a:	a365      	add	r3, pc, #404	@ (adr r3, 80098d0 <_dtoa_r+0x2c0>)
 800973c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009740:	f7f6 ff3e 	bl	80005c0 <__aeabi_dmul>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	4620      	mov	r0, r4
 800974a:	4629      	mov	r1, r5
 800974c:	f7f6 fd82 	bl	8000254 <__adddf3>
 8009750:	4604      	mov	r4, r0
 8009752:	460d      	mov	r5, r1
 8009754:	f7f7 f9e4 	bl	8000b20 <__aeabi_d2iz>
 8009758:	2200      	movs	r2, #0
 800975a:	4607      	mov	r7, r0
 800975c:	2300      	movs	r3, #0
 800975e:	4620      	mov	r0, r4
 8009760:	4629      	mov	r1, r5
 8009762:	f7f7 f99f 	bl	8000aa4 <__aeabi_dcmplt>
 8009766:	b140      	cbz	r0, 800977a <_dtoa_r+0x16a>
 8009768:	4638      	mov	r0, r7
 800976a:	f7f6 febf 	bl	80004ec <__aeabi_i2d>
 800976e:	4622      	mov	r2, r4
 8009770:	462b      	mov	r3, r5
 8009772:	f7f7 f98d 	bl	8000a90 <__aeabi_dcmpeq>
 8009776:	b900      	cbnz	r0, 800977a <_dtoa_r+0x16a>
 8009778:	3f01      	subs	r7, #1
 800977a:	2f16      	cmp	r7, #22
 800977c:	d851      	bhi.n	8009822 <_dtoa_r+0x212>
 800977e:	4b5b      	ldr	r3, [pc, #364]	@ (80098ec <_dtoa_r+0x2dc>)
 8009780:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009784:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978c:	f7f7 f98a 	bl	8000aa4 <__aeabi_dcmplt>
 8009790:	2800      	cmp	r0, #0
 8009792:	d048      	beq.n	8009826 <_dtoa_r+0x216>
 8009794:	3f01      	subs	r7, #1
 8009796:	2300      	movs	r3, #0
 8009798:	9312      	str	r3, [sp, #72]	@ 0x48
 800979a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800979c:	1b9b      	subs	r3, r3, r6
 800979e:	1e5a      	subs	r2, r3, #1
 80097a0:	bf46      	itte	mi
 80097a2:	f1c3 0801 	rsbmi	r8, r3, #1
 80097a6:	2300      	movmi	r3, #0
 80097a8:	f04f 0800 	movpl.w	r8, #0
 80097ac:	9208      	str	r2, [sp, #32]
 80097ae:	bf48      	it	mi
 80097b0:	9308      	strmi	r3, [sp, #32]
 80097b2:	2f00      	cmp	r7, #0
 80097b4:	db39      	blt.n	800982a <_dtoa_r+0x21a>
 80097b6:	9b08      	ldr	r3, [sp, #32]
 80097b8:	970f      	str	r7, [sp, #60]	@ 0x3c
 80097ba:	443b      	add	r3, r7
 80097bc:	9308      	str	r3, [sp, #32]
 80097be:	2300      	movs	r3, #0
 80097c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80097c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097c4:	2b09      	cmp	r3, #9
 80097c6:	d864      	bhi.n	8009892 <_dtoa_r+0x282>
 80097c8:	2b05      	cmp	r3, #5
 80097ca:	bfc5      	ittet	gt
 80097cc:	3b04      	subgt	r3, #4
 80097ce:	2400      	movgt	r4, #0
 80097d0:	2401      	movle	r4, #1
 80097d2:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80097d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097d6:	3b02      	subs	r3, #2
 80097d8:	2b03      	cmp	r3, #3
 80097da:	d865      	bhi.n	80098a8 <_dtoa_r+0x298>
 80097dc:	e8df f003 	tbb	[pc, r3]
 80097e0:	5737392c 	.word	0x5737392c
 80097e4:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80097e8:	441e      	add	r6, r3
 80097ea:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80097ee:	2b20      	cmp	r3, #32
 80097f0:	bfc9      	itett	gt
 80097f2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80097f6:	f1c3 0320 	rsble	r3, r3, #32
 80097fa:	409f      	lslgt	r7, r3
 80097fc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009800:	bfd8      	it	le
 8009802:	fa04 f003 	lslle.w	r0, r4, r3
 8009806:	f106 36ff 	add.w	r6, r6, #4294967295
 800980a:	bfc4      	itt	gt
 800980c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009810:	ea47 0003 	orrgt.w	r0, r7, r3
 8009814:	f7f6 fe5a 	bl	80004cc <__aeabi_ui2d>
 8009818:	2201      	movs	r2, #1
 800981a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800981e:	9214      	str	r2, [sp, #80]	@ 0x50
 8009820:	e777      	b.n	8009712 <_dtoa_r+0x102>
 8009822:	2301      	movs	r3, #1
 8009824:	e7b8      	b.n	8009798 <_dtoa_r+0x188>
 8009826:	9012      	str	r0, [sp, #72]	@ 0x48
 8009828:	e7b7      	b.n	800979a <_dtoa_r+0x18a>
 800982a:	427b      	negs	r3, r7
 800982c:	eba8 0807 	sub.w	r8, r8, r7
 8009830:	930a      	str	r3, [sp, #40]	@ 0x28
 8009832:	2300      	movs	r3, #0
 8009834:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009836:	e7c4      	b.n	80097c2 <_dtoa_r+0x1b2>
 8009838:	2300      	movs	r3, #0
 800983a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800983c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800983e:	2b00      	cmp	r3, #0
 8009840:	dc35      	bgt.n	80098ae <_dtoa_r+0x29e>
 8009842:	2301      	movs	r3, #1
 8009844:	461a      	mov	r2, r3
 8009846:	9300      	str	r3, [sp, #0]
 8009848:	9307      	str	r3, [sp, #28]
 800984a:	920e      	str	r2, [sp, #56]	@ 0x38
 800984c:	e00b      	b.n	8009866 <_dtoa_r+0x256>
 800984e:	2301      	movs	r3, #1
 8009850:	e7f3      	b.n	800983a <_dtoa_r+0x22a>
 8009852:	2300      	movs	r3, #0
 8009854:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009856:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009858:	18fb      	adds	r3, r7, r3
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	3301      	adds	r3, #1
 800985e:	2b01      	cmp	r3, #1
 8009860:	9307      	str	r3, [sp, #28]
 8009862:	bfb8      	it	lt
 8009864:	2301      	movlt	r3, #1
 8009866:	f8db 001c 	ldr.w	r0, [fp, #28]
 800986a:	2100      	movs	r1, #0
 800986c:	2204      	movs	r2, #4
 800986e:	f102 0514 	add.w	r5, r2, #20
 8009872:	429d      	cmp	r5, r3
 8009874:	d91f      	bls.n	80098b6 <_dtoa_r+0x2a6>
 8009876:	6041      	str	r1, [r0, #4]
 8009878:	4658      	mov	r0, fp
 800987a:	f000 fd8d 	bl	800a398 <_Balloc>
 800987e:	4682      	mov	sl, r0
 8009880:	2800      	cmp	r0, #0
 8009882:	d13b      	bne.n	80098fc <_dtoa_r+0x2ec>
 8009884:	4b1a      	ldr	r3, [pc, #104]	@ (80098f0 <_dtoa_r+0x2e0>)
 8009886:	4602      	mov	r2, r0
 8009888:	f240 11af 	movw	r1, #431	@ 0x1af
 800988c:	e6d7      	b.n	800963e <_dtoa_r+0x2e>
 800988e:	2301      	movs	r3, #1
 8009890:	e7e0      	b.n	8009854 <_dtoa_r+0x244>
 8009892:	2401      	movs	r4, #1
 8009894:	2300      	movs	r3, #0
 8009896:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009898:	9309      	str	r3, [sp, #36]	@ 0x24
 800989a:	f04f 33ff 	mov.w	r3, #4294967295
 800989e:	2200      	movs	r2, #0
 80098a0:	9300      	str	r3, [sp, #0]
 80098a2:	9307      	str	r3, [sp, #28]
 80098a4:	2312      	movs	r3, #18
 80098a6:	e7d0      	b.n	800984a <_dtoa_r+0x23a>
 80098a8:	2301      	movs	r3, #1
 80098aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098ac:	e7f5      	b.n	800989a <_dtoa_r+0x28a>
 80098ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098b0:	9300      	str	r3, [sp, #0]
 80098b2:	9307      	str	r3, [sp, #28]
 80098b4:	e7d7      	b.n	8009866 <_dtoa_r+0x256>
 80098b6:	3101      	adds	r1, #1
 80098b8:	0052      	lsls	r2, r2, #1
 80098ba:	e7d8      	b.n	800986e <_dtoa_r+0x25e>
 80098bc:	f3af 8000 	nop.w
 80098c0:	636f4361 	.word	0x636f4361
 80098c4:	3fd287a7 	.word	0x3fd287a7
 80098c8:	8b60c8b3 	.word	0x8b60c8b3
 80098cc:	3fc68a28 	.word	0x3fc68a28
 80098d0:	509f79fb 	.word	0x509f79fb
 80098d4:	3fd34413 	.word	0x3fd34413
 80098d8:	0800e2c5 	.word	0x0800e2c5
 80098dc:	0800e2dc 	.word	0x0800e2dc
 80098e0:	7ff00000 	.word	0x7ff00000
 80098e4:	0800e295 	.word	0x0800e295
 80098e8:	3ff80000 	.word	0x3ff80000
 80098ec:	0800e3d8 	.word	0x0800e3d8
 80098f0:	0800e334 	.word	0x0800e334
 80098f4:	0800e2c1 	.word	0x0800e2c1
 80098f8:	0800e294 	.word	0x0800e294
 80098fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009900:	6018      	str	r0, [r3, #0]
 8009902:	9b07      	ldr	r3, [sp, #28]
 8009904:	2b0e      	cmp	r3, #14
 8009906:	f200 80a4 	bhi.w	8009a52 <_dtoa_r+0x442>
 800990a:	2c00      	cmp	r4, #0
 800990c:	f000 80a1 	beq.w	8009a52 <_dtoa_r+0x442>
 8009910:	2f00      	cmp	r7, #0
 8009912:	dd33      	ble.n	800997c <_dtoa_r+0x36c>
 8009914:	f007 020f 	and.w	r2, r7, #15
 8009918:	4bac      	ldr	r3, [pc, #688]	@ (8009bcc <_dtoa_r+0x5bc>)
 800991a:	05f8      	lsls	r0, r7, #23
 800991c:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009920:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009924:	ed93 7b00 	vldr	d7, [r3]
 8009928:	ed8d 7b04 	vstr	d7, [sp, #16]
 800992c:	d516      	bpl.n	800995c <_dtoa_r+0x34c>
 800992e:	4ba8      	ldr	r3, [pc, #672]	@ (8009bd0 <_dtoa_r+0x5c0>)
 8009930:	f004 040f 	and.w	r4, r4, #15
 8009934:	2603      	movs	r6, #3
 8009936:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800993a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800993e:	f7f6 ff69 	bl	8000814 <__aeabi_ddiv>
 8009942:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009946:	4da2      	ldr	r5, [pc, #648]	@ (8009bd0 <_dtoa_r+0x5c0>)
 8009948:	b954      	cbnz	r4, 8009960 <_dtoa_r+0x350>
 800994a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800994e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009952:	f7f6 ff5f 	bl	8000814 <__aeabi_ddiv>
 8009956:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800995a:	e028      	b.n	80099ae <_dtoa_r+0x39e>
 800995c:	2602      	movs	r6, #2
 800995e:	e7f2      	b.n	8009946 <_dtoa_r+0x336>
 8009960:	07e1      	lsls	r1, r4, #31
 8009962:	d508      	bpl.n	8009976 <_dtoa_r+0x366>
 8009964:	3601      	adds	r6, #1
 8009966:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800996a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800996e:	f7f6 fe27 	bl	80005c0 <__aeabi_dmul>
 8009972:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009976:	1064      	asrs	r4, r4, #1
 8009978:	3508      	adds	r5, #8
 800997a:	e7e5      	b.n	8009948 <_dtoa_r+0x338>
 800997c:	f000 80d2 	beq.w	8009b24 <_dtoa_r+0x514>
 8009980:	427c      	negs	r4, r7
 8009982:	4b92      	ldr	r3, [pc, #584]	@ (8009bcc <_dtoa_r+0x5bc>)
 8009984:	4d92      	ldr	r5, [pc, #584]	@ (8009bd0 <_dtoa_r+0x5c0>)
 8009986:	2602      	movs	r6, #2
 8009988:	f004 020f 	and.w	r2, r4, #15
 800998c:	1124      	asrs	r4, r4, #4
 800998e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009992:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999a:	f7f6 fe11 	bl	80005c0 <__aeabi_dmul>
 800999e:	2300      	movs	r3, #0
 80099a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099a4:	2c00      	cmp	r4, #0
 80099a6:	f040 80b2 	bne.w	8009b0e <_dtoa_r+0x4fe>
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1d3      	bne.n	8009956 <_dtoa_r+0x346>
 80099ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80099b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f000 80b7 	beq.w	8009b28 <_dtoa_r+0x518>
 80099ba:	2200      	movs	r2, #0
 80099bc:	4b85      	ldr	r3, [pc, #532]	@ (8009bd4 <_dtoa_r+0x5c4>)
 80099be:	4620      	mov	r0, r4
 80099c0:	4629      	mov	r1, r5
 80099c2:	f7f7 f86f 	bl	8000aa4 <__aeabi_dcmplt>
 80099c6:	2800      	cmp	r0, #0
 80099c8:	f000 80ae 	beq.w	8009b28 <_dtoa_r+0x518>
 80099cc:	9b07      	ldr	r3, [sp, #28]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f000 80aa 	beq.w	8009b28 <_dtoa_r+0x518>
 80099d4:	9b00      	ldr	r3, [sp, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	dd37      	ble.n	8009a4a <_dtoa_r+0x43a>
 80099da:	1e7b      	subs	r3, r7, #1
 80099dc:	4620      	mov	r0, r4
 80099de:	2200      	movs	r2, #0
 80099e0:	4629      	mov	r1, r5
 80099e2:	9304      	str	r3, [sp, #16]
 80099e4:	3601      	adds	r6, #1
 80099e6:	4b7c      	ldr	r3, [pc, #496]	@ (8009bd8 <_dtoa_r+0x5c8>)
 80099e8:	f7f6 fdea 	bl	80005c0 <__aeabi_dmul>
 80099ec:	9c00      	ldr	r4, [sp, #0]
 80099ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099f2:	4630      	mov	r0, r6
 80099f4:	f7f6 fd7a 	bl	80004ec <__aeabi_i2d>
 80099f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099fc:	f7f6 fde0 	bl	80005c0 <__aeabi_dmul>
 8009a00:	2200      	movs	r2, #0
 8009a02:	4b76      	ldr	r3, [pc, #472]	@ (8009bdc <_dtoa_r+0x5cc>)
 8009a04:	f7f6 fc26 	bl	8000254 <__adddf3>
 8009a08:	4605      	mov	r5, r0
 8009a0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009a0e:	2c00      	cmp	r4, #0
 8009a10:	f040 808d 	bne.w	8009b2e <_dtoa_r+0x51e>
 8009a14:	2200      	movs	r2, #0
 8009a16:	4b72      	ldr	r3, [pc, #456]	@ (8009be0 <_dtoa_r+0x5d0>)
 8009a18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a1c:	f7f6 fc18 	bl	8000250 <__aeabi_dsub>
 8009a20:	4602      	mov	r2, r0
 8009a22:	460b      	mov	r3, r1
 8009a24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a28:	462a      	mov	r2, r5
 8009a2a:	4633      	mov	r3, r6
 8009a2c:	f7f7 f858 	bl	8000ae0 <__aeabi_dcmpgt>
 8009a30:	2800      	cmp	r0, #0
 8009a32:	f040 828b 	bne.w	8009f4c <_dtoa_r+0x93c>
 8009a36:	462a      	mov	r2, r5
 8009a38:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009a3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a40:	f7f7 f830 	bl	8000aa4 <__aeabi_dcmplt>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	f040 8128 	bne.w	8009c9a <_dtoa_r+0x68a>
 8009a4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009a4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009a52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f2c0 815a 	blt.w	8009d0e <_dtoa_r+0x6fe>
 8009a5a:	2f0e      	cmp	r7, #14
 8009a5c:	f300 8157 	bgt.w	8009d0e <_dtoa_r+0x6fe>
 8009a60:	4b5a      	ldr	r3, [pc, #360]	@ (8009bcc <_dtoa_r+0x5bc>)
 8009a62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a66:	ed93 7b00 	vldr	d7, [r3]
 8009a6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	ed8d 7b00 	vstr	d7, [sp]
 8009a72:	da03      	bge.n	8009a7c <_dtoa_r+0x46c>
 8009a74:	9b07      	ldr	r3, [sp, #28]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f340 8101 	ble.w	8009c7e <_dtoa_r+0x66e>
 8009a7c:	4656      	mov	r6, sl
 8009a7e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009a82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a86:	4620      	mov	r0, r4
 8009a88:	4629      	mov	r1, r5
 8009a8a:	f7f6 fec3 	bl	8000814 <__aeabi_ddiv>
 8009a8e:	f7f7 f847 	bl	8000b20 <__aeabi_d2iz>
 8009a92:	4680      	mov	r8, r0
 8009a94:	f7f6 fd2a 	bl	80004ec <__aeabi_i2d>
 8009a98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a9c:	f7f6 fd90 	bl	80005c0 <__aeabi_dmul>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	4629      	mov	r1, r5
 8009aac:	f7f6 fbd0 	bl	8000250 <__aeabi_dsub>
 8009ab0:	9d07      	ldr	r5, [sp, #28]
 8009ab2:	f806 4b01 	strb.w	r4, [r6], #1
 8009ab6:	eba6 040a 	sub.w	r4, r6, sl
 8009aba:	4602      	mov	r2, r0
 8009abc:	460b      	mov	r3, r1
 8009abe:	42a5      	cmp	r5, r4
 8009ac0:	f040 8117 	bne.w	8009cf2 <_dtoa_r+0x6e2>
 8009ac4:	f7f6 fbc6 	bl	8000254 <__adddf3>
 8009ac8:	4604      	mov	r4, r0
 8009aca:	460d      	mov	r5, r1
 8009acc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ad0:	f7f7 f806 	bl	8000ae0 <__aeabi_dcmpgt>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	f040 80f9 	bne.w	8009ccc <_dtoa_r+0x6bc>
 8009ada:	4620      	mov	r0, r4
 8009adc:	4629      	mov	r1, r5
 8009ade:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ae2:	f7f6 ffd5 	bl	8000a90 <__aeabi_dcmpeq>
 8009ae6:	b118      	cbz	r0, 8009af0 <_dtoa_r+0x4e0>
 8009ae8:	f018 0f01 	tst.w	r8, #1
 8009aec:	f040 80ee 	bne.w	8009ccc <_dtoa_r+0x6bc>
 8009af0:	4649      	mov	r1, r9
 8009af2:	4658      	mov	r0, fp
 8009af4:	f000 fc90 	bl	800a418 <_Bfree>
 8009af8:	2300      	movs	r3, #0
 8009afa:	3701      	adds	r7, #1
 8009afc:	7033      	strb	r3, [r6, #0]
 8009afe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b00:	601f      	str	r7, [r3, #0]
 8009b02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f000 831d 	beq.w	800a144 <_dtoa_r+0xb34>
 8009b0a:	601e      	str	r6, [r3, #0]
 8009b0c:	e31a      	b.n	800a144 <_dtoa_r+0xb34>
 8009b0e:	07e2      	lsls	r2, r4, #31
 8009b10:	d505      	bpl.n	8009b1e <_dtoa_r+0x50e>
 8009b12:	3601      	adds	r6, #1
 8009b14:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b18:	f7f6 fd52 	bl	80005c0 <__aeabi_dmul>
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	1064      	asrs	r4, r4, #1
 8009b20:	3508      	adds	r5, #8
 8009b22:	e73f      	b.n	80099a4 <_dtoa_r+0x394>
 8009b24:	2602      	movs	r6, #2
 8009b26:	e742      	b.n	80099ae <_dtoa_r+0x39e>
 8009b28:	9c07      	ldr	r4, [sp, #28]
 8009b2a:	9704      	str	r7, [sp, #16]
 8009b2c:	e761      	b.n	80099f2 <_dtoa_r+0x3e2>
 8009b2e:	4b27      	ldr	r3, [pc, #156]	@ (8009bcc <_dtoa_r+0x5bc>)
 8009b30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b36:	4454      	add	r4, sl
 8009b38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b3c:	2900      	cmp	r1, #0
 8009b3e:	d053      	beq.n	8009be8 <_dtoa_r+0x5d8>
 8009b40:	2000      	movs	r0, #0
 8009b42:	4928      	ldr	r1, [pc, #160]	@ (8009be4 <_dtoa_r+0x5d4>)
 8009b44:	f7f6 fe66 	bl	8000814 <__aeabi_ddiv>
 8009b48:	4633      	mov	r3, r6
 8009b4a:	4656      	mov	r6, sl
 8009b4c:	462a      	mov	r2, r5
 8009b4e:	f7f6 fb7f 	bl	8000250 <__aeabi_dsub>
 8009b52:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009b56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b5a:	f7f6 ffe1 	bl	8000b20 <__aeabi_d2iz>
 8009b5e:	4605      	mov	r5, r0
 8009b60:	f7f6 fcc4 	bl	80004ec <__aeabi_i2d>
 8009b64:	4602      	mov	r2, r0
 8009b66:	460b      	mov	r3, r1
 8009b68:	3530      	adds	r5, #48	@ 0x30
 8009b6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b6e:	f7f6 fb6f 	bl	8000250 <__aeabi_dsub>
 8009b72:	4602      	mov	r2, r0
 8009b74:	460b      	mov	r3, r1
 8009b76:	f806 5b01 	strb.w	r5, [r6], #1
 8009b7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009b82:	f7f6 ff8f 	bl	8000aa4 <__aeabi_dcmplt>
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d171      	bne.n	8009c6e <_dtoa_r+0x65e>
 8009b8a:	2000      	movs	r0, #0
 8009b8c:	4911      	ldr	r1, [pc, #68]	@ (8009bd4 <_dtoa_r+0x5c4>)
 8009b8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b92:	f7f6 fb5d 	bl	8000250 <__aeabi_dsub>
 8009b96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009b9a:	f7f6 ff83 	bl	8000aa4 <__aeabi_dcmplt>
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	f040 8095 	bne.w	8009cce <_dtoa_r+0x6be>
 8009ba4:	42a6      	cmp	r6, r4
 8009ba6:	f43f af50 	beq.w	8009a4a <_dtoa_r+0x43a>
 8009baa:	2200      	movs	r2, #0
 8009bac:	4b0a      	ldr	r3, [pc, #40]	@ (8009bd8 <_dtoa_r+0x5c8>)
 8009bae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009bb2:	f7f6 fd05 	bl	80005c0 <__aeabi_dmul>
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	4b07      	ldr	r3, [pc, #28]	@ (8009bd8 <_dtoa_r+0x5c8>)
 8009bba:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009bbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bc2:	f7f6 fcfd 	bl	80005c0 <__aeabi_dmul>
 8009bc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bca:	e7c4      	b.n	8009b56 <_dtoa_r+0x546>
 8009bcc:	0800e3d8 	.word	0x0800e3d8
 8009bd0:	0800e3b0 	.word	0x0800e3b0
 8009bd4:	3ff00000 	.word	0x3ff00000
 8009bd8:	40240000 	.word	0x40240000
 8009bdc:	401c0000 	.word	0x401c0000
 8009be0:	40140000 	.word	0x40140000
 8009be4:	3fe00000 	.word	0x3fe00000
 8009be8:	4631      	mov	r1, r6
 8009bea:	4656      	mov	r6, sl
 8009bec:	4628      	mov	r0, r5
 8009bee:	f7f6 fce7 	bl	80005c0 <__aeabi_dmul>
 8009bf2:	9415      	str	r4, [sp, #84]	@ 0x54
 8009bf4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009bf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bfc:	f7f6 ff90 	bl	8000b20 <__aeabi_d2iz>
 8009c00:	4605      	mov	r5, r0
 8009c02:	f7f6 fc73 	bl	80004ec <__aeabi_i2d>
 8009c06:	4602      	mov	r2, r0
 8009c08:	3530      	adds	r5, #48	@ 0x30
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c10:	f7f6 fb1e 	bl	8000250 <__aeabi_dsub>
 8009c14:	f806 5b01 	strb.w	r5, [r6], #1
 8009c18:	4602      	mov	r2, r0
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	42a6      	cmp	r6, r4
 8009c1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c22:	f04f 0200 	mov.w	r2, #0
 8009c26:	d124      	bne.n	8009c72 <_dtoa_r+0x662>
 8009c28:	4bac      	ldr	r3, [pc, #688]	@ (8009edc <_dtoa_r+0x8cc>)
 8009c2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009c2e:	f7f6 fb11 	bl	8000254 <__adddf3>
 8009c32:	4602      	mov	r2, r0
 8009c34:	460b      	mov	r3, r1
 8009c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c3a:	f7f6 ff51 	bl	8000ae0 <__aeabi_dcmpgt>
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	d145      	bne.n	8009cce <_dtoa_r+0x6be>
 8009c42:	2000      	movs	r0, #0
 8009c44:	49a5      	ldr	r1, [pc, #660]	@ (8009edc <_dtoa_r+0x8cc>)
 8009c46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c4a:	f7f6 fb01 	bl	8000250 <__aeabi_dsub>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	460b      	mov	r3, r1
 8009c52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c56:	f7f6 ff25 	bl	8000aa4 <__aeabi_dcmplt>
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	f43f aef5 	beq.w	8009a4a <_dtoa_r+0x43a>
 8009c60:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009c62:	1e73      	subs	r3, r6, #1
 8009c64:	9315      	str	r3, [sp, #84]	@ 0x54
 8009c66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009c6a:	2b30      	cmp	r3, #48	@ 0x30
 8009c6c:	d0f8      	beq.n	8009c60 <_dtoa_r+0x650>
 8009c6e:	9f04      	ldr	r7, [sp, #16]
 8009c70:	e73e      	b.n	8009af0 <_dtoa_r+0x4e0>
 8009c72:	4b9b      	ldr	r3, [pc, #620]	@ (8009ee0 <_dtoa_r+0x8d0>)
 8009c74:	f7f6 fca4 	bl	80005c0 <__aeabi_dmul>
 8009c78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c7c:	e7bc      	b.n	8009bf8 <_dtoa_r+0x5e8>
 8009c7e:	d10c      	bne.n	8009c9a <_dtoa_r+0x68a>
 8009c80:	2200      	movs	r2, #0
 8009c82:	4b98      	ldr	r3, [pc, #608]	@ (8009ee4 <_dtoa_r+0x8d4>)
 8009c84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c88:	f7f6 fc9a 	bl	80005c0 <__aeabi_dmul>
 8009c8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c90:	f7f6 ff1c 	bl	8000acc <__aeabi_dcmpge>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	f000 8157 	beq.w	8009f48 <_dtoa_r+0x938>
 8009c9a:	2400      	movs	r4, #0
 8009c9c:	4625      	mov	r5, r4
 8009c9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ca0:	4656      	mov	r6, sl
 8009ca2:	43db      	mvns	r3, r3
 8009ca4:	9304      	str	r3, [sp, #16]
 8009ca6:	2700      	movs	r7, #0
 8009ca8:	4621      	mov	r1, r4
 8009caa:	4658      	mov	r0, fp
 8009cac:	f000 fbb4 	bl	800a418 <_Bfree>
 8009cb0:	2d00      	cmp	r5, #0
 8009cb2:	d0dc      	beq.n	8009c6e <_dtoa_r+0x65e>
 8009cb4:	b12f      	cbz	r7, 8009cc2 <_dtoa_r+0x6b2>
 8009cb6:	42af      	cmp	r7, r5
 8009cb8:	d003      	beq.n	8009cc2 <_dtoa_r+0x6b2>
 8009cba:	4639      	mov	r1, r7
 8009cbc:	4658      	mov	r0, fp
 8009cbe:	f000 fbab 	bl	800a418 <_Bfree>
 8009cc2:	4629      	mov	r1, r5
 8009cc4:	4658      	mov	r0, fp
 8009cc6:	f000 fba7 	bl	800a418 <_Bfree>
 8009cca:	e7d0      	b.n	8009c6e <_dtoa_r+0x65e>
 8009ccc:	9704      	str	r7, [sp, #16]
 8009cce:	4633      	mov	r3, r6
 8009cd0:	461e      	mov	r6, r3
 8009cd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cd6:	2a39      	cmp	r2, #57	@ 0x39
 8009cd8:	d107      	bne.n	8009cea <_dtoa_r+0x6da>
 8009cda:	459a      	cmp	sl, r3
 8009cdc:	d1f8      	bne.n	8009cd0 <_dtoa_r+0x6c0>
 8009cde:	9a04      	ldr	r2, [sp, #16]
 8009ce0:	3201      	adds	r2, #1
 8009ce2:	9204      	str	r2, [sp, #16]
 8009ce4:	2230      	movs	r2, #48	@ 0x30
 8009ce6:	f88a 2000 	strb.w	r2, [sl]
 8009cea:	781a      	ldrb	r2, [r3, #0]
 8009cec:	3201      	adds	r2, #1
 8009cee:	701a      	strb	r2, [r3, #0]
 8009cf0:	e7bd      	b.n	8009c6e <_dtoa_r+0x65e>
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	4b7a      	ldr	r3, [pc, #488]	@ (8009ee0 <_dtoa_r+0x8d0>)
 8009cf6:	f7f6 fc63 	bl	80005c0 <__aeabi_dmul>
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	4604      	mov	r4, r0
 8009d00:	460d      	mov	r5, r1
 8009d02:	f7f6 fec5 	bl	8000a90 <__aeabi_dcmpeq>
 8009d06:	2800      	cmp	r0, #0
 8009d08:	f43f aebb 	beq.w	8009a82 <_dtoa_r+0x472>
 8009d0c:	e6f0      	b.n	8009af0 <_dtoa_r+0x4e0>
 8009d0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009d10:	2a00      	cmp	r2, #0
 8009d12:	f000 80db 	beq.w	8009ecc <_dtoa_r+0x8bc>
 8009d16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d18:	2a01      	cmp	r2, #1
 8009d1a:	f300 80bf 	bgt.w	8009e9c <_dtoa_r+0x88c>
 8009d1e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009d20:	2a00      	cmp	r2, #0
 8009d22:	f000 80b7 	beq.w	8009e94 <_dtoa_r+0x884>
 8009d26:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009d2a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009d2c:	4646      	mov	r6, r8
 8009d2e:	9a08      	ldr	r2, [sp, #32]
 8009d30:	2101      	movs	r1, #1
 8009d32:	4658      	mov	r0, fp
 8009d34:	4498      	add	r8, r3
 8009d36:	441a      	add	r2, r3
 8009d38:	9208      	str	r2, [sp, #32]
 8009d3a:	f000 fc23 	bl	800a584 <__i2b>
 8009d3e:	4605      	mov	r5, r0
 8009d40:	b15e      	cbz	r6, 8009d5a <_dtoa_r+0x74a>
 8009d42:	9b08      	ldr	r3, [sp, #32]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	dd08      	ble.n	8009d5a <_dtoa_r+0x74a>
 8009d48:	42b3      	cmp	r3, r6
 8009d4a:	9a08      	ldr	r2, [sp, #32]
 8009d4c:	bfa8      	it	ge
 8009d4e:	4633      	movge	r3, r6
 8009d50:	eba8 0803 	sub.w	r8, r8, r3
 8009d54:	1af6      	subs	r6, r6, r3
 8009d56:	1ad3      	subs	r3, r2, r3
 8009d58:	9308      	str	r3, [sp, #32]
 8009d5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d5c:	b1f3      	cbz	r3, 8009d9c <_dtoa_r+0x78c>
 8009d5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f000 80b7 	beq.w	8009ed4 <_dtoa_r+0x8c4>
 8009d66:	b18c      	cbz	r4, 8009d8c <_dtoa_r+0x77c>
 8009d68:	4629      	mov	r1, r5
 8009d6a:	4622      	mov	r2, r4
 8009d6c:	4658      	mov	r0, fp
 8009d6e:	f000 fcc9 	bl	800a704 <__pow5mult>
 8009d72:	464a      	mov	r2, r9
 8009d74:	4601      	mov	r1, r0
 8009d76:	4605      	mov	r5, r0
 8009d78:	4658      	mov	r0, fp
 8009d7a:	f000 fc19 	bl	800a5b0 <__multiply>
 8009d7e:	4649      	mov	r1, r9
 8009d80:	9004      	str	r0, [sp, #16]
 8009d82:	4658      	mov	r0, fp
 8009d84:	f000 fb48 	bl	800a418 <_Bfree>
 8009d88:	9b04      	ldr	r3, [sp, #16]
 8009d8a:	4699      	mov	r9, r3
 8009d8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d8e:	1b1a      	subs	r2, r3, r4
 8009d90:	d004      	beq.n	8009d9c <_dtoa_r+0x78c>
 8009d92:	4649      	mov	r1, r9
 8009d94:	4658      	mov	r0, fp
 8009d96:	f000 fcb5 	bl	800a704 <__pow5mult>
 8009d9a:	4681      	mov	r9, r0
 8009d9c:	2101      	movs	r1, #1
 8009d9e:	4658      	mov	r0, fp
 8009da0:	f000 fbf0 	bl	800a584 <__i2b>
 8009da4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009da6:	4604      	mov	r4, r0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	f000 81cf 	beq.w	800a14c <_dtoa_r+0xb3c>
 8009dae:	461a      	mov	r2, r3
 8009db0:	4601      	mov	r1, r0
 8009db2:	4658      	mov	r0, fp
 8009db4:	f000 fca6 	bl	800a704 <__pow5mult>
 8009db8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dba:	4604      	mov	r4, r0
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	f300 8095 	bgt.w	8009eec <_dtoa_r+0x8dc>
 8009dc2:	9b02      	ldr	r3, [sp, #8]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f040 8087 	bne.w	8009ed8 <_dtoa_r+0x8c8>
 8009dca:	9b03      	ldr	r3, [sp, #12]
 8009dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	f040 8089 	bne.w	8009ee8 <_dtoa_r+0x8d8>
 8009dd6:	9b03      	ldr	r3, [sp, #12]
 8009dd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009ddc:	0d1b      	lsrs	r3, r3, #20
 8009dde:	051b      	lsls	r3, r3, #20
 8009de0:	b12b      	cbz	r3, 8009dee <_dtoa_r+0x7de>
 8009de2:	9b08      	ldr	r3, [sp, #32]
 8009de4:	f108 0801 	add.w	r8, r8, #1
 8009de8:	3301      	adds	r3, #1
 8009dea:	9308      	str	r3, [sp, #32]
 8009dec:	2301      	movs	r3, #1
 8009dee:	930a      	str	r3, [sp, #40]	@ 0x28
 8009df0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f000 81b0 	beq.w	800a158 <_dtoa_r+0xb48>
 8009df8:	6923      	ldr	r3, [r4, #16]
 8009dfa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009dfe:	6918      	ldr	r0, [r3, #16]
 8009e00:	f000 fb74 	bl	800a4ec <__hi0bits>
 8009e04:	f1c0 0020 	rsb	r0, r0, #32
 8009e08:	9b08      	ldr	r3, [sp, #32]
 8009e0a:	4418      	add	r0, r3
 8009e0c:	f010 001f 	ands.w	r0, r0, #31
 8009e10:	d077      	beq.n	8009f02 <_dtoa_r+0x8f2>
 8009e12:	f1c0 0320 	rsb	r3, r0, #32
 8009e16:	2b04      	cmp	r3, #4
 8009e18:	dd6b      	ble.n	8009ef2 <_dtoa_r+0x8e2>
 8009e1a:	f1c0 001c 	rsb	r0, r0, #28
 8009e1e:	9b08      	ldr	r3, [sp, #32]
 8009e20:	4480      	add	r8, r0
 8009e22:	4403      	add	r3, r0
 8009e24:	4406      	add	r6, r0
 8009e26:	9308      	str	r3, [sp, #32]
 8009e28:	f1b8 0f00 	cmp.w	r8, #0
 8009e2c:	dd05      	ble.n	8009e3a <_dtoa_r+0x82a>
 8009e2e:	4649      	mov	r1, r9
 8009e30:	4642      	mov	r2, r8
 8009e32:	4658      	mov	r0, fp
 8009e34:	f000 fcc0 	bl	800a7b8 <__lshift>
 8009e38:	4681      	mov	r9, r0
 8009e3a:	9b08      	ldr	r3, [sp, #32]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	dd05      	ble.n	8009e4c <_dtoa_r+0x83c>
 8009e40:	4621      	mov	r1, r4
 8009e42:	461a      	mov	r2, r3
 8009e44:	4658      	mov	r0, fp
 8009e46:	f000 fcb7 	bl	800a7b8 <__lshift>
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d059      	beq.n	8009f06 <_dtoa_r+0x8f6>
 8009e52:	4621      	mov	r1, r4
 8009e54:	4648      	mov	r0, r9
 8009e56:	f000 fd1b 	bl	800a890 <__mcmp>
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	da53      	bge.n	8009f06 <_dtoa_r+0x8f6>
 8009e5e:	1e7b      	subs	r3, r7, #1
 8009e60:	4649      	mov	r1, r9
 8009e62:	220a      	movs	r2, #10
 8009e64:	4658      	mov	r0, fp
 8009e66:	9304      	str	r3, [sp, #16]
 8009e68:	2300      	movs	r3, #0
 8009e6a:	f000 faf7 	bl	800a45c <__multadd>
 8009e6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e70:	4681      	mov	r9, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	f000 8172 	beq.w	800a15c <_dtoa_r+0xb4c>
 8009e78:	2300      	movs	r3, #0
 8009e7a:	4629      	mov	r1, r5
 8009e7c:	220a      	movs	r2, #10
 8009e7e:	4658      	mov	r0, fp
 8009e80:	f000 faec 	bl	800a45c <__multadd>
 8009e84:	9b00      	ldr	r3, [sp, #0]
 8009e86:	4605      	mov	r5, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	dc67      	bgt.n	8009f5c <_dtoa_r+0x94c>
 8009e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	dc41      	bgt.n	8009f16 <_dtoa_r+0x906>
 8009e92:	e063      	b.n	8009f5c <_dtoa_r+0x94c>
 8009e94:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009e96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009e9a:	e746      	b.n	8009d2a <_dtoa_r+0x71a>
 8009e9c:	9b07      	ldr	r3, [sp, #28]
 8009e9e:	1e5c      	subs	r4, r3, #1
 8009ea0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ea2:	42a3      	cmp	r3, r4
 8009ea4:	bfb7      	itett	lt
 8009ea6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009ea8:	1b1c      	subge	r4, r3, r4
 8009eaa:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009eac:	1ae3      	sublt	r3, r4, r3
 8009eae:	bfbe      	ittt	lt
 8009eb0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009eb2:	2400      	movlt	r4, #0
 8009eb4:	18d2      	addlt	r2, r2, r3
 8009eb6:	9b07      	ldr	r3, [sp, #28]
 8009eb8:	bfb8      	it	lt
 8009eba:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	bfb5      	itete	lt
 8009ec0:	eba8 0603 	sublt.w	r6, r8, r3
 8009ec4:	4646      	movge	r6, r8
 8009ec6:	2300      	movlt	r3, #0
 8009ec8:	9b07      	ldrge	r3, [sp, #28]
 8009eca:	e730      	b.n	8009d2e <_dtoa_r+0x71e>
 8009ecc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009ece:	4646      	mov	r6, r8
 8009ed0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009ed2:	e735      	b.n	8009d40 <_dtoa_r+0x730>
 8009ed4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ed6:	e75c      	b.n	8009d92 <_dtoa_r+0x782>
 8009ed8:	2300      	movs	r3, #0
 8009eda:	e788      	b.n	8009dee <_dtoa_r+0x7de>
 8009edc:	3fe00000 	.word	0x3fe00000
 8009ee0:	40240000 	.word	0x40240000
 8009ee4:	40140000 	.word	0x40140000
 8009ee8:	9b02      	ldr	r3, [sp, #8]
 8009eea:	e780      	b.n	8009dee <_dtoa_r+0x7de>
 8009eec:	2300      	movs	r3, #0
 8009eee:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ef0:	e782      	b.n	8009df8 <_dtoa_r+0x7e8>
 8009ef2:	d099      	beq.n	8009e28 <_dtoa_r+0x818>
 8009ef4:	331c      	adds	r3, #28
 8009ef6:	9a08      	ldr	r2, [sp, #32]
 8009ef8:	441a      	add	r2, r3
 8009efa:	4498      	add	r8, r3
 8009efc:	441e      	add	r6, r3
 8009efe:	9208      	str	r2, [sp, #32]
 8009f00:	e792      	b.n	8009e28 <_dtoa_r+0x818>
 8009f02:	4603      	mov	r3, r0
 8009f04:	e7f6      	b.n	8009ef4 <_dtoa_r+0x8e4>
 8009f06:	9b07      	ldr	r3, [sp, #28]
 8009f08:	9704      	str	r7, [sp, #16]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	dc20      	bgt.n	8009f50 <_dtoa_r+0x940>
 8009f0e:	9300      	str	r3, [sp, #0]
 8009f10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	dd1e      	ble.n	8009f54 <_dtoa_r+0x944>
 8009f16:	9b00      	ldr	r3, [sp, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	f47f aec0 	bne.w	8009c9e <_dtoa_r+0x68e>
 8009f1e:	4621      	mov	r1, r4
 8009f20:	2205      	movs	r2, #5
 8009f22:	4658      	mov	r0, fp
 8009f24:	f000 fa9a 	bl	800a45c <__multadd>
 8009f28:	4601      	mov	r1, r0
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	4648      	mov	r0, r9
 8009f2e:	f000 fcaf 	bl	800a890 <__mcmp>
 8009f32:	2800      	cmp	r0, #0
 8009f34:	f77f aeb3 	ble.w	8009c9e <_dtoa_r+0x68e>
 8009f38:	2331      	movs	r3, #49	@ 0x31
 8009f3a:	4656      	mov	r6, sl
 8009f3c:	f806 3b01 	strb.w	r3, [r6], #1
 8009f40:	9b04      	ldr	r3, [sp, #16]
 8009f42:	3301      	adds	r3, #1
 8009f44:	9304      	str	r3, [sp, #16]
 8009f46:	e6ae      	b.n	8009ca6 <_dtoa_r+0x696>
 8009f48:	9c07      	ldr	r4, [sp, #28]
 8009f4a:	9704      	str	r7, [sp, #16]
 8009f4c:	4625      	mov	r5, r4
 8009f4e:	e7f3      	b.n	8009f38 <_dtoa_r+0x928>
 8009f50:	9b07      	ldr	r3, [sp, #28]
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	f000 8104 	beq.w	800a164 <_dtoa_r+0xb54>
 8009f5c:	2e00      	cmp	r6, #0
 8009f5e:	dd05      	ble.n	8009f6c <_dtoa_r+0x95c>
 8009f60:	4629      	mov	r1, r5
 8009f62:	4632      	mov	r2, r6
 8009f64:	4658      	mov	r0, fp
 8009f66:	f000 fc27 	bl	800a7b8 <__lshift>
 8009f6a:	4605      	mov	r5, r0
 8009f6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d05a      	beq.n	800a028 <_dtoa_r+0xa18>
 8009f72:	6869      	ldr	r1, [r5, #4]
 8009f74:	4658      	mov	r0, fp
 8009f76:	f000 fa0f 	bl	800a398 <_Balloc>
 8009f7a:	4606      	mov	r6, r0
 8009f7c:	b928      	cbnz	r0, 8009f8a <_dtoa_r+0x97a>
 8009f7e:	4b84      	ldr	r3, [pc, #528]	@ (800a190 <_dtoa_r+0xb80>)
 8009f80:	4602      	mov	r2, r0
 8009f82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009f86:	f7ff bb5a 	b.w	800963e <_dtoa_r+0x2e>
 8009f8a:	692a      	ldr	r2, [r5, #16]
 8009f8c:	f105 010c 	add.w	r1, r5, #12
 8009f90:	300c      	adds	r0, #12
 8009f92:	3202      	adds	r2, #2
 8009f94:	0092      	lsls	r2, r2, #2
 8009f96:	f001 f819 	bl	800afcc <memcpy>
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	4631      	mov	r1, r6
 8009f9e:	4658      	mov	r0, fp
 8009fa0:	f000 fc0a 	bl	800a7b8 <__lshift>
 8009fa4:	f10a 0301 	add.w	r3, sl, #1
 8009fa8:	462f      	mov	r7, r5
 8009faa:	4605      	mov	r5, r0
 8009fac:	9307      	str	r3, [sp, #28]
 8009fae:	9b00      	ldr	r3, [sp, #0]
 8009fb0:	4453      	add	r3, sl
 8009fb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fb4:	9b02      	ldr	r3, [sp, #8]
 8009fb6:	f003 0301 	and.w	r3, r3, #1
 8009fba:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fbc:	9b07      	ldr	r3, [sp, #28]
 8009fbe:	4621      	mov	r1, r4
 8009fc0:	4648      	mov	r0, r9
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	9300      	str	r3, [sp, #0]
 8009fc6:	f7ff fa96 	bl	80094f6 <quorem>
 8009fca:	4639      	mov	r1, r7
 8009fcc:	9002      	str	r0, [sp, #8]
 8009fce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009fd2:	4648      	mov	r0, r9
 8009fd4:	f000 fc5c 	bl	800a890 <__mcmp>
 8009fd8:	462a      	mov	r2, r5
 8009fda:	9008      	str	r0, [sp, #32]
 8009fdc:	4621      	mov	r1, r4
 8009fde:	4658      	mov	r0, fp
 8009fe0:	f000 fc72 	bl	800a8c8 <__mdiff>
 8009fe4:	68c2      	ldr	r2, [r0, #12]
 8009fe6:	4606      	mov	r6, r0
 8009fe8:	bb02      	cbnz	r2, 800a02c <_dtoa_r+0xa1c>
 8009fea:	4601      	mov	r1, r0
 8009fec:	4648      	mov	r0, r9
 8009fee:	f000 fc4f 	bl	800a890 <__mcmp>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	4631      	mov	r1, r6
 8009ff6:	4658      	mov	r0, fp
 8009ff8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ffa:	f000 fa0d 	bl	800a418 <_Bfree>
 8009ffe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a000:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a002:	9e07      	ldr	r6, [sp, #28]
 800a004:	ea43 0102 	orr.w	r1, r3, r2
 800a008:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a00a:	4319      	orrs	r1, r3
 800a00c:	d110      	bne.n	800a030 <_dtoa_r+0xa20>
 800a00e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a012:	d029      	beq.n	800a068 <_dtoa_r+0xa58>
 800a014:	9b08      	ldr	r3, [sp, #32]
 800a016:	2b00      	cmp	r3, #0
 800a018:	dd02      	ble.n	800a020 <_dtoa_r+0xa10>
 800a01a:	9b02      	ldr	r3, [sp, #8]
 800a01c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a020:	9b00      	ldr	r3, [sp, #0]
 800a022:	f883 8000 	strb.w	r8, [r3]
 800a026:	e63f      	b.n	8009ca8 <_dtoa_r+0x698>
 800a028:	4628      	mov	r0, r5
 800a02a:	e7bb      	b.n	8009fa4 <_dtoa_r+0x994>
 800a02c:	2201      	movs	r2, #1
 800a02e:	e7e1      	b.n	8009ff4 <_dtoa_r+0x9e4>
 800a030:	9b08      	ldr	r3, [sp, #32]
 800a032:	2b00      	cmp	r3, #0
 800a034:	db04      	blt.n	800a040 <_dtoa_r+0xa30>
 800a036:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a038:	430b      	orrs	r3, r1
 800a03a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a03c:	430b      	orrs	r3, r1
 800a03e:	d120      	bne.n	800a082 <_dtoa_r+0xa72>
 800a040:	2a00      	cmp	r2, #0
 800a042:	dded      	ble.n	800a020 <_dtoa_r+0xa10>
 800a044:	4649      	mov	r1, r9
 800a046:	2201      	movs	r2, #1
 800a048:	4658      	mov	r0, fp
 800a04a:	f000 fbb5 	bl	800a7b8 <__lshift>
 800a04e:	4621      	mov	r1, r4
 800a050:	4681      	mov	r9, r0
 800a052:	f000 fc1d 	bl	800a890 <__mcmp>
 800a056:	2800      	cmp	r0, #0
 800a058:	dc03      	bgt.n	800a062 <_dtoa_r+0xa52>
 800a05a:	d1e1      	bne.n	800a020 <_dtoa_r+0xa10>
 800a05c:	f018 0f01 	tst.w	r8, #1
 800a060:	d0de      	beq.n	800a020 <_dtoa_r+0xa10>
 800a062:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a066:	d1d8      	bne.n	800a01a <_dtoa_r+0xa0a>
 800a068:	2339      	movs	r3, #57	@ 0x39
 800a06a:	9a00      	ldr	r2, [sp, #0]
 800a06c:	7013      	strb	r3, [r2, #0]
 800a06e:	4633      	mov	r3, r6
 800a070:	461e      	mov	r6, r3
 800a072:	3b01      	subs	r3, #1
 800a074:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a078:	2a39      	cmp	r2, #57	@ 0x39
 800a07a:	d052      	beq.n	800a122 <_dtoa_r+0xb12>
 800a07c:	3201      	adds	r2, #1
 800a07e:	701a      	strb	r2, [r3, #0]
 800a080:	e612      	b.n	8009ca8 <_dtoa_r+0x698>
 800a082:	2a00      	cmp	r2, #0
 800a084:	dd07      	ble.n	800a096 <_dtoa_r+0xa86>
 800a086:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a08a:	d0ed      	beq.n	800a068 <_dtoa_r+0xa58>
 800a08c:	f108 0301 	add.w	r3, r8, #1
 800a090:	9a00      	ldr	r2, [sp, #0]
 800a092:	7013      	strb	r3, [r2, #0]
 800a094:	e608      	b.n	8009ca8 <_dtoa_r+0x698>
 800a096:	9b07      	ldr	r3, [sp, #28]
 800a098:	9a07      	ldr	r2, [sp, #28]
 800a09a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a09e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d028      	beq.n	800a0f6 <_dtoa_r+0xae6>
 800a0a4:	4649      	mov	r1, r9
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	220a      	movs	r2, #10
 800a0aa:	4658      	mov	r0, fp
 800a0ac:	f000 f9d6 	bl	800a45c <__multadd>
 800a0b0:	42af      	cmp	r7, r5
 800a0b2:	4681      	mov	r9, r0
 800a0b4:	f04f 0300 	mov.w	r3, #0
 800a0b8:	f04f 020a 	mov.w	r2, #10
 800a0bc:	4639      	mov	r1, r7
 800a0be:	4658      	mov	r0, fp
 800a0c0:	d107      	bne.n	800a0d2 <_dtoa_r+0xac2>
 800a0c2:	f000 f9cb 	bl	800a45c <__multadd>
 800a0c6:	4607      	mov	r7, r0
 800a0c8:	4605      	mov	r5, r0
 800a0ca:	9b07      	ldr	r3, [sp, #28]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	9307      	str	r3, [sp, #28]
 800a0d0:	e774      	b.n	8009fbc <_dtoa_r+0x9ac>
 800a0d2:	f000 f9c3 	bl	800a45c <__multadd>
 800a0d6:	4629      	mov	r1, r5
 800a0d8:	4607      	mov	r7, r0
 800a0da:	2300      	movs	r3, #0
 800a0dc:	220a      	movs	r2, #10
 800a0de:	4658      	mov	r0, fp
 800a0e0:	f000 f9bc 	bl	800a45c <__multadd>
 800a0e4:	4605      	mov	r5, r0
 800a0e6:	e7f0      	b.n	800a0ca <_dtoa_r+0xaba>
 800a0e8:	9b00      	ldr	r3, [sp, #0]
 800a0ea:	2700      	movs	r7, #0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	bfcc      	ite	gt
 800a0f0:	461e      	movgt	r6, r3
 800a0f2:	2601      	movle	r6, #1
 800a0f4:	4456      	add	r6, sl
 800a0f6:	4649      	mov	r1, r9
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	4658      	mov	r0, fp
 800a0fc:	f000 fb5c 	bl	800a7b8 <__lshift>
 800a100:	4621      	mov	r1, r4
 800a102:	4681      	mov	r9, r0
 800a104:	f000 fbc4 	bl	800a890 <__mcmp>
 800a108:	2800      	cmp	r0, #0
 800a10a:	dcb0      	bgt.n	800a06e <_dtoa_r+0xa5e>
 800a10c:	d102      	bne.n	800a114 <_dtoa_r+0xb04>
 800a10e:	f018 0f01 	tst.w	r8, #1
 800a112:	d1ac      	bne.n	800a06e <_dtoa_r+0xa5e>
 800a114:	4633      	mov	r3, r6
 800a116:	461e      	mov	r6, r3
 800a118:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a11c:	2a30      	cmp	r2, #48	@ 0x30
 800a11e:	d0fa      	beq.n	800a116 <_dtoa_r+0xb06>
 800a120:	e5c2      	b.n	8009ca8 <_dtoa_r+0x698>
 800a122:	459a      	cmp	sl, r3
 800a124:	d1a4      	bne.n	800a070 <_dtoa_r+0xa60>
 800a126:	9b04      	ldr	r3, [sp, #16]
 800a128:	3301      	adds	r3, #1
 800a12a:	9304      	str	r3, [sp, #16]
 800a12c:	2331      	movs	r3, #49	@ 0x31
 800a12e:	f88a 3000 	strb.w	r3, [sl]
 800a132:	e5b9      	b.n	8009ca8 <_dtoa_r+0x698>
 800a134:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a136:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a194 <_dtoa_r+0xb84>
 800a13a:	b11b      	cbz	r3, 800a144 <_dtoa_r+0xb34>
 800a13c:	f10a 0308 	add.w	r3, sl, #8
 800a140:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a142:	6013      	str	r3, [r2, #0]
 800a144:	4650      	mov	r0, sl
 800a146:	b019      	add	sp, #100	@ 0x64
 800a148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a14c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a14e:	2b01      	cmp	r3, #1
 800a150:	f77f ae37 	ble.w	8009dc2 <_dtoa_r+0x7b2>
 800a154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a156:	930a      	str	r3, [sp, #40]	@ 0x28
 800a158:	2001      	movs	r0, #1
 800a15a:	e655      	b.n	8009e08 <_dtoa_r+0x7f8>
 800a15c:	9b00      	ldr	r3, [sp, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	f77f aed6 	ble.w	8009f10 <_dtoa_r+0x900>
 800a164:	4656      	mov	r6, sl
 800a166:	4621      	mov	r1, r4
 800a168:	4648      	mov	r0, r9
 800a16a:	f7ff f9c4 	bl	80094f6 <quorem>
 800a16e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a172:	9b00      	ldr	r3, [sp, #0]
 800a174:	f806 8b01 	strb.w	r8, [r6], #1
 800a178:	eba6 020a 	sub.w	r2, r6, sl
 800a17c:	4293      	cmp	r3, r2
 800a17e:	ddb3      	ble.n	800a0e8 <_dtoa_r+0xad8>
 800a180:	4649      	mov	r1, r9
 800a182:	2300      	movs	r3, #0
 800a184:	220a      	movs	r2, #10
 800a186:	4658      	mov	r0, fp
 800a188:	f000 f968 	bl	800a45c <__multadd>
 800a18c:	4681      	mov	r9, r0
 800a18e:	e7ea      	b.n	800a166 <_dtoa_r+0xb56>
 800a190:	0800e334 	.word	0x0800e334
 800a194:	0800e2b8 	.word	0x0800e2b8

0800a198 <_free_r>:
 800a198:	b538      	push	{r3, r4, r5, lr}
 800a19a:	4605      	mov	r5, r0
 800a19c:	2900      	cmp	r1, #0
 800a19e:	d041      	beq.n	800a224 <_free_r+0x8c>
 800a1a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1a4:	1f0c      	subs	r4, r1, #4
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	bfb8      	it	lt
 800a1aa:	18e4      	addlt	r4, r4, r3
 800a1ac:	f000 f8e8 	bl	800a380 <__malloc_lock>
 800a1b0:	4a1d      	ldr	r2, [pc, #116]	@ (800a228 <_free_r+0x90>)
 800a1b2:	6813      	ldr	r3, [r2, #0]
 800a1b4:	b933      	cbnz	r3, 800a1c4 <_free_r+0x2c>
 800a1b6:	6063      	str	r3, [r4, #4]
 800a1b8:	6014      	str	r4, [r2, #0]
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1c0:	f000 b8e4 	b.w	800a38c <__malloc_unlock>
 800a1c4:	42a3      	cmp	r3, r4
 800a1c6:	d908      	bls.n	800a1da <_free_r+0x42>
 800a1c8:	6820      	ldr	r0, [r4, #0]
 800a1ca:	1821      	adds	r1, r4, r0
 800a1cc:	428b      	cmp	r3, r1
 800a1ce:	bf01      	itttt	eq
 800a1d0:	6819      	ldreq	r1, [r3, #0]
 800a1d2:	685b      	ldreq	r3, [r3, #4]
 800a1d4:	1809      	addeq	r1, r1, r0
 800a1d6:	6021      	streq	r1, [r4, #0]
 800a1d8:	e7ed      	b.n	800a1b6 <_free_r+0x1e>
 800a1da:	461a      	mov	r2, r3
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	b10b      	cbz	r3, 800a1e4 <_free_r+0x4c>
 800a1e0:	42a3      	cmp	r3, r4
 800a1e2:	d9fa      	bls.n	800a1da <_free_r+0x42>
 800a1e4:	6811      	ldr	r1, [r2, #0]
 800a1e6:	1850      	adds	r0, r2, r1
 800a1e8:	42a0      	cmp	r0, r4
 800a1ea:	d10b      	bne.n	800a204 <_free_r+0x6c>
 800a1ec:	6820      	ldr	r0, [r4, #0]
 800a1ee:	4401      	add	r1, r0
 800a1f0:	1850      	adds	r0, r2, r1
 800a1f2:	6011      	str	r1, [r2, #0]
 800a1f4:	4283      	cmp	r3, r0
 800a1f6:	d1e0      	bne.n	800a1ba <_free_r+0x22>
 800a1f8:	6818      	ldr	r0, [r3, #0]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	4408      	add	r0, r1
 800a1fe:	6053      	str	r3, [r2, #4]
 800a200:	6010      	str	r0, [r2, #0]
 800a202:	e7da      	b.n	800a1ba <_free_r+0x22>
 800a204:	d902      	bls.n	800a20c <_free_r+0x74>
 800a206:	230c      	movs	r3, #12
 800a208:	602b      	str	r3, [r5, #0]
 800a20a:	e7d6      	b.n	800a1ba <_free_r+0x22>
 800a20c:	6820      	ldr	r0, [r4, #0]
 800a20e:	1821      	adds	r1, r4, r0
 800a210:	428b      	cmp	r3, r1
 800a212:	bf02      	ittt	eq
 800a214:	6819      	ldreq	r1, [r3, #0]
 800a216:	685b      	ldreq	r3, [r3, #4]
 800a218:	1809      	addeq	r1, r1, r0
 800a21a:	6063      	str	r3, [r4, #4]
 800a21c:	bf08      	it	eq
 800a21e:	6021      	streq	r1, [r4, #0]
 800a220:	6054      	str	r4, [r2, #4]
 800a222:	e7ca      	b.n	800a1ba <_free_r+0x22>
 800a224:	bd38      	pop	{r3, r4, r5, pc}
 800a226:	bf00      	nop
 800a228:	200008c8 	.word	0x200008c8

0800a22c <malloc>:
 800a22c:	4b02      	ldr	r3, [pc, #8]	@ (800a238 <malloc+0xc>)
 800a22e:	4601      	mov	r1, r0
 800a230:	6818      	ldr	r0, [r3, #0]
 800a232:	f000 b825 	b.w	800a280 <_malloc_r>
 800a236:	bf00      	nop
 800a238:	20000020 	.word	0x20000020

0800a23c <sbrk_aligned>:
 800a23c:	b570      	push	{r4, r5, r6, lr}
 800a23e:	4e0f      	ldr	r6, [pc, #60]	@ (800a27c <sbrk_aligned+0x40>)
 800a240:	460c      	mov	r4, r1
 800a242:	4605      	mov	r5, r0
 800a244:	6831      	ldr	r1, [r6, #0]
 800a246:	b911      	cbnz	r1, 800a24e <sbrk_aligned+0x12>
 800a248:	f000 feb0 	bl	800afac <_sbrk_r>
 800a24c:	6030      	str	r0, [r6, #0]
 800a24e:	4621      	mov	r1, r4
 800a250:	4628      	mov	r0, r5
 800a252:	f000 feab 	bl	800afac <_sbrk_r>
 800a256:	1c43      	adds	r3, r0, #1
 800a258:	d103      	bne.n	800a262 <sbrk_aligned+0x26>
 800a25a:	f04f 34ff 	mov.w	r4, #4294967295
 800a25e:	4620      	mov	r0, r4
 800a260:	bd70      	pop	{r4, r5, r6, pc}
 800a262:	1cc4      	adds	r4, r0, #3
 800a264:	f024 0403 	bic.w	r4, r4, #3
 800a268:	42a0      	cmp	r0, r4
 800a26a:	d0f8      	beq.n	800a25e <sbrk_aligned+0x22>
 800a26c:	1a21      	subs	r1, r4, r0
 800a26e:	4628      	mov	r0, r5
 800a270:	f000 fe9c 	bl	800afac <_sbrk_r>
 800a274:	3001      	adds	r0, #1
 800a276:	d1f2      	bne.n	800a25e <sbrk_aligned+0x22>
 800a278:	e7ef      	b.n	800a25a <sbrk_aligned+0x1e>
 800a27a:	bf00      	nop
 800a27c:	200008c4 	.word	0x200008c4

0800a280 <_malloc_r>:
 800a280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a284:	1ccd      	adds	r5, r1, #3
 800a286:	4606      	mov	r6, r0
 800a288:	f025 0503 	bic.w	r5, r5, #3
 800a28c:	3508      	adds	r5, #8
 800a28e:	2d0c      	cmp	r5, #12
 800a290:	bf38      	it	cc
 800a292:	250c      	movcc	r5, #12
 800a294:	2d00      	cmp	r5, #0
 800a296:	db01      	blt.n	800a29c <_malloc_r+0x1c>
 800a298:	42a9      	cmp	r1, r5
 800a29a:	d904      	bls.n	800a2a6 <_malloc_r+0x26>
 800a29c:	230c      	movs	r3, #12
 800a29e:	6033      	str	r3, [r6, #0]
 800a2a0:	2000      	movs	r0, #0
 800a2a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a37c <_malloc_r+0xfc>
 800a2aa:	f000 f869 	bl	800a380 <__malloc_lock>
 800a2ae:	f8d8 3000 	ldr.w	r3, [r8]
 800a2b2:	461c      	mov	r4, r3
 800a2b4:	bb44      	cbnz	r4, 800a308 <_malloc_r+0x88>
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	f7ff ffbf 	bl	800a23c <sbrk_aligned>
 800a2be:	1c43      	adds	r3, r0, #1
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	d158      	bne.n	800a376 <_malloc_r+0xf6>
 800a2c4:	f8d8 4000 	ldr.w	r4, [r8]
 800a2c8:	4627      	mov	r7, r4
 800a2ca:	2f00      	cmp	r7, #0
 800a2cc:	d143      	bne.n	800a356 <_malloc_r+0xd6>
 800a2ce:	2c00      	cmp	r4, #0
 800a2d0:	d04b      	beq.n	800a36a <_malloc_r+0xea>
 800a2d2:	6823      	ldr	r3, [r4, #0]
 800a2d4:	4639      	mov	r1, r7
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	eb04 0903 	add.w	r9, r4, r3
 800a2dc:	f000 fe66 	bl	800afac <_sbrk_r>
 800a2e0:	4581      	cmp	r9, r0
 800a2e2:	d142      	bne.n	800a36a <_malloc_r+0xea>
 800a2e4:	6821      	ldr	r1, [r4, #0]
 800a2e6:	4630      	mov	r0, r6
 800a2e8:	1a6d      	subs	r5, r5, r1
 800a2ea:	4629      	mov	r1, r5
 800a2ec:	f7ff ffa6 	bl	800a23c <sbrk_aligned>
 800a2f0:	3001      	adds	r0, #1
 800a2f2:	d03a      	beq.n	800a36a <_malloc_r+0xea>
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	442b      	add	r3, r5
 800a2f8:	6023      	str	r3, [r4, #0]
 800a2fa:	f8d8 3000 	ldr.w	r3, [r8]
 800a2fe:	685a      	ldr	r2, [r3, #4]
 800a300:	bb62      	cbnz	r2, 800a35c <_malloc_r+0xdc>
 800a302:	f8c8 7000 	str.w	r7, [r8]
 800a306:	e00f      	b.n	800a328 <_malloc_r+0xa8>
 800a308:	6822      	ldr	r2, [r4, #0]
 800a30a:	1b52      	subs	r2, r2, r5
 800a30c:	d420      	bmi.n	800a350 <_malloc_r+0xd0>
 800a30e:	2a0b      	cmp	r2, #11
 800a310:	d917      	bls.n	800a342 <_malloc_r+0xc2>
 800a312:	1961      	adds	r1, r4, r5
 800a314:	42a3      	cmp	r3, r4
 800a316:	6025      	str	r5, [r4, #0]
 800a318:	bf18      	it	ne
 800a31a:	6059      	strne	r1, [r3, #4]
 800a31c:	6863      	ldr	r3, [r4, #4]
 800a31e:	bf08      	it	eq
 800a320:	f8c8 1000 	streq.w	r1, [r8]
 800a324:	5162      	str	r2, [r4, r5]
 800a326:	604b      	str	r3, [r1, #4]
 800a328:	4630      	mov	r0, r6
 800a32a:	f000 f82f 	bl	800a38c <__malloc_unlock>
 800a32e:	f104 000b 	add.w	r0, r4, #11
 800a332:	1d23      	adds	r3, r4, #4
 800a334:	f020 0007 	bic.w	r0, r0, #7
 800a338:	1ac2      	subs	r2, r0, r3
 800a33a:	bf1c      	itt	ne
 800a33c:	1a1b      	subne	r3, r3, r0
 800a33e:	50a3      	strne	r3, [r4, r2]
 800a340:	e7af      	b.n	800a2a2 <_malloc_r+0x22>
 800a342:	6862      	ldr	r2, [r4, #4]
 800a344:	42a3      	cmp	r3, r4
 800a346:	bf0c      	ite	eq
 800a348:	f8c8 2000 	streq.w	r2, [r8]
 800a34c:	605a      	strne	r2, [r3, #4]
 800a34e:	e7eb      	b.n	800a328 <_malloc_r+0xa8>
 800a350:	4623      	mov	r3, r4
 800a352:	6864      	ldr	r4, [r4, #4]
 800a354:	e7ae      	b.n	800a2b4 <_malloc_r+0x34>
 800a356:	463c      	mov	r4, r7
 800a358:	687f      	ldr	r7, [r7, #4]
 800a35a:	e7b6      	b.n	800a2ca <_malloc_r+0x4a>
 800a35c:	461a      	mov	r2, r3
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	42a3      	cmp	r3, r4
 800a362:	d1fb      	bne.n	800a35c <_malloc_r+0xdc>
 800a364:	2300      	movs	r3, #0
 800a366:	6053      	str	r3, [r2, #4]
 800a368:	e7de      	b.n	800a328 <_malloc_r+0xa8>
 800a36a:	230c      	movs	r3, #12
 800a36c:	4630      	mov	r0, r6
 800a36e:	6033      	str	r3, [r6, #0]
 800a370:	f000 f80c 	bl	800a38c <__malloc_unlock>
 800a374:	e794      	b.n	800a2a0 <_malloc_r+0x20>
 800a376:	6005      	str	r5, [r0, #0]
 800a378:	e7d6      	b.n	800a328 <_malloc_r+0xa8>
 800a37a:	bf00      	nop
 800a37c:	200008c8 	.word	0x200008c8

0800a380 <__malloc_lock>:
 800a380:	4801      	ldr	r0, [pc, #4]	@ (800a388 <__malloc_lock+0x8>)
 800a382:	f7ff b8a8 	b.w	80094d6 <__retarget_lock_acquire_recursive>
 800a386:	bf00      	nop
 800a388:	200008c0 	.word	0x200008c0

0800a38c <__malloc_unlock>:
 800a38c:	4801      	ldr	r0, [pc, #4]	@ (800a394 <__malloc_unlock+0x8>)
 800a38e:	f7ff b8a3 	b.w	80094d8 <__retarget_lock_release_recursive>
 800a392:	bf00      	nop
 800a394:	200008c0 	.word	0x200008c0

0800a398 <_Balloc>:
 800a398:	b570      	push	{r4, r5, r6, lr}
 800a39a:	69c6      	ldr	r6, [r0, #28]
 800a39c:	4604      	mov	r4, r0
 800a39e:	460d      	mov	r5, r1
 800a3a0:	b976      	cbnz	r6, 800a3c0 <_Balloc+0x28>
 800a3a2:	2010      	movs	r0, #16
 800a3a4:	f7ff ff42 	bl	800a22c <malloc>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	61e0      	str	r0, [r4, #28]
 800a3ac:	b920      	cbnz	r0, 800a3b8 <_Balloc+0x20>
 800a3ae:	4b18      	ldr	r3, [pc, #96]	@ (800a410 <_Balloc+0x78>)
 800a3b0:	216b      	movs	r1, #107	@ 0x6b
 800a3b2:	4818      	ldr	r0, [pc, #96]	@ (800a414 <_Balloc+0x7c>)
 800a3b4:	f000 fe18 	bl	800afe8 <__assert_func>
 800a3b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3bc:	6006      	str	r6, [r0, #0]
 800a3be:	60c6      	str	r6, [r0, #12]
 800a3c0:	69e6      	ldr	r6, [r4, #28]
 800a3c2:	68f3      	ldr	r3, [r6, #12]
 800a3c4:	b183      	cbz	r3, 800a3e8 <_Balloc+0x50>
 800a3c6:	69e3      	ldr	r3, [r4, #28]
 800a3c8:	68db      	ldr	r3, [r3, #12]
 800a3ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a3ce:	b9b8      	cbnz	r0, 800a400 <_Balloc+0x68>
 800a3d0:	2101      	movs	r1, #1
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	fa01 f605 	lsl.w	r6, r1, r5
 800a3d8:	1d72      	adds	r2, r6, #5
 800a3da:	0092      	lsls	r2, r2, #2
 800a3dc:	f000 fe22 	bl	800b024 <_calloc_r>
 800a3e0:	b160      	cbz	r0, 800a3fc <_Balloc+0x64>
 800a3e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a3e6:	e00e      	b.n	800a406 <_Balloc+0x6e>
 800a3e8:	2221      	movs	r2, #33	@ 0x21
 800a3ea:	2104      	movs	r1, #4
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	f000 fe19 	bl	800b024 <_calloc_r>
 800a3f2:	69e3      	ldr	r3, [r4, #28]
 800a3f4:	60f0      	str	r0, [r6, #12]
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d1e4      	bne.n	800a3c6 <_Balloc+0x2e>
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	bd70      	pop	{r4, r5, r6, pc}
 800a400:	6802      	ldr	r2, [r0, #0]
 800a402:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a406:	2300      	movs	r3, #0
 800a408:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a40c:	e7f7      	b.n	800a3fe <_Balloc+0x66>
 800a40e:	bf00      	nop
 800a410:	0800e2c5 	.word	0x0800e2c5
 800a414:	0800e345 	.word	0x0800e345

0800a418 <_Bfree>:
 800a418:	b570      	push	{r4, r5, r6, lr}
 800a41a:	69c6      	ldr	r6, [r0, #28]
 800a41c:	4605      	mov	r5, r0
 800a41e:	460c      	mov	r4, r1
 800a420:	b976      	cbnz	r6, 800a440 <_Bfree+0x28>
 800a422:	2010      	movs	r0, #16
 800a424:	f7ff ff02 	bl	800a22c <malloc>
 800a428:	4602      	mov	r2, r0
 800a42a:	61e8      	str	r0, [r5, #28]
 800a42c:	b920      	cbnz	r0, 800a438 <_Bfree+0x20>
 800a42e:	4b09      	ldr	r3, [pc, #36]	@ (800a454 <_Bfree+0x3c>)
 800a430:	218f      	movs	r1, #143	@ 0x8f
 800a432:	4809      	ldr	r0, [pc, #36]	@ (800a458 <_Bfree+0x40>)
 800a434:	f000 fdd8 	bl	800afe8 <__assert_func>
 800a438:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a43c:	6006      	str	r6, [r0, #0]
 800a43e:	60c6      	str	r6, [r0, #12]
 800a440:	b13c      	cbz	r4, 800a452 <_Bfree+0x3a>
 800a442:	69eb      	ldr	r3, [r5, #28]
 800a444:	6862      	ldr	r2, [r4, #4]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a44c:	6021      	str	r1, [r4, #0]
 800a44e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a452:	bd70      	pop	{r4, r5, r6, pc}
 800a454:	0800e2c5 	.word	0x0800e2c5
 800a458:	0800e345 	.word	0x0800e345

0800a45c <__multadd>:
 800a45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a460:	f101 0c14 	add.w	ip, r1, #20
 800a464:	4607      	mov	r7, r0
 800a466:	460c      	mov	r4, r1
 800a468:	461e      	mov	r6, r3
 800a46a:	690d      	ldr	r5, [r1, #16]
 800a46c:	2000      	movs	r0, #0
 800a46e:	f8dc 3000 	ldr.w	r3, [ip]
 800a472:	3001      	adds	r0, #1
 800a474:	b299      	uxth	r1, r3
 800a476:	4285      	cmp	r5, r0
 800a478:	fb02 6101 	mla	r1, r2, r1, r6
 800a47c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a480:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800a484:	b289      	uxth	r1, r1
 800a486:	fb02 3306 	mla	r3, r2, r6, r3
 800a48a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a48e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a492:	f84c 1b04 	str.w	r1, [ip], #4
 800a496:	dcea      	bgt.n	800a46e <__multadd+0x12>
 800a498:	b30e      	cbz	r6, 800a4de <__multadd+0x82>
 800a49a:	68a3      	ldr	r3, [r4, #8]
 800a49c:	42ab      	cmp	r3, r5
 800a49e:	dc19      	bgt.n	800a4d4 <__multadd+0x78>
 800a4a0:	6861      	ldr	r1, [r4, #4]
 800a4a2:	4638      	mov	r0, r7
 800a4a4:	3101      	adds	r1, #1
 800a4a6:	f7ff ff77 	bl	800a398 <_Balloc>
 800a4aa:	4680      	mov	r8, r0
 800a4ac:	b928      	cbnz	r0, 800a4ba <__multadd+0x5e>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a4e4 <__multadd+0x88>)
 800a4b2:	21ba      	movs	r1, #186	@ 0xba
 800a4b4:	480c      	ldr	r0, [pc, #48]	@ (800a4e8 <__multadd+0x8c>)
 800a4b6:	f000 fd97 	bl	800afe8 <__assert_func>
 800a4ba:	6922      	ldr	r2, [r4, #16]
 800a4bc:	f104 010c 	add.w	r1, r4, #12
 800a4c0:	300c      	adds	r0, #12
 800a4c2:	3202      	adds	r2, #2
 800a4c4:	0092      	lsls	r2, r2, #2
 800a4c6:	f000 fd81 	bl	800afcc <memcpy>
 800a4ca:	4621      	mov	r1, r4
 800a4cc:	4644      	mov	r4, r8
 800a4ce:	4638      	mov	r0, r7
 800a4d0:	f7ff ffa2 	bl	800a418 <_Bfree>
 800a4d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a4d8:	3501      	adds	r5, #1
 800a4da:	615e      	str	r6, [r3, #20]
 800a4dc:	6125      	str	r5, [r4, #16]
 800a4de:	4620      	mov	r0, r4
 800a4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4e4:	0800e334 	.word	0x0800e334
 800a4e8:	0800e345 	.word	0x0800e345

0800a4ec <__hi0bits>:
 800a4ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	bf36      	itet	cc
 800a4f4:	0403      	lslcc	r3, r0, #16
 800a4f6:	2000      	movcs	r0, #0
 800a4f8:	2010      	movcc	r0, #16
 800a4fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a4fe:	bf3c      	itt	cc
 800a500:	021b      	lslcc	r3, r3, #8
 800a502:	3008      	addcc	r0, #8
 800a504:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a508:	bf3c      	itt	cc
 800a50a:	011b      	lslcc	r3, r3, #4
 800a50c:	3004      	addcc	r0, #4
 800a50e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a512:	bf3c      	itt	cc
 800a514:	009b      	lslcc	r3, r3, #2
 800a516:	3002      	addcc	r0, #2
 800a518:	2b00      	cmp	r3, #0
 800a51a:	db05      	blt.n	800a528 <__hi0bits+0x3c>
 800a51c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a520:	f100 0001 	add.w	r0, r0, #1
 800a524:	bf08      	it	eq
 800a526:	2020      	moveq	r0, #32
 800a528:	4770      	bx	lr

0800a52a <__lo0bits>:
 800a52a:	6803      	ldr	r3, [r0, #0]
 800a52c:	4602      	mov	r2, r0
 800a52e:	f013 0007 	ands.w	r0, r3, #7
 800a532:	d00b      	beq.n	800a54c <__lo0bits+0x22>
 800a534:	07d9      	lsls	r1, r3, #31
 800a536:	d421      	bmi.n	800a57c <__lo0bits+0x52>
 800a538:	0798      	lsls	r0, r3, #30
 800a53a:	bf47      	ittee	mi
 800a53c:	085b      	lsrmi	r3, r3, #1
 800a53e:	2001      	movmi	r0, #1
 800a540:	089b      	lsrpl	r3, r3, #2
 800a542:	2002      	movpl	r0, #2
 800a544:	bf4c      	ite	mi
 800a546:	6013      	strmi	r3, [r2, #0]
 800a548:	6013      	strpl	r3, [r2, #0]
 800a54a:	4770      	bx	lr
 800a54c:	b299      	uxth	r1, r3
 800a54e:	b909      	cbnz	r1, 800a554 <__lo0bits+0x2a>
 800a550:	0c1b      	lsrs	r3, r3, #16
 800a552:	2010      	movs	r0, #16
 800a554:	b2d9      	uxtb	r1, r3
 800a556:	b909      	cbnz	r1, 800a55c <__lo0bits+0x32>
 800a558:	3008      	adds	r0, #8
 800a55a:	0a1b      	lsrs	r3, r3, #8
 800a55c:	0719      	lsls	r1, r3, #28
 800a55e:	bf04      	itt	eq
 800a560:	091b      	lsreq	r3, r3, #4
 800a562:	3004      	addeq	r0, #4
 800a564:	0799      	lsls	r1, r3, #30
 800a566:	bf04      	itt	eq
 800a568:	089b      	lsreq	r3, r3, #2
 800a56a:	3002      	addeq	r0, #2
 800a56c:	07d9      	lsls	r1, r3, #31
 800a56e:	d403      	bmi.n	800a578 <__lo0bits+0x4e>
 800a570:	085b      	lsrs	r3, r3, #1
 800a572:	f100 0001 	add.w	r0, r0, #1
 800a576:	d003      	beq.n	800a580 <__lo0bits+0x56>
 800a578:	6013      	str	r3, [r2, #0]
 800a57a:	4770      	bx	lr
 800a57c:	2000      	movs	r0, #0
 800a57e:	4770      	bx	lr
 800a580:	2020      	movs	r0, #32
 800a582:	4770      	bx	lr

0800a584 <__i2b>:
 800a584:	b510      	push	{r4, lr}
 800a586:	460c      	mov	r4, r1
 800a588:	2101      	movs	r1, #1
 800a58a:	f7ff ff05 	bl	800a398 <_Balloc>
 800a58e:	4602      	mov	r2, r0
 800a590:	b928      	cbnz	r0, 800a59e <__i2b+0x1a>
 800a592:	4b05      	ldr	r3, [pc, #20]	@ (800a5a8 <__i2b+0x24>)
 800a594:	f240 1145 	movw	r1, #325	@ 0x145
 800a598:	4804      	ldr	r0, [pc, #16]	@ (800a5ac <__i2b+0x28>)
 800a59a:	f000 fd25 	bl	800afe8 <__assert_func>
 800a59e:	2301      	movs	r3, #1
 800a5a0:	6144      	str	r4, [r0, #20]
 800a5a2:	6103      	str	r3, [r0, #16]
 800a5a4:	bd10      	pop	{r4, pc}
 800a5a6:	bf00      	nop
 800a5a8:	0800e334 	.word	0x0800e334
 800a5ac:	0800e345 	.word	0x0800e345

0800a5b0 <__multiply>:
 800a5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b4:	4614      	mov	r4, r2
 800a5b6:	690a      	ldr	r2, [r1, #16]
 800a5b8:	460f      	mov	r7, r1
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	6923      	ldr	r3, [r4, #16]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	bfa2      	ittt	ge
 800a5c2:	4623      	movge	r3, r4
 800a5c4:	460c      	movge	r4, r1
 800a5c6:	461f      	movge	r7, r3
 800a5c8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a5cc:	68a3      	ldr	r3, [r4, #8]
 800a5ce:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a5d2:	6861      	ldr	r1, [r4, #4]
 800a5d4:	eb0a 0609 	add.w	r6, sl, r9
 800a5d8:	42b3      	cmp	r3, r6
 800a5da:	bfb8      	it	lt
 800a5dc:	3101      	addlt	r1, #1
 800a5de:	f7ff fedb 	bl	800a398 <_Balloc>
 800a5e2:	b930      	cbnz	r0, 800a5f2 <__multiply+0x42>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	4b45      	ldr	r3, [pc, #276]	@ (800a6fc <__multiply+0x14c>)
 800a5e8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a5ec:	4844      	ldr	r0, [pc, #272]	@ (800a700 <__multiply+0x150>)
 800a5ee:	f000 fcfb 	bl	800afe8 <__assert_func>
 800a5f2:	f100 0514 	add.w	r5, r0, #20
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a5fc:	462b      	mov	r3, r5
 800a5fe:	4543      	cmp	r3, r8
 800a600:	d321      	bcc.n	800a646 <__multiply+0x96>
 800a602:	f107 0114 	add.w	r1, r7, #20
 800a606:	f104 0214 	add.w	r2, r4, #20
 800a60a:	f104 0715 	add.w	r7, r4, #21
 800a60e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a612:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a616:	9302      	str	r3, [sp, #8]
 800a618:	1b13      	subs	r3, r2, r4
 800a61a:	3b15      	subs	r3, #21
 800a61c:	f023 0303 	bic.w	r3, r3, #3
 800a620:	3304      	adds	r3, #4
 800a622:	42ba      	cmp	r2, r7
 800a624:	bf38      	it	cc
 800a626:	2304      	movcc	r3, #4
 800a628:	9301      	str	r3, [sp, #4]
 800a62a:	9b02      	ldr	r3, [sp, #8]
 800a62c:	9103      	str	r1, [sp, #12]
 800a62e:	428b      	cmp	r3, r1
 800a630:	d80c      	bhi.n	800a64c <__multiply+0x9c>
 800a632:	2e00      	cmp	r6, #0
 800a634:	dd03      	ble.n	800a63e <__multiply+0x8e>
 800a636:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d05b      	beq.n	800a6f6 <__multiply+0x146>
 800a63e:	6106      	str	r6, [r0, #16]
 800a640:	b005      	add	sp, #20
 800a642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a646:	f843 2b04 	str.w	r2, [r3], #4
 800a64a:	e7d8      	b.n	800a5fe <__multiply+0x4e>
 800a64c:	f8b1 a000 	ldrh.w	sl, [r1]
 800a650:	f1ba 0f00 	cmp.w	sl, #0
 800a654:	d024      	beq.n	800a6a0 <__multiply+0xf0>
 800a656:	f104 0e14 	add.w	lr, r4, #20
 800a65a:	46a9      	mov	r9, r5
 800a65c:	f04f 0c00 	mov.w	ip, #0
 800a660:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a664:	f8d9 3000 	ldr.w	r3, [r9]
 800a668:	fa1f fb87 	uxth.w	fp, r7
 800a66c:	4572      	cmp	r2, lr
 800a66e:	b29b      	uxth	r3, r3
 800a670:	fb0a 330b 	mla	r3, sl, fp, r3
 800a674:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a678:	f8d9 7000 	ldr.w	r7, [r9]
 800a67c:	4463      	add	r3, ip
 800a67e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a682:	fb0a c70b 	mla	r7, sl, fp, ip
 800a686:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a690:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a694:	f849 3b04 	str.w	r3, [r9], #4
 800a698:	d8e2      	bhi.n	800a660 <__multiply+0xb0>
 800a69a:	9b01      	ldr	r3, [sp, #4]
 800a69c:	f845 c003 	str.w	ip, [r5, r3]
 800a6a0:	9b03      	ldr	r3, [sp, #12]
 800a6a2:	3104      	adds	r1, #4
 800a6a4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a6a8:	f1b9 0f00 	cmp.w	r9, #0
 800a6ac:	d021      	beq.n	800a6f2 <__multiply+0x142>
 800a6ae:	682b      	ldr	r3, [r5, #0]
 800a6b0:	f104 0c14 	add.w	ip, r4, #20
 800a6b4:	46ae      	mov	lr, r5
 800a6b6:	f04f 0a00 	mov.w	sl, #0
 800a6ba:	f8bc b000 	ldrh.w	fp, [ip]
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a6c4:	fb09 770b 	mla	r7, r9, fp, r7
 800a6c8:	4457      	add	r7, sl
 800a6ca:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a6ce:	f84e 3b04 	str.w	r3, [lr], #4
 800a6d2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a6d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a6da:	f8be 3000 	ldrh.w	r3, [lr]
 800a6de:	4562      	cmp	r2, ip
 800a6e0:	fb09 330a 	mla	r3, r9, sl, r3
 800a6e4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a6e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a6ec:	d8e5      	bhi.n	800a6ba <__multiply+0x10a>
 800a6ee:	9f01      	ldr	r7, [sp, #4]
 800a6f0:	51eb      	str	r3, [r5, r7]
 800a6f2:	3504      	adds	r5, #4
 800a6f4:	e799      	b.n	800a62a <__multiply+0x7a>
 800a6f6:	3e01      	subs	r6, #1
 800a6f8:	e79b      	b.n	800a632 <__multiply+0x82>
 800a6fa:	bf00      	nop
 800a6fc:	0800e334 	.word	0x0800e334
 800a700:	0800e345 	.word	0x0800e345

0800a704 <__pow5mult>:
 800a704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a708:	4615      	mov	r5, r2
 800a70a:	f012 0203 	ands.w	r2, r2, #3
 800a70e:	4607      	mov	r7, r0
 800a710:	460e      	mov	r6, r1
 800a712:	d007      	beq.n	800a724 <__pow5mult+0x20>
 800a714:	3a01      	subs	r2, #1
 800a716:	4c25      	ldr	r4, [pc, #148]	@ (800a7ac <__pow5mult+0xa8>)
 800a718:	2300      	movs	r3, #0
 800a71a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a71e:	f7ff fe9d 	bl	800a45c <__multadd>
 800a722:	4606      	mov	r6, r0
 800a724:	10ad      	asrs	r5, r5, #2
 800a726:	d03d      	beq.n	800a7a4 <__pow5mult+0xa0>
 800a728:	69fc      	ldr	r4, [r7, #28]
 800a72a:	b97c      	cbnz	r4, 800a74c <__pow5mult+0x48>
 800a72c:	2010      	movs	r0, #16
 800a72e:	f7ff fd7d 	bl	800a22c <malloc>
 800a732:	4602      	mov	r2, r0
 800a734:	61f8      	str	r0, [r7, #28]
 800a736:	b928      	cbnz	r0, 800a744 <__pow5mult+0x40>
 800a738:	4b1d      	ldr	r3, [pc, #116]	@ (800a7b0 <__pow5mult+0xac>)
 800a73a:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a73e:	481d      	ldr	r0, [pc, #116]	@ (800a7b4 <__pow5mult+0xb0>)
 800a740:	f000 fc52 	bl	800afe8 <__assert_func>
 800a744:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a748:	6004      	str	r4, [r0, #0]
 800a74a:	60c4      	str	r4, [r0, #12]
 800a74c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a750:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a754:	b94c      	cbnz	r4, 800a76a <__pow5mult+0x66>
 800a756:	f240 2171 	movw	r1, #625	@ 0x271
 800a75a:	4638      	mov	r0, r7
 800a75c:	f7ff ff12 	bl	800a584 <__i2b>
 800a760:	2300      	movs	r3, #0
 800a762:	4604      	mov	r4, r0
 800a764:	f8c8 0008 	str.w	r0, [r8, #8]
 800a768:	6003      	str	r3, [r0, #0]
 800a76a:	f04f 0900 	mov.w	r9, #0
 800a76e:	07eb      	lsls	r3, r5, #31
 800a770:	d50a      	bpl.n	800a788 <__pow5mult+0x84>
 800a772:	4631      	mov	r1, r6
 800a774:	4622      	mov	r2, r4
 800a776:	4638      	mov	r0, r7
 800a778:	f7ff ff1a 	bl	800a5b0 <__multiply>
 800a77c:	4680      	mov	r8, r0
 800a77e:	4631      	mov	r1, r6
 800a780:	4638      	mov	r0, r7
 800a782:	4646      	mov	r6, r8
 800a784:	f7ff fe48 	bl	800a418 <_Bfree>
 800a788:	106d      	asrs	r5, r5, #1
 800a78a:	d00b      	beq.n	800a7a4 <__pow5mult+0xa0>
 800a78c:	6820      	ldr	r0, [r4, #0]
 800a78e:	b938      	cbnz	r0, 800a7a0 <__pow5mult+0x9c>
 800a790:	4622      	mov	r2, r4
 800a792:	4621      	mov	r1, r4
 800a794:	4638      	mov	r0, r7
 800a796:	f7ff ff0b 	bl	800a5b0 <__multiply>
 800a79a:	6020      	str	r0, [r4, #0]
 800a79c:	f8c0 9000 	str.w	r9, [r0]
 800a7a0:	4604      	mov	r4, r0
 800a7a2:	e7e4      	b.n	800a76e <__pow5mult+0x6a>
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7aa:	bf00      	nop
 800a7ac:	0800e3a0 	.word	0x0800e3a0
 800a7b0:	0800e2c5 	.word	0x0800e2c5
 800a7b4:	0800e345 	.word	0x0800e345

0800a7b8 <__lshift>:
 800a7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7bc:	460c      	mov	r4, r1
 800a7be:	4607      	mov	r7, r0
 800a7c0:	4691      	mov	r9, r2
 800a7c2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7c6:	6923      	ldr	r3, [r4, #16]
 800a7c8:	6849      	ldr	r1, [r1, #4]
 800a7ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7ce:	68a3      	ldr	r3, [r4, #8]
 800a7d0:	f108 0601 	add.w	r6, r8, #1
 800a7d4:	42b3      	cmp	r3, r6
 800a7d6:	db0b      	blt.n	800a7f0 <__lshift+0x38>
 800a7d8:	4638      	mov	r0, r7
 800a7da:	f7ff fddd 	bl	800a398 <_Balloc>
 800a7de:	4605      	mov	r5, r0
 800a7e0:	b948      	cbnz	r0, 800a7f6 <__lshift+0x3e>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	4b28      	ldr	r3, [pc, #160]	@ (800a888 <__lshift+0xd0>)
 800a7e6:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a7ea:	4828      	ldr	r0, [pc, #160]	@ (800a88c <__lshift+0xd4>)
 800a7ec:	f000 fbfc 	bl	800afe8 <__assert_func>
 800a7f0:	3101      	adds	r1, #1
 800a7f2:	005b      	lsls	r3, r3, #1
 800a7f4:	e7ee      	b.n	800a7d4 <__lshift+0x1c>
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	f100 0114 	add.w	r1, r0, #20
 800a7fc:	f100 0210 	add.w	r2, r0, #16
 800a800:	4618      	mov	r0, r3
 800a802:	4553      	cmp	r3, sl
 800a804:	db33      	blt.n	800a86e <__lshift+0xb6>
 800a806:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a80a:	f104 0314 	add.w	r3, r4, #20
 800a80e:	6920      	ldr	r0, [r4, #16]
 800a810:	f019 091f 	ands.w	r9, r9, #31
 800a814:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a818:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a81c:	d02b      	beq.n	800a876 <__lshift+0xbe>
 800a81e:	f1c9 0e20 	rsb	lr, r9, #32
 800a822:	468a      	mov	sl, r1
 800a824:	2200      	movs	r2, #0
 800a826:	6818      	ldr	r0, [r3, #0]
 800a828:	fa00 f009 	lsl.w	r0, r0, r9
 800a82c:	4310      	orrs	r0, r2
 800a82e:	f84a 0b04 	str.w	r0, [sl], #4
 800a832:	f853 2b04 	ldr.w	r2, [r3], #4
 800a836:	459c      	cmp	ip, r3
 800a838:	fa22 f20e 	lsr.w	r2, r2, lr
 800a83c:	d8f3      	bhi.n	800a826 <__lshift+0x6e>
 800a83e:	ebac 0304 	sub.w	r3, ip, r4
 800a842:	f104 0015 	add.w	r0, r4, #21
 800a846:	3b15      	subs	r3, #21
 800a848:	f023 0303 	bic.w	r3, r3, #3
 800a84c:	3304      	adds	r3, #4
 800a84e:	4584      	cmp	ip, r0
 800a850:	bf38      	it	cc
 800a852:	2304      	movcc	r3, #4
 800a854:	50ca      	str	r2, [r1, r3]
 800a856:	b10a      	cbz	r2, 800a85c <__lshift+0xa4>
 800a858:	f108 0602 	add.w	r6, r8, #2
 800a85c:	3e01      	subs	r6, #1
 800a85e:	4638      	mov	r0, r7
 800a860:	4621      	mov	r1, r4
 800a862:	612e      	str	r6, [r5, #16]
 800a864:	f7ff fdd8 	bl	800a418 <_Bfree>
 800a868:	4628      	mov	r0, r5
 800a86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a86e:	3301      	adds	r3, #1
 800a870:	f842 0f04 	str.w	r0, [r2, #4]!
 800a874:	e7c5      	b.n	800a802 <__lshift+0x4a>
 800a876:	3904      	subs	r1, #4
 800a878:	f853 2b04 	ldr.w	r2, [r3], #4
 800a87c:	459c      	cmp	ip, r3
 800a87e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a882:	d8f9      	bhi.n	800a878 <__lshift+0xc0>
 800a884:	e7ea      	b.n	800a85c <__lshift+0xa4>
 800a886:	bf00      	nop
 800a888:	0800e334 	.word	0x0800e334
 800a88c:	0800e345 	.word	0x0800e345

0800a890 <__mcmp>:
 800a890:	4603      	mov	r3, r0
 800a892:	690a      	ldr	r2, [r1, #16]
 800a894:	6900      	ldr	r0, [r0, #16]
 800a896:	1a80      	subs	r0, r0, r2
 800a898:	b530      	push	{r4, r5, lr}
 800a89a:	d10e      	bne.n	800a8ba <__mcmp+0x2a>
 800a89c:	3314      	adds	r3, #20
 800a89e:	3114      	adds	r1, #20
 800a8a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a8a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a8a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a8ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a8b0:	4295      	cmp	r5, r2
 800a8b2:	d003      	beq.n	800a8bc <__mcmp+0x2c>
 800a8b4:	d205      	bcs.n	800a8c2 <__mcmp+0x32>
 800a8b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ba:	bd30      	pop	{r4, r5, pc}
 800a8bc:	42a3      	cmp	r3, r4
 800a8be:	d3f3      	bcc.n	800a8a8 <__mcmp+0x18>
 800a8c0:	e7fb      	b.n	800a8ba <__mcmp+0x2a>
 800a8c2:	2001      	movs	r0, #1
 800a8c4:	e7f9      	b.n	800a8ba <__mcmp+0x2a>
	...

0800a8c8 <__mdiff>:
 800a8c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8cc:	4689      	mov	r9, r1
 800a8ce:	4606      	mov	r6, r0
 800a8d0:	4611      	mov	r1, r2
 800a8d2:	4614      	mov	r4, r2
 800a8d4:	4648      	mov	r0, r9
 800a8d6:	f7ff ffdb 	bl	800a890 <__mcmp>
 800a8da:	1e05      	subs	r5, r0, #0
 800a8dc:	d112      	bne.n	800a904 <__mdiff+0x3c>
 800a8de:	4629      	mov	r1, r5
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	f7ff fd59 	bl	800a398 <_Balloc>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	b928      	cbnz	r0, 800a8f6 <__mdiff+0x2e>
 800a8ea:	4b41      	ldr	r3, [pc, #260]	@ (800a9f0 <__mdiff+0x128>)
 800a8ec:	f240 2137 	movw	r1, #567	@ 0x237
 800a8f0:	4840      	ldr	r0, [pc, #256]	@ (800a9f4 <__mdiff+0x12c>)
 800a8f2:	f000 fb79 	bl	800afe8 <__assert_func>
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a8fc:	4610      	mov	r0, r2
 800a8fe:	b003      	add	sp, #12
 800a900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a904:	bfbc      	itt	lt
 800a906:	464b      	movlt	r3, r9
 800a908:	46a1      	movlt	r9, r4
 800a90a:	4630      	mov	r0, r6
 800a90c:	bfb8      	it	lt
 800a90e:	2501      	movlt	r5, #1
 800a910:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a914:	bfb4      	ite	lt
 800a916:	461c      	movlt	r4, r3
 800a918:	2500      	movge	r5, #0
 800a91a:	f7ff fd3d 	bl	800a398 <_Balloc>
 800a91e:	4602      	mov	r2, r0
 800a920:	b918      	cbnz	r0, 800a92a <__mdiff+0x62>
 800a922:	4b33      	ldr	r3, [pc, #204]	@ (800a9f0 <__mdiff+0x128>)
 800a924:	f240 2145 	movw	r1, #581	@ 0x245
 800a928:	e7e2      	b.n	800a8f0 <__mdiff+0x28>
 800a92a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a92e:	f104 0e14 	add.w	lr, r4, #20
 800a932:	6926      	ldr	r6, [r4, #16]
 800a934:	f100 0b14 	add.w	fp, r0, #20
 800a938:	60c5      	str	r5, [r0, #12]
 800a93a:	f109 0514 	add.w	r5, r9, #20
 800a93e:	f109 0310 	add.w	r3, r9, #16
 800a942:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a946:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a94a:	46d9      	mov	r9, fp
 800a94c:	f04f 0c00 	mov.w	ip, #0
 800a950:	9301      	str	r3, [sp, #4]
 800a952:	9b01      	ldr	r3, [sp, #4]
 800a954:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a958:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a95c:	4576      	cmp	r6, lr
 800a95e:	9301      	str	r3, [sp, #4]
 800a960:	fa1f f38a 	uxth.w	r3, sl
 800a964:	4619      	mov	r1, r3
 800a966:	b283      	uxth	r3, r0
 800a968:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800a96c:	eba1 0303 	sub.w	r3, r1, r3
 800a970:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a974:	4463      	add	r3, ip
 800a976:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a980:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a984:	f849 3b04 	str.w	r3, [r9], #4
 800a988:	d8e3      	bhi.n	800a952 <__mdiff+0x8a>
 800a98a:	1b33      	subs	r3, r6, r4
 800a98c:	3415      	adds	r4, #21
 800a98e:	3b15      	subs	r3, #21
 800a990:	f023 0303 	bic.w	r3, r3, #3
 800a994:	3304      	adds	r3, #4
 800a996:	42a6      	cmp	r6, r4
 800a998:	bf38      	it	cc
 800a99a:	2304      	movcc	r3, #4
 800a99c:	441d      	add	r5, r3
 800a99e:	445b      	add	r3, fp
 800a9a0:	462c      	mov	r4, r5
 800a9a2:	461e      	mov	r6, r3
 800a9a4:	4544      	cmp	r4, r8
 800a9a6:	d30e      	bcc.n	800a9c6 <__mdiff+0xfe>
 800a9a8:	f108 0103 	add.w	r1, r8, #3
 800a9ac:	1b49      	subs	r1, r1, r5
 800a9ae:	3d03      	subs	r5, #3
 800a9b0:	f021 0103 	bic.w	r1, r1, #3
 800a9b4:	45a8      	cmp	r8, r5
 800a9b6:	bf38      	it	cc
 800a9b8:	2100      	movcc	r1, #0
 800a9ba:	440b      	add	r3, r1
 800a9bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a9c0:	b199      	cbz	r1, 800a9ea <__mdiff+0x122>
 800a9c2:	6117      	str	r7, [r2, #16]
 800a9c4:	e79a      	b.n	800a8fc <__mdiff+0x34>
 800a9c6:	f854 1b04 	ldr.w	r1, [r4], #4
 800a9ca:	46e6      	mov	lr, ip
 800a9cc:	fa1f fc81 	uxth.w	ip, r1
 800a9d0:	0c08      	lsrs	r0, r1, #16
 800a9d2:	4471      	add	r1, lr
 800a9d4:	44f4      	add	ip, lr
 800a9d6:	b289      	uxth	r1, r1
 800a9d8:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a9dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a9e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a9e4:	f846 1b04 	str.w	r1, [r6], #4
 800a9e8:	e7dc      	b.n	800a9a4 <__mdiff+0xdc>
 800a9ea:	3f01      	subs	r7, #1
 800a9ec:	e7e6      	b.n	800a9bc <__mdiff+0xf4>
 800a9ee:	bf00      	nop
 800a9f0:	0800e334 	.word	0x0800e334
 800a9f4:	0800e345 	.word	0x0800e345

0800a9f8 <__d2b>:
 800a9f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a9fc:	460f      	mov	r7, r1
 800a9fe:	2101      	movs	r1, #1
 800aa00:	4616      	mov	r6, r2
 800aa02:	ec59 8b10 	vmov	r8, r9, d0
 800aa06:	f7ff fcc7 	bl	800a398 <_Balloc>
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	b930      	cbnz	r0, 800aa1c <__d2b+0x24>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	4b23      	ldr	r3, [pc, #140]	@ (800aaa0 <__d2b+0xa8>)
 800aa12:	f240 310f 	movw	r1, #783	@ 0x30f
 800aa16:	4823      	ldr	r0, [pc, #140]	@ (800aaa4 <__d2b+0xac>)
 800aa18:	f000 fae6 	bl	800afe8 <__assert_func>
 800aa1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa24:	b10d      	cbz	r5, 800aa2a <__d2b+0x32>
 800aa26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa2a:	9301      	str	r3, [sp, #4]
 800aa2c:	f1b8 0300 	subs.w	r3, r8, #0
 800aa30:	d023      	beq.n	800aa7a <__d2b+0x82>
 800aa32:	4668      	mov	r0, sp
 800aa34:	9300      	str	r3, [sp, #0]
 800aa36:	f7ff fd78 	bl	800a52a <__lo0bits>
 800aa3a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa3e:	b1d0      	cbz	r0, 800aa76 <__d2b+0x7e>
 800aa40:	f1c0 0320 	rsb	r3, r0, #32
 800aa44:	fa02 f303 	lsl.w	r3, r2, r3
 800aa48:	40c2      	lsrs	r2, r0
 800aa4a:	430b      	orrs	r3, r1
 800aa4c:	9201      	str	r2, [sp, #4]
 800aa4e:	6163      	str	r3, [r4, #20]
 800aa50:	9b01      	ldr	r3, [sp, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	61a3      	str	r3, [r4, #24]
 800aa56:	bf0c      	ite	eq
 800aa58:	2201      	moveq	r2, #1
 800aa5a:	2202      	movne	r2, #2
 800aa5c:	6122      	str	r2, [r4, #16]
 800aa5e:	b1a5      	cbz	r5, 800aa8a <__d2b+0x92>
 800aa60:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aa64:	4405      	add	r5, r0
 800aa66:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aa6a:	603d      	str	r5, [r7, #0]
 800aa6c:	6030      	str	r0, [r6, #0]
 800aa6e:	4620      	mov	r0, r4
 800aa70:	b003      	add	sp, #12
 800aa72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa76:	6161      	str	r1, [r4, #20]
 800aa78:	e7ea      	b.n	800aa50 <__d2b+0x58>
 800aa7a:	a801      	add	r0, sp, #4
 800aa7c:	f7ff fd55 	bl	800a52a <__lo0bits>
 800aa80:	9b01      	ldr	r3, [sp, #4]
 800aa82:	3020      	adds	r0, #32
 800aa84:	2201      	movs	r2, #1
 800aa86:	6163      	str	r3, [r4, #20]
 800aa88:	e7e8      	b.n	800aa5c <__d2b+0x64>
 800aa8a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aa8e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa92:	6038      	str	r0, [r7, #0]
 800aa94:	6918      	ldr	r0, [r3, #16]
 800aa96:	f7ff fd29 	bl	800a4ec <__hi0bits>
 800aa9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa9e:	e7e5      	b.n	800aa6c <__d2b+0x74>
 800aaa0:	0800e334 	.word	0x0800e334
 800aaa4:	0800e345 	.word	0x0800e345

0800aaa8 <__sfputc_r>:
 800aaa8:	6893      	ldr	r3, [r2, #8]
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	6093      	str	r3, [r2, #8]
 800aab0:	b410      	push	{r4}
 800aab2:	da08      	bge.n	800aac6 <__sfputc_r+0x1e>
 800aab4:	6994      	ldr	r4, [r2, #24]
 800aab6:	42a3      	cmp	r3, r4
 800aab8:	db01      	blt.n	800aabe <__sfputc_r+0x16>
 800aaba:	290a      	cmp	r1, #10
 800aabc:	d103      	bne.n	800aac6 <__sfputc_r+0x1e>
 800aabe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aac2:	f000 b9df 	b.w	800ae84 <__swbuf_r>
 800aac6:	6813      	ldr	r3, [r2, #0]
 800aac8:	1c58      	adds	r0, r3, #1
 800aaca:	6010      	str	r0, [r2, #0]
 800aacc:	4608      	mov	r0, r1
 800aace:	7019      	strb	r1, [r3, #0]
 800aad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aad4:	4770      	bx	lr

0800aad6 <__sfputs_r>:
 800aad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad8:	4606      	mov	r6, r0
 800aada:	460f      	mov	r7, r1
 800aadc:	4614      	mov	r4, r2
 800aade:	18d5      	adds	r5, r2, r3
 800aae0:	42ac      	cmp	r4, r5
 800aae2:	d101      	bne.n	800aae8 <__sfputs_r+0x12>
 800aae4:	2000      	movs	r0, #0
 800aae6:	e007      	b.n	800aaf8 <__sfputs_r+0x22>
 800aae8:	463a      	mov	r2, r7
 800aaea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaee:	4630      	mov	r0, r6
 800aaf0:	f7ff ffda 	bl	800aaa8 <__sfputc_r>
 800aaf4:	1c43      	adds	r3, r0, #1
 800aaf6:	d1f3      	bne.n	800aae0 <__sfputs_r+0xa>
 800aaf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aafc <_vfiprintf_r>:
 800aafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab00:	460d      	mov	r5, r1
 800ab02:	b09d      	sub	sp, #116	@ 0x74
 800ab04:	4614      	mov	r4, r2
 800ab06:	4698      	mov	r8, r3
 800ab08:	4606      	mov	r6, r0
 800ab0a:	b118      	cbz	r0, 800ab14 <_vfiprintf_r+0x18>
 800ab0c:	6a03      	ldr	r3, [r0, #32]
 800ab0e:	b90b      	cbnz	r3, 800ab14 <_vfiprintf_r+0x18>
 800ab10:	f7fe fbd8 	bl	80092c4 <__sinit>
 800ab14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab16:	07d9      	lsls	r1, r3, #31
 800ab18:	d405      	bmi.n	800ab26 <_vfiprintf_r+0x2a>
 800ab1a:	89ab      	ldrh	r3, [r5, #12]
 800ab1c:	059a      	lsls	r2, r3, #22
 800ab1e:	d402      	bmi.n	800ab26 <_vfiprintf_r+0x2a>
 800ab20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab22:	f7fe fcd8 	bl	80094d6 <__retarget_lock_acquire_recursive>
 800ab26:	89ab      	ldrh	r3, [r5, #12]
 800ab28:	071b      	lsls	r3, r3, #28
 800ab2a:	d501      	bpl.n	800ab30 <_vfiprintf_r+0x34>
 800ab2c:	692b      	ldr	r3, [r5, #16]
 800ab2e:	b99b      	cbnz	r3, 800ab58 <_vfiprintf_r+0x5c>
 800ab30:	4629      	mov	r1, r5
 800ab32:	4630      	mov	r0, r6
 800ab34:	f000 f9e4 	bl	800af00 <__swsetup_r>
 800ab38:	b170      	cbz	r0, 800ab58 <_vfiprintf_r+0x5c>
 800ab3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab3c:	07dc      	lsls	r4, r3, #31
 800ab3e:	d504      	bpl.n	800ab4a <_vfiprintf_r+0x4e>
 800ab40:	f04f 30ff 	mov.w	r0, #4294967295
 800ab44:	b01d      	add	sp, #116	@ 0x74
 800ab46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab4a:	89ab      	ldrh	r3, [r5, #12]
 800ab4c:	0598      	lsls	r0, r3, #22
 800ab4e:	d4f7      	bmi.n	800ab40 <_vfiprintf_r+0x44>
 800ab50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab52:	f7fe fcc1 	bl	80094d8 <__retarget_lock_release_recursive>
 800ab56:	e7f3      	b.n	800ab40 <_vfiprintf_r+0x44>
 800ab58:	2300      	movs	r3, #0
 800ab5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab5e:	f04f 0901 	mov.w	r9, #1
 800ab62:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800ad18 <_vfiprintf_r+0x21c>
 800ab66:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab68:	2320      	movs	r3, #32
 800ab6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab6e:	2330      	movs	r3, #48	@ 0x30
 800ab70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab74:	4623      	mov	r3, r4
 800ab76:	469a      	mov	sl, r3
 800ab78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab7c:	b10a      	cbz	r2, 800ab82 <_vfiprintf_r+0x86>
 800ab7e:	2a25      	cmp	r2, #37	@ 0x25
 800ab80:	d1f9      	bne.n	800ab76 <_vfiprintf_r+0x7a>
 800ab82:	ebba 0b04 	subs.w	fp, sl, r4
 800ab86:	d00b      	beq.n	800aba0 <_vfiprintf_r+0xa4>
 800ab88:	465b      	mov	r3, fp
 800ab8a:	4622      	mov	r2, r4
 800ab8c:	4629      	mov	r1, r5
 800ab8e:	4630      	mov	r0, r6
 800ab90:	f7ff ffa1 	bl	800aad6 <__sfputs_r>
 800ab94:	3001      	adds	r0, #1
 800ab96:	f000 80a7 	beq.w	800ace8 <_vfiprintf_r+0x1ec>
 800ab9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab9c:	445a      	add	r2, fp
 800ab9e:	9209      	str	r2, [sp, #36]	@ 0x24
 800aba0:	f89a 3000 	ldrb.w	r3, [sl]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	f000 809f 	beq.w	800ace8 <_vfiprintf_r+0x1ec>
 800abaa:	2300      	movs	r3, #0
 800abac:	f04f 32ff 	mov.w	r2, #4294967295
 800abb0:	f10a 0a01 	add.w	sl, sl, #1
 800abb4:	9304      	str	r3, [sp, #16]
 800abb6:	9307      	str	r3, [sp, #28]
 800abb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abbc:	931a      	str	r3, [sp, #104]	@ 0x68
 800abbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abc2:	4654      	mov	r4, sl
 800abc4:	2205      	movs	r2, #5
 800abc6:	4854      	ldr	r0, [pc, #336]	@ (800ad18 <_vfiprintf_r+0x21c>)
 800abc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abcc:	f7fe fc85 	bl	80094da <memchr>
 800abd0:	9a04      	ldr	r2, [sp, #16]
 800abd2:	b9d8      	cbnz	r0, 800ac0c <_vfiprintf_r+0x110>
 800abd4:	06d1      	lsls	r1, r2, #27
 800abd6:	bf44      	itt	mi
 800abd8:	2320      	movmi	r3, #32
 800abda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abde:	0713      	lsls	r3, r2, #28
 800abe0:	bf44      	itt	mi
 800abe2:	232b      	movmi	r3, #43	@ 0x2b
 800abe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abe8:	f89a 3000 	ldrb.w	r3, [sl]
 800abec:	2b2a      	cmp	r3, #42	@ 0x2a
 800abee:	d015      	beq.n	800ac1c <_vfiprintf_r+0x120>
 800abf0:	9a07      	ldr	r2, [sp, #28]
 800abf2:	4654      	mov	r4, sl
 800abf4:	2000      	movs	r0, #0
 800abf6:	f04f 0c0a 	mov.w	ip, #10
 800abfa:	4621      	mov	r1, r4
 800abfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac00:	3b30      	subs	r3, #48	@ 0x30
 800ac02:	2b09      	cmp	r3, #9
 800ac04:	d94b      	bls.n	800ac9e <_vfiprintf_r+0x1a2>
 800ac06:	b1b0      	cbz	r0, 800ac36 <_vfiprintf_r+0x13a>
 800ac08:	9207      	str	r2, [sp, #28]
 800ac0a:	e014      	b.n	800ac36 <_vfiprintf_r+0x13a>
 800ac0c:	eba0 0308 	sub.w	r3, r0, r8
 800ac10:	46a2      	mov	sl, r4
 800ac12:	fa09 f303 	lsl.w	r3, r9, r3
 800ac16:	4313      	orrs	r3, r2
 800ac18:	9304      	str	r3, [sp, #16]
 800ac1a:	e7d2      	b.n	800abc2 <_vfiprintf_r+0xc6>
 800ac1c:	9b03      	ldr	r3, [sp, #12]
 800ac1e:	1d19      	adds	r1, r3, #4
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	9103      	str	r1, [sp, #12]
 800ac26:	bfbb      	ittet	lt
 800ac28:	425b      	neglt	r3, r3
 800ac2a:	f042 0202 	orrlt.w	r2, r2, #2
 800ac2e:	9307      	strge	r3, [sp, #28]
 800ac30:	9307      	strlt	r3, [sp, #28]
 800ac32:	bfb8      	it	lt
 800ac34:	9204      	strlt	r2, [sp, #16]
 800ac36:	7823      	ldrb	r3, [r4, #0]
 800ac38:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac3a:	d10a      	bne.n	800ac52 <_vfiprintf_r+0x156>
 800ac3c:	7863      	ldrb	r3, [r4, #1]
 800ac3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac40:	d132      	bne.n	800aca8 <_vfiprintf_r+0x1ac>
 800ac42:	9b03      	ldr	r3, [sp, #12]
 800ac44:	3402      	adds	r4, #2
 800ac46:	1d1a      	adds	r2, r3, #4
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac4e:	9203      	str	r2, [sp, #12]
 800ac50:	9305      	str	r3, [sp, #20]
 800ac52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ad28 <_vfiprintf_r+0x22c>
 800ac56:	2203      	movs	r2, #3
 800ac58:	7821      	ldrb	r1, [r4, #0]
 800ac5a:	4650      	mov	r0, sl
 800ac5c:	f7fe fc3d 	bl	80094da <memchr>
 800ac60:	b138      	cbz	r0, 800ac72 <_vfiprintf_r+0x176>
 800ac62:	eba0 000a 	sub.w	r0, r0, sl
 800ac66:	2240      	movs	r2, #64	@ 0x40
 800ac68:	9b04      	ldr	r3, [sp, #16]
 800ac6a:	3401      	adds	r4, #1
 800ac6c:	4082      	lsls	r2, r0
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	9304      	str	r3, [sp, #16]
 800ac72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac76:	2206      	movs	r2, #6
 800ac78:	4828      	ldr	r0, [pc, #160]	@ (800ad1c <_vfiprintf_r+0x220>)
 800ac7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac7e:	f7fe fc2c 	bl	80094da <memchr>
 800ac82:	2800      	cmp	r0, #0
 800ac84:	d03f      	beq.n	800ad06 <_vfiprintf_r+0x20a>
 800ac86:	4b26      	ldr	r3, [pc, #152]	@ (800ad20 <_vfiprintf_r+0x224>)
 800ac88:	bb1b      	cbnz	r3, 800acd2 <_vfiprintf_r+0x1d6>
 800ac8a:	9b03      	ldr	r3, [sp, #12]
 800ac8c:	3307      	adds	r3, #7
 800ac8e:	f023 0307 	bic.w	r3, r3, #7
 800ac92:	3308      	adds	r3, #8
 800ac94:	9303      	str	r3, [sp, #12]
 800ac96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac98:	443b      	add	r3, r7
 800ac9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac9c:	e76a      	b.n	800ab74 <_vfiprintf_r+0x78>
 800ac9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800aca2:	460c      	mov	r4, r1
 800aca4:	2001      	movs	r0, #1
 800aca6:	e7a8      	b.n	800abfa <_vfiprintf_r+0xfe>
 800aca8:	2300      	movs	r3, #0
 800acaa:	3401      	adds	r4, #1
 800acac:	f04f 0c0a 	mov.w	ip, #10
 800acb0:	4619      	mov	r1, r3
 800acb2:	9305      	str	r3, [sp, #20]
 800acb4:	4620      	mov	r0, r4
 800acb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acba:	3a30      	subs	r2, #48	@ 0x30
 800acbc:	2a09      	cmp	r2, #9
 800acbe:	d903      	bls.n	800acc8 <_vfiprintf_r+0x1cc>
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d0c6      	beq.n	800ac52 <_vfiprintf_r+0x156>
 800acc4:	9105      	str	r1, [sp, #20]
 800acc6:	e7c4      	b.n	800ac52 <_vfiprintf_r+0x156>
 800acc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800accc:	4604      	mov	r4, r0
 800acce:	2301      	movs	r3, #1
 800acd0:	e7f0      	b.n	800acb4 <_vfiprintf_r+0x1b8>
 800acd2:	ab03      	add	r3, sp, #12
 800acd4:	462a      	mov	r2, r5
 800acd6:	a904      	add	r1, sp, #16
 800acd8:	4630      	mov	r0, r6
 800acda:	9300      	str	r3, [sp, #0]
 800acdc:	4b11      	ldr	r3, [pc, #68]	@ (800ad24 <_vfiprintf_r+0x228>)
 800acde:	f7fd fea9 	bl	8008a34 <_printf_float>
 800ace2:	4607      	mov	r7, r0
 800ace4:	1c78      	adds	r0, r7, #1
 800ace6:	d1d6      	bne.n	800ac96 <_vfiprintf_r+0x19a>
 800ace8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800acea:	07d9      	lsls	r1, r3, #31
 800acec:	d405      	bmi.n	800acfa <_vfiprintf_r+0x1fe>
 800acee:	89ab      	ldrh	r3, [r5, #12]
 800acf0:	059a      	lsls	r2, r3, #22
 800acf2:	d402      	bmi.n	800acfa <_vfiprintf_r+0x1fe>
 800acf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800acf6:	f7fe fbef 	bl	80094d8 <__retarget_lock_release_recursive>
 800acfa:	89ab      	ldrh	r3, [r5, #12]
 800acfc:	065b      	lsls	r3, r3, #25
 800acfe:	f53f af1f 	bmi.w	800ab40 <_vfiprintf_r+0x44>
 800ad02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad04:	e71e      	b.n	800ab44 <_vfiprintf_r+0x48>
 800ad06:	ab03      	add	r3, sp, #12
 800ad08:	462a      	mov	r2, r5
 800ad0a:	a904      	add	r1, sp, #16
 800ad0c:	4630      	mov	r0, r6
 800ad0e:	9300      	str	r3, [sp, #0]
 800ad10:	4b04      	ldr	r3, [pc, #16]	@ (800ad24 <_vfiprintf_r+0x228>)
 800ad12:	f7fe f92b 	bl	8008f6c <_printf_i>
 800ad16:	e7e4      	b.n	800ace2 <_vfiprintf_r+0x1e6>
 800ad18:	0800e4a0 	.word	0x0800e4a0
 800ad1c:	0800e4aa 	.word	0x0800e4aa
 800ad20:	08008a35 	.word	0x08008a35
 800ad24:	0800aad7 	.word	0x0800aad7
 800ad28:	0800e4a6 	.word	0x0800e4a6

0800ad2c <__sflush_r>:
 800ad2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad34:	0716      	lsls	r6, r2, #28
 800ad36:	4605      	mov	r5, r0
 800ad38:	460c      	mov	r4, r1
 800ad3a:	d454      	bmi.n	800ade6 <__sflush_r+0xba>
 800ad3c:	684b      	ldr	r3, [r1, #4]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	dc02      	bgt.n	800ad48 <__sflush_r+0x1c>
 800ad42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	dd48      	ble.n	800adda <__sflush_r+0xae>
 800ad48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad4a:	2e00      	cmp	r6, #0
 800ad4c:	d045      	beq.n	800adda <__sflush_r+0xae>
 800ad4e:	2300      	movs	r3, #0
 800ad50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ad54:	682f      	ldr	r7, [r5, #0]
 800ad56:	6a21      	ldr	r1, [r4, #32]
 800ad58:	602b      	str	r3, [r5, #0]
 800ad5a:	d030      	beq.n	800adbe <__sflush_r+0x92>
 800ad5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ad5e:	89a3      	ldrh	r3, [r4, #12]
 800ad60:	0759      	lsls	r1, r3, #29
 800ad62:	d505      	bpl.n	800ad70 <__sflush_r+0x44>
 800ad64:	6863      	ldr	r3, [r4, #4]
 800ad66:	1ad2      	subs	r2, r2, r3
 800ad68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ad6a:	b10b      	cbz	r3, 800ad70 <__sflush_r+0x44>
 800ad6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ad6e:	1ad2      	subs	r2, r2, r3
 800ad70:	2300      	movs	r3, #0
 800ad72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad74:	6a21      	ldr	r1, [r4, #32]
 800ad76:	4628      	mov	r0, r5
 800ad78:	47b0      	blx	r6
 800ad7a:	1c43      	adds	r3, r0, #1
 800ad7c:	89a3      	ldrh	r3, [r4, #12]
 800ad7e:	d106      	bne.n	800ad8e <__sflush_r+0x62>
 800ad80:	6829      	ldr	r1, [r5, #0]
 800ad82:	291d      	cmp	r1, #29
 800ad84:	d82b      	bhi.n	800adde <__sflush_r+0xb2>
 800ad86:	4a2a      	ldr	r2, [pc, #168]	@ (800ae30 <__sflush_r+0x104>)
 800ad88:	410a      	asrs	r2, r1
 800ad8a:	07d6      	lsls	r6, r2, #31
 800ad8c:	d427      	bmi.n	800adde <__sflush_r+0xb2>
 800ad8e:	2200      	movs	r2, #0
 800ad90:	04d9      	lsls	r1, r3, #19
 800ad92:	6062      	str	r2, [r4, #4]
 800ad94:	6922      	ldr	r2, [r4, #16]
 800ad96:	6022      	str	r2, [r4, #0]
 800ad98:	d504      	bpl.n	800ada4 <__sflush_r+0x78>
 800ad9a:	1c42      	adds	r2, r0, #1
 800ad9c:	d101      	bne.n	800ada2 <__sflush_r+0x76>
 800ad9e:	682b      	ldr	r3, [r5, #0]
 800ada0:	b903      	cbnz	r3, 800ada4 <__sflush_r+0x78>
 800ada2:	6560      	str	r0, [r4, #84]	@ 0x54
 800ada4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ada6:	602f      	str	r7, [r5, #0]
 800ada8:	b1b9      	cbz	r1, 800adda <__sflush_r+0xae>
 800adaa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800adae:	4299      	cmp	r1, r3
 800adb0:	d002      	beq.n	800adb8 <__sflush_r+0x8c>
 800adb2:	4628      	mov	r0, r5
 800adb4:	f7ff f9f0 	bl	800a198 <_free_r>
 800adb8:	2300      	movs	r3, #0
 800adba:	6363      	str	r3, [r4, #52]	@ 0x34
 800adbc:	e00d      	b.n	800adda <__sflush_r+0xae>
 800adbe:	2301      	movs	r3, #1
 800adc0:	4628      	mov	r0, r5
 800adc2:	47b0      	blx	r6
 800adc4:	4602      	mov	r2, r0
 800adc6:	1c50      	adds	r0, r2, #1
 800adc8:	d1c9      	bne.n	800ad5e <__sflush_r+0x32>
 800adca:	682b      	ldr	r3, [r5, #0]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d0c6      	beq.n	800ad5e <__sflush_r+0x32>
 800add0:	2b1d      	cmp	r3, #29
 800add2:	d001      	beq.n	800add8 <__sflush_r+0xac>
 800add4:	2b16      	cmp	r3, #22
 800add6:	d11d      	bne.n	800ae14 <__sflush_r+0xe8>
 800add8:	602f      	str	r7, [r5, #0]
 800adda:	2000      	movs	r0, #0
 800addc:	e021      	b.n	800ae22 <__sflush_r+0xf6>
 800adde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ade2:	b21b      	sxth	r3, r3
 800ade4:	e01a      	b.n	800ae1c <__sflush_r+0xf0>
 800ade6:	690f      	ldr	r7, [r1, #16]
 800ade8:	2f00      	cmp	r7, #0
 800adea:	d0f6      	beq.n	800adda <__sflush_r+0xae>
 800adec:	0793      	lsls	r3, r2, #30
 800adee:	680e      	ldr	r6, [r1, #0]
 800adf0:	600f      	str	r7, [r1, #0]
 800adf2:	bf0c      	ite	eq
 800adf4:	694b      	ldreq	r3, [r1, #20]
 800adf6:	2300      	movne	r3, #0
 800adf8:	eba6 0807 	sub.w	r8, r6, r7
 800adfc:	608b      	str	r3, [r1, #8]
 800adfe:	f1b8 0f00 	cmp.w	r8, #0
 800ae02:	ddea      	ble.n	800adda <__sflush_r+0xae>
 800ae04:	4643      	mov	r3, r8
 800ae06:	463a      	mov	r2, r7
 800ae08:	6a21      	ldr	r1, [r4, #32]
 800ae0a:	4628      	mov	r0, r5
 800ae0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ae0e:	47b0      	blx	r6
 800ae10:	2800      	cmp	r0, #0
 800ae12:	dc08      	bgt.n	800ae26 <__sflush_r+0xfa>
 800ae14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae20:	81a3      	strh	r3, [r4, #12]
 800ae22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae26:	4407      	add	r7, r0
 800ae28:	eba8 0800 	sub.w	r8, r8, r0
 800ae2c:	e7e7      	b.n	800adfe <__sflush_r+0xd2>
 800ae2e:	bf00      	nop
 800ae30:	dfbffffe 	.word	0xdfbffffe

0800ae34 <_fflush_r>:
 800ae34:	b538      	push	{r3, r4, r5, lr}
 800ae36:	690b      	ldr	r3, [r1, #16]
 800ae38:	4605      	mov	r5, r0
 800ae3a:	460c      	mov	r4, r1
 800ae3c:	b913      	cbnz	r3, 800ae44 <_fflush_r+0x10>
 800ae3e:	2500      	movs	r5, #0
 800ae40:	4628      	mov	r0, r5
 800ae42:	bd38      	pop	{r3, r4, r5, pc}
 800ae44:	b118      	cbz	r0, 800ae4e <_fflush_r+0x1a>
 800ae46:	6a03      	ldr	r3, [r0, #32]
 800ae48:	b90b      	cbnz	r3, 800ae4e <_fflush_r+0x1a>
 800ae4a:	f7fe fa3b 	bl	80092c4 <__sinit>
 800ae4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d0f3      	beq.n	800ae3e <_fflush_r+0xa>
 800ae56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ae58:	07d0      	lsls	r0, r2, #31
 800ae5a:	d404      	bmi.n	800ae66 <_fflush_r+0x32>
 800ae5c:	0599      	lsls	r1, r3, #22
 800ae5e:	d402      	bmi.n	800ae66 <_fflush_r+0x32>
 800ae60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae62:	f7fe fb38 	bl	80094d6 <__retarget_lock_acquire_recursive>
 800ae66:	4628      	mov	r0, r5
 800ae68:	4621      	mov	r1, r4
 800ae6a:	f7ff ff5f 	bl	800ad2c <__sflush_r>
 800ae6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae70:	4605      	mov	r5, r0
 800ae72:	07da      	lsls	r2, r3, #31
 800ae74:	d4e4      	bmi.n	800ae40 <_fflush_r+0xc>
 800ae76:	89a3      	ldrh	r3, [r4, #12]
 800ae78:	059b      	lsls	r3, r3, #22
 800ae7a:	d4e1      	bmi.n	800ae40 <_fflush_r+0xc>
 800ae7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae7e:	f7fe fb2b 	bl	80094d8 <__retarget_lock_release_recursive>
 800ae82:	e7dd      	b.n	800ae40 <_fflush_r+0xc>

0800ae84 <__swbuf_r>:
 800ae84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae86:	460e      	mov	r6, r1
 800ae88:	4614      	mov	r4, r2
 800ae8a:	4605      	mov	r5, r0
 800ae8c:	b118      	cbz	r0, 800ae96 <__swbuf_r+0x12>
 800ae8e:	6a03      	ldr	r3, [r0, #32]
 800ae90:	b90b      	cbnz	r3, 800ae96 <__swbuf_r+0x12>
 800ae92:	f7fe fa17 	bl	80092c4 <__sinit>
 800ae96:	69a3      	ldr	r3, [r4, #24]
 800ae98:	60a3      	str	r3, [r4, #8]
 800ae9a:	89a3      	ldrh	r3, [r4, #12]
 800ae9c:	071a      	lsls	r2, r3, #28
 800ae9e:	d501      	bpl.n	800aea4 <__swbuf_r+0x20>
 800aea0:	6923      	ldr	r3, [r4, #16]
 800aea2:	b943      	cbnz	r3, 800aeb6 <__swbuf_r+0x32>
 800aea4:	4621      	mov	r1, r4
 800aea6:	4628      	mov	r0, r5
 800aea8:	f000 f82a 	bl	800af00 <__swsetup_r>
 800aeac:	b118      	cbz	r0, 800aeb6 <__swbuf_r+0x32>
 800aeae:	f04f 37ff 	mov.w	r7, #4294967295
 800aeb2:	4638      	mov	r0, r7
 800aeb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeb6:	6823      	ldr	r3, [r4, #0]
 800aeb8:	b2f6      	uxtb	r6, r6
 800aeba:	6922      	ldr	r2, [r4, #16]
 800aebc:	4637      	mov	r7, r6
 800aebe:	1a98      	subs	r0, r3, r2
 800aec0:	6963      	ldr	r3, [r4, #20]
 800aec2:	4283      	cmp	r3, r0
 800aec4:	dc05      	bgt.n	800aed2 <__swbuf_r+0x4e>
 800aec6:	4621      	mov	r1, r4
 800aec8:	4628      	mov	r0, r5
 800aeca:	f7ff ffb3 	bl	800ae34 <_fflush_r>
 800aece:	2800      	cmp	r0, #0
 800aed0:	d1ed      	bne.n	800aeae <__swbuf_r+0x2a>
 800aed2:	68a3      	ldr	r3, [r4, #8]
 800aed4:	3b01      	subs	r3, #1
 800aed6:	60a3      	str	r3, [r4, #8]
 800aed8:	6823      	ldr	r3, [r4, #0]
 800aeda:	1c5a      	adds	r2, r3, #1
 800aedc:	6022      	str	r2, [r4, #0]
 800aede:	701e      	strb	r6, [r3, #0]
 800aee0:	1c43      	adds	r3, r0, #1
 800aee2:	6962      	ldr	r2, [r4, #20]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d004      	beq.n	800aef2 <__swbuf_r+0x6e>
 800aee8:	89a3      	ldrh	r3, [r4, #12]
 800aeea:	07db      	lsls	r3, r3, #31
 800aeec:	d5e1      	bpl.n	800aeb2 <__swbuf_r+0x2e>
 800aeee:	2e0a      	cmp	r6, #10
 800aef0:	d1df      	bne.n	800aeb2 <__swbuf_r+0x2e>
 800aef2:	4621      	mov	r1, r4
 800aef4:	4628      	mov	r0, r5
 800aef6:	f7ff ff9d 	bl	800ae34 <_fflush_r>
 800aefa:	2800      	cmp	r0, #0
 800aefc:	d0d9      	beq.n	800aeb2 <__swbuf_r+0x2e>
 800aefe:	e7d6      	b.n	800aeae <__swbuf_r+0x2a>

0800af00 <__swsetup_r>:
 800af00:	b538      	push	{r3, r4, r5, lr}
 800af02:	4b29      	ldr	r3, [pc, #164]	@ (800afa8 <__swsetup_r+0xa8>)
 800af04:	4605      	mov	r5, r0
 800af06:	460c      	mov	r4, r1
 800af08:	6818      	ldr	r0, [r3, #0]
 800af0a:	b118      	cbz	r0, 800af14 <__swsetup_r+0x14>
 800af0c:	6a03      	ldr	r3, [r0, #32]
 800af0e:	b90b      	cbnz	r3, 800af14 <__swsetup_r+0x14>
 800af10:	f7fe f9d8 	bl	80092c4 <__sinit>
 800af14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af18:	0719      	lsls	r1, r3, #28
 800af1a:	d422      	bmi.n	800af62 <__swsetup_r+0x62>
 800af1c:	06da      	lsls	r2, r3, #27
 800af1e:	d407      	bmi.n	800af30 <__swsetup_r+0x30>
 800af20:	2209      	movs	r2, #9
 800af22:	602a      	str	r2, [r5, #0]
 800af24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af28:	f04f 30ff 	mov.w	r0, #4294967295
 800af2c:	81a3      	strh	r3, [r4, #12]
 800af2e:	e033      	b.n	800af98 <__swsetup_r+0x98>
 800af30:	0758      	lsls	r0, r3, #29
 800af32:	d512      	bpl.n	800af5a <__swsetup_r+0x5a>
 800af34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af36:	b141      	cbz	r1, 800af4a <__swsetup_r+0x4a>
 800af38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af3c:	4299      	cmp	r1, r3
 800af3e:	d002      	beq.n	800af46 <__swsetup_r+0x46>
 800af40:	4628      	mov	r0, r5
 800af42:	f7ff f929 	bl	800a198 <_free_r>
 800af46:	2300      	movs	r3, #0
 800af48:	6363      	str	r3, [r4, #52]	@ 0x34
 800af4a:	89a3      	ldrh	r3, [r4, #12]
 800af4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800af50:	81a3      	strh	r3, [r4, #12]
 800af52:	2300      	movs	r3, #0
 800af54:	6063      	str	r3, [r4, #4]
 800af56:	6923      	ldr	r3, [r4, #16]
 800af58:	6023      	str	r3, [r4, #0]
 800af5a:	89a3      	ldrh	r3, [r4, #12]
 800af5c:	f043 0308 	orr.w	r3, r3, #8
 800af60:	81a3      	strh	r3, [r4, #12]
 800af62:	6923      	ldr	r3, [r4, #16]
 800af64:	b94b      	cbnz	r3, 800af7a <__swsetup_r+0x7a>
 800af66:	89a3      	ldrh	r3, [r4, #12]
 800af68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800af6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af70:	d003      	beq.n	800af7a <__swsetup_r+0x7a>
 800af72:	4621      	mov	r1, r4
 800af74:	4628      	mov	r0, r5
 800af76:	f000 f8c0 	bl	800b0fa <__smakebuf_r>
 800af7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af7e:	f013 0201 	ands.w	r2, r3, #1
 800af82:	d00a      	beq.n	800af9a <__swsetup_r+0x9a>
 800af84:	2200      	movs	r2, #0
 800af86:	60a2      	str	r2, [r4, #8]
 800af88:	6962      	ldr	r2, [r4, #20]
 800af8a:	4252      	negs	r2, r2
 800af8c:	61a2      	str	r2, [r4, #24]
 800af8e:	6922      	ldr	r2, [r4, #16]
 800af90:	b942      	cbnz	r2, 800afa4 <__swsetup_r+0xa4>
 800af92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800af96:	d1c5      	bne.n	800af24 <__swsetup_r+0x24>
 800af98:	bd38      	pop	{r3, r4, r5, pc}
 800af9a:	0799      	lsls	r1, r3, #30
 800af9c:	bf58      	it	pl
 800af9e:	6962      	ldrpl	r2, [r4, #20]
 800afa0:	60a2      	str	r2, [r4, #8]
 800afa2:	e7f4      	b.n	800af8e <__swsetup_r+0x8e>
 800afa4:	2000      	movs	r0, #0
 800afa6:	e7f7      	b.n	800af98 <__swsetup_r+0x98>
 800afa8:	20000020 	.word	0x20000020

0800afac <_sbrk_r>:
 800afac:	b538      	push	{r3, r4, r5, lr}
 800afae:	2300      	movs	r3, #0
 800afb0:	4d05      	ldr	r5, [pc, #20]	@ (800afc8 <_sbrk_r+0x1c>)
 800afb2:	4604      	mov	r4, r0
 800afb4:	4608      	mov	r0, r1
 800afb6:	602b      	str	r3, [r5, #0]
 800afb8:	f7f8 f98a 	bl	80032d0 <_sbrk>
 800afbc:	1c43      	adds	r3, r0, #1
 800afbe:	d102      	bne.n	800afc6 <_sbrk_r+0x1a>
 800afc0:	682b      	ldr	r3, [r5, #0]
 800afc2:	b103      	cbz	r3, 800afc6 <_sbrk_r+0x1a>
 800afc4:	6023      	str	r3, [r4, #0]
 800afc6:	bd38      	pop	{r3, r4, r5, pc}
 800afc8:	200008bc 	.word	0x200008bc

0800afcc <memcpy>:
 800afcc:	440a      	add	r2, r1
 800afce:	1e43      	subs	r3, r0, #1
 800afd0:	4291      	cmp	r1, r2
 800afd2:	d100      	bne.n	800afd6 <memcpy+0xa>
 800afd4:	4770      	bx	lr
 800afd6:	b510      	push	{r4, lr}
 800afd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afdc:	4291      	cmp	r1, r2
 800afde:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afe2:	d1f9      	bne.n	800afd8 <memcpy+0xc>
 800afe4:	bd10      	pop	{r4, pc}
	...

0800afe8 <__assert_func>:
 800afe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afea:	4614      	mov	r4, r2
 800afec:	461a      	mov	r2, r3
 800afee:	4b09      	ldr	r3, [pc, #36]	@ (800b014 <__assert_func+0x2c>)
 800aff0:	4605      	mov	r5, r0
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	68d8      	ldr	r0, [r3, #12]
 800aff6:	b954      	cbnz	r4, 800b00e <__assert_func+0x26>
 800aff8:	4b07      	ldr	r3, [pc, #28]	@ (800b018 <__assert_func+0x30>)
 800affa:	461c      	mov	r4, r3
 800affc:	9100      	str	r1, [sp, #0]
 800affe:	4907      	ldr	r1, [pc, #28]	@ (800b01c <__assert_func+0x34>)
 800b000:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b004:	462b      	mov	r3, r5
 800b006:	f000 f841 	bl	800b08c <fiprintf>
 800b00a:	f000 f8d5 	bl	800b1b8 <abort>
 800b00e:	4b04      	ldr	r3, [pc, #16]	@ (800b020 <__assert_func+0x38>)
 800b010:	e7f4      	b.n	800affc <__assert_func+0x14>
 800b012:	bf00      	nop
 800b014:	20000020 	.word	0x20000020
 800b018:	0800e4f6 	.word	0x0800e4f6
 800b01c:	0800e4c8 	.word	0x0800e4c8
 800b020:	0800e4bb 	.word	0x0800e4bb

0800b024 <_calloc_r>:
 800b024:	b570      	push	{r4, r5, r6, lr}
 800b026:	fba1 5402 	umull	r5, r4, r1, r2
 800b02a:	b93c      	cbnz	r4, 800b03c <_calloc_r+0x18>
 800b02c:	4629      	mov	r1, r5
 800b02e:	f7ff f927 	bl	800a280 <_malloc_r>
 800b032:	4606      	mov	r6, r0
 800b034:	b928      	cbnz	r0, 800b042 <_calloc_r+0x1e>
 800b036:	2600      	movs	r6, #0
 800b038:	4630      	mov	r0, r6
 800b03a:	bd70      	pop	{r4, r5, r6, pc}
 800b03c:	220c      	movs	r2, #12
 800b03e:	6002      	str	r2, [r0, #0]
 800b040:	e7f9      	b.n	800b036 <_calloc_r+0x12>
 800b042:	462a      	mov	r2, r5
 800b044:	4621      	mov	r1, r4
 800b046:	f7fe f9c8 	bl	80093da <memset>
 800b04a:	e7f5      	b.n	800b038 <_calloc_r+0x14>

0800b04c <__ascii_mbtowc>:
 800b04c:	b082      	sub	sp, #8
 800b04e:	b901      	cbnz	r1, 800b052 <__ascii_mbtowc+0x6>
 800b050:	a901      	add	r1, sp, #4
 800b052:	b142      	cbz	r2, 800b066 <__ascii_mbtowc+0x1a>
 800b054:	b14b      	cbz	r3, 800b06a <__ascii_mbtowc+0x1e>
 800b056:	7813      	ldrb	r3, [r2, #0]
 800b058:	600b      	str	r3, [r1, #0]
 800b05a:	7812      	ldrb	r2, [r2, #0]
 800b05c:	1e10      	subs	r0, r2, #0
 800b05e:	bf18      	it	ne
 800b060:	2001      	movne	r0, #1
 800b062:	b002      	add	sp, #8
 800b064:	4770      	bx	lr
 800b066:	4610      	mov	r0, r2
 800b068:	e7fb      	b.n	800b062 <__ascii_mbtowc+0x16>
 800b06a:	f06f 0001 	mvn.w	r0, #1
 800b06e:	e7f8      	b.n	800b062 <__ascii_mbtowc+0x16>

0800b070 <__ascii_wctomb>:
 800b070:	4603      	mov	r3, r0
 800b072:	4608      	mov	r0, r1
 800b074:	b141      	cbz	r1, 800b088 <__ascii_wctomb+0x18>
 800b076:	2aff      	cmp	r2, #255	@ 0xff
 800b078:	d904      	bls.n	800b084 <__ascii_wctomb+0x14>
 800b07a:	228a      	movs	r2, #138	@ 0x8a
 800b07c:	f04f 30ff 	mov.w	r0, #4294967295
 800b080:	601a      	str	r2, [r3, #0]
 800b082:	4770      	bx	lr
 800b084:	2001      	movs	r0, #1
 800b086:	700a      	strb	r2, [r1, #0]
 800b088:	4770      	bx	lr
	...

0800b08c <fiprintf>:
 800b08c:	b40e      	push	{r1, r2, r3}
 800b08e:	b503      	push	{r0, r1, lr}
 800b090:	ab03      	add	r3, sp, #12
 800b092:	4601      	mov	r1, r0
 800b094:	4805      	ldr	r0, [pc, #20]	@ (800b0ac <fiprintf+0x20>)
 800b096:	f853 2b04 	ldr.w	r2, [r3], #4
 800b09a:	6800      	ldr	r0, [r0, #0]
 800b09c:	9301      	str	r3, [sp, #4]
 800b09e:	f7ff fd2d 	bl	800aafc <_vfiprintf_r>
 800b0a2:	b002      	add	sp, #8
 800b0a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0a8:	b003      	add	sp, #12
 800b0aa:	4770      	bx	lr
 800b0ac:	20000020 	.word	0x20000020

0800b0b0 <__swhatbuf_r>:
 800b0b0:	b570      	push	{r4, r5, r6, lr}
 800b0b2:	460c      	mov	r4, r1
 800b0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0b8:	b096      	sub	sp, #88	@ 0x58
 800b0ba:	4615      	mov	r5, r2
 800b0bc:	2900      	cmp	r1, #0
 800b0be:	461e      	mov	r6, r3
 800b0c0:	da0c      	bge.n	800b0dc <__swhatbuf_r+0x2c>
 800b0c2:	89a3      	ldrh	r3, [r4, #12]
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b0ca:	bf14      	ite	ne
 800b0cc:	2340      	movne	r3, #64	@ 0x40
 800b0ce:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b0d2:	2000      	movs	r0, #0
 800b0d4:	6031      	str	r1, [r6, #0]
 800b0d6:	602b      	str	r3, [r5, #0]
 800b0d8:	b016      	add	sp, #88	@ 0x58
 800b0da:	bd70      	pop	{r4, r5, r6, pc}
 800b0dc:	466a      	mov	r2, sp
 800b0de:	f000 f849 	bl	800b174 <_fstat_r>
 800b0e2:	2800      	cmp	r0, #0
 800b0e4:	dbed      	blt.n	800b0c2 <__swhatbuf_r+0x12>
 800b0e6:	9901      	ldr	r1, [sp, #4]
 800b0e8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b0ec:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b0f0:	4259      	negs	r1, r3
 800b0f2:	4159      	adcs	r1, r3
 800b0f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b0f8:	e7eb      	b.n	800b0d2 <__swhatbuf_r+0x22>

0800b0fa <__smakebuf_r>:
 800b0fa:	898b      	ldrh	r3, [r1, #12]
 800b0fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0fe:	079d      	lsls	r5, r3, #30
 800b100:	4606      	mov	r6, r0
 800b102:	460c      	mov	r4, r1
 800b104:	d507      	bpl.n	800b116 <__smakebuf_r+0x1c>
 800b106:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b10a:	6023      	str	r3, [r4, #0]
 800b10c:	6123      	str	r3, [r4, #16]
 800b10e:	2301      	movs	r3, #1
 800b110:	6163      	str	r3, [r4, #20]
 800b112:	b003      	add	sp, #12
 800b114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b116:	ab01      	add	r3, sp, #4
 800b118:	466a      	mov	r2, sp
 800b11a:	f7ff ffc9 	bl	800b0b0 <__swhatbuf_r>
 800b11e:	9f00      	ldr	r7, [sp, #0]
 800b120:	4605      	mov	r5, r0
 800b122:	4630      	mov	r0, r6
 800b124:	4639      	mov	r1, r7
 800b126:	f7ff f8ab 	bl	800a280 <_malloc_r>
 800b12a:	b948      	cbnz	r0, 800b140 <__smakebuf_r+0x46>
 800b12c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b130:	059a      	lsls	r2, r3, #22
 800b132:	d4ee      	bmi.n	800b112 <__smakebuf_r+0x18>
 800b134:	f023 0303 	bic.w	r3, r3, #3
 800b138:	f043 0302 	orr.w	r3, r3, #2
 800b13c:	81a3      	strh	r3, [r4, #12]
 800b13e:	e7e2      	b.n	800b106 <__smakebuf_r+0xc>
 800b140:	89a3      	ldrh	r3, [r4, #12]
 800b142:	6020      	str	r0, [r4, #0]
 800b144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b148:	81a3      	strh	r3, [r4, #12]
 800b14a:	9b01      	ldr	r3, [sp, #4]
 800b14c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b150:	b15b      	cbz	r3, 800b16a <__smakebuf_r+0x70>
 800b152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b156:	4630      	mov	r0, r6
 800b158:	f000 f81e 	bl	800b198 <_isatty_r>
 800b15c:	b128      	cbz	r0, 800b16a <__smakebuf_r+0x70>
 800b15e:	89a3      	ldrh	r3, [r4, #12]
 800b160:	f023 0303 	bic.w	r3, r3, #3
 800b164:	f043 0301 	orr.w	r3, r3, #1
 800b168:	81a3      	strh	r3, [r4, #12]
 800b16a:	89a3      	ldrh	r3, [r4, #12]
 800b16c:	431d      	orrs	r5, r3
 800b16e:	81a5      	strh	r5, [r4, #12]
 800b170:	e7cf      	b.n	800b112 <__smakebuf_r+0x18>
	...

0800b174 <_fstat_r>:
 800b174:	b538      	push	{r3, r4, r5, lr}
 800b176:	2300      	movs	r3, #0
 800b178:	4d06      	ldr	r5, [pc, #24]	@ (800b194 <_fstat_r+0x20>)
 800b17a:	4604      	mov	r4, r0
 800b17c:	4608      	mov	r0, r1
 800b17e:	4611      	mov	r1, r2
 800b180:	602b      	str	r3, [r5, #0]
 800b182:	f7f8 f87c 	bl	800327e <_fstat>
 800b186:	1c43      	adds	r3, r0, #1
 800b188:	d102      	bne.n	800b190 <_fstat_r+0x1c>
 800b18a:	682b      	ldr	r3, [r5, #0]
 800b18c:	b103      	cbz	r3, 800b190 <_fstat_r+0x1c>
 800b18e:	6023      	str	r3, [r4, #0]
 800b190:	bd38      	pop	{r3, r4, r5, pc}
 800b192:	bf00      	nop
 800b194:	200008bc 	.word	0x200008bc

0800b198 <_isatty_r>:
 800b198:	b538      	push	{r3, r4, r5, lr}
 800b19a:	2300      	movs	r3, #0
 800b19c:	4d05      	ldr	r5, [pc, #20]	@ (800b1b4 <_isatty_r+0x1c>)
 800b19e:	4604      	mov	r4, r0
 800b1a0:	4608      	mov	r0, r1
 800b1a2:	602b      	str	r3, [r5, #0]
 800b1a4:	f7f8 f87b 	bl	800329e <_isatty>
 800b1a8:	1c43      	adds	r3, r0, #1
 800b1aa:	d102      	bne.n	800b1b2 <_isatty_r+0x1a>
 800b1ac:	682b      	ldr	r3, [r5, #0]
 800b1ae:	b103      	cbz	r3, 800b1b2 <_isatty_r+0x1a>
 800b1b0:	6023      	str	r3, [r4, #0]
 800b1b2:	bd38      	pop	{r3, r4, r5, pc}
 800b1b4:	200008bc 	.word	0x200008bc

0800b1b8 <abort>:
 800b1b8:	2006      	movs	r0, #6
 800b1ba:	b508      	push	{r3, lr}
 800b1bc:	f000 f82c 	bl	800b218 <raise>
 800b1c0:	2001      	movs	r0, #1
 800b1c2:	f7f8 f828 	bl	8003216 <_exit>

0800b1c6 <_raise_r>:
 800b1c6:	291f      	cmp	r1, #31
 800b1c8:	b538      	push	{r3, r4, r5, lr}
 800b1ca:	4605      	mov	r5, r0
 800b1cc:	460c      	mov	r4, r1
 800b1ce:	d904      	bls.n	800b1da <_raise_r+0x14>
 800b1d0:	2316      	movs	r3, #22
 800b1d2:	6003      	str	r3, [r0, #0]
 800b1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d8:	bd38      	pop	{r3, r4, r5, pc}
 800b1da:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b1dc:	b112      	cbz	r2, 800b1e4 <_raise_r+0x1e>
 800b1de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1e2:	b94b      	cbnz	r3, 800b1f8 <_raise_r+0x32>
 800b1e4:	4628      	mov	r0, r5
 800b1e6:	f000 f831 	bl	800b24c <_getpid_r>
 800b1ea:	4622      	mov	r2, r4
 800b1ec:	4601      	mov	r1, r0
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1f4:	f000 b818 	b.w	800b228 <_kill_r>
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d00a      	beq.n	800b212 <_raise_r+0x4c>
 800b1fc:	1c59      	adds	r1, r3, #1
 800b1fe:	d103      	bne.n	800b208 <_raise_r+0x42>
 800b200:	2316      	movs	r3, #22
 800b202:	6003      	str	r3, [r0, #0]
 800b204:	2001      	movs	r0, #1
 800b206:	e7e7      	b.n	800b1d8 <_raise_r+0x12>
 800b208:	2100      	movs	r1, #0
 800b20a:	4620      	mov	r0, r4
 800b20c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b210:	4798      	blx	r3
 800b212:	2000      	movs	r0, #0
 800b214:	e7e0      	b.n	800b1d8 <_raise_r+0x12>
	...

0800b218 <raise>:
 800b218:	4b02      	ldr	r3, [pc, #8]	@ (800b224 <raise+0xc>)
 800b21a:	4601      	mov	r1, r0
 800b21c:	6818      	ldr	r0, [r3, #0]
 800b21e:	f7ff bfd2 	b.w	800b1c6 <_raise_r>
 800b222:	bf00      	nop
 800b224:	20000020 	.word	0x20000020

0800b228 <_kill_r>:
 800b228:	b538      	push	{r3, r4, r5, lr}
 800b22a:	2300      	movs	r3, #0
 800b22c:	4d06      	ldr	r5, [pc, #24]	@ (800b248 <_kill_r+0x20>)
 800b22e:	4604      	mov	r4, r0
 800b230:	4608      	mov	r0, r1
 800b232:	4611      	mov	r1, r2
 800b234:	602b      	str	r3, [r5, #0]
 800b236:	f7f7 ffde 	bl	80031f6 <_kill>
 800b23a:	1c43      	adds	r3, r0, #1
 800b23c:	d102      	bne.n	800b244 <_kill_r+0x1c>
 800b23e:	682b      	ldr	r3, [r5, #0]
 800b240:	b103      	cbz	r3, 800b244 <_kill_r+0x1c>
 800b242:	6023      	str	r3, [r4, #0]
 800b244:	bd38      	pop	{r3, r4, r5, pc}
 800b246:	bf00      	nop
 800b248:	200008bc 	.word	0x200008bc

0800b24c <_getpid_r>:
 800b24c:	f7f7 bfcb 	b.w	80031e6 <_getpid>

0800b250 <asin>:
 800b250:	b538      	push	{r3, r4, r5, lr}
 800b252:	ec55 4b10 	vmov	r4, r5, d0
 800b256:	ed2d 8b02 	vpush	{d8}
 800b25a:	f000 fb39 	bl	800b8d0 <__ieee754_asin>
 800b25e:	4622      	mov	r2, r4
 800b260:	462b      	mov	r3, r5
 800b262:	4620      	mov	r0, r4
 800b264:	4629      	mov	r1, r5
 800b266:	eeb0 8a40 	vmov.f32	s16, s0
 800b26a:	eef0 8a60 	vmov.f32	s17, s1
 800b26e:	f7f5 fc41 	bl	8000af4 <__aeabi_dcmpun>
 800b272:	b9a8      	cbnz	r0, 800b2a0 <asin+0x50>
 800b274:	ec45 4b10 	vmov	d0, r4, r5
 800b278:	f000 f8e6 	bl	800b448 <fabs>
 800b27c:	2200      	movs	r2, #0
 800b27e:	4b0c      	ldr	r3, [pc, #48]	@ (800b2b0 <asin+0x60>)
 800b280:	ec51 0b10 	vmov	r0, r1, d0
 800b284:	f7f5 fc2c 	bl	8000ae0 <__aeabi_dcmpgt>
 800b288:	b150      	cbz	r0, 800b2a0 <asin+0x50>
 800b28a:	f7fe f8f9 	bl	8009480 <__errno>
 800b28e:	2321      	movs	r3, #33	@ 0x21
 800b290:	ecbd 8b02 	vpop	{d8}
 800b294:	6003      	str	r3, [r0, #0]
 800b296:	4807      	ldr	r0, [pc, #28]	@ (800b2b4 <asin+0x64>)
 800b298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b29c:	f000 b93c 	b.w	800b518 <nan>
 800b2a0:	eeb0 0a48 	vmov.f32	s0, s16
 800b2a4:	eef0 0a68 	vmov.f32	s1, s17
 800b2a8:	ecbd 8b02 	vpop	{d8}
 800b2ac:	bd38      	pop	{r3, r4, r5, pc}
 800b2ae:	bf00      	nop
 800b2b0:	3ff00000 	.word	0x3ff00000
 800b2b4:	0800e4f6 	.word	0x0800e4f6

0800b2b8 <atan2>:
 800b2b8:	f000 bd0e 	b.w	800bcd8 <__ieee754_atan2>

0800b2bc <pow>:
 800b2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2be:	ec55 4b11 	vmov	r4, r5, d1
 800b2c2:	ed2d 8b02 	vpush	{d8}
 800b2c6:	eeb0 8a40 	vmov.f32	s16, s0
 800b2ca:	eef0 8a60 	vmov.f32	s17, s1
 800b2ce:	f000 fdcb 	bl	800be68 <__ieee754_pow>
 800b2d2:	4622      	mov	r2, r4
 800b2d4:	462b      	mov	r3, r5
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	4629      	mov	r1, r5
 800b2da:	ec57 6b10 	vmov	r6, r7, d0
 800b2de:	f7f5 fc09 	bl	8000af4 <__aeabi_dcmpun>
 800b2e2:	2800      	cmp	r0, #0
 800b2e4:	d13b      	bne.n	800b35e <pow+0xa2>
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	ec51 0b18 	vmov	r0, r1, d8
 800b2ee:	f7f5 fbcf 	bl	8000a90 <__aeabi_dcmpeq>
 800b2f2:	b1b8      	cbz	r0, 800b324 <pow+0x68>
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	4629      	mov	r1, r5
 800b2fc:	f7f5 fbc8 	bl	8000a90 <__aeabi_dcmpeq>
 800b300:	2800      	cmp	r0, #0
 800b302:	d146      	bne.n	800b392 <pow+0xd6>
 800b304:	ec45 4b10 	vmov	d0, r4, r5
 800b308:	f000 f8f9 	bl	800b4fe <finite>
 800b30c:	b338      	cbz	r0, 800b35e <pow+0xa2>
 800b30e:	2200      	movs	r2, #0
 800b310:	2300      	movs	r3, #0
 800b312:	4620      	mov	r0, r4
 800b314:	4629      	mov	r1, r5
 800b316:	f7f5 fbc5 	bl	8000aa4 <__aeabi_dcmplt>
 800b31a:	b300      	cbz	r0, 800b35e <pow+0xa2>
 800b31c:	f7fe f8b0 	bl	8009480 <__errno>
 800b320:	2322      	movs	r3, #34	@ 0x22
 800b322:	e01b      	b.n	800b35c <pow+0xa0>
 800b324:	ec47 6b10 	vmov	d0, r6, r7
 800b328:	f000 f8e9 	bl	800b4fe <finite>
 800b32c:	b9e0      	cbnz	r0, 800b368 <pow+0xac>
 800b32e:	eeb0 0a48 	vmov.f32	s0, s16
 800b332:	eef0 0a68 	vmov.f32	s1, s17
 800b336:	f000 f8e2 	bl	800b4fe <finite>
 800b33a:	b1a8      	cbz	r0, 800b368 <pow+0xac>
 800b33c:	ec45 4b10 	vmov	d0, r4, r5
 800b340:	f000 f8dd 	bl	800b4fe <finite>
 800b344:	b180      	cbz	r0, 800b368 <pow+0xac>
 800b346:	4632      	mov	r2, r6
 800b348:	463b      	mov	r3, r7
 800b34a:	4630      	mov	r0, r6
 800b34c:	4639      	mov	r1, r7
 800b34e:	f7f5 fbd1 	bl	8000af4 <__aeabi_dcmpun>
 800b352:	2800      	cmp	r0, #0
 800b354:	d0e2      	beq.n	800b31c <pow+0x60>
 800b356:	f7fe f893 	bl	8009480 <__errno>
 800b35a:	2321      	movs	r3, #33	@ 0x21
 800b35c:	6003      	str	r3, [r0, #0]
 800b35e:	ecbd 8b02 	vpop	{d8}
 800b362:	ec47 6b10 	vmov	d0, r6, r7
 800b366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b368:	2200      	movs	r2, #0
 800b36a:	2300      	movs	r3, #0
 800b36c:	4630      	mov	r0, r6
 800b36e:	4639      	mov	r1, r7
 800b370:	f7f5 fb8e 	bl	8000a90 <__aeabi_dcmpeq>
 800b374:	2800      	cmp	r0, #0
 800b376:	d0f2      	beq.n	800b35e <pow+0xa2>
 800b378:	eeb0 0a48 	vmov.f32	s0, s16
 800b37c:	eef0 0a68 	vmov.f32	s1, s17
 800b380:	f000 f8bd 	bl	800b4fe <finite>
 800b384:	2800      	cmp	r0, #0
 800b386:	d0ea      	beq.n	800b35e <pow+0xa2>
 800b388:	ec45 4b10 	vmov	d0, r4, r5
 800b38c:	f000 f8b7 	bl	800b4fe <finite>
 800b390:	e7c3      	b.n	800b31a <pow+0x5e>
 800b392:	2600      	movs	r6, #0
 800b394:	4f00      	ldr	r7, [pc, #0]	@ (800b398 <pow+0xdc>)
 800b396:	e7e2      	b.n	800b35e <pow+0xa2>
 800b398:	3ff00000 	.word	0x3ff00000
 800b39c:	00000000 	.word	0x00000000

0800b3a0 <cos>:
 800b3a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3a2:	ec53 2b10 	vmov	r2, r3, d0
 800b3a6:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b3aa:	4825      	ldr	r0, [pc, #148]	@ (800b440 <cos+0xa0>)
 800b3ac:	4281      	cmp	r1, r0
 800b3ae:	d806      	bhi.n	800b3be <cos+0x1e>
 800b3b0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800b438 <cos+0x98>
 800b3b4:	b005      	add	sp, #20
 800b3b6:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3ba:	f000 b905 	b.w	800b5c8 <__kernel_cos>
 800b3be:	4821      	ldr	r0, [pc, #132]	@ (800b444 <cos+0xa4>)
 800b3c0:	4281      	cmp	r1, r0
 800b3c2:	d908      	bls.n	800b3d6 <cos+0x36>
 800b3c4:	4610      	mov	r0, r2
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	f7f4 ff42 	bl	8000250 <__aeabi_dsub>
 800b3cc:	ec41 0b10 	vmov	d0, r0, r1
 800b3d0:	b005      	add	sp, #20
 800b3d2:	f85d fb04 	ldr.w	pc, [sp], #4
 800b3d6:	4668      	mov	r0, sp
 800b3d8:	f001 fa86 	bl	800c8e8 <__ieee754_rem_pio2>
 800b3dc:	f000 0003 	and.w	r0, r0, #3
 800b3e0:	2801      	cmp	r0, #1
 800b3e2:	d00b      	beq.n	800b3fc <cos+0x5c>
 800b3e4:	2802      	cmp	r0, #2
 800b3e6:	d015      	beq.n	800b414 <cos+0x74>
 800b3e8:	b9d8      	cbnz	r0, 800b422 <cos+0x82>
 800b3ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b3ee:	ed9d 0b00 	vldr	d0, [sp]
 800b3f2:	f000 f8e9 	bl	800b5c8 <__kernel_cos>
 800b3f6:	ec51 0b10 	vmov	r0, r1, d0
 800b3fa:	e7e7      	b.n	800b3cc <cos+0x2c>
 800b3fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b400:	ed9d 0b00 	vldr	d0, [sp]
 800b404:	f000 f9a8 	bl	800b758 <__kernel_sin>
 800b408:	ec53 2b10 	vmov	r2, r3, d0
 800b40c:	4610      	mov	r0, r2
 800b40e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b412:	e7db      	b.n	800b3cc <cos+0x2c>
 800b414:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b418:	ed9d 0b00 	vldr	d0, [sp]
 800b41c:	f000 f8d4 	bl	800b5c8 <__kernel_cos>
 800b420:	e7f2      	b.n	800b408 <cos+0x68>
 800b422:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b426:	ed9d 0b00 	vldr	d0, [sp]
 800b42a:	2001      	movs	r0, #1
 800b42c:	f000 f994 	bl	800b758 <__kernel_sin>
 800b430:	e7e1      	b.n	800b3f6 <cos+0x56>
 800b432:	bf00      	nop
 800b434:	f3af 8000 	nop.w
	...
 800b440:	3fe921fb 	.word	0x3fe921fb
 800b444:	7fefffff 	.word	0x7fefffff

0800b448 <fabs>:
 800b448:	ec51 0b10 	vmov	r0, r1, d0
 800b44c:	4602      	mov	r2, r0
 800b44e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b452:	ec43 2b10 	vmov	d0, r2, r3
 800b456:	4770      	bx	lr

0800b458 <asinf>:
 800b458:	b508      	push	{r3, lr}
 800b45a:	ed2d 8b02 	vpush	{d8}
 800b45e:	eeb0 8a40 	vmov.f32	s16, s0
 800b462:	f001 fdd5 	bl	800d010 <__ieee754_asinf>
 800b466:	eef0 8a40 	vmov.f32	s17, s0
 800b46a:	eeb4 8a48 	vcmp.f32	s16, s16
 800b46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b472:	d615      	bvs.n	800b4a0 <asinf+0x48>
 800b474:	eeb0 0a48 	vmov.f32	s0, s16
 800b478:	f000 f83a 	bl	800b4f0 <fabsf>
 800b47c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b480:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b488:	dd0a      	ble.n	800b4a0 <asinf+0x48>
 800b48a:	f7fd fff9 	bl	8009480 <__errno>
 800b48e:	2321      	movs	r3, #33	@ 0x21
 800b490:	ecbd 8b02 	vpop	{d8}
 800b494:	6003      	str	r3, [r0, #0]
 800b496:	4805      	ldr	r0, [pc, #20]	@ (800b4ac <asinf+0x54>)
 800b498:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b49c:	f000 b844 	b.w	800b528 <nanf>
 800b4a0:	eeb0 0a68 	vmov.f32	s0, s17
 800b4a4:	ecbd 8b02 	vpop	{d8}
 800b4a8:	bd08      	pop	{r3, pc}
 800b4aa:	bf00      	nop
 800b4ac:	0800e4f6 	.word	0x0800e4f6

0800b4b0 <atan2f>:
 800b4b0:	f001 be94 	b.w	800d1dc <__ieee754_atan2f>

0800b4b4 <sqrtf>:
 800b4b4:	b508      	push	{r3, lr}
 800b4b6:	ed2d 8b02 	vpush	{d8}
 800b4ba:	eeb0 8a40 	vmov.f32	s16, s0
 800b4be:	f000 f839 	bl	800b534 <__ieee754_sqrtf>
 800b4c2:	eeb4 8a48 	vcmp.f32	s16, s16
 800b4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ca:	d60c      	bvs.n	800b4e6 <sqrtf+0x32>
 800b4cc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b4ec <sqrtf+0x38>
 800b4d0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4d8:	d505      	bpl.n	800b4e6 <sqrtf+0x32>
 800b4da:	f7fd ffd1 	bl	8009480 <__errno>
 800b4de:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b4e2:	2321      	movs	r3, #33	@ 0x21
 800b4e4:	6003      	str	r3, [r0, #0]
 800b4e6:	ecbd 8b02 	vpop	{d8}
 800b4ea:	bd08      	pop	{r3, pc}
 800b4ec:	00000000 	.word	0x00000000

0800b4f0 <fabsf>:
 800b4f0:	ee10 3a10 	vmov	r3, s0
 800b4f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b4f8:	ee00 3a10 	vmov	s0, r3
 800b4fc:	4770      	bx	lr

0800b4fe <finite>:
 800b4fe:	b082      	sub	sp, #8
 800b500:	ed8d 0b00 	vstr	d0, [sp]
 800b504:	9801      	ldr	r0, [sp, #4]
 800b506:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800b50a:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800b50e:	0fc0      	lsrs	r0, r0, #31
 800b510:	b002      	add	sp, #8
 800b512:	4770      	bx	lr
 800b514:	0000      	movs	r0, r0
	...

0800b518 <nan>:
 800b518:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b520 <nan+0x8>
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop
 800b520:	00000000 	.word	0x00000000
 800b524:	7ff80000 	.word	0x7ff80000

0800b528 <nanf>:
 800b528:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b530 <nanf+0x8>
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	7fc00000 	.word	0x7fc00000

0800b534 <__ieee754_sqrtf>:
 800b534:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b538:	4770      	bx	lr
	...

0800b53c <round>:
 800b53c:	ec51 0b10 	vmov	r0, r1, d0
 800b540:	b570      	push	{r4, r5, r6, lr}
 800b542:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800b546:	460b      	mov	r3, r1
 800b548:	4605      	mov	r5, r0
 800b54a:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800b54e:	2a13      	cmp	r2, #19
 800b550:	dc1b      	bgt.n	800b58a <round+0x4e>
 800b552:	2a00      	cmp	r2, #0
 800b554:	da0b      	bge.n	800b56e <round+0x32>
 800b556:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800b55a:	3201      	adds	r2, #1
 800b55c:	bf04      	itt	eq
 800b55e:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800b562:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800b566:	2200      	movs	r2, #0
 800b568:	4619      	mov	r1, r3
 800b56a:	4610      	mov	r0, r2
 800b56c:	e015      	b.n	800b59a <round+0x5e>
 800b56e:	4c15      	ldr	r4, [pc, #84]	@ (800b5c4 <round+0x88>)
 800b570:	4114      	asrs	r4, r2
 800b572:	ea04 0601 	and.w	r6, r4, r1
 800b576:	4306      	orrs	r6, r0
 800b578:	d00f      	beq.n	800b59a <round+0x5e>
 800b57a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800b57e:	fa41 f202 	asr.w	r2, r1, r2
 800b582:	4413      	add	r3, r2
 800b584:	ea23 0304 	bic.w	r3, r3, r4
 800b588:	e7ed      	b.n	800b566 <round+0x2a>
 800b58a:	2a33      	cmp	r2, #51	@ 0x33
 800b58c:	dd08      	ble.n	800b5a0 <round+0x64>
 800b58e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800b592:	d102      	bne.n	800b59a <round+0x5e>
 800b594:	4602      	mov	r2, r0
 800b596:	f7f4 fe5d 	bl	8000254 <__adddf3>
 800b59a:	ec41 0b10 	vmov	d0, r0, r1
 800b59e:	bd70      	pop	{r4, r5, r6, pc}
 800b5a0:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800b5a4:	f04f 34ff 	mov.w	r4, #4294967295
 800b5a8:	40f4      	lsrs	r4, r6
 800b5aa:	4204      	tst	r4, r0
 800b5ac:	d0f5      	beq.n	800b59a <round+0x5e>
 800b5ae:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	408a      	lsls	r2, r1
 800b5b6:	1952      	adds	r2, r2, r5
 800b5b8:	bf28      	it	cs
 800b5ba:	3301      	addcs	r3, #1
 800b5bc:	ea22 0204 	bic.w	r2, r2, r4
 800b5c0:	e7d2      	b.n	800b568 <round+0x2c>
 800b5c2:	bf00      	nop
 800b5c4:	000fffff 	.word	0x000fffff

0800b5c8 <__kernel_cos>:
 800b5c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5cc:	ec57 6b10 	vmov	r6, r7, d0
 800b5d0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b5d4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800b5d8:	ed8d 1b00 	vstr	d1, [sp]
 800b5dc:	d206      	bcs.n	800b5ec <__kernel_cos+0x24>
 800b5de:	4630      	mov	r0, r6
 800b5e0:	4639      	mov	r1, r7
 800b5e2:	f7f5 fa9d 	bl	8000b20 <__aeabi_d2iz>
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	f000 8088 	beq.w	800b6fc <__kernel_cos+0x134>
 800b5ec:	4632      	mov	r2, r6
 800b5ee:	463b      	mov	r3, r7
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	4639      	mov	r1, r7
 800b5f4:	f7f4 ffe4 	bl	80005c0 <__aeabi_dmul>
 800b5f8:	4604      	mov	r4, r0
 800b5fa:	460d      	mov	r5, r1
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	4b50      	ldr	r3, [pc, #320]	@ (800b740 <__kernel_cos+0x178>)
 800b600:	f7f4 ffde 	bl	80005c0 <__aeabi_dmul>
 800b604:	4682      	mov	sl, r0
 800b606:	468b      	mov	fp, r1
 800b608:	4620      	mov	r0, r4
 800b60a:	4629      	mov	r1, r5
 800b60c:	a33e      	add	r3, pc, #248	@ (adr r3, 800b708 <__kernel_cos+0x140>)
 800b60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b612:	f7f4 ffd5 	bl	80005c0 <__aeabi_dmul>
 800b616:	a33e      	add	r3, pc, #248	@ (adr r3, 800b710 <__kernel_cos+0x148>)
 800b618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61c:	f7f4 fe1a 	bl	8000254 <__adddf3>
 800b620:	4622      	mov	r2, r4
 800b622:	462b      	mov	r3, r5
 800b624:	f7f4 ffcc 	bl	80005c0 <__aeabi_dmul>
 800b628:	a33b      	add	r3, pc, #236	@ (adr r3, 800b718 <__kernel_cos+0x150>)
 800b62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62e:	f7f4 fe0f 	bl	8000250 <__aeabi_dsub>
 800b632:	4622      	mov	r2, r4
 800b634:	462b      	mov	r3, r5
 800b636:	f7f4 ffc3 	bl	80005c0 <__aeabi_dmul>
 800b63a:	a339      	add	r3, pc, #228	@ (adr r3, 800b720 <__kernel_cos+0x158>)
 800b63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b640:	f7f4 fe08 	bl	8000254 <__adddf3>
 800b644:	4622      	mov	r2, r4
 800b646:	462b      	mov	r3, r5
 800b648:	f7f4 ffba 	bl	80005c0 <__aeabi_dmul>
 800b64c:	a336      	add	r3, pc, #216	@ (adr r3, 800b728 <__kernel_cos+0x160>)
 800b64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b652:	f7f4 fdfd 	bl	8000250 <__aeabi_dsub>
 800b656:	4622      	mov	r2, r4
 800b658:	462b      	mov	r3, r5
 800b65a:	f7f4 ffb1 	bl	80005c0 <__aeabi_dmul>
 800b65e:	a334      	add	r3, pc, #208	@ (adr r3, 800b730 <__kernel_cos+0x168>)
 800b660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b664:	f7f4 fdf6 	bl	8000254 <__adddf3>
 800b668:	4622      	mov	r2, r4
 800b66a:	462b      	mov	r3, r5
 800b66c:	f7f4 ffa8 	bl	80005c0 <__aeabi_dmul>
 800b670:	4622      	mov	r2, r4
 800b672:	462b      	mov	r3, r5
 800b674:	f7f4 ffa4 	bl	80005c0 <__aeabi_dmul>
 800b678:	4604      	mov	r4, r0
 800b67a:	460d      	mov	r5, r1
 800b67c:	4630      	mov	r0, r6
 800b67e:	4639      	mov	r1, r7
 800b680:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b684:	f7f4 ff9c 	bl	80005c0 <__aeabi_dmul>
 800b688:	460b      	mov	r3, r1
 800b68a:	4602      	mov	r2, r0
 800b68c:	4629      	mov	r1, r5
 800b68e:	4620      	mov	r0, r4
 800b690:	f7f4 fdde 	bl	8000250 <__aeabi_dsub>
 800b694:	4b2b      	ldr	r3, [pc, #172]	@ (800b744 <__kernel_cos+0x17c>)
 800b696:	4606      	mov	r6, r0
 800b698:	460f      	mov	r7, r1
 800b69a:	4598      	cmp	r8, r3
 800b69c:	d810      	bhi.n	800b6c0 <__kernel_cos+0xf8>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	4650      	mov	r0, sl
 800b6a4:	4659      	mov	r1, fp
 800b6a6:	f7f4 fdd3 	bl	8000250 <__aeabi_dsub>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	2000      	movs	r0, #0
 800b6b0:	4925      	ldr	r1, [pc, #148]	@ (800b748 <__kernel_cos+0x180>)
 800b6b2:	f7f4 fdcd 	bl	8000250 <__aeabi_dsub>
 800b6b6:	ec41 0b10 	vmov	d0, r0, r1
 800b6ba:	b003      	add	sp, #12
 800b6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6c0:	4b22      	ldr	r3, [pc, #136]	@ (800b74c <__kernel_cos+0x184>)
 800b6c2:	2400      	movs	r4, #0
 800b6c4:	2000      	movs	r0, #0
 800b6c6:	4920      	ldr	r1, [pc, #128]	@ (800b748 <__kernel_cos+0x180>)
 800b6c8:	4598      	cmp	r8, r3
 800b6ca:	4622      	mov	r2, r4
 800b6cc:	bf94      	ite	ls
 800b6ce:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800b6d2:	4d1f      	ldrhi	r5, [pc, #124]	@ (800b750 <__kernel_cos+0x188>)
 800b6d4:	462b      	mov	r3, r5
 800b6d6:	f7f4 fdbb 	bl	8000250 <__aeabi_dsub>
 800b6da:	4622      	mov	r2, r4
 800b6dc:	4680      	mov	r8, r0
 800b6de:	4689      	mov	r9, r1
 800b6e0:	462b      	mov	r3, r5
 800b6e2:	4650      	mov	r0, sl
 800b6e4:	4659      	mov	r1, fp
 800b6e6:	f7f4 fdb3 	bl	8000250 <__aeabi_dsub>
 800b6ea:	4632      	mov	r2, r6
 800b6ec:	463b      	mov	r3, r7
 800b6ee:	f7f4 fdaf 	bl	8000250 <__aeabi_dsub>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	4640      	mov	r0, r8
 800b6f8:	4649      	mov	r1, r9
 800b6fa:	e7da      	b.n	800b6b2 <__kernel_cos+0xea>
 800b6fc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800b738 <__kernel_cos+0x170>
 800b700:	e7db      	b.n	800b6ba <__kernel_cos+0xf2>
 800b702:	bf00      	nop
 800b704:	f3af 8000 	nop.w
 800b708:	be8838d4 	.word	0xbe8838d4
 800b70c:	bda8fae9 	.word	0xbda8fae9
 800b710:	bdb4b1c4 	.word	0xbdb4b1c4
 800b714:	3e21ee9e 	.word	0x3e21ee9e
 800b718:	809c52ad 	.word	0x809c52ad
 800b71c:	3e927e4f 	.word	0x3e927e4f
 800b720:	19cb1590 	.word	0x19cb1590
 800b724:	3efa01a0 	.word	0x3efa01a0
 800b728:	16c15177 	.word	0x16c15177
 800b72c:	3f56c16c 	.word	0x3f56c16c
 800b730:	5555554c 	.word	0x5555554c
 800b734:	3fa55555 	.word	0x3fa55555
 800b738:	00000000 	.word	0x00000000
 800b73c:	3ff00000 	.word	0x3ff00000
 800b740:	3fe00000 	.word	0x3fe00000
 800b744:	3fd33332 	.word	0x3fd33332
 800b748:	3ff00000 	.word	0x3ff00000
 800b74c:	3fe90000 	.word	0x3fe90000
 800b750:	3fd20000 	.word	0x3fd20000
 800b754:	00000000 	.word	0x00000000

0800b758 <__kernel_sin>:
 800b758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75c:	ec55 4b10 	vmov	r4, r5, d0
 800b760:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b764:	b085      	sub	sp, #20
 800b766:	4680      	mov	r8, r0
 800b768:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800b76c:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b770:	d205      	bcs.n	800b77e <__kernel_sin+0x26>
 800b772:	4620      	mov	r0, r4
 800b774:	4629      	mov	r1, r5
 800b776:	f7f5 f9d3 	bl	8000b20 <__aeabi_d2iz>
 800b77a:	2800      	cmp	r0, #0
 800b77c:	d052      	beq.n	800b824 <__kernel_sin+0xcc>
 800b77e:	4622      	mov	r2, r4
 800b780:	462b      	mov	r3, r5
 800b782:	4620      	mov	r0, r4
 800b784:	4629      	mov	r1, r5
 800b786:	f7f4 ff1b 	bl	80005c0 <__aeabi_dmul>
 800b78a:	4682      	mov	sl, r0
 800b78c:	468b      	mov	fp, r1
 800b78e:	4602      	mov	r2, r0
 800b790:	460b      	mov	r3, r1
 800b792:	4620      	mov	r0, r4
 800b794:	4629      	mov	r1, r5
 800b796:	f7f4 ff13 	bl	80005c0 <__aeabi_dmul>
 800b79a:	a342      	add	r3, pc, #264	@ (adr r3, 800b8a4 <__kernel_sin+0x14c>)
 800b79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a0:	e9cd 0100 	strd	r0, r1, [sp]
 800b7a4:	4650      	mov	r0, sl
 800b7a6:	4659      	mov	r1, fp
 800b7a8:	f7f4 ff0a 	bl	80005c0 <__aeabi_dmul>
 800b7ac:	a33f      	add	r3, pc, #252	@ (adr r3, 800b8ac <__kernel_sin+0x154>)
 800b7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b2:	f7f4 fd4d 	bl	8000250 <__aeabi_dsub>
 800b7b6:	4652      	mov	r2, sl
 800b7b8:	465b      	mov	r3, fp
 800b7ba:	f7f4 ff01 	bl	80005c0 <__aeabi_dmul>
 800b7be:	a33d      	add	r3, pc, #244	@ (adr r3, 800b8b4 <__kernel_sin+0x15c>)
 800b7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c4:	f7f4 fd46 	bl	8000254 <__adddf3>
 800b7c8:	4652      	mov	r2, sl
 800b7ca:	465b      	mov	r3, fp
 800b7cc:	f7f4 fef8 	bl	80005c0 <__aeabi_dmul>
 800b7d0:	a33a      	add	r3, pc, #232	@ (adr r3, 800b8bc <__kernel_sin+0x164>)
 800b7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d6:	f7f4 fd3b 	bl	8000250 <__aeabi_dsub>
 800b7da:	4652      	mov	r2, sl
 800b7dc:	465b      	mov	r3, fp
 800b7de:	f7f4 feef 	bl	80005c0 <__aeabi_dmul>
 800b7e2:	a338      	add	r3, pc, #224	@ (adr r3, 800b8c4 <__kernel_sin+0x16c>)
 800b7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e8:	f7f4 fd34 	bl	8000254 <__adddf3>
 800b7ec:	4606      	mov	r6, r0
 800b7ee:	460f      	mov	r7, r1
 800b7f0:	f1b8 0f00 	cmp.w	r8, #0
 800b7f4:	d11b      	bne.n	800b82e <__kernel_sin+0xd6>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	4650      	mov	r0, sl
 800b7fc:	4659      	mov	r1, fp
 800b7fe:	f7f4 fedf 	bl	80005c0 <__aeabi_dmul>
 800b802:	a325      	add	r3, pc, #148	@ (adr r3, 800b898 <__kernel_sin+0x140>)
 800b804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b808:	f7f4 fd22 	bl	8000250 <__aeabi_dsub>
 800b80c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b810:	f7f4 fed6 	bl	80005c0 <__aeabi_dmul>
 800b814:	4602      	mov	r2, r0
 800b816:	460b      	mov	r3, r1
 800b818:	4620      	mov	r0, r4
 800b81a:	4629      	mov	r1, r5
 800b81c:	f7f4 fd1a 	bl	8000254 <__adddf3>
 800b820:	4604      	mov	r4, r0
 800b822:	460d      	mov	r5, r1
 800b824:	ec45 4b10 	vmov	d0, r4, r5
 800b828:	b005      	add	sp, #20
 800b82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b82e:	2200      	movs	r2, #0
 800b830:	4b1b      	ldr	r3, [pc, #108]	@ (800b8a0 <__kernel_sin+0x148>)
 800b832:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b836:	f7f4 fec3 	bl	80005c0 <__aeabi_dmul>
 800b83a:	4680      	mov	r8, r0
 800b83c:	4689      	mov	r9, r1
 800b83e:	4632      	mov	r2, r6
 800b840:	463b      	mov	r3, r7
 800b842:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b846:	f7f4 febb 	bl	80005c0 <__aeabi_dmul>
 800b84a:	4602      	mov	r2, r0
 800b84c:	460b      	mov	r3, r1
 800b84e:	4640      	mov	r0, r8
 800b850:	4649      	mov	r1, r9
 800b852:	f7f4 fcfd 	bl	8000250 <__aeabi_dsub>
 800b856:	4652      	mov	r2, sl
 800b858:	465b      	mov	r3, fp
 800b85a:	f7f4 feb1 	bl	80005c0 <__aeabi_dmul>
 800b85e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b862:	f7f4 fcf5 	bl	8000250 <__aeabi_dsub>
 800b866:	4606      	mov	r6, r0
 800b868:	460f      	mov	r7, r1
 800b86a:	a30b      	add	r3, pc, #44	@ (adr r3, 800b898 <__kernel_sin+0x140>)
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b874:	f7f4 fea4 	bl	80005c0 <__aeabi_dmul>
 800b878:	4602      	mov	r2, r0
 800b87a:	460b      	mov	r3, r1
 800b87c:	4630      	mov	r0, r6
 800b87e:	4639      	mov	r1, r7
 800b880:	f7f4 fce8 	bl	8000254 <__adddf3>
 800b884:	4602      	mov	r2, r0
 800b886:	460b      	mov	r3, r1
 800b888:	4620      	mov	r0, r4
 800b88a:	4629      	mov	r1, r5
 800b88c:	f7f4 fce0 	bl	8000250 <__aeabi_dsub>
 800b890:	e7c6      	b.n	800b820 <__kernel_sin+0xc8>
 800b892:	bf00      	nop
 800b894:	f3af 8000 	nop.w
 800b898:	55555549 	.word	0x55555549
 800b89c:	3fc55555 	.word	0x3fc55555
 800b8a0:	3fe00000 	.word	0x3fe00000
 800b8a4:	5acfd57c 	.word	0x5acfd57c
 800b8a8:	3de5d93a 	.word	0x3de5d93a
 800b8ac:	8a2b9ceb 	.word	0x8a2b9ceb
 800b8b0:	3e5ae5e6 	.word	0x3e5ae5e6
 800b8b4:	57b1fe7d 	.word	0x57b1fe7d
 800b8b8:	3ec71de3 	.word	0x3ec71de3
 800b8bc:	19c161d5 	.word	0x19c161d5
 800b8c0:	3f2a01a0 	.word	0x3f2a01a0
 800b8c4:	1110f8a6 	.word	0x1110f8a6
 800b8c8:	3f811111 	.word	0x3f811111
 800b8cc:	00000000 	.word	0x00000000

0800b8d0 <__ieee754_asin>:
 800b8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d4:	ec55 4b10 	vmov	r4, r5, d0
 800b8d8:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800b8dc:	4bc6      	ldr	r3, [pc, #792]	@ (800bbf8 <__ieee754_asin+0x328>)
 800b8de:	b087      	sub	sp, #28
 800b8e0:	429e      	cmp	r6, r3
 800b8e2:	9501      	str	r5, [sp, #4]
 800b8e4:	d92d      	bls.n	800b942 <__ieee754_asin+0x72>
 800b8e6:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800b8ea:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800b8ee:	4326      	orrs	r6, r4
 800b8f0:	d116      	bne.n	800b920 <__ieee754_asin+0x50>
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	4629      	mov	r1, r5
 800b8f6:	a3a6      	add	r3, pc, #664	@ (adr r3, 800bb90 <__ieee754_asin+0x2c0>)
 800b8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fc:	f7f4 fe60 	bl	80005c0 <__aeabi_dmul>
 800b900:	4606      	mov	r6, r0
 800b902:	460f      	mov	r7, r1
 800b904:	4620      	mov	r0, r4
 800b906:	4629      	mov	r1, r5
 800b908:	a3a3      	add	r3, pc, #652	@ (adr r3, 800bb98 <__ieee754_asin+0x2c8>)
 800b90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90e:	f7f4 fe57 	bl	80005c0 <__aeabi_dmul>
 800b912:	4602      	mov	r2, r0
 800b914:	460b      	mov	r3, r1
 800b916:	4630      	mov	r0, r6
 800b918:	4639      	mov	r1, r7
 800b91a:	f7f4 fc9b 	bl	8000254 <__adddf3>
 800b91e:	e009      	b.n	800b934 <__ieee754_asin+0x64>
 800b920:	4622      	mov	r2, r4
 800b922:	462b      	mov	r3, r5
 800b924:	4620      	mov	r0, r4
 800b926:	4629      	mov	r1, r5
 800b928:	f7f4 fc92 	bl	8000250 <__aeabi_dsub>
 800b92c:	4602      	mov	r2, r0
 800b92e:	460b      	mov	r3, r1
 800b930:	f7f4 ff70 	bl	8000814 <__aeabi_ddiv>
 800b934:	4604      	mov	r4, r0
 800b936:	460d      	mov	r5, r1
 800b938:	ec45 4b10 	vmov	d0, r4, r5
 800b93c:	b007      	add	sp, #28
 800b93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b942:	4bae      	ldr	r3, [pc, #696]	@ (800bbfc <__ieee754_asin+0x32c>)
 800b944:	429e      	cmp	r6, r3
 800b946:	d810      	bhi.n	800b96a <__ieee754_asin+0x9a>
 800b948:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800b94c:	f080 80ac 	bcs.w	800baa8 <__ieee754_asin+0x1d8>
 800b950:	4620      	mov	r0, r4
 800b952:	4629      	mov	r1, r5
 800b954:	a392      	add	r3, pc, #584	@ (adr r3, 800bba0 <__ieee754_asin+0x2d0>)
 800b956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95a:	f7f4 fc7b 	bl	8000254 <__adddf3>
 800b95e:	2200      	movs	r2, #0
 800b960:	4ba7      	ldr	r3, [pc, #668]	@ (800bc00 <__ieee754_asin+0x330>)
 800b962:	f7f5 f8bd 	bl	8000ae0 <__aeabi_dcmpgt>
 800b966:	2800      	cmp	r0, #0
 800b968:	d1e6      	bne.n	800b938 <__ieee754_asin+0x68>
 800b96a:	ec45 4b10 	vmov	d0, r4, r5
 800b96e:	f7ff fd6b 	bl	800b448 <fabs>
 800b972:	2000      	movs	r0, #0
 800b974:	49a2      	ldr	r1, [pc, #648]	@ (800bc00 <__ieee754_asin+0x330>)
 800b976:	ec53 2b10 	vmov	r2, r3, d0
 800b97a:	f7f4 fc69 	bl	8000250 <__aeabi_dsub>
 800b97e:	2200      	movs	r2, #0
 800b980:	4ba0      	ldr	r3, [pc, #640]	@ (800bc04 <__ieee754_asin+0x334>)
 800b982:	f7f4 fe1d 	bl	80005c0 <__aeabi_dmul>
 800b986:	4604      	mov	r4, r0
 800b988:	460d      	mov	r5, r1
 800b98a:	a387      	add	r3, pc, #540	@ (adr r3, 800bba8 <__ieee754_asin+0x2d8>)
 800b98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b990:	f7f4 fe16 	bl	80005c0 <__aeabi_dmul>
 800b994:	a386      	add	r3, pc, #536	@ (adr r3, 800bbb0 <__ieee754_asin+0x2e0>)
 800b996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99a:	f7f4 fc5b 	bl	8000254 <__adddf3>
 800b99e:	4622      	mov	r2, r4
 800b9a0:	462b      	mov	r3, r5
 800b9a2:	f7f4 fe0d 	bl	80005c0 <__aeabi_dmul>
 800b9a6:	a384      	add	r3, pc, #528	@ (adr r3, 800bbb8 <__ieee754_asin+0x2e8>)
 800b9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ac:	f7f4 fc50 	bl	8000250 <__aeabi_dsub>
 800b9b0:	4622      	mov	r2, r4
 800b9b2:	462b      	mov	r3, r5
 800b9b4:	f7f4 fe04 	bl	80005c0 <__aeabi_dmul>
 800b9b8:	a381      	add	r3, pc, #516	@ (adr r3, 800bbc0 <__ieee754_asin+0x2f0>)
 800b9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9be:	f7f4 fc49 	bl	8000254 <__adddf3>
 800b9c2:	4622      	mov	r2, r4
 800b9c4:	462b      	mov	r3, r5
 800b9c6:	f7f4 fdfb 	bl	80005c0 <__aeabi_dmul>
 800b9ca:	a37f      	add	r3, pc, #508	@ (adr r3, 800bbc8 <__ieee754_asin+0x2f8>)
 800b9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d0:	f7f4 fc3e 	bl	8000250 <__aeabi_dsub>
 800b9d4:	4622      	mov	r2, r4
 800b9d6:	462b      	mov	r3, r5
 800b9d8:	f7f4 fdf2 	bl	80005c0 <__aeabi_dmul>
 800b9dc:	a37c      	add	r3, pc, #496	@ (adr r3, 800bbd0 <__ieee754_asin+0x300>)
 800b9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e2:	f7f4 fc37 	bl	8000254 <__adddf3>
 800b9e6:	4622      	mov	r2, r4
 800b9e8:	462b      	mov	r3, r5
 800b9ea:	f7f4 fde9 	bl	80005c0 <__aeabi_dmul>
 800b9ee:	a37a      	add	r3, pc, #488	@ (adr r3, 800bbd8 <__ieee754_asin+0x308>)
 800b9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	4629      	mov	r1, r5
 800b9fc:	f7f4 fde0 	bl	80005c0 <__aeabi_dmul>
 800ba00:	a377      	add	r3, pc, #476	@ (adr r3, 800bbe0 <__ieee754_asin+0x310>)
 800ba02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba06:	f7f4 fc23 	bl	8000250 <__aeabi_dsub>
 800ba0a:	4622      	mov	r2, r4
 800ba0c:	462b      	mov	r3, r5
 800ba0e:	f7f4 fdd7 	bl	80005c0 <__aeabi_dmul>
 800ba12:	a375      	add	r3, pc, #468	@ (adr r3, 800bbe8 <__ieee754_asin+0x318>)
 800ba14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba18:	f7f4 fc1c 	bl	8000254 <__adddf3>
 800ba1c:	4622      	mov	r2, r4
 800ba1e:	462b      	mov	r3, r5
 800ba20:	f7f4 fdce 	bl	80005c0 <__aeabi_dmul>
 800ba24:	a372      	add	r3, pc, #456	@ (adr r3, 800bbf0 <__ieee754_asin+0x320>)
 800ba26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2a:	f7f4 fc11 	bl	8000250 <__aeabi_dsub>
 800ba2e:	4622      	mov	r2, r4
 800ba30:	462b      	mov	r3, r5
 800ba32:	f7f4 fdc5 	bl	80005c0 <__aeabi_dmul>
 800ba36:	4b72      	ldr	r3, [pc, #456]	@ (800bc00 <__ieee754_asin+0x330>)
 800ba38:	2200      	movs	r2, #0
 800ba3a:	f7f4 fc0b 	bl	8000254 <__adddf3>
 800ba3e:	ec45 4b10 	vmov	d0, r4, r5
 800ba42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba46:	f001 fdf7 	bl	800d638 <__ieee754_sqrt>
 800ba4a:	4b6f      	ldr	r3, [pc, #444]	@ (800bc08 <__ieee754_asin+0x338>)
 800ba4c:	429e      	cmp	r6, r3
 800ba4e:	ec5b ab10 	vmov	sl, fp, d0
 800ba52:	f240 80db 	bls.w	800bc0c <__ieee754_asin+0x33c>
 800ba56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba5e:	f7f4 fed9 	bl	8000814 <__aeabi_ddiv>
 800ba62:	4652      	mov	r2, sl
 800ba64:	465b      	mov	r3, fp
 800ba66:	f7f4 fdab 	bl	80005c0 <__aeabi_dmul>
 800ba6a:	4652      	mov	r2, sl
 800ba6c:	465b      	mov	r3, fp
 800ba6e:	f7f4 fbf1 	bl	8000254 <__adddf3>
 800ba72:	4602      	mov	r2, r0
 800ba74:	460b      	mov	r3, r1
 800ba76:	f7f4 fbed 	bl	8000254 <__adddf3>
 800ba7a:	a347      	add	r3, pc, #284	@ (adr r3, 800bb98 <__ieee754_asin+0x2c8>)
 800ba7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba80:	f7f4 fbe6 	bl	8000250 <__aeabi_dsub>
 800ba84:	4602      	mov	r2, r0
 800ba86:	460b      	mov	r3, r1
 800ba88:	a141      	add	r1, pc, #260	@ (adr r1, 800bb90 <__ieee754_asin+0x2c0>)
 800ba8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba8e:	f7f4 fbdf 	bl	8000250 <__aeabi_dsub>
 800ba92:	9b01      	ldr	r3, [sp, #4]
 800ba94:	4604      	mov	r4, r0
 800ba96:	460d      	mov	r5, r1
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	bfdf      	itttt	le
 800ba9c:	4602      	movle	r2, r0
 800ba9e:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800baa2:	4614      	movle	r4, r2
 800baa4:	461d      	movle	r5, r3
 800baa6:	e747      	b.n	800b938 <__ieee754_asin+0x68>
 800baa8:	4622      	mov	r2, r4
 800baaa:	462b      	mov	r3, r5
 800baac:	4620      	mov	r0, r4
 800baae:	4629      	mov	r1, r5
 800bab0:	f7f4 fd86 	bl	80005c0 <__aeabi_dmul>
 800bab4:	4606      	mov	r6, r0
 800bab6:	460f      	mov	r7, r1
 800bab8:	a33b      	add	r3, pc, #236	@ (adr r3, 800bba8 <__ieee754_asin+0x2d8>)
 800baba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babe:	f7f4 fd7f 	bl	80005c0 <__aeabi_dmul>
 800bac2:	a33b      	add	r3, pc, #236	@ (adr r3, 800bbb0 <__ieee754_asin+0x2e0>)
 800bac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac8:	f7f4 fbc4 	bl	8000254 <__adddf3>
 800bacc:	4632      	mov	r2, r6
 800bace:	463b      	mov	r3, r7
 800bad0:	f7f4 fd76 	bl	80005c0 <__aeabi_dmul>
 800bad4:	a338      	add	r3, pc, #224	@ (adr r3, 800bbb8 <__ieee754_asin+0x2e8>)
 800bad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bada:	f7f4 fbb9 	bl	8000250 <__aeabi_dsub>
 800bade:	4632      	mov	r2, r6
 800bae0:	463b      	mov	r3, r7
 800bae2:	f7f4 fd6d 	bl	80005c0 <__aeabi_dmul>
 800bae6:	a336      	add	r3, pc, #216	@ (adr r3, 800bbc0 <__ieee754_asin+0x2f0>)
 800bae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baec:	f7f4 fbb2 	bl	8000254 <__adddf3>
 800baf0:	4632      	mov	r2, r6
 800baf2:	463b      	mov	r3, r7
 800baf4:	f7f4 fd64 	bl	80005c0 <__aeabi_dmul>
 800baf8:	a333      	add	r3, pc, #204	@ (adr r3, 800bbc8 <__ieee754_asin+0x2f8>)
 800bafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafe:	f7f4 fba7 	bl	8000250 <__aeabi_dsub>
 800bb02:	4632      	mov	r2, r6
 800bb04:	463b      	mov	r3, r7
 800bb06:	f7f4 fd5b 	bl	80005c0 <__aeabi_dmul>
 800bb0a:	a331      	add	r3, pc, #196	@ (adr r3, 800bbd0 <__ieee754_asin+0x300>)
 800bb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb10:	f7f4 fba0 	bl	8000254 <__adddf3>
 800bb14:	4632      	mov	r2, r6
 800bb16:	463b      	mov	r3, r7
 800bb18:	f7f4 fd52 	bl	80005c0 <__aeabi_dmul>
 800bb1c:	4680      	mov	r8, r0
 800bb1e:	4689      	mov	r9, r1
 800bb20:	4630      	mov	r0, r6
 800bb22:	4639      	mov	r1, r7
 800bb24:	a32c      	add	r3, pc, #176	@ (adr r3, 800bbd8 <__ieee754_asin+0x308>)
 800bb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2a:	f7f4 fd49 	bl	80005c0 <__aeabi_dmul>
 800bb2e:	a32c      	add	r3, pc, #176	@ (adr r3, 800bbe0 <__ieee754_asin+0x310>)
 800bb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb34:	f7f4 fb8c 	bl	8000250 <__aeabi_dsub>
 800bb38:	4632      	mov	r2, r6
 800bb3a:	463b      	mov	r3, r7
 800bb3c:	f7f4 fd40 	bl	80005c0 <__aeabi_dmul>
 800bb40:	a329      	add	r3, pc, #164	@ (adr r3, 800bbe8 <__ieee754_asin+0x318>)
 800bb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb46:	f7f4 fb85 	bl	8000254 <__adddf3>
 800bb4a:	4632      	mov	r2, r6
 800bb4c:	463b      	mov	r3, r7
 800bb4e:	f7f4 fd37 	bl	80005c0 <__aeabi_dmul>
 800bb52:	a327      	add	r3, pc, #156	@ (adr r3, 800bbf0 <__ieee754_asin+0x320>)
 800bb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb58:	f7f4 fb7a 	bl	8000250 <__aeabi_dsub>
 800bb5c:	4632      	mov	r2, r6
 800bb5e:	463b      	mov	r3, r7
 800bb60:	f7f4 fd2e 	bl	80005c0 <__aeabi_dmul>
 800bb64:	2200      	movs	r2, #0
 800bb66:	4b26      	ldr	r3, [pc, #152]	@ (800bc00 <__ieee754_asin+0x330>)
 800bb68:	f7f4 fb74 	bl	8000254 <__adddf3>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	460b      	mov	r3, r1
 800bb70:	4640      	mov	r0, r8
 800bb72:	4649      	mov	r1, r9
 800bb74:	f7f4 fe4e 	bl	8000814 <__aeabi_ddiv>
 800bb78:	4622      	mov	r2, r4
 800bb7a:	462b      	mov	r3, r5
 800bb7c:	f7f4 fd20 	bl	80005c0 <__aeabi_dmul>
 800bb80:	4602      	mov	r2, r0
 800bb82:	460b      	mov	r3, r1
 800bb84:	4620      	mov	r0, r4
 800bb86:	4629      	mov	r1, r5
 800bb88:	e6c7      	b.n	800b91a <__ieee754_asin+0x4a>
 800bb8a:	bf00      	nop
 800bb8c:	f3af 8000 	nop.w
 800bb90:	54442d18 	.word	0x54442d18
 800bb94:	3ff921fb 	.word	0x3ff921fb
 800bb98:	33145c07 	.word	0x33145c07
 800bb9c:	3c91a626 	.word	0x3c91a626
 800bba0:	8800759c 	.word	0x8800759c
 800bba4:	7e37e43c 	.word	0x7e37e43c
 800bba8:	0dfdf709 	.word	0x0dfdf709
 800bbac:	3f023de1 	.word	0x3f023de1
 800bbb0:	7501b288 	.word	0x7501b288
 800bbb4:	3f49efe0 	.word	0x3f49efe0
 800bbb8:	b5688f3b 	.word	0xb5688f3b
 800bbbc:	3fa48228 	.word	0x3fa48228
 800bbc0:	0e884455 	.word	0x0e884455
 800bbc4:	3fc9c155 	.word	0x3fc9c155
 800bbc8:	03eb6f7d 	.word	0x03eb6f7d
 800bbcc:	3fd4d612 	.word	0x3fd4d612
 800bbd0:	55555555 	.word	0x55555555
 800bbd4:	3fc55555 	.word	0x3fc55555
 800bbd8:	b12e9282 	.word	0xb12e9282
 800bbdc:	3fb3b8c5 	.word	0x3fb3b8c5
 800bbe0:	1b8d0159 	.word	0x1b8d0159
 800bbe4:	3fe6066c 	.word	0x3fe6066c
 800bbe8:	9c598ac8 	.word	0x9c598ac8
 800bbec:	40002ae5 	.word	0x40002ae5
 800bbf0:	1c8a2d4b 	.word	0x1c8a2d4b
 800bbf4:	40033a27 	.word	0x40033a27
 800bbf8:	3fefffff 	.word	0x3fefffff
 800bbfc:	3fdfffff 	.word	0x3fdfffff
 800bc00:	3ff00000 	.word	0x3ff00000
 800bc04:	3fe00000 	.word	0x3fe00000
 800bc08:	3fef3332 	.word	0x3fef3332
 800bc0c:	4652      	mov	r2, sl
 800bc0e:	465b      	mov	r3, fp
 800bc10:	4650      	mov	r0, sl
 800bc12:	4659      	mov	r1, fp
 800bc14:	f7f4 fb1e 	bl	8000254 <__adddf3>
 800bc18:	4606      	mov	r6, r0
 800bc1a:	460f      	mov	r7, r1
 800bc1c:	f04f 0800 	mov.w	r8, #0
 800bc20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc28:	f7f4 fdf4 	bl	8000814 <__aeabi_ddiv>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	460b      	mov	r3, r1
 800bc30:	4630      	mov	r0, r6
 800bc32:	4639      	mov	r1, r7
 800bc34:	f7f4 fcc4 	bl	80005c0 <__aeabi_dmul>
 800bc38:	4642      	mov	r2, r8
 800bc3a:	4606      	mov	r6, r0
 800bc3c:	460f      	mov	r7, r1
 800bc3e:	465b      	mov	r3, fp
 800bc40:	4640      	mov	r0, r8
 800bc42:	4659      	mov	r1, fp
 800bc44:	f7f4 fcbc 	bl	80005c0 <__aeabi_dmul>
 800bc48:	4602      	mov	r2, r0
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	4629      	mov	r1, r5
 800bc50:	f7f4 fafe 	bl	8000250 <__aeabi_dsub>
 800bc54:	4604      	mov	r4, r0
 800bc56:	460d      	mov	r5, r1
 800bc58:	4642      	mov	r2, r8
 800bc5a:	465b      	mov	r3, fp
 800bc5c:	4650      	mov	r0, sl
 800bc5e:	4659      	mov	r1, fp
 800bc60:	f7f4 faf8 	bl	8000254 <__adddf3>
 800bc64:	4602      	mov	r2, r0
 800bc66:	460b      	mov	r3, r1
 800bc68:	4620      	mov	r0, r4
 800bc6a:	4629      	mov	r1, r5
 800bc6c:	f7f4 fdd2 	bl	8000814 <__aeabi_ddiv>
 800bc70:	4602      	mov	r2, r0
 800bc72:	460b      	mov	r3, r1
 800bc74:	f7f4 faee 	bl	8000254 <__adddf3>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	a112      	add	r1, pc, #72	@ (adr r1, 800bcc8 <__ieee754_asin+0x3f8>)
 800bc7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc82:	f7f4 fae5 	bl	8000250 <__aeabi_dsub>
 800bc86:	4602      	mov	r2, r0
 800bc88:	460b      	mov	r3, r1
 800bc8a:	4630      	mov	r0, r6
 800bc8c:	4639      	mov	r1, r7
 800bc8e:	f7f4 fadf 	bl	8000250 <__aeabi_dsub>
 800bc92:	4642      	mov	r2, r8
 800bc94:	4604      	mov	r4, r0
 800bc96:	460d      	mov	r5, r1
 800bc98:	465b      	mov	r3, fp
 800bc9a:	4640      	mov	r0, r8
 800bc9c:	4659      	mov	r1, fp
 800bc9e:	f7f4 fad9 	bl	8000254 <__adddf3>
 800bca2:	4602      	mov	r2, r0
 800bca4:	460b      	mov	r3, r1
 800bca6:	a10a      	add	r1, pc, #40	@ (adr r1, 800bcd0 <__ieee754_asin+0x400>)
 800bca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcac:	f7f4 fad0 	bl	8000250 <__aeabi_dsub>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	4629      	mov	r1, r5
 800bcb8:	f7f4 faca 	bl	8000250 <__aeabi_dsub>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	a103      	add	r1, pc, #12	@ (adr r1, 800bcd0 <__ieee754_asin+0x400>)
 800bcc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcc6:	e6e2      	b.n	800ba8e <__ieee754_asin+0x1be>
 800bcc8:	33145c07 	.word	0x33145c07
 800bccc:	3c91a626 	.word	0x3c91a626
 800bcd0:	54442d18 	.word	0x54442d18
 800bcd4:	3fe921fb 	.word	0x3fe921fb

0800bcd8 <__ieee754_atan2>:
 800bcd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcdc:	ec57 6b11 	vmov	r6, r7, d1
 800bce0:	4273      	negs	r3, r6
 800bce2:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800bce6:	f8df 8178 	ldr.w	r8, [pc, #376]	@ 800be60 <__ieee754_atan2+0x188>
 800bcea:	4635      	mov	r5, r6
 800bcec:	4333      	orrs	r3, r6
 800bcee:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bcf2:	4543      	cmp	r3, r8
 800bcf4:	ec51 0b10 	vmov	r0, r1, d0
 800bcf8:	d809      	bhi.n	800bd0e <__ieee754_atan2+0x36>
 800bcfa:	4244      	negs	r4, r0
 800bcfc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bd00:	468e      	mov	lr, r1
 800bd02:	4681      	mov	r9, r0
 800bd04:	4304      	orrs	r4, r0
 800bd06:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800bd0a:	4544      	cmp	r4, r8
 800bd0c:	d907      	bls.n	800bd1e <__ieee754_atan2+0x46>
 800bd0e:	4632      	mov	r2, r6
 800bd10:	463b      	mov	r3, r7
 800bd12:	f7f4 fa9f 	bl	8000254 <__adddf3>
 800bd16:	ec41 0b10 	vmov	d0, r0, r1
 800bd1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd1e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800bd22:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800bd26:	4334      	orrs	r4, r6
 800bd28:	d103      	bne.n	800bd32 <__ieee754_atan2+0x5a>
 800bd2a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd2e:	f000 bfd7 	b.w	800cce0 <atan>
 800bd32:	17bc      	asrs	r4, r7, #30
 800bd34:	ea53 0909 	orrs.w	r9, r3, r9
 800bd38:	f004 0402 	and.w	r4, r4, #2
 800bd3c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800bd40:	d107      	bne.n	800bd52 <__ieee754_atan2+0x7a>
 800bd42:	2c02      	cmp	r4, #2
 800bd44:	d05f      	beq.n	800be06 <__ieee754_atan2+0x12e>
 800bd46:	2c03      	cmp	r4, #3
 800bd48:	d1e5      	bne.n	800bd16 <__ieee754_atan2+0x3e>
 800bd4a:	a141      	add	r1, pc, #260	@ (adr r1, 800be50 <__ieee754_atan2+0x178>)
 800bd4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd50:	e7e1      	b.n	800bd16 <__ieee754_atan2+0x3e>
 800bd52:	4315      	orrs	r5, r2
 800bd54:	d106      	bne.n	800bd64 <__ieee754_atan2+0x8c>
 800bd56:	f1be 0f00 	cmp.w	lr, #0
 800bd5a:	da5f      	bge.n	800be1c <__ieee754_atan2+0x144>
 800bd5c:	a13e      	add	r1, pc, #248	@ (adr r1, 800be58 <__ieee754_atan2+0x180>)
 800bd5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd62:	e7d8      	b.n	800bd16 <__ieee754_atan2+0x3e>
 800bd64:	4542      	cmp	r2, r8
 800bd66:	d10f      	bne.n	800bd88 <__ieee754_atan2+0xb0>
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	f104 34ff 	add.w	r4, r4, #4294967295
 800bd6e:	d107      	bne.n	800bd80 <__ieee754_atan2+0xa8>
 800bd70:	2c02      	cmp	r4, #2
 800bd72:	d84c      	bhi.n	800be0e <__ieee754_atan2+0x136>
 800bd74:	4b34      	ldr	r3, [pc, #208]	@ (800be48 <__ieee754_atan2+0x170>)
 800bd76:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd7e:	e7ca      	b.n	800bd16 <__ieee754_atan2+0x3e>
 800bd80:	2c02      	cmp	r4, #2
 800bd82:	d848      	bhi.n	800be16 <__ieee754_atan2+0x13e>
 800bd84:	4b31      	ldr	r3, [pc, #196]	@ (800be4c <__ieee754_atan2+0x174>)
 800bd86:	e7f6      	b.n	800bd76 <__ieee754_atan2+0x9e>
 800bd88:	4543      	cmp	r3, r8
 800bd8a:	d0e4      	beq.n	800bd56 <__ieee754_atan2+0x7e>
 800bd8c:	1a9b      	subs	r3, r3, r2
 800bd8e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800bd92:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bd96:	da1e      	bge.n	800bdd6 <__ieee754_atan2+0xfe>
 800bd98:	2f00      	cmp	r7, #0
 800bd9a:	da01      	bge.n	800bda0 <__ieee754_atan2+0xc8>
 800bd9c:	323c      	adds	r2, #60	@ 0x3c
 800bd9e:	db1e      	blt.n	800bdde <__ieee754_atan2+0x106>
 800bda0:	4632      	mov	r2, r6
 800bda2:	463b      	mov	r3, r7
 800bda4:	f7f4 fd36 	bl	8000814 <__aeabi_ddiv>
 800bda8:	ec41 0b10 	vmov	d0, r0, r1
 800bdac:	f7ff fb4c 	bl	800b448 <fabs>
 800bdb0:	f000 ff96 	bl	800cce0 <atan>
 800bdb4:	ec51 0b10 	vmov	r0, r1, d0
 800bdb8:	2c01      	cmp	r4, #1
 800bdba:	d013      	beq.n	800bde4 <__ieee754_atan2+0x10c>
 800bdbc:	2c02      	cmp	r4, #2
 800bdbe:	d015      	beq.n	800bdec <__ieee754_atan2+0x114>
 800bdc0:	2c00      	cmp	r4, #0
 800bdc2:	d0a8      	beq.n	800bd16 <__ieee754_atan2+0x3e>
 800bdc4:	a318      	add	r3, pc, #96	@ (adr r3, 800be28 <__ieee754_atan2+0x150>)
 800bdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdca:	f7f4 fa41 	bl	8000250 <__aeabi_dsub>
 800bdce:	a318      	add	r3, pc, #96	@ (adr r3, 800be30 <__ieee754_atan2+0x158>)
 800bdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd4:	e014      	b.n	800be00 <__ieee754_atan2+0x128>
 800bdd6:	a118      	add	r1, pc, #96	@ (adr r1, 800be38 <__ieee754_atan2+0x160>)
 800bdd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bddc:	e7ec      	b.n	800bdb8 <__ieee754_atan2+0xe0>
 800bdde:	2000      	movs	r0, #0
 800bde0:	2100      	movs	r1, #0
 800bde2:	e7e9      	b.n	800bdb8 <__ieee754_atan2+0xe0>
 800bde4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bde8:	4619      	mov	r1, r3
 800bdea:	e794      	b.n	800bd16 <__ieee754_atan2+0x3e>
 800bdec:	a30e      	add	r3, pc, #56	@ (adr r3, 800be28 <__ieee754_atan2+0x150>)
 800bdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf2:	f7f4 fa2d 	bl	8000250 <__aeabi_dsub>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	a10d      	add	r1, pc, #52	@ (adr r1, 800be30 <__ieee754_atan2+0x158>)
 800bdfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be00:	f7f4 fa26 	bl	8000250 <__aeabi_dsub>
 800be04:	e787      	b.n	800bd16 <__ieee754_atan2+0x3e>
 800be06:	a10a      	add	r1, pc, #40	@ (adr r1, 800be30 <__ieee754_atan2+0x158>)
 800be08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be0c:	e783      	b.n	800bd16 <__ieee754_atan2+0x3e>
 800be0e:	a10c      	add	r1, pc, #48	@ (adr r1, 800be40 <__ieee754_atan2+0x168>)
 800be10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be14:	e77f      	b.n	800bd16 <__ieee754_atan2+0x3e>
 800be16:	2000      	movs	r0, #0
 800be18:	2100      	movs	r1, #0
 800be1a:	e77c      	b.n	800bd16 <__ieee754_atan2+0x3e>
 800be1c:	a106      	add	r1, pc, #24	@ (adr r1, 800be38 <__ieee754_atan2+0x160>)
 800be1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be22:	e778      	b.n	800bd16 <__ieee754_atan2+0x3e>
 800be24:	f3af 8000 	nop.w
 800be28:	33145c07 	.word	0x33145c07
 800be2c:	3ca1a626 	.word	0x3ca1a626
 800be30:	54442d18 	.word	0x54442d18
 800be34:	400921fb 	.word	0x400921fb
 800be38:	54442d18 	.word	0x54442d18
 800be3c:	3ff921fb 	.word	0x3ff921fb
 800be40:	54442d18 	.word	0x54442d18
 800be44:	3fe921fb 	.word	0x3fe921fb
 800be48:	0800e610 	.word	0x0800e610
 800be4c:	0800e5f8 	.word	0x0800e5f8
 800be50:	54442d18 	.word	0x54442d18
 800be54:	c00921fb 	.word	0xc00921fb
 800be58:	54442d18 	.word	0x54442d18
 800be5c:	bff921fb 	.word	0xbff921fb
 800be60:	7ff00000 	.word	0x7ff00000
 800be64:	00000000 	.word	0x00000000

0800be68 <__ieee754_pow>:
 800be68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be6c:	b091      	sub	sp, #68	@ 0x44
 800be6e:	ed8d 1b00 	vstr	d1, [sp]
 800be72:	e9dd 1900 	ldrd	r1, r9, [sp]
 800be76:	ec57 6b10 	vmov	r6, r7, d0
 800be7a:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800be7e:	ea5a 0001 	orrs.w	r0, sl, r1
 800be82:	d113      	bne.n	800beac <__ieee754_pow+0x44>
 800be84:	19b3      	adds	r3, r6, r6
 800be86:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800be8a:	4152      	adcs	r2, r2
 800be8c:	4298      	cmp	r0, r3
 800be8e:	4b96      	ldr	r3, [pc, #600]	@ (800c0e8 <__ieee754_pow+0x280>)
 800be90:	4193      	sbcs	r3, r2
 800be92:	f080 84e7 	bcs.w	800c864 <__ieee754_pow+0x9fc>
 800be96:	4630      	mov	r0, r6
 800be98:	4639      	mov	r1, r7
 800be9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be9e:	f7f4 f9d9 	bl	8000254 <__adddf3>
 800bea2:	ec41 0b10 	vmov	d0, r0, r1
 800bea6:	b011      	add	sp, #68	@ 0x44
 800bea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beac:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800beb0:	4a8e      	ldr	r2, [pc, #568]	@ (800c0ec <__ieee754_pow+0x284>)
 800beb2:	463d      	mov	r5, r7
 800beb4:	4633      	mov	r3, r6
 800beb6:	4590      	cmp	r8, r2
 800beb8:	d806      	bhi.n	800bec8 <__ieee754_pow+0x60>
 800beba:	d101      	bne.n	800bec0 <__ieee754_pow+0x58>
 800bebc:	2e00      	cmp	r6, #0
 800bebe:	d1ea      	bne.n	800be96 <__ieee754_pow+0x2e>
 800bec0:	4592      	cmp	sl, r2
 800bec2:	d801      	bhi.n	800bec8 <__ieee754_pow+0x60>
 800bec4:	d10e      	bne.n	800bee4 <__ieee754_pow+0x7c>
 800bec6:	b169      	cbz	r1, 800bee4 <__ieee754_pow+0x7c>
 800bec8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800becc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800bed0:	431d      	orrs	r5, r3
 800bed2:	d1e0      	bne.n	800be96 <__ieee754_pow+0x2e>
 800bed4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bed8:	18db      	adds	r3, r3, r3
 800beda:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800bede:	4152      	adcs	r2, r2
 800bee0:	429d      	cmp	r5, r3
 800bee2:	e7d4      	b.n	800be8e <__ieee754_pow+0x26>
 800bee4:	2d00      	cmp	r5, #0
 800bee6:	46c3      	mov	fp, r8
 800bee8:	da3a      	bge.n	800bf60 <__ieee754_pow+0xf8>
 800beea:	4a81      	ldr	r2, [pc, #516]	@ (800c0f0 <__ieee754_pow+0x288>)
 800beec:	4592      	cmp	sl, r2
 800beee:	d84d      	bhi.n	800bf8c <__ieee754_pow+0x124>
 800bef0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800bef4:	4592      	cmp	sl, r2
 800bef6:	f240 84c4 	bls.w	800c882 <__ieee754_pow+0xa1a>
 800befa:	ea4f 522a 	mov.w	r2, sl, asr #20
 800befe:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800bf02:	2a14      	cmp	r2, #20
 800bf04:	dd0f      	ble.n	800bf26 <__ieee754_pow+0xbe>
 800bf06:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800bf0a:	fa21 f402 	lsr.w	r4, r1, r2
 800bf0e:	fa04 f202 	lsl.w	r2, r4, r2
 800bf12:	428a      	cmp	r2, r1
 800bf14:	f040 84b5 	bne.w	800c882 <__ieee754_pow+0xa1a>
 800bf18:	f004 0401 	and.w	r4, r4, #1
 800bf1c:	f1c4 0402 	rsb	r4, r4, #2
 800bf20:	2900      	cmp	r1, #0
 800bf22:	d158      	bne.n	800bfd6 <__ieee754_pow+0x16e>
 800bf24:	e00e      	b.n	800bf44 <__ieee754_pow+0xdc>
 800bf26:	2900      	cmp	r1, #0
 800bf28:	d154      	bne.n	800bfd4 <__ieee754_pow+0x16c>
 800bf2a:	f1c2 0214 	rsb	r2, r2, #20
 800bf2e:	fa4a f402 	asr.w	r4, sl, r2
 800bf32:	fa04 f202 	lsl.w	r2, r4, r2
 800bf36:	4552      	cmp	r2, sl
 800bf38:	f040 84a0 	bne.w	800c87c <__ieee754_pow+0xa14>
 800bf3c:	f004 0401 	and.w	r4, r4, #1
 800bf40:	f1c4 0402 	rsb	r4, r4, #2
 800bf44:	4a6b      	ldr	r2, [pc, #428]	@ (800c0f4 <__ieee754_pow+0x28c>)
 800bf46:	4592      	cmp	sl, r2
 800bf48:	d12e      	bne.n	800bfa8 <__ieee754_pow+0x140>
 800bf4a:	f1b9 0f00 	cmp.w	r9, #0
 800bf4e:	f280 8491 	bge.w	800c874 <__ieee754_pow+0xa0c>
 800bf52:	4632      	mov	r2, r6
 800bf54:	463b      	mov	r3, r7
 800bf56:	2000      	movs	r0, #0
 800bf58:	4966      	ldr	r1, [pc, #408]	@ (800c0f4 <__ieee754_pow+0x28c>)
 800bf5a:	f7f4 fc5b 	bl	8000814 <__aeabi_ddiv>
 800bf5e:	e7a0      	b.n	800bea2 <__ieee754_pow+0x3a>
 800bf60:	2400      	movs	r4, #0
 800bf62:	bbc1      	cbnz	r1, 800bfd6 <__ieee754_pow+0x16e>
 800bf64:	4a61      	ldr	r2, [pc, #388]	@ (800c0ec <__ieee754_pow+0x284>)
 800bf66:	4592      	cmp	sl, r2
 800bf68:	d1ec      	bne.n	800bf44 <__ieee754_pow+0xdc>
 800bf6a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800bf6e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800bf72:	431a      	orrs	r2, r3
 800bf74:	f000 8476 	beq.w	800c864 <__ieee754_pow+0x9fc>
 800bf78:	4b5f      	ldr	r3, [pc, #380]	@ (800c0f8 <__ieee754_pow+0x290>)
 800bf7a:	4598      	cmp	r8, r3
 800bf7c:	d908      	bls.n	800bf90 <__ieee754_pow+0x128>
 800bf7e:	f1b9 0f00 	cmp.w	r9, #0
 800bf82:	f2c0 8473 	blt.w	800c86c <__ieee754_pow+0xa04>
 800bf86:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf8a:	e78a      	b.n	800bea2 <__ieee754_pow+0x3a>
 800bf8c:	2402      	movs	r4, #2
 800bf8e:	e7e8      	b.n	800bf62 <__ieee754_pow+0xfa>
 800bf90:	f1b9 0f00 	cmp.w	r9, #0
 800bf94:	f04f 0000 	mov.w	r0, #0
 800bf98:	f04f 0100 	mov.w	r1, #0
 800bf9c:	da81      	bge.n	800bea2 <__ieee754_pow+0x3a>
 800bf9e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bfa2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bfa6:	e77c      	b.n	800bea2 <__ieee754_pow+0x3a>
 800bfa8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800bfac:	d106      	bne.n	800bfbc <__ieee754_pow+0x154>
 800bfae:	4632      	mov	r2, r6
 800bfb0:	463b      	mov	r3, r7
 800bfb2:	4630      	mov	r0, r6
 800bfb4:	4639      	mov	r1, r7
 800bfb6:	f7f4 fb03 	bl	80005c0 <__aeabi_dmul>
 800bfba:	e772      	b.n	800bea2 <__ieee754_pow+0x3a>
 800bfbc:	4a4f      	ldr	r2, [pc, #316]	@ (800c0fc <__ieee754_pow+0x294>)
 800bfbe:	4591      	cmp	r9, r2
 800bfc0:	d109      	bne.n	800bfd6 <__ieee754_pow+0x16e>
 800bfc2:	2d00      	cmp	r5, #0
 800bfc4:	db07      	blt.n	800bfd6 <__ieee754_pow+0x16e>
 800bfc6:	ec47 6b10 	vmov	d0, r6, r7
 800bfca:	b011      	add	sp, #68	@ 0x44
 800bfcc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd0:	f001 bb32 	b.w	800d638 <__ieee754_sqrt>
 800bfd4:	2400      	movs	r4, #0
 800bfd6:	9302      	str	r3, [sp, #8]
 800bfd8:	ec47 6b10 	vmov	d0, r6, r7
 800bfdc:	f7ff fa34 	bl	800b448 <fabs>
 800bfe0:	9b02      	ldr	r3, [sp, #8]
 800bfe2:	ec51 0b10 	vmov	r0, r1, d0
 800bfe6:	bb53      	cbnz	r3, 800c03e <__ieee754_pow+0x1d6>
 800bfe8:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800bfec:	4b41      	ldr	r3, [pc, #260]	@ (800c0f4 <__ieee754_pow+0x28c>)
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d002      	beq.n	800bff8 <__ieee754_pow+0x190>
 800bff2:	f1b8 0f00 	cmp.w	r8, #0
 800bff6:	d122      	bne.n	800c03e <__ieee754_pow+0x1d6>
 800bff8:	f1b9 0f00 	cmp.w	r9, #0
 800bffc:	da05      	bge.n	800c00a <__ieee754_pow+0x1a2>
 800bffe:	4602      	mov	r2, r0
 800c000:	460b      	mov	r3, r1
 800c002:	2000      	movs	r0, #0
 800c004:	493b      	ldr	r1, [pc, #236]	@ (800c0f4 <__ieee754_pow+0x28c>)
 800c006:	f7f4 fc05 	bl	8000814 <__aeabi_ddiv>
 800c00a:	2d00      	cmp	r5, #0
 800c00c:	f6bf af49 	bge.w	800bea2 <__ieee754_pow+0x3a>
 800c010:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800c014:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800c018:	ea58 0804 	orrs.w	r8, r8, r4
 800c01c:	d108      	bne.n	800c030 <__ieee754_pow+0x1c8>
 800c01e:	4602      	mov	r2, r0
 800c020:	460b      	mov	r3, r1
 800c022:	4610      	mov	r0, r2
 800c024:	4619      	mov	r1, r3
 800c026:	f7f4 f913 	bl	8000250 <__aeabi_dsub>
 800c02a:	4602      	mov	r2, r0
 800c02c:	460b      	mov	r3, r1
 800c02e:	e794      	b.n	800bf5a <__ieee754_pow+0xf2>
 800c030:	2c01      	cmp	r4, #1
 800c032:	f47f af36 	bne.w	800bea2 <__ieee754_pow+0x3a>
 800c036:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c03a:	4619      	mov	r1, r3
 800c03c:	e731      	b.n	800bea2 <__ieee754_pow+0x3a>
 800c03e:	0feb      	lsrs	r3, r5, #31
 800c040:	3b01      	subs	r3, #1
 800c042:	ea53 0204 	orrs.w	r2, r3, r4
 800c046:	d102      	bne.n	800c04e <__ieee754_pow+0x1e6>
 800c048:	4632      	mov	r2, r6
 800c04a:	463b      	mov	r3, r7
 800c04c:	e7e9      	b.n	800c022 <__ieee754_pow+0x1ba>
 800c04e:	3c01      	subs	r4, #1
 800c050:	431c      	orrs	r4, r3
 800c052:	d016      	beq.n	800c082 <__ieee754_pow+0x21a>
 800c054:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800c0d8 <__ieee754_pow+0x270>
 800c058:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800c05c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c060:	f240 810e 	bls.w	800c280 <__ieee754_pow+0x418>
 800c064:	4b26      	ldr	r3, [pc, #152]	@ (800c100 <__ieee754_pow+0x298>)
 800c066:	459a      	cmp	sl, r3
 800c068:	4b23      	ldr	r3, [pc, #140]	@ (800c0f8 <__ieee754_pow+0x290>)
 800c06a:	d916      	bls.n	800c09a <__ieee754_pow+0x232>
 800c06c:	4598      	cmp	r8, r3
 800c06e:	d80b      	bhi.n	800c088 <__ieee754_pow+0x220>
 800c070:	f1b9 0f00 	cmp.w	r9, #0
 800c074:	da0b      	bge.n	800c08e <__ieee754_pow+0x226>
 800c076:	2000      	movs	r0, #0
 800c078:	b011      	add	sp, #68	@ 0x44
 800c07a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c07e:	f001 bad3 	b.w	800d628 <__math_oflow>
 800c082:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 800c0e0 <__ieee754_pow+0x278>
 800c086:	e7e7      	b.n	800c058 <__ieee754_pow+0x1f0>
 800c088:	f1b9 0f00 	cmp.w	r9, #0
 800c08c:	dcf3      	bgt.n	800c076 <__ieee754_pow+0x20e>
 800c08e:	2000      	movs	r0, #0
 800c090:	b011      	add	sp, #68	@ 0x44
 800c092:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c096:	f001 babf 	b.w	800d618 <__math_uflow>
 800c09a:	4598      	cmp	r8, r3
 800c09c:	d20c      	bcs.n	800c0b8 <__ieee754_pow+0x250>
 800c09e:	2200      	movs	r2, #0
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0a6:	f7f4 fcfd 	bl	8000aa4 <__aeabi_dcmplt>
 800c0aa:	3800      	subs	r0, #0
 800c0ac:	bf18      	it	ne
 800c0ae:	2001      	movne	r0, #1
 800c0b0:	f1b9 0f00 	cmp.w	r9, #0
 800c0b4:	daec      	bge.n	800c090 <__ieee754_pow+0x228>
 800c0b6:	e7df      	b.n	800c078 <__ieee754_pow+0x210>
 800c0b8:	4b0e      	ldr	r3, [pc, #56]	@ (800c0f4 <__ieee754_pow+0x28c>)
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	4598      	cmp	r8, r3
 800c0be:	d921      	bls.n	800c104 <__ieee754_pow+0x29c>
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0c6:	f7f4 fced 	bl	8000aa4 <__aeabi_dcmplt>
 800c0ca:	3800      	subs	r0, #0
 800c0cc:	bf18      	it	ne
 800c0ce:	2001      	movne	r0, #1
 800c0d0:	f1b9 0f00 	cmp.w	r9, #0
 800c0d4:	dcd0      	bgt.n	800c078 <__ieee754_pow+0x210>
 800c0d6:	e7db      	b.n	800c090 <__ieee754_pow+0x228>
 800c0d8:	00000000 	.word	0x00000000
 800c0dc:	3ff00000 	.word	0x3ff00000
 800c0e0:	00000000 	.word	0x00000000
 800c0e4:	bff00000 	.word	0xbff00000
 800c0e8:	fff00000 	.word	0xfff00000
 800c0ec:	7ff00000 	.word	0x7ff00000
 800c0f0:	433fffff 	.word	0x433fffff
 800c0f4:	3ff00000 	.word	0x3ff00000
 800c0f8:	3fefffff 	.word	0x3fefffff
 800c0fc:	3fe00000 	.word	0x3fe00000
 800c100:	43f00000 	.word	0x43f00000
 800c104:	4b5a      	ldr	r3, [pc, #360]	@ (800c270 <__ieee754_pow+0x408>)
 800c106:	f7f4 f8a3 	bl	8000250 <__aeabi_dsub>
 800c10a:	4604      	mov	r4, r0
 800c10c:	460d      	mov	r5, r1
 800c10e:	a350      	add	r3, pc, #320	@ (adr r3, 800c250 <__ieee754_pow+0x3e8>)
 800c110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c114:	f7f4 fa54 	bl	80005c0 <__aeabi_dmul>
 800c118:	4606      	mov	r6, r0
 800c11a:	460f      	mov	r7, r1
 800c11c:	4620      	mov	r0, r4
 800c11e:	4629      	mov	r1, r5
 800c120:	a34d      	add	r3, pc, #308	@ (adr r3, 800c258 <__ieee754_pow+0x3f0>)
 800c122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c126:	f7f4 fa4b 	bl	80005c0 <__aeabi_dmul>
 800c12a:	2200      	movs	r2, #0
 800c12c:	4682      	mov	sl, r0
 800c12e:	468b      	mov	fp, r1
 800c130:	4b50      	ldr	r3, [pc, #320]	@ (800c274 <__ieee754_pow+0x40c>)
 800c132:	4620      	mov	r0, r4
 800c134:	4629      	mov	r1, r5
 800c136:	f7f4 fa43 	bl	80005c0 <__aeabi_dmul>
 800c13a:	4602      	mov	r2, r0
 800c13c:	460b      	mov	r3, r1
 800c13e:	a148      	add	r1, pc, #288	@ (adr r1, 800c260 <__ieee754_pow+0x3f8>)
 800c140:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c144:	f7f4 f884 	bl	8000250 <__aeabi_dsub>
 800c148:	4622      	mov	r2, r4
 800c14a:	462b      	mov	r3, r5
 800c14c:	f7f4 fa38 	bl	80005c0 <__aeabi_dmul>
 800c150:	4602      	mov	r2, r0
 800c152:	460b      	mov	r3, r1
 800c154:	2000      	movs	r0, #0
 800c156:	4948      	ldr	r1, [pc, #288]	@ (800c278 <__ieee754_pow+0x410>)
 800c158:	f7f4 f87a 	bl	8000250 <__aeabi_dsub>
 800c15c:	4680      	mov	r8, r0
 800c15e:	4689      	mov	r9, r1
 800c160:	4622      	mov	r2, r4
 800c162:	462b      	mov	r3, r5
 800c164:	4620      	mov	r0, r4
 800c166:	4629      	mov	r1, r5
 800c168:	2400      	movs	r4, #0
 800c16a:	f7f4 fa29 	bl	80005c0 <__aeabi_dmul>
 800c16e:	4602      	mov	r2, r0
 800c170:	460b      	mov	r3, r1
 800c172:	4640      	mov	r0, r8
 800c174:	4649      	mov	r1, r9
 800c176:	f7f4 fa23 	bl	80005c0 <__aeabi_dmul>
 800c17a:	a33b      	add	r3, pc, #236	@ (adr r3, 800c268 <__ieee754_pow+0x400>)
 800c17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c180:	f7f4 fa1e 	bl	80005c0 <__aeabi_dmul>
 800c184:	4602      	mov	r2, r0
 800c186:	460b      	mov	r3, r1
 800c188:	4650      	mov	r0, sl
 800c18a:	4659      	mov	r1, fp
 800c18c:	f7f4 f860 	bl	8000250 <__aeabi_dsub>
 800c190:	4602      	mov	r2, r0
 800c192:	460b      	mov	r3, r1
 800c194:	4680      	mov	r8, r0
 800c196:	4689      	mov	r9, r1
 800c198:	4630      	mov	r0, r6
 800c19a:	4639      	mov	r1, r7
 800c19c:	f7f4 f85a 	bl	8000254 <__adddf3>
 800c1a0:	4632      	mov	r2, r6
 800c1a2:	463b      	mov	r3, r7
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	460d      	mov	r5, r1
 800c1a8:	f7f4 f852 	bl	8000250 <__aeabi_dsub>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	4640      	mov	r0, r8
 800c1b2:	4649      	mov	r1, r9
 800c1b4:	f7f4 f84c 	bl	8000250 <__aeabi_dsub>
 800c1b8:	4606      	mov	r6, r0
 800c1ba:	460f      	mov	r7, r1
 800c1bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	9304      	str	r3, [sp, #16]
 800c1cc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c1d0:	4652      	mov	r2, sl
 800c1d2:	465b      	mov	r3, fp
 800c1d4:	f7f4 f83c 	bl	8000250 <__aeabi_dsub>
 800c1d8:	4622      	mov	r2, r4
 800c1da:	462b      	mov	r3, r5
 800c1dc:	f7f4 f9f0 	bl	80005c0 <__aeabi_dmul>
 800c1e0:	4680      	mov	r8, r0
 800c1e2:	4689      	mov	r9, r1
 800c1e4:	4630      	mov	r0, r6
 800c1e6:	4639      	mov	r1, r7
 800c1e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1ec:	f7f4 f9e8 	bl	80005c0 <__aeabi_dmul>
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	4640      	mov	r0, r8
 800c1f6:	4649      	mov	r1, r9
 800c1f8:	f7f4 f82c 	bl	8000254 <__adddf3>
 800c1fc:	4606      	mov	r6, r0
 800c1fe:	460f      	mov	r7, r1
 800c200:	4652      	mov	r2, sl
 800c202:	465b      	mov	r3, fp
 800c204:	4620      	mov	r0, r4
 800c206:	4629      	mov	r1, r5
 800c208:	f7f4 f9da 	bl	80005c0 <__aeabi_dmul>
 800c20c:	460b      	mov	r3, r1
 800c20e:	4602      	mov	r2, r0
 800c210:	4680      	mov	r8, r0
 800c212:	4689      	mov	r9, r1
 800c214:	4630      	mov	r0, r6
 800c216:	4639      	mov	r1, r7
 800c218:	f7f4 f81c 	bl	8000254 <__adddf3>
 800c21c:	4b17      	ldr	r3, [pc, #92]	@ (800c27c <__ieee754_pow+0x414>)
 800c21e:	4604      	mov	r4, r0
 800c220:	460d      	mov	r5, r1
 800c222:	4299      	cmp	r1, r3
 800c224:	468a      	mov	sl, r1
 800c226:	468b      	mov	fp, r1
 800c228:	f340 82f0 	ble.w	800c80c <__ieee754_pow+0x9a4>
 800c22c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800c230:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800c234:	4303      	orrs	r3, r0
 800c236:	f000 81e8 	beq.w	800c60a <__ieee754_pow+0x7a2>
 800c23a:	2200      	movs	r2, #0
 800c23c:	2300      	movs	r3, #0
 800c23e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c242:	f7f4 fc2f 	bl	8000aa4 <__aeabi_dcmplt>
 800c246:	3800      	subs	r0, #0
 800c248:	bf18      	it	ne
 800c24a:	2001      	movne	r0, #1
 800c24c:	e714      	b.n	800c078 <__ieee754_pow+0x210>
 800c24e:	bf00      	nop
 800c250:	60000000 	.word	0x60000000
 800c254:	3ff71547 	.word	0x3ff71547
 800c258:	f85ddf44 	.word	0xf85ddf44
 800c25c:	3e54ae0b 	.word	0x3e54ae0b
 800c260:	55555555 	.word	0x55555555
 800c264:	3fd55555 	.word	0x3fd55555
 800c268:	652b82fe 	.word	0x652b82fe
 800c26c:	3ff71547 	.word	0x3ff71547
 800c270:	3ff00000 	.word	0x3ff00000
 800c274:	3fd00000 	.word	0x3fd00000
 800c278:	3fe00000 	.word	0x3fe00000
 800c27c:	408fffff 	.word	0x408fffff
 800c280:	4bd5      	ldr	r3, [pc, #852]	@ (800c5d8 <__ieee754_pow+0x770>)
 800c282:	2200      	movs	r2, #0
 800c284:	402b      	ands	r3, r5
 800c286:	b92b      	cbnz	r3, 800c294 <__ieee754_pow+0x42c>
 800c288:	4bd4      	ldr	r3, [pc, #848]	@ (800c5dc <__ieee754_pow+0x774>)
 800c28a:	f7f4 f999 	bl	80005c0 <__aeabi_dmul>
 800c28e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800c292:	468b      	mov	fp, r1
 800c294:	ea4f 532b 	mov.w	r3, fp, asr #20
 800c298:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800c29c:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c2a0:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800c2a4:	4413      	add	r3, r2
 800c2a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c2aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2ac:	4bcc      	ldr	r3, [pc, #816]	@ (800c5e0 <__ieee754_pow+0x778>)
 800c2ae:	459b      	cmp	fp, r3
 800c2b0:	dd08      	ble.n	800c2c4 <__ieee754_pow+0x45c>
 800c2b2:	4bcc      	ldr	r3, [pc, #816]	@ (800c5e4 <__ieee754_pow+0x77c>)
 800c2b4:	459b      	cmp	fp, r3
 800c2b6:	f340 81a5 	ble.w	800c604 <__ieee754_pow+0x79c>
 800c2ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2bc:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2c4:	f04f 0a00 	mov.w	sl, #0
 800c2c8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800c2cc:	4629      	mov	r1, r5
 800c2ce:	106d      	asrs	r5, r5, #1
 800c2d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2d2:	4bc5      	ldr	r3, [pc, #788]	@ (800c5e8 <__ieee754_pow+0x780>)
 800c2d4:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800c2d8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c2dc:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800c2e0:	ed93 7b00 	vldr	d7, [r3]
 800c2e4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c2e8:	ec53 2b17 	vmov	r2, r3, d7
 800c2ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c2f0:	f7f3 ffae 	bl	8000250 <__aeabi_dsub>
 800c2f4:	4606      	mov	r6, r0
 800c2f6:	460f      	mov	r7, r1
 800c2f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c2fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c300:	f7f3 ffa8 	bl	8000254 <__adddf3>
 800c304:	4602      	mov	r2, r0
 800c306:	460b      	mov	r3, r1
 800c308:	2000      	movs	r0, #0
 800c30a:	49b8      	ldr	r1, [pc, #736]	@ (800c5ec <__ieee754_pow+0x784>)
 800c30c:	f7f4 fa82 	bl	8000814 <__aeabi_ddiv>
 800c310:	4602      	mov	r2, r0
 800c312:	460b      	mov	r3, r1
 800c314:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800c318:	4630      	mov	r0, r6
 800c31a:	4639      	mov	r1, r7
 800c31c:	f7f4 f950 	bl	80005c0 <__aeabi_dmul>
 800c320:	2200      	movs	r2, #0
 800c322:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800c326:	4614      	mov	r4, r2
 800c328:	461d      	mov	r5, r3
 800c32a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c32e:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800c332:	f04f 0b00 	mov.w	fp, #0
 800c336:	4661      	mov	r1, ip
 800c338:	46e1      	mov	r9, ip
 800c33a:	4658      	mov	r0, fp
 800c33c:	46d8      	mov	r8, fp
 800c33e:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800c342:	f7f4 f93d 	bl	80005c0 <__aeabi_dmul>
 800c346:	4602      	mov	r2, r0
 800c348:	460b      	mov	r3, r1
 800c34a:	4630      	mov	r0, r6
 800c34c:	4639      	mov	r1, r7
 800c34e:	f7f3 ff7f 	bl	8000250 <__aeabi_dsub>
 800c352:	4606      	mov	r6, r0
 800c354:	460f      	mov	r7, r1
 800c356:	4620      	mov	r0, r4
 800c358:	4629      	mov	r1, r5
 800c35a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c35e:	f7f3 ff77 	bl	8000250 <__aeabi_dsub>
 800c362:	4602      	mov	r2, r0
 800c364:	460b      	mov	r3, r1
 800c366:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c36a:	f7f3 ff71 	bl	8000250 <__aeabi_dsub>
 800c36e:	465a      	mov	r2, fp
 800c370:	464b      	mov	r3, r9
 800c372:	f7f4 f925 	bl	80005c0 <__aeabi_dmul>
 800c376:	4602      	mov	r2, r0
 800c378:	460b      	mov	r3, r1
 800c37a:	4630      	mov	r0, r6
 800c37c:	4639      	mov	r1, r7
 800c37e:	f7f3 ff67 	bl	8000250 <__aeabi_dsub>
 800c382:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c386:	f7f4 f91b 	bl	80005c0 <__aeabi_dmul>
 800c38a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c38e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c392:	4610      	mov	r0, r2
 800c394:	4619      	mov	r1, r3
 800c396:	f7f4 f913 	bl	80005c0 <__aeabi_dmul>
 800c39a:	4604      	mov	r4, r0
 800c39c:	460d      	mov	r5, r1
 800c39e:	a37c      	add	r3, pc, #496	@ (adr r3, 800c590 <__ieee754_pow+0x728>)
 800c3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a4:	f7f4 f90c 	bl	80005c0 <__aeabi_dmul>
 800c3a8:	a37b      	add	r3, pc, #492	@ (adr r3, 800c598 <__ieee754_pow+0x730>)
 800c3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ae:	f7f3 ff51 	bl	8000254 <__adddf3>
 800c3b2:	4622      	mov	r2, r4
 800c3b4:	462b      	mov	r3, r5
 800c3b6:	f7f4 f903 	bl	80005c0 <__aeabi_dmul>
 800c3ba:	a379      	add	r3, pc, #484	@ (adr r3, 800c5a0 <__ieee754_pow+0x738>)
 800c3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c0:	f7f3 ff48 	bl	8000254 <__adddf3>
 800c3c4:	4622      	mov	r2, r4
 800c3c6:	462b      	mov	r3, r5
 800c3c8:	f7f4 f8fa 	bl	80005c0 <__aeabi_dmul>
 800c3cc:	a376      	add	r3, pc, #472	@ (adr r3, 800c5a8 <__ieee754_pow+0x740>)
 800c3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d2:	f7f3 ff3f 	bl	8000254 <__adddf3>
 800c3d6:	4622      	mov	r2, r4
 800c3d8:	462b      	mov	r3, r5
 800c3da:	f7f4 f8f1 	bl	80005c0 <__aeabi_dmul>
 800c3de:	a374      	add	r3, pc, #464	@ (adr r3, 800c5b0 <__ieee754_pow+0x748>)
 800c3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e4:	f7f3 ff36 	bl	8000254 <__adddf3>
 800c3e8:	4622      	mov	r2, r4
 800c3ea:	462b      	mov	r3, r5
 800c3ec:	f7f4 f8e8 	bl	80005c0 <__aeabi_dmul>
 800c3f0:	a371      	add	r3, pc, #452	@ (adr r3, 800c5b8 <__ieee754_pow+0x750>)
 800c3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f6:	f7f3 ff2d 	bl	8000254 <__adddf3>
 800c3fa:	4606      	mov	r6, r0
 800c3fc:	460f      	mov	r7, r1
 800c3fe:	4622      	mov	r2, r4
 800c400:	462b      	mov	r3, r5
 800c402:	4620      	mov	r0, r4
 800c404:	4629      	mov	r1, r5
 800c406:	f7f4 f8db 	bl	80005c0 <__aeabi_dmul>
 800c40a:	4602      	mov	r2, r0
 800c40c:	460b      	mov	r3, r1
 800c40e:	4630      	mov	r0, r6
 800c410:	4639      	mov	r1, r7
 800c412:	f7f4 f8d5 	bl	80005c0 <__aeabi_dmul>
 800c416:	465a      	mov	r2, fp
 800c418:	4604      	mov	r4, r0
 800c41a:	460d      	mov	r5, r1
 800c41c:	464b      	mov	r3, r9
 800c41e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c422:	f7f3 ff17 	bl	8000254 <__adddf3>
 800c426:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c42a:	f7f4 f8c9 	bl	80005c0 <__aeabi_dmul>
 800c42e:	4622      	mov	r2, r4
 800c430:	462b      	mov	r3, r5
 800c432:	f7f3 ff0f 	bl	8000254 <__adddf3>
 800c436:	465a      	mov	r2, fp
 800c438:	464b      	mov	r3, r9
 800c43a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c43e:	4658      	mov	r0, fp
 800c440:	4649      	mov	r1, r9
 800c442:	f7f4 f8bd 	bl	80005c0 <__aeabi_dmul>
 800c446:	2200      	movs	r2, #0
 800c448:	4b69      	ldr	r3, [pc, #420]	@ (800c5f0 <__ieee754_pow+0x788>)
 800c44a:	4606      	mov	r6, r0
 800c44c:	460f      	mov	r7, r1
 800c44e:	f7f3 ff01 	bl	8000254 <__adddf3>
 800c452:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c456:	f7f3 fefd 	bl	8000254 <__adddf3>
 800c45a:	460d      	mov	r5, r1
 800c45c:	460b      	mov	r3, r1
 800c45e:	4640      	mov	r0, r8
 800c460:	4649      	mov	r1, r9
 800c462:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800c466:	465c      	mov	r4, fp
 800c468:	465a      	mov	r2, fp
 800c46a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800c46e:	f7f4 f8a7 	bl	80005c0 <__aeabi_dmul>
 800c472:	2200      	movs	r2, #0
 800c474:	4680      	mov	r8, r0
 800c476:	4689      	mov	r9, r1
 800c478:	4b5d      	ldr	r3, [pc, #372]	@ (800c5f0 <__ieee754_pow+0x788>)
 800c47a:	4620      	mov	r0, r4
 800c47c:	4629      	mov	r1, r5
 800c47e:	f7f3 fee7 	bl	8000250 <__aeabi_dsub>
 800c482:	4632      	mov	r2, r6
 800c484:	463b      	mov	r3, r7
 800c486:	f7f3 fee3 	bl	8000250 <__aeabi_dsub>
 800c48a:	4602      	mov	r2, r0
 800c48c:	460b      	mov	r3, r1
 800c48e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c492:	f7f3 fedd 	bl	8000250 <__aeabi_dsub>
 800c496:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c49a:	f7f4 f891 	bl	80005c0 <__aeabi_dmul>
 800c49e:	4606      	mov	r6, r0
 800c4a0:	460f      	mov	r7, r1
 800c4a2:	4622      	mov	r2, r4
 800c4a4:	462b      	mov	r3, r5
 800c4a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c4aa:	f7f4 f889 	bl	80005c0 <__aeabi_dmul>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	4630      	mov	r0, r6
 800c4b4:	4639      	mov	r1, r7
 800c4b6:	f7f3 fecd 	bl	8000254 <__adddf3>
 800c4ba:	4606      	mov	r6, r0
 800c4bc:	460f      	mov	r7, r1
 800c4be:	4602      	mov	r2, r0
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	4640      	mov	r0, r8
 800c4c4:	4649      	mov	r1, r9
 800c4c6:	f7f3 fec5 	bl	8000254 <__adddf3>
 800c4ca:	460d      	mov	r5, r1
 800c4cc:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800c4d0:	a33b      	add	r3, pc, #236	@ (adr r3, 800c5c0 <__ieee754_pow+0x758>)
 800c4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d6:	465c      	mov	r4, fp
 800c4d8:	4658      	mov	r0, fp
 800c4da:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800c4de:	f7f4 f86f 	bl	80005c0 <__aeabi_dmul>
 800c4e2:	4642      	mov	r2, r8
 800c4e4:	464b      	mov	r3, r9
 800c4e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	4629      	mov	r1, r5
 800c4ee:	f7f3 feaf 	bl	8000250 <__aeabi_dsub>
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	4630      	mov	r0, r6
 800c4f8:	4639      	mov	r1, r7
 800c4fa:	f7f3 fea9 	bl	8000250 <__aeabi_dsub>
 800c4fe:	a332      	add	r3, pc, #200	@ (adr r3, 800c5c8 <__ieee754_pow+0x760>)
 800c500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c504:	f7f4 f85c 	bl	80005c0 <__aeabi_dmul>
 800c508:	4606      	mov	r6, r0
 800c50a:	460f      	mov	r7, r1
 800c50c:	4620      	mov	r0, r4
 800c50e:	4629      	mov	r1, r5
 800c510:	a32f      	add	r3, pc, #188	@ (adr r3, 800c5d0 <__ieee754_pow+0x768>)
 800c512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c516:	f7f4 f853 	bl	80005c0 <__aeabi_dmul>
 800c51a:	4602      	mov	r2, r0
 800c51c:	460b      	mov	r3, r1
 800c51e:	4630      	mov	r0, r6
 800c520:	4639      	mov	r1, r7
 800c522:	f7f3 fe97 	bl	8000254 <__adddf3>
 800c526:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c528:	4b32      	ldr	r3, [pc, #200]	@ (800c5f4 <__ieee754_pow+0x78c>)
 800c52a:	4413      	add	r3, r2
 800c52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c530:	f7f3 fe90 	bl	8000254 <__adddf3>
 800c534:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c538:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c53a:	f7f3 ffd7 	bl	80004ec <__aeabi_i2d>
 800c53e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c540:	4b2d      	ldr	r3, [pc, #180]	@ (800c5f8 <__ieee754_pow+0x790>)
 800c542:	4606      	mov	r6, r0
 800c544:	460f      	mov	r7, r1
 800c546:	4413      	add	r3, r2
 800c548:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c54c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c550:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c554:	f7f3 fe7e 	bl	8000254 <__adddf3>
 800c558:	4642      	mov	r2, r8
 800c55a:	464b      	mov	r3, r9
 800c55c:	f7f3 fe7a 	bl	8000254 <__adddf3>
 800c560:	4632      	mov	r2, r6
 800c562:	463b      	mov	r3, r7
 800c564:	f7f3 fe76 	bl	8000254 <__adddf3>
 800c568:	4632      	mov	r2, r6
 800c56a:	463b      	mov	r3, r7
 800c56c:	460d      	mov	r5, r1
 800c56e:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800c572:	4658      	mov	r0, fp
 800c574:	465c      	mov	r4, fp
 800c576:	f7f3 fe6b 	bl	8000250 <__aeabi_dsub>
 800c57a:	4642      	mov	r2, r8
 800c57c:	464b      	mov	r3, r9
 800c57e:	f7f3 fe67 	bl	8000250 <__aeabi_dsub>
 800c582:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c586:	f7f3 fe63 	bl	8000250 <__aeabi_dsub>
 800c58a:	4602      	mov	r2, r0
 800c58c:	e036      	b.n	800c5fc <__ieee754_pow+0x794>
 800c58e:	bf00      	nop
 800c590:	4a454eef 	.word	0x4a454eef
 800c594:	3fca7e28 	.word	0x3fca7e28
 800c598:	93c9db65 	.word	0x93c9db65
 800c59c:	3fcd864a 	.word	0x3fcd864a
 800c5a0:	a91d4101 	.word	0xa91d4101
 800c5a4:	3fd17460 	.word	0x3fd17460
 800c5a8:	518f264d 	.word	0x518f264d
 800c5ac:	3fd55555 	.word	0x3fd55555
 800c5b0:	db6fabff 	.word	0xdb6fabff
 800c5b4:	3fdb6db6 	.word	0x3fdb6db6
 800c5b8:	33333303 	.word	0x33333303
 800c5bc:	3fe33333 	.word	0x3fe33333
 800c5c0:	e0000000 	.word	0xe0000000
 800c5c4:	3feec709 	.word	0x3feec709
 800c5c8:	dc3a03fd 	.word	0xdc3a03fd
 800c5cc:	3feec709 	.word	0x3feec709
 800c5d0:	145b01f5 	.word	0x145b01f5
 800c5d4:	be3e2fe0 	.word	0xbe3e2fe0
 800c5d8:	7ff00000 	.word	0x7ff00000
 800c5dc:	43400000 	.word	0x43400000
 800c5e0:	0003988e 	.word	0x0003988e
 800c5e4:	000bb679 	.word	0x000bb679
 800c5e8:	0800e648 	.word	0x0800e648
 800c5ec:	3ff00000 	.word	0x3ff00000
 800c5f0:	40080000 	.word	0x40080000
 800c5f4:	0800e628 	.word	0x0800e628
 800c5f8:	0800e638 	.word	0x0800e638
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c602:	e5d7      	b.n	800c1b4 <__ieee754_pow+0x34c>
 800c604:	f04f 0a01 	mov.w	sl, #1
 800c608:	e65e      	b.n	800c2c8 <__ieee754_pow+0x460>
 800c60a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800c8dc <__ieee754_pow+0xa74>)
 800c60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c610:	4630      	mov	r0, r6
 800c612:	4639      	mov	r1, r7
 800c614:	f7f3 fe1e 	bl	8000254 <__adddf3>
 800c618:	4642      	mov	r2, r8
 800c61a:	464b      	mov	r3, r9
 800c61c:	e9cd 0100 	strd	r0, r1, [sp]
 800c620:	4620      	mov	r0, r4
 800c622:	4629      	mov	r1, r5
 800c624:	f7f3 fe14 	bl	8000250 <__aeabi_dsub>
 800c628:	4602      	mov	r2, r0
 800c62a:	460b      	mov	r3, r1
 800c62c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c630:	f7f4 fa56 	bl	8000ae0 <__aeabi_dcmpgt>
 800c634:	2800      	cmp	r0, #0
 800c636:	f47f ae00 	bne.w	800c23a <__ieee754_pow+0x3d2>
 800c63a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800c63e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c642:	48a1      	ldr	r0, [pc, #644]	@ (800c8c8 <__ieee754_pow+0xa60>)
 800c644:	f1bb 0f00 	cmp.w	fp, #0
 800c648:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800c64c:	f04f 0200 	mov.w	r2, #0
 800c650:	fa43 fa0a 	asr.w	sl, r3, sl
 800c654:	44da      	add	sl, fp
 800c656:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c65a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c65e:	fa40 f001 	asr.w	r0, r0, r1
 800c662:	f1c1 0114 	rsb	r1, r1, #20
 800c666:	ea00 030a 	and.w	r3, r0, sl
 800c66a:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c66e:	4640      	mov	r0, r8
 800c670:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800c674:	fa4a fa01 	asr.w	sl, sl, r1
 800c678:	4649      	mov	r1, r9
 800c67a:	bfb8      	it	lt
 800c67c:	f1ca 0a00 	rsblt	sl, sl, #0
 800c680:	f7f3 fde6 	bl	8000250 <__aeabi_dsub>
 800c684:	4680      	mov	r8, r0
 800c686:	4689      	mov	r9, r1
 800c688:	2400      	movs	r4, #0
 800c68a:	4632      	mov	r2, r6
 800c68c:	463b      	mov	r3, r7
 800c68e:	4640      	mov	r0, r8
 800c690:	4649      	mov	r1, r9
 800c692:	f7f3 fddf 	bl	8000254 <__adddf3>
 800c696:	460d      	mov	r5, r1
 800c698:	4620      	mov	r0, r4
 800c69a:	a37b      	add	r3, pc, #492	@ (adr r3, 800c888 <__ieee754_pow+0xa20>)
 800c69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a0:	f7f3 ff8e 	bl	80005c0 <__aeabi_dmul>
 800c6a4:	4642      	mov	r2, r8
 800c6a6:	464b      	mov	r3, r9
 800c6a8:	e9cd 0100 	strd	r0, r1, [sp]
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	4629      	mov	r1, r5
 800c6b0:	f7f3 fdce 	bl	8000250 <__aeabi_dsub>
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	4630      	mov	r0, r6
 800c6ba:	4639      	mov	r1, r7
 800c6bc:	f7f3 fdc8 	bl	8000250 <__aeabi_dsub>
 800c6c0:	a373      	add	r3, pc, #460	@ (adr r3, 800c890 <__ieee754_pow+0xa28>)
 800c6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c6:	f7f3 ff7b 	bl	80005c0 <__aeabi_dmul>
 800c6ca:	4680      	mov	r8, r0
 800c6cc:	4689      	mov	r9, r1
 800c6ce:	4620      	mov	r0, r4
 800c6d0:	4629      	mov	r1, r5
 800c6d2:	a371      	add	r3, pc, #452	@ (adr r3, 800c898 <__ieee754_pow+0xa30>)
 800c6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d8:	f7f3 ff72 	bl	80005c0 <__aeabi_dmul>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	460b      	mov	r3, r1
 800c6e0:	4640      	mov	r0, r8
 800c6e2:	4649      	mov	r1, r9
 800c6e4:	f7f3 fdb6 	bl	8000254 <__adddf3>
 800c6e8:	4604      	mov	r4, r0
 800c6ea:	460d      	mov	r5, r1
 800c6ec:	4602      	mov	r2, r0
 800c6ee:	460b      	mov	r3, r1
 800c6f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c6f4:	f7f3 fdae 	bl	8000254 <__adddf3>
 800c6f8:	4680      	mov	r8, r0
 800c6fa:	4689      	mov	r9, r1
 800c6fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c700:	f7f3 fda6 	bl	8000250 <__aeabi_dsub>
 800c704:	4602      	mov	r2, r0
 800c706:	460b      	mov	r3, r1
 800c708:	4620      	mov	r0, r4
 800c70a:	4629      	mov	r1, r5
 800c70c:	f7f3 fda0 	bl	8000250 <__aeabi_dsub>
 800c710:	4642      	mov	r2, r8
 800c712:	4606      	mov	r6, r0
 800c714:	460f      	mov	r7, r1
 800c716:	464b      	mov	r3, r9
 800c718:	4640      	mov	r0, r8
 800c71a:	4649      	mov	r1, r9
 800c71c:	f7f3 ff50 	bl	80005c0 <__aeabi_dmul>
 800c720:	4604      	mov	r4, r0
 800c722:	460d      	mov	r5, r1
 800c724:	a35e      	add	r3, pc, #376	@ (adr r3, 800c8a0 <__ieee754_pow+0xa38>)
 800c726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72a:	f7f3 ff49 	bl	80005c0 <__aeabi_dmul>
 800c72e:	a35e      	add	r3, pc, #376	@ (adr r3, 800c8a8 <__ieee754_pow+0xa40>)
 800c730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c734:	f7f3 fd8c 	bl	8000250 <__aeabi_dsub>
 800c738:	4622      	mov	r2, r4
 800c73a:	462b      	mov	r3, r5
 800c73c:	f7f3 ff40 	bl	80005c0 <__aeabi_dmul>
 800c740:	a35b      	add	r3, pc, #364	@ (adr r3, 800c8b0 <__ieee754_pow+0xa48>)
 800c742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c746:	f7f3 fd85 	bl	8000254 <__adddf3>
 800c74a:	4622      	mov	r2, r4
 800c74c:	462b      	mov	r3, r5
 800c74e:	f7f3 ff37 	bl	80005c0 <__aeabi_dmul>
 800c752:	a359      	add	r3, pc, #356	@ (adr r3, 800c8b8 <__ieee754_pow+0xa50>)
 800c754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c758:	f7f3 fd7a 	bl	8000250 <__aeabi_dsub>
 800c75c:	4622      	mov	r2, r4
 800c75e:	462b      	mov	r3, r5
 800c760:	f7f3 ff2e 	bl	80005c0 <__aeabi_dmul>
 800c764:	a356      	add	r3, pc, #344	@ (adr r3, 800c8c0 <__ieee754_pow+0xa58>)
 800c766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76a:	f7f3 fd73 	bl	8000254 <__adddf3>
 800c76e:	4622      	mov	r2, r4
 800c770:	462b      	mov	r3, r5
 800c772:	f7f3 ff25 	bl	80005c0 <__aeabi_dmul>
 800c776:	4602      	mov	r2, r0
 800c778:	460b      	mov	r3, r1
 800c77a:	4640      	mov	r0, r8
 800c77c:	4649      	mov	r1, r9
 800c77e:	f7f3 fd67 	bl	8000250 <__aeabi_dsub>
 800c782:	4604      	mov	r4, r0
 800c784:	460d      	mov	r5, r1
 800c786:	4602      	mov	r2, r0
 800c788:	460b      	mov	r3, r1
 800c78a:	4640      	mov	r0, r8
 800c78c:	4649      	mov	r1, r9
 800c78e:	f7f3 ff17 	bl	80005c0 <__aeabi_dmul>
 800c792:	2200      	movs	r2, #0
 800c794:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c798:	e9cd 0100 	strd	r0, r1, [sp]
 800c79c:	4620      	mov	r0, r4
 800c79e:	4629      	mov	r1, r5
 800c7a0:	f7f3 fd56 	bl	8000250 <__aeabi_dsub>
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7ac:	f7f4 f832 	bl	8000814 <__aeabi_ddiv>
 800c7b0:	4632      	mov	r2, r6
 800c7b2:	4604      	mov	r4, r0
 800c7b4:	460d      	mov	r5, r1
 800c7b6:	463b      	mov	r3, r7
 800c7b8:	4640      	mov	r0, r8
 800c7ba:	4649      	mov	r1, r9
 800c7bc:	f7f3 ff00 	bl	80005c0 <__aeabi_dmul>
 800c7c0:	4632      	mov	r2, r6
 800c7c2:	463b      	mov	r3, r7
 800c7c4:	f7f3 fd46 	bl	8000254 <__adddf3>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	4629      	mov	r1, r5
 800c7d0:	f7f3 fd3e 	bl	8000250 <__aeabi_dsub>
 800c7d4:	4642      	mov	r2, r8
 800c7d6:	464b      	mov	r3, r9
 800c7d8:	f7f3 fd3a 	bl	8000250 <__aeabi_dsub>
 800c7dc:	460b      	mov	r3, r1
 800c7de:	4602      	mov	r2, r0
 800c7e0:	493a      	ldr	r1, [pc, #232]	@ (800c8cc <__ieee754_pow+0xa64>)
 800c7e2:	2000      	movs	r0, #0
 800c7e4:	f7f3 fd34 	bl	8000250 <__aeabi_dsub>
 800c7e8:	ec41 0b10 	vmov	d0, r0, r1
 800c7ec:	ee10 3a90 	vmov	r3, s1
 800c7f0:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c7f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c7f8:	da30      	bge.n	800c85c <__ieee754_pow+0x9f4>
 800c7fa:	4650      	mov	r0, sl
 800c7fc:	f000 fe60 	bl	800d4c0 <scalbn>
 800c800:	ec51 0b10 	vmov	r0, r1, d0
 800c804:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c808:	f7ff bbd5 	b.w	800bfb6 <__ieee754_pow+0x14e>
 800c80c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c810:	4c2f      	ldr	r4, [pc, #188]	@ (800c8d0 <__ieee754_pow+0xa68>)
 800c812:	42a3      	cmp	r3, r4
 800c814:	d91a      	bls.n	800c84c <__ieee754_pow+0x9e4>
 800c816:	4b2f      	ldr	r3, [pc, #188]	@ (800c8d4 <__ieee754_pow+0xa6c>)
 800c818:	440b      	add	r3, r1
 800c81a:	4303      	orrs	r3, r0
 800c81c:	d009      	beq.n	800c832 <__ieee754_pow+0x9ca>
 800c81e:	2200      	movs	r2, #0
 800c820:	2300      	movs	r3, #0
 800c822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c826:	f7f4 f93d 	bl	8000aa4 <__aeabi_dcmplt>
 800c82a:	3800      	subs	r0, #0
 800c82c:	bf18      	it	ne
 800c82e:	2001      	movne	r0, #1
 800c830:	e42e      	b.n	800c090 <__ieee754_pow+0x228>
 800c832:	4642      	mov	r2, r8
 800c834:	464b      	mov	r3, r9
 800c836:	f7f3 fd0b 	bl	8000250 <__aeabi_dsub>
 800c83a:	4632      	mov	r2, r6
 800c83c:	463b      	mov	r3, r7
 800c83e:	f7f4 f945 	bl	8000acc <__aeabi_dcmpge>
 800c842:	2800      	cmp	r0, #0
 800c844:	d1eb      	bne.n	800c81e <__ieee754_pow+0x9b6>
 800c846:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800c8e4 <__ieee754_pow+0xa7c>
 800c84a:	e6f6      	b.n	800c63a <__ieee754_pow+0x7d2>
 800c84c:	469a      	mov	sl, r3
 800c84e:	4b22      	ldr	r3, [pc, #136]	@ (800c8d8 <__ieee754_pow+0xa70>)
 800c850:	459a      	cmp	sl, r3
 800c852:	f63f aef2 	bhi.w	800c63a <__ieee754_pow+0x7d2>
 800c856:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c85a:	e715      	b.n	800c688 <__ieee754_pow+0x820>
 800c85c:	ec51 0b10 	vmov	r0, r1, d0
 800c860:	4619      	mov	r1, r3
 800c862:	e7cf      	b.n	800c804 <__ieee754_pow+0x99c>
 800c864:	2000      	movs	r0, #0
 800c866:	4919      	ldr	r1, [pc, #100]	@ (800c8cc <__ieee754_pow+0xa64>)
 800c868:	f7ff bb1b 	b.w	800bea2 <__ieee754_pow+0x3a>
 800c86c:	2000      	movs	r0, #0
 800c86e:	2100      	movs	r1, #0
 800c870:	f7ff bb17 	b.w	800bea2 <__ieee754_pow+0x3a>
 800c874:	4630      	mov	r0, r6
 800c876:	4639      	mov	r1, r7
 800c878:	f7ff bb13 	b.w	800bea2 <__ieee754_pow+0x3a>
 800c87c:	460c      	mov	r4, r1
 800c87e:	f7ff bb61 	b.w	800bf44 <__ieee754_pow+0xdc>
 800c882:	2400      	movs	r4, #0
 800c884:	f7ff bb4c 	b.w	800bf20 <__ieee754_pow+0xb8>
 800c888:	00000000 	.word	0x00000000
 800c88c:	3fe62e43 	.word	0x3fe62e43
 800c890:	fefa39ef 	.word	0xfefa39ef
 800c894:	3fe62e42 	.word	0x3fe62e42
 800c898:	0ca86c39 	.word	0x0ca86c39
 800c89c:	be205c61 	.word	0xbe205c61
 800c8a0:	72bea4d0 	.word	0x72bea4d0
 800c8a4:	3e663769 	.word	0x3e663769
 800c8a8:	c5d26bf1 	.word	0xc5d26bf1
 800c8ac:	3ebbbd41 	.word	0x3ebbbd41
 800c8b0:	af25de2c 	.word	0xaf25de2c
 800c8b4:	3f11566a 	.word	0x3f11566a
 800c8b8:	16bebd93 	.word	0x16bebd93
 800c8bc:	3f66c16c 	.word	0x3f66c16c
 800c8c0:	5555553e 	.word	0x5555553e
 800c8c4:	3fc55555 	.word	0x3fc55555
 800c8c8:	fff00000 	.word	0xfff00000
 800c8cc:	3ff00000 	.word	0x3ff00000
 800c8d0:	4090cbff 	.word	0x4090cbff
 800c8d4:	3f6f3400 	.word	0x3f6f3400
 800c8d8:	3fe00000 	.word	0x3fe00000
 800c8dc:	652b82fe 	.word	0x652b82fe
 800c8e0:	3c971547 	.word	0x3c971547
 800c8e4:	4090cc00 	.word	0x4090cc00

0800c8e8 <__ieee754_rem_pio2>:
 800c8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ec:	ec57 6b10 	vmov	r6, r7, d0
 800c8f0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c8f4:	4bc4      	ldr	r3, [pc, #784]	@ (800cc08 <__ieee754_rem_pio2+0x320>)
 800c8f6:	b08d      	sub	sp, #52	@ 0x34
 800c8f8:	4604      	mov	r4, r0
 800c8fa:	4598      	cmp	r8, r3
 800c8fc:	9704      	str	r7, [sp, #16]
 800c8fe:	d807      	bhi.n	800c910 <__ieee754_rem_pio2+0x28>
 800c900:	2200      	movs	r2, #0
 800c902:	2300      	movs	r3, #0
 800c904:	ed80 0b00 	vstr	d0, [r0]
 800c908:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c90c:	2500      	movs	r5, #0
 800c90e:	e028      	b.n	800c962 <__ieee754_rem_pio2+0x7a>
 800c910:	4bbe      	ldr	r3, [pc, #760]	@ (800cc0c <__ieee754_rem_pio2+0x324>)
 800c912:	4598      	cmp	r8, r3
 800c914:	d878      	bhi.n	800ca08 <__ieee754_rem_pio2+0x120>
 800c916:	9b04      	ldr	r3, [sp, #16]
 800c918:	4630      	mov	r0, r6
 800c91a:	4dbd      	ldr	r5, [pc, #756]	@ (800cc10 <__ieee754_rem_pio2+0x328>)
 800c91c:	4639      	mov	r1, r7
 800c91e:	2b00      	cmp	r3, #0
 800c920:	a3ab      	add	r3, pc, #684	@ (adr r3, 800cbd0 <__ieee754_rem_pio2+0x2e8>)
 800c922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c926:	dd38      	ble.n	800c99a <__ieee754_rem_pio2+0xb2>
 800c928:	f7f3 fc92 	bl	8000250 <__aeabi_dsub>
 800c92c:	45a8      	cmp	r8, r5
 800c92e:	4606      	mov	r6, r0
 800c930:	460f      	mov	r7, r1
 800c932:	d01a      	beq.n	800c96a <__ieee754_rem_pio2+0x82>
 800c934:	a3a8      	add	r3, pc, #672	@ (adr r3, 800cbd8 <__ieee754_rem_pio2+0x2f0>)
 800c936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93a:	f7f3 fc89 	bl	8000250 <__aeabi_dsub>
 800c93e:	4602      	mov	r2, r0
 800c940:	460b      	mov	r3, r1
 800c942:	4680      	mov	r8, r0
 800c944:	4689      	mov	r9, r1
 800c946:	4630      	mov	r0, r6
 800c948:	4639      	mov	r1, r7
 800c94a:	f7f3 fc81 	bl	8000250 <__aeabi_dsub>
 800c94e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800cbd8 <__ieee754_rem_pio2+0x2f0>)
 800c950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c954:	2501      	movs	r5, #1
 800c956:	f7f3 fc7b 	bl	8000250 <__aeabi_dsub>
 800c95a:	e9c4 8900 	strd	r8, r9, [r4]
 800c95e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c962:	4628      	mov	r0, r5
 800c964:	b00d      	add	sp, #52	@ 0x34
 800c966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c96a:	a39d      	add	r3, pc, #628	@ (adr r3, 800cbe0 <__ieee754_rem_pio2+0x2f8>)
 800c96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c970:	f7f3 fc6e 	bl	8000250 <__aeabi_dsub>
 800c974:	4606      	mov	r6, r0
 800c976:	460f      	mov	r7, r1
 800c978:	a39b      	add	r3, pc, #620	@ (adr r3, 800cbe8 <__ieee754_rem_pio2+0x300>)
 800c97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97e:	f7f3 fc67 	bl	8000250 <__aeabi_dsub>
 800c982:	4602      	mov	r2, r0
 800c984:	460b      	mov	r3, r1
 800c986:	4680      	mov	r8, r0
 800c988:	4689      	mov	r9, r1
 800c98a:	4630      	mov	r0, r6
 800c98c:	4639      	mov	r1, r7
 800c98e:	f7f3 fc5f 	bl	8000250 <__aeabi_dsub>
 800c992:	a395      	add	r3, pc, #596	@ (adr r3, 800cbe8 <__ieee754_rem_pio2+0x300>)
 800c994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c998:	e7dc      	b.n	800c954 <__ieee754_rem_pio2+0x6c>
 800c99a:	f7f3 fc5b 	bl	8000254 <__adddf3>
 800c99e:	45a8      	cmp	r8, r5
 800c9a0:	4606      	mov	r6, r0
 800c9a2:	460f      	mov	r7, r1
 800c9a4:	d018      	beq.n	800c9d8 <__ieee754_rem_pio2+0xf0>
 800c9a6:	a38c      	add	r3, pc, #560	@ (adr r3, 800cbd8 <__ieee754_rem_pio2+0x2f0>)
 800c9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ac:	f7f3 fc52 	bl	8000254 <__adddf3>
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	460b      	mov	r3, r1
 800c9b4:	4680      	mov	r8, r0
 800c9b6:	4689      	mov	r9, r1
 800c9b8:	4630      	mov	r0, r6
 800c9ba:	4639      	mov	r1, r7
 800c9bc:	f7f3 fc48 	bl	8000250 <__aeabi_dsub>
 800c9c0:	a385      	add	r3, pc, #532	@ (adr r3, 800cbd8 <__ieee754_rem_pio2+0x2f0>)
 800c9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c6:	f7f3 fc45 	bl	8000254 <__adddf3>
 800c9ca:	f04f 35ff 	mov.w	r5, #4294967295
 800c9ce:	e9c4 8900 	strd	r8, r9, [r4]
 800c9d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c9d6:	e7c4      	b.n	800c962 <__ieee754_rem_pio2+0x7a>
 800c9d8:	a381      	add	r3, pc, #516	@ (adr r3, 800cbe0 <__ieee754_rem_pio2+0x2f8>)
 800c9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9de:	f7f3 fc39 	bl	8000254 <__adddf3>
 800c9e2:	4606      	mov	r6, r0
 800c9e4:	460f      	mov	r7, r1
 800c9e6:	a380      	add	r3, pc, #512	@ (adr r3, 800cbe8 <__ieee754_rem_pio2+0x300>)
 800c9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ec:	f7f3 fc32 	bl	8000254 <__adddf3>
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	460b      	mov	r3, r1
 800c9f4:	4680      	mov	r8, r0
 800c9f6:	4689      	mov	r9, r1
 800c9f8:	4630      	mov	r0, r6
 800c9fa:	4639      	mov	r1, r7
 800c9fc:	f7f3 fc28 	bl	8000250 <__aeabi_dsub>
 800ca00:	a379      	add	r3, pc, #484	@ (adr r3, 800cbe8 <__ieee754_rem_pio2+0x300>)
 800ca02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca06:	e7de      	b.n	800c9c6 <__ieee754_rem_pio2+0xde>
 800ca08:	4b82      	ldr	r3, [pc, #520]	@ (800cc14 <__ieee754_rem_pio2+0x32c>)
 800ca0a:	4598      	cmp	r8, r3
 800ca0c:	f200 80d1 	bhi.w	800cbb2 <__ieee754_rem_pio2+0x2ca>
 800ca10:	f7fe fd1a 	bl	800b448 <fabs>
 800ca14:	ec57 6b10 	vmov	r6, r7, d0
 800ca18:	a375      	add	r3, pc, #468	@ (adr r3, 800cbf0 <__ieee754_rem_pio2+0x308>)
 800ca1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1e:	4630      	mov	r0, r6
 800ca20:	4639      	mov	r1, r7
 800ca22:	f7f3 fdcd 	bl	80005c0 <__aeabi_dmul>
 800ca26:	2200      	movs	r2, #0
 800ca28:	4b7b      	ldr	r3, [pc, #492]	@ (800cc18 <__ieee754_rem_pio2+0x330>)
 800ca2a:	f7f3 fc13 	bl	8000254 <__adddf3>
 800ca2e:	f7f4 f877 	bl	8000b20 <__aeabi_d2iz>
 800ca32:	4605      	mov	r5, r0
 800ca34:	f7f3 fd5a 	bl	80004ec <__aeabi_i2d>
 800ca38:	4602      	mov	r2, r0
 800ca3a:	460b      	mov	r3, r1
 800ca3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ca40:	a363      	add	r3, pc, #396	@ (adr r3, 800cbd0 <__ieee754_rem_pio2+0x2e8>)
 800ca42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca46:	f7f3 fdbb 	bl	80005c0 <__aeabi_dmul>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	4630      	mov	r0, r6
 800ca50:	4639      	mov	r1, r7
 800ca52:	f7f3 fbfd 	bl	8000250 <__aeabi_dsub>
 800ca56:	4682      	mov	sl, r0
 800ca58:	468b      	mov	fp, r1
 800ca5a:	a35f      	add	r3, pc, #380	@ (adr r3, 800cbd8 <__ieee754_rem_pio2+0x2f0>)
 800ca5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca64:	f7f3 fdac 	bl	80005c0 <__aeabi_dmul>
 800ca68:	2d1f      	cmp	r5, #31
 800ca6a:	4606      	mov	r6, r0
 800ca6c:	460f      	mov	r7, r1
 800ca6e:	dc0c      	bgt.n	800ca8a <__ieee754_rem_pio2+0x1a2>
 800ca70:	1e6a      	subs	r2, r5, #1
 800ca72:	4b6a      	ldr	r3, [pc, #424]	@ (800cc1c <__ieee754_rem_pio2+0x334>)
 800ca74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca78:	4543      	cmp	r3, r8
 800ca7a:	d006      	beq.n	800ca8a <__ieee754_rem_pio2+0x1a2>
 800ca7c:	4632      	mov	r2, r6
 800ca7e:	463b      	mov	r3, r7
 800ca80:	4650      	mov	r0, sl
 800ca82:	4659      	mov	r1, fp
 800ca84:	f7f3 fbe4 	bl	8000250 <__aeabi_dsub>
 800ca88:	e00e      	b.n	800caa8 <__ieee754_rem_pio2+0x1c0>
 800ca8a:	463b      	mov	r3, r7
 800ca8c:	4632      	mov	r2, r6
 800ca8e:	4650      	mov	r0, sl
 800ca90:	4659      	mov	r1, fp
 800ca92:	f7f3 fbdd 	bl	8000250 <__aeabi_dsub>
 800ca96:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ca9a:	9305      	str	r3, [sp, #20]
 800ca9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800caa0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800caa4:	2b10      	cmp	r3, #16
 800caa6:	dc02      	bgt.n	800caae <__ieee754_rem_pio2+0x1c6>
 800caa8:	e9c4 0100 	strd	r0, r1, [r4]
 800caac:	e039      	b.n	800cb22 <__ieee754_rem_pio2+0x23a>
 800caae:	a34c      	add	r3, pc, #304	@ (adr r3, 800cbe0 <__ieee754_rem_pio2+0x2f8>)
 800cab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cab8:	f7f3 fd82 	bl	80005c0 <__aeabi_dmul>
 800cabc:	4606      	mov	r6, r0
 800cabe:	460f      	mov	r7, r1
 800cac0:	4602      	mov	r2, r0
 800cac2:	460b      	mov	r3, r1
 800cac4:	4650      	mov	r0, sl
 800cac6:	4659      	mov	r1, fp
 800cac8:	f7f3 fbc2 	bl	8000250 <__aeabi_dsub>
 800cacc:	4602      	mov	r2, r0
 800cace:	460b      	mov	r3, r1
 800cad0:	4680      	mov	r8, r0
 800cad2:	4689      	mov	r9, r1
 800cad4:	4650      	mov	r0, sl
 800cad6:	4659      	mov	r1, fp
 800cad8:	f7f3 fbba 	bl	8000250 <__aeabi_dsub>
 800cadc:	4632      	mov	r2, r6
 800cade:	463b      	mov	r3, r7
 800cae0:	f7f3 fbb6 	bl	8000250 <__aeabi_dsub>
 800cae4:	4606      	mov	r6, r0
 800cae6:	460f      	mov	r7, r1
 800cae8:	a33f      	add	r3, pc, #252	@ (adr r3, 800cbe8 <__ieee754_rem_pio2+0x300>)
 800caea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800caf2:	f7f3 fd65 	bl	80005c0 <__aeabi_dmul>
 800caf6:	4632      	mov	r2, r6
 800caf8:	463b      	mov	r3, r7
 800cafa:	f7f3 fba9 	bl	8000250 <__aeabi_dsub>
 800cafe:	4602      	mov	r2, r0
 800cb00:	460b      	mov	r3, r1
 800cb02:	4606      	mov	r6, r0
 800cb04:	460f      	mov	r7, r1
 800cb06:	4640      	mov	r0, r8
 800cb08:	4649      	mov	r1, r9
 800cb0a:	f7f3 fba1 	bl	8000250 <__aeabi_dsub>
 800cb0e:	9a05      	ldr	r2, [sp, #20]
 800cb10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cb14:	1ad3      	subs	r3, r2, r3
 800cb16:	2b31      	cmp	r3, #49	@ 0x31
 800cb18:	dc20      	bgt.n	800cb5c <__ieee754_rem_pio2+0x274>
 800cb1a:	46c2      	mov	sl, r8
 800cb1c:	46cb      	mov	fp, r9
 800cb1e:	e9c4 0100 	strd	r0, r1, [r4]
 800cb22:	e9d4 8900 	ldrd	r8, r9, [r4]
 800cb26:	4650      	mov	r0, sl
 800cb28:	4659      	mov	r1, fp
 800cb2a:	4642      	mov	r2, r8
 800cb2c:	464b      	mov	r3, r9
 800cb2e:	f7f3 fb8f 	bl	8000250 <__aeabi_dsub>
 800cb32:	463b      	mov	r3, r7
 800cb34:	4632      	mov	r2, r6
 800cb36:	f7f3 fb8b 	bl	8000250 <__aeabi_dsub>
 800cb3a:	9b04      	ldr	r3, [sp, #16]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cb42:	f6bf af0e 	bge.w	800c962 <__ieee754_rem_pio2+0x7a>
 800cb46:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800cb4a:	f8c4 8000 	str.w	r8, [r4]
 800cb4e:	60a0      	str	r0, [r4, #8]
 800cb50:	6063      	str	r3, [r4, #4]
 800cb52:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cb56:	60e3      	str	r3, [r4, #12]
 800cb58:	426d      	negs	r5, r5
 800cb5a:	e702      	b.n	800c962 <__ieee754_rem_pio2+0x7a>
 800cb5c:	a326      	add	r3, pc, #152	@ (adr r3, 800cbf8 <__ieee754_rem_pio2+0x310>)
 800cb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb66:	f7f3 fd2b 	bl	80005c0 <__aeabi_dmul>
 800cb6a:	4606      	mov	r6, r0
 800cb6c:	460f      	mov	r7, r1
 800cb6e:	4602      	mov	r2, r0
 800cb70:	460b      	mov	r3, r1
 800cb72:	4640      	mov	r0, r8
 800cb74:	4649      	mov	r1, r9
 800cb76:	f7f3 fb6b 	bl	8000250 <__aeabi_dsub>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	4682      	mov	sl, r0
 800cb80:	468b      	mov	fp, r1
 800cb82:	4640      	mov	r0, r8
 800cb84:	4649      	mov	r1, r9
 800cb86:	f7f3 fb63 	bl	8000250 <__aeabi_dsub>
 800cb8a:	4632      	mov	r2, r6
 800cb8c:	463b      	mov	r3, r7
 800cb8e:	f7f3 fb5f 	bl	8000250 <__aeabi_dsub>
 800cb92:	4606      	mov	r6, r0
 800cb94:	460f      	mov	r7, r1
 800cb96:	a31a      	add	r3, pc, #104	@ (adr r3, 800cc00 <__ieee754_rem_pio2+0x318>)
 800cb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cba0:	f7f3 fd0e 	bl	80005c0 <__aeabi_dmul>
 800cba4:	4632      	mov	r2, r6
 800cba6:	463b      	mov	r3, r7
 800cba8:	f7f3 fb52 	bl	8000250 <__aeabi_dsub>
 800cbac:	4606      	mov	r6, r0
 800cbae:	460f      	mov	r7, r1
 800cbb0:	e764      	b.n	800ca7c <__ieee754_rem_pio2+0x194>
 800cbb2:	4b1b      	ldr	r3, [pc, #108]	@ (800cc20 <__ieee754_rem_pio2+0x338>)
 800cbb4:	4598      	cmp	r8, r3
 800cbb6:	d935      	bls.n	800cc24 <__ieee754_rem_pio2+0x33c>
 800cbb8:	4632      	mov	r2, r6
 800cbba:	463b      	mov	r3, r7
 800cbbc:	4630      	mov	r0, r6
 800cbbe:	4639      	mov	r1, r7
 800cbc0:	f7f3 fb46 	bl	8000250 <__aeabi_dsub>
 800cbc4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cbc8:	e9c4 0100 	strd	r0, r1, [r4]
 800cbcc:	e69e      	b.n	800c90c <__ieee754_rem_pio2+0x24>
 800cbce:	bf00      	nop
 800cbd0:	54400000 	.word	0x54400000
 800cbd4:	3ff921fb 	.word	0x3ff921fb
 800cbd8:	1a626331 	.word	0x1a626331
 800cbdc:	3dd0b461 	.word	0x3dd0b461
 800cbe0:	1a600000 	.word	0x1a600000
 800cbe4:	3dd0b461 	.word	0x3dd0b461
 800cbe8:	2e037073 	.word	0x2e037073
 800cbec:	3ba3198a 	.word	0x3ba3198a
 800cbf0:	6dc9c883 	.word	0x6dc9c883
 800cbf4:	3fe45f30 	.word	0x3fe45f30
 800cbf8:	2e000000 	.word	0x2e000000
 800cbfc:	3ba3198a 	.word	0x3ba3198a
 800cc00:	252049c1 	.word	0x252049c1
 800cc04:	397b839a 	.word	0x397b839a
 800cc08:	3fe921fb 	.word	0x3fe921fb
 800cc0c:	4002d97b 	.word	0x4002d97b
 800cc10:	3ff921fb 	.word	0x3ff921fb
 800cc14:	413921fb 	.word	0x413921fb
 800cc18:	3fe00000 	.word	0x3fe00000
 800cc1c:	0800e658 	.word	0x0800e658
 800cc20:	7fefffff 	.word	0x7fefffff
 800cc24:	ea4f 5528 	mov.w	r5, r8, asr #20
 800cc28:	4630      	mov	r0, r6
 800cc2a:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800cc2e:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800cc32:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800cc36:	f04f 0803 	mov.w	r8, #3
 800cc3a:	460f      	mov	r7, r1
 800cc3c:	f7f3 ff70 	bl	8000b20 <__aeabi_d2iz>
 800cc40:	f7f3 fc54 	bl	80004ec <__aeabi_i2d>
 800cc44:	4602      	mov	r2, r0
 800cc46:	460b      	mov	r3, r1
 800cc48:	4630      	mov	r0, r6
 800cc4a:	4639      	mov	r1, r7
 800cc4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cc50:	f7f3 fafe 	bl	8000250 <__aeabi_dsub>
 800cc54:	2200      	movs	r2, #0
 800cc56:	4b20      	ldr	r3, [pc, #128]	@ (800ccd8 <__ieee754_rem_pio2+0x3f0>)
 800cc58:	f7f3 fcb2 	bl	80005c0 <__aeabi_dmul>
 800cc5c:	460f      	mov	r7, r1
 800cc5e:	4606      	mov	r6, r0
 800cc60:	f7f3 ff5e 	bl	8000b20 <__aeabi_d2iz>
 800cc64:	f7f3 fc42 	bl	80004ec <__aeabi_i2d>
 800cc68:	4602      	mov	r2, r0
 800cc6a:	460b      	mov	r3, r1
 800cc6c:	4630      	mov	r0, r6
 800cc6e:	4639      	mov	r1, r7
 800cc70:	2600      	movs	r6, #0
 800cc72:	2700      	movs	r7, #0
 800cc74:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cc78:	f7f3 faea 	bl	8000250 <__aeabi_dsub>
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	4b16      	ldr	r3, [pc, #88]	@ (800ccd8 <__ieee754_rem_pio2+0x3f0>)
 800cc80:	f7f3 fc9e 	bl	80005c0 <__aeabi_dmul>
 800cc84:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800cc88:	4632      	mov	r2, r6
 800cc8a:	463b      	mov	r3, r7
 800cc8c:	46c2      	mov	sl, r8
 800cc8e:	f108 38ff 	add.w	r8, r8, #4294967295
 800cc92:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800cc96:	f7f3 fefb 	bl	8000a90 <__aeabi_dcmpeq>
 800cc9a:	2800      	cmp	r0, #0
 800cc9c:	d1f4      	bne.n	800cc88 <__ieee754_rem_pio2+0x3a0>
 800cc9e:	4b0f      	ldr	r3, [pc, #60]	@ (800ccdc <__ieee754_rem_pio2+0x3f4>)
 800cca0:	462a      	mov	r2, r5
 800cca2:	4621      	mov	r1, r4
 800cca4:	a806      	add	r0, sp, #24
 800cca6:	9301      	str	r3, [sp, #4]
 800cca8:	2302      	movs	r3, #2
 800ccaa:	9300      	str	r3, [sp, #0]
 800ccac:	4653      	mov	r3, sl
 800ccae:	f000 fda3 	bl	800d7f8 <__kernel_rem_pio2>
 800ccb2:	9b04      	ldr	r3, [sp, #16]
 800ccb4:	4605      	mov	r5, r0
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	f6bf ae53 	bge.w	800c962 <__ieee754_rem_pio2+0x7a>
 800ccbc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ccc0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ccc4:	e9c4 2300 	strd	r2, r3, [r4]
 800ccc8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800cccc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ccd0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ccd4:	e740      	b.n	800cb58 <__ieee754_rem_pio2+0x270>
 800ccd6:	bf00      	nop
 800ccd8:	41700000 	.word	0x41700000
 800ccdc:	0800e6d8 	.word	0x0800e6d8

0800cce0 <atan>:
 800cce0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce4:	ec55 4b10 	vmov	r4, r5, d0
 800cce8:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800ccec:	4bbe      	ldr	r3, [pc, #760]	@ (800cfe8 <atan+0x308>)
 800ccee:	46ab      	mov	fp, r5
 800ccf0:	429e      	cmp	r6, r3
 800ccf2:	d918      	bls.n	800cd26 <atan+0x46>
 800ccf4:	4bbd      	ldr	r3, [pc, #756]	@ (800cfec <atan+0x30c>)
 800ccf6:	429e      	cmp	r6, r3
 800ccf8:	d801      	bhi.n	800ccfe <atan+0x1e>
 800ccfa:	d109      	bne.n	800cd10 <atan+0x30>
 800ccfc:	b144      	cbz	r4, 800cd10 <atan+0x30>
 800ccfe:	4622      	mov	r2, r4
 800cd00:	462b      	mov	r3, r5
 800cd02:	4620      	mov	r0, r4
 800cd04:	4629      	mov	r1, r5
 800cd06:	f7f3 faa5 	bl	8000254 <__adddf3>
 800cd0a:	4604      	mov	r4, r0
 800cd0c:	460d      	mov	r5, r1
 800cd0e:	e006      	b.n	800cd1e <atan+0x3e>
 800cd10:	f1bb 0f00 	cmp.w	fp, #0
 800cd14:	f340 812b 	ble.w	800cf6e <atan+0x28e>
 800cd18:	a597      	add	r5, pc, #604	@ (adr r5, 800cf78 <atan+0x298>)
 800cd1a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cd1e:	ec45 4b10 	vmov	d0, r4, r5
 800cd22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd26:	4bb2      	ldr	r3, [pc, #712]	@ (800cff0 <atan+0x310>)
 800cd28:	429e      	cmp	r6, r3
 800cd2a:	d813      	bhi.n	800cd54 <atan+0x74>
 800cd2c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800cd30:	429e      	cmp	r6, r3
 800cd32:	d80c      	bhi.n	800cd4e <atan+0x6e>
 800cd34:	4620      	mov	r0, r4
 800cd36:	4629      	mov	r1, r5
 800cd38:	a391      	add	r3, pc, #580	@ (adr r3, 800cf80 <atan+0x2a0>)
 800cd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd3e:	f7f3 fa89 	bl	8000254 <__adddf3>
 800cd42:	2200      	movs	r2, #0
 800cd44:	4bab      	ldr	r3, [pc, #684]	@ (800cff4 <atan+0x314>)
 800cd46:	f7f3 fecb 	bl	8000ae0 <__aeabi_dcmpgt>
 800cd4a:	2800      	cmp	r0, #0
 800cd4c:	d1e7      	bne.n	800cd1e <atan+0x3e>
 800cd4e:	f04f 3aff 	mov.w	sl, #4294967295
 800cd52:	e029      	b.n	800cda8 <atan+0xc8>
 800cd54:	f7fe fb78 	bl	800b448 <fabs>
 800cd58:	4ba7      	ldr	r3, [pc, #668]	@ (800cff8 <atan+0x318>)
 800cd5a:	429e      	cmp	r6, r3
 800cd5c:	ec55 4b10 	vmov	r4, r5, d0
 800cd60:	f200 80bc 	bhi.w	800cedc <atan+0x1fc>
 800cd64:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800cd68:	429e      	cmp	r6, r3
 800cd6a:	f200 809e 	bhi.w	800ceaa <atan+0x1ca>
 800cd6e:	4622      	mov	r2, r4
 800cd70:	462b      	mov	r3, r5
 800cd72:	4620      	mov	r0, r4
 800cd74:	4629      	mov	r1, r5
 800cd76:	f7f3 fa6d 	bl	8000254 <__adddf3>
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	4b9d      	ldr	r3, [pc, #628]	@ (800cff4 <atan+0x314>)
 800cd7e:	f04f 0a00 	mov.w	sl, #0
 800cd82:	f7f3 fa65 	bl	8000250 <__aeabi_dsub>
 800cd86:	4606      	mov	r6, r0
 800cd88:	460f      	mov	r7, r1
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cd90:	4620      	mov	r0, r4
 800cd92:	4629      	mov	r1, r5
 800cd94:	f7f3 fa5e 	bl	8000254 <__adddf3>
 800cd98:	4602      	mov	r2, r0
 800cd9a:	460b      	mov	r3, r1
 800cd9c:	4630      	mov	r0, r6
 800cd9e:	4639      	mov	r1, r7
 800cda0:	f7f3 fd38 	bl	8000814 <__aeabi_ddiv>
 800cda4:	4604      	mov	r4, r0
 800cda6:	460d      	mov	r5, r1
 800cda8:	4622      	mov	r2, r4
 800cdaa:	462b      	mov	r3, r5
 800cdac:	4620      	mov	r0, r4
 800cdae:	4629      	mov	r1, r5
 800cdb0:	f7f3 fc06 	bl	80005c0 <__aeabi_dmul>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	4680      	mov	r8, r0
 800cdba:	4689      	mov	r9, r1
 800cdbc:	f7f3 fc00 	bl	80005c0 <__aeabi_dmul>
 800cdc0:	4606      	mov	r6, r0
 800cdc2:	460f      	mov	r7, r1
 800cdc4:	a370      	add	r3, pc, #448	@ (adr r3, 800cf88 <atan+0x2a8>)
 800cdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdca:	f7f3 fbf9 	bl	80005c0 <__aeabi_dmul>
 800cdce:	a370      	add	r3, pc, #448	@ (adr r3, 800cf90 <atan+0x2b0>)
 800cdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd4:	f7f3 fa3e 	bl	8000254 <__adddf3>
 800cdd8:	4632      	mov	r2, r6
 800cdda:	463b      	mov	r3, r7
 800cddc:	f7f3 fbf0 	bl	80005c0 <__aeabi_dmul>
 800cde0:	a36d      	add	r3, pc, #436	@ (adr r3, 800cf98 <atan+0x2b8>)
 800cde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde6:	f7f3 fa35 	bl	8000254 <__adddf3>
 800cdea:	4632      	mov	r2, r6
 800cdec:	463b      	mov	r3, r7
 800cdee:	f7f3 fbe7 	bl	80005c0 <__aeabi_dmul>
 800cdf2:	a36b      	add	r3, pc, #428	@ (adr r3, 800cfa0 <atan+0x2c0>)
 800cdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf8:	f7f3 fa2c 	bl	8000254 <__adddf3>
 800cdfc:	4632      	mov	r2, r6
 800cdfe:	463b      	mov	r3, r7
 800ce00:	f7f3 fbde 	bl	80005c0 <__aeabi_dmul>
 800ce04:	a368      	add	r3, pc, #416	@ (adr r3, 800cfa8 <atan+0x2c8>)
 800ce06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce0a:	f7f3 fa23 	bl	8000254 <__adddf3>
 800ce0e:	4632      	mov	r2, r6
 800ce10:	463b      	mov	r3, r7
 800ce12:	f7f3 fbd5 	bl	80005c0 <__aeabi_dmul>
 800ce16:	a366      	add	r3, pc, #408	@ (adr r3, 800cfb0 <atan+0x2d0>)
 800ce18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce1c:	f7f3 fa1a 	bl	8000254 <__adddf3>
 800ce20:	4642      	mov	r2, r8
 800ce22:	464b      	mov	r3, r9
 800ce24:	f7f3 fbcc 	bl	80005c0 <__aeabi_dmul>
 800ce28:	4680      	mov	r8, r0
 800ce2a:	4689      	mov	r9, r1
 800ce2c:	4630      	mov	r0, r6
 800ce2e:	4639      	mov	r1, r7
 800ce30:	a361      	add	r3, pc, #388	@ (adr r3, 800cfb8 <atan+0x2d8>)
 800ce32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce36:	f7f3 fbc3 	bl	80005c0 <__aeabi_dmul>
 800ce3a:	a361      	add	r3, pc, #388	@ (adr r3, 800cfc0 <atan+0x2e0>)
 800ce3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce40:	f7f3 fa06 	bl	8000250 <__aeabi_dsub>
 800ce44:	4632      	mov	r2, r6
 800ce46:	463b      	mov	r3, r7
 800ce48:	f7f3 fbba 	bl	80005c0 <__aeabi_dmul>
 800ce4c:	a35e      	add	r3, pc, #376	@ (adr r3, 800cfc8 <atan+0x2e8>)
 800ce4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce52:	f7f3 f9fd 	bl	8000250 <__aeabi_dsub>
 800ce56:	4632      	mov	r2, r6
 800ce58:	463b      	mov	r3, r7
 800ce5a:	f7f3 fbb1 	bl	80005c0 <__aeabi_dmul>
 800ce5e:	a35c      	add	r3, pc, #368	@ (adr r3, 800cfd0 <atan+0x2f0>)
 800ce60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce64:	f7f3 f9f4 	bl	8000250 <__aeabi_dsub>
 800ce68:	4632      	mov	r2, r6
 800ce6a:	463b      	mov	r3, r7
 800ce6c:	f7f3 fba8 	bl	80005c0 <__aeabi_dmul>
 800ce70:	a359      	add	r3, pc, #356	@ (adr r3, 800cfd8 <atan+0x2f8>)
 800ce72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce76:	f7f3 f9eb 	bl	8000250 <__aeabi_dsub>
 800ce7a:	4632      	mov	r2, r6
 800ce7c:	463b      	mov	r3, r7
 800ce7e:	f7f3 fb9f 	bl	80005c0 <__aeabi_dmul>
 800ce82:	4602      	mov	r2, r0
 800ce84:	460b      	mov	r3, r1
 800ce86:	4640      	mov	r0, r8
 800ce88:	4649      	mov	r1, r9
 800ce8a:	f7f3 f9e3 	bl	8000254 <__adddf3>
 800ce8e:	4622      	mov	r2, r4
 800ce90:	462b      	mov	r3, r5
 800ce92:	f7f3 fb95 	bl	80005c0 <__aeabi_dmul>
 800ce96:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	d148      	bne.n	800cf32 <atan+0x252>
 800cea0:	4620      	mov	r0, r4
 800cea2:	4629      	mov	r1, r5
 800cea4:	f7f3 f9d4 	bl	8000250 <__aeabi_dsub>
 800cea8:	e72f      	b.n	800cd0a <atan+0x2a>
 800ceaa:	2200      	movs	r2, #0
 800ceac:	4b51      	ldr	r3, [pc, #324]	@ (800cff4 <atan+0x314>)
 800ceae:	4620      	mov	r0, r4
 800ceb0:	4629      	mov	r1, r5
 800ceb2:	f7f3 f9cd 	bl	8000250 <__aeabi_dsub>
 800ceb6:	4606      	mov	r6, r0
 800ceb8:	460f      	mov	r7, r1
 800ceba:	2200      	movs	r2, #0
 800cebc:	4b4d      	ldr	r3, [pc, #308]	@ (800cff4 <atan+0x314>)
 800cebe:	4620      	mov	r0, r4
 800cec0:	4629      	mov	r1, r5
 800cec2:	f04f 0a01 	mov.w	sl, #1
 800cec6:	f7f3 f9c5 	bl	8000254 <__adddf3>
 800ceca:	4602      	mov	r2, r0
 800cecc:	460b      	mov	r3, r1
 800cece:	4630      	mov	r0, r6
 800ced0:	4639      	mov	r1, r7
 800ced2:	f7f3 fc9f 	bl	8000814 <__aeabi_ddiv>
 800ced6:	4604      	mov	r4, r0
 800ced8:	460d      	mov	r5, r1
 800ceda:	e765      	b.n	800cda8 <atan+0xc8>
 800cedc:	4b47      	ldr	r3, [pc, #284]	@ (800cffc <atan+0x31c>)
 800cede:	429e      	cmp	r6, r3
 800cee0:	d21c      	bcs.n	800cf1c <atan+0x23c>
 800cee2:	2200      	movs	r2, #0
 800cee4:	4b46      	ldr	r3, [pc, #280]	@ (800d000 <atan+0x320>)
 800cee6:	4620      	mov	r0, r4
 800cee8:	4629      	mov	r1, r5
 800ceea:	f7f3 f9b1 	bl	8000250 <__aeabi_dsub>
 800ceee:	2200      	movs	r2, #0
 800cef0:	4606      	mov	r6, r0
 800cef2:	460f      	mov	r7, r1
 800cef4:	4b42      	ldr	r3, [pc, #264]	@ (800d000 <atan+0x320>)
 800cef6:	4620      	mov	r0, r4
 800cef8:	4629      	mov	r1, r5
 800cefa:	f04f 0a02 	mov.w	sl, #2
 800cefe:	f7f3 fb5f 	bl	80005c0 <__aeabi_dmul>
 800cf02:	2200      	movs	r2, #0
 800cf04:	4b3b      	ldr	r3, [pc, #236]	@ (800cff4 <atan+0x314>)
 800cf06:	f7f3 f9a5 	bl	8000254 <__adddf3>
 800cf0a:	4602      	mov	r2, r0
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	4630      	mov	r0, r6
 800cf10:	4639      	mov	r1, r7
 800cf12:	f7f3 fc7f 	bl	8000814 <__aeabi_ddiv>
 800cf16:	4604      	mov	r4, r0
 800cf18:	460d      	mov	r5, r1
 800cf1a:	e745      	b.n	800cda8 <atan+0xc8>
 800cf1c:	4622      	mov	r2, r4
 800cf1e:	462b      	mov	r3, r5
 800cf20:	2000      	movs	r0, #0
 800cf22:	4938      	ldr	r1, [pc, #224]	@ (800d004 <atan+0x324>)
 800cf24:	f7f3 fc76 	bl	8000814 <__aeabi_ddiv>
 800cf28:	f04f 0a03 	mov.w	sl, #3
 800cf2c:	4604      	mov	r4, r0
 800cf2e:	460d      	mov	r5, r1
 800cf30:	e73a      	b.n	800cda8 <atan+0xc8>
 800cf32:	4b35      	ldr	r3, [pc, #212]	@ (800d008 <atan+0x328>)
 800cf34:	4e35      	ldr	r6, [pc, #212]	@ (800d00c <atan+0x32c>)
 800cf36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cf3a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf42:	f7f3 f985 	bl	8000250 <__aeabi_dsub>
 800cf46:	4622      	mov	r2, r4
 800cf48:	462b      	mov	r3, r5
 800cf4a:	f7f3 f981 	bl	8000250 <__aeabi_dsub>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	460b      	mov	r3, r1
 800cf52:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cf56:	f7f3 f97b 	bl	8000250 <__aeabi_dsub>
 800cf5a:	f1bb 0f00 	cmp.w	fp, #0
 800cf5e:	4604      	mov	r4, r0
 800cf60:	460d      	mov	r5, r1
 800cf62:	f6bf aedc 	bge.w	800cd1e <atan+0x3e>
 800cf66:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cf6a:	461d      	mov	r5, r3
 800cf6c:	e6d7      	b.n	800cd1e <atan+0x3e>
 800cf6e:	a51c      	add	r5, pc, #112	@ (adr r5, 800cfe0 <atan+0x300>)
 800cf70:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cf74:	e6d3      	b.n	800cd1e <atan+0x3e>
 800cf76:	bf00      	nop
 800cf78:	54442d18 	.word	0x54442d18
 800cf7c:	3ff921fb 	.word	0x3ff921fb
 800cf80:	8800759c 	.word	0x8800759c
 800cf84:	7e37e43c 	.word	0x7e37e43c
 800cf88:	e322da11 	.word	0xe322da11
 800cf8c:	3f90ad3a 	.word	0x3f90ad3a
 800cf90:	24760deb 	.word	0x24760deb
 800cf94:	3fa97b4b 	.word	0x3fa97b4b
 800cf98:	a0d03d51 	.word	0xa0d03d51
 800cf9c:	3fb10d66 	.word	0x3fb10d66
 800cfa0:	c54c206e 	.word	0xc54c206e
 800cfa4:	3fb745cd 	.word	0x3fb745cd
 800cfa8:	920083ff 	.word	0x920083ff
 800cfac:	3fc24924 	.word	0x3fc24924
 800cfb0:	5555550d 	.word	0x5555550d
 800cfb4:	3fd55555 	.word	0x3fd55555
 800cfb8:	2c6a6c2f 	.word	0x2c6a6c2f
 800cfbc:	bfa2b444 	.word	0xbfa2b444
 800cfc0:	52defd9a 	.word	0x52defd9a
 800cfc4:	3fadde2d 	.word	0x3fadde2d
 800cfc8:	af749a6d 	.word	0xaf749a6d
 800cfcc:	3fb3b0f2 	.word	0x3fb3b0f2
 800cfd0:	fe231671 	.word	0xfe231671
 800cfd4:	3fbc71c6 	.word	0x3fbc71c6
 800cfd8:	9998ebc4 	.word	0x9998ebc4
 800cfdc:	3fc99999 	.word	0x3fc99999
 800cfe0:	54442d18 	.word	0x54442d18
 800cfe4:	bff921fb 	.word	0xbff921fb
 800cfe8:	440fffff 	.word	0x440fffff
 800cfec:	7ff00000 	.word	0x7ff00000
 800cff0:	3fdbffff 	.word	0x3fdbffff
 800cff4:	3ff00000 	.word	0x3ff00000
 800cff8:	3ff2ffff 	.word	0x3ff2ffff
 800cffc:	40038000 	.word	0x40038000
 800d000:	3ff80000 	.word	0x3ff80000
 800d004:	bff00000 	.word	0xbff00000
 800d008:	0800e7e0 	.word	0x0800e7e0
 800d00c:	0800e800 	.word	0x0800e800

0800d010 <__ieee754_asinf>:
 800d010:	b538      	push	{r3, r4, r5, lr}
 800d012:	ee10 5a10 	vmov	r5, s0
 800d016:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800d01a:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800d01e:	ed2d 8b04 	vpush	{d8-d9}
 800d022:	d10c      	bne.n	800d03e <__ieee754_asinf+0x2e>
 800d024:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 800d19c <__ieee754_asinf+0x18c>
 800d028:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800d1a0 <__ieee754_asinf+0x190>
 800d02c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d030:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d034:	eeb0 0a67 	vmov.f32	s0, s15
 800d038:	ecbd 8b04 	vpop	{d8-d9}
 800d03c:	bd38      	pop	{r3, r4, r5, pc}
 800d03e:	d904      	bls.n	800d04a <__ieee754_asinf+0x3a>
 800d040:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d044:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d048:	e7f6      	b.n	800d038 <__ieee754_asinf+0x28>
 800d04a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800d04e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800d052:	d20b      	bcs.n	800d06c <__ieee754_asinf+0x5c>
 800d054:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800d058:	d252      	bcs.n	800d100 <__ieee754_asinf+0xf0>
 800d05a:	eddf 7a52 	vldr	s15, [pc, #328]	@ 800d1a4 <__ieee754_asinf+0x194>
 800d05e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d062:	eef4 7ae8 	vcmpe.f32	s15, s17
 800d066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d06a:	dce5      	bgt.n	800d038 <__ieee754_asinf+0x28>
 800d06c:	f7fe fa40 	bl	800b4f0 <fabsf>
 800d070:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d074:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800d078:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800d1a8 <__ieee754_asinf+0x198>
 800d07c:	ed9f 9a4b 	vldr	s18, [pc, #300]	@ 800d1ac <__ieee754_asinf+0x19c>
 800d080:	ee28 8a27 	vmul.f32	s16, s16, s15
 800d084:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 800d1b0 <__ieee754_asinf+0x1a0>
 800d088:	eea8 7a27 	vfma.f32	s14, s16, s15
 800d08c:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800d1b4 <__ieee754_asinf+0x1a4>
 800d090:	eeb0 0a48 	vmov.f32	s0, s16
 800d094:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d098:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800d1b8 <__ieee754_asinf+0x1a8>
 800d09c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800d0a0:	eddf 7a46 	vldr	s15, [pc, #280]	@ 800d1bc <__ieee754_asinf+0x1ac>
 800d0a4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d0a8:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800d1c0 <__ieee754_asinf+0x1b0>
 800d0ac:	eea7 9a88 	vfma.f32	s18, s15, s16
 800d0b0:	eddf 7a44 	vldr	s15, [pc, #272]	@ 800d1c4 <__ieee754_asinf+0x1b4>
 800d0b4:	eee8 7a07 	vfma.f32	s15, s16, s14
 800d0b8:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 800d1c8 <__ieee754_asinf+0x1b8>
 800d0bc:	ee29 9a08 	vmul.f32	s18, s18, s16
 800d0c0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800d0c4:	eddf 7a41 	vldr	s15, [pc, #260]	@ 800d1cc <__ieee754_asinf+0x1bc>
 800d0c8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d0cc:	eee7 8a88 	vfma.f32	s17, s15, s16
 800d0d0:	f7fe fa30 	bl	800b534 <__ieee754_sqrtf>
 800d0d4:	4b3e      	ldr	r3, [pc, #248]	@ (800d1d0 <__ieee754_asinf+0x1c0>)
 800d0d6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d0da:	429c      	cmp	r4, r3
 800d0dc:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800d0e0:	d93d      	bls.n	800d15e <__ieee754_asinf+0x14e>
 800d0e2:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 800d1d4 <__ieee754_asinf+0x1c4>
 800d0e6:	eea0 0a06 	vfma.f32	s0, s0, s12
 800d0ea:	eee0 7a26 	vfma.f32	s15, s0, s13
 800d0ee:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800d1a0 <__ieee754_asinf+0x190>
 800d0f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d0f6:	2d00      	cmp	r5, #0
 800d0f8:	bfd8      	it	le
 800d0fa:	eeb1 0a40 	vnegle.f32	s0, s0
 800d0fe:	e79b      	b.n	800d038 <__ieee754_asinf+0x28>
 800d100:	ee60 7a00 	vmul.f32	s15, s0, s0
 800d104:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800d1b0 <__ieee754_asinf+0x1a0>
 800d108:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800d1a8 <__ieee754_asinf+0x198>
 800d10c:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 800d1c0 <__ieee754_asinf+0x1b0>
 800d110:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800d114:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800d1b4 <__ieee754_asinf+0x1a4>
 800d118:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d11c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800d1b8 <__ieee754_asinf+0x1a8>
 800d120:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d124:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800d1bc <__ieee754_asinf+0x1ac>
 800d128:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d12c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800d1ac <__ieee754_asinf+0x19c>
 800d130:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d134:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800d1c4 <__ieee754_asinf+0x1b4>
 800d138:	eee7 6a86 	vfma.f32	s13, s15, s12
 800d13c:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800d1c8 <__ieee754_asinf+0x1b8>
 800d140:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d144:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800d148:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800d1cc <__ieee754_asinf+0x1bc>
 800d14c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800d150:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800d154:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800d158:	eea0 0a27 	vfma.f32	s0, s0, s15
 800d15c:	e76c      	b.n	800d038 <__ieee754_asinf+0x28>
 800d15e:	ee10 3a10 	vmov	r3, s0
 800d162:	ee70 5a00 	vadd.f32	s11, s0, s0
 800d166:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800d19c <__ieee754_asinf+0x18c>
 800d16a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800d16e:	f023 030f 	bic.w	r3, r3, #15
 800d172:	ee07 3a10 	vmov	s14, r3
 800d176:	eea7 8a47 	vfms.f32	s16, s14, s14
 800d17a:	ee30 0a07 	vadd.f32	s0, s0, s14
 800d17e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800d182:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800d1d8 <__ieee754_asinf+0x1c8>
 800d186:	eee5 7a66 	vfms.f32	s15, s10, s13
 800d18a:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800d18e:	eeb0 6a40 	vmov.f32	s12, s0
 800d192:	eea7 6a66 	vfms.f32	s12, s14, s13
 800d196:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d19a:	e7aa      	b.n	800d0f2 <__ieee754_asinf+0xe2>
 800d19c:	b33bbd2e 	.word	0xb33bbd2e
 800d1a0:	3fc90fdb 	.word	0x3fc90fdb
 800d1a4:	7149f2ca 	.word	0x7149f2ca
 800d1a8:	3a4f7f04 	.word	0x3a4f7f04
 800d1ac:	3e2aaaab 	.word	0x3e2aaaab
 800d1b0:	3811ef08 	.word	0x3811ef08
 800d1b4:	bd241146 	.word	0xbd241146
 800d1b8:	3e4e0aa8 	.word	0x3e4e0aa8
 800d1bc:	bea6b090 	.word	0xbea6b090
 800d1c0:	3d9dc62e 	.word	0x3d9dc62e
 800d1c4:	bf303361 	.word	0xbf303361
 800d1c8:	4001572d 	.word	0x4001572d
 800d1cc:	c019d139 	.word	0xc019d139
 800d1d0:	3f799999 	.word	0x3f799999
 800d1d4:	333bbd2e 	.word	0x333bbd2e
 800d1d8:	3f490fdb 	.word	0x3f490fdb

0800d1dc <__ieee754_atan2f>:
 800d1dc:	ee10 2a90 	vmov	r2, s1
 800d1e0:	eef0 7a40 	vmov.f32	s15, s0
 800d1e4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800d1e8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d1ec:	b510      	push	{r4, lr}
 800d1ee:	d806      	bhi.n	800d1fe <__ieee754_atan2f+0x22>
 800d1f0:	ee10 0a10 	vmov	r0, s0
 800d1f4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800d1f8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d1fc:	d904      	bls.n	800d208 <__ieee754_atan2f+0x2c>
 800d1fe:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d202:	eeb0 0a67 	vmov.f32	s0, s15
 800d206:	bd10      	pop	{r4, pc}
 800d208:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800d20c:	d103      	bne.n	800d216 <__ieee754_atan2f+0x3a>
 800d20e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d212:	f000 b881 	b.w	800d318 <atanf>
 800d216:	1794      	asrs	r4, r2, #30
 800d218:	f004 0402 	and.w	r4, r4, #2
 800d21c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800d220:	b93b      	cbnz	r3, 800d232 <__ieee754_atan2f+0x56>
 800d222:	2c02      	cmp	r4, #2
 800d224:	d05c      	beq.n	800d2e0 <__ieee754_atan2f+0x104>
 800d226:	2c03      	cmp	r4, #3
 800d228:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800d2f4 <__ieee754_atan2f+0x118>
 800d22c:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800d230:	e7e7      	b.n	800d202 <__ieee754_atan2f+0x26>
 800d232:	b939      	cbnz	r1, 800d244 <__ieee754_atan2f+0x68>
 800d234:	2800      	cmp	r0, #0
 800d236:	eddf 7a30 	vldr	s15, [pc, #192]	@ 800d2f8 <__ieee754_atan2f+0x11c>
 800d23a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800d2fc <__ieee754_atan2f+0x120>
 800d23e:	fe67 7a87 	vselge.f32	s15, s15, s14
 800d242:	e7de      	b.n	800d202 <__ieee754_atan2f+0x26>
 800d244:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d248:	d110      	bne.n	800d26c <__ieee754_atan2f+0x90>
 800d24a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d24e:	f104 34ff 	add.w	r4, r4, #4294967295
 800d252:	d107      	bne.n	800d264 <__ieee754_atan2f+0x88>
 800d254:	2c02      	cmp	r4, #2
 800d256:	d846      	bhi.n	800d2e6 <__ieee754_atan2f+0x10a>
 800d258:	4b29      	ldr	r3, [pc, #164]	@ (800d300 <__ieee754_atan2f+0x124>)
 800d25a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d25e:	edd3 7a00 	vldr	s15, [r3]
 800d262:	e7ce      	b.n	800d202 <__ieee754_atan2f+0x26>
 800d264:	2c02      	cmp	r4, #2
 800d266:	d841      	bhi.n	800d2ec <__ieee754_atan2f+0x110>
 800d268:	4b26      	ldr	r3, [pc, #152]	@ (800d304 <__ieee754_atan2f+0x128>)
 800d26a:	e7f6      	b.n	800d25a <__ieee754_atan2f+0x7e>
 800d26c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d270:	d0e0      	beq.n	800d234 <__ieee754_atan2f+0x58>
 800d272:	1a5b      	subs	r3, r3, r1
 800d274:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800d278:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800d27c:	da1a      	bge.n	800d2b4 <__ieee754_atan2f+0xd8>
 800d27e:	2a00      	cmp	r2, #0
 800d280:	da01      	bge.n	800d286 <__ieee754_atan2f+0xaa>
 800d282:	313c      	adds	r1, #60	@ 0x3c
 800d284:	db19      	blt.n	800d2ba <__ieee754_atan2f+0xde>
 800d286:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800d28a:	f7fe f931 	bl	800b4f0 <fabsf>
 800d28e:	f000 f843 	bl	800d318 <atanf>
 800d292:	eef0 7a40 	vmov.f32	s15, s0
 800d296:	2c01      	cmp	r4, #1
 800d298:	d012      	beq.n	800d2c0 <__ieee754_atan2f+0xe4>
 800d29a:	2c02      	cmp	r4, #2
 800d29c:	d017      	beq.n	800d2ce <__ieee754_atan2f+0xf2>
 800d29e:	2c00      	cmp	r4, #0
 800d2a0:	d0af      	beq.n	800d202 <__ieee754_atan2f+0x26>
 800d2a2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800d308 <__ieee754_atan2f+0x12c>
 800d2a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d2aa:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800d30c <__ieee754_atan2f+0x130>
 800d2ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d2b2:	e7a6      	b.n	800d202 <__ieee754_atan2f+0x26>
 800d2b4:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800d2f8 <__ieee754_atan2f+0x11c>
 800d2b8:	e7ed      	b.n	800d296 <__ieee754_atan2f+0xba>
 800d2ba:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800d310 <__ieee754_atan2f+0x134>
 800d2be:	e7ea      	b.n	800d296 <__ieee754_atan2f+0xba>
 800d2c0:	ee17 3a90 	vmov	r3, s15
 800d2c4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d2c8:	ee07 3a90 	vmov	s15, r3
 800d2cc:	e799      	b.n	800d202 <__ieee754_atan2f+0x26>
 800d2ce:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800d308 <__ieee754_atan2f+0x12c>
 800d2d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d2d6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800d30c <__ieee754_atan2f+0x130>
 800d2da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2de:	e790      	b.n	800d202 <__ieee754_atan2f+0x26>
 800d2e0:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800d30c <__ieee754_atan2f+0x130>
 800d2e4:	e78d      	b.n	800d202 <__ieee754_atan2f+0x26>
 800d2e6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800d314 <__ieee754_atan2f+0x138>
 800d2ea:	e78a      	b.n	800d202 <__ieee754_atan2f+0x26>
 800d2ec:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800d310 <__ieee754_atan2f+0x134>
 800d2f0:	e787      	b.n	800d202 <__ieee754_atan2f+0x26>
 800d2f2:	bf00      	nop
 800d2f4:	c0490fdb 	.word	0xc0490fdb
 800d2f8:	3fc90fdb 	.word	0x3fc90fdb
 800d2fc:	bfc90fdb 	.word	0xbfc90fdb
 800d300:	0800e82c 	.word	0x0800e82c
 800d304:	0800e820 	.word	0x0800e820
 800d308:	33bbbd2e 	.word	0x33bbbd2e
 800d30c:	40490fdb 	.word	0x40490fdb
 800d310:	00000000 	.word	0x00000000
 800d314:	3f490fdb 	.word	0x3f490fdb

0800d318 <atanf>:
 800d318:	b538      	push	{r3, r4, r5, lr}
 800d31a:	ee10 5a10 	vmov	r5, s0
 800d31e:	eef0 7a40 	vmov.f32	s15, s0
 800d322:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800d326:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800d32a:	d30f      	bcc.n	800d34c <atanf+0x34>
 800d32c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800d330:	d904      	bls.n	800d33c <atanf+0x24>
 800d332:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d336:	eeb0 0a67 	vmov.f32	s0, s15
 800d33a:	bd38      	pop	{r3, r4, r5, pc}
 800d33c:	2d00      	cmp	r5, #0
 800d33e:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800d474 <atanf+0x15c>
 800d342:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800d478 <atanf+0x160>
 800d346:	fe77 7a27 	vselgt.f32	s15, s14, s15
 800d34a:	e7f4      	b.n	800d336 <atanf+0x1e>
 800d34c:	4b4b      	ldr	r3, [pc, #300]	@ (800d47c <atanf+0x164>)
 800d34e:	429c      	cmp	r4, r3
 800d350:	d810      	bhi.n	800d374 <atanf+0x5c>
 800d352:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800d356:	d20a      	bcs.n	800d36e <atanf+0x56>
 800d358:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800d480 <atanf+0x168>
 800d35c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d360:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d364:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d36c:	dce3      	bgt.n	800d336 <atanf+0x1e>
 800d36e:	f04f 33ff 	mov.w	r3, #4294967295
 800d372:	e013      	b.n	800d39c <atanf+0x84>
 800d374:	f7fe f8bc 	bl	800b4f0 <fabsf>
 800d378:	4b42      	ldr	r3, [pc, #264]	@ (800d484 <atanf+0x16c>)
 800d37a:	429c      	cmp	r4, r3
 800d37c:	d84f      	bhi.n	800d41e <atanf+0x106>
 800d37e:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800d382:	429c      	cmp	r4, r3
 800d384:	d841      	bhi.n	800d40a <atanf+0xf2>
 800d386:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800d38a:	2300      	movs	r3, #0
 800d38c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d390:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d394:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d398:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d39c:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800d488 <atanf+0x170>
 800d3a0:	1c5a      	adds	r2, r3, #1
 800d3a2:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800d48c <atanf+0x174>
 800d3a6:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800d490 <atanf+0x178>
 800d3aa:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800d3ae:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d3b2:	eee6 5a87 	vfma.f32	s11, s13, s14
 800d3b6:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800d494 <atanf+0x17c>
 800d3ba:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d3be:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800d498 <atanf+0x180>
 800d3c2:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d3c6:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800d49c <atanf+0x184>
 800d3ca:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d3ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d4a0 <atanf+0x188>
 800d3d2:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d3d6:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800d4a4 <atanf+0x18c>
 800d3da:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d3de:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800d4a8 <atanf+0x190>
 800d3e2:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d3e6:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 800d4ac <atanf+0x194>
 800d3ea:	eea7 5a26 	vfma.f32	s10, s14, s13
 800d3ee:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800d4b0 <atanf+0x198>
 800d3f2:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d3f6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d3fa:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d3fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d402:	d121      	bne.n	800d448 <atanf+0x130>
 800d404:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d408:	e795      	b.n	800d336 <atanf+0x1e>
 800d40a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d40e:	2301      	movs	r3, #1
 800d410:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d414:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d418:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d41c:	e7be      	b.n	800d39c <atanf+0x84>
 800d41e:	4b25      	ldr	r3, [pc, #148]	@ (800d4b4 <atanf+0x19c>)
 800d420:	429c      	cmp	r4, r3
 800d422:	d80b      	bhi.n	800d43c <atanf+0x124>
 800d424:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800d428:	2302      	movs	r3, #2
 800d42a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d42e:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d432:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d43a:	e7af      	b.n	800d39c <atanf+0x84>
 800d43c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d440:	2303      	movs	r3, #3
 800d442:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d446:	e7a9      	b.n	800d39c <atanf+0x84>
 800d448:	4a1b      	ldr	r2, [pc, #108]	@ (800d4b8 <atanf+0x1a0>)
 800d44a:	2d00      	cmp	r5, #0
 800d44c:	491b      	ldr	r1, [pc, #108]	@ (800d4bc <atanf+0x1a4>)
 800d44e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d452:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d456:	edd3 6a00 	vldr	s13, [r3]
 800d45a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d45e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d462:	edd2 7a00 	vldr	s15, [r2]
 800d466:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d46a:	bfb8      	it	lt
 800d46c:	eef1 7a67 	vneglt.f32	s15, s15
 800d470:	e761      	b.n	800d336 <atanf+0x1e>
 800d472:	bf00      	nop
 800d474:	bfc90fdb 	.word	0xbfc90fdb
 800d478:	3fc90fdb 	.word	0x3fc90fdb
 800d47c:	3edfffff 	.word	0x3edfffff
 800d480:	7149f2ca 	.word	0x7149f2ca
 800d484:	3f97ffff 	.word	0x3f97ffff
 800d488:	3c8569d7 	.word	0x3c8569d7
 800d48c:	3d4bda59 	.word	0x3d4bda59
 800d490:	bd6ef16b 	.word	0xbd6ef16b
 800d494:	3d886b35 	.word	0x3d886b35
 800d498:	3dba2e6e 	.word	0x3dba2e6e
 800d49c:	3e124925 	.word	0x3e124925
 800d4a0:	3eaaaaab 	.word	0x3eaaaaab
 800d4a4:	bd15a221 	.word	0xbd15a221
 800d4a8:	bd9d8795 	.word	0xbd9d8795
 800d4ac:	bde38e38 	.word	0xbde38e38
 800d4b0:	be4ccccd 	.word	0xbe4ccccd
 800d4b4:	401bffff 	.word	0x401bffff
 800d4b8:	0800e848 	.word	0x0800e848
 800d4bc:	0800e838 	.word	0x0800e838

0800d4c0 <scalbn>:
 800d4c0:	b570      	push	{r4, r5, r6, lr}
 800d4c2:	ec55 4b10 	vmov	r4, r5, d0
 800d4c6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d4ca:	4606      	mov	r6, r0
 800d4cc:	462b      	mov	r3, r5
 800d4ce:	b991      	cbnz	r1, 800d4f6 <scalbn+0x36>
 800d4d0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d4d4:	4323      	orrs	r3, r4
 800d4d6:	d03d      	beq.n	800d554 <scalbn+0x94>
 800d4d8:	4b35      	ldr	r3, [pc, #212]	@ (800d5b0 <scalbn+0xf0>)
 800d4da:	4620      	mov	r0, r4
 800d4dc:	4629      	mov	r1, r5
 800d4de:	2200      	movs	r2, #0
 800d4e0:	f7f3 f86e 	bl	80005c0 <__aeabi_dmul>
 800d4e4:	4b33      	ldr	r3, [pc, #204]	@ (800d5b4 <scalbn+0xf4>)
 800d4e6:	4604      	mov	r4, r0
 800d4e8:	460d      	mov	r5, r1
 800d4ea:	429e      	cmp	r6, r3
 800d4ec:	da0f      	bge.n	800d50e <scalbn+0x4e>
 800d4ee:	a328      	add	r3, pc, #160	@ (adr r3, 800d590 <scalbn+0xd0>)
 800d4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f4:	e01e      	b.n	800d534 <scalbn+0x74>
 800d4f6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d4fa:	4291      	cmp	r1, r2
 800d4fc:	d10b      	bne.n	800d516 <scalbn+0x56>
 800d4fe:	4622      	mov	r2, r4
 800d500:	4620      	mov	r0, r4
 800d502:	4629      	mov	r1, r5
 800d504:	f7f2 fea6 	bl	8000254 <__adddf3>
 800d508:	4604      	mov	r4, r0
 800d50a:	460d      	mov	r5, r1
 800d50c:	e022      	b.n	800d554 <scalbn+0x94>
 800d50e:	460b      	mov	r3, r1
 800d510:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d514:	3936      	subs	r1, #54	@ 0x36
 800d516:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d51a:	4296      	cmp	r6, r2
 800d51c:	dd0d      	ble.n	800d53a <scalbn+0x7a>
 800d51e:	2d00      	cmp	r5, #0
 800d520:	a11d      	add	r1, pc, #116	@ (adr r1, 800d598 <scalbn+0xd8>)
 800d522:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d526:	da02      	bge.n	800d52e <scalbn+0x6e>
 800d528:	a11d      	add	r1, pc, #116	@ (adr r1, 800d5a0 <scalbn+0xe0>)
 800d52a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d52e:	a31a      	add	r3, pc, #104	@ (adr r3, 800d598 <scalbn+0xd8>)
 800d530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d534:	f7f3 f844 	bl	80005c0 <__aeabi_dmul>
 800d538:	e7e6      	b.n	800d508 <scalbn+0x48>
 800d53a:	1872      	adds	r2, r6, r1
 800d53c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d540:	428a      	cmp	r2, r1
 800d542:	dcec      	bgt.n	800d51e <scalbn+0x5e>
 800d544:	2a00      	cmp	r2, #0
 800d546:	dd08      	ble.n	800d55a <scalbn+0x9a>
 800d548:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d54c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d550:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d554:	ec45 4b10 	vmov	d0, r4, r5
 800d558:	bd70      	pop	{r4, r5, r6, pc}
 800d55a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d55e:	da08      	bge.n	800d572 <scalbn+0xb2>
 800d560:	2d00      	cmp	r5, #0
 800d562:	a10b      	add	r1, pc, #44	@ (adr r1, 800d590 <scalbn+0xd0>)
 800d564:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d568:	dac1      	bge.n	800d4ee <scalbn+0x2e>
 800d56a:	a10f      	add	r1, pc, #60	@ (adr r1, 800d5a8 <scalbn+0xe8>)
 800d56c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d570:	e7bd      	b.n	800d4ee <scalbn+0x2e>
 800d572:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d576:	3236      	adds	r2, #54	@ 0x36
 800d578:	4620      	mov	r0, r4
 800d57a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d57e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d582:	2200      	movs	r2, #0
 800d584:	4b0c      	ldr	r3, [pc, #48]	@ (800d5b8 <scalbn+0xf8>)
 800d586:	4629      	mov	r1, r5
 800d588:	e7d4      	b.n	800d534 <scalbn+0x74>
 800d58a:	bf00      	nop
 800d58c:	f3af 8000 	nop.w
 800d590:	c2f8f359 	.word	0xc2f8f359
 800d594:	01a56e1f 	.word	0x01a56e1f
 800d598:	8800759c 	.word	0x8800759c
 800d59c:	7e37e43c 	.word	0x7e37e43c
 800d5a0:	8800759c 	.word	0x8800759c
 800d5a4:	fe37e43c 	.word	0xfe37e43c
 800d5a8:	c2f8f359 	.word	0xc2f8f359
 800d5ac:	81a56e1f 	.word	0x81a56e1f
 800d5b0:	43500000 	.word	0x43500000
 800d5b4:	ffff3cb0 	.word	0xffff3cb0
 800d5b8:	3c900000 	.word	0x3c900000

0800d5bc <with_errno>:
 800d5bc:	b510      	push	{r4, lr}
 800d5be:	ed2d 8b02 	vpush	{d8}
 800d5c2:	eeb0 8a40 	vmov.f32	s16, s0
 800d5c6:	eef0 8a60 	vmov.f32	s17, s1
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	f7fb ff58 	bl	8009480 <__errno>
 800d5d0:	6004      	str	r4, [r0, #0]
 800d5d2:	eeb0 0a48 	vmov.f32	s0, s16
 800d5d6:	eef0 0a68 	vmov.f32	s1, s17
 800d5da:	ecbd 8b02 	vpop	{d8}
 800d5de:	bd10      	pop	{r4, pc}

0800d5e0 <xflow>:
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	b507      	push	{r0, r1, r2, lr}
 800d5e4:	ec51 0b10 	vmov	r0, r1, d0
 800d5e8:	b183      	cbz	r3, 800d60c <xflow+0x2c>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d5f0:	e9cd 2300 	strd	r2, r3, [sp]
 800d5f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5f8:	f7f2 ffe2 	bl	80005c0 <__aeabi_dmul>
 800d5fc:	ec41 0b10 	vmov	d0, r0, r1
 800d600:	2022      	movs	r0, #34	@ 0x22
 800d602:	b003      	add	sp, #12
 800d604:	f85d eb04 	ldr.w	lr, [sp], #4
 800d608:	f7ff bfd8 	b.w	800d5bc <with_errno>
 800d60c:	4602      	mov	r2, r0
 800d60e:	460b      	mov	r3, r1
 800d610:	e7ee      	b.n	800d5f0 <xflow+0x10>
 800d612:	0000      	movs	r0, r0
 800d614:	0000      	movs	r0, r0
	...

0800d618 <__math_uflow>:
 800d618:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d620 <__math_uflow+0x8>
 800d61c:	f7ff bfe0 	b.w	800d5e0 <xflow>
 800d620:	00000000 	.word	0x00000000
 800d624:	10000000 	.word	0x10000000

0800d628 <__math_oflow>:
 800d628:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d630 <__math_oflow+0x8>
 800d62c:	f7ff bfd8 	b.w	800d5e0 <xflow>
 800d630:	00000000 	.word	0x00000000
 800d634:	70000000 	.word	0x70000000

0800d638 <__ieee754_sqrt>:
 800d638:	4a6b      	ldr	r2, [pc, #428]	@ (800d7e8 <__ieee754_sqrt+0x1b0>)
 800d63a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d63e:	ec55 4b10 	vmov	r4, r5, d0
 800d642:	43aa      	bics	r2, r5
 800d644:	462b      	mov	r3, r5
 800d646:	4621      	mov	r1, r4
 800d648:	d110      	bne.n	800d66c <__ieee754_sqrt+0x34>
 800d64a:	4622      	mov	r2, r4
 800d64c:	4620      	mov	r0, r4
 800d64e:	4629      	mov	r1, r5
 800d650:	f7f2 ffb6 	bl	80005c0 <__aeabi_dmul>
 800d654:	4602      	mov	r2, r0
 800d656:	460b      	mov	r3, r1
 800d658:	4620      	mov	r0, r4
 800d65a:	4629      	mov	r1, r5
 800d65c:	f7f2 fdfa 	bl	8000254 <__adddf3>
 800d660:	4604      	mov	r4, r0
 800d662:	460d      	mov	r5, r1
 800d664:	ec45 4b10 	vmov	d0, r4, r5
 800d668:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d66c:	2d00      	cmp	r5, #0
 800d66e:	dc0e      	bgt.n	800d68e <__ieee754_sqrt+0x56>
 800d670:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d674:	4322      	orrs	r2, r4
 800d676:	d0f5      	beq.n	800d664 <__ieee754_sqrt+0x2c>
 800d678:	b19d      	cbz	r5, 800d6a2 <__ieee754_sqrt+0x6a>
 800d67a:	4622      	mov	r2, r4
 800d67c:	4620      	mov	r0, r4
 800d67e:	4629      	mov	r1, r5
 800d680:	f7f2 fde6 	bl	8000250 <__aeabi_dsub>
 800d684:	4602      	mov	r2, r0
 800d686:	460b      	mov	r3, r1
 800d688:	f7f3 f8c4 	bl	8000814 <__aeabi_ddiv>
 800d68c:	e7e8      	b.n	800d660 <__ieee754_sqrt+0x28>
 800d68e:	152a      	asrs	r2, r5, #20
 800d690:	d115      	bne.n	800d6be <__ieee754_sqrt+0x86>
 800d692:	2000      	movs	r0, #0
 800d694:	e009      	b.n	800d6aa <__ieee754_sqrt+0x72>
 800d696:	0acb      	lsrs	r3, r1, #11
 800d698:	3a15      	subs	r2, #21
 800d69a:	0549      	lsls	r1, r1, #21
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d0fa      	beq.n	800d696 <__ieee754_sqrt+0x5e>
 800d6a0:	e7f7      	b.n	800d692 <__ieee754_sqrt+0x5a>
 800d6a2:	462a      	mov	r2, r5
 800d6a4:	e7fa      	b.n	800d69c <__ieee754_sqrt+0x64>
 800d6a6:	005b      	lsls	r3, r3, #1
 800d6a8:	3001      	adds	r0, #1
 800d6aa:	02dc      	lsls	r4, r3, #11
 800d6ac:	d5fb      	bpl.n	800d6a6 <__ieee754_sqrt+0x6e>
 800d6ae:	1e44      	subs	r4, r0, #1
 800d6b0:	1b12      	subs	r2, r2, r4
 800d6b2:	f1c0 0420 	rsb	r4, r0, #32
 800d6b6:	fa21 f404 	lsr.w	r4, r1, r4
 800d6ba:	4081      	lsls	r1, r0
 800d6bc:	4323      	orrs	r3, r4
 800d6be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6c2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d6c6:	07d2      	lsls	r2, r2, #31
 800d6c8:	f04f 0600 	mov.w	r6, #0
 800d6cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d6d0:	ea4f 0565 	mov.w	r5, r5, asr #1
 800d6d4:	f04f 0016 	mov.w	r0, #22
 800d6d8:	4632      	mov	r2, r6
 800d6da:	bf58      	it	pl
 800d6dc:	005b      	lslpl	r3, r3, #1
 800d6de:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d6e2:	bf5c      	itt	pl
 800d6e4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d6e8:	0049      	lslpl	r1, r1, #1
 800d6ea:	005b      	lsls	r3, r3, #1
 800d6ec:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d6f0:	0049      	lsls	r1, r1, #1
 800d6f2:	1917      	adds	r7, r2, r4
 800d6f4:	429f      	cmp	r7, r3
 800d6f6:	bfde      	ittt	le
 800d6f8:	193a      	addle	r2, r7, r4
 800d6fa:	1bdb      	suble	r3, r3, r7
 800d6fc:	1936      	addle	r6, r6, r4
 800d6fe:	0fcf      	lsrs	r7, r1, #31
 800d700:	3801      	subs	r0, #1
 800d702:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d706:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d70a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d70e:	d1f0      	bne.n	800d6f2 <__ieee754_sqrt+0xba>
 800d710:	4604      	mov	r4, r0
 800d712:	2720      	movs	r7, #32
 800d714:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d718:	429a      	cmp	r2, r3
 800d71a:	eb00 0e0c 	add.w	lr, r0, ip
 800d71e:	db02      	blt.n	800d726 <__ieee754_sqrt+0xee>
 800d720:	d113      	bne.n	800d74a <__ieee754_sqrt+0x112>
 800d722:	458e      	cmp	lr, r1
 800d724:	d811      	bhi.n	800d74a <__ieee754_sqrt+0x112>
 800d726:	f1be 0f00 	cmp.w	lr, #0
 800d72a:	eb0e 000c 	add.w	r0, lr, ip
 800d72e:	da43      	bge.n	800d7b8 <__ieee754_sqrt+0x180>
 800d730:	2800      	cmp	r0, #0
 800d732:	db41      	blt.n	800d7b8 <__ieee754_sqrt+0x180>
 800d734:	f102 0801 	add.w	r8, r2, #1
 800d738:	1a9b      	subs	r3, r3, r2
 800d73a:	458e      	cmp	lr, r1
 800d73c:	4464      	add	r4, ip
 800d73e:	eba1 010e 	sub.w	r1, r1, lr
 800d742:	bf88      	it	hi
 800d744:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d748:	4642      	mov	r2, r8
 800d74a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d74e:	3f01      	subs	r7, #1
 800d750:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d754:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d758:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d75c:	d1dc      	bne.n	800d718 <__ieee754_sqrt+0xe0>
 800d75e:	4319      	orrs	r1, r3
 800d760:	d01b      	beq.n	800d79a <__ieee754_sqrt+0x162>
 800d762:	f8df a088 	ldr.w	sl, [pc, #136]	@ 800d7ec <__ieee754_sqrt+0x1b4>
 800d766:	f8df b088 	ldr.w	fp, [pc, #136]	@ 800d7f0 <__ieee754_sqrt+0x1b8>
 800d76a:	e9da 0100 	ldrd	r0, r1, [sl]
 800d76e:	e9db 2300 	ldrd	r2, r3, [fp]
 800d772:	e9da 8900 	ldrd	r8, r9, [sl]
 800d776:	f7f2 fd6b 	bl	8000250 <__aeabi_dsub>
 800d77a:	4602      	mov	r2, r0
 800d77c:	460b      	mov	r3, r1
 800d77e:	4640      	mov	r0, r8
 800d780:	4649      	mov	r1, r9
 800d782:	f7f3 f999 	bl	8000ab8 <__aeabi_dcmple>
 800d786:	b140      	cbz	r0, 800d79a <__ieee754_sqrt+0x162>
 800d788:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d78c:	e9da 0100 	ldrd	r0, r1, [sl]
 800d790:	e9db 2300 	ldrd	r2, r3, [fp]
 800d794:	d112      	bne.n	800d7bc <__ieee754_sqrt+0x184>
 800d796:	3601      	adds	r6, #1
 800d798:	463c      	mov	r4, r7
 800d79a:	1072      	asrs	r2, r6, #1
 800d79c:	07f1      	lsls	r1, r6, #31
 800d79e:	ea4f 0354 	mov.w	r3, r4, lsr #1
 800d7a2:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d7a6:	bf48      	it	mi
 800d7a8:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d7ac:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d7b6:	e753      	b.n	800d660 <__ieee754_sqrt+0x28>
 800d7b8:	4690      	mov	r8, r2
 800d7ba:	e7bd      	b.n	800d738 <__ieee754_sqrt+0x100>
 800d7bc:	e9da 8900 	ldrd	r8, r9, [sl]
 800d7c0:	f7f2 fd48 	bl	8000254 <__adddf3>
 800d7c4:	4602      	mov	r2, r0
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	4640      	mov	r0, r8
 800d7ca:	4649      	mov	r1, r9
 800d7cc:	f7f3 f96a 	bl	8000aa4 <__aeabi_dcmplt>
 800d7d0:	b128      	cbz	r0, 800d7de <__ieee754_sqrt+0x1a6>
 800d7d2:	1ca0      	adds	r0, r4, #2
 800d7d4:	f104 0402 	add.w	r4, r4, #2
 800d7d8:	bf08      	it	eq
 800d7da:	3601      	addeq	r6, #1
 800d7dc:	e7dd      	b.n	800d79a <__ieee754_sqrt+0x162>
 800d7de:	1c63      	adds	r3, r4, #1
 800d7e0:	f023 0401 	bic.w	r4, r3, #1
 800d7e4:	e7d9      	b.n	800d79a <__ieee754_sqrt+0x162>
 800d7e6:	bf00      	nop
 800d7e8:	7ff00000 	.word	0x7ff00000
 800d7ec:	200001e8 	.word	0x200001e8
 800d7f0:	200001e0 	.word	0x200001e0
 800d7f4:	00000000 	.word	0x00000000

0800d7f8 <__kernel_rem_pio2>:
 800d7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7fc:	ed2d 8b02 	vpush	{d8}
 800d800:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800d804:	f112 0f14 	cmn.w	r2, #20
 800d808:	f04f 0500 	mov.w	r5, #0
 800d80c:	9306      	str	r3, [sp, #24]
 800d80e:	bfa8      	it	ge
 800d810:	1ed4      	subge	r4, r2, #3
 800d812:	4bbd      	ldr	r3, [pc, #756]	@ (800db08 <__kernel_rem_pio2+0x310>)
 800d814:	bfb8      	it	lt
 800d816:	2400      	movlt	r4, #0
 800d818:	9104      	str	r1, [sp, #16]
 800d81a:	ae20      	add	r6, sp, #128	@ 0x80
 800d81c:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800d81e:	9008      	str	r0, [sp, #32]
 800d820:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d824:	9300      	str	r3, [sp, #0]
 800d826:	9b06      	ldr	r3, [sp, #24]
 800d828:	f103 33ff 	add.w	r3, r3, #4294967295
 800d82c:	9305      	str	r3, [sp, #20]
 800d82e:	bfa4      	itt	ge
 800d830:	2318      	movge	r3, #24
 800d832:	fb94 f4f3 	sdivge	r4, r4, r3
 800d836:	f06f 0317 	mvn.w	r3, #23
 800d83a:	fb04 3303 	mla	r3, r4, r3, r3
 800d83e:	eb03 0b02 	add.w	fp, r3, r2
 800d842:	9b00      	ldr	r3, [sp, #0]
 800d844:	9a05      	ldr	r2, [sp, #20]
 800d846:	eb03 0802 	add.w	r8, r3, r2
 800d84a:	1aa7      	subs	r7, r4, r2
 800d84c:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800d84e:	ed9f 8baa 	vldr	d8, [pc, #680]	@ 800daf8 <__kernel_rem_pio2+0x300>
 800d852:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d856:	4545      	cmp	r5, r8
 800d858:	dd13      	ble.n	800d882 <__kernel_rem_pio2+0x8a>
 800d85a:	aa20      	add	r2, sp, #128	@ 0x80
 800d85c:	9b06      	ldr	r3, [sp, #24]
 800d85e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800d862:	f04f 0800 	mov.w	r8, #0
 800d866:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d86a:	9b00      	ldr	r3, [sp, #0]
 800d86c:	4598      	cmp	r8, r3
 800d86e:	dc30      	bgt.n	800d8d2 <__kernel_rem_pio2+0xda>
 800d870:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d874:	462f      	mov	r7, r5
 800d876:	2600      	movs	r6, #0
 800d878:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800daf8 <__kernel_rem_pio2+0x300>
 800d87c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d880:	e01b      	b.n	800d8ba <__kernel_rem_pio2+0xc2>
 800d882:	42ef      	cmn	r7, r5
 800d884:	d407      	bmi.n	800d896 <__kernel_rem_pio2+0x9e>
 800d886:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d88a:	f7f2 fe2f 	bl	80004ec <__aeabi_i2d>
 800d88e:	3501      	adds	r5, #1
 800d890:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d894:	e7df      	b.n	800d856 <__kernel_rem_pio2+0x5e>
 800d896:	ec51 0b18 	vmov	r0, r1, d8
 800d89a:	e7f8      	b.n	800d88e <__kernel_rem_pio2+0x96>
 800d89c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8a0:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d8a4:	3601      	adds	r6, #1
 800d8a6:	f7f2 fe8b 	bl	80005c0 <__aeabi_dmul>
 800d8aa:	4602      	mov	r2, r0
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8b2:	f7f2 fccf 	bl	8000254 <__adddf3>
 800d8b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8ba:	9b05      	ldr	r3, [sp, #20]
 800d8bc:	3f08      	subs	r7, #8
 800d8be:	429e      	cmp	r6, r3
 800d8c0:	ddec      	ble.n	800d89c <__kernel_rem_pio2+0xa4>
 800d8c2:	f108 0801 	add.w	r8, r8, #1
 800d8c6:	3508      	adds	r5, #8
 800d8c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d8cc:	ecaa 7b02 	vstmia	sl!, {d7}
 800d8d0:	e7cb      	b.n	800d86a <__kernel_rem_pio2+0x72>
 800d8d2:	9b00      	ldr	r3, [sp, #0]
 800d8d4:	aa0c      	add	r2, sp, #48	@ 0x30
 800d8d6:	f8dd 8000 	ldr.w	r8, [sp]
 800d8da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d8de:	930a      	str	r3, [sp, #40]	@ 0x28
 800d8e0:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800d8e2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d8e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8e8:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800d8ec:	ac0c      	add	r4, sp, #48	@ 0x30
 800d8ee:	46c2      	mov	sl, r8
 800d8f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d8f2:	ab98      	add	r3, sp, #608	@ 0x260
 800d8f4:	46a1      	mov	r9, r4
 800d8f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d8fa:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800d8fe:	ab70      	add	r3, sp, #448	@ 0x1c0
 800d900:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800d904:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d908:	f1ba 0f00 	cmp.w	sl, #0
 800d90c:	f1a5 0508 	sub.w	r5, r5, #8
 800d910:	dc77      	bgt.n	800da02 <__kernel_rem_pio2+0x20a>
 800d912:	4658      	mov	r0, fp
 800d914:	ed9d 0b02 	vldr	d0, [sp, #8]
 800d918:	f7ff fdd2 	bl	800d4c0 <scalbn>
 800d91c:	2200      	movs	r2, #0
 800d91e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800d922:	ec57 6b10 	vmov	r6, r7, d0
 800d926:	4630      	mov	r0, r6
 800d928:	4639      	mov	r1, r7
 800d92a:	f7f2 fe49 	bl	80005c0 <__aeabi_dmul>
 800d92e:	ec41 0b10 	vmov	d0, r0, r1
 800d932:	f000 fab9 	bl	800dea8 <floor>
 800d936:	2200      	movs	r2, #0
 800d938:	4b74      	ldr	r3, [pc, #464]	@ (800db0c <__kernel_rem_pio2+0x314>)
 800d93a:	ec51 0b10 	vmov	r0, r1, d0
 800d93e:	f7f2 fe3f 	bl	80005c0 <__aeabi_dmul>
 800d942:	4602      	mov	r2, r0
 800d944:	460b      	mov	r3, r1
 800d946:	4630      	mov	r0, r6
 800d948:	4639      	mov	r1, r7
 800d94a:	f7f2 fc81 	bl	8000250 <__aeabi_dsub>
 800d94e:	460f      	mov	r7, r1
 800d950:	4606      	mov	r6, r0
 800d952:	f7f3 f8e5 	bl	8000b20 <__aeabi_d2iz>
 800d956:	9002      	str	r0, [sp, #8]
 800d958:	f7f2 fdc8 	bl	80004ec <__aeabi_i2d>
 800d95c:	4602      	mov	r2, r0
 800d95e:	460b      	mov	r3, r1
 800d960:	4630      	mov	r0, r6
 800d962:	4639      	mov	r1, r7
 800d964:	f7f2 fc74 	bl	8000250 <__aeabi_dsub>
 800d968:	f1bb 0f00 	cmp.w	fp, #0
 800d96c:	4606      	mov	r6, r0
 800d96e:	460f      	mov	r7, r1
 800d970:	dd6c      	ble.n	800da4c <__kernel_rem_pio2+0x254>
 800d972:	f108 31ff 	add.w	r1, r8, #4294967295
 800d976:	ab0c      	add	r3, sp, #48	@ 0x30
 800d978:	f1cb 0018 	rsb	r0, fp, #24
 800d97c:	9d02      	ldr	r5, [sp, #8]
 800d97e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d982:	fa43 f200 	asr.w	r2, r3, r0
 800d986:	4415      	add	r5, r2
 800d988:	4082      	lsls	r2, r0
 800d98a:	1a9b      	subs	r3, r3, r2
 800d98c:	aa0c      	add	r2, sp, #48	@ 0x30
 800d98e:	9502      	str	r5, [sp, #8]
 800d990:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d994:	f1cb 0217 	rsb	r2, fp, #23
 800d998:	fa43 f902 	asr.w	r9, r3, r2
 800d99c:	f1b9 0f00 	cmp.w	r9, #0
 800d9a0:	dd64      	ble.n	800da6c <__kernel_rem_pio2+0x274>
 800d9a2:	9b02      	ldr	r3, [sp, #8]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	4615      	mov	r5, r2
 800d9ae:	9302      	str	r3, [sp, #8]
 800d9b0:	4590      	cmp	r8, r2
 800d9b2:	f300 80b7 	bgt.w	800db24 <__kernel_rem_pio2+0x32c>
 800d9b6:	f1bb 0f00 	cmp.w	fp, #0
 800d9ba:	dd07      	ble.n	800d9cc <__kernel_rem_pio2+0x1d4>
 800d9bc:	f1bb 0f01 	cmp.w	fp, #1
 800d9c0:	f000 80be 	beq.w	800db40 <__kernel_rem_pio2+0x348>
 800d9c4:	f1bb 0f02 	cmp.w	fp, #2
 800d9c8:	f000 80c5 	beq.w	800db56 <__kernel_rem_pio2+0x35e>
 800d9cc:	f1b9 0f02 	cmp.w	r9, #2
 800d9d0:	d14c      	bne.n	800da6c <__kernel_rem_pio2+0x274>
 800d9d2:	4632      	mov	r2, r6
 800d9d4:	463b      	mov	r3, r7
 800d9d6:	2000      	movs	r0, #0
 800d9d8:	494d      	ldr	r1, [pc, #308]	@ (800db10 <__kernel_rem_pio2+0x318>)
 800d9da:	f7f2 fc39 	bl	8000250 <__aeabi_dsub>
 800d9de:	4606      	mov	r6, r0
 800d9e0:	460f      	mov	r7, r1
 800d9e2:	2d00      	cmp	r5, #0
 800d9e4:	d042      	beq.n	800da6c <__kernel_rem_pio2+0x274>
 800d9e6:	4658      	mov	r0, fp
 800d9e8:	ed9f 0b45 	vldr	d0, [pc, #276]	@ 800db00 <__kernel_rem_pio2+0x308>
 800d9ec:	f7ff fd68 	bl	800d4c0 <scalbn>
 800d9f0:	4630      	mov	r0, r6
 800d9f2:	4639      	mov	r1, r7
 800d9f4:	ec53 2b10 	vmov	r2, r3, d0
 800d9f8:	f7f2 fc2a 	bl	8000250 <__aeabi_dsub>
 800d9fc:	4606      	mov	r6, r0
 800d9fe:	460f      	mov	r7, r1
 800da00:	e034      	b.n	800da6c <__kernel_rem_pio2+0x274>
 800da02:	2200      	movs	r2, #0
 800da04:	4b43      	ldr	r3, [pc, #268]	@ (800db14 <__kernel_rem_pio2+0x31c>)
 800da06:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da0e:	f7f2 fdd7 	bl	80005c0 <__aeabi_dmul>
 800da12:	f7f3 f885 	bl	8000b20 <__aeabi_d2iz>
 800da16:	f7f2 fd69 	bl	80004ec <__aeabi_i2d>
 800da1a:	2200      	movs	r2, #0
 800da1c:	4b3e      	ldr	r3, [pc, #248]	@ (800db18 <__kernel_rem_pio2+0x320>)
 800da1e:	4606      	mov	r6, r0
 800da20:	460f      	mov	r7, r1
 800da22:	f7f2 fdcd 	bl	80005c0 <__aeabi_dmul>
 800da26:	4602      	mov	r2, r0
 800da28:	460b      	mov	r3, r1
 800da2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da2e:	f7f2 fc0f 	bl	8000250 <__aeabi_dsub>
 800da32:	f7f3 f875 	bl	8000b20 <__aeabi_d2iz>
 800da36:	4639      	mov	r1, r7
 800da38:	f849 0b04 	str.w	r0, [r9], #4
 800da3c:	4630      	mov	r0, r6
 800da3e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800da42:	f7f2 fc07 	bl	8000254 <__adddf3>
 800da46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da4a:	e75d      	b.n	800d908 <__kernel_rem_pio2+0x110>
 800da4c:	d107      	bne.n	800da5e <__kernel_rem_pio2+0x266>
 800da4e:	f108 33ff 	add.w	r3, r8, #4294967295
 800da52:	aa0c      	add	r2, sp, #48	@ 0x30
 800da54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da58:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800da5c:	e79e      	b.n	800d99c <__kernel_rem_pio2+0x1a4>
 800da5e:	2200      	movs	r2, #0
 800da60:	4b2e      	ldr	r3, [pc, #184]	@ (800db1c <__kernel_rem_pio2+0x324>)
 800da62:	f7f3 f833 	bl	8000acc <__aeabi_dcmpge>
 800da66:	2800      	cmp	r0, #0
 800da68:	d143      	bne.n	800daf2 <__kernel_rem_pio2+0x2fa>
 800da6a:	4681      	mov	r9, r0
 800da6c:	2200      	movs	r2, #0
 800da6e:	2300      	movs	r3, #0
 800da70:	4630      	mov	r0, r6
 800da72:	4639      	mov	r1, r7
 800da74:	f7f3 f80c 	bl	8000a90 <__aeabi_dcmpeq>
 800da78:	2800      	cmp	r0, #0
 800da7a:	f000 80be 	beq.w	800dbfa <__kernel_rem_pio2+0x402>
 800da7e:	f108 33ff 	add.w	r3, r8, #4294967295
 800da82:	2200      	movs	r2, #0
 800da84:	9900      	ldr	r1, [sp, #0]
 800da86:	428b      	cmp	r3, r1
 800da88:	da6d      	bge.n	800db66 <__kernel_rem_pio2+0x36e>
 800da8a:	2a00      	cmp	r2, #0
 800da8c:	f000 8088 	beq.w	800dba0 <__kernel_rem_pio2+0x3a8>
 800da90:	f108 38ff 	add.w	r8, r8, #4294967295
 800da94:	ab0c      	add	r3, sp, #48	@ 0x30
 800da96:	f1ab 0b18 	sub.w	fp, fp, #24
 800da9a:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d0f6      	beq.n	800da90 <__kernel_rem_pio2+0x298>
 800daa2:	4658      	mov	r0, fp
 800daa4:	4646      	mov	r6, r8
 800daa6:	f04f 0a00 	mov.w	sl, #0
 800daaa:	f8df b068 	ldr.w	fp, [pc, #104]	@ 800db14 <__kernel_rem_pio2+0x31c>
 800daae:	ed9f 0b14 	vldr	d0, [pc, #80]	@ 800db00 <__kernel_rem_pio2+0x308>
 800dab2:	f7ff fd05 	bl	800d4c0 <scalbn>
 800dab6:	f108 0301 	add.w	r3, r8, #1
 800daba:	00da      	lsls	r2, r3, #3
 800dabc:	9205      	str	r2, [sp, #20]
 800dabe:	aa70      	add	r2, sp, #448	@ 0x1c0
 800dac0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800dac4:	ec55 4b10 	vmov	r4, r5, d0
 800dac8:	2e00      	cmp	r6, #0
 800daca:	f280 80ce 	bge.w	800dc6a <__kernel_rem_pio2+0x472>
 800dace:	4644      	mov	r4, r8
 800dad0:	2c00      	cmp	r4, #0
 800dad2:	f2c0 80fc 	blt.w	800dcce <__kernel_rem_pio2+0x4d6>
 800dad6:	4b12      	ldr	r3, [pc, #72]	@ (800db20 <__kernel_rem_pio2+0x328>)
 800dad8:	f04f 0a00 	mov.w	sl, #0
 800dadc:	f04f 0b00 	mov.w	fp, #0
 800dae0:	2600      	movs	r6, #0
 800dae2:	461f      	mov	r7, r3
 800dae4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800dae6:	eba8 0504 	sub.w	r5, r8, r4
 800daea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800daee:	9306      	str	r3, [sp, #24]
 800daf0:	e0e1      	b.n	800dcb6 <__kernel_rem_pio2+0x4be>
 800daf2:	f04f 0902 	mov.w	r9, #2
 800daf6:	e754      	b.n	800d9a2 <__kernel_rem_pio2+0x1aa>
	...
 800db04:	3ff00000 	.word	0x3ff00000
 800db08:	0800e898 	.word	0x0800e898
 800db0c:	40200000 	.word	0x40200000
 800db10:	3ff00000 	.word	0x3ff00000
 800db14:	3e700000 	.word	0x3e700000
 800db18:	41700000 	.word	0x41700000
 800db1c:	3fe00000 	.word	0x3fe00000
 800db20:	0800e858 	.word	0x0800e858
 800db24:	f854 3b04 	ldr.w	r3, [r4], #4
 800db28:	b945      	cbnz	r5, 800db3c <__kernel_rem_pio2+0x344>
 800db2a:	b123      	cbz	r3, 800db36 <__kernel_rem_pio2+0x33e>
 800db2c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800db30:	f844 3c04 	str.w	r3, [r4, #-4]
 800db34:	2301      	movs	r3, #1
 800db36:	3201      	adds	r2, #1
 800db38:	461d      	mov	r5, r3
 800db3a:	e739      	b.n	800d9b0 <__kernel_rem_pio2+0x1b8>
 800db3c:	1acb      	subs	r3, r1, r3
 800db3e:	e7f7      	b.n	800db30 <__kernel_rem_pio2+0x338>
 800db40:	f108 32ff 	add.w	r2, r8, #4294967295
 800db44:	ab0c      	add	r3, sp, #48	@ 0x30
 800db46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db4a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800db4e:	a90c      	add	r1, sp, #48	@ 0x30
 800db50:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800db54:	e73a      	b.n	800d9cc <__kernel_rem_pio2+0x1d4>
 800db56:	f108 32ff 	add.w	r2, r8, #4294967295
 800db5a:	ab0c      	add	r3, sp, #48	@ 0x30
 800db5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db60:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800db64:	e7f3      	b.n	800db4e <__kernel_rem_pio2+0x356>
 800db66:	a90c      	add	r1, sp, #48	@ 0x30
 800db68:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800db6c:	3b01      	subs	r3, #1
 800db6e:	430a      	orrs	r2, r1
 800db70:	e788      	b.n	800da84 <__kernel_rem_pio2+0x28c>
 800db72:	3401      	adds	r4, #1
 800db74:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800db78:	2a00      	cmp	r2, #0
 800db7a:	d0fa      	beq.n	800db72 <__kernel_rem_pio2+0x37a>
 800db7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db7e:	aa20      	add	r2, sp, #128	@ 0x80
 800db80:	f108 0701 	add.w	r7, r8, #1
 800db84:	4444      	add	r4, r8
 800db86:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800db8a:	eb0d 0503 	add.w	r5, sp, r3
 800db8e:	9b06      	ldr	r3, [sp, #24]
 800db90:	4443      	add	r3, r8
 800db92:	3d98      	subs	r5, #152	@ 0x98
 800db94:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800db98:	42bc      	cmp	r4, r7
 800db9a:	da04      	bge.n	800dba6 <__kernel_rem_pio2+0x3ae>
 800db9c:	46a0      	mov	r8, r4
 800db9e:	e6a3      	b.n	800d8e8 <__kernel_rem_pio2+0xf0>
 800dba0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dba2:	2401      	movs	r4, #1
 800dba4:	e7e6      	b.n	800db74 <__kernel_rem_pio2+0x37c>
 800dba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dba8:	f04f 0800 	mov.w	r8, #0
 800dbac:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800dbb0:	f7f2 fc9c 	bl	80004ec <__aeabi_i2d>
 800dbb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dbb8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800de78 <__kernel_rem_pio2+0x680>
 800dbbc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800dbc0:	46b2      	mov	sl, r6
 800dbc2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dbc6:	9b05      	ldr	r3, [sp, #20]
 800dbc8:	4598      	cmp	r8, r3
 800dbca:	dd05      	ble.n	800dbd8 <__kernel_rem_pio2+0x3e0>
 800dbcc:	3701      	adds	r7, #1
 800dbce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dbd2:	eca5 7b02 	vstmia	r5!, {d7}
 800dbd6:	e7df      	b.n	800db98 <__kernel_rem_pio2+0x3a0>
 800dbd8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800dbdc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800dbe0:	f7f2 fcee 	bl	80005c0 <__aeabi_dmul>
 800dbe4:	4602      	mov	r2, r0
 800dbe6:	460b      	mov	r3, r1
 800dbe8:	f108 0801 	add.w	r8, r8, #1
 800dbec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbf0:	f7f2 fb30 	bl	8000254 <__adddf3>
 800dbf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbf8:	e7e5      	b.n	800dbc6 <__kernel_rem_pio2+0x3ce>
 800dbfa:	f1cb 0000 	rsb	r0, fp, #0
 800dbfe:	ec47 6b10 	vmov	d0, r6, r7
 800dc02:	f7ff fc5d 	bl	800d4c0 <scalbn>
 800dc06:	2200      	movs	r2, #0
 800dc08:	4b9d      	ldr	r3, [pc, #628]	@ (800de80 <__kernel_rem_pio2+0x688>)
 800dc0a:	ec55 4b10 	vmov	r4, r5, d0
 800dc0e:	4620      	mov	r0, r4
 800dc10:	4629      	mov	r1, r5
 800dc12:	f7f2 ff5b 	bl	8000acc <__aeabi_dcmpge>
 800dc16:	b300      	cbz	r0, 800dc5a <__kernel_rem_pio2+0x462>
 800dc18:	2200      	movs	r2, #0
 800dc1a:	4b9a      	ldr	r3, [pc, #616]	@ (800de84 <__kernel_rem_pio2+0x68c>)
 800dc1c:	4620      	mov	r0, r4
 800dc1e:	4629      	mov	r1, r5
 800dc20:	f7f2 fcce 	bl	80005c0 <__aeabi_dmul>
 800dc24:	f10b 0b18 	add.w	fp, fp, #24
 800dc28:	f7f2 ff7a 	bl	8000b20 <__aeabi_d2iz>
 800dc2c:	4606      	mov	r6, r0
 800dc2e:	f7f2 fc5d 	bl	80004ec <__aeabi_i2d>
 800dc32:	2200      	movs	r2, #0
 800dc34:	4b92      	ldr	r3, [pc, #584]	@ (800de80 <__kernel_rem_pio2+0x688>)
 800dc36:	f7f2 fcc3 	bl	80005c0 <__aeabi_dmul>
 800dc3a:	460b      	mov	r3, r1
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	4629      	mov	r1, r5
 800dc40:	4620      	mov	r0, r4
 800dc42:	f7f2 fb05 	bl	8000250 <__aeabi_dsub>
 800dc46:	f7f2 ff6b 	bl	8000b20 <__aeabi_d2iz>
 800dc4a:	ab0c      	add	r3, sp, #48	@ 0x30
 800dc4c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800dc50:	f108 0801 	add.w	r8, r8, #1
 800dc54:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800dc58:	e723      	b.n	800daa2 <__kernel_rem_pio2+0x2aa>
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	4629      	mov	r1, r5
 800dc5e:	f7f2 ff5f 	bl	8000b20 <__aeabi_d2iz>
 800dc62:	ab0c      	add	r3, sp, #48	@ 0x30
 800dc64:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800dc68:	e71b      	b.n	800daa2 <__kernel_rem_pio2+0x2aa>
 800dc6a:	ab0c      	add	r3, sp, #48	@ 0x30
 800dc6c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dc70:	3e01      	subs	r6, #1
 800dc72:	f7f2 fc3b 	bl	80004ec <__aeabi_i2d>
 800dc76:	4622      	mov	r2, r4
 800dc78:	462b      	mov	r3, r5
 800dc7a:	f7f2 fca1 	bl	80005c0 <__aeabi_dmul>
 800dc7e:	4652      	mov	r2, sl
 800dc80:	465b      	mov	r3, fp
 800dc82:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800dc86:	4620      	mov	r0, r4
 800dc88:	4629      	mov	r1, r5
 800dc8a:	f7f2 fc99 	bl	80005c0 <__aeabi_dmul>
 800dc8e:	4604      	mov	r4, r0
 800dc90:	460d      	mov	r5, r1
 800dc92:	e719      	b.n	800dac8 <__kernel_rem_pio2+0x2d0>
 800dc94:	9906      	ldr	r1, [sp, #24]
 800dc96:	3601      	adds	r6, #1
 800dc98:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800dc9c:	9106      	str	r1, [sp, #24]
 800dc9e:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800dca2:	f7f2 fc8d 	bl	80005c0 <__aeabi_dmul>
 800dca6:	4602      	mov	r2, r0
 800dca8:	460b      	mov	r3, r1
 800dcaa:	4650      	mov	r0, sl
 800dcac:	4659      	mov	r1, fp
 800dcae:	f7f2 fad1 	bl	8000254 <__adddf3>
 800dcb2:	4682      	mov	sl, r0
 800dcb4:	468b      	mov	fp, r1
 800dcb6:	9b00      	ldr	r3, [sp, #0]
 800dcb8:	429e      	cmp	r6, r3
 800dcba:	dc01      	bgt.n	800dcc0 <__kernel_rem_pio2+0x4c8>
 800dcbc:	42b5      	cmp	r5, r6
 800dcbe:	dae9      	bge.n	800dc94 <__kernel_rem_pio2+0x49c>
 800dcc0:	ab48      	add	r3, sp, #288	@ 0x120
 800dcc2:	3c01      	subs	r4, #1
 800dcc4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800dcc8:	e9c5 ab00 	strd	sl, fp, [r5]
 800dccc:	e700      	b.n	800dad0 <__kernel_rem_pio2+0x2d8>
 800dcce:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800dcd0:	2b02      	cmp	r3, #2
 800dcd2:	dc0b      	bgt.n	800dcec <__kernel_rem_pio2+0x4f4>
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	dc39      	bgt.n	800dd4c <__kernel_rem_pio2+0x554>
 800dcd8:	d05d      	beq.n	800dd96 <__kernel_rem_pio2+0x59e>
 800dcda:	9b02      	ldr	r3, [sp, #8]
 800dcdc:	f003 0007 	and.w	r0, r3, #7
 800dce0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800dce4:	ecbd 8b02 	vpop	{d8}
 800dce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcec:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800dcee:	2b03      	cmp	r3, #3
 800dcf0:	d1f3      	bne.n	800dcda <__kernel_rem_pio2+0x4e2>
 800dcf2:	9b05      	ldr	r3, [sp, #20]
 800dcf4:	46c2      	mov	sl, r8
 800dcf6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800dcfa:	eb0d 0403 	add.w	r4, sp, r3
 800dcfe:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800dd02:	4625      	mov	r5, r4
 800dd04:	f1ba 0f00 	cmp.w	sl, #0
 800dd08:	f1a5 0508 	sub.w	r5, r5, #8
 800dd0c:	dc6b      	bgt.n	800dde6 <__kernel_rem_pio2+0x5ee>
 800dd0e:	4645      	mov	r5, r8
 800dd10:	2d01      	cmp	r5, #1
 800dd12:	f1a4 0408 	sub.w	r4, r4, #8
 800dd16:	f300 8087 	bgt.w	800de28 <__kernel_rem_pio2+0x630>
 800dd1a:	9c05      	ldr	r4, [sp, #20]
 800dd1c:	ab48      	add	r3, sp, #288	@ 0x120
 800dd1e:	2000      	movs	r0, #0
 800dd20:	2100      	movs	r1, #0
 800dd22:	441c      	add	r4, r3
 800dd24:	f1b8 0f01 	cmp.w	r8, #1
 800dd28:	f300 809c 	bgt.w	800de64 <__kernel_rem_pio2+0x66c>
 800dd2c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800dd30:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800dd34:	f1b9 0f00 	cmp.w	r9, #0
 800dd38:	f040 80a6 	bne.w	800de88 <__kernel_rem_pio2+0x690>
 800dd3c:	9b04      	ldr	r3, [sp, #16]
 800dd3e:	e9c3 7800 	strd	r7, r8, [r3]
 800dd42:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800dd46:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800dd4a:	e7c6      	b.n	800dcda <__kernel_rem_pio2+0x4e2>
 800dd4c:	9d05      	ldr	r5, [sp, #20]
 800dd4e:	ab48      	add	r3, sp, #288	@ 0x120
 800dd50:	4644      	mov	r4, r8
 800dd52:	2000      	movs	r0, #0
 800dd54:	441d      	add	r5, r3
 800dd56:	2100      	movs	r1, #0
 800dd58:	2c00      	cmp	r4, #0
 800dd5a:	da35      	bge.n	800ddc8 <__kernel_rem_pio2+0x5d0>
 800dd5c:	f1b9 0f00 	cmp.w	r9, #0
 800dd60:	d038      	beq.n	800ddd4 <__kernel_rem_pio2+0x5dc>
 800dd62:	4602      	mov	r2, r0
 800dd64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dd68:	9c04      	ldr	r4, [sp, #16]
 800dd6a:	ad4a      	add	r5, sp, #296	@ 0x128
 800dd6c:	e9c4 2300 	strd	r2, r3, [r4]
 800dd70:	2401      	movs	r4, #1
 800dd72:	4602      	mov	r2, r0
 800dd74:	460b      	mov	r3, r1
 800dd76:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800dd7a:	f7f2 fa69 	bl	8000250 <__aeabi_dsub>
 800dd7e:	45a0      	cmp	r8, r4
 800dd80:	da2b      	bge.n	800ddda <__kernel_rem_pio2+0x5e2>
 800dd82:	f1b9 0f00 	cmp.w	r9, #0
 800dd86:	d002      	beq.n	800dd8e <__kernel_rem_pio2+0x596>
 800dd88:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	9b04      	ldr	r3, [sp, #16]
 800dd90:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800dd94:	e7a1      	b.n	800dcda <__kernel_rem_pio2+0x4e2>
 800dd96:	9c05      	ldr	r4, [sp, #20]
 800dd98:	ab48      	add	r3, sp, #288	@ 0x120
 800dd9a:	2000      	movs	r0, #0
 800dd9c:	2100      	movs	r1, #0
 800dd9e:	441c      	add	r4, r3
 800dda0:	f1b8 0f00 	cmp.w	r8, #0
 800dda4:	da09      	bge.n	800ddba <__kernel_rem_pio2+0x5c2>
 800dda6:	f1b9 0f00 	cmp.w	r9, #0
 800ddaa:	d002      	beq.n	800ddb2 <__kernel_rem_pio2+0x5ba>
 800ddac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	9b04      	ldr	r3, [sp, #16]
 800ddb4:	e9c3 0100 	strd	r0, r1, [r3]
 800ddb8:	e78f      	b.n	800dcda <__kernel_rem_pio2+0x4e2>
 800ddba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ddbe:	f108 38ff 	add.w	r8, r8, #4294967295
 800ddc2:	f7f2 fa47 	bl	8000254 <__adddf3>
 800ddc6:	e7eb      	b.n	800dda0 <__kernel_rem_pio2+0x5a8>
 800ddc8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800ddcc:	3c01      	subs	r4, #1
 800ddce:	f7f2 fa41 	bl	8000254 <__adddf3>
 800ddd2:	e7c1      	b.n	800dd58 <__kernel_rem_pio2+0x560>
 800ddd4:	4602      	mov	r2, r0
 800ddd6:	460b      	mov	r3, r1
 800ddd8:	e7c6      	b.n	800dd68 <__kernel_rem_pio2+0x570>
 800ddda:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800ddde:	3401      	adds	r4, #1
 800dde0:	f7f2 fa38 	bl	8000254 <__adddf3>
 800dde4:	e7cb      	b.n	800dd7e <__kernel_rem_pio2+0x586>
 800dde6:	ed95 7b00 	vldr	d7, [r5]
 800ddea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ddee:	ed8d 7b00 	vstr	d7, [sp]
 800ddf2:	ed95 7b02 	vldr	d7, [r5, #8]
 800ddf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ddfa:	ec53 2b17 	vmov	r2, r3, d7
 800ddfe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800de02:	f7f2 fa27 	bl	8000254 <__adddf3>
 800de06:	4602      	mov	r2, r0
 800de08:	460b      	mov	r3, r1
 800de0a:	4606      	mov	r6, r0
 800de0c:	460f      	mov	r7, r1
 800de0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800de12:	f7f2 fa1d 	bl	8000250 <__aeabi_dsub>
 800de16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de1a:	f7f2 fa1b 	bl	8000254 <__adddf3>
 800de1e:	e9c5 6700 	strd	r6, r7, [r5]
 800de22:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800de26:	e76d      	b.n	800dd04 <__kernel_rem_pio2+0x50c>
 800de28:	ed94 7b00 	vldr	d7, [r4]
 800de2c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800de30:	3d01      	subs	r5, #1
 800de32:	4652      	mov	r2, sl
 800de34:	465b      	mov	r3, fp
 800de36:	ec51 0b17 	vmov	r0, r1, d7
 800de3a:	ed8d 7b00 	vstr	d7, [sp]
 800de3e:	f7f2 fa09 	bl	8000254 <__adddf3>
 800de42:	4602      	mov	r2, r0
 800de44:	460b      	mov	r3, r1
 800de46:	4606      	mov	r6, r0
 800de48:	460f      	mov	r7, r1
 800de4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800de4e:	f7f2 f9ff 	bl	8000250 <__aeabi_dsub>
 800de52:	4652      	mov	r2, sl
 800de54:	465b      	mov	r3, fp
 800de56:	f7f2 f9fd 	bl	8000254 <__adddf3>
 800de5a:	e9c4 6700 	strd	r6, r7, [r4]
 800de5e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800de62:	e755      	b.n	800dd10 <__kernel_rem_pio2+0x518>
 800de64:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800de68:	f108 38ff 	add.w	r8, r8, #4294967295
 800de6c:	f7f2 f9f2 	bl	8000254 <__adddf3>
 800de70:	e758      	b.n	800dd24 <__kernel_rem_pio2+0x52c>
 800de72:	bf00      	nop
 800de74:	f3af 8000 	nop.w
	...
 800de80:	41700000 	.word	0x41700000
 800de84:	3e700000 	.word	0x3e700000
 800de88:	9b04      	ldr	r3, [sp, #16]
 800de8a:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800de8e:	9a04      	ldr	r2, [sp, #16]
 800de90:	601f      	str	r7, [r3, #0]
 800de92:	605c      	str	r4, [r3, #4]
 800de94:	609d      	str	r5, [r3, #8]
 800de96:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800de9a:	6110      	str	r0, [r2, #16]
 800de9c:	60d3      	str	r3, [r2, #12]
 800de9e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dea2:	6153      	str	r3, [r2, #20]
 800dea4:	e719      	b.n	800dcda <__kernel_rem_pio2+0x4e2>
 800dea6:	bf00      	nop

0800dea8 <floor>:
 800dea8:	ec51 0b10 	vmov	r0, r1, d0
 800deac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800deb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deb4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800deb8:	460c      	mov	r4, r1
 800deba:	4605      	mov	r5, r0
 800debc:	4680      	mov	r8, r0
 800debe:	2e13      	cmp	r6, #19
 800dec0:	dc35      	bgt.n	800df2e <floor+0x86>
 800dec2:	2e00      	cmp	r6, #0
 800dec4:	da17      	bge.n	800def6 <floor+0x4e>
 800dec6:	a334      	add	r3, pc, #208	@ (adr r3, 800df98 <floor+0xf0>)
 800dec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800decc:	f7f2 f9c2 	bl	8000254 <__adddf3>
 800ded0:	2200      	movs	r2, #0
 800ded2:	2300      	movs	r3, #0
 800ded4:	f7f2 fe04 	bl	8000ae0 <__aeabi_dcmpgt>
 800ded8:	b150      	cbz	r0, 800def0 <floor+0x48>
 800deda:	2c00      	cmp	r4, #0
 800dedc:	da56      	bge.n	800df8c <floor+0xe4>
 800dede:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800dee2:	432c      	orrs	r4, r5
 800dee4:	2500      	movs	r5, #0
 800dee6:	42ac      	cmp	r4, r5
 800dee8:	4c2d      	ldr	r4, [pc, #180]	@ (800dfa0 <floor+0xf8>)
 800deea:	bf08      	it	eq
 800deec:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800def0:	4621      	mov	r1, r4
 800def2:	4628      	mov	r0, r5
 800def4:	e024      	b.n	800df40 <floor+0x98>
 800def6:	4f2b      	ldr	r7, [pc, #172]	@ (800dfa4 <floor+0xfc>)
 800def8:	4137      	asrs	r7, r6
 800defa:	ea01 0307 	and.w	r3, r1, r7
 800defe:	4303      	orrs	r3, r0
 800df00:	d01e      	beq.n	800df40 <floor+0x98>
 800df02:	a325      	add	r3, pc, #148	@ (adr r3, 800df98 <floor+0xf0>)
 800df04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df08:	f7f2 f9a4 	bl	8000254 <__adddf3>
 800df0c:	2200      	movs	r2, #0
 800df0e:	2300      	movs	r3, #0
 800df10:	f7f2 fde6 	bl	8000ae0 <__aeabi_dcmpgt>
 800df14:	2800      	cmp	r0, #0
 800df16:	d0eb      	beq.n	800def0 <floor+0x48>
 800df18:	2c00      	cmp	r4, #0
 800df1a:	f04f 0500 	mov.w	r5, #0
 800df1e:	bfbe      	ittt	lt
 800df20:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800df24:	4133      	asrlt	r3, r6
 800df26:	18e4      	addlt	r4, r4, r3
 800df28:	ea24 0407 	bic.w	r4, r4, r7
 800df2c:	e7e0      	b.n	800def0 <floor+0x48>
 800df2e:	2e33      	cmp	r6, #51	@ 0x33
 800df30:	dd0a      	ble.n	800df48 <floor+0xa0>
 800df32:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800df36:	d103      	bne.n	800df40 <floor+0x98>
 800df38:	4602      	mov	r2, r0
 800df3a:	460b      	mov	r3, r1
 800df3c:	f7f2 f98a 	bl	8000254 <__adddf3>
 800df40:	ec41 0b10 	vmov	d0, r0, r1
 800df44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df48:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800df4c:	f04f 37ff 	mov.w	r7, #4294967295
 800df50:	40df      	lsrs	r7, r3
 800df52:	4207      	tst	r7, r0
 800df54:	d0f4      	beq.n	800df40 <floor+0x98>
 800df56:	a310      	add	r3, pc, #64	@ (adr r3, 800df98 <floor+0xf0>)
 800df58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5c:	f7f2 f97a 	bl	8000254 <__adddf3>
 800df60:	2200      	movs	r2, #0
 800df62:	2300      	movs	r3, #0
 800df64:	f7f2 fdbc 	bl	8000ae0 <__aeabi_dcmpgt>
 800df68:	2800      	cmp	r0, #0
 800df6a:	d0c1      	beq.n	800def0 <floor+0x48>
 800df6c:	2c00      	cmp	r4, #0
 800df6e:	da0a      	bge.n	800df86 <floor+0xde>
 800df70:	2e14      	cmp	r6, #20
 800df72:	d101      	bne.n	800df78 <floor+0xd0>
 800df74:	3401      	adds	r4, #1
 800df76:	e006      	b.n	800df86 <floor+0xde>
 800df78:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800df7c:	2301      	movs	r3, #1
 800df7e:	40b3      	lsls	r3, r6
 800df80:	441d      	add	r5, r3
 800df82:	4545      	cmp	r5, r8
 800df84:	d3f6      	bcc.n	800df74 <floor+0xcc>
 800df86:	ea25 0507 	bic.w	r5, r5, r7
 800df8a:	e7b1      	b.n	800def0 <floor+0x48>
 800df8c:	2500      	movs	r5, #0
 800df8e:	462c      	mov	r4, r5
 800df90:	e7ae      	b.n	800def0 <floor+0x48>
 800df92:	bf00      	nop
 800df94:	f3af 8000 	nop.w
 800df98:	8800759c 	.word	0x8800759c
 800df9c:	7e37e43c 	.word	0x7e37e43c
 800dfa0:	bff00000 	.word	0xbff00000
 800dfa4:	000fffff 	.word	0x000fffff

0800dfa8 <_init>:
 800dfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfaa:	bf00      	nop
 800dfac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfae:	bc08      	pop	{r3}
 800dfb0:	469e      	mov	lr, r3
 800dfb2:	4770      	bx	lr

0800dfb4 <_fini>:
 800dfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfb6:	bf00      	nop
 800dfb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfba:	bc08      	pop	{r3}
 800dfbc:	469e      	mov	lr, r3
 800dfbe:	4770      	bx	lr
