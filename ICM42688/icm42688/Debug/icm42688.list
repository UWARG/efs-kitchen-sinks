
icm42688.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdc0  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000082c  0800bfb8  0800bfb8  0000cfb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7e4  0800c7e4  0000e1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c7e4  0800c7e4  0000d7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7ec  0800c7ec  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7ec  0800c7ec  0000d7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c7f0  0800c7f0  0000d7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c7f4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  200001d8  0800c9cc  0000e1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000860  0800c9cc  0000e860  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ebf3  00000000  00000000  0000e20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004473  00000000  00000000  0002ce01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  00031278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012ec  00000000  00000000  00032b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002efc5  00000000  00000000  00033e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f1e3  00000000  00000000  00062df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012fbd8  00000000  00000000  00081fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b1bb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007da8  00000000  00000000  001b1bf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001b99a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001d8 	.word	0x200001d8
 8000214:	00000000 	.word	0x00000000
 8000218:	0800bfa0 	.word	0x0800bfa0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001dc 	.word	0x200001dc
 8000234:	0800bfa0 	.word	0x0800bfa0

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_drsub>:
 8000248:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800024c:	e002      	b.n	8000254 <__adddf3>
 800024e:	bf00      	nop

08000250 <__aeabi_dsub>:
 8000250:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000254 <__adddf3>:
 8000254:	b530      	push	{r4, r5, lr}
 8000256:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025e:	ea94 0f05 	teq	r4, r5
 8000262:	bf08      	it	eq
 8000264:	ea90 0f02 	teqeq	r0, r2
 8000268:	bf1f      	itttt	ne
 800026a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000272:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000276:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027a:	f000 80e2 	beq.w	8000442 <__adddf3+0x1ee>
 800027e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000282:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000286:	bfb8      	it	lt
 8000288:	426d      	neglt	r5, r5
 800028a:	dd0c      	ble.n	80002a6 <__adddf3+0x52>
 800028c:	442c      	add	r4, r5
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	ea82 0000 	eor.w	r0, r2, r0
 800029a:	ea83 0101 	eor.w	r1, r3, r1
 800029e:	ea80 0202 	eor.w	r2, r0, r2
 80002a2:	ea81 0303 	eor.w	r3, r1, r3
 80002a6:	2d36      	cmp	r5, #54	@ 0x36
 80002a8:	bf88      	it	hi
 80002aa:	bd30      	pophi	{r4, r5, pc}
 80002ac:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x70>
 80002be:	4240      	negs	r0, r0
 80002c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x84>
 80002d2:	4252      	negs	r2, r2
 80002d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d8:	ea94 0f05 	teq	r4, r5
 80002dc:	f000 80a7 	beq.w	800042e <__adddf3+0x1da>
 80002e0:	f1a4 0401 	sub.w	r4, r4, #1
 80002e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e8:	db0d      	blt.n	8000306 <__adddf3+0xb2>
 80002ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ee:	fa22 f205 	lsr.w	r2, r2, r5
 80002f2:	1880      	adds	r0, r0, r2
 80002f4:	f141 0100 	adc.w	r1, r1, #0
 80002f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002fc:	1880      	adds	r0, r0, r2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	4159      	adcs	r1, r3
 8000304:	e00e      	b.n	8000324 <__adddf3+0xd0>
 8000306:	f1a5 0520 	sub.w	r5, r5, #32
 800030a:	f10e 0e20 	add.w	lr, lr, #32
 800030e:	2a01      	cmp	r2, #1
 8000310:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000314:	bf28      	it	cs
 8000316:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	18c0      	adds	r0, r0, r3
 8000320:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000324:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000328:	d507      	bpl.n	800033a <__adddf3+0xe6>
 800032a:	f04f 0e00 	mov.w	lr, #0
 800032e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000332:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000336:	eb6e 0101 	sbc.w	r1, lr, r1
 800033a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800033e:	d31b      	bcc.n	8000378 <__adddf3+0x124>
 8000340:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000344:	d30c      	bcc.n	8000360 <__adddf3+0x10c>
 8000346:	0849      	lsrs	r1, r1, #1
 8000348:	ea5f 0030 	movs.w	r0, r0, rrx
 800034c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000350:	f104 0401 	add.w	r4, r4, #1
 8000354:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000358:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800035c:	f080 809a 	bcs.w	8000494 <__adddf3+0x240>
 8000360:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	ea41 0105 	orr.w	r1, r1, r5
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800037c:	4140      	adcs	r0, r0
 800037e:	eb41 0101 	adc.w	r1, r1, r1
 8000382:	3c01      	subs	r4, #1
 8000384:	bf28      	it	cs
 8000386:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800038a:	d2e9      	bcs.n	8000360 <__adddf3+0x10c>
 800038c:	f091 0f00 	teq	r1, #0
 8000390:	bf04      	itt	eq
 8000392:	4601      	moveq	r1, r0
 8000394:	2000      	moveq	r0, #0
 8000396:	fab1 f381 	clz	r3, r1
 800039a:	bf08      	it	eq
 800039c:	3320      	addeq	r3, #32
 800039e:	f1a3 030b 	sub.w	r3, r3, #11
 80003a2:	f1b3 0220 	subs.w	r2, r3, #32
 80003a6:	da0c      	bge.n	80003c2 <__adddf3+0x16e>
 80003a8:	320c      	adds	r2, #12
 80003aa:	dd08      	ble.n	80003be <__adddf3+0x16a>
 80003ac:	f102 0c14 	add.w	ip, r2, #20
 80003b0:	f1c2 020c 	rsb	r2, r2, #12
 80003b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b8:	fa21 f102 	lsr.w	r1, r1, r2
 80003bc:	e00c      	b.n	80003d8 <__adddf3+0x184>
 80003be:	f102 0214 	add.w	r2, r2, #20
 80003c2:	bfd8      	it	le
 80003c4:	f1c2 0c20 	rsble	ip, r2, #32
 80003c8:	fa01 f102 	lsl.w	r1, r1, r2
 80003cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d0:	bfdc      	itt	le
 80003d2:	ea41 010c 	orrle.w	r1, r1, ip
 80003d6:	4090      	lslle	r0, r2
 80003d8:	1ae4      	subs	r4, r4, r3
 80003da:	bfa2      	ittt	ge
 80003dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e0:	4329      	orrge	r1, r5
 80003e2:	bd30      	popge	{r4, r5, pc}
 80003e4:	ea6f 0404 	mvn.w	r4, r4
 80003e8:	3c1f      	subs	r4, #31
 80003ea:	da1c      	bge.n	8000426 <__adddf3+0x1d2>
 80003ec:	340c      	adds	r4, #12
 80003ee:	dc0e      	bgt.n	800040e <__adddf3+0x1ba>
 80003f0:	f104 0414 	add.w	r4, r4, #20
 80003f4:	f1c4 0220 	rsb	r2, r4, #32
 80003f8:	fa20 f004 	lsr.w	r0, r0, r4
 80003fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000400:	ea40 0003 	orr.w	r0, r0, r3
 8000404:	fa21 f304 	lsr.w	r3, r1, r4
 8000408:	ea45 0103 	orr.w	r1, r5, r3
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f1c4 040c 	rsb	r4, r4, #12
 8000412:	f1c4 0220 	rsb	r2, r4, #32
 8000416:	fa20 f002 	lsr.w	r0, r0, r2
 800041a:	fa01 f304 	lsl.w	r3, r1, r4
 800041e:	ea40 0003 	orr.w	r0, r0, r3
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	fa21 f004 	lsr.w	r0, r1, r4
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	f094 0f00 	teq	r4, #0
 8000432:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000436:	bf06      	itte	eq
 8000438:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800043c:	3401      	addeq	r4, #1
 800043e:	3d01      	subne	r5, #1
 8000440:	e74e      	b.n	80002e0 <__adddf3+0x8c>
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf18      	it	ne
 8000448:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044c:	d029      	beq.n	80004a2 <__adddf3+0x24e>
 800044e:	ea94 0f05 	teq	r4, r5
 8000452:	bf08      	it	eq
 8000454:	ea90 0f02 	teqeq	r0, r2
 8000458:	d005      	beq.n	8000466 <__adddf3+0x212>
 800045a:	ea54 0c00 	orrs.w	ip, r4, r0
 800045e:	bf04      	itt	eq
 8000460:	4619      	moveq	r1, r3
 8000462:	4610      	moveq	r0, r2
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	ea91 0f03 	teq	r1, r3
 800046a:	bf1e      	ittt	ne
 800046c:	2100      	movne	r1, #0
 800046e:	2000      	movne	r0, #0
 8000470:	bd30      	popne	{r4, r5, pc}
 8000472:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000476:	d105      	bne.n	8000484 <__adddf3+0x230>
 8000478:	0040      	lsls	r0, r0, #1
 800047a:	4149      	adcs	r1, r1
 800047c:	bf28      	it	cs
 800047e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000482:	bd30      	pop	{r4, r5, pc}
 8000484:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000488:	bf3c      	itt	cc
 800048a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800048e:	bd30      	popcc	{r4, r5, pc}
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000498:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800049c:	f04f 0000 	mov.w	r0, #0
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf1a      	itte	ne
 80004a8:	4619      	movne	r1, r3
 80004aa:	4610      	movne	r0, r2
 80004ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b0:	bf1c      	itt	ne
 80004b2:	460b      	movne	r3, r1
 80004b4:	4602      	movne	r2, r0
 80004b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ba:	bf06      	itte	eq
 80004bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c0:	ea91 0f03 	teqeq	r1, r3
 80004c4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	bf00      	nop

080004cc <__aeabi_ui2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f04f 0500 	mov.w	r5, #0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e750      	b.n	800038c <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_i2d>:
 80004ec:	f090 0f00 	teq	r0, #0
 80004f0:	bf04      	itt	eq
 80004f2:	2100      	moveq	r1, #0
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000500:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	f04f 0100 	mov.w	r1, #0
 800050c:	e73e      	b.n	800038c <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_f2d>:
 8000510:	0042      	lsls	r2, r0, #1
 8000512:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000516:	ea4f 0131 	mov.w	r1, r1, rrx
 800051a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051e:	bf1f      	itttt	ne
 8000520:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000524:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000528:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800052c:	4770      	bxne	lr
 800052e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000532:	bf08      	it	eq
 8000534:	4770      	bxeq	lr
 8000536:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800053a:	bf04      	itt	eq
 800053c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000550:	e71c      	b.n	800038c <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_ul2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f04f 0500 	mov.w	r5, #0
 8000562:	e00a      	b.n	800057a <__aeabi_l2d+0x16>

08000564 <__aeabi_l2d>:
 8000564:	ea50 0201 	orrs.w	r2, r0, r1
 8000568:	bf08      	it	eq
 800056a:	4770      	bxeq	lr
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000572:	d502      	bpl.n	800057a <__aeabi_l2d+0x16>
 8000574:	4240      	negs	r0, r0
 8000576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000582:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000586:	f43f aed8 	beq.w	800033a <__adddf3+0xe6>
 800058a:	f04f 0203 	mov.w	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b2:	ea40 000e 	orr.w	r0, r0, lr
 80005b6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ba:	4414      	add	r4, r2
 80005bc:	e6bd      	b.n	800033a <__adddf3+0xe6>
 80005be:	bf00      	nop

080005c0 <__aeabi_dmul>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ce:	bf1d      	ittte	ne
 80005d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d4:	ea94 0f0c 	teqne	r4, ip
 80005d8:	ea95 0f0c 	teqne	r5, ip
 80005dc:	f000 f8de 	bleq	800079c <__aeabi_dmul+0x1dc>
 80005e0:	442c      	add	r4, r5
 80005e2:	ea81 0603 	eor.w	r6, r1, r3
 80005e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f2:	bf18      	it	ne
 80005f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000600:	d038      	beq.n	8000674 <__aeabi_dmul+0xb4>
 8000602:	fba0 ce02 	umull	ip, lr, r0, r2
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000612:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000616:	f04f 0600 	mov.w	r6, #0
 800061a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061e:	f09c 0f00 	teq	ip, #0
 8000622:	bf18      	it	ne
 8000624:	f04e 0e01 	orrne.w	lr, lr, #1
 8000628:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800062c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000630:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000634:	d204      	bcs.n	8000640 <__aeabi_dmul+0x80>
 8000636:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063a:	416d      	adcs	r5, r5
 800063c:	eb46 0606 	adc.w	r6, r6, r6
 8000640:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000644:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000648:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800064c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000650:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000654:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000658:	bf88      	it	hi
 800065a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800065e:	d81e      	bhi.n	800069e <__aeabi_dmul+0xde>
 8000660:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000664:	bf08      	it	eq
 8000666:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066a:	f150 0000 	adcs.w	r0, r0, #0
 800066e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000678:	ea46 0101 	orr.w	r1, r6, r1
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	ea81 0103 	eor.w	r1, r1, r3
 8000684:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000688:	bfc2      	ittt	gt
 800068a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000692:	bd70      	popgt	{r4, r5, r6, pc}
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000698:	f04f 0e00 	mov.w	lr, #0
 800069c:	3c01      	subs	r4, #1
 800069e:	f300 80ab 	bgt.w	80007f8 <__aeabi_dmul+0x238>
 80006a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006a6:	bfde      	ittt	le
 80006a8:	2000      	movle	r0, #0
 80006aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ae:	bd70      	pople	{r4, r5, r6, pc}
 80006b0:	f1c4 0400 	rsb	r4, r4, #0
 80006b4:	3c20      	subs	r4, #32
 80006b6:	da35      	bge.n	8000724 <__aeabi_dmul+0x164>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc1b      	bgt.n	80006f4 <__aeabi_dmul+0x134>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f305 	lsl.w	r3, r0, r5
 80006c8:	fa20 f004 	lsr.w	r0, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	fa21 f604 	lsr.w	r6, r1, r4
 80006e4:	eb42 0106 	adc.w	r1, r2, r6
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 040c 	rsb	r4, r4, #12
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000700:	fa20 f005 	lsr.w	r0, r0, r5
 8000704:	fa01 f204 	lsl.w	r2, r1, r4
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000714:	f141 0100 	adc.w	r1, r1, #0
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f205 	lsl.w	r2, r0, r5
 800072c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000730:	fa20 f304 	lsr.w	r3, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea43 0302 	orr.w	r3, r3, r2
 800073c:	fa21 f004 	lsr.w	r0, r1, r4
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	fa21 f204 	lsr.w	r2, r1, r4
 8000748:	ea20 0002 	bic.w	r0, r0, r2
 800074c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f094 0f00 	teq	r4, #0
 8000760:	d10f      	bne.n	8000782 <__aeabi_dmul+0x1c2>
 8000762:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000766:	0040      	lsls	r0, r0, #1
 8000768:	eb41 0101 	adc.w	r1, r1, r1
 800076c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3c01      	subeq	r4, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1a6>
 8000776:	ea41 0106 	orr.w	r1, r1, r6
 800077a:	f095 0f00 	teq	r5, #0
 800077e:	bf18      	it	ne
 8000780:	4770      	bxne	lr
 8000782:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000786:	0052      	lsls	r2, r2, #1
 8000788:	eb43 0303 	adc.w	r3, r3, r3
 800078c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000790:	bf08      	it	eq
 8000792:	3d01      	subeq	r5, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1c6>
 8000796:	ea43 0306 	orr.w	r3, r3, r6
 800079a:	4770      	bx	lr
 800079c:	ea94 0f0c 	teq	r4, ip
 80007a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a4:	bf18      	it	ne
 80007a6:	ea95 0f0c 	teqne	r5, ip
 80007aa:	d00c      	beq.n	80007c6 <__aeabi_dmul+0x206>
 80007ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b0:	bf18      	it	ne
 80007b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b6:	d1d1      	bne.n	800075c <__aeabi_dmul+0x19c>
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ca:	bf06      	itte	eq
 80007cc:	4610      	moveq	r0, r2
 80007ce:	4619      	moveq	r1, r3
 80007d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d4:	d019      	beq.n	800080a <__aeabi_dmul+0x24a>
 80007d6:	ea94 0f0c 	teq	r4, ip
 80007da:	d102      	bne.n	80007e2 <__aeabi_dmul+0x222>
 80007dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e0:	d113      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007e2:	ea95 0f0c 	teq	r5, ip
 80007e6:	d105      	bne.n	80007f4 <__aeabi_dmul+0x234>
 80007e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ec:	bf1c      	itt	ne
 80007ee:	4610      	movne	r0, r2
 80007f0:	4619      	movne	r1, r3
 80007f2:	d10a      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007f4:	ea81 0103 	eor.w	r1, r1, r3
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000800:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	bd70      	pop	{r4, r5, r6, pc}
 800080a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800080e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000812:	bd70      	pop	{r4, r5, r6, pc}

08000814 <__aeabi_ddiv>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800081a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800081e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000822:	bf1d      	ittte	ne
 8000824:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000828:	ea94 0f0c 	teqne	r4, ip
 800082c:	ea95 0f0c 	teqne	r5, ip
 8000830:	f000 f8a7 	bleq	8000982 <__aeabi_ddiv+0x16e>
 8000834:	eba4 0405 	sub.w	r4, r4, r5
 8000838:	ea81 0e03 	eor.w	lr, r1, r3
 800083c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000840:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000844:	f000 8088 	beq.w	8000958 <__aeabi_ddiv+0x144>
 8000848:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800084c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000850:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000854:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000858:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800085c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000860:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000864:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000868:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800086c:	429d      	cmp	r5, r3
 800086e:	bf08      	it	eq
 8000870:	4296      	cmpeq	r6, r2
 8000872:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000876:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800087a:	d202      	bcs.n	8000882 <__aeabi_ddiv+0x6e>
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	1ab6      	subs	r6, r6, r2
 8000884:	eb65 0503 	sbc.w	r5, r5, r3
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000892:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f4:	d018      	beq.n	8000928 <__aeabi_ddiv+0x114>
 80008f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000906:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000912:	d1c0      	bne.n	8000896 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000918:	d10b      	bne.n	8000932 <__aeabi_ddiv+0x11e>
 800091a:	ea41 0100 	orr.w	r1, r1, r0
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000926:	e7b6      	b.n	8000896 <__aeabi_ddiv+0x82>
 8000928:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800092c:	bf04      	itt	eq
 800092e:	4301      	orreq	r1, r0
 8000930:	2000      	moveq	r0, #0
 8000932:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000936:	bf88      	it	hi
 8000938:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800093c:	f63f aeaf 	bhi.w	800069e <__aeabi_dmul+0xde>
 8000940:	ebb5 0c03 	subs.w	ip, r5, r3
 8000944:	bf04      	itt	eq
 8000946:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094e:	f150 0000 	adcs.w	r0, r0, #0
 8000952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800095c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000960:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000964:	bfc2      	ittt	gt
 8000966:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096e:	bd70      	popgt	{r4, r5, r6, pc}
 8000970:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000974:	f04f 0e00 	mov.w	lr, #0
 8000978:	3c01      	subs	r4, #1
 800097a:	e690      	b.n	800069e <__aeabi_dmul+0xde>
 800097c:	ea45 0e06 	orr.w	lr, r5, r6
 8000980:	e68d      	b.n	800069e <__aeabi_dmul+0xde>
 8000982:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000986:	ea94 0f0c 	teq	r4, ip
 800098a:	bf08      	it	eq
 800098c:	ea95 0f0c 	teqeq	r5, ip
 8000990:	f43f af3b 	beq.w	800080a <__aeabi_dmul+0x24a>
 8000994:	ea94 0f0c 	teq	r4, ip
 8000998:	d10a      	bne.n	80009b0 <__aeabi_ddiv+0x19c>
 800099a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099e:	f47f af34 	bne.w	800080a <__aeabi_dmul+0x24a>
 80009a2:	ea95 0f0c 	teq	r5, ip
 80009a6:	f47f af25 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e72c      	b.n	800080a <__aeabi_dmul+0x24a>
 80009b0:	ea95 0f0c 	teq	r5, ip
 80009b4:	d106      	bne.n	80009c4 <__aeabi_ddiv+0x1b0>
 80009b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ba:	f43f aefd 	beq.w	80007b8 <__aeabi_dmul+0x1f8>
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	e722      	b.n	800080a <__aeabi_dmul+0x24a>
 80009c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ce:	f47f aec5 	bne.w	800075c <__aeabi_dmul+0x19c>
 80009d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d6:	f47f af0d 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009de:	f47f aeeb 	bne.w	80007b8 <__aeabi_dmul+0x1f8>
 80009e2:	e712      	b.n	800080a <__aeabi_dmul+0x24a>

080009e4 <__gedf2>:
 80009e4:	f04f 3cff 	mov.w	ip, #4294967295
 80009e8:	e006      	b.n	80009f8 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__ledf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	e002      	b.n	80009f8 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__cmpdf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0e:	d01b      	beq.n	8000a48 <__cmpdf2+0x54>
 8000a10:	b001      	add	sp, #4
 8000a12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a16:	bf0c      	ite	eq
 8000a18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a1c:	ea91 0f03 	teqne	r1, r3
 8000a20:	bf02      	ittt	eq
 8000a22:	ea90 0f02 	teqeq	r0, r2
 8000a26:	2000      	moveq	r0, #0
 8000a28:	4770      	bxeq	lr
 8000a2a:	f110 0f00 	cmn.w	r0, #0
 8000a2e:	ea91 0f03 	teq	r1, r3
 8000a32:	bf58      	it	pl
 8000a34:	4299      	cmppl	r1, r3
 8000a36:	bf08      	it	eq
 8000a38:	4290      	cmpeq	r0, r2
 8000a3a:	bf2c      	ite	cs
 8000a3c:	17d8      	asrcs	r0, r3, #31
 8000a3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a42:	f040 0001 	orr.w	r0, r0, #1
 8000a46:	4770      	bx	lr
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d102      	bne.n	8000a58 <__cmpdf2+0x64>
 8000a52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a56:	d107      	bne.n	8000a68 <__cmpdf2+0x74>
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	d1d6      	bne.n	8000a10 <__cmpdf2+0x1c>
 8000a62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a66:	d0d3      	beq.n	8000a10 <__cmpdf2+0x1c>
 8000a68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdrcmple>:
 8000a70:	4684      	mov	ip, r0
 8000a72:	4610      	mov	r0, r2
 8000a74:	4662      	mov	r2, ip
 8000a76:	468c      	mov	ip, r1
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	e000      	b.n	8000a80 <__aeabi_cdcmpeq>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cdcmpeq>:
 8000a80:	b501      	push	{r0, lr}
 8000a82:	f7ff ffb7 	bl	80009f4 <__cmpdf2>
 8000a86:	2800      	cmp	r0, #0
 8000a88:	bf48      	it	mi
 8000a8a:	f110 0f00 	cmnmi.w	r0, #0
 8000a8e:	bd01      	pop	{r0, pc}

08000a90 <__aeabi_dcmpeq>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff fff4 	bl	8000a80 <__aeabi_cdcmpeq>
 8000a98:	bf0c      	ite	eq
 8000a9a:	2001      	moveq	r0, #1
 8000a9c:	2000      	movne	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmplt>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffea 	bl	8000a80 <__aeabi_cdcmpeq>
 8000aac:	bf34      	ite	cc
 8000aae:	2001      	movcc	r0, #1
 8000ab0:	2000      	movcs	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmple>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffe0 	bl	8000a80 <__aeabi_cdcmpeq>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpge>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffce 	bl	8000a70 <__aeabi_cdrcmple>
 8000ad4:	bf94      	ite	ls
 8000ad6:	2001      	movls	r0, #1
 8000ad8:	2000      	movhi	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpgt>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffc4 	bl	8000a70 <__aeabi_cdrcmple>
 8000ae8:	bf34      	ite	cc
 8000aea:	2001      	movcc	r0, #1
 8000aec:	2000      	movcs	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpun>:
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x10>
 8000afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b02:	d10a      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d102      	bne.n	8000b14 <__aeabi_dcmpun+0x20>
 8000b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0001 	mov.w	r0, #1
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2iz>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b28:	d215      	bcs.n	8000b56 <__aeabi_d2iz+0x36>
 8000b2a:	d511      	bpl.n	8000b50 <__aeabi_d2iz+0x30>
 8000b2c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b34:	d912      	bls.n	8000b5c <__aeabi_d2iz+0x3c>
 8000b36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	4240      	negne	r0, r0
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5a:	d105      	bne.n	8000b68 <__aeabi_d2iz+0x48>
 8000b5c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b60:	bf08      	it	eq
 8000b62:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <__aeabi_d2f>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b78:	bf24      	itt	cs
 8000b7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b82:	d90d      	bls.n	8000ba0 <__aeabi_d2f+0x30>
 8000b84:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b90:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b98:	bf08      	it	eq
 8000b9a:	f020 0001 	biceq.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ba4:	d121      	bne.n	8000bea <__aeabi_d2f+0x7a>
 8000ba6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000baa:	bfbc      	itt	lt
 8000bac:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bb0:	4770      	bxlt	lr
 8000bb2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bba:	f1c2 0218 	rsb	r2, r2, #24
 8000bbe:	f1c2 0c20 	rsb	ip, r2, #32
 8000bc2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bca:	bf18      	it	ne
 8000bcc:	f040 0001 	orrne.w	r0, r0, #1
 8000bd0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bdc:	ea40 000c 	orr.w	r0, r0, ip
 8000be0:	fa23 f302 	lsr.w	r3, r3, r2
 8000be4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be8:	e7cc      	b.n	8000b84 <__aeabi_d2f+0x14>
 8000bea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bee:	d107      	bne.n	8000c00 <__aeabi_d2f+0x90>
 8000bf0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf4:	bf1e      	ittt	ne
 8000bf6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bfa:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bfe:	4770      	bxne	lr
 8000c00:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c04:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c08:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__aeabi_uldivmod>:
 8000c10:	b953      	cbnz	r3, 8000c28 <__aeabi_uldivmod+0x18>
 8000c12:	b94a      	cbnz	r2, 8000c28 <__aeabi_uldivmod+0x18>
 8000c14:	2900      	cmp	r1, #0
 8000c16:	bf08      	it	eq
 8000c18:	2800      	cmpeq	r0, #0
 8000c1a:	bf1c      	itt	ne
 8000c1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c20:	f04f 30ff 	movne.w	r0, #4294967295
 8000c24:	f000 b9b0 	b.w	8000f88 <__aeabi_idiv0>
 8000c28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c30:	f000 f806 	bl	8000c40 <__udivmoddi4>
 8000c34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3c:	b004      	add	sp, #16
 8000c3e:	4770      	bx	lr

08000c40 <__udivmoddi4>:
 8000c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c44:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000c46:	4688      	mov	r8, r1
 8000c48:	4604      	mov	r4, r0
 8000c4a:	468e      	mov	lr, r1
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d14a      	bne.n	8000ce6 <__udivmoddi4+0xa6>
 8000c50:	428a      	cmp	r2, r1
 8000c52:	4617      	mov	r7, r2
 8000c54:	d95f      	bls.n	8000d16 <__udivmoddi4+0xd6>
 8000c56:	fab2 f682 	clz	r6, r2
 8000c5a:	b14e      	cbz	r6, 8000c70 <__udivmoddi4+0x30>
 8000c5c:	f1c6 0320 	rsb	r3, r6, #32
 8000c60:	fa01 fe06 	lsl.w	lr, r1, r6
 8000c64:	40b7      	lsls	r7, r6
 8000c66:	40b4      	lsls	r4, r6
 8000c68:	fa20 f303 	lsr.w	r3, r0, r3
 8000c6c:	ea43 0e0e 	orr.w	lr, r3, lr
 8000c70:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c74:	fa1f fc87 	uxth.w	ip, r7
 8000c78:	0c23      	lsrs	r3, r4, #16
 8000c7a:	fbbe f1f8 	udiv	r1, lr, r8
 8000c7e:	fb08 ee11 	mls	lr, r8, r1, lr
 8000c82:	fb01 f20c 	mul.w	r2, r1, ip
 8000c86:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d907      	bls.n	8000c9e <__udivmoddi4+0x5e>
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c94:	d202      	bcs.n	8000c9c <__udivmoddi4+0x5c>
 8000c96:	429a      	cmp	r2, r3
 8000c98:	f200 8154 	bhi.w	8000f44 <__udivmoddi4+0x304>
 8000c9c:	4601      	mov	r1, r0
 8000c9e:	1a9b      	subs	r3, r3, r2
 8000ca0:	b2a2      	uxth	r2, r4
 8000ca2:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca6:	fb08 3310 	mls	r3, r8, r0, r3
 8000caa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000cb2:	4594      	cmp	ip, r2
 8000cb4:	d90b      	bls.n	8000cce <__udivmoddi4+0x8e>
 8000cb6:	18ba      	adds	r2, r7, r2
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	bf2c      	ite	cs
 8000cbe:	2401      	movcs	r4, #1
 8000cc0:	2400      	movcc	r4, #0
 8000cc2:	4594      	cmp	ip, r2
 8000cc4:	d902      	bls.n	8000ccc <__udivmoddi4+0x8c>
 8000cc6:	2c00      	cmp	r4, #0
 8000cc8:	f000 813f 	beq.w	8000f4a <__udivmoddi4+0x30a>
 8000ccc:	4618      	mov	r0, r3
 8000cce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cd2:	eba2 020c 	sub.w	r2, r2, ip
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	b11d      	cbz	r5, 8000ce2 <__udivmoddi4+0xa2>
 8000cda:	40f2      	lsrs	r2, r6
 8000cdc:	2300      	movs	r3, #0
 8000cde:	e9c5 2300 	strd	r2, r3, [r5]
 8000ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d905      	bls.n	8000cf6 <__udivmoddi4+0xb6>
 8000cea:	b10d      	cbz	r5, 8000cf0 <__udivmoddi4+0xb0>
 8000cec:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e7f5      	b.n	8000ce2 <__udivmoddi4+0xa2>
 8000cf6:	fab3 f183 	clz	r1, r3
 8000cfa:	2900      	cmp	r1, #0
 8000cfc:	d14e      	bne.n	8000d9c <__udivmoddi4+0x15c>
 8000cfe:	4543      	cmp	r3, r8
 8000d00:	f0c0 8112 	bcc.w	8000f28 <__udivmoddi4+0x2e8>
 8000d04:	4282      	cmp	r2, r0
 8000d06:	f240 810f 	bls.w	8000f28 <__udivmoddi4+0x2e8>
 8000d0a:	4608      	mov	r0, r1
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d0e8      	beq.n	8000ce2 <__udivmoddi4+0xa2>
 8000d10:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d14:	e7e5      	b.n	8000ce2 <__udivmoddi4+0xa2>
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f000 80ac 	beq.w	8000e74 <__udivmoddi4+0x234>
 8000d1c:	fab2 f682 	clz	r6, r2
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	f040 80bb 	bne.w	8000e9c <__udivmoddi4+0x25c>
 8000d26:	1a8b      	subs	r3, r1, r2
 8000d28:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000d2c:	b2bc      	uxth	r4, r7
 8000d2e:	2101      	movs	r1, #1
 8000d30:	0c02      	lsrs	r2, r0, #16
 8000d32:	b280      	uxth	r0, r0
 8000d34:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d3c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000d40:	fb04 f20c 	mul.w	r2, r4, ip
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d90e      	bls.n	8000d66 <__udivmoddi4+0x126>
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d4e:	bf2c      	ite	cs
 8000d50:	f04f 0901 	movcs.w	r9, #1
 8000d54:	f04f 0900 	movcc.w	r9, #0
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d903      	bls.n	8000d64 <__udivmoddi4+0x124>
 8000d5c:	f1b9 0f00 	cmp.w	r9, #0
 8000d60:	f000 80ec 	beq.w	8000f3c <__udivmoddi4+0x2fc>
 8000d64:	46c4      	mov	ip, r8
 8000d66:	1a9b      	subs	r3, r3, r2
 8000d68:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d6c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d70:	fb04 f408 	mul.w	r4, r4, r8
 8000d74:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000d78:	4294      	cmp	r4, r2
 8000d7a:	d90b      	bls.n	8000d94 <__udivmoddi4+0x154>
 8000d7c:	18ba      	adds	r2, r7, r2
 8000d7e:	f108 33ff 	add.w	r3, r8, #4294967295
 8000d82:	bf2c      	ite	cs
 8000d84:	2001      	movcs	r0, #1
 8000d86:	2000      	movcc	r0, #0
 8000d88:	4294      	cmp	r4, r2
 8000d8a:	d902      	bls.n	8000d92 <__udivmoddi4+0x152>
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	f000 80d1 	beq.w	8000f34 <__udivmoddi4+0x2f4>
 8000d92:	4698      	mov	r8, r3
 8000d94:	1b12      	subs	r2, r2, r4
 8000d96:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000d9a:	e79d      	b.n	8000cd8 <__udivmoddi4+0x98>
 8000d9c:	f1c1 0620 	rsb	r6, r1, #32
 8000da0:	408b      	lsls	r3, r1
 8000da2:	fa08 f401 	lsl.w	r4, r8, r1
 8000da6:	fa00 f901 	lsl.w	r9, r0, r1
 8000daa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dae:	fa28 f806 	lsr.w	r8, r8, r6
 8000db2:	408a      	lsls	r2, r1
 8000db4:	431f      	orrs	r7, r3
 8000db6:	fa20 f306 	lsr.w	r3, r0, r6
 8000dba:	0c38      	lsrs	r0, r7, #16
 8000dbc:	4323      	orrs	r3, r4
 8000dbe:	fa1f fc87 	uxth.w	ip, r7
 8000dc2:	0c1c      	lsrs	r4, r3, #16
 8000dc4:	fbb8 fef0 	udiv	lr, r8, r0
 8000dc8:	fb00 881e 	mls	r8, r0, lr, r8
 8000dcc:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000dd0:	fb0e f80c 	mul.w	r8, lr, ip
 8000dd4:	45a0      	cmp	r8, r4
 8000dd6:	d90e      	bls.n	8000df6 <__udivmoddi4+0x1b6>
 8000dd8:	193c      	adds	r4, r7, r4
 8000dda:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dde:	bf2c      	ite	cs
 8000de0:	f04f 0b01 	movcs.w	fp, #1
 8000de4:	f04f 0b00 	movcc.w	fp, #0
 8000de8:	45a0      	cmp	r8, r4
 8000dea:	d903      	bls.n	8000df4 <__udivmoddi4+0x1b4>
 8000dec:	f1bb 0f00 	cmp.w	fp, #0
 8000df0:	f000 80b8 	beq.w	8000f64 <__udivmoddi4+0x324>
 8000df4:	46d6      	mov	lr, sl
 8000df6:	eba4 0408 	sub.w	r4, r4, r8
 8000dfa:	fa1f f883 	uxth.w	r8, r3
 8000dfe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e02:	fb00 4413 	mls	r4, r0, r3, r4
 8000e06:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e0a:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000e0e:	45a4      	cmp	ip, r4
 8000e10:	d90e      	bls.n	8000e30 <__udivmoddi4+0x1f0>
 8000e12:	193c      	adds	r4, r7, r4
 8000e14:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e18:	bf2c      	ite	cs
 8000e1a:	f04f 0801 	movcs.w	r8, #1
 8000e1e:	f04f 0800 	movcc.w	r8, #0
 8000e22:	45a4      	cmp	ip, r4
 8000e24:	d903      	bls.n	8000e2e <__udivmoddi4+0x1ee>
 8000e26:	f1b8 0f00 	cmp.w	r8, #0
 8000e2a:	f000 809f 	beq.w	8000f6c <__udivmoddi4+0x32c>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e34:	eba4 040c 	sub.w	r4, r4, ip
 8000e38:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e3c:	4564      	cmp	r4, ip
 8000e3e:	4673      	mov	r3, lr
 8000e40:	46e0      	mov	r8, ip
 8000e42:	d302      	bcc.n	8000e4a <__udivmoddi4+0x20a>
 8000e44:	d107      	bne.n	8000e56 <__udivmoddi4+0x216>
 8000e46:	45f1      	cmp	r9, lr
 8000e48:	d205      	bcs.n	8000e56 <__udivmoddi4+0x216>
 8000e4a:	ebbe 0302 	subs.w	r3, lr, r2
 8000e4e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e52:	3801      	subs	r0, #1
 8000e54:	46e0      	mov	r8, ip
 8000e56:	b15d      	cbz	r5, 8000e70 <__udivmoddi4+0x230>
 8000e58:	ebb9 0203 	subs.w	r2, r9, r3
 8000e5c:	eb64 0408 	sbc.w	r4, r4, r8
 8000e60:	fa04 f606 	lsl.w	r6, r4, r6
 8000e64:	fa22 f301 	lsr.w	r3, r2, r1
 8000e68:	40cc      	lsrs	r4, r1
 8000e6a:	431e      	orrs	r6, r3
 8000e6c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e70:	2100      	movs	r1, #0
 8000e72:	e736      	b.n	8000ce2 <__udivmoddi4+0xa2>
 8000e74:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e78:	0c01      	lsrs	r1, r0, #16
 8000e7a:	4614      	mov	r4, r2
 8000e7c:	b280      	uxth	r0, r0
 8000e7e:	4696      	mov	lr, r2
 8000e80:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000e84:	2620      	movs	r6, #32
 8000e86:	4690      	mov	r8, r2
 8000e88:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	fbb1 f1f2 	udiv	r1, r1, r2
 8000e92:	eba3 0308 	sub.w	r3, r3, r8
 8000e96:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e9a:	e74b      	b.n	8000d34 <__udivmoddi4+0xf4>
 8000e9c:	40b7      	lsls	r7, r6
 8000e9e:	f1c6 0320 	rsb	r3, r6, #32
 8000ea2:	fa01 f206 	lsl.w	r2, r1, r6
 8000ea6:	fa21 f803 	lsr.w	r8, r1, r3
 8000eaa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eae:	fa20 f303 	lsr.w	r3, r0, r3
 8000eb2:	b2bc      	uxth	r4, r7
 8000eb4:	40b0      	lsls	r0, r6
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	0c02      	lsrs	r2, r0, #16
 8000eba:	0c19      	lsrs	r1, r3, #16
 8000ebc:	b280      	uxth	r0, r0
 8000ebe:	fbb8 f9fe 	udiv	r9, r8, lr
 8000ec2:	fb0e 8819 	mls	r8, lr, r9, r8
 8000ec6:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	4588      	cmp	r8, r1
 8000ed0:	d951      	bls.n	8000f76 <__udivmoddi4+0x336>
 8000ed2:	1879      	adds	r1, r7, r1
 8000ed4:	f109 3cff 	add.w	ip, r9, #4294967295
 8000ed8:	bf2c      	ite	cs
 8000eda:	f04f 0a01 	movcs.w	sl, #1
 8000ede:	f04f 0a00 	movcc.w	sl, #0
 8000ee2:	4588      	cmp	r8, r1
 8000ee4:	d902      	bls.n	8000eec <__udivmoddi4+0x2ac>
 8000ee6:	f1ba 0f00 	cmp.w	sl, #0
 8000eea:	d031      	beq.n	8000f50 <__udivmoddi4+0x310>
 8000eec:	eba1 0108 	sub.w	r1, r1, r8
 8000ef0:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef4:	fb09 f804 	mul.w	r8, r9, r4
 8000ef8:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f02:	4543      	cmp	r3, r8
 8000f04:	d235      	bcs.n	8000f72 <__udivmoddi4+0x332>
 8000f06:	18fb      	adds	r3, r7, r3
 8000f08:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0c:	bf2c      	ite	cs
 8000f0e:	f04f 0a01 	movcs.w	sl, #1
 8000f12:	f04f 0a00 	movcc.w	sl, #0
 8000f16:	4543      	cmp	r3, r8
 8000f18:	d2bb      	bcs.n	8000e92 <__udivmoddi4+0x252>
 8000f1a:	f1ba 0f00 	cmp.w	sl, #0
 8000f1e:	d1b8      	bne.n	8000e92 <__udivmoddi4+0x252>
 8000f20:	f1a9 0102 	sub.w	r1, r9, #2
 8000f24:	443b      	add	r3, r7
 8000f26:	e7b4      	b.n	8000e92 <__udivmoddi4+0x252>
 8000f28:	1a84      	subs	r4, r0, r2
 8000f2a:	eb68 0203 	sbc.w	r2, r8, r3
 8000f2e:	2001      	movs	r0, #1
 8000f30:	4696      	mov	lr, r2
 8000f32:	e6eb      	b.n	8000d0c <__udivmoddi4+0xcc>
 8000f34:	443a      	add	r2, r7
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	e72b      	b.n	8000d94 <__udivmoddi4+0x154>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	443b      	add	r3, r7
 8000f42:	e710      	b.n	8000d66 <__udivmoddi4+0x126>
 8000f44:	3902      	subs	r1, #2
 8000f46:	443b      	add	r3, r7
 8000f48:	e6a9      	b.n	8000c9e <__udivmoddi4+0x5e>
 8000f4a:	443a      	add	r2, r7
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e6be      	b.n	8000cce <__udivmoddi4+0x8e>
 8000f50:	eba7 0808 	sub.w	r8, r7, r8
 8000f54:	f1a9 0c02 	sub.w	ip, r9, #2
 8000f58:	4441      	add	r1, r8
 8000f5a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f5e:	fb09 f804 	mul.w	r8, r9, r4
 8000f62:	e7c9      	b.n	8000ef8 <__udivmoddi4+0x2b8>
 8000f64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f68:	443c      	add	r4, r7
 8000f6a:	e744      	b.n	8000df6 <__udivmoddi4+0x1b6>
 8000f6c:	3b02      	subs	r3, #2
 8000f6e:	443c      	add	r4, r7
 8000f70:	e75e      	b.n	8000e30 <__udivmoddi4+0x1f0>
 8000f72:	4649      	mov	r1, r9
 8000f74:	e78d      	b.n	8000e92 <__udivmoddi4+0x252>
 8000f76:	eba1 0108 	sub.w	r1, r1, r8
 8000f7a:	46cc      	mov	ip, r9
 8000f7c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f80:	fb09 f804 	mul.w	r8, r9, r4
 8000f84:	e7b8      	b.n	8000ef8 <__udivmoddi4+0x2b8>
 8000f86:	bf00      	nop

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	@ 0x28
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
 8000fac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fae:	4b2f      	ldr	r3, [pc, #188]	@ (800106c <MX_ADC1_Init+0xe0>)
 8000fb0:	4a2f      	ldr	r2, [pc, #188]	@ (8001070 <MX_ADC1_Init+0xe4>)
 8000fb2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fb4:	4b2d      	ldr	r3, [pc, #180]	@ (800106c <MX_ADC1_Init+0xe0>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fba:	4b2c      	ldr	r3, [pc, #176]	@ (800106c <MX_ADC1_Init+0xe0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc0:	4b2a      	ldr	r3, [pc, #168]	@ (800106c <MX_ADC1_Init+0xe0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fc6:	4b29      	ldr	r3, [pc, #164]	@ (800106c <MX_ADC1_Init+0xe0>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fcc:	4b27      	ldr	r3, [pc, #156]	@ (800106c <MX_ADC1_Init+0xe0>)
 8000fce:	2204      	movs	r2, #4
 8000fd0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fd2:	4b26      	ldr	r3, [pc, #152]	@ (800106c <MX_ADC1_Init+0xe0>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fd8:	4b24      	ldr	r3, [pc, #144]	@ (800106c <MX_ADC1_Init+0xe0>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000fde:	4b23      	ldr	r3, [pc, #140]	@ (800106c <MX_ADC1_Init+0xe0>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fe4:	4b21      	ldr	r3, [pc, #132]	@ (800106c <MX_ADC1_Init+0xe0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fec:	4b1f      	ldr	r3, [pc, #124]	@ (800106c <MX_ADC1_Init+0xe0>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800106c <MX_ADC1_Init+0xe0>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800106c <MX_ADC1_Init+0xe0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001000:	4b1a      	ldr	r3, [pc, #104]	@ (800106c <MX_ADC1_Init+0xe0>)
 8001002:	2200      	movs	r2, #0
 8001004:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001006:	4b19      	ldr	r3, [pc, #100]	@ (800106c <MX_ADC1_Init+0xe0>)
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800100e:	4817      	ldr	r0, [pc, #92]	@ (800106c <MX_ADC1_Init+0xe0>)
 8001010:	f001 fdd0 	bl	8002bb4 <HAL_ADC_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800101a:	f000 ffed 	bl	8001ff8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4619      	mov	r1, r3
 8001028:	4810      	ldr	r0, [pc, #64]	@ (800106c <MX_ADC1_Init+0xe0>)
 800102a:	f002 fb1f 	bl	800366c <HAL_ADCEx_MultiModeConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001034:	f000 ffe0 	bl	8001ff8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001038:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <MX_ADC1_Init+0xe8>)
 800103a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800103c:	2306      	movs	r3, #6
 800103e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001044:	237f      	movs	r3, #127	@ 0x7f
 8001046:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001048:	2304      	movs	r3, #4
 800104a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	@ (800106c <MX_ADC1_Init+0xe0>)
 8001056:	f001 fef9 	bl	8002e4c <HAL_ADC_ConfigChannel>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001060:	f000 ffca 	bl	8001ff8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	@ 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200001f4 	.word	0x200001f4
 8001070:	42028000 	.word	0x42028000
 8001074:	0c900008 	.word	0x0c900008

08001078 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b0ae      	sub	sp, #184	@ 0xb8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	2294      	movs	r2, #148	@ 0x94
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f009 f83c 	bl	800a116 <memset>
  if(adcHandle->Instance==ADC1)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001120 <HAL_ADC_MspInit+0xa8>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d137      	bne.n	8001118 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010ac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80010ae:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80010b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 ff16 	bl	8004eec <HAL_RCCEx_PeriphCLKConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80010c6:	f000 ff97 	bl	8001ff8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010ca:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <HAL_ADC_MspInit+0xac>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	4a15      	ldr	r2, [pc, #84]	@ (8001124 <HAL_ADC_MspInit+0xac>)
 80010d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d6:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <HAL_ADC_MspInit+0xac>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <HAL_ADC_MspInit+0xac>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001124 <HAL_ADC_MspInit+0xac>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001124 <HAL_ADC_MspInit+0xac>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80010fa:	2304      	movs	r3, #4
 80010fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001100:	2303      	movs	r3, #3
 8001102:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800110c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001110:	4619      	mov	r1, r3
 8001112:	4805      	ldr	r0, [pc, #20]	@ (8001128 <HAL_ADC_MspInit+0xb0>)
 8001114:	f002 fc02 	bl	800391c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001118:	bf00      	nop
 800111a:	37b8      	adds	r7, #184	@ 0xb8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	42028000 	.word	0x42028000
 8001124:	40021000 	.word	0x40021000
 8001128:	42020800 	.word	0x42020800

0800112c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001142:	4b3b      	ldr	r3, [pc, #236]	@ (8001230 <MX_GPIO_Init+0x104>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	4a3a      	ldr	r2, [pc, #232]	@ (8001230 <MX_GPIO_Init+0x104>)
 8001148:	f043 0304 	orr.w	r3, r3, #4
 800114c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114e:	4b38      	ldr	r3, [pc, #224]	@ (8001230 <MX_GPIO_Init+0x104>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	4b35      	ldr	r3, [pc, #212]	@ (8001230 <MX_GPIO_Init+0x104>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	4a34      	ldr	r2, [pc, #208]	@ (8001230 <MX_GPIO_Init+0x104>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001166:	4b32      	ldr	r3, [pc, #200]	@ (8001230 <MX_GPIO_Init+0x104>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	4b2f      	ldr	r3, [pc, #188]	@ (8001230 <MX_GPIO_Init+0x104>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001176:	4a2e      	ldr	r2, [pc, #184]	@ (8001230 <MX_GPIO_Init+0x104>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800117e:	4b2c      	ldr	r3, [pc, #176]	@ (8001230 <MX_GPIO_Init+0x104>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800118a:	2201      	movs	r2, #1
 800118c:	2110      	movs	r1, #16
 800118e:	4829      	ldr	r0, [pc, #164]	@ (8001234 <MX_GPIO_Init+0x108>)
 8001190:	f002 fd44 	bl	8003c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	2180      	movs	r1, #128	@ 0x80
 8001198:	4827      	ldr	r0, [pc, #156]	@ (8001238 <MX_GPIO_Init+0x10c>)
 800119a:	f002 fd3f 	bl	8003c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011a4:	4823      	ldr	r0, [pc, #140]	@ (8001234 <MX_GPIO_Init+0x108>)
 80011a6:	f002 fd39 	bl	8003c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	21a0      	movs	r1, #160	@ 0xa0
 80011ae:	4823      	ldr	r0, [pc, #140]	@ (800123c <MX_GPIO_Init+0x110>)
 80011b0:	f002 fd34 	bl	8003c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 LED_RED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LED_RED_Pin;
 80011b4:	f44f 7304 	mov.w	r3, #528	@ 0x210
 80011b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	4619      	mov	r1, r3
 80011cc:	4819      	ldr	r0, [pc, #100]	@ (8001234 <MX_GPIO_Init+0x108>)
 80011ce:	f002 fba5 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80011d2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	4619      	mov	r1, r3
 80011e8:	4814      	ldr	r0, [pc, #80]	@ (800123c <MX_GPIO_Init+0x110>)
 80011ea:	f002 fb97 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80011ee:	2380      	movs	r3, #128	@ 0x80
 80011f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f107 030c 	add.w	r3, r7, #12
 8001202:	4619      	mov	r1, r3
 8001204:	480c      	ldr	r0, [pc, #48]	@ (8001238 <MX_GPIO_Init+0x10c>)
 8001206:	f002 fb89 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 800120a:	23a0      	movs	r3, #160	@ 0xa0
 800120c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120e:	2301      	movs	r3, #1
 8001210:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	4619      	mov	r1, r3
 8001220:	4806      	ldr	r0, [pc, #24]	@ (800123c <MX_GPIO_Init+0x110>)
 8001222:	f002 fb7b 	bl	800391c <HAL_GPIO_Init>

}
 8001226:	bf00      	nop
 8001228:	3720      	adds	r7, #32
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000
 8001234:	42020000 	.word	0x42020000
 8001238:	42020800 	.word	0x42020800
 800123c:	42020400 	.word	0x42020400

08001240 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001248:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800124c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	2b00      	cmp	r3, #0
 8001256:	d013      	beq.n	8001280 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001258:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800125c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001260:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001264:	2b00      	cmp	r3, #0
 8001266:	d00b      	beq.n	8001280 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001268:	e000      	b.n	800126c <ITM_SendChar+0x2c>
    {
      __NOP();
 800126a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800126c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f9      	beq.n	800126a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001276:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001280:	687b      	ldr	r3, [r7, #4]
}
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <readRegisters>:

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8001290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001294:	b089      	sub	sp, #36	@ 0x24
 8001296:	af02      	add	r7, sp, #8
 8001298:	4603      	mov	r3, r0
 800129a:	603a      	str	r2, [r7, #0]
 800129c:	71fb      	strb	r3, [r7, #7]
 800129e:	460b      	mov	r3, r1
 80012a0:	71bb      	strb	r3, [r7, #6]
 80012a2:	466b      	mov	r3, sp
 80012a4:	461e      	mov	r6, r3

	uint8_t tx = subAddress | 0x80;
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	73bb      	strb	r3, [r7, #14]
	uint8_t dummy_tx[count];
 80012b0:	79b9      	ldrb	r1, [r7, #6]
 80012b2:	460b      	mov	r3, r1
 80012b4:	3b01      	subs	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	b2cb      	uxtb	r3, r1
 80012ba:	2200      	movs	r2, #0
 80012bc:	4698      	mov	r8, r3
 80012be:	4691      	mov	r9, r2
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012d4:	b2cb      	uxtb	r3, r1
 80012d6:	2200      	movs	r2, #0
 80012d8:	461c      	mov	r4, r3
 80012da:	4615      	mov	r5, r2
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	00eb      	lsls	r3, r5, #3
 80012e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012ea:	00e2      	lsls	r2, r4, #3
 80012ec:	460b      	mov	r3, r1
 80012ee:	3307      	adds	r3, #7
 80012f0:	08db      	lsrs	r3, r3, #3
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	ebad 0d03 	sub.w	sp, sp, r3
 80012f8:	ab02      	add	r3, sp, #8
 80012fa:	3300      	adds	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
	memset(dummy_tx, 0, count*sizeof(dummy_tx[0]));
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	461a      	mov	r2, r3
 8001302:	2100      	movs	r1, #0
 8001304:	6938      	ldr	r0, [r7, #16]
 8001306:	f008 ff06 	bl	800a116 <memset>
	uint8_t dummy_rx;
	HAL_StatusTypeDef ret;

	HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	2110      	movs	r1, #16
 800130e:	4814      	ldr	r0, [pc, #80]	@ (8001360 <readRegisters+0xd0>)
 8001310:	f002 fc84 	bl	8003c1c <HAL_GPIO_WritePin>

	ret = HAL_SPI_TransmitReceive(&hspi1, &tx, &dummy_rx, 1, HAL_MAX_DELAY);
 8001314:	f107 020d 	add.w	r2, r7, #13
 8001318:	f107 010e 	add.w	r1, r7, #14
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2301      	movs	r3, #1
 8001324:	480f      	ldr	r0, [pc, #60]	@ (8001364 <readRegisters+0xd4>)
 8001326:	f004 fe49 	bl	8005fbc <HAL_SPI_TransmitReceive>
 800132a:	4603      	mov	r3, r0
 800132c:	73fb      	strb	r3, [r7, #15]

	ret = HAL_SPI_TransmitReceive(&hspi1, dummy_tx, dest, count, HAL_MAX_DELAY);
 800132e:	79bb      	ldrb	r3, [r7, #6]
 8001330:	b29b      	uxth	r3, r3
 8001332:	f04f 32ff 	mov.w	r2, #4294967295
 8001336:	9200      	str	r2, [sp, #0]
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	6939      	ldr	r1, [r7, #16]
 800133c:	4809      	ldr	r0, [pc, #36]	@ (8001364 <readRegisters+0xd4>)
 800133e:	f004 fe3d 	bl	8005fbc <HAL_SPI_TransmitReceive>
 8001342:	4603      	mov	r3, r0
 8001344:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);
 8001346:	2201      	movs	r2, #1
 8001348:	2110      	movs	r1, #16
 800134a:	4805      	ldr	r0, [pc, #20]	@ (8001360 <readRegisters+0xd0>)
 800134c:	f002 fc66 	bl	8003c1c <HAL_GPIO_WritePin>

	return 1;
 8001350:	2301      	movs	r3, #1
 8001352:	46b5      	mov	sp, r6
}
 8001354:	4618      	mov	r0, r3
 8001356:	371c      	adds	r7, #28
 8001358:	46bd      	mov	sp, r7
 800135a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800135e:	bf00      	nop
 8001360:	42020000 	.word	0x42020000
 8001364:	20000338 	.word	0x20000338

08001368 <writeRegister>:

void writeRegister(uint8_t subAddress, uint8_t data){
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	460a      	mov	r2, r1
 8001372:	71fb      	strb	r3, [r7, #7]
 8001374:	4613      	mov	r3, r2
 8001376:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buf[2] = {subAddress, data};
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	733b      	strb	r3, [r7, #12]
 800137c:	79bb      	ldrb	r3, [r7, #6]
 800137e:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret;

	HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2110      	movs	r1, #16
 8001384:	480a      	ldr	r0, [pc, #40]	@ (80013b0 <writeRegister+0x48>)
 8001386:	f002 fc49 	bl	8003c1c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, tx_buf, 2, HAL_MAX_DELAY);
 800138a:	f107 010c 	add.w	r1, r7, #12
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	2202      	movs	r2, #2
 8001394:	4807      	ldr	r0, [pc, #28]	@ (80013b4 <writeRegister+0x4c>)
 8001396:	f004 fc9c 	bl	8005cd2 <HAL_SPI_Transmit>
 800139a:	4603      	mov	r3, r0
 800139c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	2110      	movs	r1, #16
 80013a2:	4803      	ldr	r0, [pc, #12]	@ (80013b0 <writeRegister+0x48>)
 80013a4:	f002 fc3a 	bl	8003c1c <HAL_GPIO_WritePin>
//	  else{
//		return -1;
//	  }
//
//	return 1;
}
 80013a8:	bf00      	nop
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	42020000 	.word	0x42020000
 80013b4:	20000338 	.word	0x20000338

080013b8 <begin>:

int begin(){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);
 80013be:	2201      	movs	r2, #1
 80013c0:	2110      	movs	r1, #16
 80013c2:	480e      	ldr	r0, [pc, #56]	@ (80013fc <begin+0x44>)
 80013c4:	f002 fc2a 	bl	8003c1c <HAL_GPIO_WritePin>
	reset();
 80013c8:	f000 f831 	bl	800142e <reset>
	uint8_t address = whoAmI();
 80013cc:	f000 f83d 	bl	800144a <whoAmI>
 80013d0:	4603      	mov	r3, r0
 80013d2:	71fb      	strb	r3, [r7, #7]
	setLowNoiseMode();
 80013d4:	f000 f823 	bl	800141e <setLowNoiseMode>
	setAccelFS(0b01101001);
 80013d8:	2069      	movs	r0, #105	@ 0x69
 80013da:	f000 f963 	bl	80016a4 <setAccelFS>
	configureNotchFilter();
 80013de:	f000 f9a3 	bl	8001728 <configureNotchFilter>
	setAntiAliasFilter(213, true, true);
 80013e2:	2201      	movs	r2, #1
 80013e4:	2101      	movs	r1, #1
 80013e6:	20d5      	movs	r0, #213	@ 0xd5
 80013e8:	f000 faec 	bl	80019c4 <setAntiAliasFilter>
	calibrateGyro();
 80013ec:	f000 f88c 	bl	8001508 <calibrateGyro>
	return address;
 80013f0:	79fb      	ldrb	r3, [r7, #7]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	42020000 	.word	0x42020000

08001400 <setBank>:

int setBank(uint8_t bank){
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
	writeRegister(REG_BANK_SEL , bank);
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	4619      	mov	r1, r3
 800140e:	2076      	movs	r0, #118	@ 0x76
 8001410:	f7ff ffaa 	bl	8001368 <writeRegister>
	return 1;
 8001414:	2301      	movs	r3, #1
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <setLowNoiseMode>:

void setLowNoiseMode(){
 800141e:	b580      	push	{r7, lr}
 8001420:	af00      	add	r7, sp, #0
	writeRegister(UB0_REG_PWR_MGMT0, 0x0F);
 8001422:	210f      	movs	r1, #15
 8001424:	204e      	movs	r0, #78	@ 0x4e
 8001426:	f7ff ff9f 	bl	8001368 <writeRegister>
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}

0800142e <reset>:

void reset(){
 800142e:	b580      	push	{r7, lr}
 8001430:	af00      	add	r7, sp, #0
	setBank(0);
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff ffe4 	bl	8001400 <setBank>

	writeRegister(UB0_REG_DEVICE_CONFIG, 0x01);
 8001438:	2101      	movs	r1, #1
 800143a:	2011      	movs	r0, #17
 800143c:	f7ff ff94 	bl	8001368 <writeRegister>

	HAL_Delay(1);
 8001440:	2001      	movs	r0, #1
 8001442:	f001 f9f3 	bl	800282c <HAL_Delay>
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}

0800144a <whoAmI>:

uint8_t whoAmI(){
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
	uint8_t buffer;
	readRegisters(UB0_REG_WHO_AM_I, 1, &buffer);
 8001450:	1dfb      	adds	r3, r7, #7
 8001452:	461a      	mov	r2, r3
 8001454:	2101      	movs	r1, #1
 8001456:	2075      	movs	r0, #117	@ 0x75
 8001458:	f7ff ff1a 	bl	8001290 <readRegisters>
	return buffer;
 800145c:	79fb      	ldrb	r3, [r7, #7]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <AGT>:

void AGT(uint8_t *dataBuffer){
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
	readRegisters(UB0_REG_TEMP_DATA1, 14, dataBuffer);
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	210e      	movs	r1, #14
 8001472:	201d      	movs	r0, #29
 8001474:	f7ff ff0c 	bl	8001290 <readRegisters>
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <setGyroFS>:
float _gyrB[3] = {0, 0, 0};
float _gyr[3] = {0, 0, 0};
uint8_t gyroBuffer[14];
int16_t rawMeasGyro[7];

void setGyroFS(uint8_t fssel){
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]

	setBank(0);
 800148a:	2000      	movs	r0, #0
 800148c:	f7ff ffb8 	bl	8001400 <setBank>
	uint8_t reg;
	readRegisters(0x4F, 1, &reg);
 8001490:	f107 030f 	add.w	r3, r7, #15
 8001494:	461a      	mov	r2, r3
 8001496:	2101      	movs	r1, #1
 8001498:	204f      	movs	r0, #79	@ 0x4f
 800149a:	f7ff fef9 	bl	8001290 <readRegisters>
	reg = (fssel << 5) | (reg & 0x1F);
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	015b      	lsls	r3, r3, #5
 80014a4:	b25a      	sxtb	r2, r3
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	f003 031f 	and.w	r3, r3, #31
 80014ae:	b25b      	sxtb	r3, r3
 80014b0:	4313      	orrs	r3, r2
 80014b2:	b25b      	sxtb	r3, r3
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	73fb      	strb	r3, [r7, #15]
	writeRegister(0x4F, reg);
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	4619      	mov	r1, r3
 80014bc:	204f      	movs	r0, #79	@ 0x4f
 80014be:	f7ff ff53 	bl	8001368 <writeRegister>
	_gyroScale = (2000.0f / (float)(1 << fssel)) / 32768.0f;
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	2201      	movs	r2, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	ee07 3a90 	vmov	s15, r3
 80014ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80014f8 <setGyroFS+0x78>
 80014d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014da:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80014fc <setGyroFS+0x7c>
 80014de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e2:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <setGyroFS+0x80>)
 80014e4:	edc3 7a00 	vstr	s15, [r3]
	_gyroFS = fssel;
 80014e8:	4a06      	ldr	r2, [pc, #24]	@ (8001504 <setGyroFS+0x84>)
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	7013      	strb	r3, [r2, #0]
}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	44fa0000 	.word	0x44fa0000
 80014fc:	47000000 	.word	0x47000000
 8001500:	2000025c 	.word	0x2000025c
 8001504:	20000260 	.word	0x20000260

08001508 <calibrateGyro>:

void calibrateGyro(){
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
	const uint8_t current_fssel = _gyroFS;
 800150e:	4b5e      	ldr	r3, [pc, #376]	@ (8001688 <calibrateGyro+0x180>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	70fb      	strb	r3, [r7, #3]
	setGyroFS(0x03);
 8001514:	2003      	movs	r0, #3
 8001516:	f7ff ffb3 	bl	8001480 <setGyroFS>
	_gyroBD[0] = 0;
 800151a:	4b5c      	ldr	r3, [pc, #368]	@ (800168c <calibrateGyro+0x184>)
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
	_gyroBD[1] = 0;
 8001522:	4b5a      	ldr	r3, [pc, #360]	@ (800168c <calibrateGyro+0x184>)
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	605a      	str	r2, [r3, #4]
	_gyroBD[2] = 0;
 800152a:	4b58      	ldr	r3, [pc, #352]	@ (800168c <calibrateGyro+0x184>)
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
	for (size_t i=0; i < 1000; i++) {
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	e087      	b.n	8001648 <calibrateGyro+0x140>
		AGT(gyroBuffer);
 8001538:	4855      	ldr	r0, [pc, #340]	@ (8001690 <calibrateGyro+0x188>)
 800153a:	f7ff ff94 	bl	8001466 <AGT>
		for (size_t i=0; i<7; i++) {
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	e015      	b.n	8001570 <calibrateGyro+0x68>
			rawMeasGyro[i] = ((int16_t)gyroBuffer[i*2] << 8) | gyroBuffer[i*2+1];
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4a51      	ldr	r2, [pc, #324]	@ (8001690 <calibrateGyro+0x188>)
 800154a:	5cd3      	ldrb	r3, [r2, r3]
 800154c:	b21b      	sxth	r3, r3
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	b21a      	sxth	r2, r3
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	3301      	adds	r3, #1
 8001558:	494d      	ldr	r1, [pc, #308]	@ (8001690 <calibrateGyro+0x188>)
 800155a:	5ccb      	ldrb	r3, [r1, r3]
 800155c:	b21b      	sxth	r3, r3
 800155e:	4313      	orrs	r3, r2
 8001560:	b219      	sxth	r1, r3
 8001562:	4a4c      	ldr	r2, [pc, #304]	@ (8001694 <calibrateGyro+0x18c>)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (size_t i=0; i<7; i++) {
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	3301      	adds	r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2b06      	cmp	r3, #6
 8001574:	d9e6      	bls.n	8001544 <calibrateGyro+0x3c>
		}
		for (size_t i=0; i<3; i++) {
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	e020      	b.n	80015be <calibrateGyro+0xb6>
			_gyr[i] = (float)rawMeasGyro[i+4] / 16.4;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3304      	adds	r3, #4
 8001580:	4a44      	ldr	r2, [pc, #272]	@ (8001694 <calibrateGyro+0x18c>)
 8001582:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001586:	ee07 3a90 	vmov	s15, r3
 800158a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800158e:	ee17 0a90 	vmov	r0, s15
 8001592:	f7fe ffbd 	bl	8000510 <__aeabi_f2d>
 8001596:	a33a      	add	r3, pc, #232	@ (adr r3, 8001680 <calibrateGyro+0x178>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	f7ff f93a 	bl	8000814 <__aeabi_ddiv>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	f7ff fae2 	bl	8000b70 <__aeabi_d2f>
 80015ac:	4602      	mov	r2, r0
 80015ae:	493a      	ldr	r1, [pc, #232]	@ (8001698 <calibrateGyro+0x190>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	601a      	str	r2, [r3, #0]
		for (size_t i=0; i<3; i++) {
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3301      	adds	r3, #1
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d9db      	bls.n	800157c <calibrateGyro+0x74>
		}
		_gyroBD[0] += (_gyr[0] + _gyrB[0]) / 1000;
 80015c4:	4b31      	ldr	r3, [pc, #196]	@ (800168c <calibrateGyro+0x184>)
 80015c6:	ed93 7a00 	vldr	s14, [r3]
 80015ca:	4b33      	ldr	r3, [pc, #204]	@ (8001698 <calibrateGyro+0x190>)
 80015cc:	edd3 6a00 	vldr	s13, [r3]
 80015d0:	4b32      	ldr	r3, [pc, #200]	@ (800169c <calibrateGyro+0x194>)
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80015da:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 80016a0 <calibrateGyro+0x198>
 80015de:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80015e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e6:	4b29      	ldr	r3, [pc, #164]	@ (800168c <calibrateGyro+0x184>)
 80015e8:	edc3 7a00 	vstr	s15, [r3]
		_gyroBD[1] += (_gyr[1] + _gyrB[1]) / 1000;
 80015ec:	4b27      	ldr	r3, [pc, #156]	@ (800168c <calibrateGyro+0x184>)
 80015ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80015f2:	4b29      	ldr	r3, [pc, #164]	@ (8001698 <calibrateGyro+0x190>)
 80015f4:	edd3 6a01 	vldr	s13, [r3, #4]
 80015f8:	4b28      	ldr	r3, [pc, #160]	@ (800169c <calibrateGyro+0x194>)
 80015fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80015fe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001602:	ed9f 6a27 	vldr	s12, [pc, #156]	@ 80016a0 <calibrateGyro+0x198>
 8001606:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800160a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800160e:	4b1f      	ldr	r3, [pc, #124]	@ (800168c <calibrateGyro+0x184>)
 8001610:	edc3 7a01 	vstr	s15, [r3, #4]
		_gyroBD[2] += (_gyr[2] + _gyrB[2]) / 1000;
 8001614:	4b1d      	ldr	r3, [pc, #116]	@ (800168c <calibrateGyro+0x184>)
 8001616:	ed93 7a02 	vldr	s14, [r3, #8]
 800161a:	4b1f      	ldr	r3, [pc, #124]	@ (8001698 <calibrateGyro+0x190>)
 800161c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001620:	4b1e      	ldr	r3, [pc, #120]	@ (800169c <calibrateGyro+0x194>)
 8001622:	edd3 7a02 	vldr	s15, [r3, #8]
 8001626:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800162a:	ed9f 6a1d 	vldr	s12, [pc, #116]	@ 80016a0 <calibrateGyro+0x198>
 800162e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001632:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <calibrateGyro+0x184>)
 8001638:	edc3 7a02 	vstr	s15, [r3, #8]
		HAL_Delay(1);
 800163c:	2001      	movs	r0, #1
 800163e:	f001 f8f5 	bl	800282c <HAL_Delay>
	for (size_t i=0; i < 1000; i++) {
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	3301      	adds	r3, #1
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800164e:	f4ff af73 	bcc.w	8001538 <calibrateGyro+0x30>
	}
	_gyrB[0] = _gyroBD[0];
 8001652:	4b0e      	ldr	r3, [pc, #56]	@ (800168c <calibrateGyro+0x184>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a11      	ldr	r2, [pc, #68]	@ (800169c <calibrateGyro+0x194>)
 8001658:	6013      	str	r3, [r2, #0]
	_gyrB[1] = _gyroBD[1];
 800165a:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <calibrateGyro+0x184>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4a0f      	ldr	r2, [pc, #60]	@ (800169c <calibrateGyro+0x194>)
 8001660:	6053      	str	r3, [r2, #4]
	_gyrB[2] = _gyroBD[2];
 8001662:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <calibrateGyro+0x184>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	4a0d      	ldr	r2, [pc, #52]	@ (800169c <calibrateGyro+0x194>)
 8001668:	6093      	str	r3, [r2, #8]
	setGyroFS(current_fssel);
 800166a:	78fb      	ldrb	r3, [r7, #3]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff07 	bl	8001480 <setGyroFS>
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	f3af 8000 	nop.w
 8001680:	66666666 	.word	0x66666666
 8001684:	40306666 	.word	0x40306666
 8001688:	20000260 	.word	0x20000260
 800168c:	20000264 	.word	0x20000264
 8001690:	20000288 	.word	0x20000288
 8001694:	20000298 	.word	0x20000298
 8001698:	2000027c 	.word	0x2000027c
 800169c:	20000270 	.word	0x20000270
 80016a0:	447a0000 	.word	0x447a0000

080016a4 <setAccelFS>:
int16_t rawMeasAccel[7];
float _accMax[3] = {};
float _accMin[3] = {};


void setAccelFS(uint8_t fssel){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
	setBank(0);
 80016ae:	2000      	movs	r0, #0
 80016b0:	f7ff fea6 	bl	8001400 <setBank>
	uint8_t reg;
	readRegisters(0x50, 1, &reg);
 80016b4:	f107 030f 	add.w	r3, r7, #15
 80016b8:	461a      	mov	r2, r3
 80016ba:	2101      	movs	r1, #1
 80016bc:	2050      	movs	r0, #80	@ 0x50
 80016be:	f7ff fde7 	bl	8001290 <readRegisters>
	reg = (fssel << 5) | (reg & 0x1F);
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	015b      	lsls	r3, r3, #5
 80016c8:	b25a      	sxtb	r2, r3
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	b25b      	sxtb	r3, r3
 80016ce:	f003 031f 	and.w	r3, r3, #31
 80016d2:	b25b      	sxtb	r3, r3
 80016d4:	4313      	orrs	r3, r2
 80016d6:	b25b      	sxtb	r3, r3
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	73fb      	strb	r3, [r7, #15]
	writeRegister(0x50, reg);
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	4619      	mov	r1, r3
 80016e0:	2050      	movs	r0, #80	@ 0x50
 80016e2:	f7ff fe41 	bl	8001368 <writeRegister>
	_accelScale = (float)(1 << (4 - fssel)) / 32768.0f;
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	f1c3 0304 	rsb	r3, r3, #4
 80016ec:	2201      	movs	r2, #1
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	ee07 3a90 	vmov	s15, r3
 80016f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016fa:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001718 <setAccelFS+0x74>
 80016fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001702:	4b06      	ldr	r3, [pc, #24]	@ (800171c <setAccelFS+0x78>)
 8001704:	edc3 7a00 	vstr	s15, [r3]
	_accelFS = fssel;
 8001708:	4a05      	ldr	r2, [pc, #20]	@ (8001720 <setAccelFS+0x7c>)
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	7013      	strb	r3, [r2, #0]
}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	47000000 	.word	0x47000000
 800171c:	200002a8 	.word	0x200002a8
 8001720:	200002a6 	.word	0x200002a6
 8001724:	00000000 	.word	0x00000000

08001728 <configureNotchFilter>:

void configureNotchFilter(){
 8001728:	b5b0      	push	{r4, r5, r7, lr}
 800172a:	b08a      	sub	sp, #40	@ 0x28
 800172c:	af00      	add	r7, sp, #0
	uint8_t BW_SEL = 7;
 800172e:	2307      	movs	r3, #7
 8001730:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	uint32_t f_des = 1300;
 8001734:	f240 5314 	movw	r3, #1300	@ 0x514
 8001738:	61fb      	str	r3, [r7, #28]
	double pi = 3.14159265;
 800173a:	a38d      	add	r3, pc, #564	@ (adr r3, 8001970 <configureNotchFilter+0x248>)
 800173c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001740:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double COSWZ = cos(2 * pi * f_des / 32);
 8001744:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	f7fe fd82 	bl	8000254 <__adddf3>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4614      	mov	r4, r2
 8001756:	461d      	mov	r5, r3
 8001758:	69f8      	ldr	r0, [r7, #28]
 800175a:	f7fe feb7 	bl	80004cc <__aeabi_ui2d>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4620      	mov	r0, r4
 8001764:	4629      	mov	r1, r5
 8001766:	f7fe ff2b 	bl	80005c0 <__aeabi_dmul>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	4b78      	ldr	r3, [pc, #480]	@ (8001958 <configureNotchFilter+0x230>)
 8001778:	f7ff f84c 	bl	8000814 <__aeabi_ddiv>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	ec43 2b17 	vmov	d7, r2, r3
 8001784:	eeb0 0a47 	vmov.f32	s0, s14
 8001788:	eef0 0a67 	vmov.f32	s1, s15
 800178c:	f006 f870 	bl	8007870 <cos>
 8001790:	ed87 0b02 	vstr	d0, [r7, #8]
	int NF_COSWZ = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
	bool NF_COSWZ_SEL = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if(abs(COSWZ) <= 0.875){
 800179e:	ed97 0b02 	vldr	d0, [r7, #8]
 80017a2:	f007 ff45 	bl	8009630 <abs>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	dc1c      	bgt.n	80017e6 <configureNotchFilter+0xbe>
		NF_COSWZ_SEL = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		NF_COSWZ = round(COSWZ * 256);
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	4b69      	ldr	r3, [pc, #420]	@ (800195c <configureNotchFilter+0x234>)
 80017b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017bc:	f7fe ff00 	bl	80005c0 <__aeabi_dmul>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	ec43 2b17 	vmov	d7, r2, r3
 80017c8:	eeb0 0a47 	vmov.f32	s0, s14
 80017cc:	eef0 0a67 	vmov.f32	s1, s15
 80017d0:	f006 f8ae 	bl	8007930 <round>
 80017d4:	ec53 2b10 	vmov	r2, r3, d0
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	f7ff f9a0 	bl	8000b20 <__aeabi_d2iz>
 80017e0:	4603      	mov	r3, r0
 80017e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017e4:	e063      	b.n	80018ae <configureNotchFilter+0x186>
	}else{
		NF_COSWZ_SEL = 1;
 80017e6:	2301      	movs	r3, #1
 80017e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		if(COSWZ > 0.875){
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	4b5b      	ldr	r3, [pc, #364]	@ (8001960 <configureNotchFilter+0x238>)
 80017f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017f6:	f7ff f973 	bl	8000ae0 <__aeabi_dcmpgt>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d02b      	beq.n	8001858 <configureNotchFilter+0x130>
			NF_COSWZ = round(8 * (1 - COSWZ) * 256);
 8001800:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001804:	f04f 0000 	mov.w	r0, #0
 8001808:	4956      	ldr	r1, [pc, #344]	@ (8001964 <configureNotchFilter+0x23c>)
 800180a:	f7fe fd21 	bl	8000250 <__aeabi_dsub>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	4b53      	ldr	r3, [pc, #332]	@ (8001968 <configureNotchFilter+0x240>)
 800181c:	f7fe fed0 	bl	80005c0 <__aeabi_dmul>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	4b4b      	ldr	r3, [pc, #300]	@ (800195c <configureNotchFilter+0x234>)
 800182e:	f7fe fec7 	bl	80005c0 <__aeabi_dmul>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	ec43 2b17 	vmov	d7, r2, r3
 800183a:	eeb0 0a47 	vmov.f32	s0, s14
 800183e:	eef0 0a67 	vmov.f32	s1, s15
 8001842:	f006 f875 	bl	8007930 <round>
 8001846:	ec53 2b10 	vmov	r2, r3, d0
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f7ff f967 	bl	8000b20 <__aeabi_d2iz>
 8001852:	4603      	mov	r3, r0
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
 8001856:	e02a      	b.n	80018ae <configureNotchFilter+0x186>
		}else{
			NF_COSWZ = round(-8 * (1 + COSWZ) * 256);
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	4b41      	ldr	r3, [pc, #260]	@ (8001964 <configureNotchFilter+0x23c>)
 800185e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001862:	f7fe fcf7 	bl	8000254 <__adddf3>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	4b3e      	ldr	r3, [pc, #248]	@ (800196c <configureNotchFilter+0x244>)
 8001874:	f7fe fea4 	bl	80005c0 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	4b35      	ldr	r3, [pc, #212]	@ (800195c <configureNotchFilter+0x234>)
 8001886:	f7fe fe9b 	bl	80005c0 <__aeabi_dmul>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	ec43 2b17 	vmov	d7, r2, r3
 8001892:	eeb0 0a47 	vmov.f32	s0, s14
 8001896:	eef0 0a67 	vmov.f32	s1, s15
 800189a:	f006 f849 	bl	8007930 <round>
 800189e:	ec53 2b10 	vmov	r2, r3, d0
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	f7ff f93b 	bl	8000b20 <__aeabi_d2iz>
 80018aa:	4603      	mov	r3, r0
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
		}
	}
	setBank(1);
 80018ae:	2001      	movs	r0, #1
 80018b0:	f7ff fda6 	bl	8001400 <setBank>
	writeRegister(0x0F, (uint8_t)(NF_COSWZ & 0xFF));  // Lower byte for X-axis
 80018b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	4619      	mov	r1, r3
 80018ba:	200f      	movs	r0, #15
 80018bc:	f7ff fd54 	bl	8001368 <writeRegister>
	writeRegister(0x10, (uint8_t)(NF_COSWZ & 0xFF));  // Lower byte for Y-axis
 80018c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	4619      	mov	r1, r3
 80018c6:	2010      	movs	r0, #16
 80018c8:	f7ff fd4e 	bl	8001368 <writeRegister>
	writeRegister(0x11, (uint8_t)(NF_COSWZ & 0xFF));  // Lower byte for Z-axis
 80018cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	4619      	mov	r1, r3
 80018d2:	2011      	movs	r0, #17
 80018d4:	f7ff fd48 	bl	8001368 <writeRegister>
	writeRegister(0x12, (uint8_t)((NF_COSWZ >> 8) & 0x01));  // Upper bit for all axes
 80018d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018da:	121b      	asrs	r3, r3, #8
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	4619      	mov	r1, r3
 80018e6:	2012      	movs	r0, #18
 80018e8:	f7ff fd3e 	bl	8001368 <writeRegister>

	uint8_t reg_0x12;
	readRegisters(0x12, 1, &reg_0x12);
 80018ec:	1dfb      	adds	r3, r7, #7
 80018ee:	461a      	mov	r2, r3
 80018f0:	2101      	movs	r1, #1
 80018f2:	2012      	movs	r0, #18
 80018f4:	f7ff fccc 	bl	8001290 <readRegisters>
	// Modify only necessary bits (Bit 3 = X, Bit 4 = Y, Bit 5 = Z)
	reg_0x12 &= ~(0b00111000);  // Clear bits 3, 4, 5
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	71fb      	strb	r3, [r7, #7]
	reg_0x12 |= (NF_COSWZ_SEL << 3) | (NF_COSWZ_SEL << 4) | (NF_COSWZ_SEL << 5);
 8001902:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001906:	461a      	mov	r2, r3
 8001908:	0052      	lsls	r2, r2, #1
 800190a:	4413      	add	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	b25a      	sxtb	r2, r3
 8001912:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8001916:	015b      	lsls	r3, r3, #5
 8001918:	b25b      	sxtb	r3, r3
 800191a:	4313      	orrs	r3, r2
 800191c:	b25a      	sxtb	r2, r3
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	b25b      	sxtb	r3, r3
 8001922:	4313      	orrs	r3, r2
 8001924:	b25b      	sxtb	r3, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	71fb      	strb	r3, [r7, #7]
	writeRegister(0x12, reg_0x12);
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	4619      	mov	r1, r3
 800192e:	2012      	movs	r0, #18
 8001930:	f7ff fd1a 	bl	8001368 <writeRegister>

	// Set Notch Filter Bandwidth
	writeRegister(0x13, BW_SEL << 4);
 8001934:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001938:	011b      	lsls	r3, r3, #4
 800193a:	b2db      	uxtb	r3, r3
 800193c:	4619      	mov	r1, r3
 800193e:	2013      	movs	r0, #19
 8001940:	f7ff fd12 	bl	8001368 <writeRegister>
//	writeRegister(0x12, NF_COSWZ_SEL << 5);
//
//	writeRegister(0x13, BW_SEL << 4);
//	writeRegister(0x0b, 0x00);

	setBank(0);
 8001944:	2000      	movs	r0, #0
 8001946:	f7ff fd5b 	bl	8001400 <setBank>
}
 800194a:	bf00      	nop
 800194c:	3728      	adds	r7, #40	@ 0x28
 800194e:	46bd      	mov	sp, r7
 8001950:	bdb0      	pop	{r4, r5, r7, pc}
 8001952:	bf00      	nop
 8001954:	f3af 8000 	nop.w
 8001958:	40400000 	.word	0x40400000
 800195c:	40700000 	.word	0x40700000
 8001960:	3fec0000 	.word	0x3fec0000
 8001964:	3ff00000 	.word	0x3ff00000
 8001968:	40200000 	.word	0x40200000
 800196c:	c0200000 	.word	0xc0200000
 8001970:	53c8d4f1 	.word	0x53c8d4f1
 8001974:	400921fb 	.word	0x400921fb

08001978 <getAAFConfig>:
    {3299,55, 3008,    3}, {3381,56, 3136,    3}, {3464,57, 3264,    3},
    {3548,58, 3392,    3}, {3633,59, 3456,    3}, {3718,60, 3584,    3},
    {3805,61, 3712,    3}, {3892,62, 3840,    3}, {3979,63, 3968,    3}
};

static const AAF_Config *getAAFConfig(uint16_t bandwidth) {
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	80fb      	strh	r3, [r7, #6]
    const AAF_Config *best = &aaf_table[0];
 8001982:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <getAAFConfig+0x48>)
 8001984:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < sizeof(aaf_table)/sizeof(aaf_table[0]); i++) {
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	e00f      	b.n	80019ac <getAAFConfig+0x34>
        if (aaf_table[i].bandwidth >= bandwidth) {
 800198c:	4a0c      	ldr	r2, [pc, #48]	@ (80019c0 <getAAFConfig+0x48>)
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8001994:	88fa      	ldrh	r2, [r7, #6]
 8001996:	429a      	cmp	r2, r3
 8001998:	d805      	bhi.n	80019a6 <getAAFConfig+0x2e>
            best = &aaf_table[i];
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	4a08      	ldr	r2, [pc, #32]	@ (80019c0 <getAAFConfig+0x48>)
 80019a0:	4413      	add	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]
            break;
 80019a4:	e005      	b.n	80019b2 <getAAFConfig+0x3a>
    for (size_t i = 0; i < sizeof(aaf_table)/sizeof(aaf_table[0]); i++) {
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	3301      	adds	r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80019b0:	d9ec      	bls.n	800198c <getAAFConfig+0x14>
        }
    }
    return best;
 80019b2:	68fb      	ldr	r3, [r7, #12]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	0800bfdc 	.word	0x0800bfdc

080019c4 <setAntiAliasFilter>:

void setAntiAliasFilter(uint16_t bandwidth_hz, bool accel_enable, bool gyro_enable) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	80fb      	strh	r3, [r7, #6]
 80019ce:	460b      	mov	r3, r1
 80019d0:	717b      	strb	r3, [r7, #5]
 80019d2:	4613      	mov	r3, r2
 80019d4:	713b      	strb	r3, [r7, #4]
    const AAF_Config *cfg = getAAFConfig(bandwidth_hz);
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ffcd 	bl	8001978 <getAAFConfig>
 80019de:	6178      	str	r0, [r7, #20]

    // accel
    setBank(2);
 80019e0:	2002      	movs	r0, #2
 80019e2:	f7ff fd0d 	bl	8001400 <setBank>

    uint8_t reg03;
    readRegisters(0x03, 1, &reg03);
 80019e6:	f107 0313 	add.w	r3, r7, #19
 80019ea:	461a      	mov	r2, r3
 80019ec:	2101      	movs	r1, #1
 80019ee:	2003      	movs	r0, #3
 80019f0:	f7ff fc4e 	bl	8001290 <readRegisters>
    reg03 &= ~0x7E;                         // Clear bits 6:1
 80019f4:	7cfb      	ldrb	r3, [r7, #19]
 80019f6:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	74fb      	strb	r3, [r7, #19]
    reg03 |= (cfg->delt & 0x3F) << 1;       // ACCEL_AAF_DELT
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	789b      	ldrb	r3, [r3, #2]
 8001a02:	b25b      	sxtb	r3, r3
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	b25b      	sxtb	r3, r3
 8001a08:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001a0c:	b25a      	sxtb	r2, r3
 8001a0e:	7cfb      	ldrb	r3, [r7, #19]
 8001a10:	b25b      	sxtb	r3, r3
 8001a12:	4313      	orrs	r3, r2
 8001a14:	b25b      	sxtb	r3, r3
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	74fb      	strb	r3, [r7, #19]
    if (!accel_enable)
 8001a1a:	797b      	ldrb	r3, [r7, #5]
 8001a1c:	f083 0301 	eor.w	r3, r3, #1
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d005      	beq.n	8001a32 <setAntiAliasFilter+0x6e>
        reg03 |= 1 << 0;                    // ACCEL_AAF_DIS = 1
 8001a26:	7cfb      	ldrb	r3, [r7, #19]
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	74fb      	strb	r3, [r7, #19]
 8001a30:	e004      	b.n	8001a3c <setAntiAliasFilter+0x78>
    else
        reg03 &= ~(1 << 0);                 // Enable AAF
 8001a32:	7cfb      	ldrb	r3, [r7, #19]
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	74fb      	strb	r3, [r7, #19]
    writeRegister(0x03, reg03);
 8001a3c:	7cfb      	ldrb	r3, [r7, #19]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	2003      	movs	r0, #3
 8001a42:	f7ff fc91 	bl	8001368 <writeRegister>

    writeRegister(0x04, (uint8_t)(cfg->deltsqr & 0xFF));  // Lower 8 bits of DELTSQR
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	889b      	ldrh	r3, [r3, #4]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	2004      	movs	r0, #4
 8001a50:	f7ff fc8a 	bl	8001368 <writeRegister>
    uint8_t reg05;
    readRegisters(0x05, 1, &reg05);
 8001a54:	f107 0312 	add.w	r3, r7, #18
 8001a58:	461a      	mov	r2, r3
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	2005      	movs	r0, #5
 8001a5e:	f7ff fc17 	bl	8001290 <readRegisters>
    reg05 &= 0x00;                          // Clear bits 7:0
 8001a62:	2300      	movs	r3, #0
 8001a64:	74bb      	strb	r3, [r7, #18]
    reg05 |= ((cfg->deltsqr >> 8) & 0x0F);  // Upper 4 bits of DELTSQR
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	889b      	ldrh	r3, [r3, #4]
 8001a6a:	0a1b      	lsrs	r3, r3, #8
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	b25b      	sxtb	r3, r3
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	b25a      	sxtb	r2, r3
 8001a76:	7cbb      	ldrb	r3, [r7, #18]
 8001a78:	b25b      	sxtb	r3, r3
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	b25b      	sxtb	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	74bb      	strb	r3, [r7, #18]
    reg05 |= (cfg->bitshift << 4) & 0xF0;   // ACCEL_AAF_BITSHIFT
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	799b      	ldrb	r3, [r3, #6]
 8001a86:	b25b      	sxtb	r3, r3
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	b25a      	sxtb	r2, r3
 8001a8c:	7cbb      	ldrb	r3, [r7, #18]
 8001a8e:	b25b      	sxtb	r3, r3
 8001a90:	4313      	orrs	r3, r2
 8001a92:	b25b      	sxtb	r3, r3
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	74bb      	strb	r3, [r7, #18]
    writeRegister(0x05, reg05);
 8001a98:	7cbb      	ldrb	r3, [r7, #18]
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	2005      	movs	r0, #5
 8001a9e:	f7ff fc63 	bl	8001368 <writeRegister>

    // gyro
    setBank(1);
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	f7ff fcac 	bl	8001400 <setBank>

    uint8_t reg0C;
    readRegisters(0x0C, 1, &reg0C);
 8001aa8:	f107 0311 	add.w	r3, r7, #17
 8001aac:	461a      	mov	r2, r3
 8001aae:	2101      	movs	r1, #1
 8001ab0:	200c      	movs	r0, #12
 8001ab2:	f7ff fbed 	bl	8001290 <readRegisters>
    reg0C &= ~0x3F;                        // Clear bits 5:0
 8001ab6:	7c7b      	ldrb	r3, [r7, #17]
 8001ab8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	747b      	strb	r3, [r7, #17]
    reg0C |= (cfg->delt & 0x3F);           // GYRO_AAF_DELT
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	789b      	ldrb	r3, [r3, #2]
 8001ac4:	b25b      	sxtb	r3, r3
 8001ac6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001aca:	b25a      	sxtb	r2, r3
 8001acc:	7c7b      	ldrb	r3, [r7, #17]
 8001ace:	b25b      	sxtb	r3, r3
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	b25b      	sxtb	r3, r3
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	747b      	strb	r3, [r7, #17]
    writeRegister(0x0C, reg0C);
 8001ad8:	7c7b      	ldrb	r3, [r7, #17]
 8001ada:	4619      	mov	r1, r3
 8001adc:	200c      	movs	r0, #12
 8001ade:	f7ff fc43 	bl	8001368 <writeRegister>

    writeRegister(0x0D, (uint8_t)(cfg->deltsqr & 0xFF));  // Lower 8 bits
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	889b      	ldrh	r3, [r3, #4]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	4619      	mov	r1, r3
 8001aea:	200d      	movs	r0, #13
 8001aec:	f7ff fc3c 	bl	8001368 <writeRegister>
    uint8_t reg0E;
    readRegisters(0x0E, 1, &reg0E);
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	461a      	mov	r2, r3
 8001af6:	2101      	movs	r1, #1
 8001af8:	200e      	movs	r0, #14
 8001afa:	f7ff fbc9 	bl	8001290 <readRegisters>
    reg0E &= 0x00;                         // Clear bits
 8001afe:	2300      	movs	r3, #0
 8001b00:	743b      	strb	r3, [r7, #16]
    reg0E |= ((cfg->deltsqr >> 8) & 0x0F); // Upper 4 bits
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	889b      	ldrh	r3, [r3, #4]
 8001b06:	0a1b      	lsrs	r3, r3, #8
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	b25b      	sxtb	r3, r3
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	b25a      	sxtb	r2, r3
 8001b12:	7c3b      	ldrb	r3, [r7, #16]
 8001b14:	b25b      	sxtb	r3, r3
 8001b16:	4313      	orrs	r3, r2
 8001b18:	b25b      	sxtb	r3, r3
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	743b      	strb	r3, [r7, #16]
    reg0E |= (cfg->bitshift << 4) & 0xF0;  // GYRO_AAF_BITSHIFT
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	799b      	ldrb	r3, [r3, #6]
 8001b22:	b25b      	sxtb	r3, r3
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	b25a      	sxtb	r2, r3
 8001b28:	7c3b      	ldrb	r3, [r7, #16]
 8001b2a:	b25b      	sxtb	r3, r3
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	b25b      	sxtb	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	743b      	strb	r3, [r7, #16]
    writeRegister(0x0E, reg0E);
 8001b34:	7c3b      	ldrb	r3, [r7, #16]
 8001b36:	4619      	mov	r1, r3
 8001b38:	200e      	movs	r0, #14
 8001b3a:	f7ff fc15 	bl	8001368 <writeRegister>

    uint8_t reg0B;
    readRegisters(0x0B, 1, &reg0B);
 8001b3e:	f107 030f 	add.w	r3, r7, #15
 8001b42:	461a      	mov	r2, r3
 8001b44:	2101      	movs	r1, #1
 8001b46:	200b      	movs	r0, #11
 8001b48:	f7ff fba2 	bl	8001290 <readRegisters>
    if (!gyro_enable)
 8001b4c:	793b      	ldrb	r3, [r7, #4]
 8001b4e:	f083 0301 	eor.w	r3, r3, #1
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <setAntiAliasFilter+0x1a0>
        reg0B |= (1 << 1);                 // Disable Gyro AAF
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	f043 0302 	orr.w	r3, r3, #2
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	73fb      	strb	r3, [r7, #15]
 8001b62:	e004      	b.n	8001b6e <setAntiAliasFilter+0x1aa>
    else
        reg0B &= ~(1 << 1);                // Enable Gyro AAF
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	f023 0302 	bic.w	r3, r3, #2
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	73fb      	strb	r3, [r7, #15]
    writeRegister(0x0B, reg0B);
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	4619      	mov	r1, r3
 8001b72:	200b      	movs	r0, #11
 8001b74:	f7ff fbf8 	bl	8001368 <writeRegister>

    setBank(0);
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f7ff fc41 	bl	8001400 <setBank>
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <lowPassFilter>:
float filtered_gyro_x = 0;  // Store previous value for X-axis
float filtered_gyro_y = 0;  // Store previous value for Y-axis
float filtered_gyro_z = 0;  // Store previous value for Z-axis

// Low-pass filter function
float lowPassFilter(float raw_value, int select) {
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b92:	6038      	str	r0, [r7, #0]
	if(select == 0){
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d11a      	bne.n	8001bd0 <lowPassFilter+0x48>
		filtered_gyro_x = alpha * raw_value + (1 - alpha) * filtered_gyro_x;
 8001b9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c54 <lowPassFilter+0xcc>)
 8001b9c:	ed93 7a00 	vldr	s14, [r3]
 8001ba0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ba4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c54 <lowPassFilter+0xcc>)
 8001baa:	edd3 7a00 	vldr	s15, [r3]
 8001bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001bb2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001bb6:	4b28      	ldr	r3, [pc, #160]	@ (8001c58 <lowPassFilter+0xd0>)
 8001bb8:	edd3 7a00 	vldr	s15, [r3]
 8001bbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc4:	4b24      	ldr	r3, [pc, #144]	@ (8001c58 <lowPassFilter+0xd0>)
 8001bc6:	edc3 7a00 	vstr	s15, [r3]
		    return filtered_gyro_x;
 8001bca:	4b23      	ldr	r3, [pc, #140]	@ (8001c58 <lowPassFilter+0xd0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	e037      	b.n	8001c40 <lowPassFilter+0xb8>
	}
	if(select == 1){
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d11a      	bne.n	8001c0c <lowPassFilter+0x84>
		filtered_gyro_y = alpha * raw_value + (1 - alpha) * filtered_gyro_y;
 8001bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8001c54 <lowPassFilter+0xcc>)
 8001bd8:	ed93 7a00 	vldr	s14, [r3]
 8001bdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001be0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001be4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c54 <lowPassFilter+0xcc>)
 8001be6:	edd3 7a00 	vldr	s15, [r3]
 8001bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001bee:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c5c <lowPassFilter+0xd4>)
 8001bf4:	edd3 7a00 	vldr	s15, [r3]
 8001bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c00:	4b16      	ldr	r3, [pc, #88]	@ (8001c5c <lowPassFilter+0xd4>)
 8001c02:	edc3 7a00 	vstr	s15, [r3]
		return filtered_gyro_y;
 8001c06:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <lowPassFilter+0xd4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	e019      	b.n	8001c40 <lowPassFilter+0xb8>
	}
	filtered_gyro_z = alpha * raw_value + (1 - alpha) * filtered_gyro_z;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <lowPassFilter+0xcc>)
 8001c0e:	ed93 7a00 	vldr	s14, [r3]
 8001c12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c54 <lowPassFilter+0xcc>)
 8001c1c:	edd3 7a00 	vldr	s15, [r3]
 8001c20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001c24:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c28:	4b0d      	ldr	r3, [pc, #52]	@ (8001c60 <lowPassFilter+0xd8>)
 8001c2a:	edd3 7a00 	vldr	s15, [r3]
 8001c2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c36:	4b0a      	ldr	r3, [pc, #40]	@ (8001c60 <lowPassFilter+0xd8>)
 8001c38:	edc3 7a00 	vstr	s15, [r3]
	return filtered_gyro_z;
 8001c3c:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <lowPassFilter+0xd8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]


}
 8001c40:	ee07 3a90 	vmov	s15, r3
 8001c44:	eeb0 0a67 	vmov.f32	s0, s15
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000000 	.word	0x20000000
 8001c58:	200002ac 	.word	0x200002ac
 8001c5c:	200002b0 	.word	0x200002b0
 8001c60:	200002b4 	.word	0x200002b4

08001c64 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int le, char *ptr, int len)

{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]

int DataIdx;

for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	e009      	b.n	8001c8a <_write+0x26>

{

ITM_SendChar(*ptr++);
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	60ba      	str	r2, [r7, #8]
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fade 	bl	8001240 <ITM_SendChar>
for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	3301      	adds	r3, #1
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	dbf1      	blt.n	8001c76 <_write+0x12>

}

return len;
 8001c92:	687b      	ldr	r3, [r7, #4]

}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	0000      	movs	r0, r0
	...

08001ca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ca0:	b5b0      	push	{r4, r5, r7, lr}
 8001ca2:	b08c      	sub	sp, #48	@ 0x30
 8001ca4:	af04      	add	r7, sp, #16
//  	FusionAhrs ahrs;
//  	FusionAhrsInitialise(&ahrs);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ca6:	f000 f941 	bl	8001f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001caa:	f7ff fa3f 	bl	800112c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001cae:	f7ff f96d 	bl	8000f8c <MX_ADC1_Init>
  MX_RTC_Init();
 8001cb2:	f000 f9a7 	bl	8002004 <MX_RTC_Init>
  MX_UCPD1_Init();
 8001cb6:	f000 fbcb 	bl	8002450 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8001cba:	f000 fca9 	bl	8002610 <MX_USB_PCD_Init>
  MX_SPI1_Init();
 8001cbe:	f000 fa29 	bl	8002114 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001cc2:	f000 fbfb 	bl	80024bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t address = begin();
 8001cc6:	f7ff fb77 	bl	80013b8 <begin>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	74fb      	strb	r3, [r7, #19]
  printf("Gyro X: %.2f, Y: %.2f, Z: %.2f\r\n", gyro[0], gyro[1], gyro[2]);
 8001cce:	4b90      	ldr	r3, [pc, #576]	@ (8001f10 <main+0x270>)
 8001cd0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001cd4:	4b8e      	ldr	r3, [pc, #568]	@ (8001f10 <main+0x270>)
 8001cd6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001cda:	498d      	ldr	r1, [pc, #564]	@ (8001f10 <main+0x270>)
 8001cdc:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8001ce0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001ce4:	e9cd 2300 	strd	r2, r3, [sp]
 8001ce8:	4622      	mov	r2, r4
 8001cea:	462b      	mov	r3, r5
 8001cec:	4889      	ldr	r0, [pc, #548]	@ (8001f14 <main+0x274>)
 8001cee:	f008 f9bd 	bl	800a06c <iprintf>

  uint8_t new_buffer[1];
  uint8_t new_buffer_accel[1];

  int sample = readRegisters(0x4F, 1, new_buffer);
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	204f      	movs	r0, #79	@ 0x4f
 8001cfa:	f7ff fac9 	bl	8001290 <readRegisters>
 8001cfe:	60f8      	str	r0, [r7, #12]
  int sample_accel = readRegisters(0x50, 1, new_buffer_accel);
 8001d00:	463b      	mov	r3, r7
 8001d02:	461a      	mov	r2, r3
 8001d04:	2101      	movs	r1, #1
 8001d06:	2050      	movs	r0, #80	@ 0x50
 8001d08:	f7ff fac2 	bl	8001290 <readRegisters>
 8001d0c:	60b8      	str	r0, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  AGT(myBuffer);
 8001d0e:	4882      	ldr	r0, [pc, #520]	@ (8001f18 <main+0x278>)
 8001d10:	f7ff fba9 	bl	8001466 <AGT>
	  for (size_t i=0; i<7; i++) {
 8001d14:	2300      	movs	r3, #0
 8001d16:	61fb      	str	r3, [r7, #28]
 8001d18:	e015      	b.n	8001d46 <main+0xa6>
	      rawMeas[i] = ((int16_t)myBuffer[i*2] << 8) | myBuffer[i*2+1];
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4a7e      	ldr	r2, [pc, #504]	@ (8001f18 <main+0x278>)
 8001d20:	5cd3      	ldrb	r3, [r2, r3]
 8001d22:	b21b      	sxth	r3, r3
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	b21a      	sxth	r2, r3
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	497a      	ldr	r1, [pc, #488]	@ (8001f18 <main+0x278>)
 8001d30:	5ccb      	ldrb	r3, [r1, r3]
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	4313      	orrs	r3, r2
 8001d36:	b219      	sxth	r1, r3
 8001d38:	4a78      	ldr	r2, [pc, #480]	@ (8001f1c <main+0x27c>)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for (size_t i=0; i<7; i++) {
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	3301      	adds	r3, #1
 8001d44:	61fb      	str	r3, [r7, #28]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	2b06      	cmp	r3, #6
 8001d4a:	d9e6      	bls.n	8001d1a <main+0x7a>
	   }
	  int16_t temperature = rawMeas[0] / 132.48f + 25;
 8001d4c:	4b73      	ldr	r3, [pc, #460]	@ (8001f1c <main+0x27c>)
 8001d4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d52:	ee07 3a90 	vmov	s15, r3
 8001d56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d5a:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8001f20 <main+0x280>
 8001d5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d62:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001d66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d6e:	ee17 3a90 	vmov	r3, s15
 8001d72:	80fb      	strh	r3, [r7, #6]
	  for (size_t i=0; i<3; i++) {
 8001d74:	2300      	movs	r3, #0
 8001d76:	61bb      	str	r3, [r7, #24]
 8001d78:	e02f      	b.n	8001dda <main+0x13a>
		  accel[i] = (float)rawMeas[i+1] / 2048.0 * 9.81 / 2.0;
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	4a67      	ldr	r2, [pc, #412]	@ (8001f1c <main+0x27c>)
 8001d80:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001d84:	ee07 3a90 	vmov	s15, r3
 8001d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d8c:	ee17 0a90 	vmov	r0, s15
 8001d90:	f7fe fbbe 	bl	8000510 <__aeabi_f2d>
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	4b62      	ldr	r3, [pc, #392]	@ (8001f24 <main+0x284>)
 8001d9a:	f7fe fd3b 	bl	8000814 <__aeabi_ddiv>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	a354      	add	r3, pc, #336	@ (adr r3, 8001ef8 <main+0x258>)
 8001da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dac:	f7fe fc08 	bl	80005c0 <__aeabi_dmul>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dc0:	f7fe fd28 	bl	8000814 <__aeabi_ddiv>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4857      	ldr	r0, [pc, #348]	@ (8001f28 <main+0x288>)
 8001dca:	69b9      	ldr	r1, [r7, #24]
 8001dcc:	00c9      	lsls	r1, r1, #3
 8001dce:	4401      	add	r1, r0
 8001dd0:	e9c1 2300 	strd	r2, r3, [r1]
	  for (size_t i=0; i<3; i++) {
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	61bb      	str	r3, [r7, #24]
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d9cc      	bls.n	8001d7a <main+0xda>
	  }

	  accel[3] = pow(((accel[0]*accel[0]) + (accel[1]*accel[1]) + (accel[2]*accel[2])), 0.5);
 8001de0:	4b51      	ldr	r3, [pc, #324]	@ (8001f28 <main+0x288>)
 8001de2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001de6:	4b50      	ldr	r3, [pc, #320]	@ (8001f28 <main+0x288>)
 8001de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dec:	f7fe fbe8 	bl	80005c0 <__aeabi_dmul>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4614      	mov	r4, r2
 8001df6:	461d      	mov	r5, r3
 8001df8:	4b4b      	ldr	r3, [pc, #300]	@ (8001f28 <main+0x288>)
 8001dfa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8001f28 <main+0x288>)
 8001e00:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e04:	f7fe fbdc 	bl	80005c0 <__aeabi_dmul>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	4629      	mov	r1, r5
 8001e10:	f7fe fa20 	bl	8000254 <__adddf3>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4614      	mov	r4, r2
 8001e1a:	461d      	mov	r5, r3
 8001e1c:	4b42      	ldr	r3, [pc, #264]	@ (8001f28 <main+0x288>)
 8001e1e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001e22:	4b41      	ldr	r3, [pc, #260]	@ (8001f28 <main+0x288>)
 8001e24:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e28:	f7fe fbca 	bl	80005c0 <__aeabi_dmul>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4620      	mov	r0, r4
 8001e32:	4629      	mov	r1, r5
 8001e34:	f7fe fa0e 	bl	8000254 <__adddf3>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	ec43 2b17 	vmov	d7, r2, r3
 8001e40:	ed9f 1b2f 	vldr	d1, [pc, #188]	@ 8001f00 <main+0x260>
 8001e44:	eeb0 0a47 	vmov.f32	s0, s14
 8001e48:	eef0 0a67 	vmov.f32	s1, s15
 8001e4c:	f005 fca0 	bl	8007790 <pow>
 8001e50:	eeb0 7a40 	vmov.f32	s14, s0
 8001e54:	eef0 7a60 	vmov.f32	s15, s1
 8001e58:	4b33      	ldr	r3, [pc, #204]	@ (8001f28 <main+0x288>)
 8001e5a:	ed83 7b06 	vstr	d7, [r3, #24]

	  for (size_t i=0; i<3; i++) {
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	e02e      	b.n	8001ec2 <main+0x222>
		  gyro[i] = lowPassFilter((float)rawMeas[i+4] / 16.4, i);
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	3304      	adds	r3, #4
 8001e68:	4a2c      	ldr	r2, [pc, #176]	@ (8001f1c <main+0x27c>)
 8001e6a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001e6e:	ee07 3a90 	vmov	s15, r3
 8001e72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e76:	ee17 0a90 	vmov	r0, s15
 8001e7a:	f7fe fb49 	bl	8000510 <__aeabi_f2d>
 8001e7e:	a322      	add	r3, pc, #136	@ (adr r3, 8001f08 <main+0x268>)
 8001e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e84:	f7fe fcc6 	bl	8000814 <__aeabi_ddiv>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f7fe fe6e 	bl	8000b70 <__aeabi_d2f>
 8001e94:	4602      	mov	r2, r0
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	ee00 2a10 	vmov	s0, r2
 8001e9e:	f7ff fe73 	bl	8001b88 <lowPassFilter>
 8001ea2:	ee10 3a10 	vmov	r3, s0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fb32 	bl	8000510 <__aeabi_f2d>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4817      	ldr	r0, [pc, #92]	@ (8001f10 <main+0x270>)
 8001eb2:	6979      	ldr	r1, [r7, #20]
 8001eb4:	00c9      	lsls	r1, r1, #3
 8001eb6:	4401      	add	r1, r0
 8001eb8:	e9c1 2300 	strd	r2, r3, [r1]
	  for (size_t i=0; i<3; i++) {
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d9cd      	bls.n	8001e64 <main+0x1c4>
	  }

	  printf("Gyro X: %.2f, Y: %.2f, Z: %.2f\r\n", gyro[0], gyro[1], gyro[2]);
 8001ec8:	4b11      	ldr	r3, [pc, #68]	@ (8001f10 <main+0x270>)
 8001eca:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001ece:	4b10      	ldr	r3, [pc, #64]	@ (8001f10 <main+0x270>)
 8001ed0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ed4:	490e      	ldr	r1, [pc, #56]	@ (8001f10 <main+0x270>)
 8001ed6:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8001eda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001ede:	e9cd 2300 	strd	r2, r3, [sp]
 8001ee2:	4622      	mov	r2, r4
 8001ee4:	462b      	mov	r3, r5
 8001ee6:	480b      	ldr	r0, [pc, #44]	@ (8001f14 <main+0x274>)
 8001ee8:	f008 f8c0 	bl	800a06c <iprintf>

	  HAL_Delay(50);
 8001eec:	2032      	movs	r0, #50	@ 0x32
 8001eee:	f000 fc9d 	bl	800282c <HAL_Delay>
  {
 8001ef2:	e70c      	b.n	8001d0e <main+0x6e>
 8001ef4:	f3af 8000 	nop.w
 8001ef8:	51eb851f 	.word	0x51eb851f
 8001efc:	40239eb8 	.word	0x40239eb8
 8001f00:	00000000 	.word	0x00000000
 8001f04:	3fe00000 	.word	0x3fe00000
 8001f08:	66666666 	.word	0x66666666
 8001f0c:	40306666 	.word	0x40306666
 8001f10:	200002f8 	.word	0x200002f8
 8001f14:	0800bfb8 	.word	0x0800bfb8
 8001f18:	200002b8 	.word	0x200002b8
 8001f1c:	200002c8 	.word	0x200002c8
 8001f20:	43047ae1 	.word	0x43047ae1
 8001f24:	40a00000 	.word	0x40a00000
 8001f28:	200002d8 	.word	0x200002d8

08001f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b098      	sub	sp, #96	@ 0x60
 8001f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f32:	f107 0318 	add.w	r3, r7, #24
 8001f36:	2248      	movs	r2, #72	@ 0x48
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f008 f8eb 	bl	800a116 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
 8001f4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f001 ff92 	bl	8003e78 <HAL_PWREx_ControlVoltageScaling>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001f5a:	f000 f84d 	bl	8001ff8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f5e:	f001 ff6d 	bl	8003e3c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f62:	4b24      	ldr	r3, [pc, #144]	@ (8001ff4 <SystemClock_Config+0xc8>)
 8001f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f68:	4a22      	ldr	r2, [pc, #136]	@ (8001ff4 <SystemClock_Config+0xc8>)
 8001f6a:	f023 0318 	bic.w	r3, r3, #24
 8001f6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001f72:	2336      	movs	r3, #54	@ 0x36
 8001f74:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f76:	2381      	movs	r3, #129	@ 0x81
 8001f78:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001f80:	2301      	movs	r3, #1
 8001f82:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f84:	2340      	movs	r3, #64	@ 0x40
 8001f86:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001f90:	2360      	movs	r3, #96	@ 0x60
 8001f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f94:	2302      	movs	r3, #2
 8001f96:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8001fa0:	2337      	movs	r3, #55	@ 0x37
 8001fa2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001fa4:	2307      	movs	r3, #7
 8001fa6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fac:	2302      	movs	r3, #2
 8001fae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fb0:	f107 0318 	add.w	r3, r7, #24
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f001 ffdf 	bl	8003f78 <HAL_RCC_OscConfig>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001fc0:	f000 f81a 	bl	8001ff8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fc4:	230f      	movs	r3, #15
 8001fc6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	2105      	movs	r1, #5
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f002 fca1 	bl	8004924 <HAL_RCC_ClockConfig>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001fe8:	f000 f806 	bl	8001ff8 <Error_Handler>
  }
}
 8001fec:	bf00      	nop
 8001fee:	3760      	adds	r7, #96	@ 0x60
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40021000 	.word	0x40021000

08001ff8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ffc:	b672      	cpsid	i
}
 8001ffe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <Error_Handler+0x8>

08002004 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800200a:	463b      	mov	r3, r7
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
 8002018:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800201a:	4b1d      	ldr	r3, [pc, #116]	@ (8002090 <MX_RTC_Init+0x8c>)
 800201c:	4a1d      	ldr	r2, [pc, #116]	@ (8002094 <MX_RTC_Init+0x90>)
 800201e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002020:	4b1b      	ldr	r3, [pc, #108]	@ (8002090 <MX_RTC_Init+0x8c>)
 8002022:	2200      	movs	r2, #0
 8002024:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002026:	4b1a      	ldr	r3, [pc, #104]	@ (8002090 <MX_RTC_Init+0x8c>)
 8002028:	227f      	movs	r2, #127	@ 0x7f
 800202a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800202c:	4b18      	ldr	r3, [pc, #96]	@ (8002090 <MX_RTC_Init+0x8c>)
 800202e:	22ff      	movs	r2, #255	@ 0xff
 8002030:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002032:	4b17      	ldr	r3, [pc, #92]	@ (8002090 <MX_RTC_Init+0x8c>)
 8002034:	2200      	movs	r2, #0
 8002036:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002038:	4b15      	ldr	r3, [pc, #84]	@ (8002090 <MX_RTC_Init+0x8c>)
 800203a:	2200      	movs	r2, #0
 800203c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800203e:	4b14      	ldr	r3, [pc, #80]	@ (8002090 <MX_RTC_Init+0x8c>)
 8002040:	2200      	movs	r2, #0
 8002042:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002044:	4b12      	ldr	r3, [pc, #72]	@ (8002090 <MX_RTC_Init+0x8c>)
 8002046:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800204a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800204c:	4b10      	ldr	r3, [pc, #64]	@ (8002090 <MX_RTC_Init+0x8c>)
 800204e:	2200      	movs	r2, #0
 8002050:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002052:	480f      	ldr	r0, [pc, #60]	@ (8002090 <MX_RTC_Init+0x8c>)
 8002054:	f003 fc60 	bl	8005918 <HAL_RTC_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800205e:	f7ff ffcb 	bl	8001ff8 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8002062:	2300      	movs	r3, #0
 8002064:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8002072:	463b      	mov	r3, r7
 8002074:	4619      	mov	r1, r3
 8002076:	4806      	ldr	r0, [pc, #24]	@ (8002090 <MX_RTC_Init+0x8c>)
 8002078:	f003 fd5c 	bl	8005b34 <HAL_RTCEx_PrivilegeModeSet>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8002082:	f7ff ffb9 	bl	8001ff8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002086:	bf00      	nop
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000310 	.word	0x20000310
 8002094:	40002800 	.word	0x40002800

08002098 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b0a8      	sub	sp, #160	@ 0xa0
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020a0:	f107 030c 	add.w	r3, r7, #12
 80020a4:	2294      	movs	r2, #148	@ 0x94
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f008 f834 	bl	800a116 <memset>
  if(rtcHandle->Instance==RTC)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a16      	ldr	r2, [pc, #88]	@ (800210c <HAL_RTC_MspInit+0x74>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d124      	bne.n	8002102 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020bc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80020be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c6:	f107 030c 	add.w	r3, r7, #12
 80020ca:	4618      	mov	r0, r3
 80020cc:	f002 ff0e 	bl	8004eec <HAL_RCCEx_PeriphCLKConfig>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80020d6:	f7ff ff8f 	bl	8001ff8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020da:	4b0d      	ldr	r3, [pc, #52]	@ (8002110 <HAL_RTC_MspInit+0x78>)
 80020dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002110 <HAL_RTC_MspInit+0x78>)
 80020e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80020ea:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <HAL_RTC_MspInit+0x78>)
 80020ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ee:	4a08      	ldr	r2, [pc, #32]	@ (8002110 <HAL_RTC_MspInit+0x78>)
 80020f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80020f6:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <HAL_RTC_MspInit+0x78>)
 80020f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002102:	bf00      	nop
 8002104:	37a0      	adds	r7, #160	@ 0xa0
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40002800 	.word	0x40002800
 8002110:	40021000 	.word	0x40021000

08002114 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002118:	4b1b      	ldr	r3, [pc, #108]	@ (8002188 <MX_SPI1_Init+0x74>)
 800211a:	4a1c      	ldr	r2, [pc, #112]	@ (800218c <MX_SPI1_Init+0x78>)
 800211c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800211e:	4b1a      	ldr	r3, [pc, #104]	@ (8002188 <MX_SPI1_Init+0x74>)
 8002120:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002124:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002126:	4b18      	ldr	r3, [pc, #96]	@ (8002188 <MX_SPI1_Init+0x74>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800212c:	4b16      	ldr	r3, [pc, #88]	@ (8002188 <MX_SPI1_Init+0x74>)
 800212e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002132:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002134:	4b14      	ldr	r3, [pc, #80]	@ (8002188 <MX_SPI1_Init+0x74>)
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800213a:	4b13      	ldr	r3, [pc, #76]	@ (8002188 <MX_SPI1_Init+0x74>)
 800213c:	2200      	movs	r2, #0
 800213e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002140:	4b11      	ldr	r3, [pc, #68]	@ (8002188 <MX_SPI1_Init+0x74>)
 8002142:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002146:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002148:	4b0f      	ldr	r3, [pc, #60]	@ (8002188 <MX_SPI1_Init+0x74>)
 800214a:	2218      	movs	r2, #24
 800214c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800214e:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <MX_SPI1_Init+0x74>)
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002154:	4b0c      	ldr	r3, [pc, #48]	@ (8002188 <MX_SPI1_Init+0x74>)
 8002156:	2200      	movs	r2, #0
 8002158:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800215a:	4b0b      	ldr	r3, [pc, #44]	@ (8002188 <MX_SPI1_Init+0x74>)
 800215c:	2200      	movs	r2, #0
 800215e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002160:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <MX_SPI1_Init+0x74>)
 8002162:	2207      	movs	r2, #7
 8002164:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002166:	4b08      	ldr	r3, [pc, #32]	@ (8002188 <MX_SPI1_Init+0x74>)
 8002168:	2200      	movs	r2, #0
 800216a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800216c:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <MX_SPI1_Init+0x74>)
 800216e:	2208      	movs	r2, #8
 8002170:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002172:	4805      	ldr	r0, [pc, #20]	@ (8002188 <MX_SPI1_Init+0x74>)
 8002174:	f003 fd0a 	bl	8005b8c <HAL_SPI_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800217e:	f7ff ff3b 	bl	8001ff8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000338 	.word	0x20000338
 800218c:	40013000 	.word	0x40013000

08002190 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	@ 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a17      	ldr	r2, [pc, #92]	@ (800220c <HAL_SPI_MspInit+0x7c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d127      	bne.n	8002202 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021b2:	4b17      	ldr	r3, [pc, #92]	@ (8002210 <HAL_SPI_MspInit+0x80>)
 80021b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021b6:	4a16      	ldr	r2, [pc, #88]	@ (8002210 <HAL_SPI_MspInit+0x80>)
 80021b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80021be:	4b14      	ldr	r3, [pc, #80]	@ (8002210 <HAL_SPI_MspInit+0x80>)
 80021c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <HAL_SPI_MspInit+0x80>)
 80021cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ce:	4a10      	ldr	r2, [pc, #64]	@ (8002210 <HAL_SPI_MspInit+0x80>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002210 <HAL_SPI_MspInit+0x80>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80021e2:	23c2      	movs	r3, #194	@ 0xc2
 80021e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021f2:	2305      	movs	r3, #5
 80021f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	4619      	mov	r1, r3
 80021fc:	4805      	ldr	r0, [pc, #20]	@ (8002214 <HAL_SPI_MspInit+0x84>)
 80021fe:	f001 fb8d 	bl	800391c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002202:	bf00      	nop
 8002204:	3728      	adds	r7, #40	@ 0x28
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40013000 	.word	0x40013000
 8002210:	40021000 	.word	0x40021000
 8002214:	42020000 	.word	0x42020000

08002218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <NMI_Handler+0x4>

08002220 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <HardFault_Handler+0x4>

08002228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <MemManage_Handler+0x4>

08002230 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002234:	bf00      	nop
 8002236:	e7fd      	b.n	8002234 <BusFault_Handler+0x4>

08002238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <UsageFault_Handler+0x4>

08002240 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800226e:	f000 fabd 	bl	80027ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}

08002276 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0
  return 1;
 800227a:	2301      	movs	r3, #1
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <_kill>:

int _kill(int pid, int sig)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002290:	f007 ff94 	bl	800a1bc <__errno>
 8002294:	4603      	mov	r3, r0
 8002296:	2216      	movs	r2, #22
 8002298:	601a      	str	r2, [r3, #0]
  return -1;
 800229a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <_exit>:

void _exit (int status)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022ae:	f04f 31ff 	mov.w	r1, #4294967295
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ffe7 	bl	8002286 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <_exit+0x12>

080022bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	e00a      	b.n	80022e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022ce:	f3af 8000 	nop.w
 80022d2:	4601      	mov	r1, r0
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	60ba      	str	r2, [r7, #8]
 80022da:	b2ca      	uxtb	r2, r1
 80022dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	3301      	adds	r3, #1
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	dbf0      	blt.n	80022ce <_read+0x12>
  }

  return len;
 80022ec:	687b      	ldr	r3, [r7, #4]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800231e:	605a      	str	r2, [r3, #4]
  return 0;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <_isatty>:

int _isatty(int file)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002336:	2301      	movs	r3, #1
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002368:	4a14      	ldr	r2, [pc, #80]	@ (80023bc <_sbrk+0x5c>)
 800236a:	4b15      	ldr	r3, [pc, #84]	@ (80023c0 <_sbrk+0x60>)
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002374:	4b13      	ldr	r3, [pc, #76]	@ (80023c4 <_sbrk+0x64>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d102      	bne.n	8002382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800237c:	4b11      	ldr	r3, [pc, #68]	@ (80023c4 <_sbrk+0x64>)
 800237e:	4a12      	ldr	r2, [pc, #72]	@ (80023c8 <_sbrk+0x68>)
 8002380:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002382:	4b10      	ldr	r3, [pc, #64]	@ (80023c4 <_sbrk+0x64>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	429a      	cmp	r2, r3
 800238e:	d207      	bcs.n	80023a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002390:	f007 ff14 	bl	800a1bc <__errno>
 8002394:	4603      	mov	r3, r0
 8002396:	220c      	movs	r2, #12
 8002398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800239a:	f04f 33ff 	mov.w	r3, #4294967295
 800239e:	e009      	b.n	80023b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a0:	4b08      	ldr	r3, [pc, #32]	@ (80023c4 <_sbrk+0x64>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023a6:	4b07      	ldr	r3, [pc, #28]	@ (80023c4 <_sbrk+0x64>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	4a05      	ldr	r2, [pc, #20]	@ (80023c4 <_sbrk+0x64>)
 80023b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023b2:	68fb      	ldr	r3, [r7, #12]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20030000 	.word	0x20030000
 80023c0:	00000400 	.word	0x00000400
 80023c4:	2000039c 	.word	0x2000039c
 80023c8:	20000860 	.word	0x20000860

080023cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023d0:	4b06      	ldr	r3, [pc, #24]	@ (80023ec <SystemInit+0x20>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d6:	4a05      	ldr	r2, [pc, #20]	@ (80023ec <SystemInit+0x20>)
 80023d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80023f8:	4b08      	ldr	r3, [pc, #32]	@ (800241c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80023fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80023fc:	4907      	ldr	r1, [pc, #28]	@ (800241c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4313      	orrs	r3, r2
 8002402:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002404:	4b05      	ldr	r3, [pc, #20]	@ (800241c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002406:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4013      	ands	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800240e:	68fb      	ldr	r3, [r7, #12]
}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	40021000 	.word	0x40021000

08002420 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002428:	4b08      	ldr	r3, [pc, #32]	@ (800244c <LL_APB1_GRP2_EnableClock+0x2c>)
 800242a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800242c:	4907      	ldr	r1, [pc, #28]	@ (800244c <LL_APB1_GRP2_EnableClock+0x2c>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4313      	orrs	r3, r2
 8002432:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002434:	4b05      	ldr	r3, [pc, #20]	@ (800244c <LL_APB1_GRP2_EnableClock+0x2c>)
 8002436:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4013      	ands	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800243e:	68fb      	ldr	r3, [r7, #12]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	40021000 	.word	0x40021000

08002450 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002456:	463b      	mov	r3, r7
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]
 8002464:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8002466:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800246a:	f7ff ffd9 	bl	8002420 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800246e:	2002      	movs	r0, #2
 8002470:	f7ff ffbe 	bl	80023f0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002474:	2001      	movs	r0, #1
 8002476:	f7ff ffbb 	bl	80023f0 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800247a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800247e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002480:	2303      	movs	r3, #3
 8002482:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002484:	2300      	movs	r3, #0
 8002486:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002488:	463b      	mov	r3, r7
 800248a:	4619      	mov	r1, r3
 800248c:	4809      	ldr	r0, [pc, #36]	@ (80024b4 <MX_UCPD1_Init+0x64>)
 800248e:	f005 f8d8 	bl	8007642 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8002492:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002496:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002498:	2303      	movs	r3, #3
 800249a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a0:	463b      	mov	r3, r7
 80024a2:	4619      	mov	r1, r3
 80024a4:	4804      	ldr	r0, [pc, #16]	@ (80024b8 <MX_UCPD1_Init+0x68>)
 80024a6:	f005 f8cc 	bl	8007642 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80024aa:	bf00      	nop
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	42020400 	.word	0x42020400
 80024b8:	42020000 	.word	0x42020000

080024bc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024c0:	4b22      	ldr	r3, [pc, #136]	@ (800254c <MX_USART2_UART_Init+0x90>)
 80024c2:	4a23      	ldr	r2, [pc, #140]	@ (8002550 <MX_USART2_UART_Init+0x94>)
 80024c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024c6:	4b21      	ldr	r3, [pc, #132]	@ (800254c <MX_USART2_UART_Init+0x90>)
 80024c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024ce:	4b1f      	ldr	r3, [pc, #124]	@ (800254c <MX_USART2_UART_Init+0x90>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024d4:	4b1d      	ldr	r3, [pc, #116]	@ (800254c <MX_USART2_UART_Init+0x90>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024da:	4b1c      	ldr	r3, [pc, #112]	@ (800254c <MX_USART2_UART_Init+0x90>)
 80024dc:	2200      	movs	r2, #0
 80024de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024e0:	4b1a      	ldr	r3, [pc, #104]	@ (800254c <MX_USART2_UART_Init+0x90>)
 80024e2:	220c      	movs	r2, #12
 80024e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024e6:	4b19      	ldr	r3, [pc, #100]	@ (800254c <MX_USART2_UART_Init+0x90>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024ec:	4b17      	ldr	r3, [pc, #92]	@ (800254c <MX_USART2_UART_Init+0x90>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024f2:	4b16      	ldr	r3, [pc, #88]	@ (800254c <MX_USART2_UART_Init+0x90>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024f8:	4b14      	ldr	r3, [pc, #80]	@ (800254c <MX_USART2_UART_Init+0x90>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024fe:	4b13      	ldr	r3, [pc, #76]	@ (800254c <MX_USART2_UART_Init+0x90>)
 8002500:	2200      	movs	r2, #0
 8002502:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002504:	4811      	ldr	r0, [pc, #68]	@ (800254c <MX_USART2_UART_Init+0x90>)
 8002506:	f004 f8df 	bl	80066c8 <HAL_UART_Init>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002510:	f7ff fd72 	bl	8001ff8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002514:	2100      	movs	r1, #0
 8002516:	480d      	ldr	r0, [pc, #52]	@ (800254c <MX_USART2_UART_Init+0x90>)
 8002518:	f004 fe7e 	bl	8007218 <HAL_UARTEx_SetTxFifoThreshold>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002522:	f7ff fd69 	bl	8001ff8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002526:	2100      	movs	r1, #0
 8002528:	4808      	ldr	r0, [pc, #32]	@ (800254c <MX_USART2_UART_Init+0x90>)
 800252a:	f004 feb3 	bl	8007294 <HAL_UARTEx_SetRxFifoThreshold>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002534:	f7ff fd60 	bl	8001ff8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002538:	4804      	ldr	r0, [pc, #16]	@ (800254c <MX_USART2_UART_Init+0x90>)
 800253a:	f004 fe34 	bl	80071a6 <HAL_UARTEx_DisableFifoMode>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002544:	f7ff fd58 	bl	8001ff8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}
 800254c:	200003a0 	.word	0x200003a0
 8002550:	40004400 	.word	0x40004400

08002554 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b0ae      	sub	sp, #184	@ 0xb8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800256c:	f107 0310 	add.w	r3, r7, #16
 8002570:	2294      	movs	r2, #148	@ 0x94
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f007 fdce 	bl	800a116 <memset>
  if(uartHandle->Instance==USART2)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a21      	ldr	r2, [pc, #132]	@ (8002604 <HAL_UART_MspInit+0xb0>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d13a      	bne.n	80025fa <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002584:	2302      	movs	r3, #2
 8002586:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002588:	2300      	movs	r3, #0
 800258a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800258c:	f107 0310 	add.w	r3, r7, #16
 8002590:	4618      	mov	r0, r3
 8002592:	f002 fcab 	bl	8004eec <HAL_RCCEx_PeriphCLKConfig>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800259c:	f7ff fd2c 	bl	8001ff8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025a0:	4b19      	ldr	r3, [pc, #100]	@ (8002608 <HAL_UART_MspInit+0xb4>)
 80025a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a4:	4a18      	ldr	r2, [pc, #96]	@ (8002608 <HAL_UART_MspInit+0xb4>)
 80025a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80025ac:	4b16      	ldr	r3, [pc, #88]	@ (8002608 <HAL_UART_MspInit+0xb4>)
 80025ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b8:	4b13      	ldr	r3, [pc, #76]	@ (8002608 <HAL_UART_MspInit+0xb4>)
 80025ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025bc:	4a12      	ldr	r2, [pc, #72]	@ (8002608 <HAL_UART_MspInit+0xb4>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025c4:	4b10      	ldr	r3, [pc, #64]	@ (8002608 <HAL_UART_MspInit+0xb4>)
 80025c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025d0:	230c      	movs	r3, #12
 80025d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d6:	2302      	movs	r3, #2
 80025d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e2:	2300      	movs	r3, #0
 80025e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025e8:	2307      	movs	r3, #7
 80025ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80025f2:	4619      	mov	r1, r3
 80025f4:	4805      	ldr	r0, [pc, #20]	@ (800260c <HAL_UART_MspInit+0xb8>)
 80025f6:	f001 f991 	bl	800391c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80025fa:	bf00      	nop
 80025fc:	37b8      	adds	r7, #184	@ 0xb8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40004400 	.word	0x40004400
 8002608:	40021000 	.word	0x40021000
 800260c:	42020000 	.word	0x42020000

08002610 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002614:	4b10      	ldr	r3, [pc, #64]	@ (8002658 <MX_USB_PCD_Init+0x48>)
 8002616:	4a11      	ldr	r2, [pc, #68]	@ (800265c <MX_USB_PCD_Init+0x4c>)
 8002618:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800261a:	4b0f      	ldr	r3, [pc, #60]	@ (8002658 <MX_USB_PCD_Init+0x48>)
 800261c:	2208      	movs	r2, #8
 800261e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002620:	4b0d      	ldr	r3, [pc, #52]	@ (8002658 <MX_USB_PCD_Init+0x48>)
 8002622:	2202      	movs	r2, #2
 8002624:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002626:	4b0c      	ldr	r3, [pc, #48]	@ (8002658 <MX_USB_PCD_Init+0x48>)
 8002628:	2202      	movs	r2, #2
 800262a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800262c:	4b0a      	ldr	r3, [pc, #40]	@ (8002658 <MX_USB_PCD_Init+0x48>)
 800262e:	2200      	movs	r2, #0
 8002630:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002632:	4b09      	ldr	r3, [pc, #36]	@ (8002658 <MX_USB_PCD_Init+0x48>)
 8002634:	2200      	movs	r2, #0
 8002636:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002638:	4b07      	ldr	r3, [pc, #28]	@ (8002658 <MX_USB_PCD_Init+0x48>)
 800263a:	2200      	movs	r2, #0
 800263c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800263e:	4b06      	ldr	r3, [pc, #24]	@ (8002658 <MX_USB_PCD_Init+0x48>)
 8002640:	2200      	movs	r2, #0
 8002642:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002644:	4804      	ldr	r0, [pc, #16]	@ (8002658 <MX_USB_PCD_Init+0x48>)
 8002646:	f001 fb01 	bl	8003c4c <HAL_PCD_Init>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002650:	f7ff fcd2 	bl	8001ff8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002654:	bf00      	nop
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20000434 	.word	0x20000434
 800265c:	4000d400 	.word	0x4000d400

08002660 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b0ae      	sub	sp, #184	@ 0xb8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002678:	f107 0310 	add.w	r3, r7, #16
 800267c:	2294      	movs	r2, #148	@ 0x94
 800267e:	2100      	movs	r1, #0
 8002680:	4618      	mov	r0, r3
 8002682:	f007 fd48 	bl	800a116 <memset>
  if(pcdHandle->Instance==USB)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a22      	ldr	r2, [pc, #136]	@ (8002714 <HAL_PCD_MspInit+0xb4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d13d      	bne.n	800270c <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002690:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002694:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002696:	2300      	movs	r3, #0
 8002698:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800269c:	f107 0310 	add.w	r3, r7, #16
 80026a0:	4618      	mov	r0, r3
 80026a2:	f002 fc23 	bl	8004eec <HAL_RCCEx_PeriphCLKConfig>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80026ac:	f7ff fca4 	bl	8001ff8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b0:	4b19      	ldr	r3, [pc, #100]	@ (8002718 <HAL_PCD_MspInit+0xb8>)
 80026b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b4:	4a18      	ldr	r2, [pc, #96]	@ (8002718 <HAL_PCD_MspInit+0xb8>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026bc:	4b16      	ldr	r3, [pc, #88]	@ (8002718 <HAL_PCD_MspInit+0xb8>)
 80026be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80026c8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80026cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d0:	2302      	movs	r3, #2
 80026d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026dc:	2300      	movs	r3, #0
 80026de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80026e2:	230a      	movs	r3, #10
 80026e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80026ec:	4619      	mov	r1, r3
 80026ee:	480b      	ldr	r0, [pc, #44]	@ (800271c <HAL_PCD_MspInit+0xbc>)
 80026f0:	f001 f914 	bl	800391c <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80026f4:	4b08      	ldr	r3, [pc, #32]	@ (8002718 <HAL_PCD_MspInit+0xb8>)
 80026f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f8:	4a07      	ldr	r2, [pc, #28]	@ (8002718 <HAL_PCD_MspInit+0xb8>)
 80026fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026fe:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002700:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <HAL_PCD_MspInit+0xb8>)
 8002702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002704:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800270c:	bf00      	nop
 800270e:	37b8      	adds	r7, #184	@ 0xb8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	4000d400 	.word	0x4000d400
 8002718:	40021000 	.word	0x40021000
 800271c:	42020000 	.word	0x42020000

08002720 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002720:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002758 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002724:	f7ff fe52 	bl	80023cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002728:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800272a:	e003      	b.n	8002734 <LoopCopyDataInit>

0800272c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800272c:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800272e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002730:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002732:	3104      	adds	r1, #4

08002734 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002734:	480a      	ldr	r0, [pc, #40]	@ (8002760 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002736:	4b0b      	ldr	r3, [pc, #44]	@ (8002764 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002738:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800273a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800273c:	d3f6      	bcc.n	800272c <CopyDataInit>
	ldr	r2, =_sbss
 800273e:	4a0a      	ldr	r2, [pc, #40]	@ (8002768 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002740:	e002      	b.n	8002748 <LoopFillZerobss>

08002742 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002742:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002744:	f842 3b04 	str.w	r3, [r2], #4

08002748 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002748:	4b08      	ldr	r3, [pc, #32]	@ (800276c <LoopForever+0x16>)
	cmp	r2, r3
 800274a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800274c:	d3f9      	bcc.n	8002742 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800274e:	f007 fd3b 	bl	800a1c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002752:	f7ff faa5 	bl	8001ca0 <main>

08002756 <LoopForever>:

LoopForever:
    b LoopForever
 8002756:	e7fe      	b.n	8002756 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002758:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800275c:	0800c7f4 	.word	0x0800c7f4
	ldr	r0, =_sdata
 8002760:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002764:	200001d8 	.word	0x200001d8
	ldr	r2, =_sbss
 8002768:	200001d8 	.word	0x200001d8
	ldr	r3, = _ebss
 800276c:	20000860 	.word	0x20000860

08002770 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002770:	e7fe      	b.n	8002770 <ADC1_2_IRQHandler>
	...

08002774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002780:	4b17      	ldr	r3, [pc, #92]	@ (80027e0 <HAL_InitTick+0x6c>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d023      	beq.n	80027d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002788:	4b16      	ldr	r3, [pc, #88]	@ (80027e4 <HAL_InitTick+0x70>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b14      	ldr	r3, [pc, #80]	@ (80027e0 <HAL_InitTick+0x6c>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	4619      	mov	r1, r3
 8002792:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002796:	fbb3 f3f1 	udiv	r3, r3, r1
 800279a:	fbb2 f3f3 	udiv	r3, r2, r3
 800279e:	4618      	mov	r0, r3
 80027a0:	f001 f8b0 	bl	8003904 <HAL_SYSTICK_Config>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10f      	bne.n	80027ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b07      	cmp	r3, #7
 80027ae:	d809      	bhi.n	80027c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027b0:	2200      	movs	r2, #0
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	f04f 30ff 	mov.w	r0, #4294967295
 80027b8:	f001 f88a 	bl	80038d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027bc:	4a0a      	ldr	r2, [pc, #40]	@ (80027e8 <HAL_InitTick+0x74>)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	e007      	b.n	80027d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
 80027c8:	e004      	b.n	80027d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
 80027ce:	e001      	b.n	80027d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	2000000c 	.word	0x2000000c
 80027e4:	20000004 	.word	0x20000004
 80027e8:	20000008 	.word	0x20000008

080027ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027f0:	4b06      	ldr	r3, [pc, #24]	@ (800280c <HAL_IncTick+0x20>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	461a      	mov	r2, r3
 80027f6:	4b06      	ldr	r3, [pc, #24]	@ (8002810 <HAL_IncTick+0x24>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4413      	add	r3, r2
 80027fc:	4a04      	ldr	r2, [pc, #16]	@ (8002810 <HAL_IncTick+0x24>)
 80027fe:	6013      	str	r3, [r2, #0]
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	2000000c 	.word	0x2000000c
 8002810:	20000710 	.word	0x20000710

08002814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return uwTick;
 8002818:	4b03      	ldr	r3, [pc, #12]	@ (8002828 <HAL_GetTick+0x14>)
 800281a:	681b      	ldr	r3, [r3, #0]
}
 800281c:	4618      	mov	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	20000710 	.word	0x20000710

0800282c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002834:	f7ff ffee 	bl	8002814 <HAL_GetTick>
 8002838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002844:	d005      	beq.n	8002852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002846:	4b0a      	ldr	r3, [pc, #40]	@ (8002870 <HAL_Delay+0x44>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4413      	add	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002852:	bf00      	nop
 8002854:	f7ff ffde 	bl	8002814 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	429a      	cmp	r2, r3
 8002862:	d8f7      	bhi.n	8002854 <HAL_Delay+0x28>
  {
  }
}
 8002864:	bf00      	nop
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	2000000c 	.word	0x2000000c

08002874 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	609a      	str	r2, [r3, #8]
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	609a      	str	r2, [r3, #8]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3360      	adds	r3, #96	@ 0x60
 80028ee:	461a      	mov	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b08      	ldr	r3, [pc, #32]	@ (8002920 <LL_ADC_SetOffset+0x44>)
 80028fe:	4013      	ands	r3, r2
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	4313      	orrs	r3, r2
 800290c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002914:	bf00      	nop
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	03fff000 	.word	0x03fff000

08002924 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3360      	adds	r3, #96	@ 0x60
 8002932:	461a      	mov	r2, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002944:	4618      	mov	r0, r3
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	3360      	adds	r3, #96	@ 0x60
 8002960:	461a      	mov	r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	431a      	orrs	r2, r3
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800297a:	bf00      	nop
 800297c:	371c      	adds	r7, #28
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	615a      	str	r2, [r3, #20]
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	3330      	adds	r3, #48	@ 0x30
 80029bc:	461a      	mov	r2, r3
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	0a1b      	lsrs	r3, r3, #8
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	f003 030c 	and.w	r3, r3, #12
 80029c8:	4413      	add	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f003 031f 	and.w	r3, r3, #31
 80029d6:	211f      	movs	r1, #31
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	401a      	ands	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	0e9b      	lsrs	r3, r3, #26
 80029e4:	f003 011f 	and.w	r1, r3, #31
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f003 031f 	and.w	r3, r3, #31
 80029ee:	fa01 f303 	lsl.w	r3, r1, r3
 80029f2:	431a      	orrs	r2, r3
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029f8:	bf00      	nop
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	3314      	adds	r3, #20
 8002a14:	461a      	mov	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	0e5b      	lsrs	r3, r3, #25
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	4413      	add	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	0d1b      	lsrs	r3, r3, #20
 8002a2c:	f003 031f 	and.w	r3, r3, #31
 8002a30:	2107      	movs	r1, #7
 8002a32:	fa01 f303 	lsl.w	r3, r1, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	401a      	ands	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	0d1b      	lsrs	r3, r3, #20
 8002a3e:	f003 031f 	and.w	r3, r3, #31
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	fa01 f303 	lsl.w	r3, r1, r3
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a4e:	bf00      	nop
 8002a50:	371c      	adds	r7, #28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
	...

08002a5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a74:	43db      	mvns	r3, r3
 8002a76:	401a      	ands	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f003 0318 	and.w	r3, r3, #24
 8002a7e:	4908      	ldr	r1, [pc, #32]	@ (8002aa0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a80:	40d9      	lsrs	r1, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	400b      	ands	r3, r1
 8002a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a92:	bf00      	nop
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	0007ffff 	.word	0x0007ffff

08002aa4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002ab4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6093      	str	r3, [r2, #8]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ad8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002adc:	d101      	bne.n	8002ae2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002b00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b04:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b2c:	d101      	bne.n	8002b32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <LL_ADC_IsEnabled+0x18>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <LL_ADC_IsEnabled+0x1a>
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d101      	bne.n	8002b7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d101      	bne.n	8002ba4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bb4:	b590      	push	{r4, r7, lr}
 8002bb6:	b089      	sub	sp, #36	@ 0x24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e12e      	b.n	8002e2c <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d109      	bne.n	8002bf0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7fe fa4b 	bl	8001078 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ff67 	bl	8002ac8 <LL_ADC_IsDeepPowerDownEnabled>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d004      	beq.n	8002c0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff ff4d 	bl	8002aa4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff ff82 	bl	8002b18 <LL_ADC_IsInternalRegulatorEnabled>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d115      	bne.n	8002c46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff ff66 	bl	8002af0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c24:	4b83      	ldr	r3, [pc, #524]	@ (8002e34 <HAL_ADC_Init+0x280>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	099b      	lsrs	r3, r3, #6
 8002c2a:	4a83      	ldr	r2, [pc, #524]	@ (8002e38 <HAL_ADC_Init+0x284>)
 8002c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c30:	099b      	lsrs	r3, r3, #6
 8002c32:	3301      	adds	r3, #1
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c38:	e002      	b.n	8002c40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f9      	bne.n	8002c3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff ff64 	bl	8002b18 <LL_ADC_IsInternalRegulatorEnabled>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10d      	bne.n	8002c72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5a:	f043 0210 	orr.w	r2, r3, #16
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c66:	f043 0201 	orr.w	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff ff75 	bl	8002b66 <LL_ADC_REG_IsConversionOngoing>
 8002c7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c82:	f003 0310 	and.w	r3, r3, #16
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f040 80c7 	bne.w	8002e1a <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f040 80c3 	bne.w	8002e1a <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c98:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002c9c:	f043 0202 	orr.w	r2, r3, #2
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff ff49 	bl	8002b40 <LL_ADC_IsEnabled>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d110      	bne.n	8002cd6 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cb4:	4861      	ldr	r0, [pc, #388]	@ (8002e3c <HAL_ADC_Init+0x288>)
 8002cb6:	f7ff ff43 	bl	8002b40 <LL_ADC_IsEnabled>
 8002cba:	4604      	mov	r4, r0
 8002cbc:	4860      	ldr	r0, [pc, #384]	@ (8002e40 <HAL_ADC_Init+0x28c>)
 8002cbe:	f7ff ff3f 	bl	8002b40 <LL_ADC_IsEnabled>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4323      	orrs	r3, r4
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d105      	bne.n	8002cd6 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	485c      	ldr	r0, [pc, #368]	@ (8002e44 <HAL_ADC_Init+0x290>)
 8002cd2:	f7ff fdcf 	bl	8002874 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	7e5b      	ldrb	r3, [r3, #25]
 8002cda:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ce0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002ce6:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002cec:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cf4:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d106      	bne.n	8002d12 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	045b      	lsls	r3, r3, #17
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d009      	beq.n	8002d2e <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1e:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d26:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	4b44      	ldr	r3, [pc, #272]	@ (8002e48 <HAL_ADC_Init+0x294>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	69b9      	ldr	r1, [r7, #24]
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff ff20 	bl	8002b8c <LL_ADC_INJ_IsConversionOngoing>
 8002d4c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d140      	bne.n	8002dd6 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d13d      	bne.n	8002dd6 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	7e1b      	ldrb	r3, [r3, #24]
 8002d62:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d64:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d6c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d7c:	f023 0306 	bic.w	r3, r3, #6
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	69b9      	ldr	r1, [r7, #24]
 8002d86:	430b      	orrs	r3, r1
 8002d88:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d118      	bne.n	8002dc6 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002d9e:	f023 0304 	bic.w	r3, r3, #4
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002daa:	4311      	orrs	r1, r2
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002db0:	4311      	orrs	r1, r2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002db6:	430a      	orrs	r2, r1
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0201 	orr.w	r2, r2, #1
 8002dc2:	611a      	str	r2, [r3, #16]
 8002dc4:	e007      	b.n	8002dd6 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0201 	bic.w	r2, r2, #1
 8002dd4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d10c      	bne.n	8002df8 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de4:	f023 010f 	bic.w	r1, r3, #15
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	1e5a      	subs	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002df6:	e007      	b.n	8002e08 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 020f 	bic.w	r2, r2, #15
 8002e06:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0c:	f023 0303 	bic.w	r3, r3, #3
 8002e10:	f043 0201 	orr.w	r2, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e18:	e007      	b.n	8002e2a <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1e:	f043 0210 	orr.w	r2, r3, #16
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3724      	adds	r7, #36	@ 0x24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd90      	pop	{r4, r7, pc}
 8002e34:	20000004 	.word	0x20000004
 8002e38:	053e2d63 	.word	0x053e2d63
 8002e3c:	42028000 	.word	0x42028000
 8002e40:	42028100 	.word	0x42028100
 8002e44:	42028300 	.word	0x42028300
 8002e48:	fff0c007 	.word	0xfff0c007

08002e4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002e4c:	b590      	push	{r4, r7, lr}
 8002e4e:	b0b7      	sub	sp, #220	@ 0xdc
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x22>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e3c1      	b.n	80035f2 <HAL_ADC_ConfigChannel+0x7a6>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fe73 	bl	8002b66 <LL_ADC_REG_IsConversionOngoing>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f040 83a6 	bne.w	80035d4 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	6859      	ldr	r1, [r3, #4]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	f7ff fd89 	bl	80029ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff fe61 	bl	8002b66 <LL_ADC_REG_IsConversionOngoing>
 8002ea4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff fe6d 	bl	8002b8c <LL_ADC_INJ_IsConversionOngoing>
 8002eb2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002eb6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f040 81c1 	bne.w	8003242 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ec0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f040 81bc 	bne.w	8003242 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ed2:	d10f      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2200      	movs	r2, #0
 8002ede:	4619      	mov	r1, r3
 8002ee0:	f7ff fd90 	bl	8002a04 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fd4a 	bl	8002986 <LL_ADC_SetSamplingTimeCommonConfig>
 8002ef2:	e00e      	b.n	8002f12 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	6819      	ldr	r1, [r3, #0]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	461a      	mov	r2, r3
 8002f02:	f7ff fd7f 	bl	8002a04 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff fd3a 	bl	8002986 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	695a      	ldr	r2, [r3, #20]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	08db      	lsrs	r3, r3, #3
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d00a      	beq.n	8002f4a <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	6919      	ldr	r1, [r3, #16]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f44:	f7ff fcca 	bl	80028dc <LL_ADC_SetOffset>
 8002f48:	e17b      	b.n	8003242 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2100      	movs	r1, #0
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fce7 	bl	8002924 <LL_ADC_GetOffsetChannel>
 8002f56:	4603      	mov	r3, r0
 8002f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10a      	bne.n	8002f76 <HAL_ADC_ConfigChannel+0x12a>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2100      	movs	r1, #0
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff fcdc 	bl	8002924 <LL_ADC_GetOffsetChannel>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	0e9b      	lsrs	r3, r3, #26
 8002f70:	f003 021f 	and.w	r2, r3, #31
 8002f74:	e01e      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x168>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff fcd1 	bl	8002924 <LL_ADC_GetOffsetChannel>
 8002f82:	4603      	mov	r3, r0
 8002f84:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002f8c:	fa93 f3a3 	rbit	r3, r3
 8002f90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8002fa4:	2320      	movs	r3, #32
 8002fa6:	e004      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8002fa8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002fac:	fab3 f383 	clz	r3, r3
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d105      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x180>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	0e9b      	lsrs	r3, r3, #26
 8002fc6:	f003 031f 	and.w	r3, r3, #31
 8002fca:	e018      	b.n	8002ffe <HAL_ADC_ConfigChannel+0x1b2>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002fd8:	fa93 f3a3 	rbit	r3, r3
 8002fdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002fe0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002fe8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8002ff0:	2320      	movs	r3, #32
 8002ff2:	e004      	b.n	8002ffe <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8002ff4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ff8:	fab3 f383 	clz	r3, r3
 8002ffc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d106      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2200      	movs	r2, #0
 8003008:	2100      	movs	r1, #0
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fca0 	bl	8002950 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2101      	movs	r1, #1
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff fc84 	bl	8002924 <LL_ADC_GetOffsetChannel>
 800301c:	4603      	mov	r3, r0
 800301e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10a      	bne.n	800303c <HAL_ADC_ConfigChannel+0x1f0>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2101      	movs	r1, #1
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff fc79 	bl	8002924 <LL_ADC_GetOffsetChannel>
 8003032:	4603      	mov	r3, r0
 8003034:	0e9b      	lsrs	r3, r3, #26
 8003036:	f003 021f 	and.w	r2, r3, #31
 800303a:	e01e      	b.n	800307a <HAL_ADC_ConfigChannel+0x22e>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2101      	movs	r1, #1
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fc6e 	bl	8002924 <LL_ADC_GetOffsetChannel>
 8003048:	4603      	mov	r3, r0
 800304a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003052:	fa93 f3a3 	rbit	r3, r3
 8003056:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800305a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800305e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003062:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 800306a:	2320      	movs	r3, #32
 800306c:	e004      	b.n	8003078 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 800306e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003082:	2b00      	cmp	r3, #0
 8003084:	d105      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x246>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	0e9b      	lsrs	r3, r3, #26
 800308c:	f003 031f 	and.w	r3, r3, #31
 8003090:	e018      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x278>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80030a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80030ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 80030b6:	2320      	movs	r3, #32
 80030b8:	e004      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 80030ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030be:	fab3 f383 	clz	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d106      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2200      	movs	r2, #0
 80030ce:	2101      	movs	r1, #1
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fc3d 	bl	8002950 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2102      	movs	r1, #2
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fc21 	bl	8002924 <LL_ADC_GetOffsetChannel>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10a      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x2b6>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2102      	movs	r1, #2
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fc16 	bl	8002924 <LL_ADC_GetOffsetChannel>
 80030f8:	4603      	mov	r3, r0
 80030fa:	0e9b      	lsrs	r3, r3, #26
 80030fc:	f003 021f 	and.w	r2, r3, #31
 8003100:	e01e      	b.n	8003140 <HAL_ADC_ConfigChannel+0x2f4>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2102      	movs	r1, #2
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fc0b 	bl	8002924 <LL_ADC_GetOffsetChannel>
 800310e:	4603      	mov	r3, r0
 8003110:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003114:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003120:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003124:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003128:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8003130:	2320      	movs	r3, #32
 8003132:	e004      	b.n	800313e <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8003134:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003138:	fab3 f383 	clz	r3, r3
 800313c:	b2db      	uxtb	r3, r3
 800313e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003148:	2b00      	cmp	r3, #0
 800314a:	d105      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x30c>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	0e9b      	lsrs	r3, r3, #26
 8003152:	f003 031f 	and.w	r3, r3, #31
 8003156:	e016      	b.n	8003186 <HAL_ADC_ConfigChannel+0x33a>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003160:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003164:	fa93 f3a3 	rbit	r3, r3
 8003168:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800316a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800316c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003170:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8003178:	2320      	movs	r3, #32
 800317a:	e004      	b.n	8003186 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 800317c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003180:	fab3 f383 	clz	r3, r3
 8003184:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003186:	429a      	cmp	r2, r3
 8003188:	d106      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2200      	movs	r2, #0
 8003190:	2102      	movs	r1, #2
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff fbdc 	bl	8002950 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2103      	movs	r1, #3
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff fbc0 	bl	8002924 <LL_ADC_GetOffsetChannel>
 80031a4:	4603      	mov	r3, r0
 80031a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10a      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x378>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2103      	movs	r1, #3
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fbb5 	bl	8002924 <LL_ADC_GetOffsetChannel>
 80031ba:	4603      	mov	r3, r0
 80031bc:	0e9b      	lsrs	r3, r3, #26
 80031be:	f003 021f 	and.w	r2, r3, #31
 80031c2:	e017      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x3a8>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2103      	movs	r1, #3
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff fbaa 	bl	8002924 <LL_ADC_GetOffsetChannel>
 80031d0:	4603      	mov	r3, r0
 80031d2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031d6:	fa93 f3a3 	rbit	r3, r3
 80031da:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80031dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031de:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80031e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 80031e6:	2320      	movs	r3, #32
 80031e8:	e003      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 80031ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031ec:	fab3 f383 	clz	r3, r3
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d105      	bne.n	800320c <HAL_ADC_ConfigChannel+0x3c0>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	0e9b      	lsrs	r3, r3, #26
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	e011      	b.n	8003230 <HAL_ADC_ConfigChannel+0x3e4>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003212:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003214:	fa93 f3a3 	rbit	r3, r3
 8003218:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800321a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800321c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800321e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8003224:	2320      	movs	r3, #32
 8003226:	e003      	b.n	8003230 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8003228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800322a:	fab3 f383 	clz	r3, r3
 800322e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003230:	429a      	cmp	r2, r3
 8003232:	d106      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2200      	movs	r2, #0
 800323a:	2103      	movs	r1, #3
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff fb87 	bl	8002950 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff fc7a 	bl	8002b40 <LL_ADC_IsEnabled>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	f040 81c9 	bne.w	80035e6 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	6819      	ldr	r1, [r3, #0]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	461a      	mov	r2, r3
 8003262:	f7ff fbfb 	bl	8002a5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	4a8f      	ldr	r2, [pc, #572]	@ (80034a8 <HAL_ADC_ConfigChannel+0x65c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	f040 8131 	bne.w	80034d4 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10b      	bne.n	800329a <HAL_ADC_ConfigChannel+0x44e>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	0e9b      	lsrs	r3, r3, #26
 8003288:	3301      	adds	r3, #1
 800328a:	f003 031f 	and.w	r3, r3, #31
 800328e:	2b09      	cmp	r3, #9
 8003290:	bf94      	ite	ls
 8003292:	2301      	movls	r3, #1
 8003294:	2300      	movhi	r3, #0
 8003296:	b2db      	uxtb	r3, r3
 8003298:	e019      	b.n	80032ce <HAL_ADC_ConfigChannel+0x482>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032a2:	fa93 f3a3 	rbit	r3, r3
 80032a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80032a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032aa:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80032ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 80032b2:	2320      	movs	r3, #32
 80032b4:	e003      	b.n	80032be <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 80032b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032b8:	fab3 f383 	clz	r3, r3
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	3301      	adds	r3, #1
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	2b09      	cmp	r3, #9
 80032c6:	bf94      	ite	ls
 80032c8:	2301      	movls	r3, #1
 80032ca:	2300      	movhi	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d079      	beq.n	80033c6 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d107      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x4a2>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	0e9b      	lsrs	r3, r3, #26
 80032e4:	3301      	adds	r3, #1
 80032e6:	069b      	lsls	r3, r3, #26
 80032e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032ec:	e015      	b.n	800331a <HAL_ADC_ConfigChannel+0x4ce>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032f6:	fa93 f3a3 	rbit	r3, r3
 80032fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80032fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032fe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003300:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003306:	2320      	movs	r3, #32
 8003308:	e003      	b.n	8003312 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800330a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800330c:	fab3 f383 	clz	r3, r3
 8003310:	b2db      	uxtb	r3, r3
 8003312:	3301      	adds	r3, #1
 8003314:	069b      	lsls	r3, r3, #26
 8003316:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003322:	2b00      	cmp	r3, #0
 8003324:	d109      	bne.n	800333a <HAL_ADC_ConfigChannel+0x4ee>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	0e9b      	lsrs	r3, r3, #26
 800332c:	3301      	adds	r3, #1
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	2101      	movs	r1, #1
 8003334:	fa01 f303 	lsl.w	r3, r1, r3
 8003338:	e017      	b.n	800336a <HAL_ADC_ConfigChannel+0x51e>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003342:	fa93 f3a3 	rbit	r3, r3
 8003346:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003348:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800334a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800334c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8003352:	2320      	movs	r3, #32
 8003354:	e003      	b.n	800335e <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8003356:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003358:	fab3 f383 	clz	r3, r3
 800335c:	b2db      	uxtb	r3, r3
 800335e:	3301      	adds	r3, #1
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	2101      	movs	r1, #1
 8003366:	fa01 f303 	lsl.w	r3, r1, r3
 800336a:	ea42 0103 	orr.w	r1, r2, r3
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10a      	bne.n	8003390 <HAL_ADC_ConfigChannel+0x544>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	0e9b      	lsrs	r3, r3, #26
 8003380:	3301      	adds	r3, #1
 8003382:	f003 021f 	and.w	r2, r3, #31
 8003386:	4613      	mov	r3, r2
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	4413      	add	r3, r2
 800338c:	051b      	lsls	r3, r3, #20
 800338e:	e018      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x576>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003398:	fa93 f3a3 	rbit	r3, r3
 800339c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800339e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80033a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80033a8:	2320      	movs	r3, #32
 80033aa:	e003      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80033ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033ae:	fab3 f383 	clz	r3, r3
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	3301      	adds	r3, #1
 80033b6:	f003 021f 	and.w	r2, r3, #31
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033c2:	430b      	orrs	r3, r1
 80033c4:	e081      	b.n	80034ca <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d107      	bne.n	80033e2 <HAL_ADC_ConfigChannel+0x596>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	0e9b      	lsrs	r3, r3, #26
 80033d8:	3301      	adds	r3, #1
 80033da:	069b      	lsls	r3, r3, #26
 80033dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033e0:	e015      	b.n	800340e <HAL_ADC_ConfigChannel+0x5c2>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ea:	fa93 f3a3 	rbit	r3, r3
 80033ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80033f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80033f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80033fa:	2320      	movs	r3, #32
 80033fc:	e003      	b.n	8003406 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80033fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003400:	fab3 f383 	clz	r3, r3
 8003404:	b2db      	uxtb	r3, r3
 8003406:	3301      	adds	r3, #1
 8003408:	069b      	lsls	r3, r3, #26
 800340a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003416:	2b00      	cmp	r3, #0
 8003418:	d109      	bne.n	800342e <HAL_ADC_ConfigChannel+0x5e2>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	0e9b      	lsrs	r3, r3, #26
 8003420:	3301      	adds	r3, #1
 8003422:	f003 031f 	and.w	r3, r3, #31
 8003426:	2101      	movs	r1, #1
 8003428:	fa01 f303 	lsl.w	r3, r1, r3
 800342c:	e017      	b.n	800345e <HAL_ADC_ConfigChannel+0x612>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	fa93 f3a3 	rbit	r3, r3
 800343a:	61fb      	str	r3, [r7, #28]
  return result;
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8003446:	2320      	movs	r3, #32
 8003448:	e003      	b.n	8003452 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 800344a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344c:	fab3 f383 	clz	r3, r3
 8003450:	b2db      	uxtb	r3, r3
 8003452:	3301      	adds	r3, #1
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	2101      	movs	r1, #1
 800345a:	fa01 f303 	lsl.w	r3, r1, r3
 800345e:	ea42 0103 	orr.w	r1, r2, r3
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10d      	bne.n	800348a <HAL_ADC_ConfigChannel+0x63e>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	0e9b      	lsrs	r3, r3, #26
 8003474:	3301      	adds	r3, #1
 8003476:	f003 021f 	and.w	r2, r3, #31
 800347a:	4613      	mov	r3, r2
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	4413      	add	r3, r2
 8003480:	3b1e      	subs	r3, #30
 8003482:	051b      	lsls	r3, r3, #20
 8003484:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003488:	e01e      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x67c>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	fa93 f3a3 	rbit	r3, r3
 8003496:	613b      	str	r3, [r7, #16]
  return result;
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d104      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 80034a2:	2320      	movs	r3, #32
 80034a4:	e006      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x668>
 80034a6:	bf00      	nop
 80034a8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	fab3 f383 	clz	r3, r3
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	3301      	adds	r3, #1
 80034b6:	f003 021f 	and.w	r2, r3, #31
 80034ba:	4613      	mov	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4413      	add	r3, r2
 80034c0:	3b1e      	subs	r3, #30
 80034c2:	051b      	lsls	r3, r3, #20
 80034c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034c8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034ce:	4619      	mov	r1, r3
 80034d0:	f7ff fa98 	bl	8002a04 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	4b48      	ldr	r3, [pc, #288]	@ (80035fc <HAL_ADC_ConfigChannel+0x7b0>)
 80034da:	4013      	ands	r3, r2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 8082 	beq.w	80035e6 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034e2:	4847      	ldr	r0, [pc, #284]	@ (8003600 <HAL_ADC_ConfigChannel+0x7b4>)
 80034e4:	f7ff f9ec 	bl	80028c0 <LL_ADC_GetCommonPathInternalCh>
 80034e8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034ec:	4845      	ldr	r0, [pc, #276]	@ (8003604 <HAL_ADC_ConfigChannel+0x7b8>)
 80034ee:	f7ff fb27 	bl	8002b40 <LL_ADC_IsEnabled>
 80034f2:	4604      	mov	r4, r0
 80034f4:	4844      	ldr	r0, [pc, #272]	@ (8003608 <HAL_ADC_ConfigChannel+0x7bc>)
 80034f6:	f7ff fb23 	bl	8002b40 <LL_ADC_IsEnabled>
 80034fa:	4603      	mov	r3, r0
 80034fc:	4323      	orrs	r3, r4
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d15e      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a41      	ldr	r2, [pc, #260]	@ (800360c <HAL_ADC_ConfigChannel+0x7c0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d127      	bne.n	800355c <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800350c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003510:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d121      	bne.n	800355c <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a39      	ldr	r2, [pc, #228]	@ (8003604 <HAL_ADC_ConfigChannel+0x7b8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d161      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003522:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003526:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800352a:	4619      	mov	r1, r3
 800352c:	4834      	ldr	r0, [pc, #208]	@ (8003600 <HAL_ADC_ConfigChannel+0x7b4>)
 800352e:	f7ff f9b4 	bl	800289a <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003532:	4b37      	ldr	r3, [pc, #220]	@ (8003610 <HAL_ADC_ConfigChannel+0x7c4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	099b      	lsrs	r3, r3, #6
 8003538:	4a36      	ldr	r2, [pc, #216]	@ (8003614 <HAL_ADC_ConfigChannel+0x7c8>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	099b      	lsrs	r3, r3, #6
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	4613      	mov	r3, r2
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800354a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800354c:	e002      	b.n	8003554 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3b01      	subs	r3, #1
 8003552:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f9      	bne.n	800354e <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800355a:	e044      	b.n	80035e6 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a2d      	ldr	r2, [pc, #180]	@ (8003618 <HAL_ADC_ConfigChannel+0x7cc>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d113      	bne.n	800358e <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003566:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800356a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10d      	bne.n	800358e <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a23      	ldr	r2, [pc, #140]	@ (8003604 <HAL_ADC_ConfigChannel+0x7b8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d134      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800357c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003580:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003584:	4619      	mov	r1, r3
 8003586:	481e      	ldr	r0, [pc, #120]	@ (8003600 <HAL_ADC_ConfigChannel+0x7b4>)
 8003588:	f7ff f987 	bl	800289a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800358c:	e02b      	b.n	80035e6 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a22      	ldr	r2, [pc, #136]	@ (800361c <HAL_ADC_ConfigChannel+0x7d0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d126      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003598:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800359c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d120      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a16      	ldr	r2, [pc, #88]	@ (8003604 <HAL_ADC_ConfigChannel+0x7b8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d11b      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035b6:	4619      	mov	r1, r3
 80035b8:	4811      	ldr	r0, [pc, #68]	@ (8003600 <HAL_ADC_ConfigChannel+0x7b4>)
 80035ba:	f7ff f96e 	bl	800289a <LL_ADC_SetCommonPathInternalCh>
 80035be:	e012      	b.n	80035e6 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c4:	f043 0220 	orr.w	r2, r3, #32
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	659a      	str	r2, [r3, #88]	@ 0x58

          tmp_hal_status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80035d2:	e008      	b.n	80035e6 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d8:	f043 0220 	orr.w	r2, r3, #32
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80035ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	37dc      	adds	r7, #220	@ 0xdc
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd90      	pop	{r4, r7, pc}
 80035fa:	bf00      	nop
 80035fc:	80080000 	.word	0x80080000
 8003600:	42028300 	.word	0x42028300
 8003604:	42028000 	.word	0x42028000
 8003608:	42028100 	.word	0x42028100
 800360c:	c7520000 	.word	0xc7520000
 8003610:	20000004 	.word	0x20000004
 8003614:	053e2d63 	.word	0x053e2d63
 8003618:	cb840000 	.word	0xcb840000
 800361c:	80000001 	.word	0x80000001

08003620 <LL_ADC_IsEnabled>:
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <LL_ADC_IsEnabled+0x18>
 8003634:	2301      	movs	r3, #1
 8003636:	e000      	b.n	800363a <LL_ADC_IsEnabled+0x1a>
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <LL_ADC_REG_IsConversionOngoing>:
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b04      	cmp	r3, #4
 8003658:	d101      	bne.n	800365e <LL_ADC_REG_IsConversionOngoing+0x18>
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800366c:	b590      	push	{r4, r7, lr}
 800366e:	b0a1      	sub	sp, #132	@ 0x84
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003686:	2302      	movs	r3, #2
 8003688:	e089      	b.n	800379e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003692:	2300      	movs	r3, #0
 8003694:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003696:	2300      	movs	r3, #0
 8003698:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a42      	ldr	r2, [pc, #264]	@ (80037a8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d102      	bne.n	80036aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80036a4:	4b41      	ldr	r3, [pc, #260]	@ (80037ac <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	e001      	b.n	80036ae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10b      	bne.n	80036cc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b8:	f043 0220 	orr.w	r2, r3, #32
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e068      	b.n	800379e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff ffb9 	bl	8003646 <LL_ADC_REG_IsConversionOngoing>
 80036d4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff ffb3 	bl	8003646 <LL_ADC_REG_IsConversionOngoing>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d14a      	bne.n	800377c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80036e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d147      	bne.n	800377c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80036ec:	4b30      	ldr	r3, [pc, #192]	@ (80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80036ee:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d027      	beq.n	8003748 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80036f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	6859      	ldr	r1, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800370a:	035b      	lsls	r3, r3, #13
 800370c:	430b      	orrs	r3, r1
 800370e:	431a      	orrs	r2, r3
 8003710:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003712:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003714:	4824      	ldr	r0, [pc, #144]	@ (80037a8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003716:	f7ff ff83 	bl	8003620 <LL_ADC_IsEnabled>
 800371a:	4604      	mov	r4, r0
 800371c:	4823      	ldr	r0, [pc, #140]	@ (80037ac <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800371e:	f7ff ff7f 	bl	8003620 <LL_ADC_IsEnabled>
 8003722:	4603      	mov	r3, r0
 8003724:	4323      	orrs	r3, r4
 8003726:	2b00      	cmp	r3, #0
 8003728:	d132      	bne.n	8003790 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800372a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003732:	f023 030f 	bic.w	r3, r3, #15
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	6811      	ldr	r1, [r2, #0]
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	6892      	ldr	r2, [r2, #8]
 800373e:	430a      	orrs	r2, r1
 8003740:	431a      	orrs	r2, r3
 8003742:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003744:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003746:	e023      	b.n	8003790 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003748:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003750:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003752:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003754:	4814      	ldr	r0, [pc, #80]	@ (80037a8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003756:	f7ff ff63 	bl	8003620 <LL_ADC_IsEnabled>
 800375a:	4604      	mov	r4, r0
 800375c:	4813      	ldr	r0, [pc, #76]	@ (80037ac <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800375e:	f7ff ff5f 	bl	8003620 <LL_ADC_IsEnabled>
 8003762:	4603      	mov	r3, r0
 8003764:	4323      	orrs	r3, r4
 8003766:	2b00      	cmp	r3, #0
 8003768:	d112      	bne.n	8003790 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800376a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003772:	f023 030f 	bic.w	r3, r3, #15
 8003776:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003778:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800377a:	e009      	b.n	8003790 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003780:	f043 0220 	orr.w	r2, r3, #32
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800378e:	e000      	b.n	8003792 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003790:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800379a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3784      	adds	r7, #132	@ 0x84
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd90      	pop	{r4, r7, pc}
 80037a6:	bf00      	nop
 80037a8:	42028000 	.word	0x42028000
 80037ac:	42028100 	.word	0x42028100
 80037b0:	42028300 	.word	0x42028300

080037b4 <__NVIC_GetPriorityGrouping>:
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037b8:	4b04      	ldr	r3, [pc, #16]	@ (80037cc <__NVIC_GetPriorityGrouping+0x18>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	0a1b      	lsrs	r3, r3, #8
 80037be:	f003 0307 	and.w	r3, r3, #7
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	e000ed00 	.word	0xe000ed00

080037d0 <__NVIC_SetPriority>:
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	6039      	str	r1, [r7, #0]
 80037da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	db0a      	blt.n	80037fa <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	490c      	ldr	r1, [pc, #48]	@ (800381c <__NVIC_SetPriority+0x4c>)
 80037ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ee:	0152      	lsls	r2, r2, #5
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	440b      	add	r3, r1
 80037f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80037f8:	e00a      	b.n	8003810 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	4908      	ldr	r1, [pc, #32]	@ (8003820 <__NVIC_SetPriority+0x50>)
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	3b04      	subs	r3, #4
 8003808:	0152      	lsls	r2, r2, #5
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	440b      	add	r3, r1
 800380e:	761a      	strb	r2, [r3, #24]
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	e000e100 	.word	0xe000e100
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <NVIC_EncodePriority>:
{
 8003824:	b480      	push	{r7}
 8003826:	b089      	sub	sp, #36	@ 0x24
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f1c3 0307 	rsb	r3, r3, #7
 800383e:	2b03      	cmp	r3, #3
 8003840:	bf28      	it	cs
 8003842:	2303      	movcs	r3, #3
 8003844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	3303      	adds	r3, #3
 800384a:	2b06      	cmp	r3, #6
 800384c:	d902      	bls.n	8003854 <NVIC_EncodePriority+0x30>
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	3b04      	subs	r3, #4
 8003852:	e000      	b.n	8003856 <NVIC_EncodePriority+0x32>
 8003854:	2300      	movs	r3, #0
 8003856:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003858:	f04f 32ff 	mov.w	r2, #4294967295
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43da      	mvns	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	401a      	ands	r2, r3
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800386c:	f04f 31ff 	mov.w	r1, #4294967295
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	fa01 f303 	lsl.w	r3, r1, r3
 8003876:	43d9      	mvns	r1, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800387c:	4313      	orrs	r3, r2
}
 800387e:	4618      	mov	r0, r3
 8003880:	3724      	adds	r7, #36	@ 0x24
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
	...

0800388c <SysTick_Config>:
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3b01      	subs	r3, #1
 8003898:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800389c:	d301      	bcc.n	80038a2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800389e:	2301      	movs	r3, #1
 80038a0:	e00f      	b.n	80038c2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038a2:	4a0a      	ldr	r2, [pc, #40]	@ (80038cc <SysTick_Config+0x40>)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038aa:	2107      	movs	r1, #7
 80038ac:	f04f 30ff 	mov.w	r0, #4294967295
 80038b0:	f7ff ff8e 	bl	80037d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038b4:	4b05      	ldr	r3, [pc, #20]	@ (80038cc <SysTick_Config+0x40>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ba:	4b04      	ldr	r3, [pc, #16]	@ (80038cc <SysTick_Config+0x40>)
 80038bc:	2207      	movs	r2, #7
 80038be:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	e000e010 	.word	0xe000e010

080038d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038de:	f7ff ff69 	bl	80037b4 <__NVIC_GetPriorityGrouping>
 80038e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	68b9      	ldr	r1, [r7, #8]
 80038e8:	6978      	ldr	r0, [r7, #20]
 80038ea:	f7ff ff9b 	bl	8003824 <NVIC_EncodePriority>
 80038ee:	4602      	mov	r2, r0
 80038f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f4:	4611      	mov	r1, r2
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff ff6a 	bl	80037d0 <__NVIC_SetPriority>
}
 80038fc:	bf00      	nop
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff ffbd 	bl	800388c <SysTick_Config>
 8003912:	4603      	mov	r3, r0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800392a:	e158      	b.n	8003bde <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	2101      	movs	r1, #1
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	fa01 f303 	lsl.w	r3, r1, r3
 8003938:	4013      	ands	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 814a 	beq.w	8003bd8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	2b01      	cmp	r3, #1
 800394e:	d005      	beq.n	800395c <HAL_GPIO_Init+0x40>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d130      	bne.n	80039be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	2203      	movs	r2, #3
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	43db      	mvns	r3, r3
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	4013      	ands	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003992:	2201      	movs	r2, #1
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43db      	mvns	r3, r3
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4013      	ands	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	091b      	lsrs	r3, r3, #4
 80039a8:	f003 0201 	and.w	r2, r3, #1
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d017      	beq.n	80039fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	2203      	movs	r2, #3
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4013      	ands	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d123      	bne.n	8003a4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	08da      	lsrs	r2, r3, #3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3208      	adds	r2, #8
 8003a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a12:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	220f      	movs	r2, #15
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	43db      	mvns	r3, r3
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4013      	ands	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	691a      	ldr	r2, [r3, #16]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	08da      	lsrs	r2, r3, #3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3208      	adds	r2, #8
 8003a48:	6939      	ldr	r1, [r7, #16]
 8003a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	2203      	movs	r2, #3
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4013      	ands	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f003 0203 	and.w	r2, r3, #3
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80a4 	beq.w	8003bd8 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8003a90:	4a5a      	ldr	r2, [pc, #360]	@ (8003bfc <HAL_GPIO_Init+0x2e0>)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	089b      	lsrs	r3, r3, #2
 8003a96:	3318      	adds	r3, #24
 8003a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a9c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	220f      	movs	r2, #15
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	43db      	mvns	r3, r3
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a52      	ldr	r2, [pc, #328]	@ (8003c00 <HAL_GPIO_Init+0x2e4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d025      	beq.n	8003b08 <HAL_GPIO_Init+0x1ec>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a51      	ldr	r2, [pc, #324]	@ (8003c04 <HAL_GPIO_Init+0x2e8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d01f      	beq.n	8003b04 <HAL_GPIO_Init+0x1e8>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a50      	ldr	r2, [pc, #320]	@ (8003c08 <HAL_GPIO_Init+0x2ec>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d019      	beq.n	8003b00 <HAL_GPIO_Init+0x1e4>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a4f      	ldr	r2, [pc, #316]	@ (8003c0c <HAL_GPIO_Init+0x2f0>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d013      	beq.n	8003afc <HAL_GPIO_Init+0x1e0>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a4e      	ldr	r2, [pc, #312]	@ (8003c10 <HAL_GPIO_Init+0x2f4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00d      	beq.n	8003af8 <HAL_GPIO_Init+0x1dc>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a4d      	ldr	r2, [pc, #308]	@ (8003c14 <HAL_GPIO_Init+0x2f8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d007      	beq.n	8003af4 <HAL_GPIO_Init+0x1d8>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a4c      	ldr	r2, [pc, #304]	@ (8003c18 <HAL_GPIO_Init+0x2fc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d101      	bne.n	8003af0 <HAL_GPIO_Init+0x1d4>
 8003aec:	2306      	movs	r3, #6
 8003aee:	e00c      	b.n	8003b0a <HAL_GPIO_Init+0x1ee>
 8003af0:	2307      	movs	r3, #7
 8003af2:	e00a      	b.n	8003b0a <HAL_GPIO_Init+0x1ee>
 8003af4:	2305      	movs	r3, #5
 8003af6:	e008      	b.n	8003b0a <HAL_GPIO_Init+0x1ee>
 8003af8:	2304      	movs	r3, #4
 8003afa:	e006      	b.n	8003b0a <HAL_GPIO_Init+0x1ee>
 8003afc:	2303      	movs	r3, #3
 8003afe:	e004      	b.n	8003b0a <HAL_GPIO_Init+0x1ee>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e002      	b.n	8003b0a <HAL_GPIO_Init+0x1ee>
 8003b04:	2301      	movs	r3, #1
 8003b06:	e000      	b.n	8003b0a <HAL_GPIO_Init+0x1ee>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	f002 0203 	and.w	r2, r2, #3
 8003b10:	00d2      	lsls	r2, r2, #3
 8003b12:	4093      	lsls	r3, r2
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8003b1a:	4938      	ldr	r1, [pc, #224]	@ (8003bfc <HAL_GPIO_Init+0x2e0>)
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	089b      	lsrs	r3, r3, #2
 8003b20:	3318      	adds	r3, #24
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b28:	4b34      	ldr	r3, [pc, #208]	@ (8003bfc <HAL_GPIO_Init+0x2e0>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	43db      	mvns	r3, r3
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4013      	ands	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b4c:	4a2b      	ldr	r2, [pc, #172]	@ (8003bfc <HAL_GPIO_Init+0x2e0>)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b52:	4b2a      	ldr	r3, [pc, #168]	@ (8003bfc <HAL_GPIO_Init+0x2e0>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b76:	4a21      	ldr	r2, [pc, #132]	@ (8003bfc <HAL_GPIO_Init+0x2e0>)
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8003bfc <HAL_GPIO_Init+0x2e0>)
 8003b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	43db      	mvns	r3, r3
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ba2:	4a16      	ldr	r2, [pc, #88]	@ (8003bfc <HAL_GPIO_Init+0x2e0>)
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8003baa:	4b14      	ldr	r3, [pc, #80]	@ (8003bfc <HAL_GPIO_Init+0x2e0>)
 8003bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8003bfc <HAL_GPIO_Init+0x2e0>)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f47f ae9f 	bne.w	800392c <HAL_GPIO_Init+0x10>
  }
}
 8003bee:	bf00      	nop
 8003bf0:	bf00      	nop
 8003bf2:	371c      	adds	r7, #28
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	4002f400 	.word	0x4002f400
 8003c00:	42020000 	.word	0x42020000
 8003c04:	42020400 	.word	0x42020400
 8003c08:	42020800 	.word	0x42020800
 8003c0c:	42020c00 	.word	0x42020c00
 8003c10:	42021000 	.word	0x42021000
 8003c14:	42021400 	.word	0x42021400
 8003c18:	42021800 	.word	0x42021800

08003c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	807b      	strh	r3, [r7, #2]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c2c:	787b      	ldrb	r3, [r7, #1]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c32:	887a      	ldrh	r2, [r7, #2]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c38:	e002      	b.n	8003c40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c3a:	887a      	ldrh	r2, [r7, #2]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e0c0      	b.n	8003de0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d106      	bne.n	8003c78 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7fe fcf4 	bl	8002660 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f003 fd49 	bl	800771c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	73fb      	strb	r3, [r7, #15]
 8003c8e:	e03e      	b.n	8003d0e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c90:	7bfa      	ldrb	r2, [r7, #15]
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	440b      	add	r3, r1
 8003c9e:	3311      	adds	r3, #17
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ca4:	7bfa      	ldrb	r2, [r7, #15]
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	440b      	add	r3, r1
 8003cb2:	3310      	adds	r3, #16
 8003cb4:	7bfa      	ldrb	r2, [r7, #15]
 8003cb6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003cb8:	7bfa      	ldrb	r2, [r7, #15]
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	440b      	add	r3, r1
 8003cc6:	3313      	adds	r3, #19
 8003cc8:	2200      	movs	r2, #0
 8003cca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ccc:	7bfa      	ldrb	r2, [r7, #15]
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	440b      	add	r3, r1
 8003cda:	3320      	adds	r3, #32
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ce0:	7bfa      	ldrb	r2, [r7, #15]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	440b      	add	r3, r1
 8003cee:	3324      	adds	r3, #36	@ 0x24
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003cf4:	7bfb      	ldrb	r3, [r7, #15]
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	440b      	add	r3, r1
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	73fb      	strb	r3, [r7, #15]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	791b      	ldrb	r3, [r3, #4]
 8003d12:	7bfa      	ldrb	r2, [r7, #15]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d3bb      	bcc.n	8003c90 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d18:	2300      	movs	r3, #0
 8003d1a:	73fb      	strb	r3, [r7, #15]
 8003d1c:	e044      	b.n	8003da8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d1e:	7bfa      	ldrb	r2, [r7, #15]
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	4613      	mov	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	440b      	add	r3, r1
 8003d2c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003d30:	2200      	movs	r2, #0
 8003d32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d34:	7bfa      	ldrb	r2, [r7, #15]
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	440b      	add	r3, r1
 8003d42:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d46:	7bfa      	ldrb	r2, [r7, #15]
 8003d48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d4a:	7bfa      	ldrb	r2, [r7, #15]
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	440b      	add	r3, r1
 8003d58:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d60:	7bfa      	ldrb	r2, [r7, #15]
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	4613      	mov	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	440b      	add	r3, r1
 8003d6e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d76:	7bfa      	ldrb	r2, [r7, #15]
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	440b      	add	r3, r1
 8003d84:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d8c:	7bfa      	ldrb	r2, [r7, #15]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	440b      	add	r3, r1
 8003d9a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
 8003da4:	3301      	adds	r3, #1
 8003da6:	73fb      	strb	r3, [r7, #15]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	791b      	ldrb	r3, [r3, #4]
 8003dac:	7bfa      	ldrb	r2, [r7, #15]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d3b5      	bcc.n	8003d1e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3304      	adds	r3, #4
 8003dba:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003dbe:	f003 fcc8 	bl	8007752 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	7a9b      	ldrb	r3, [r3, #10]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d102      	bne.n	8003dde <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f805 	bl	8003de8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	f043 0302 	orr.w	r3, r3, #2
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e40:	4b05      	ldr	r3, [pc, #20]	@ (8003e58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a04      	ldr	r2, [pc, #16]	@ (8003e58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e4a:	6013      	str	r3, [r2, #0]
}
 8003e4c:	bf00      	nop
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40007000 	.word	0x40007000

08003e5c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003e60:	4b04      	ldr	r3, [pc, #16]	@ (8003e74 <HAL_PWREx_GetVoltageRange+0x18>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40007000 	.word	0x40007000

08003e78 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8003e80:	4b27      	ldr	r3, [pc, #156]	@ (8003f20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e88:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8003e8a:	f000 f851 	bl	8003f30 <HAL_PWREx_SMPS_GetEffectiveMode>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e94:	d101      	bne.n	8003e9a <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e03e      	b.n	8003f18 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8003e9a:	4b21      	ldr	r3, [pc, #132]	@ (8003f20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ea2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ea6:	d101      	bne.n	8003eac <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e035      	b.n	8003f18 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d101      	bne.n	8003eb8 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	e02f      	b.n	8003f18 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003eb8:	4b19      	ldr	r3, [pc, #100]	@ (8003f20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8003ec0:	4917      	ldr	r1, [pc, #92]	@ (8003f20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8003ec8:	4b16      	ldr	r3, [pc, #88]	@ (8003f24 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	4a16      	ldr	r2, [pc, #88]	@ (8003f28 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed4:	09db      	lsrs	r3, r3, #7
 8003ed6:	2232      	movs	r2, #50	@ 0x32
 8003ed8:	fb02 f303 	mul.w	r3, r2, r3
 8003edc:	4a13      	ldr	r2, [pc, #76]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003ede:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee2:	08db      	lsrs	r3, r3, #3
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ee8:	e002      	b.n	8003ef0 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	3b01      	subs	r3, #1
 8003eee:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ef8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003efc:	d102      	bne.n	8003f04 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1f2      	bne.n	8003eea <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f04:	4b06      	ldr	r3, [pc, #24]	@ (8003f20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f10:	d101      	bne.n	8003f16 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e000      	b.n	8003f18 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40007000 	.word	0x40007000
 8003f24:	20000004 	.word	0x20000004
 8003f28:	0a7c5ac5 	.word	0x0a7c5ac5
 8003f2c:	cccccccd 	.word	0xcccccccd

08003f30 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8003f36:	4b0f      	ldr	r3, [pc, #60]	@ (8003f74 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8003f46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f4a:	607b      	str	r3, [r7, #4]
 8003f4c:	e00a      	b.n	8003f64 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d103      	bne.n	8003f60 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8003f58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f5c:	607b      	str	r3, [r7, #4]
 8003f5e:	e001      	b.n	8003f64 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003f60:	2300      	movs	r3, #0
 8003f62:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8003f64:	687b      	ldr	r3, [r7, #4]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40007000 	.word	0x40007000

08003f78 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d102      	bne.n	8003f8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	f000 bcc2 	b.w	8004910 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f8c:	4b99      	ldr	r3, [pc, #612]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 030c 	and.w	r3, r3, #12
 8003f94:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f96:	4b97      	ldr	r3, [pc, #604]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0310 	and.w	r3, r3, #16
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 80e9 	beq.w	8004180 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d006      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x4a>
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2b0c      	cmp	r3, #12
 8003fb8:	f040 8083 	bne.w	80040c2 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d17f      	bne.n	80040c2 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fc2:	4b8c      	ldr	r3, [pc, #560]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d006      	beq.n	8003fdc <HAL_RCC_OscConfig+0x64>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d102      	bne.n	8003fdc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	f000 bc9a 	b.w	8004910 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fe0:	4b84      	ldr	r3, [pc, #528]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0308 	and.w	r3, r3, #8
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d004      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x7e>
 8003fec:	4b81      	ldr	r3, [pc, #516]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ff4:	e005      	b.n	8004002 <HAL_RCC_OscConfig+0x8a>
 8003ff6:	4b7f      	ldr	r3, [pc, #508]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 8003ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ffc:	091b      	lsrs	r3, r3, #4
 8003ffe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004002:	4293      	cmp	r3, r2
 8004004:	d224      	bcs.n	8004050 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fe9c 	bl	8004d48 <RCC_SetFlashLatencyFromMSIRange>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	f000 bc7a 	b.w	8004910 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800401c:	4b75      	ldr	r3, [pc, #468]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a74      	ldr	r2, [pc, #464]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 8004022:	f043 0308 	orr.w	r3, r3, #8
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	4b72      	ldr	r3, [pc, #456]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004034:	496f      	ldr	r1, [pc, #444]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 8004036:	4313      	orrs	r3, r2
 8004038:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800403a:	4b6e      	ldr	r3, [pc, #440]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	021b      	lsls	r3, r3, #8
 8004048:	496a      	ldr	r1, [pc, #424]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 800404a:	4313      	orrs	r3, r2
 800404c:	604b      	str	r3, [r1, #4]
 800404e:	e026      	b.n	800409e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004050:	4b68      	ldr	r3, [pc, #416]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a67      	ldr	r2, [pc, #412]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 8004056:	f043 0308 	orr.w	r3, r3, #8
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	4b65      	ldr	r3, [pc, #404]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	4962      	ldr	r1, [pc, #392]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 800406a:	4313      	orrs	r3, r2
 800406c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800406e:	4b61      	ldr	r3, [pc, #388]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	021b      	lsls	r3, r3, #8
 800407c:	495d      	ldr	r1, [pc, #372]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 800407e:	4313      	orrs	r3, r2
 8004080:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10a      	bne.n	800409e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408c:	4618      	mov	r0, r3
 800408e:	f000 fe5b 	bl	8004d48 <RCC_SetFlashLatencyFromMSIRange>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	f000 bc39 	b.w	8004910 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800409e:	f000 fe17 	bl	8004cd0 <HAL_RCC_GetHCLKFreq>
 80040a2:	4603      	mov	r3, r0
 80040a4:	4a54      	ldr	r2, [pc, #336]	@ (80041f8 <HAL_RCC_OscConfig+0x280>)
 80040a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80040a8:	4b54      	ldr	r3, [pc, #336]	@ (80041fc <HAL_RCC_OscConfig+0x284>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fe fb61 	bl	8002774 <HAL_InitTick>
 80040b2:	4603      	mov	r3, r0
 80040b4:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d060      	beq.n	800417e <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
 80040be:	f000 bc27 	b.w	8004910 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d039      	beq.n	800413e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040ca:	4b4a      	ldr	r3, [pc, #296]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a49      	ldr	r2, [pc, #292]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040d6:	f7fe fb9d 	bl	8002814 <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040dc:	e00f      	b.n	80040fe <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040de:	f7fe fb99 	bl	8002814 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d908      	bls.n	80040fe <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040ec:	4b41      	ldr	r3, [pc, #260]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d102      	bne.n	80040fe <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	f000 bc09 	b.w	8004910 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040fe:	4b3d      	ldr	r3, [pc, #244]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0e9      	beq.n	80040de <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800410a:	4b3a      	ldr	r3, [pc, #232]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a39      	ldr	r2, [pc, #228]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 8004110:	f043 0308 	orr.w	r3, r3, #8
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	4b37      	ldr	r3, [pc, #220]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004122:	4934      	ldr	r1, [pc, #208]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 8004124:	4313      	orrs	r3, r2
 8004126:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004128:	4b32      	ldr	r3, [pc, #200]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	021b      	lsls	r3, r3, #8
 8004136:	492f      	ldr	r1, [pc, #188]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 8004138:	4313      	orrs	r3, r2
 800413a:	604b      	str	r3, [r1, #4]
 800413c:	e020      	b.n	8004180 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800413e:	4b2d      	ldr	r3, [pc, #180]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a2c      	ldr	r2, [pc, #176]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 8004144:	f023 0301 	bic.w	r3, r3, #1
 8004148:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800414a:	f7fe fb63 	bl	8002814 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004150:	e00e      	b.n	8004170 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004152:	f7fe fb5f 	bl	8002814 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d907      	bls.n	8004170 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004160:	4b24      	ldr	r3, [pc, #144]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e3cf      	b.n	8004910 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004170:	4b20      	ldr	r3, [pc, #128]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1ea      	bne.n	8004152 <HAL_RCC_OscConfig+0x1da>
 800417c:	e000      	b.n	8004180 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800417e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d07e      	beq.n	800428a <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	2b08      	cmp	r3, #8
 8004190:	d005      	beq.n	800419e <HAL_RCC_OscConfig+0x226>
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	2b0c      	cmp	r3, #12
 8004196:	d10e      	bne.n	80041b6 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	2b03      	cmp	r3, #3
 800419c:	d10b      	bne.n	80041b6 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800419e:	4b15      	ldr	r3, [pc, #84]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d06e      	beq.n	8004288 <HAL_RCC_OscConfig+0x310>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d16a      	bne.n	8004288 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e3ac      	b.n	8004910 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041be:	d106      	bne.n	80041ce <HAL_RCC_OscConfig+0x256>
 80041c0:	4b0c      	ldr	r3, [pc, #48]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a0b      	ldr	r2, [pc, #44]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 80041c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ca:	6013      	str	r3, [r2, #0]
 80041cc:	e024      	b.n	8004218 <HAL_RCC_OscConfig+0x2a0>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041d6:	d113      	bne.n	8004200 <HAL_RCC_OscConfig+0x288>
 80041d8:	4b06      	ldr	r3, [pc, #24]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a05      	ldr	r2, [pc, #20]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 80041de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	4b03      	ldr	r3, [pc, #12]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a02      	ldr	r2, [pc, #8]	@ (80041f4 <HAL_RCC_OscConfig+0x27c>)
 80041ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	e012      	b.n	8004218 <HAL_RCC_OscConfig+0x2a0>
 80041f2:	bf00      	nop
 80041f4:	40021000 	.word	0x40021000
 80041f8:	20000004 	.word	0x20000004
 80041fc:	20000008 	.word	0x20000008
 8004200:	4b8b      	ldr	r3, [pc, #556]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a8a      	ldr	r2, [pc, #552]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 8004206:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	4b88      	ldr	r3, [pc, #544]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a87      	ldr	r2, [pc, #540]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 8004212:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d019      	beq.n	8004254 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fe faf8 	bl	8002814 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004226:	e00e      	b.n	8004246 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004228:	f7fe faf4 	bl	8002814 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b64      	cmp	r3, #100	@ 0x64
 8004234:	d907      	bls.n	8004246 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004236:	4b7e      	ldr	r3, [pc, #504]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e364      	b.n	8004910 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004246:	4b7a      	ldr	r3, [pc, #488]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0ea      	beq.n	8004228 <HAL_RCC_OscConfig+0x2b0>
 8004252:	e01a      	b.n	800428a <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7fe fade 	bl	8002814 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800425a:	e00e      	b.n	800427a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800425c:	f7fe fada 	bl	8002814 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b64      	cmp	r3, #100	@ 0x64
 8004268:	d907      	bls.n	800427a <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800426a:	4b71      	ldr	r3, [pc, #452]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e34a      	b.n	8004910 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800427a:	4b6d      	ldr	r3, [pc, #436]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1ea      	bne.n	800425c <HAL_RCC_OscConfig+0x2e4>
 8004286:	e000      	b.n	800428a <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d06c      	beq.n	8004370 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	2b04      	cmp	r3, #4
 800429a:	d005      	beq.n	80042a8 <HAL_RCC_OscConfig+0x330>
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	2b0c      	cmp	r3, #12
 80042a0:	d119      	bne.n	80042d6 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d116      	bne.n	80042d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042a8:	4b61      	ldr	r3, [pc, #388]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d005      	beq.n	80042c0 <HAL_RCC_OscConfig+0x348>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e327      	b.n	8004910 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c0:	4b5b      	ldr	r3, [pc, #364]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	061b      	lsls	r3, r3, #24
 80042ce:	4958      	ldr	r1, [pc, #352]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042d4:	e04c      	b.n	8004370 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d029      	beq.n	8004332 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042de:	4b54      	ldr	r3, [pc, #336]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a53      	ldr	r2, [pc, #332]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 80042e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ea:	f7fe fa93 	bl	8002814 <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042f0:	e00e      	b.n	8004310 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042f2:	f7fe fa8f 	bl	8002814 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d907      	bls.n	8004310 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004300:	4b4b      	ldr	r3, [pc, #300]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e2ff      	b.n	8004910 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004310:	4b47      	ldr	r3, [pc, #284]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0ea      	beq.n	80042f2 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431c:	4b44      	ldr	r3, [pc, #272]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	061b      	lsls	r3, r3, #24
 800432a:	4941      	ldr	r1, [pc, #260]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 800432c:	4313      	orrs	r3, r2
 800432e:	604b      	str	r3, [r1, #4]
 8004330:	e01e      	b.n	8004370 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004332:	4b3f      	ldr	r3, [pc, #252]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a3e      	ldr	r2, [pc, #248]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 8004338:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800433c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433e:	f7fe fa69 	bl	8002814 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004344:	e00e      	b.n	8004364 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004346:	f7fe fa65 	bl	8002814 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d907      	bls.n	8004364 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004354:	4b36      	ldr	r3, [pc, #216]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e2d5      	b.n	8004910 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004364:	4b32      	ldr	r3, [pc, #200]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1ea      	bne.n	8004346 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0308 	and.w	r3, r3, #8
 8004378:	2b00      	cmp	r3, #0
 800437a:	d062      	beq.n	8004442 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d038      	beq.n	80043f6 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d108      	bne.n	800439e <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800438c:	4b28      	ldr	r3, [pc, #160]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 800438e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004392:	4a27      	ldr	r2, [pc, #156]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 8004394:	f023 0310 	bic.w	r3, r3, #16
 8004398:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800439c:	e007      	b.n	80043ae <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800439e:	4b24      	ldr	r3, [pc, #144]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 80043a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043a4:	4a22      	ldr	r2, [pc, #136]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 80043a6:	f043 0310 	orr.w	r3, r3, #16
 80043aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ae:	4b20      	ldr	r3, [pc, #128]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 80043b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 80043b6:	f043 0301 	orr.w	r3, r3, #1
 80043ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043be:	f7fe fa29 	bl	8002814 <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043c4:	e00f      	b.n	80043e6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043c6:	f7fe fa25 	bl	8002814 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b07      	cmp	r3, #7
 80043d2:	d908      	bls.n	80043e6 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043d4:	4b16      	ldr	r3, [pc, #88]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 80043d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e294      	b.n	8004910 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043e6:	4b12      	ldr	r3, [pc, #72]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 80043e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0e8      	beq.n	80043c6 <HAL_RCC_OscConfig+0x44e>
 80043f4:	e025      	b.n	8004442 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 80043f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043fc:	4a0c      	ldr	r2, [pc, #48]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004406:	f7fe fa05 	bl	8002814 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800440c:	e012      	b.n	8004434 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800440e:	f7fe fa01 	bl	8002814 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b07      	cmp	r3, #7
 800441a:	d90b      	bls.n	8004434 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800441c:	4b04      	ldr	r3, [pc, #16]	@ (8004430 <HAL_RCC_OscConfig+0x4b8>)
 800441e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d004      	beq.n	8004434 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e270      	b.n	8004910 <HAL_RCC_OscConfig+0x998>
 800442e:	bf00      	nop
 8004430:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004434:	4ba8      	ldr	r3, [pc, #672]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 8004436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1e5      	bne.n	800440e <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 812d 	beq.w	80046aa <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004450:	2300      	movs	r3, #0
 8004452:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004454:	4ba0      	ldr	r3, [pc, #640]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 8004456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10d      	bne.n	800447c <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004460:	4b9d      	ldr	r3, [pc, #628]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 8004462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004464:	4a9c      	ldr	r2, [pc, #624]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 8004466:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800446a:	6593      	str	r3, [r2, #88]	@ 0x58
 800446c:	4b9a      	ldr	r3, [pc, #616]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 800446e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004478:	2301      	movs	r3, #1
 800447a:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800447c:	4b97      	ldr	r3, [pc, #604]	@ (80046dc <HAL_RCC_OscConfig+0x764>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004484:	2b00      	cmp	r3, #0
 8004486:	d11e      	bne.n	80044c6 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004488:	4b94      	ldr	r3, [pc, #592]	@ (80046dc <HAL_RCC_OscConfig+0x764>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a93      	ldr	r2, [pc, #588]	@ (80046dc <HAL_RCC_OscConfig+0x764>)
 800448e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004492:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004494:	f7fe f9be 	bl	8002814 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800449a:	e00e      	b.n	80044ba <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800449c:	f7fe f9ba 	bl	8002814 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d907      	bls.n	80044ba <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044aa:	4b8c      	ldr	r3, [pc, #560]	@ (80046dc <HAL_RCC_OscConfig+0x764>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e22a      	b.n	8004910 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044ba:	4b88      	ldr	r3, [pc, #544]	@ (80046dc <HAL_RCC_OscConfig+0x764>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0ea      	beq.n	800449c <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d01f      	beq.n	8004512 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 0304 	and.w	r3, r3, #4
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d010      	beq.n	8004500 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80044de:	4b7e      	ldr	r3, [pc, #504]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 80044e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e4:	4a7c      	ldr	r2, [pc, #496]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 80044e6:	f043 0304 	orr.w	r3, r3, #4
 80044ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80044ee:	4b7a      	ldr	r3, [pc, #488]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 80044f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f4:	4a78      	ldr	r2, [pc, #480]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 80044f6:	f043 0301 	orr.w	r3, r3, #1
 80044fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044fe:	e018      	b.n	8004532 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004500:	4b75      	ldr	r3, [pc, #468]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004506:	4a74      	ldr	r2, [pc, #464]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004510:	e00f      	b.n	8004532 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004512:	4b71      	ldr	r3, [pc, #452]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 8004514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004518:	4a6f      	ldr	r2, [pc, #444]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004522:	4b6d      	ldr	r3, [pc, #436]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 8004524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004528:	4a6b      	ldr	r2, [pc, #428]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 800452a:	f023 0304 	bic.w	r3, r3, #4
 800452e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d068      	beq.n	800460c <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453a:	f7fe f96b 	bl	8002814 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004540:	e011      	b.n	8004566 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004542:	f7fe f967 	bl	8002814 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004550:	4293      	cmp	r3, r2
 8004552:	d908      	bls.n	8004566 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004554:	4b60      	ldr	r3, [pc, #384]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 8004556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e1d4      	b.n	8004910 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004566:	4b5c      	ldr	r3, [pc, #368]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 8004568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0e6      	beq.n	8004542 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800457c:	2b00      	cmp	r3, #0
 800457e:	d022      	beq.n	80045c6 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004580:	4b55      	ldr	r3, [pc, #340]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 8004582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004586:	4a54      	ldr	r2, [pc, #336]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 8004588:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800458c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004590:	e011      	b.n	80045b6 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004592:	f7fe f93f 	bl	8002814 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d908      	bls.n	80045b6 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80045a4:	4b4c      	ldr	r3, [pc, #304]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e1ac      	b.n	8004910 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80045b6:	4b48      	ldr	r3, [pc, #288]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 80045b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0e6      	beq.n	8004592 <HAL_RCC_OscConfig+0x61a>
 80045c4:	e068      	b.n	8004698 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80045c6:	4b44      	ldr	r3, [pc, #272]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 80045c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045cc:	4a42      	ldr	r2, [pc, #264]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 80045ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045d6:	e011      	b.n	80045fc <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d8:	f7fe f91c 	bl	8002814 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d908      	bls.n	80045fc <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045ea:	4b3b      	ldr	r3, [pc, #236]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 80045ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e189      	b.n	8004910 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045fc:	4b36      	ldr	r3, [pc, #216]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 80045fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004602:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1e6      	bne.n	80045d8 <HAL_RCC_OscConfig+0x660>
 800460a:	e045      	b.n	8004698 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460c:	f7fe f902 	bl	8002814 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004612:	e011      	b.n	8004638 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004614:	f7fe f8fe 	bl	8002814 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004622:	4293      	cmp	r3, r2
 8004624:	d908      	bls.n	8004638 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004626:	4b2c      	ldr	r3, [pc, #176]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 8004628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e16b      	b.n	8004910 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004638:	4b27      	ldr	r3, [pc, #156]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1e6      	bne.n	8004614 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004646:	4b24      	ldr	r3, [pc, #144]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 8004648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800464c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004650:	2b00      	cmp	r3, #0
 8004652:	d021      	beq.n	8004698 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004654:	4b20      	ldr	r3, [pc, #128]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 8004656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800465a:	4a1f      	ldr	r2, [pc, #124]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 800465c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004660:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004664:	e011      	b.n	800468a <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004666:	f7fe f8d5 	bl	8002814 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004674:	4293      	cmp	r3, r2
 8004676:	d908      	bls.n	800468a <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004678:	4b17      	ldr	r3, [pc, #92]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 800467a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800467e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e142      	b.n	8004910 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800468a:	4b13      	ldr	r3, [pc, #76]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 800468c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004690:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1e6      	bne.n	8004666 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004698:	7ffb      	ldrb	r3, [r7, #31]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d105      	bne.n	80046aa <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800469e:	4b0e      	ldr	r3, [pc, #56]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 80046a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a2:	4a0d      	ldr	r2, [pc, #52]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 80046a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046a8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d04f      	beq.n	8004756 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d028      	beq.n	8004710 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046be:	4b06      	ldr	r3, [pc, #24]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 80046c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046c4:	4a04      	ldr	r2, [pc, #16]	@ (80046d8 <HAL_RCC_OscConfig+0x760>)
 80046c6:	f043 0301 	orr.w	r3, r3, #1
 80046ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ce:	f7fe f8a1 	bl	8002814 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046d4:	e014      	b.n	8004700 <HAL_RCC_OscConfig+0x788>
 80046d6:	bf00      	nop
 80046d8:	40021000 	.word	0x40021000
 80046dc:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046e0:	f7fe f898 	bl	8002814 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d908      	bls.n	8004700 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046ee:	4b8a      	ldr	r3, [pc, #552]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 80046f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e107      	b.n	8004910 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004700:	4b85      	ldr	r3, [pc, #532]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 8004702:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0e8      	beq.n	80046e0 <HAL_RCC_OscConfig+0x768>
 800470e:	e022      	b.n	8004756 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004710:	4b81      	ldr	r3, [pc, #516]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 8004712:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004716:	4a80      	ldr	r2, [pc, #512]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 8004718:	f023 0301 	bic.w	r3, r3, #1
 800471c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004720:	f7fe f878 	bl	8002814 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004726:	e00f      	b.n	8004748 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004728:	f7fe f874 	bl	8002814 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d908      	bls.n	8004748 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004736:	4b78      	ldr	r3, [pc, #480]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 8004738:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e0e3      	b.n	8004910 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004748:	4b73      	ldr	r3, [pc, #460]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 800474a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1e8      	bne.n	8004728 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 80d7 	beq.w	800490e <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004760:	4b6d      	ldr	r3, [pc, #436]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 030c 	and.w	r3, r3, #12
 8004768:	2b0c      	cmp	r3, #12
 800476a:	f000 8091 	beq.w	8004890 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004772:	2b02      	cmp	r3, #2
 8004774:	d166      	bne.n	8004844 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004776:	4b68      	ldr	r3, [pc, #416]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a67      	ldr	r2, [pc, #412]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 800477c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004782:	f7fe f847 	bl	8002814 <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004788:	e00e      	b.n	80047a8 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478a:	f7fe f843 	bl	8002814 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d907      	bls.n	80047a8 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004798:	4b5f      	ldr	r3, [pc, #380]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e0b3      	b.n	8004910 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047a8:	4b5b      	ldr	r3, [pc, #364]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1ea      	bne.n	800478a <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047b4:	4b58      	ldr	r3, [pc, #352]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	4b58      	ldr	r3, [pc, #352]	@ (800491c <HAL_RCC_OscConfig+0x9a4>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80047c4:	3a01      	subs	r2, #1
 80047c6:	0112      	lsls	r2, r2, #4
 80047c8:	4311      	orrs	r1, r2
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80047ce:	0212      	lsls	r2, r2, #8
 80047d0:	4311      	orrs	r1, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80047d6:	0852      	lsrs	r2, r2, #1
 80047d8:	3a01      	subs	r2, #1
 80047da:	0552      	lsls	r2, r2, #21
 80047dc:	4311      	orrs	r1, r2
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80047e2:	0852      	lsrs	r2, r2, #1
 80047e4:	3a01      	subs	r2, #1
 80047e6:	0652      	lsls	r2, r2, #25
 80047e8:	4311      	orrs	r1, r2
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80047ee:	06d2      	lsls	r2, r2, #27
 80047f0:	430a      	orrs	r2, r1
 80047f2:	4949      	ldr	r1, [pc, #292]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047f8:	4b47      	ldr	r3, [pc, #284]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a46      	ldr	r2, [pc, #280]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 80047fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004802:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004804:	4b44      	ldr	r3, [pc, #272]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	4a43      	ldr	r2, [pc, #268]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 800480a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800480e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004810:	f7fe f800 	bl	8002814 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004816:	e00e      	b.n	8004836 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004818:	f7fd fffc 	bl	8002814 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d907      	bls.n	8004836 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004826:	4b3c      	ldr	r3, [pc, #240]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e06c      	b.n	8004910 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004836:	4b38      	ldr	r3, [pc, #224]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0ea      	beq.n	8004818 <HAL_RCC_OscConfig+0x8a0>
 8004842:	e064      	b.n	800490e <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004844:	4b34      	ldr	r3, [pc, #208]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a33      	ldr	r2, [pc, #204]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 800484a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800484e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004850:	f7fd ffe0 	bl	8002814 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004856:	e00e      	b.n	8004876 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004858:	f7fd ffdc 	bl	8002814 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d907      	bls.n	8004876 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004866:	4b2c      	ldr	r3, [pc, #176]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e04c      	b.n	8004910 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004876:	4b28      	ldr	r3, [pc, #160]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1ea      	bne.n	8004858 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004882:	4b25      	ldr	r3, [pc, #148]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	4924      	ldr	r1, [pc, #144]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 8004888:	4b25      	ldr	r3, [pc, #148]	@ (8004920 <HAL_RCC_OscConfig+0x9a8>)
 800488a:	4013      	ands	r3, r2
 800488c:	60cb      	str	r3, [r1, #12]
 800488e:	e03e      	b.n	800490e <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e039      	b.n	8004910 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800489c:	4b1e      	ldr	r3, [pc, #120]	@ (8004918 <HAL_RCC_OscConfig+0x9a0>)
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f003 0203 	and.w	r2, r3, #3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d12c      	bne.n	800490a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ba:	3b01      	subs	r3, #1
 80048bc:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048be:	429a      	cmp	r2, r3
 80048c0:	d123      	bne.n	800490a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048cc:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d11b      	bne.n	800490a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048dc:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048de:	429a      	cmp	r2, r3
 80048e0:	d113      	bne.n	800490a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ec:	085b      	lsrs	r3, r3, #1
 80048ee:	3b01      	subs	r3, #1
 80048f0:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d109      	bne.n	800490a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	3b01      	subs	r3, #1
 8004904:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004906:	429a      	cmp	r2, r3
 8004908:	d001      	beq.n	800490e <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3720      	adds	r7, #32
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40021000 	.word	0x40021000
 800491c:	019f800c 	.word	0x019f800c
 8004920:	feeefffc 	.word	0xfeeefffc

08004924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800492e:	2300      	movs	r3, #0
 8004930:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e11c      	b.n	8004b76 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800493c:	4b90      	ldr	r3, [pc, #576]	@ (8004b80 <HAL_RCC_ClockConfig+0x25c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 030f 	and.w	r3, r3, #15
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d910      	bls.n	800496c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494a:	4b8d      	ldr	r3, [pc, #564]	@ (8004b80 <HAL_RCC_ClockConfig+0x25c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f023 020f 	bic.w	r2, r3, #15
 8004952:	498b      	ldr	r1, [pc, #556]	@ (8004b80 <HAL_RCC_ClockConfig+0x25c>)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	4313      	orrs	r3, r2
 8004958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800495a:	4b89      	ldr	r3, [pc, #548]	@ (8004b80 <HAL_RCC_ClockConfig+0x25c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d001      	beq.n	800496c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e104      	b.n	8004b76 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d010      	beq.n	800499a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	4b81      	ldr	r3, [pc, #516]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004984:	429a      	cmp	r2, r3
 8004986:	d908      	bls.n	800499a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004988:	4b7e      	ldr	r3, [pc, #504]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	497b      	ldr	r1, [pc, #492]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 8004996:	4313      	orrs	r3, r2
 8004998:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 8085 	beq.w	8004ab2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	d11f      	bne.n	80049f0 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049b0:	4b74      	ldr	r3, [pc, #464]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e0da      	b.n	8004b76 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80049c0:	f000 fa26 	bl	8004e10 <RCC_GetSysClockFreqFromPLLSource>
 80049c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	4a6f      	ldr	r2, [pc, #444]	@ (8004b88 <HAL_RCC_ClockConfig+0x264>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d947      	bls.n	8004a5e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80049ce:	4b6d      	ldr	r3, [pc, #436]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d141      	bne.n	8004a5e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049da:	4b6a      	ldr	r3, [pc, #424]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049e2:	4a68      	ldr	r2, [pc, #416]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 80049e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80049ea:	2380      	movs	r3, #128	@ 0x80
 80049ec:	617b      	str	r3, [r7, #20]
 80049ee:	e036      	b.n	8004a5e <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d107      	bne.n	8004a08 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049f8:	4b62      	ldr	r3, [pc, #392]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d115      	bne.n	8004a30 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0b6      	b.n	8004b76 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a10:	4b5c      	ldr	r3, [pc, #368]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d109      	bne.n	8004a30 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e0aa      	b.n	8004b76 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a20:	4b58      	ldr	r3, [pc, #352]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e0a2      	b.n	8004b76 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004a30:	f000 f8b0 	bl	8004b94 <HAL_RCC_GetSysClockFreq>
 8004a34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	4a53      	ldr	r2, [pc, #332]	@ (8004b88 <HAL_RCC_ClockConfig+0x264>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d90f      	bls.n	8004a5e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004a3e:	4b51      	ldr	r3, [pc, #324]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d109      	bne.n	8004a5e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a4a:	4b4e      	ldr	r3, [pc, #312]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a52:	4a4c      	ldr	r2, [pc, #304]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 8004a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a5a:	2380      	movs	r3, #128	@ 0x80
 8004a5c:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a5e:	4b49      	ldr	r3, [pc, #292]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f023 0203 	bic.w	r2, r3, #3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	4946      	ldr	r1, [pc, #280]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a70:	f7fd fed0 	bl	8002814 <HAL_GetTick>
 8004a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a76:	e013      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a78:	f7fd fecc 	bl	8002814 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d90a      	bls.n	8004aa0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 020c 	and.w	r2, r3, #12
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d001      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e06a      	b.n	8004b76 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa0:	4b38      	ldr	r3, [pc, #224]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 020c 	and.w	r2, r3, #12
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d1e2      	bne.n	8004a78 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b80      	cmp	r3, #128	@ 0x80
 8004ab6:	d105      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004ab8:	4b32      	ldr	r3, [pc, #200]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	4a31      	ldr	r2, [pc, #196]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 8004abe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ac2:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d010      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d208      	bcs.n	8004af2 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ae0:	4b28      	ldr	r3, [pc, #160]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	4925      	ldr	r1, [pc, #148]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004af2:	4b23      	ldr	r3, [pc, #140]	@ (8004b80 <HAL_RCC_ClockConfig+0x25c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d210      	bcs.n	8004b22 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b00:	4b1f      	ldr	r3, [pc, #124]	@ (8004b80 <HAL_RCC_ClockConfig+0x25c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f023 020f 	bic.w	r2, r3, #15
 8004b08:	491d      	ldr	r1, [pc, #116]	@ (8004b80 <HAL_RCC_ClockConfig+0x25c>)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b10:	4b1b      	ldr	r3, [pc, #108]	@ (8004b80 <HAL_RCC_ClockConfig+0x25c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 030f 	and.w	r3, r3, #15
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d001      	beq.n	8004b22 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e029      	b.n	8004b76 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0304 	and.w	r3, r3, #4
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d008      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b2e:	4b15      	ldr	r3, [pc, #84]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	4912      	ldr	r1, [pc, #72]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d009      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	490a      	ldr	r1, [pc, #40]	@ (8004b84 <HAL_RCC_ClockConfig+0x260>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004b60:	f000 f8b6 	bl	8004cd0 <HAL_RCC_GetHCLKFreq>
 8004b64:	4603      	mov	r3, r0
 8004b66:	4a09      	ldr	r2, [pc, #36]	@ (8004b8c <HAL_RCC_ClockConfig+0x268>)
 8004b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b6a:	4b09      	ldr	r3, [pc, #36]	@ (8004b90 <HAL_RCC_ClockConfig+0x26c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fd fe00 	bl	8002774 <HAL_InitTick>
 8004b74:	4603      	mov	r3, r0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3718      	adds	r7, #24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40022000 	.word	0x40022000
 8004b84:	40021000 	.word	0x40021000
 8004b88:	04c4b400 	.word	0x04c4b400
 8004b8c:	20000004 	.word	0x20000004
 8004b90:	20000008 	.word	0x20000008

08004b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b089      	sub	sp, #36	@ 0x24
 8004b98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	61fb      	str	r3, [r7, #28]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ba2:	4b47      	ldr	r3, [pc, #284]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 030c 	and.w	r3, r3, #12
 8004baa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bac:	4b44      	ldr	r3, [pc, #272]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f003 0303 	and.w	r3, r3, #3
 8004bb4:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	2b0c      	cmp	r3, #12
 8004bc0:	d121      	bne.n	8004c06 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d11e      	bne.n	8004c06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004bc8:	4b3d      	ldr	r3, [pc, #244]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d107      	bne.n	8004be4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004bd4:	4b3a      	ldr	r3, [pc, #232]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bda:	0a1b      	lsrs	r3, r3, #8
 8004bdc:	f003 030f 	and.w	r3, r3, #15
 8004be0:	61fb      	str	r3, [r7, #28]
 8004be2:	e005      	b.n	8004bf0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004be4:	4b36      	ldr	r3, [pc, #216]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	091b      	lsrs	r3, r3, #4
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004bf0:	4a34      	ldr	r2, [pc, #208]	@ (8004cc4 <HAL_RCC_GetSysClockFreq+0x130>)
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bf8:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10d      	bne.n	8004c1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c04:	e00a      	b.n	8004c1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d102      	bne.n	8004c12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c0c:	4b2e      	ldr	r3, [pc, #184]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x134>)
 8004c0e:	61bb      	str	r3, [r7, #24]
 8004c10:	e004      	b.n	8004c1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d101      	bne.n	8004c1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c18:	4b2c      	ldr	r3, [pc, #176]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x138>)
 8004c1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	2b0c      	cmp	r3, #12
 8004c20:	d146      	bne.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004c22:	4b27      	ldr	r3, [pc, #156]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c2c:	4b24      	ldr	r3, [pc, #144]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	091b      	lsrs	r3, r3, #4
 8004c32:	f003 030f 	and.w	r3, r3, #15
 8004c36:	3301      	adds	r3, #1
 8004c38:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d003      	beq.n	8004c48 <HAL_RCC_GetSysClockFreq+0xb4>
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d00d      	beq.n	8004c62 <HAL_RCC_GetSysClockFreq+0xce>
 8004c46:	e019      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c48:	4a1f      	ldr	r2, [pc, #124]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x134>)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c50:	4a1b      	ldr	r2, [pc, #108]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004c52:	68d2      	ldr	r2, [r2, #12]
 8004c54:	0a12      	lsrs	r2, r2, #8
 8004c56:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c5a:	fb02 f303 	mul.w	r3, r2, r3
 8004c5e:	617b      	str	r3, [r7, #20]
        break;
 8004c60:	e019      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c62:	4a1a      	ldr	r2, [pc, #104]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x138>)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6a:	4a15      	ldr	r2, [pc, #84]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004c6c:	68d2      	ldr	r2, [r2, #12]
 8004c6e:	0a12      	lsrs	r2, r2, #8
 8004c70:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c74:	fb02 f303 	mul.w	r3, r2, r3
 8004c78:	617b      	str	r3, [r7, #20]
        break;
 8004c7a:	e00c      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c7c:	69fa      	ldr	r2, [r7, #28]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c84:	4a0e      	ldr	r2, [pc, #56]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004c86:	68d2      	ldr	r2, [r2, #12]
 8004c88:	0a12      	lsrs	r2, r2, #8
 8004c8a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c8e:	fb02 f303 	mul.w	r3, r2, r3
 8004c92:	617b      	str	r3, [r7, #20]
        break;
 8004c94:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004c96:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	0e5b      	lsrs	r3, r3, #25
 8004c9c:	f003 0303 	and.w	r3, r3, #3
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004cb0:	69bb      	ldr	r3, [r7, #24]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3724      	adds	r7, #36	@ 0x24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	0800c1ec 	.word	0x0800c1ec
 8004cc8:	00f42400 	.word	0x00f42400
 8004ccc:	007a1200 	.word	0x007a1200

08004cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004cd4:	f7ff ff5e 	bl	8004b94 <HAL_RCC_GetSysClockFreq>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	4b05      	ldr	r3, [pc, #20]	@ (8004cf0 <HAL_RCC_GetHCLKFreq+0x20>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	091b      	lsrs	r3, r3, #4
 8004ce0:	f003 030f 	and.w	r3, r3, #15
 8004ce4:	4903      	ldr	r1, [pc, #12]	@ (8004cf4 <HAL_RCC_GetHCLKFreq+0x24>)
 8004ce6:	5ccb      	ldrb	r3, [r1, r3]
 8004ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	0800c1d4 	.word	0x0800c1d4

08004cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cfc:	f7ff ffe8 	bl	8004cd0 <HAL_RCC_GetHCLKFreq>
 8004d00:	4602      	mov	r2, r0
 8004d02:	4b05      	ldr	r3, [pc, #20]	@ (8004d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	0a1b      	lsrs	r3, r3, #8
 8004d08:	f003 0307 	and.w	r3, r3, #7
 8004d0c:	4903      	ldr	r1, [pc, #12]	@ (8004d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d0e:	5ccb      	ldrb	r3, [r1, r3]
 8004d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	0800c1e4 	.word	0x0800c1e4

08004d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d24:	f7ff ffd4 	bl	8004cd0 <HAL_RCC_GetHCLKFreq>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	4b05      	ldr	r3, [pc, #20]	@ (8004d40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	0adb      	lsrs	r3, r3, #11
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	4903      	ldr	r1, [pc, #12]	@ (8004d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d36:	5ccb      	ldrb	r3, [r1, r3]
 8004d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40021000 	.word	0x40021000
 8004d44:	0800c1e4 	.word	0x0800c1e4

08004d48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d54:	4b2c      	ldr	r3, [pc, #176]	@ (8004e08 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d60:	f7ff f87c 	bl	8003e5c <HAL_PWREx_GetVoltageRange>
 8004d64:	6138      	str	r0, [r7, #16]
 8004d66:	e014      	b.n	8004d92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d68:	4b27      	ldr	r3, [pc, #156]	@ (8004e08 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d6c:	4a26      	ldr	r2, [pc, #152]	@ (8004e08 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004d6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d72:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d74:	4b24      	ldr	r3, [pc, #144]	@ (8004e08 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d80:	f7ff f86c 	bl	8003e5c <HAL_PWREx_GetVoltageRange>
 8004d84:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d86:	4b20      	ldr	r3, [pc, #128]	@ (8004e08 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8004e08 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004d8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d90:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d9e:	d10b      	bne.n	8004db8 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b80      	cmp	r3, #128	@ 0x80
 8004da4:	d919      	bls.n	8004dda <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2ba0      	cmp	r3, #160	@ 0xa0
 8004daa:	d902      	bls.n	8004db2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dac:	2302      	movs	r3, #2
 8004dae:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004db0:	e013      	b.n	8004dda <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004db2:	2301      	movs	r3, #1
 8004db4:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004db6:	e010      	b.n	8004dda <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b80      	cmp	r3, #128	@ 0x80
 8004dbc:	d902      	bls.n	8004dc4 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	617b      	str	r3, [r7, #20]
 8004dc2:	e00a      	b.n	8004dda <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b80      	cmp	r3, #128	@ 0x80
 8004dc8:	d102      	bne.n	8004dd0 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dca:	2302      	movs	r3, #2
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	e004      	b.n	8004dda <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b70      	cmp	r3, #112	@ 0x70
 8004dd4:	d101      	bne.n	8004dda <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004dda:	4b0c      	ldr	r3, [pc, #48]	@ (8004e0c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f023 020f 	bic.w	r2, r3, #15
 8004de2:	490a      	ldr	r1, [pc, #40]	@ (8004e0c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004dea:	4b08      	ldr	r3, [pc, #32]	@ (8004e0c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 030f 	and.w	r3, r3, #15
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d001      	beq.n	8004dfc <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e000      	b.n	8004dfe <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	40022000 	.word	0x40022000

08004e10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e16:	4b31      	ldr	r3, [pc, #196]	@ (8004edc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e20:	4b2e      	ldr	r3, [pc, #184]	@ (8004edc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	091b      	lsrs	r3, r3, #4
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d015      	beq.n	8004e60 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d839      	bhi.n	8004eae <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d01c      	beq.n	8004e7a <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d133      	bne.n	8004eae <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e46:	4a26      	ldr	r2, [pc, #152]	@ (8004ee0 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4e:	4a23      	ldr	r2, [pc, #140]	@ (8004edc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004e50:	68d2      	ldr	r2, [r2, #12]
 8004e52:	0a12      	lsrs	r2, r2, #8
 8004e54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e58:	fb02 f303 	mul.w	r3, r2, r3
 8004e5c:	613b      	str	r3, [r7, #16]
      break;
 8004e5e:	e029      	b.n	8004eb4 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e60:	4a20      	ldr	r2, [pc, #128]	@ (8004ee4 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e68:	4a1c      	ldr	r2, [pc, #112]	@ (8004edc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004e6a:	68d2      	ldr	r2, [r2, #12]
 8004e6c:	0a12      	lsrs	r2, r2, #8
 8004e6e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e72:	fb02 f303 	mul.w	r3, r2, r3
 8004e76:	613b      	str	r3, [r7, #16]
      break;
 8004e78:	e01c      	b.n	8004eb4 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e7a:	4b18      	ldr	r3, [pc, #96]	@ (8004edc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d107      	bne.n	8004e96 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e86:	4b15      	ldr	r3, [pc, #84]	@ (8004edc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e8c:	0a1b      	lsrs	r3, r3, #8
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	e005      	b.n	8004ea2 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e96:	4b11      	ldr	r3, [pc, #68]	@ (8004edc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	091b      	lsrs	r3, r3, #4
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8004ea2:	4a11      	ldr	r2, [pc, #68]	@ (8004ee8 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eaa:	613b      	str	r3, [r7, #16]
        break;
 8004eac:	e002      	b.n	8004eb4 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	613b      	str	r3, [r7, #16]
      break;
 8004eb2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004eb4:	4b09      	ldr	r3, [pc, #36]	@ (8004edc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	0e5b      	lsrs	r3, r3, #25
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ecc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004ece:	683b      	ldr	r3, [r7, #0]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	00f42400 	.word	0x00f42400
 8004ee4:	007a1200 	.word	0x007a1200
 8004ee8:	0800c1ec 	.word	0x0800c1ec

08004eec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b088      	sub	sp, #32
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ef8:	2300      	movs	r3, #0
 8004efa:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d040      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f0c:	2b80      	cmp	r3, #128	@ 0x80
 8004f0e:	d02a      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f10:	2b80      	cmp	r3, #128	@ 0x80
 8004f12:	d825      	bhi.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f14:	2b60      	cmp	r3, #96	@ 0x60
 8004f16:	d026      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f18:	2b60      	cmp	r3, #96	@ 0x60
 8004f1a:	d821      	bhi.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f1c:	2b40      	cmp	r3, #64	@ 0x40
 8004f1e:	d006      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004f20:	2b40      	cmp	r3, #64	@ 0x40
 8004f22:	d81d      	bhi.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d009      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d010      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004f2c:	e018      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f2e:	4b8f      	ldr	r3, [pc, #572]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	4a8e      	ldr	r2, [pc, #568]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f38:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f3a:	e015      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3304      	adds	r3, #4
 8004f40:	2100      	movs	r1, #0
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fb56 	bl	80055f4 <RCCEx_PLLSAI1_Config>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f4c:	e00c      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	3320      	adds	r3, #32
 8004f52:	2100      	movs	r1, #0
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fc33 	bl	80057c0 <RCCEx_PLLSAI2_Config>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f5e:	e003      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	77fb      	strb	r3, [r7, #31]
        break;
 8004f64:	e000      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8004f66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f68:	7ffb      	ldrb	r3, [r7, #31]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10b      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f6e:	4b7f      	ldr	r3, [pc, #508]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f74:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f7c:	497b      	ldr	r1, [pc, #492]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004f84:	e001      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f86:	7ffb      	ldrb	r3, [r7, #31]
 8004f88:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d047      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f9e:	d030      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004fa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fa4:	d82a      	bhi.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004fa6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004faa:	d02a      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004fac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fb0:	d824      	bhi.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004fb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fb6:	d008      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004fb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fbc:	d81e      	bhi.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004fc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fc6:	d010      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004fc8:	e018      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fca:	4b68      	ldr	r3, [pc, #416]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	4a67      	ldr	r2, [pc, #412]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fd4:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004fd6:	e015      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3304      	adds	r3, #4
 8004fdc:	2100      	movs	r1, #0
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fb08 	bl	80055f4 <RCCEx_PLLSAI1_Config>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004fe8:	e00c      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	3320      	adds	r3, #32
 8004fee:	2100      	movs	r1, #0
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 fbe5 	bl	80057c0 <RCCEx_PLLSAI2_Config>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004ffa:	e003      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	77fb      	strb	r3, [r7, #31]
        break;
 8005000:	e000      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8005002:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005004:	7ffb      	ldrb	r3, [r7, #31]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10b      	bne.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800500a:	4b58      	ldr	r3, [pc, #352]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800500c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005010:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005018:	4954      	ldr	r1, [pc, #336]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005020:	e001      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005022:	7ffb      	ldrb	r3, [r7, #31]
 8005024:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 80ab 	beq.w	800518a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005034:	2300      	movs	r3, #0
 8005036:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005038:	4b4c      	ldr	r3, [pc, #304]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800503a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800503c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10d      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005044:	4b49      	ldr	r3, [pc, #292]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005048:	4a48      	ldr	r2, [pc, #288]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800504a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800504e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005050:	4b46      	ldr	r3, [pc, #280]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800505c:	2301      	movs	r3, #1
 800505e:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005060:	4b43      	ldr	r3, [pc, #268]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a42      	ldr	r2, [pc, #264]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005066:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800506a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800506c:	f7fd fbd2 	bl	8002814 <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005072:	e00f      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005074:	f7fd fbce 	bl	8002814 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d908      	bls.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005082:	4b3b      	ldr	r3, [pc, #236]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800508a:	2b00      	cmp	r3, #0
 800508c:	d109      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8005092:	e006      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005094:	4b36      	ldr	r3, [pc, #216]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0e9      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80050a0:	e000      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 80050a2:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 80050a4:	7ffb      	ldrb	r3, [r7, #31]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d164      	bne.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050aa:	4b30      	ldr	r3, [pc, #192]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050b4:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d01f      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d019      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050c8:	4b28      	ldr	r3, [pc, #160]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050d2:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050d4:	4b25      	ldr	r3, [pc, #148]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050da:	4a24      	ldr	r2, [pc, #144]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050e4:	4b21      	ldr	r3, [pc, #132]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ea:	4a20      	ldr	r2, [pc, #128]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050f4:	4a1d      	ldr	r2, [pc, #116]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d01f      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005106:	f7fd fb85 	bl	8002814 <HAL_GetTick>
 800510a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800510c:	e012      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800510e:	f7fd fb81 	bl	8002814 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	f241 3288 	movw	r2, #5000	@ 0x1388
 800511c:	4293      	cmp	r3, r2
 800511e:	d909      	bls.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005120:	4b12      	ldr	r3, [pc, #72]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10a      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8005132:	e007      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005134:	4b0d      	ldr	r3, [pc, #52]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0e5      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005142:	e000      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8005144:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8005146:	7ffb      	ldrb	r3, [r7, #31]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10c      	bne.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800514c:	4b07      	ldr	r3, [pc, #28]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800514e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005152:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800515c:	4903      	ldr	r1, [pc, #12]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005164:	e008      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005166:	7ffb      	ldrb	r3, [r7, #31]
 8005168:	77bb      	strb	r3, [r7, #30]
 800516a:	e005      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800516c:	40021000 	.word	0x40021000
 8005170:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005174:	7ffb      	ldrb	r3, [r7, #31]
 8005176:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005178:	7dfb      	ldrb	r3, [r7, #23]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d105      	bne.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800517e:	4b9c      	ldr	r3, [pc, #624]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005182:	4a9b      	ldr	r2, [pc, #620]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005184:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005188:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005196:	4b96      	ldr	r3, [pc, #600]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800519c:	f023 0203 	bic.w	r2, r3, #3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051a4:	4992      	ldr	r1, [pc, #584]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00a      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051b8:	4b8d      	ldr	r3, [pc, #564]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051be:	f023 020c 	bic.w	r2, r3, #12
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c6:	498a      	ldr	r1, [pc, #552]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051da:	4b85      	ldr	r3, [pc, #532]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e8:	4981      	ldr	r1, [pc, #516]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0308 	and.w	r3, r3, #8
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00a      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051fc:	4b7c      	ldr	r3, [pc, #496]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005202:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520a:	4979      	ldr	r1, [pc, #484]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800520c:	4313      	orrs	r3, r2
 800520e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00a      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800521e:	4b74      	ldr	r3, [pc, #464]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005224:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800522c:	4970      	ldr	r1, [pc, #448]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800522e:	4313      	orrs	r3, r2
 8005230:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0320 	and.w	r3, r3, #32
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00a      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005240:	4b6b      	ldr	r3, [pc, #428]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005246:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800524e:	4968      	ldr	r1, [pc, #416]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005250:	4313      	orrs	r3, r2
 8005252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005262:	4b63      	ldr	r3, [pc, #396]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005268:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005270:	495f      	ldr	r1, [pc, #380]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005272:	4313      	orrs	r3, r2
 8005274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005284:	4b5a      	ldr	r3, [pc, #360]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005292:	4957      	ldr	r1, [pc, #348]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005294:	4313      	orrs	r3, r2
 8005296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80052a6:	4b52      	ldr	r3, [pc, #328]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052b4:	494e      	ldr	r1, [pc, #312]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d031      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052d0:	d00e      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80052d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052d6:	d814      	bhi.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d015      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80052dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052e0:	d10f      	bne.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052e2:	4b43      	ldr	r3, [pc, #268]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	4a42      	ldr	r2, [pc, #264]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052ec:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80052ee:	e00c      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3304      	adds	r3, #4
 80052f4:	2100      	movs	r1, #0
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 f97c 	bl	80055f4 <RCCEx_PLLSAI1_Config>
 80052fc:	4603      	mov	r3, r0
 80052fe:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005300:	e003      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	77fb      	strb	r3, [r7, #31]
        break;
 8005306:	e000      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8005308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800530a:	7ffb      	ldrb	r3, [r7, #31]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10b      	bne.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005310:	4b37      	ldr	r3, [pc, #220]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005316:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800531e:	4934      	ldr	r1, [pc, #208]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005326:	e001      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005328:	7ffb      	ldrb	r3, [r7, #31]
 800532a:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00a      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005338:	4b2d      	ldr	r3, [pc, #180]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800533a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800533e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005346:	492a      	ldr	r1, [pc, #168]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005348:	4313      	orrs	r3, r2
 800534a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800535a:	4b25      	ldr	r3, [pc, #148]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800535c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005360:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005368:	4921      	ldr	r1, [pc, #132]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800536a:	4313      	orrs	r3, r2
 800536c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00a      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800537c:	4b1c      	ldr	r3, [pc, #112]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800537e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005382:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800538a:	4919      	ldr	r1, [pc, #100]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800539e:	4b14      	ldr	r3, [pc, #80]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053a4:	f023 0203 	bic.w	r2, r3, #3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ac:	4910      	ldr	r1, [pc, #64]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d02b      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053c0:	4b0b      	ldr	r3, [pc, #44]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053ce:	4908      	ldr	r1, [pc, #32]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053de:	d109      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053e0:	4b03      	ldr	r3, [pc, #12]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	4a02      	ldr	r2, [pc, #8]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053ea:	60d3      	str	r3, [r2, #12]
 80053ec:	e014      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80053ee:	bf00      	nop
 80053f0:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053fc:	d10c      	bne.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3304      	adds	r3, #4
 8005402:	2101      	movs	r1, #1
 8005404:	4618      	mov	r0, r3
 8005406:	f000 f8f5 	bl	80055f4 <RCCEx_PLLSAI1_Config>
 800540a:	4603      	mov	r3, r0
 800540c:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 800540e:	7ffb      	ldrb	r3, [r7, #31]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8005414:	7ffb      	ldrb	r3, [r7, #31]
 8005416:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d04a      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005428:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800542c:	d108      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x554>
 800542e:	4b70      	ldr	r3, [pc, #448]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005430:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005434:	4a6e      	ldr	r2, [pc, #440]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005436:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800543a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800543e:	e012      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005440:	4b6b      	ldr	r3, [pc, #428]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005446:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800544e:	4968      	ldr	r1, [pc, #416]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005456:	4b66      	ldr	r3, [pc, #408]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005458:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800545c:	4a64      	ldr	r2, [pc, #400]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800545e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005462:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800546a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800546e:	d10d      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3304      	adds	r3, #4
 8005474:	2101      	movs	r1, #1
 8005476:	4618      	mov	r0, r3
 8005478:	f000 f8bc 	bl	80055f4 <RCCEx_PLLSAI1_Config>
 800547c:	4603      	mov	r3, r0
 800547e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005480:	7ffb      	ldrb	r3, [r7, #31]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d019      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8005486:	7ffb      	ldrb	r3, [r7, #31]
 8005488:	77bb      	strb	r3, [r7, #30]
 800548a:	e016      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005490:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005494:	d106      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005496:	4b56      	ldr	r3, [pc, #344]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	4a55      	ldr	r2, [pc, #340]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800549c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054a0:	60d3      	str	r3, [r2, #12]
 80054a2:	e00a      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054ac:	d105      	bne.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054ae:	4b50      	ldr	r3, [pc, #320]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	4a4f      	ldr	r2, [pc, #316]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054b8:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d028      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054c6:	4b4a      	ldr	r3, [pc, #296]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054d4:	4946      	ldr	r1, [pc, #280]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054e4:	d106      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054e6:	4b42      	ldr	r3, [pc, #264]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	4a41      	ldr	r2, [pc, #260]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054f0:	60d3      	str	r3, [r2, #12]
 80054f2:	e011      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054fc:	d10c      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	3304      	adds	r3, #4
 8005502:	2101      	movs	r1, #1
 8005504:	4618      	mov	r0, r3
 8005506:	f000 f875 	bl	80055f4 <RCCEx_PLLSAI1_Config>
 800550a:	4603      	mov	r3, r0
 800550c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800550e:	7ffb      	ldrb	r3, [r7, #31]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8005514:	7ffb      	ldrb	r3, [r7, #31]
 8005516:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01e      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005524:	4b32      	ldr	r3, [pc, #200]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800552a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005534:	492e      	ldr	r1, [pc, #184]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005536:	4313      	orrs	r3, r2
 8005538:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005542:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005546:	d10c      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3304      	adds	r3, #4
 800554c:	2102      	movs	r1, #2
 800554e:	4618      	mov	r0, r3
 8005550:	f000 f850 	bl	80055f4 <RCCEx_PLLSAI1_Config>
 8005554:	4603      	mov	r3, r0
 8005556:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005558:	7ffb      	ldrb	r3, [r7, #31]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 800555e:	7ffb      	ldrb	r3, [r7, #31]
 8005560:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800556e:	4b20      	ldr	r3, [pc, #128]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005570:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005574:	f023 0204 	bic.w	r2, r3, #4
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800557e:	491c      	ldr	r1, [pc, #112]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005580:	4313      	orrs	r3, r2
 8005582:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00b      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005592:	4b17      	ldr	r3, [pc, #92]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005594:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005598:	f023 0218 	bic.w	r2, r3, #24
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a2:	4913      	ldr	r1, [pc, #76]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d017      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80055b6:	4b0e      	ldr	r3, [pc, #56]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80055b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055bc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055c6:	490a      	ldr	r1, [pc, #40]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055d8:	d105      	bne.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055da:	4b05      	ldr	r3, [pc, #20]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	4a04      	ldr	r2, [pc, #16]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80055e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055e4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80055e6:	7fbb      	ldrb	r3, [r7, #30]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3720      	adds	r7, #32
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	40021000 	.word	0x40021000

080055f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b03      	cmp	r3, #3
 8005608:	d018      	beq.n	800563c <RCCEx_PLLSAI1_Config+0x48>
 800560a:	2b03      	cmp	r3, #3
 800560c:	d81f      	bhi.n	800564e <RCCEx_PLLSAI1_Config+0x5a>
 800560e:	2b01      	cmp	r3, #1
 8005610:	d002      	beq.n	8005618 <RCCEx_PLLSAI1_Config+0x24>
 8005612:	2b02      	cmp	r3, #2
 8005614:	d009      	beq.n	800562a <RCCEx_PLLSAI1_Config+0x36>
 8005616:	e01a      	b.n	800564e <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005618:	4b65      	ldr	r3, [pc, #404]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d117      	bne.n	8005654 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005628:	e014      	b.n	8005654 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800562a:	4b61      	ldr	r3, [pc, #388]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005632:	2b00      	cmp	r3, #0
 8005634:	d110      	bne.n	8005658 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800563a:	e00d      	b.n	8005658 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800563c:	4b5c      	ldr	r3, [pc, #368]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d109      	bne.n	800565c <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800564c:	e006      	b.n	800565c <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	73fb      	strb	r3, [r7, #15]
      break;
 8005652:	e004      	b.n	800565e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005654:	bf00      	nop
 8005656:	e002      	b.n	800565e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005658:	bf00      	nop
 800565a:	e000      	b.n	800565e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800565c:	bf00      	nop
  }

  if (status == HAL_OK)
 800565e:	7bfb      	ldrb	r3, [r7, #15]
 8005660:	2b00      	cmp	r3, #0
 8005662:	f040 809f 	bne.w	80057a4 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005666:	4b52      	ldr	r3, [pc, #328]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a51      	ldr	r2, [pc, #324]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800566c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005670:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005672:	f7fd f8cf 	bl	8002814 <HAL_GetTick>
 8005676:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005678:	e00f      	b.n	800569a <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800567a:	f7fd f8cb 	bl	8002814 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d908      	bls.n	800569a <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005688:	4b49      	ldr	r3, [pc, #292]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d009      	beq.n	80056a8 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005698:	e006      	b.n	80056a8 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800569a:	4b45      	ldr	r3, [pc, #276]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1e9      	bne.n	800567a <RCCEx_PLLSAI1_Config+0x86>
 80056a6:	e000      	b.n	80056aa <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80056a8:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d179      	bne.n	80057a4 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d116      	bne.n	80056e4 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056b6:	4b3e      	ldr	r3, [pc, #248]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1bc>)
 80056b8:	691a      	ldr	r2, [r3, #16]
 80056ba:	4b3e      	ldr	r3, [pc, #248]	@ (80057b4 <RCCEx_PLLSAI1_Config+0x1c0>)
 80056bc:	4013      	ands	r3, r2
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6892      	ldr	r2, [r2, #8]
 80056c2:	0211      	lsls	r1, r2, #8
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	68d2      	ldr	r2, [r2, #12]
 80056c8:	06d2      	lsls	r2, r2, #27
 80056ca:	4311      	orrs	r1, r2
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6852      	ldr	r2, [r2, #4]
 80056d0:	3a01      	subs	r2, #1
 80056d2:	0112      	lsls	r2, r2, #4
 80056d4:	4311      	orrs	r1, r2
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	6812      	ldr	r2, [r2, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	4934      	ldr	r1, [pc, #208]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1bc>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	610b      	str	r3, [r1, #16]
 80056e2:	e033      	b.n	800574c <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d118      	bne.n	800571c <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056ea:	4b31      	ldr	r3, [pc, #196]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1bc>)
 80056ec:	691a      	ldr	r2, [r3, #16]
 80056ee:	4b32      	ldr	r3, [pc, #200]	@ (80057b8 <RCCEx_PLLSAI1_Config+0x1c4>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6892      	ldr	r2, [r2, #8]
 80056f6:	0211      	lsls	r1, r2, #8
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6912      	ldr	r2, [r2, #16]
 80056fc:	0852      	lsrs	r2, r2, #1
 80056fe:	3a01      	subs	r2, #1
 8005700:	0552      	lsls	r2, r2, #21
 8005702:	4311      	orrs	r1, r2
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	6852      	ldr	r2, [r2, #4]
 8005708:	3a01      	subs	r2, #1
 800570a:	0112      	lsls	r2, r2, #4
 800570c:	4311      	orrs	r1, r2
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	6812      	ldr	r2, [r2, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	4926      	ldr	r1, [pc, #152]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005716:	4313      	orrs	r3, r2
 8005718:	610b      	str	r3, [r1, #16]
 800571a:	e017      	b.n	800574c <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800571c:	4b24      	ldr	r3, [pc, #144]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	4b26      	ldr	r3, [pc, #152]	@ (80057bc <RCCEx_PLLSAI1_Config+0x1c8>)
 8005722:	4013      	ands	r3, r2
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6892      	ldr	r2, [r2, #8]
 8005728:	0211      	lsls	r1, r2, #8
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6952      	ldr	r2, [r2, #20]
 800572e:	0852      	lsrs	r2, r2, #1
 8005730:	3a01      	subs	r2, #1
 8005732:	0652      	lsls	r2, r2, #25
 8005734:	4311      	orrs	r1, r2
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6852      	ldr	r2, [r2, #4]
 800573a:	3a01      	subs	r2, #1
 800573c:	0112      	lsls	r2, r2, #4
 800573e:	4311      	orrs	r1, r2
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	6812      	ldr	r2, [r2, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	491a      	ldr	r1, [pc, #104]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005748:	4313      	orrs	r3, r2
 800574a:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800574c:	4b18      	ldr	r3, [pc, #96]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a17      	ldr	r2, [pc, #92]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005752:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005756:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005758:	f7fd f85c 	bl	8002814 <HAL_GetTick>
 800575c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800575e:	e00f      	b.n	8005780 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005760:	f7fd f858 	bl	8002814 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d908      	bls.n	8005780 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800576e:	4b10      	ldr	r3, [pc, #64]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d109      	bne.n	800578e <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800577e:	e006      	b.n	800578e <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005780:	4b0b      	ldr	r3, [pc, #44]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0e9      	beq.n	8005760 <RCCEx_PLLSAI1_Config+0x16c>
 800578c:	e000      	b.n	8005790 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 800578e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005790:	7bfb      	ldrb	r3, [r7, #15]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d106      	bne.n	80057a4 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8005796:	4b06      	ldr	r3, [pc, #24]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005798:	691a      	ldr	r2, [r3, #16]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	4904      	ldr	r1, [pc, #16]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1bc>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	40021000 	.word	0x40021000
 80057b4:	07ff800c 	.word	0x07ff800c
 80057b8:	ff9f800c 	.word	0xff9f800c
 80057bc:	f9ff800c 	.word	0xf9ff800c

080057c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ca:	2300      	movs	r3, #0
 80057cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d018      	beq.n	8005808 <RCCEx_PLLSAI2_Config+0x48>
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	d81f      	bhi.n	800581a <RCCEx_PLLSAI2_Config+0x5a>
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d002      	beq.n	80057e4 <RCCEx_PLLSAI2_Config+0x24>
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d009      	beq.n	80057f6 <RCCEx_PLLSAI2_Config+0x36>
 80057e2:	e01a      	b.n	800581a <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057e4:	4b4a      	ldr	r3, [pc, #296]	@ (8005910 <RCCEx_PLLSAI2_Config+0x150>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d117      	bne.n	8005820 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057f4:	e014      	b.n	8005820 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057f6:	4b46      	ldr	r3, [pc, #280]	@ (8005910 <RCCEx_PLLSAI2_Config+0x150>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d110      	bne.n	8005824 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005806:	e00d      	b.n	8005824 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005808:	4b41      	ldr	r3, [pc, #260]	@ (8005910 <RCCEx_PLLSAI2_Config+0x150>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d109      	bne.n	8005828 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005818:	e006      	b.n	8005828 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	73fb      	strb	r3, [r7, #15]
      break;
 800581e:	e004      	b.n	800582a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005820:	bf00      	nop
 8005822:	e002      	b.n	800582a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005824:	bf00      	nop
 8005826:	e000      	b.n	800582a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005828:	bf00      	nop
  }

  if (status == HAL_OK)
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d169      	bne.n	8005904 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005830:	4b37      	ldr	r3, [pc, #220]	@ (8005910 <RCCEx_PLLSAI2_Config+0x150>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a36      	ldr	r2, [pc, #216]	@ (8005910 <RCCEx_PLLSAI2_Config+0x150>)
 8005836:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800583a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800583c:	f7fc ffea 	bl	8002814 <HAL_GetTick>
 8005840:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005842:	e00f      	b.n	8005864 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005844:	f7fc ffe6 	bl	8002814 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d908      	bls.n	8005864 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005852:	4b2f      	ldr	r3, [pc, #188]	@ (8005910 <RCCEx_PLLSAI2_Config+0x150>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d009      	beq.n	8005872 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005862:	e006      	b.n	8005872 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005864:	4b2a      	ldr	r3, [pc, #168]	@ (8005910 <RCCEx_PLLSAI2_Config+0x150>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1e9      	bne.n	8005844 <RCCEx_PLLSAI2_Config+0x84>
 8005870:	e000      	b.n	8005874 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8005872:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005874:	7bfb      	ldrb	r3, [r7, #15]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d144      	bne.n	8005904 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d115      	bne.n	80058ac <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005880:	4b23      	ldr	r3, [pc, #140]	@ (8005910 <RCCEx_PLLSAI2_Config+0x150>)
 8005882:	695a      	ldr	r2, [r3, #20]
 8005884:	4b23      	ldr	r3, [pc, #140]	@ (8005914 <RCCEx_PLLSAI2_Config+0x154>)
 8005886:	4013      	ands	r3, r2
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6892      	ldr	r2, [r2, #8]
 800588c:	0211      	lsls	r1, r2, #8
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	68d2      	ldr	r2, [r2, #12]
 8005892:	06d2      	lsls	r2, r2, #27
 8005894:	4311      	orrs	r1, r2
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	6852      	ldr	r2, [r2, #4]
 800589a:	3a01      	subs	r2, #1
 800589c:	0112      	lsls	r2, r2, #4
 800589e:	4311      	orrs	r1, r2
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6812      	ldr	r2, [r2, #0]
 80058a4:	430a      	orrs	r2, r1
 80058a6:	491a      	ldr	r1, [pc, #104]	@ (8005910 <RCCEx_PLLSAI2_Config+0x150>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80058ac:	4b18      	ldr	r3, [pc, #96]	@ (8005910 <RCCEx_PLLSAI2_Config+0x150>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a17      	ldr	r2, [pc, #92]	@ (8005910 <RCCEx_PLLSAI2_Config+0x150>)
 80058b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b8:	f7fc ffac 	bl	8002814 <HAL_GetTick>
 80058bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058be:	e00f      	b.n	80058e0 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058c0:	f7fc ffa8 	bl	8002814 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d908      	bls.n	80058e0 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058ce:	4b10      	ldr	r3, [pc, #64]	@ (8005910 <RCCEx_PLLSAI2_Config+0x150>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d109      	bne.n	80058ee <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80058de:	e006      	b.n	80058ee <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005910 <RCCEx_PLLSAI2_Config+0x150>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0e9      	beq.n	80058c0 <RCCEx_PLLSAI2_Config+0x100>
 80058ec:	e000      	b.n	80058f0 <RCCEx_PLLSAI2_Config+0x130>
          break;
 80058ee:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d106      	bne.n	8005904 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80058f6:	4b06      	ldr	r3, [pc, #24]	@ (8005910 <RCCEx_PLLSAI2_Config+0x150>)
 80058f8:	695a      	ldr	r2, [r3, #20]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	4904      	ldr	r1, [pc, #16]	@ (8005910 <RCCEx_PLLSAI2_Config+0x150>)
 8005900:	4313      	orrs	r3, r2
 8005902:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005904:	7bfb      	ldrb	r3, [r7, #15]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40021000 	.word	0x40021000
 8005914:	07ff800c 	.word	0x07ff800c

08005918 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d066      	beq.n	80059f8 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d106      	bne.n	8005944 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fc fbaa 	bl	8002098 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f003 0310 	and.w	r3, r3, #16
 8005956:	2b10      	cmp	r3, #16
 8005958:	d045      	beq.n	80059e6 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800595a:	4b2a      	ldr	r3, [pc, #168]	@ (8005a04 <HAL_RTC_Init+0xec>)
 800595c:	22ca      	movs	r2, #202	@ 0xca
 800595e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005960:	4b28      	ldr	r3, [pc, #160]	@ (8005a04 <HAL_RTC_Init+0xec>)
 8005962:	2253      	movs	r2, #83	@ 0x53
 8005964:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f872 	bl	8005a50 <RTC_EnterInitMode>
 800596c:	4603      	mov	r3, r0
 800596e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005970:	7bfb      	ldrb	r3, [r7, #15]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d121      	bne.n	80059ba <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005976:	4b23      	ldr	r3, [pc, #140]	@ (8005a04 <HAL_RTC_Init+0xec>)
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	4a22      	ldr	r2, [pc, #136]	@ (8005a04 <HAL_RTC_Init+0xec>)
 800597c:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8005980:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005984:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005986:	4b1f      	ldr	r3, [pc, #124]	@ (8005a04 <HAL_RTC_Init+0xec>)
 8005988:	699a      	ldr	r2, [r3, #24]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6859      	ldr	r1, [r3, #4]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	4319      	orrs	r1, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	430b      	orrs	r3, r1
 800599a:	491a      	ldr	r1, [pc, #104]	@ (8005a04 <HAL_RTC_Init+0xec>)
 800599c:	4313      	orrs	r3, r2
 800599e:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	041b      	lsls	r3, r3, #16
 80059aa:	4916      	ldr	r1, [pc, #88]	@ (8005a04 <HAL_RTC_Init+0xec>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f881 	bl	8005ab8 <RTC_ExitInitMode>
 80059b6:	4603      	mov	r3, r0
 80059b8:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10e      	bne.n	80059de <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 80059c0:	4b10      	ldr	r3, [pc, #64]	@ (8005a04 <HAL_RTC_Init+0xec>)
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a19      	ldr	r1, [r3, #32]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	69db      	ldr	r3, [r3, #28]
 80059d0:	4319      	orrs	r1, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	430b      	orrs	r3, r1
 80059d8:	490a      	ldr	r1, [pc, #40]	@ (8005a04 <HAL_RTC_Init+0xec>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059de:	4b09      	ldr	r3, [pc, #36]	@ (8005a04 <HAL_RTC_Init+0xec>)
 80059e0:	22ff      	movs	r2, #255	@ 0xff
 80059e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80059e4:	e001      	b.n	80059ea <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d103      	bne.n	80059f8 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	40002800 	.word	0x40002800

08005a08 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8005a10:	4b0d      	ldr	r3, [pc, #52]	@ (8005a48 <HAL_RTC_WaitForSynchro+0x40>)
 8005a12:	4a0e      	ldr	r2, [pc, #56]	@ (8005a4c <HAL_RTC_WaitForSynchro+0x44>)
 8005a14:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005a16:	f7fc fefd 	bl	8002814 <HAL_GetTick>
 8005a1a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005a1c:	e009      	b.n	8005a32 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a1e:	f7fc fef9 	bl	8002814 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a2c:	d901      	bls.n	8005a32 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e006      	b.n	8005a40 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005a32:	4b05      	ldr	r3, [pc, #20]	@ (8005a48 <HAL_RTC_WaitForSynchro+0x40>)
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0ef      	beq.n	8005a1e <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	40002800 	.word	0x40002800
 8005a4c:	0001005c 	.word	0x0001005c

08005a50 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005a5c:	4b15      	ldr	r3, [pc, #84]	@ (8005ab4 <RTC_EnterInitMode+0x64>)
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d120      	bne.n	8005aaa <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005a68:	4b12      	ldr	r3, [pc, #72]	@ (8005ab4 <RTC_EnterInitMode+0x64>)
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	4a11      	ldr	r2, [pc, #68]	@ (8005ab4 <RTC_EnterInitMode+0x64>)
 8005a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a72:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005a74:	f7fc fece 	bl	8002814 <HAL_GetTick>
 8005a78:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005a7a:	e00d      	b.n	8005a98 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005a7c:	f7fc feca 	bl	8002814 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a8a:	d905      	bls.n	8005a98 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2203      	movs	r2, #3
 8005a94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005a98:	4b06      	ldr	r3, [pc, #24]	@ (8005ab4 <RTC_EnterInitMode+0x64>)
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d102      	bne.n	8005aaa <RTC_EnterInitMode+0x5a>
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
 8005aa6:	2b03      	cmp	r3, #3
 8005aa8:	d1e8      	bne.n	8005a7c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	40002800 	.word	0x40002800

08005ab8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8005b30 <RTC_ExitInitMode+0x78>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	4a19      	ldr	r2, [pc, #100]	@ (8005b30 <RTC_ExitInitMode+0x78>)
 8005aca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ace:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005ad0:	4b17      	ldr	r3, [pc, #92]	@ (8005b30 <RTC_ExitInitMode+0x78>)
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10c      	bne.n	8005af6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f7ff ff93 	bl	8005a08 <HAL_RTC_WaitForSynchro>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01e      	beq.n	8005b26 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2203      	movs	r2, #3
 8005aec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	73fb      	strb	r3, [r7, #15]
 8005af4:	e017      	b.n	8005b26 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005af6:	4b0e      	ldr	r3, [pc, #56]	@ (8005b30 <RTC_ExitInitMode+0x78>)
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	4a0d      	ldr	r2, [pc, #52]	@ (8005b30 <RTC_ExitInitMode+0x78>)
 8005afc:	f023 0320 	bic.w	r3, r3, #32
 8005b00:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7ff ff80 	bl	8005a08 <HAL_RTC_WaitForSynchro>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d005      	beq.n	8005b1a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2203      	movs	r2, #3
 8005b12:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005b1a:	4b05      	ldr	r3, [pc, #20]	@ (8005b30 <RTC_ExitInitMode+0x78>)
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	4a04      	ldr	r2, [pc, #16]	@ (8005b30 <RTC_ExitInitMode+0x78>)
 8005b20:	f043 0320 	orr.w	r3, r3, #32
 8005b24:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40002800 	.word	0x40002800

08005b34 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	490f      	ldr	r1, [pc, #60]	@ (8005b84 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	490c      	ldr	r1, [pc, #48]	@ (8005b88 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	624b      	str	r3, [r1, #36]	@ 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8005b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b88 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	6919      	ldr	r1, [r3, #16]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	041b      	lsls	r3, r3, #16
 8005b6c:	430b      	orrs	r3, r1
 8005b6e:	4906      	ldr	r1, [pc, #24]	@ (8005b88 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40002800 	.word	0x40002800
 8005b88:	40003400 	.word	0x40003400

08005b8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e095      	b.n	8005cca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d108      	bne.n	8005bb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bae:	d009      	beq.n	8005bc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	61da      	str	r2, [r3, #28]
 8005bb6:	e005      	b.n	8005bc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d106      	bne.n	8005be4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7fc fad6 	bl	8002190 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bfa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c04:	d902      	bls.n	8005c0c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c06:	2300      	movs	r3, #0
 8005c08:	60fb      	str	r3, [r7, #12]
 8005c0a:	e002      	b.n	8005c12 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c10:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005c1a:	d007      	beq.n	8005c2c <HAL_SPI_Init+0xa0>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c24:	d002      	beq.n	8005c2c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	431a      	orrs	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	431a      	orrs	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c64:	431a      	orrs	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c6e:	ea42 0103 	orr.w	r1, r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c76:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	0c1b      	lsrs	r3, r3, #16
 8005c88:	f003 0204 	and.w	r2, r3, #4
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c90:	f003 0310 	and.w	r3, r3, #16
 8005c94:	431a      	orrs	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005ca8:	ea42 0103 	orr.w	r1, r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b088      	sub	sp, #32
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	60f8      	str	r0, [r7, #12]
 8005cda:	60b9      	str	r1, [r7, #8]
 8005cdc:	603b      	str	r3, [r7, #0]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_SPI_Transmit+0x22>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e15f      	b.n	8005fb4 <HAL_SPI_Transmit+0x2e2>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cfc:	f7fc fd8a 	bl	8002814 <HAL_GetTick>
 8005d00:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d02:	88fb      	ldrh	r3, [r7, #6]
 8005d04:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d002      	beq.n	8005d18 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005d12:	2302      	movs	r3, #2
 8005d14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d16:	e148      	b.n	8005faa <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <HAL_SPI_Transmit+0x52>
 8005d1e:	88fb      	ldrh	r3, [r7, #6]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d102      	bne.n	8005d2a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d28:	e13f      	b.n	8005faa <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2203      	movs	r2, #3
 8005d2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	88fa      	ldrh	r2, [r7, #6]
 8005d42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	88fa      	ldrh	r2, [r7, #6]
 8005d48:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d74:	d10f      	bne.n	8005d96 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005da0:	2b40      	cmp	r3, #64	@ 0x40
 8005da2:	d007      	beq.n	8005db4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005db2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005dbc:	d94f      	bls.n	8005e5e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <HAL_SPI_Transmit+0xfa>
 8005dc6:	8afb      	ldrh	r3, [r7, #22]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d142      	bne.n	8005e52 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd0:	881a      	ldrh	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ddc:	1c9a      	adds	r2, r3, #2
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005df0:	e02f      	b.n	8005e52 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d112      	bne.n	8005e26 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e04:	881a      	ldrh	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e10:	1c9a      	adds	r2, r3, #2
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e24:	e015      	b.n	8005e52 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e26:	f7fc fcf5 	bl	8002814 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d803      	bhi.n	8005e3e <HAL_SPI_Transmit+0x16c>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3c:	d102      	bne.n	8005e44 <HAL_SPI_Transmit+0x172>
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d106      	bne.n	8005e52 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005e50:	e0ab      	b.n	8005faa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1ca      	bne.n	8005df2 <HAL_SPI_Transmit+0x120>
 8005e5c:	e080      	b.n	8005f60 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d002      	beq.n	8005e6c <HAL_SPI_Transmit+0x19a>
 8005e66:	8afb      	ldrh	r3, [r7, #22]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d174      	bne.n	8005f56 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d912      	bls.n	8005e9c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e7a:	881a      	ldrh	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e86:	1c9a      	adds	r2, r3, #2
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	3b02      	subs	r3, #2
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e9a:	e05c      	b.n	8005f56 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	330c      	adds	r3, #12
 8005ea6:	7812      	ldrb	r2, [r2, #0]
 8005ea8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005ec2:	e048      	b.n	8005f56 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d12b      	bne.n	8005f2a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d912      	bls.n	8005f02 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee0:	881a      	ldrh	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eec:	1c9a      	adds	r2, r3, #2
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	3b02      	subs	r3, #2
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f00:	e029      	b.n	8005f56 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	330c      	adds	r3, #12
 8005f0c:	7812      	ldrb	r2, [r2, #0]
 8005f0e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f14:	1c5a      	adds	r2, r3, #1
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	3b01      	subs	r3, #1
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f28:	e015      	b.n	8005f56 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f2a:	f7fc fc73 	bl	8002814 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d803      	bhi.n	8005f42 <HAL_SPI_Transmit+0x270>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f40:	d102      	bne.n	8005f48 <HAL_SPI_Transmit+0x276>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d106      	bne.n	8005f56 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005f54:	e029      	b.n	8005faa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1b1      	bne.n	8005ec4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	6839      	ldr	r1, [r7, #0]
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 fb69 	bl	800663c <SPI_EndRxTxTransaction>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2220      	movs	r2, #32
 8005f74:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10a      	bne.n	8005f94 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f7e:	2300      	movs	r3, #0
 8005f80:	613b      	str	r3, [r7, #16]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	613b      	str	r3, [r7, #16]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	613b      	str	r3, [r7, #16]
 8005f92:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	77fb      	strb	r3, [r7, #31]
 8005fa0:	e003      	b.n	8005faa <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005fb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3720      	adds	r7, #32
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b08a      	sub	sp, #40	@ 0x28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d101      	bne.n	8005fe2 <HAL_SPI_TransmitReceive+0x26>
 8005fde:	2302      	movs	r3, #2
 8005fe0:	e20a      	b.n	80063f8 <HAL_SPI_TransmitReceive+0x43c>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fea:	f7fc fc13 	bl	8002814 <HAL_GetTick>
 8005fee:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ff6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005ffe:	887b      	ldrh	r3, [r7, #2]
 8006000:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006002:	887b      	ldrh	r3, [r7, #2]
 8006004:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006006:	7efb      	ldrb	r3, [r7, #27]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d00e      	beq.n	800602a <HAL_SPI_TransmitReceive+0x6e>
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006012:	d106      	bne.n	8006022 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d102      	bne.n	8006022 <HAL_SPI_TransmitReceive+0x66>
 800601c:	7efb      	ldrb	r3, [r7, #27]
 800601e:	2b04      	cmp	r3, #4
 8006020:	d003      	beq.n	800602a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006022:	2302      	movs	r3, #2
 8006024:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006028:	e1e0      	b.n	80063ec <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d005      	beq.n	800603c <HAL_SPI_TransmitReceive+0x80>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <HAL_SPI_TransmitReceive+0x80>
 8006036:	887b      	ldrh	r3, [r7, #2]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d103      	bne.n	8006044 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006042:	e1d3      	b.n	80063ec <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b04      	cmp	r3, #4
 800604e:	d003      	beq.n	8006058 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2205      	movs	r2, #5
 8006054:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	887a      	ldrh	r2, [r7, #2]
 8006068:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	887a      	ldrh	r2, [r7, #2]
 8006070:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	887a      	ldrh	r2, [r7, #2]
 800607e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	887a      	ldrh	r2, [r7, #2]
 8006084:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800609a:	d802      	bhi.n	80060a2 <HAL_SPI_TransmitReceive+0xe6>
 800609c:	8a3b      	ldrh	r3, [r7, #16]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d908      	bls.n	80060b4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80060b0:	605a      	str	r2, [r3, #4]
 80060b2:	e007      	b.n	80060c4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80060c2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ce:	2b40      	cmp	r3, #64	@ 0x40
 80060d0:	d007      	beq.n	80060e2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80060ea:	f240 8081 	bls.w	80061f0 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <HAL_SPI_TransmitReceive+0x140>
 80060f6:	8a7b      	ldrh	r3, [r7, #18]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d16d      	bne.n	80061d8 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006100:	881a      	ldrh	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800610c:	1c9a      	adds	r2, r3, #2
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006116:	b29b      	uxth	r3, r3
 8006118:	3b01      	subs	r3, #1
 800611a:	b29a      	uxth	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006120:	e05a      	b.n	80061d8 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b02      	cmp	r3, #2
 800612e:	d11b      	bne.n	8006168 <HAL_SPI_TransmitReceive+0x1ac>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d016      	beq.n	8006168 <HAL_SPI_TransmitReceive+0x1ac>
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	2b01      	cmp	r3, #1
 800613e:	d113      	bne.n	8006168 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006144:	881a      	ldrh	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006150:	1c9a      	adds	r2, r3, #2
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800615a:	b29b      	uxth	r3, r3
 800615c:	3b01      	subs	r3, #1
 800615e:	b29a      	uxth	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b01      	cmp	r3, #1
 8006174:	d11c      	bne.n	80061b0 <HAL_SPI_TransmitReceive+0x1f4>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800617c:	b29b      	uxth	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d016      	beq.n	80061b0 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68da      	ldr	r2, [r3, #12]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618c:	b292      	uxth	r2, r2
 800618e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006194:	1c9a      	adds	r2, r3, #2
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	3b01      	subs	r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061ac:	2301      	movs	r3, #1
 80061ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80061b0:	f7fc fb30 	bl	8002814 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061bc:	429a      	cmp	r2, r3
 80061be:	d80b      	bhi.n	80061d8 <HAL_SPI_TransmitReceive+0x21c>
 80061c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c6:	d007      	beq.n	80061d8 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80061d6:	e109      	b.n	80063ec <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d19f      	bne.n	8006122 <HAL_SPI_TransmitReceive+0x166>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d199      	bne.n	8006122 <HAL_SPI_TransmitReceive+0x166>
 80061ee:	e0e3      	b.n	80063b8 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <HAL_SPI_TransmitReceive+0x244>
 80061f8:	8a7b      	ldrh	r3, [r7, #18]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	f040 80cf 	bne.w	800639e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b01      	cmp	r3, #1
 8006208:	d912      	bls.n	8006230 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800620e:	881a      	ldrh	r2, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800621a:	1c9a      	adds	r2, r3, #2
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006224:	b29b      	uxth	r3, r3
 8006226:	3b02      	subs	r3, #2
 8006228:	b29a      	uxth	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800622e:	e0b6      	b.n	800639e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	330c      	adds	r3, #12
 800623a:	7812      	ldrb	r2, [r2, #0]
 800623c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006242:	1c5a      	adds	r2, r3, #1
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800624c:	b29b      	uxth	r3, r3
 800624e:	3b01      	subs	r3, #1
 8006250:	b29a      	uxth	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006256:	e0a2      	b.n	800639e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	2b02      	cmp	r3, #2
 8006264:	d134      	bne.n	80062d0 <HAL_SPI_TransmitReceive+0x314>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800626a:	b29b      	uxth	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	d02f      	beq.n	80062d0 <HAL_SPI_TransmitReceive+0x314>
 8006270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006272:	2b01      	cmp	r3, #1
 8006274:	d12c      	bne.n	80062d0 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800627a:	b29b      	uxth	r3, r3
 800627c:	2b01      	cmp	r3, #1
 800627e:	d912      	bls.n	80062a6 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006284:	881a      	ldrh	r2, [r3, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006290:	1c9a      	adds	r2, r3, #2
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800629a:	b29b      	uxth	r3, r3
 800629c:	3b02      	subs	r3, #2
 800629e:	b29a      	uxth	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062a4:	e012      	b.n	80062cc <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	330c      	adds	r3, #12
 80062b0:	7812      	ldrb	r2, [r2, #0]
 80062b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	3b01      	subs	r3, #1
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d148      	bne.n	8006370 <HAL_SPI_TransmitReceive+0x3b4>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d042      	beq.n	8006370 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d923      	bls.n	800633e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68da      	ldr	r2, [r3, #12]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006300:	b292      	uxth	r2, r2
 8006302:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006308:	1c9a      	adds	r2, r3, #2
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006314:	b29b      	uxth	r3, r3
 8006316:	3b02      	subs	r3, #2
 8006318:	b29a      	uxth	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006326:	b29b      	uxth	r3, r3
 8006328:	2b01      	cmp	r3, #1
 800632a:	d81f      	bhi.n	800636c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800633a:	605a      	str	r2, [r3, #4]
 800633c:	e016      	b.n	800636c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f103 020c 	add.w	r2, r3, #12
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634a:	7812      	ldrb	r2, [r2, #0]
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006360:	b29b      	uxth	r3, r3
 8006362:	3b01      	subs	r3, #1
 8006364:	b29a      	uxth	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800636c:	2301      	movs	r3, #1
 800636e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006370:	f7fc fa50 	bl	8002814 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800637c:	429a      	cmp	r2, r3
 800637e:	d803      	bhi.n	8006388 <HAL_SPI_TransmitReceive+0x3cc>
 8006380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006386:	d102      	bne.n	800638e <HAL_SPI_TransmitReceive+0x3d2>
 8006388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638a:	2b00      	cmp	r3, #0
 800638c:	d107      	bne.n	800639e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800639c:	e026      	b.n	80063ec <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f47f af57 	bne.w	8006258 <HAL_SPI_TransmitReceive+0x29c>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f47f af50 	bne.w	8006258 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063b8:	69fa      	ldr	r2, [r7, #28]
 80063ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 f93d 	bl	800663c <SPI_EndRxTxTransaction>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d005      	beq.n	80063d4 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2220      	movs	r2, #32
 80063d2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063e2:	e003      	b.n	80063ec <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80063f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3728      	adds	r7, #40	@ 0x28
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b088      	sub	sp, #32
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	603b      	str	r3, [r7, #0]
 800640c:	4613      	mov	r3, r2
 800640e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006410:	f7fc fa00 	bl	8002814 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006418:	1a9b      	subs	r3, r3, r2
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	4413      	add	r3, r2
 800641e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006420:	f7fc f9f8 	bl	8002814 <HAL_GetTick>
 8006424:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006426:	4b39      	ldr	r3, [pc, #228]	@ (800650c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	015b      	lsls	r3, r3, #5
 800642c:	0d1b      	lsrs	r3, r3, #20
 800642e:	69fa      	ldr	r2, [r7, #28]
 8006430:	fb02 f303 	mul.w	r3, r2, r3
 8006434:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006436:	e054      	b.n	80064e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643e:	d050      	beq.n	80064e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006440:	f7fc f9e8 	bl	8002814 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	429a      	cmp	r2, r3
 800644e:	d902      	bls.n	8006456 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d13d      	bne.n	80064d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006464:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800646e:	d111      	bne.n	8006494 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006478:	d004      	beq.n	8006484 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006482:	d107      	bne.n	8006494 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006492:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006498:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800649c:	d10f      	bne.n	80064be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e017      	b.n	8006502 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	3b01      	subs	r3, #1
 80064e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4013      	ands	r3, r2
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	bf0c      	ite	eq
 80064f2:	2301      	moveq	r3, #1
 80064f4:	2300      	movne	r3, #0
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	461a      	mov	r2, r3
 80064fa:	79fb      	ldrb	r3, [r7, #7]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d19b      	bne.n	8006438 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3720      	adds	r7, #32
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	20000004 	.word	0x20000004

08006510 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b08a      	sub	sp, #40	@ 0x28
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
 800651c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800651e:	2300      	movs	r3, #0
 8006520:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006522:	f7fc f977 	bl	8002814 <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652a:	1a9b      	subs	r3, r3, r2
 800652c:	683a      	ldr	r2, [r7, #0]
 800652e:	4413      	add	r3, r2
 8006530:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006532:	f7fc f96f 	bl	8002814 <HAL_GetTick>
 8006536:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	330c      	adds	r3, #12
 800653e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006540:	4b3d      	ldr	r3, [pc, #244]	@ (8006638 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	4613      	mov	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	00da      	lsls	r2, r3, #3
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	0d1b      	lsrs	r3, r3, #20
 8006550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006552:	fb02 f303 	mul.w	r3, r2, r3
 8006556:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006558:	e060      	b.n	800661c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006560:	d107      	bne.n	8006572 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d104      	bne.n	8006572 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	b2db      	uxtb	r3, r3
 800656e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006570:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006578:	d050      	beq.n	800661c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800657a:	f7fc f94b 	bl	8002814 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006586:	429a      	cmp	r2, r3
 8006588:	d902      	bls.n	8006590 <SPI_WaitFifoStateUntilTimeout+0x80>
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658c:	2b00      	cmp	r3, #0
 800658e:	d13d      	bne.n	800660c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800659e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065a8:	d111      	bne.n	80065ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065b2:	d004      	beq.n	80065be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065bc:	d107      	bne.n	80065ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065d6:	d10f      	bne.n	80065f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e010      	b.n	800662e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006612:	2300      	movs	r3, #0
 8006614:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	3b01      	subs	r3, #1
 800661a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689a      	ldr	r2, [r3, #8]
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	4013      	ands	r3, r2
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	429a      	cmp	r2, r3
 800662a:	d196      	bne.n	800655a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3728      	adds	r7, #40	@ 0x28
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	20000004 	.word	0x20000004

0800663c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af02      	add	r7, sp, #8
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2200      	movs	r2, #0
 8006650:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f7ff ff5b 	bl	8006510 <SPI_WaitFifoStateUntilTimeout>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d007      	beq.n	8006670 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006664:	f043 0220 	orr.w	r2, r3, #32
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e027      	b.n	80066c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2200      	movs	r2, #0
 8006678:	2180      	movs	r1, #128	@ 0x80
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f7ff fec0 	bl	8006400 <SPI_WaitFlagStateUntilTimeout>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d007      	beq.n	8006696 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800668a:	f043 0220 	orr.w	r2, r3, #32
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e014      	b.n	80066c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	9300      	str	r3, [sp, #0]
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2200      	movs	r2, #0
 800669e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f7ff ff34 	bl	8006510 <SPI_WaitFifoStateUntilTimeout>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d007      	beq.n	80066be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066b2:	f043 0220 	orr.w	r2, r3, #32
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e000      	b.n	80066c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e042      	b.n	8006760 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d106      	bne.n	80066f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7fb ff31 	bl	8002554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2224      	movs	r2, #36	@ 0x24
 80066f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f022 0201 	bic.w	r2, r2, #1
 8006708:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fb28 	bl	8006d68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f825 	bl	8006768 <UART_SetConfig>
 800671e:	4603      	mov	r3, r0
 8006720:	2b01      	cmp	r3, #1
 8006722:	d101      	bne.n	8006728 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e01b      	b.n	8006760 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006736:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689a      	ldr	r2, [r3, #8]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006746:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f042 0201 	orr.w	r2, r2, #1
 8006756:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fba7 	bl	8006eac <UART_CheckIdleState>
 800675e:	4603      	mov	r3, r0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800676c:	b08c      	sub	sp, #48	@ 0x30
 800676e:	af00      	add	r7, sp, #0
 8006770:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	431a      	orrs	r2, r3
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	431a      	orrs	r2, r3
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	4313      	orrs	r3, r2
 800678e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	4baa      	ldr	r3, [pc, #680]	@ (8006a40 <UART_SetConfig+0x2d8>)
 8006798:	4013      	ands	r3, r2
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	6812      	ldr	r2, [r2, #0]
 800679e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067a0:	430b      	orrs	r3, r1
 80067a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a9f      	ldr	r2, [pc, #636]	@ (8006a44 <UART_SetConfig+0x2dc>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d004      	beq.n	80067d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067d0:	4313      	orrs	r3, r2
 80067d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80067de:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	6812      	ldr	r2, [r2, #0]
 80067e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067e8:	430b      	orrs	r3, r1
 80067ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f2:	f023 010f 	bic.w	r1, r3, #15
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a90      	ldr	r2, [pc, #576]	@ (8006a48 <UART_SetConfig+0x2e0>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d125      	bne.n	8006858 <UART_SetConfig+0xf0>
 800680c:	4b8f      	ldr	r3, [pc, #572]	@ (8006a4c <UART_SetConfig+0x2e4>)
 800680e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006812:	f003 0303 	and.w	r3, r3, #3
 8006816:	2b03      	cmp	r3, #3
 8006818:	d81a      	bhi.n	8006850 <UART_SetConfig+0xe8>
 800681a:	a201      	add	r2, pc, #4	@ (adr r2, 8006820 <UART_SetConfig+0xb8>)
 800681c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006820:	08006831 	.word	0x08006831
 8006824:	08006841 	.word	0x08006841
 8006828:	08006839 	.word	0x08006839
 800682c:	08006849 	.word	0x08006849
 8006830:	2301      	movs	r3, #1
 8006832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006836:	e116      	b.n	8006a66 <UART_SetConfig+0x2fe>
 8006838:	2302      	movs	r3, #2
 800683a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800683e:	e112      	b.n	8006a66 <UART_SetConfig+0x2fe>
 8006840:	2304      	movs	r3, #4
 8006842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006846:	e10e      	b.n	8006a66 <UART_SetConfig+0x2fe>
 8006848:	2308      	movs	r3, #8
 800684a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800684e:	e10a      	b.n	8006a66 <UART_SetConfig+0x2fe>
 8006850:	2310      	movs	r3, #16
 8006852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006856:	e106      	b.n	8006a66 <UART_SetConfig+0x2fe>
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a7c      	ldr	r2, [pc, #496]	@ (8006a50 <UART_SetConfig+0x2e8>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d138      	bne.n	80068d4 <UART_SetConfig+0x16c>
 8006862:	4b7a      	ldr	r3, [pc, #488]	@ (8006a4c <UART_SetConfig+0x2e4>)
 8006864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006868:	f003 030c 	and.w	r3, r3, #12
 800686c:	2b0c      	cmp	r3, #12
 800686e:	d82d      	bhi.n	80068cc <UART_SetConfig+0x164>
 8006870:	a201      	add	r2, pc, #4	@ (adr r2, 8006878 <UART_SetConfig+0x110>)
 8006872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006876:	bf00      	nop
 8006878:	080068ad 	.word	0x080068ad
 800687c:	080068cd 	.word	0x080068cd
 8006880:	080068cd 	.word	0x080068cd
 8006884:	080068cd 	.word	0x080068cd
 8006888:	080068bd 	.word	0x080068bd
 800688c:	080068cd 	.word	0x080068cd
 8006890:	080068cd 	.word	0x080068cd
 8006894:	080068cd 	.word	0x080068cd
 8006898:	080068b5 	.word	0x080068b5
 800689c:	080068cd 	.word	0x080068cd
 80068a0:	080068cd 	.word	0x080068cd
 80068a4:	080068cd 	.word	0x080068cd
 80068a8:	080068c5 	.word	0x080068c5
 80068ac:	2300      	movs	r3, #0
 80068ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068b2:	e0d8      	b.n	8006a66 <UART_SetConfig+0x2fe>
 80068b4:	2302      	movs	r3, #2
 80068b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ba:	e0d4      	b.n	8006a66 <UART_SetConfig+0x2fe>
 80068bc:	2304      	movs	r3, #4
 80068be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068c2:	e0d0      	b.n	8006a66 <UART_SetConfig+0x2fe>
 80068c4:	2308      	movs	r3, #8
 80068c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ca:	e0cc      	b.n	8006a66 <UART_SetConfig+0x2fe>
 80068cc:	2310      	movs	r3, #16
 80068ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068d2:	e0c8      	b.n	8006a66 <UART_SetConfig+0x2fe>
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a5e      	ldr	r2, [pc, #376]	@ (8006a54 <UART_SetConfig+0x2ec>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d125      	bne.n	800692a <UART_SetConfig+0x1c2>
 80068de:	4b5b      	ldr	r3, [pc, #364]	@ (8006a4c <UART_SetConfig+0x2e4>)
 80068e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80068e8:	2b30      	cmp	r3, #48	@ 0x30
 80068ea:	d016      	beq.n	800691a <UART_SetConfig+0x1b2>
 80068ec:	2b30      	cmp	r3, #48	@ 0x30
 80068ee:	d818      	bhi.n	8006922 <UART_SetConfig+0x1ba>
 80068f0:	2b20      	cmp	r3, #32
 80068f2:	d00a      	beq.n	800690a <UART_SetConfig+0x1a2>
 80068f4:	2b20      	cmp	r3, #32
 80068f6:	d814      	bhi.n	8006922 <UART_SetConfig+0x1ba>
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d002      	beq.n	8006902 <UART_SetConfig+0x19a>
 80068fc:	2b10      	cmp	r3, #16
 80068fe:	d008      	beq.n	8006912 <UART_SetConfig+0x1aa>
 8006900:	e00f      	b.n	8006922 <UART_SetConfig+0x1ba>
 8006902:	2300      	movs	r3, #0
 8006904:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006908:	e0ad      	b.n	8006a66 <UART_SetConfig+0x2fe>
 800690a:	2302      	movs	r3, #2
 800690c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006910:	e0a9      	b.n	8006a66 <UART_SetConfig+0x2fe>
 8006912:	2304      	movs	r3, #4
 8006914:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006918:	e0a5      	b.n	8006a66 <UART_SetConfig+0x2fe>
 800691a:	2308      	movs	r3, #8
 800691c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006920:	e0a1      	b.n	8006a66 <UART_SetConfig+0x2fe>
 8006922:	2310      	movs	r3, #16
 8006924:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006928:	e09d      	b.n	8006a66 <UART_SetConfig+0x2fe>
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a4a      	ldr	r2, [pc, #296]	@ (8006a58 <UART_SetConfig+0x2f0>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d125      	bne.n	8006980 <UART_SetConfig+0x218>
 8006934:	4b45      	ldr	r3, [pc, #276]	@ (8006a4c <UART_SetConfig+0x2e4>)
 8006936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800693a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800693e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006940:	d016      	beq.n	8006970 <UART_SetConfig+0x208>
 8006942:	2bc0      	cmp	r3, #192	@ 0xc0
 8006944:	d818      	bhi.n	8006978 <UART_SetConfig+0x210>
 8006946:	2b80      	cmp	r3, #128	@ 0x80
 8006948:	d00a      	beq.n	8006960 <UART_SetConfig+0x1f8>
 800694a:	2b80      	cmp	r3, #128	@ 0x80
 800694c:	d814      	bhi.n	8006978 <UART_SetConfig+0x210>
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <UART_SetConfig+0x1f0>
 8006952:	2b40      	cmp	r3, #64	@ 0x40
 8006954:	d008      	beq.n	8006968 <UART_SetConfig+0x200>
 8006956:	e00f      	b.n	8006978 <UART_SetConfig+0x210>
 8006958:	2300      	movs	r3, #0
 800695a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800695e:	e082      	b.n	8006a66 <UART_SetConfig+0x2fe>
 8006960:	2302      	movs	r3, #2
 8006962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006966:	e07e      	b.n	8006a66 <UART_SetConfig+0x2fe>
 8006968:	2304      	movs	r3, #4
 800696a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800696e:	e07a      	b.n	8006a66 <UART_SetConfig+0x2fe>
 8006970:	2308      	movs	r3, #8
 8006972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006976:	e076      	b.n	8006a66 <UART_SetConfig+0x2fe>
 8006978:	2310      	movs	r3, #16
 800697a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800697e:	e072      	b.n	8006a66 <UART_SetConfig+0x2fe>
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a35      	ldr	r2, [pc, #212]	@ (8006a5c <UART_SetConfig+0x2f4>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d12a      	bne.n	80069e0 <UART_SetConfig+0x278>
 800698a:	4b30      	ldr	r3, [pc, #192]	@ (8006a4c <UART_SetConfig+0x2e4>)
 800698c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006990:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006994:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006998:	d01a      	beq.n	80069d0 <UART_SetConfig+0x268>
 800699a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800699e:	d81b      	bhi.n	80069d8 <UART_SetConfig+0x270>
 80069a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069a4:	d00c      	beq.n	80069c0 <UART_SetConfig+0x258>
 80069a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069aa:	d815      	bhi.n	80069d8 <UART_SetConfig+0x270>
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d003      	beq.n	80069b8 <UART_SetConfig+0x250>
 80069b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069b4:	d008      	beq.n	80069c8 <UART_SetConfig+0x260>
 80069b6:	e00f      	b.n	80069d8 <UART_SetConfig+0x270>
 80069b8:	2300      	movs	r3, #0
 80069ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069be:	e052      	b.n	8006a66 <UART_SetConfig+0x2fe>
 80069c0:	2302      	movs	r3, #2
 80069c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069c6:	e04e      	b.n	8006a66 <UART_SetConfig+0x2fe>
 80069c8:	2304      	movs	r3, #4
 80069ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ce:	e04a      	b.n	8006a66 <UART_SetConfig+0x2fe>
 80069d0:	2308      	movs	r3, #8
 80069d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069d6:	e046      	b.n	8006a66 <UART_SetConfig+0x2fe>
 80069d8:	2310      	movs	r3, #16
 80069da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069de:	e042      	b.n	8006a66 <UART_SetConfig+0x2fe>
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a17      	ldr	r2, [pc, #92]	@ (8006a44 <UART_SetConfig+0x2dc>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d13a      	bne.n	8006a60 <UART_SetConfig+0x2f8>
 80069ea:	4b18      	ldr	r3, [pc, #96]	@ (8006a4c <UART_SetConfig+0x2e4>)
 80069ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80069f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069f8:	d01a      	beq.n	8006a30 <UART_SetConfig+0x2c8>
 80069fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069fe:	d81b      	bhi.n	8006a38 <UART_SetConfig+0x2d0>
 8006a00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a04:	d00c      	beq.n	8006a20 <UART_SetConfig+0x2b8>
 8006a06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a0a:	d815      	bhi.n	8006a38 <UART_SetConfig+0x2d0>
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d003      	beq.n	8006a18 <UART_SetConfig+0x2b0>
 8006a10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a14:	d008      	beq.n	8006a28 <UART_SetConfig+0x2c0>
 8006a16:	e00f      	b.n	8006a38 <UART_SetConfig+0x2d0>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a1e:	e022      	b.n	8006a66 <UART_SetConfig+0x2fe>
 8006a20:	2302      	movs	r3, #2
 8006a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a26:	e01e      	b.n	8006a66 <UART_SetConfig+0x2fe>
 8006a28:	2304      	movs	r3, #4
 8006a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a2e:	e01a      	b.n	8006a66 <UART_SetConfig+0x2fe>
 8006a30:	2308      	movs	r3, #8
 8006a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a36:	e016      	b.n	8006a66 <UART_SetConfig+0x2fe>
 8006a38:	2310      	movs	r3, #16
 8006a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a3e:	e012      	b.n	8006a66 <UART_SetConfig+0x2fe>
 8006a40:	cfff69f3 	.word	0xcfff69f3
 8006a44:	40008000 	.word	0x40008000
 8006a48:	40013800 	.word	0x40013800
 8006a4c:	40021000 	.word	0x40021000
 8006a50:	40004400 	.word	0x40004400
 8006a54:	40004800 	.word	0x40004800
 8006a58:	40004c00 	.word	0x40004c00
 8006a5c:	40005000 	.word	0x40005000
 8006a60:	2310      	movs	r3, #16
 8006a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4ab0      	ldr	r2, [pc, #704]	@ (8006d2c <UART_SetConfig+0x5c4>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	f040 809b 	bne.w	8006ba8 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a72:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a76:	2b08      	cmp	r3, #8
 8006a78:	d827      	bhi.n	8006aca <UART_SetConfig+0x362>
 8006a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a80 <UART_SetConfig+0x318>)
 8006a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a80:	08006aa5 	.word	0x08006aa5
 8006a84:	08006aad 	.word	0x08006aad
 8006a88:	08006ab5 	.word	0x08006ab5
 8006a8c:	08006acb 	.word	0x08006acb
 8006a90:	08006abb 	.word	0x08006abb
 8006a94:	08006acb 	.word	0x08006acb
 8006a98:	08006acb 	.word	0x08006acb
 8006a9c:	08006acb 	.word	0x08006acb
 8006aa0:	08006ac3 	.word	0x08006ac3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aa4:	f7fe f928 	bl	8004cf8 <HAL_RCC_GetPCLK1Freq>
 8006aa8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006aaa:	e014      	b.n	8006ad6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aac:	f7fe f938 	bl	8004d20 <HAL_RCC_GetPCLK2Freq>
 8006ab0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ab2:	e010      	b.n	8006ad6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ab4:	4b9e      	ldr	r3, [pc, #632]	@ (8006d30 <UART_SetConfig+0x5c8>)
 8006ab6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ab8:	e00d      	b.n	8006ad6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aba:	f7fe f86b 	bl	8004b94 <HAL_RCC_GetSysClockFreq>
 8006abe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ac0:	e009      	b.n	8006ad6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ac2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ac6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ac8:	e005      	b.n	8006ad6 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8006aca:	2300      	movs	r3, #0
 8006acc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ad4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 8130 	beq.w	8006d3e <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae2:	4a94      	ldr	r2, [pc, #592]	@ (8006d34 <UART_SetConfig+0x5cc>)
 8006ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aec:	fbb3 f3f2 	udiv	r3, r3, r2
 8006af0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	4613      	mov	r3, r2
 8006af8:	005b      	lsls	r3, r3, #1
 8006afa:	4413      	add	r3, r2
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d305      	bcc.n	8006b0e <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d903      	bls.n	8006b16 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b14:	e113      	b.n	8006d3e <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b18:	2200      	movs	r2, #0
 8006b1a:	60bb      	str	r3, [r7, #8]
 8006b1c:	60fa      	str	r2, [r7, #12]
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b22:	4a84      	ldr	r2, [pc, #528]	@ (8006d34 <UART_SetConfig+0x5cc>)
 8006b24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	603b      	str	r3, [r7, #0]
 8006b2e:	607a      	str	r2, [r7, #4]
 8006b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b38:	f7fa f86a 	bl	8000c10 <__aeabi_uldivmod>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4610      	mov	r0, r2
 8006b42:	4619      	mov	r1, r3
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	f04f 0300 	mov.w	r3, #0
 8006b4c:	020b      	lsls	r3, r1, #8
 8006b4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b52:	0202      	lsls	r2, r0, #8
 8006b54:	6979      	ldr	r1, [r7, #20]
 8006b56:	6849      	ldr	r1, [r1, #4]
 8006b58:	0849      	lsrs	r1, r1, #1
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	460c      	mov	r4, r1
 8006b5e:	4605      	mov	r5, r0
 8006b60:	eb12 0804 	adds.w	r8, r2, r4
 8006b64:	eb43 0905 	adc.w	r9, r3, r5
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	469a      	mov	sl, r3
 8006b70:	4693      	mov	fp, r2
 8006b72:	4652      	mov	r2, sl
 8006b74:	465b      	mov	r3, fp
 8006b76:	4640      	mov	r0, r8
 8006b78:	4649      	mov	r1, r9
 8006b7a:	f7fa f849 	bl	8000c10 <__aeabi_uldivmod>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	460b      	mov	r3, r1
 8006b82:	4613      	mov	r3, r2
 8006b84:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b8c:	d308      	bcc.n	8006ba0 <UART_SetConfig+0x438>
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b94:	d204      	bcs.n	8006ba0 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6a3a      	ldr	r2, [r7, #32]
 8006b9c:	60da      	str	r2, [r3, #12]
 8006b9e:	e0ce      	b.n	8006d3e <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ba6:	e0ca      	b.n	8006d3e <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bb0:	d166      	bne.n	8006c80 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8006bb2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006bb6:	2b08      	cmp	r3, #8
 8006bb8:	d827      	bhi.n	8006c0a <UART_SetConfig+0x4a2>
 8006bba:	a201      	add	r2, pc, #4	@ (adr r2, 8006bc0 <UART_SetConfig+0x458>)
 8006bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc0:	08006be5 	.word	0x08006be5
 8006bc4:	08006bed 	.word	0x08006bed
 8006bc8:	08006bf5 	.word	0x08006bf5
 8006bcc:	08006c0b 	.word	0x08006c0b
 8006bd0:	08006bfb 	.word	0x08006bfb
 8006bd4:	08006c0b 	.word	0x08006c0b
 8006bd8:	08006c0b 	.word	0x08006c0b
 8006bdc:	08006c0b 	.word	0x08006c0b
 8006be0:	08006c03 	.word	0x08006c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006be4:	f7fe f888 	bl	8004cf8 <HAL_RCC_GetPCLK1Freq>
 8006be8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bea:	e014      	b.n	8006c16 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bec:	f7fe f898 	bl	8004d20 <HAL_RCC_GetPCLK2Freq>
 8006bf0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bf2:	e010      	b.n	8006c16 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bf4:	4b4e      	ldr	r3, [pc, #312]	@ (8006d30 <UART_SetConfig+0x5c8>)
 8006bf6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006bf8:	e00d      	b.n	8006c16 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bfa:	f7fd ffcb 	bl	8004b94 <HAL_RCC_GetSysClockFreq>
 8006bfe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c00:	e009      	b.n	8006c16 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c08:	e005      	b.n	8006c16 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 8090 	beq.w	8006d3e <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c22:	4a44      	ldr	r2, [pc, #272]	@ (8006d34 <UART_SetConfig+0x5cc>)
 8006c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c28:	461a      	mov	r2, r3
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c30:	005a      	lsls	r2, r3, #1
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	085b      	lsrs	r3, r3, #1
 8006c38:	441a      	add	r2, r3
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	2b0f      	cmp	r3, #15
 8006c48:	d916      	bls.n	8006c78 <UART_SetConfig+0x510>
 8006c4a:	6a3b      	ldr	r3, [r7, #32]
 8006c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c50:	d212      	bcs.n	8006c78 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	f023 030f 	bic.w	r3, r3, #15
 8006c5a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	085b      	lsrs	r3, r3, #1
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	f003 0307 	and.w	r3, r3, #7
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	8bfb      	ldrh	r3, [r7, #30]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	8bfa      	ldrh	r2, [r7, #30]
 8006c74:	60da      	str	r2, [r3, #12]
 8006c76:	e062      	b.n	8006d3e <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c7e:	e05e      	b.n	8006d3e <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c84:	2b08      	cmp	r3, #8
 8006c86:	d828      	bhi.n	8006cda <UART_SetConfig+0x572>
 8006c88:	a201      	add	r2, pc, #4	@ (adr r2, 8006c90 <UART_SetConfig+0x528>)
 8006c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8e:	bf00      	nop
 8006c90:	08006cb5 	.word	0x08006cb5
 8006c94:	08006cbd 	.word	0x08006cbd
 8006c98:	08006cc5 	.word	0x08006cc5
 8006c9c:	08006cdb 	.word	0x08006cdb
 8006ca0:	08006ccb 	.word	0x08006ccb
 8006ca4:	08006cdb 	.word	0x08006cdb
 8006ca8:	08006cdb 	.word	0x08006cdb
 8006cac:	08006cdb 	.word	0x08006cdb
 8006cb0:	08006cd3 	.word	0x08006cd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cb4:	f7fe f820 	bl	8004cf8 <HAL_RCC_GetPCLK1Freq>
 8006cb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cba:	e014      	b.n	8006ce6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cbc:	f7fe f830 	bl	8004d20 <HAL_RCC_GetPCLK2Freq>
 8006cc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cc2:	e010      	b.n	8006ce6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8006d30 <UART_SetConfig+0x5c8>)
 8006cc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cc8:	e00d      	b.n	8006ce6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cca:	f7fd ff63 	bl	8004b94 <HAL_RCC_GetSysClockFreq>
 8006cce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cd0:	e009      	b.n	8006ce6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cd8:	e005      	b.n	8006ce6 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ce4:	bf00      	nop
    }

    if (pclk != 0U)
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d028      	beq.n	8006d3e <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf0:	4a10      	ldr	r2, [pc, #64]	@ (8006d34 <UART_SetConfig+0x5cc>)
 8006cf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfa:	fbb3 f2f2 	udiv	r2, r3, r2
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	085b      	lsrs	r3, r3, #1
 8006d04:	441a      	add	r2, r3
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	2b0f      	cmp	r3, #15
 8006d14:	d910      	bls.n	8006d38 <UART_SetConfig+0x5d0>
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d1c:	d20c      	bcs.n	8006d38 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d1e:	6a3b      	ldr	r3, [r7, #32]
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	60da      	str	r2, [r3, #12]
 8006d28:	e009      	b.n	8006d3e <UART_SetConfig+0x5d6>
 8006d2a:	bf00      	nop
 8006d2c:	40008000 	.word	0x40008000
 8006d30:	00f42400 	.word	0x00f42400
 8006d34:	0800c22c 	.word	0x0800c22c
      }
      else
      {
        ret = HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	2200      	movs	r2, #0
 8006d52:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	2200      	movs	r2, #0
 8006d58:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006d5a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3730      	adds	r7, #48	@ 0x30
 8006d62:	46bd      	mov	sp, r7
 8006d64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006d68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d74:	f003 0308 	and.w	r3, r3, #8
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00a      	beq.n	8006db4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00a      	beq.n	8006dd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dda:	f003 0304 	and.w	r3, r3, #4
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00a      	beq.n	8006df8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfc:	f003 0310 	and.w	r3, r3, #16
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00a      	beq.n	8006e1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00a      	beq.n	8006e3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01a      	beq.n	8006e7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e66:	d10a      	bne.n	8006e7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	605a      	str	r2, [r3, #4]
  }
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b098      	sub	sp, #96	@ 0x60
 8006eb0:	af02      	add	r7, sp, #8
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ebc:	f7fb fcaa 	bl	8002814 <HAL_GetTick>
 8006ec0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0308 	and.w	r3, r3, #8
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	d12f      	bne.n	8006f30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ed0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f88e 	bl	8007000 <UART_WaitOnFlagUntilTimeout>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d022      	beq.n	8006f30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef2:	e853 3f00 	ldrex	r3, [r3]
 8006ef6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006efa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006efe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	461a      	mov	r2, r3
 8006f06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f0a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f10:	e841 2300 	strex	r3, r2, [r1]
 8006f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e6      	bne.n	8006eea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e063      	b.n	8006ff8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0304 	and.w	r3, r3, #4
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	d149      	bne.n	8006fd2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f3e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f46:	2200      	movs	r2, #0
 8006f48:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f857 	bl	8007000 <UART_WaitOnFlagUntilTimeout>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d03c      	beq.n	8006fd2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f60:	e853 3f00 	ldrex	r3, [r3]
 8006f64:	623b      	str	r3, [r7, #32]
   return(result);
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	461a      	mov	r2, r3
 8006f74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f76:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f78:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f7e:	e841 2300 	strex	r3, r2, [r1]
 8006f82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1e6      	bne.n	8006f58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	3308      	adds	r3, #8
 8006f90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	e853 3f00 	ldrex	r3, [r3]
 8006f98:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f023 0301 	bic.w	r3, r3, #1
 8006fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	3308      	adds	r3, #8
 8006fa8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006faa:	61fa      	str	r2, [r7, #28]
 8006fac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fae:	69b9      	ldr	r1, [r7, #24]
 8006fb0:	69fa      	ldr	r2, [r7, #28]
 8006fb2:	e841 2300 	strex	r3, r2, [r1]
 8006fb6:	617b      	str	r3, [r7, #20]
   return(result);
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1e5      	bne.n	8006f8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e012      	b.n	8006ff8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3758      	adds	r7, #88	@ 0x58
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	4613      	mov	r3, r2
 800700e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007010:	e04f      	b.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007018:	d04b      	beq.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800701a:	f7fb fbfb 	bl	8002814 <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	429a      	cmp	r2, r3
 8007028:	d302      	bcc.n	8007030 <UART_WaitOnFlagUntilTimeout+0x30>
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e04e      	b.n	80070d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0304 	and.w	r3, r3, #4
 800703e:	2b00      	cmp	r3, #0
 8007040:	d037      	beq.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	2b80      	cmp	r3, #128	@ 0x80
 8007046:	d034      	beq.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	2b40      	cmp	r3, #64	@ 0x40
 800704c:	d031      	beq.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69db      	ldr	r3, [r3, #28]
 8007054:	f003 0308 	and.w	r3, r3, #8
 8007058:	2b08      	cmp	r3, #8
 800705a:	d110      	bne.n	800707e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2208      	movs	r2, #8
 8007062:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 f838 	bl	80070da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2208      	movs	r2, #8
 800706e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e029      	b.n	80070d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007088:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800708c:	d111      	bne.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007096:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f000 f81e 	bl	80070da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2220      	movs	r2, #32
 80070a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e00f      	b.n	80070d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	69da      	ldr	r2, [r3, #28]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	4013      	ands	r3, r2
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	429a      	cmp	r2, r3
 80070c0:	bf0c      	ite	eq
 80070c2:	2301      	moveq	r3, #1
 80070c4:	2300      	movne	r3, #0
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	461a      	mov	r2, r3
 80070ca:	79fb      	ldrb	r3, [r7, #7]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d0a0      	beq.n	8007012 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070da:	b480      	push	{r7}
 80070dc:	b095      	sub	sp, #84	@ 0x54
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ea:	e853 3f00 	ldrex	r3, [r3]
 80070ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	461a      	mov	r2, r3
 80070fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007100:	643b      	str	r3, [r7, #64]	@ 0x40
 8007102:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007104:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007106:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007108:	e841 2300 	strex	r3, r2, [r1]
 800710c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800710e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1e6      	bne.n	80070e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	3308      	adds	r3, #8
 800711a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	e853 3f00 	ldrex	r3, [r3]
 8007122:	61fb      	str	r3, [r7, #28]
   return(result);
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800712a:	f023 0301 	bic.w	r3, r3, #1
 800712e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	3308      	adds	r3, #8
 8007136:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007138:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800713a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800713e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007140:	e841 2300 	strex	r3, r2, [r1]
 8007144:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1e3      	bne.n	8007114 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007150:	2b01      	cmp	r3, #1
 8007152:	d118      	bne.n	8007186 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	e853 3f00 	ldrex	r3, [r3]
 8007160:	60bb      	str	r3, [r7, #8]
   return(result);
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	f023 0310 	bic.w	r3, r3, #16
 8007168:	647b      	str	r3, [r7, #68]	@ 0x44
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007172:	61bb      	str	r3, [r7, #24]
 8007174:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007176:	6979      	ldr	r1, [r7, #20]
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	e841 2300 	strex	r3, r2, [r1]
 800717e:	613b      	str	r3, [r7, #16]
   return(result);
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1e6      	bne.n	8007154 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2220      	movs	r2, #32
 800718a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800719a:	bf00      	nop
 800719c:	3754      	adds	r7, #84	@ 0x54
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b085      	sub	sp, #20
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d101      	bne.n	80071bc <HAL_UARTEx_DisableFifoMode+0x16>
 80071b8:	2302      	movs	r3, #2
 80071ba:	e027      	b.n	800720c <HAL_UARTEx_DisableFifoMode+0x66>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2224      	movs	r2, #36	@ 0x24
 80071c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 0201 	bic.w	r2, r2, #1
 80071e2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80071ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2220      	movs	r2, #32
 80071fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3714      	adds	r7, #20
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007228:	2b01      	cmp	r3, #1
 800722a:	d101      	bne.n	8007230 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800722c:	2302      	movs	r3, #2
 800722e:	e02d      	b.n	800728c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2224      	movs	r2, #36	@ 0x24
 800723c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 0201 	bic.w	r2, r2, #1
 8007256:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f84f 	bl	8007310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2220      	movs	r2, #32
 800727e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d101      	bne.n	80072ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072a8:	2302      	movs	r3, #2
 80072aa:	e02d      	b.n	8007308 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2224      	movs	r2, #36	@ 0x24
 80072b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f022 0201 	bic.w	r2, r2, #1
 80072d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	430a      	orrs	r2, r1
 80072e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f811 	bl	8007310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2220      	movs	r2, #32
 80072fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800731c:	2b00      	cmp	r3, #0
 800731e:	d108      	bne.n	8007332 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007330:	e031      	b.n	8007396 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007332:	2308      	movs	r3, #8
 8007334:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007336:	2308      	movs	r3, #8
 8007338:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	0e5b      	lsrs	r3, r3, #25
 8007342:	b2db      	uxtb	r3, r3
 8007344:	f003 0307 	and.w	r3, r3, #7
 8007348:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	0f5b      	lsrs	r3, r3, #29
 8007352:	b2db      	uxtb	r3, r3
 8007354:	f003 0307 	and.w	r3, r3, #7
 8007358:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	7b3a      	ldrb	r2, [r7, #12]
 800735e:	4911      	ldr	r1, [pc, #68]	@ (80073a4 <UARTEx_SetNbDataToProcess+0x94>)
 8007360:	5c8a      	ldrb	r2, [r1, r2]
 8007362:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007366:	7b3a      	ldrb	r2, [r7, #12]
 8007368:	490f      	ldr	r1, [pc, #60]	@ (80073a8 <UARTEx_SetNbDataToProcess+0x98>)
 800736a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800736c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007370:	b29a      	uxth	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007378:	7bfb      	ldrb	r3, [r7, #15]
 800737a:	7b7a      	ldrb	r2, [r7, #13]
 800737c:	4909      	ldr	r1, [pc, #36]	@ (80073a4 <UARTEx_SetNbDataToProcess+0x94>)
 800737e:	5c8a      	ldrb	r2, [r1, r2]
 8007380:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007384:	7b7a      	ldrb	r2, [r7, #13]
 8007386:	4908      	ldr	r1, [pc, #32]	@ (80073a8 <UARTEx_SetNbDataToProcess+0x98>)
 8007388:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800738a:	fb93 f3f2 	sdiv	r3, r3, r2
 800738e:	b29a      	uxth	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007396:	bf00      	nop
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	0800c244 	.word	0x0800c244
 80073a8:	0800c24c 	.word	0x0800c24c

080073ac <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b08b      	sub	sp, #44	@ 0x2c
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	fa93 f3a3 	rbit	r3, r3
 80073c6:	613b      	str	r3, [r7, #16]
  return result;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80073d2:	2320      	movs	r3, #32
 80073d4:	e003      	b.n	80073de <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	fab3 f383 	clz	r3, r3
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	2103      	movs	r1, #3
 80073e2:	fa01 f303 	lsl.w	r3, r1, r3
 80073e6:	43db      	mvns	r3, r3
 80073e8:	401a      	ands	r2, r3
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073ee:	6a3b      	ldr	r3, [r7, #32]
 80073f0:	fa93 f3a3 	rbit	r3, r3
 80073f4:	61fb      	str	r3, [r7, #28]
  return result;
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80073fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8007400:	2320      	movs	r3, #32
 8007402:	e003      	b.n	800740c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8007404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007406:	fab3 f383 	clz	r3, r3
 800740a:	b2db      	uxtb	r3, r3
 800740c:	005b      	lsls	r3, r3, #1
 800740e:	6879      	ldr	r1, [r7, #4]
 8007410:	fa01 f303 	lsl.w	r3, r1, r3
 8007414:	431a      	orrs	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	601a      	str	r2, [r3, #0]
}
 800741a:	bf00      	nop
 800741c:	372c      	adds	r7, #44	@ 0x2c
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8007426:	b480      	push	{r7}
 8007428:	b085      	sub	sp, #20
 800742a:	af00      	add	r7, sp, #0
 800742c:	60f8      	str	r0, [r7, #12]
 800742e:	60b9      	str	r1, [r7, #8]
 8007430:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	685a      	ldr	r2, [r3, #4]
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	43db      	mvns	r3, r3
 800743a:	401a      	ands	r2, r3
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	6879      	ldr	r1, [r7, #4]
 8007440:	fb01 f303 	mul.w	r3, r1, r3
 8007444:	431a      	orrs	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	605a      	str	r2, [r3, #4]
}
 800744a:	bf00      	nop
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8007456:	b480      	push	{r7}
 8007458:	b08b      	sub	sp, #44	@ 0x2c
 800745a:	af00      	add	r7, sp, #0
 800745c:	60f8      	str	r0, [r7, #12]
 800745e:	60b9      	str	r1, [r7, #8]
 8007460:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	689a      	ldr	r2, [r3, #8]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	fa93 f3a3 	rbit	r3, r3
 8007470:	613b      	str	r3, [r7, #16]
  return result;
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d101      	bne.n	8007480 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800747c:	2320      	movs	r3, #32
 800747e:	e003      	b.n	8007488 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	fab3 f383 	clz	r3, r3
 8007486:	b2db      	uxtb	r3, r3
 8007488:	005b      	lsls	r3, r3, #1
 800748a:	2103      	movs	r1, #3
 800748c:	fa01 f303 	lsl.w	r3, r1, r3
 8007490:	43db      	mvns	r3, r3
 8007492:	401a      	ands	r2, r3
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	fa93 f3a3 	rbit	r3, r3
 800749e:	61fb      	str	r3, [r7, #28]
  return result;
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80074a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80074aa:	2320      	movs	r3, #32
 80074ac:	e003      	b.n	80074b6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80074ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b0:	fab3 f383 	clz	r3, r3
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	005b      	lsls	r3, r3, #1
 80074b8:	6879      	ldr	r1, [r7, #4]
 80074ba:	fa01 f303 	lsl.w	r3, r1, r3
 80074be:	431a      	orrs	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80074c4:	bf00      	nop
 80074c6:	372c      	adds	r7, #44	@ 0x2c
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b08b      	sub	sp, #44	@ 0x2c
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	68da      	ldr	r2, [r3, #12]
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	fa93 f3a3 	rbit	r3, r3
 80074ea:	613b      	str	r3, [r7, #16]
  return result;
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80074f6:	2320      	movs	r3, #32
 80074f8:	e003      	b.n	8007502 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	fab3 f383 	clz	r3, r3
 8007500:	b2db      	uxtb	r3, r3
 8007502:	005b      	lsls	r3, r3, #1
 8007504:	2103      	movs	r1, #3
 8007506:	fa01 f303 	lsl.w	r3, r1, r3
 800750a:	43db      	mvns	r3, r3
 800750c:	401a      	ands	r2, r3
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	fa93 f3a3 	rbit	r3, r3
 8007518:	61fb      	str	r3, [r7, #28]
  return result;
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800751e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8007524:	2320      	movs	r3, #32
 8007526:	e003      	b.n	8007530 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8007528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752a:	fab3 f383 	clz	r3, r3
 800752e:	b2db      	uxtb	r3, r3
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	6879      	ldr	r1, [r7, #4]
 8007534:	fa01 f303 	lsl.w	r3, r1, r3
 8007538:	431a      	orrs	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	60da      	str	r2, [r3, #12]
}
 800753e:	bf00      	nop
 8007540:	372c      	adds	r7, #44	@ 0x2c
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800754a:	b480      	push	{r7}
 800754c:	b08b      	sub	sp, #44	@ 0x2c
 800754e:	af00      	add	r7, sp, #0
 8007550:	60f8      	str	r0, [r7, #12]
 8007552:	60b9      	str	r1, [r7, #8]
 8007554:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6a1a      	ldr	r2, [r3, #32]
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	fa93 f3a3 	rbit	r3, r3
 8007564:	613b      	str	r3, [r7, #16]
  return result;
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8007570:	2320      	movs	r3, #32
 8007572:	e003      	b.n	800757c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	fab3 f383 	clz	r3, r3
 800757a:	b2db      	uxtb	r3, r3
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	210f      	movs	r1, #15
 8007580:	fa01 f303 	lsl.w	r3, r1, r3
 8007584:	43db      	mvns	r3, r3
 8007586:	401a      	ands	r2, r3
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	fa93 f3a3 	rbit	r3, r3
 8007592:	61fb      	str	r3, [r7, #28]
  return result;
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800759e:	2320      	movs	r3, #32
 80075a0:	e003      	b.n	80075aa <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80075a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a4:	fab3 f383 	clz	r3, r3
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	6879      	ldr	r1, [r7, #4]
 80075ae:	fa01 f303 	lsl.w	r3, r1, r3
 80075b2:	431a      	orrs	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80075b8:	bf00      	nop
 80075ba:	372c      	adds	r7, #44	@ 0x2c
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b08b      	sub	sp, #44	@ 0x2c
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	0a1b      	lsrs	r3, r3, #8
 80075d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	fa93 f3a3 	rbit	r3, r3
 80075e0:	613b      	str	r3, [r7, #16]
  return result;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d101      	bne.n	80075f0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80075ec:	2320      	movs	r3, #32
 80075ee:	e003      	b.n	80075f8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	fab3 f383 	clz	r3, r3
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	210f      	movs	r1, #15
 80075fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007600:	43db      	mvns	r3, r3
 8007602:	401a      	ands	r2, r3
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	0a1b      	lsrs	r3, r3, #8
 8007608:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	fa93 f3a3 	rbit	r3, r3
 8007610:	61fb      	str	r3, [r7, #28]
  return result;
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007618:	2b00      	cmp	r3, #0
 800761a:	d101      	bne.n	8007620 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800761c:	2320      	movs	r3, #32
 800761e:	e003      	b.n	8007628 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8007620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007622:	fab3 f383 	clz	r3, r3
 8007626:	b2db      	uxtb	r3, r3
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	6879      	ldr	r1, [r7, #4]
 800762c:	fa01 f303 	lsl.w	r3, r1, r3
 8007630:	431a      	orrs	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8007636:	bf00      	nop
 8007638:	372c      	adds	r7, #44	@ 0x2c
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b088      	sub	sp, #32
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	fa93 f3a3 	rbit	r3, r3
 8007658:	60fb      	str	r3, [r7, #12]
  return result;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <LL_GPIO_Init+0x26>
    return 32U;
 8007664:	2320      	movs	r3, #32
 8007666:	e003      	b.n	8007670 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	fab3 f383 	clz	r3, r3
 800766e:	b2db      	uxtb	r3, r3
 8007670:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007672:	e047      	b.n	8007704 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	2101      	movs	r1, #1
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	fa01 f303 	lsl.w	r3, r1, r3
 8007680:	4013      	ands	r3, r2
 8007682:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d039      	beq.n	80076fe <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d003      	beq.n	800769a <LL_GPIO_Init+0x58>
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	2b02      	cmp	r3, #2
 8007698:	d10d      	bne.n	80076b6 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	461a      	mov	r2, r3
 80076a0:	69b9      	ldr	r1, [r7, #24]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7ff fed7 	bl	8007456 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	461a      	mov	r2, r3
 80076ae:	69b9      	ldr	r1, [r7, #24]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7ff feb8 	bl	8007426 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	461a      	mov	r2, r3
 80076bc:	69b9      	ldr	r1, [r7, #24]
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7ff ff06 	bl	80074d0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d111      	bne.n	80076f0 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	2bff      	cmp	r3, #255	@ 0xff
 80076d0:	d807      	bhi.n	80076e2 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	461a      	mov	r2, r3
 80076d8:	69b9      	ldr	r1, [r7, #24]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7ff ff35 	bl	800754a <LL_GPIO_SetAFPin_0_7>
 80076e0:	e006      	b.n	80076f0 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	461a      	mov	r2, r3
 80076e8:	69b9      	ldr	r1, [r7, #24]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7ff ff6a 	bl	80075c4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	461a      	mov	r2, r3
 80076f6:	69b9      	ldr	r1, [r7, #24]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff fe57 	bl	80073ac <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	3301      	adds	r3, #1
 8007702:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	fa22 f303 	lsr.w	r3, r2, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1b0      	bne.n	8007674 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3720      	adds	r7, #32
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007724:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007728:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007730:	b29a      	uxth	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	b29b      	uxth	r3, r3
 8007736:	43db      	mvns	r3, r3
 8007738:	b29b      	uxth	r3, r3
 800773a:	4013      	ands	r3, r2
 800773c:	b29a      	uxth	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007752:	b480      	push	{r7}
 8007754:	b085      	sub	sp, #20
 8007756:	af00      	add	r7, sp, #0
 8007758:	60f8      	str	r0, [r7, #12]
 800775a:	1d3b      	adds	r3, r7, #4
 800775c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2201      	movs	r2, #1
 8007764:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
	...

08007790 <pow>:
 8007790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007792:	ec55 4b11 	vmov	r4, r5, d1
 8007796:	ed2d 8b02 	vpush	{d8}
 800779a:	eeb0 8a40 	vmov.f32	s16, s0
 800779e:	eef0 8a60 	vmov.f32	s17, s1
 80077a2:	f000 fa91 	bl	8007cc8 <__ieee754_pow>
 80077a6:	4622      	mov	r2, r4
 80077a8:	462b      	mov	r3, r5
 80077aa:	4620      	mov	r0, r4
 80077ac:	4629      	mov	r1, r5
 80077ae:	ec57 6b10 	vmov	r6, r7, d0
 80077b2:	f7f9 f99f 	bl	8000af4 <__aeabi_dcmpun>
 80077b6:	2800      	cmp	r0, #0
 80077b8:	d13b      	bne.n	8007832 <pow+0xa2>
 80077ba:	2200      	movs	r2, #0
 80077bc:	2300      	movs	r3, #0
 80077be:	ec51 0b18 	vmov	r0, r1, d8
 80077c2:	f7f9 f965 	bl	8000a90 <__aeabi_dcmpeq>
 80077c6:	b1b8      	cbz	r0, 80077f8 <pow+0x68>
 80077c8:	2200      	movs	r2, #0
 80077ca:	2300      	movs	r3, #0
 80077cc:	4620      	mov	r0, r4
 80077ce:	4629      	mov	r1, r5
 80077d0:	f7f9 f95e 	bl	8000a90 <__aeabi_dcmpeq>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	d146      	bne.n	8007866 <pow+0xd6>
 80077d8:	ec45 4b10 	vmov	d0, r4, r5
 80077dc:	f000 f89c 	bl	8007918 <finite>
 80077e0:	b338      	cbz	r0, 8007832 <pow+0xa2>
 80077e2:	2200      	movs	r2, #0
 80077e4:	2300      	movs	r3, #0
 80077e6:	4620      	mov	r0, r4
 80077e8:	4629      	mov	r1, r5
 80077ea:	f7f9 f95b 	bl	8000aa4 <__aeabi_dcmplt>
 80077ee:	b300      	cbz	r0, 8007832 <pow+0xa2>
 80077f0:	f002 fce4 	bl	800a1bc <__errno>
 80077f4:	2322      	movs	r3, #34	@ 0x22
 80077f6:	e01b      	b.n	8007830 <pow+0xa0>
 80077f8:	ec47 6b10 	vmov	d0, r6, r7
 80077fc:	f000 f88c 	bl	8007918 <finite>
 8007800:	b9e0      	cbnz	r0, 800783c <pow+0xac>
 8007802:	eeb0 0a48 	vmov.f32	s0, s16
 8007806:	eef0 0a68 	vmov.f32	s1, s17
 800780a:	f000 f885 	bl	8007918 <finite>
 800780e:	b1a8      	cbz	r0, 800783c <pow+0xac>
 8007810:	ec45 4b10 	vmov	d0, r4, r5
 8007814:	f000 f880 	bl	8007918 <finite>
 8007818:	b180      	cbz	r0, 800783c <pow+0xac>
 800781a:	4632      	mov	r2, r6
 800781c:	463b      	mov	r3, r7
 800781e:	4630      	mov	r0, r6
 8007820:	4639      	mov	r1, r7
 8007822:	f7f9 f967 	bl	8000af4 <__aeabi_dcmpun>
 8007826:	2800      	cmp	r0, #0
 8007828:	d0e2      	beq.n	80077f0 <pow+0x60>
 800782a:	f002 fcc7 	bl	800a1bc <__errno>
 800782e:	2321      	movs	r3, #33	@ 0x21
 8007830:	6003      	str	r3, [r0, #0]
 8007832:	ecbd 8b02 	vpop	{d8}
 8007836:	ec47 6b10 	vmov	d0, r6, r7
 800783a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800783c:	2200      	movs	r2, #0
 800783e:	2300      	movs	r3, #0
 8007840:	4630      	mov	r0, r6
 8007842:	4639      	mov	r1, r7
 8007844:	f7f9 f924 	bl	8000a90 <__aeabi_dcmpeq>
 8007848:	2800      	cmp	r0, #0
 800784a:	d0f2      	beq.n	8007832 <pow+0xa2>
 800784c:	eeb0 0a48 	vmov.f32	s0, s16
 8007850:	eef0 0a68 	vmov.f32	s1, s17
 8007854:	f000 f860 	bl	8007918 <finite>
 8007858:	2800      	cmp	r0, #0
 800785a:	d0ea      	beq.n	8007832 <pow+0xa2>
 800785c:	ec45 4b10 	vmov	d0, r4, r5
 8007860:	f000 f85a 	bl	8007918 <finite>
 8007864:	e7c3      	b.n	80077ee <pow+0x5e>
 8007866:	2600      	movs	r6, #0
 8007868:	4f00      	ldr	r7, [pc, #0]	@ (800786c <pow+0xdc>)
 800786a:	e7e2      	b.n	8007832 <pow+0xa2>
 800786c:	3ff00000 	.word	0x3ff00000

08007870 <cos>:
 8007870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007872:	ec53 2b10 	vmov	r2, r3, d0
 8007876:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800787a:	4825      	ldr	r0, [pc, #148]	@ (8007910 <cos+0xa0>)
 800787c:	4281      	cmp	r1, r0
 800787e:	d806      	bhi.n	800788e <cos+0x1e>
 8007880:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8007908 <cos+0x98>
 8007884:	b005      	add	sp, #20
 8007886:	f85d eb04 	ldr.w	lr, [sp], #4
 800788a:	f000 b899 	b.w	80079c0 <__kernel_cos>
 800788e:	4821      	ldr	r0, [pc, #132]	@ (8007914 <cos+0xa4>)
 8007890:	4281      	cmp	r1, r0
 8007892:	d908      	bls.n	80078a6 <cos+0x36>
 8007894:	4610      	mov	r0, r2
 8007896:	4619      	mov	r1, r3
 8007898:	f7f8 fcda 	bl	8000250 <__aeabi_dsub>
 800789c:	ec41 0b10 	vmov	d0, r0, r1
 80078a0:	b005      	add	sp, #20
 80078a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80078a6:	4668      	mov	r0, sp
 80078a8:	f000 ff5a 	bl	8008760 <__ieee754_rem_pio2>
 80078ac:	f000 0003 	and.w	r0, r0, #3
 80078b0:	2801      	cmp	r0, #1
 80078b2:	d00b      	beq.n	80078cc <cos+0x5c>
 80078b4:	2802      	cmp	r0, #2
 80078b6:	d015      	beq.n	80078e4 <cos+0x74>
 80078b8:	b9d8      	cbnz	r0, 80078f2 <cos+0x82>
 80078ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 80078be:	ed9d 0b00 	vldr	d0, [sp]
 80078c2:	f000 f87d 	bl	80079c0 <__kernel_cos>
 80078c6:	ec51 0b10 	vmov	r0, r1, d0
 80078ca:	e7e7      	b.n	800789c <cos+0x2c>
 80078cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80078d0:	ed9d 0b00 	vldr	d0, [sp]
 80078d4:	f000 f93c 	bl	8007b50 <__kernel_sin>
 80078d8:	ec53 2b10 	vmov	r2, r3, d0
 80078dc:	4610      	mov	r0, r2
 80078de:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80078e2:	e7db      	b.n	800789c <cos+0x2c>
 80078e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80078e8:	ed9d 0b00 	vldr	d0, [sp]
 80078ec:	f000 f868 	bl	80079c0 <__kernel_cos>
 80078f0:	e7f2      	b.n	80078d8 <cos+0x68>
 80078f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80078f6:	ed9d 0b00 	vldr	d0, [sp]
 80078fa:	2001      	movs	r0, #1
 80078fc:	f000 f928 	bl	8007b50 <__kernel_sin>
 8007900:	e7e1      	b.n	80078c6 <cos+0x56>
 8007902:	bf00      	nop
 8007904:	f3af 8000 	nop.w
	...
 8007910:	3fe921fb 	.word	0x3fe921fb
 8007914:	7fefffff 	.word	0x7fefffff

08007918 <finite>:
 8007918:	b082      	sub	sp, #8
 800791a:	ed8d 0b00 	vstr	d0, [sp]
 800791e:	9801      	ldr	r0, [sp, #4]
 8007920:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8007924:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007928:	0fc0      	lsrs	r0, r0, #31
 800792a:	b002      	add	sp, #8
 800792c:	4770      	bx	lr
	...

08007930 <round>:
 8007930:	ec51 0b10 	vmov	r0, r1, d0
 8007934:	b570      	push	{r4, r5, r6, lr}
 8007936:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800793a:	460b      	mov	r3, r1
 800793c:	4605      	mov	r5, r0
 800793e:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8007942:	2a13      	cmp	r2, #19
 8007944:	dc1b      	bgt.n	800797e <round+0x4e>
 8007946:	2a00      	cmp	r2, #0
 8007948:	da0b      	bge.n	8007962 <round+0x32>
 800794a:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800794e:	3201      	adds	r2, #1
 8007950:	bf04      	itt	eq
 8007952:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8007956:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800795a:	2200      	movs	r2, #0
 800795c:	4619      	mov	r1, r3
 800795e:	4610      	mov	r0, r2
 8007960:	e015      	b.n	800798e <round+0x5e>
 8007962:	4c15      	ldr	r4, [pc, #84]	@ (80079b8 <round+0x88>)
 8007964:	4114      	asrs	r4, r2
 8007966:	ea04 0601 	and.w	r6, r4, r1
 800796a:	4306      	orrs	r6, r0
 800796c:	d00f      	beq.n	800798e <round+0x5e>
 800796e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8007972:	fa41 f202 	asr.w	r2, r1, r2
 8007976:	4413      	add	r3, r2
 8007978:	ea23 0304 	bic.w	r3, r3, r4
 800797c:	e7ed      	b.n	800795a <round+0x2a>
 800797e:	2a33      	cmp	r2, #51	@ 0x33
 8007980:	dd08      	ble.n	8007994 <round+0x64>
 8007982:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8007986:	d102      	bne.n	800798e <round+0x5e>
 8007988:	4602      	mov	r2, r0
 800798a:	f7f8 fc63 	bl	8000254 <__adddf3>
 800798e:	ec41 0b10 	vmov	d0, r0, r1
 8007992:	bd70      	pop	{r4, r5, r6, pc}
 8007994:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8007998:	f04f 34ff 	mov.w	r4, #4294967295
 800799c:	40f4      	lsrs	r4, r6
 800799e:	4204      	tst	r4, r0
 80079a0:	d0f5      	beq.n	800798e <round+0x5e>
 80079a2:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 80079a6:	2201      	movs	r2, #1
 80079a8:	408a      	lsls	r2, r1
 80079aa:	1952      	adds	r2, r2, r5
 80079ac:	bf28      	it	cs
 80079ae:	3301      	addcs	r3, #1
 80079b0:	ea22 0204 	bic.w	r2, r2, r4
 80079b4:	e7d2      	b.n	800795c <round+0x2c>
 80079b6:	bf00      	nop
 80079b8:	000fffff 	.word	0x000fffff
 80079bc:	00000000 	.word	0x00000000

080079c0 <__kernel_cos>:
 80079c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c4:	ec57 6b10 	vmov	r6, r7, d0
 80079c8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80079cc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80079d0:	ed8d 1b00 	vstr	d1, [sp]
 80079d4:	d206      	bcs.n	80079e4 <__kernel_cos+0x24>
 80079d6:	4630      	mov	r0, r6
 80079d8:	4639      	mov	r1, r7
 80079da:	f7f9 f8a1 	bl	8000b20 <__aeabi_d2iz>
 80079de:	2800      	cmp	r0, #0
 80079e0:	f000 8088 	beq.w	8007af4 <__kernel_cos+0x134>
 80079e4:	4632      	mov	r2, r6
 80079e6:	463b      	mov	r3, r7
 80079e8:	4630      	mov	r0, r6
 80079ea:	4639      	mov	r1, r7
 80079ec:	f7f8 fde8 	bl	80005c0 <__aeabi_dmul>
 80079f0:	4604      	mov	r4, r0
 80079f2:	460d      	mov	r5, r1
 80079f4:	2200      	movs	r2, #0
 80079f6:	4b50      	ldr	r3, [pc, #320]	@ (8007b38 <__kernel_cos+0x178>)
 80079f8:	f7f8 fde2 	bl	80005c0 <__aeabi_dmul>
 80079fc:	4682      	mov	sl, r0
 80079fe:	468b      	mov	fp, r1
 8007a00:	4620      	mov	r0, r4
 8007a02:	4629      	mov	r1, r5
 8007a04:	a33e      	add	r3, pc, #248	@ (adr r3, 8007b00 <__kernel_cos+0x140>)
 8007a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0a:	f7f8 fdd9 	bl	80005c0 <__aeabi_dmul>
 8007a0e:	a33e      	add	r3, pc, #248	@ (adr r3, 8007b08 <__kernel_cos+0x148>)
 8007a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a14:	f7f8 fc1e 	bl	8000254 <__adddf3>
 8007a18:	4622      	mov	r2, r4
 8007a1a:	462b      	mov	r3, r5
 8007a1c:	f7f8 fdd0 	bl	80005c0 <__aeabi_dmul>
 8007a20:	a33b      	add	r3, pc, #236	@ (adr r3, 8007b10 <__kernel_cos+0x150>)
 8007a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a26:	f7f8 fc13 	bl	8000250 <__aeabi_dsub>
 8007a2a:	4622      	mov	r2, r4
 8007a2c:	462b      	mov	r3, r5
 8007a2e:	f7f8 fdc7 	bl	80005c0 <__aeabi_dmul>
 8007a32:	a339      	add	r3, pc, #228	@ (adr r3, 8007b18 <__kernel_cos+0x158>)
 8007a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a38:	f7f8 fc0c 	bl	8000254 <__adddf3>
 8007a3c:	4622      	mov	r2, r4
 8007a3e:	462b      	mov	r3, r5
 8007a40:	f7f8 fdbe 	bl	80005c0 <__aeabi_dmul>
 8007a44:	a336      	add	r3, pc, #216	@ (adr r3, 8007b20 <__kernel_cos+0x160>)
 8007a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4a:	f7f8 fc01 	bl	8000250 <__aeabi_dsub>
 8007a4e:	4622      	mov	r2, r4
 8007a50:	462b      	mov	r3, r5
 8007a52:	f7f8 fdb5 	bl	80005c0 <__aeabi_dmul>
 8007a56:	a334      	add	r3, pc, #208	@ (adr r3, 8007b28 <__kernel_cos+0x168>)
 8007a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5c:	f7f8 fbfa 	bl	8000254 <__adddf3>
 8007a60:	4622      	mov	r2, r4
 8007a62:	462b      	mov	r3, r5
 8007a64:	f7f8 fdac 	bl	80005c0 <__aeabi_dmul>
 8007a68:	4622      	mov	r2, r4
 8007a6a:	462b      	mov	r3, r5
 8007a6c:	f7f8 fda8 	bl	80005c0 <__aeabi_dmul>
 8007a70:	4604      	mov	r4, r0
 8007a72:	460d      	mov	r5, r1
 8007a74:	4630      	mov	r0, r6
 8007a76:	4639      	mov	r1, r7
 8007a78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a7c:	f7f8 fda0 	bl	80005c0 <__aeabi_dmul>
 8007a80:	460b      	mov	r3, r1
 8007a82:	4602      	mov	r2, r0
 8007a84:	4629      	mov	r1, r5
 8007a86:	4620      	mov	r0, r4
 8007a88:	f7f8 fbe2 	bl	8000250 <__aeabi_dsub>
 8007a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8007b3c <__kernel_cos+0x17c>)
 8007a8e:	4606      	mov	r6, r0
 8007a90:	460f      	mov	r7, r1
 8007a92:	4598      	cmp	r8, r3
 8007a94:	d810      	bhi.n	8007ab8 <__kernel_cos+0xf8>
 8007a96:	4602      	mov	r2, r0
 8007a98:	460b      	mov	r3, r1
 8007a9a:	4650      	mov	r0, sl
 8007a9c:	4659      	mov	r1, fp
 8007a9e:	f7f8 fbd7 	bl	8000250 <__aeabi_dsub>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	4925      	ldr	r1, [pc, #148]	@ (8007b40 <__kernel_cos+0x180>)
 8007aaa:	f7f8 fbd1 	bl	8000250 <__aeabi_dsub>
 8007aae:	ec41 0b10 	vmov	d0, r0, r1
 8007ab2:	b003      	add	sp, #12
 8007ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab8:	4b22      	ldr	r3, [pc, #136]	@ (8007b44 <__kernel_cos+0x184>)
 8007aba:	2400      	movs	r4, #0
 8007abc:	2000      	movs	r0, #0
 8007abe:	4920      	ldr	r1, [pc, #128]	@ (8007b40 <__kernel_cos+0x180>)
 8007ac0:	4598      	cmp	r8, r3
 8007ac2:	4622      	mov	r2, r4
 8007ac4:	bf94      	ite	ls
 8007ac6:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8007aca:	4d1f      	ldrhi	r5, [pc, #124]	@ (8007b48 <__kernel_cos+0x188>)
 8007acc:	462b      	mov	r3, r5
 8007ace:	f7f8 fbbf 	bl	8000250 <__aeabi_dsub>
 8007ad2:	4622      	mov	r2, r4
 8007ad4:	4680      	mov	r8, r0
 8007ad6:	4689      	mov	r9, r1
 8007ad8:	462b      	mov	r3, r5
 8007ada:	4650      	mov	r0, sl
 8007adc:	4659      	mov	r1, fp
 8007ade:	f7f8 fbb7 	bl	8000250 <__aeabi_dsub>
 8007ae2:	4632      	mov	r2, r6
 8007ae4:	463b      	mov	r3, r7
 8007ae6:	f7f8 fbb3 	bl	8000250 <__aeabi_dsub>
 8007aea:	4602      	mov	r2, r0
 8007aec:	460b      	mov	r3, r1
 8007aee:	4640      	mov	r0, r8
 8007af0:	4649      	mov	r1, r9
 8007af2:	e7da      	b.n	8007aaa <__kernel_cos+0xea>
 8007af4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8007b30 <__kernel_cos+0x170>
 8007af8:	e7db      	b.n	8007ab2 <__kernel_cos+0xf2>
 8007afa:	bf00      	nop
 8007afc:	f3af 8000 	nop.w
 8007b00:	be8838d4 	.word	0xbe8838d4
 8007b04:	bda8fae9 	.word	0xbda8fae9
 8007b08:	bdb4b1c4 	.word	0xbdb4b1c4
 8007b0c:	3e21ee9e 	.word	0x3e21ee9e
 8007b10:	809c52ad 	.word	0x809c52ad
 8007b14:	3e927e4f 	.word	0x3e927e4f
 8007b18:	19cb1590 	.word	0x19cb1590
 8007b1c:	3efa01a0 	.word	0x3efa01a0
 8007b20:	16c15177 	.word	0x16c15177
 8007b24:	3f56c16c 	.word	0x3f56c16c
 8007b28:	5555554c 	.word	0x5555554c
 8007b2c:	3fa55555 	.word	0x3fa55555
 8007b30:	00000000 	.word	0x00000000
 8007b34:	3ff00000 	.word	0x3ff00000
 8007b38:	3fe00000 	.word	0x3fe00000
 8007b3c:	3fd33332 	.word	0x3fd33332
 8007b40:	3ff00000 	.word	0x3ff00000
 8007b44:	3fe90000 	.word	0x3fe90000
 8007b48:	3fd20000 	.word	0x3fd20000
 8007b4c:	00000000 	.word	0x00000000

08007b50 <__kernel_sin>:
 8007b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b54:	ec55 4b10 	vmov	r4, r5, d0
 8007b58:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007b5c:	b085      	sub	sp, #20
 8007b5e:	4680      	mov	r8, r0
 8007b60:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8007b64:	ed8d 1b02 	vstr	d1, [sp, #8]
 8007b68:	d205      	bcs.n	8007b76 <__kernel_sin+0x26>
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	4629      	mov	r1, r5
 8007b6e:	f7f8 ffd7 	bl	8000b20 <__aeabi_d2iz>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d052      	beq.n	8007c1c <__kernel_sin+0xcc>
 8007b76:	4622      	mov	r2, r4
 8007b78:	462b      	mov	r3, r5
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	4629      	mov	r1, r5
 8007b7e:	f7f8 fd1f 	bl	80005c0 <__aeabi_dmul>
 8007b82:	4682      	mov	sl, r0
 8007b84:	468b      	mov	fp, r1
 8007b86:	4602      	mov	r2, r0
 8007b88:	460b      	mov	r3, r1
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	4629      	mov	r1, r5
 8007b8e:	f7f8 fd17 	bl	80005c0 <__aeabi_dmul>
 8007b92:	a342      	add	r3, pc, #264	@ (adr r3, 8007c9c <__kernel_sin+0x14c>)
 8007b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b98:	e9cd 0100 	strd	r0, r1, [sp]
 8007b9c:	4650      	mov	r0, sl
 8007b9e:	4659      	mov	r1, fp
 8007ba0:	f7f8 fd0e 	bl	80005c0 <__aeabi_dmul>
 8007ba4:	a33f      	add	r3, pc, #252	@ (adr r3, 8007ca4 <__kernel_sin+0x154>)
 8007ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007baa:	f7f8 fb51 	bl	8000250 <__aeabi_dsub>
 8007bae:	4652      	mov	r2, sl
 8007bb0:	465b      	mov	r3, fp
 8007bb2:	f7f8 fd05 	bl	80005c0 <__aeabi_dmul>
 8007bb6:	a33d      	add	r3, pc, #244	@ (adr r3, 8007cac <__kernel_sin+0x15c>)
 8007bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbc:	f7f8 fb4a 	bl	8000254 <__adddf3>
 8007bc0:	4652      	mov	r2, sl
 8007bc2:	465b      	mov	r3, fp
 8007bc4:	f7f8 fcfc 	bl	80005c0 <__aeabi_dmul>
 8007bc8:	a33a      	add	r3, pc, #232	@ (adr r3, 8007cb4 <__kernel_sin+0x164>)
 8007bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bce:	f7f8 fb3f 	bl	8000250 <__aeabi_dsub>
 8007bd2:	4652      	mov	r2, sl
 8007bd4:	465b      	mov	r3, fp
 8007bd6:	f7f8 fcf3 	bl	80005c0 <__aeabi_dmul>
 8007bda:	a338      	add	r3, pc, #224	@ (adr r3, 8007cbc <__kernel_sin+0x16c>)
 8007bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be0:	f7f8 fb38 	bl	8000254 <__adddf3>
 8007be4:	4606      	mov	r6, r0
 8007be6:	460f      	mov	r7, r1
 8007be8:	f1b8 0f00 	cmp.w	r8, #0
 8007bec:	d11b      	bne.n	8007c26 <__kernel_sin+0xd6>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	4650      	mov	r0, sl
 8007bf4:	4659      	mov	r1, fp
 8007bf6:	f7f8 fce3 	bl	80005c0 <__aeabi_dmul>
 8007bfa:	a325      	add	r3, pc, #148	@ (adr r3, 8007c90 <__kernel_sin+0x140>)
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	f7f8 fb26 	bl	8000250 <__aeabi_dsub>
 8007c04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c08:	f7f8 fcda 	bl	80005c0 <__aeabi_dmul>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	460b      	mov	r3, r1
 8007c10:	4620      	mov	r0, r4
 8007c12:	4629      	mov	r1, r5
 8007c14:	f7f8 fb1e 	bl	8000254 <__adddf3>
 8007c18:	4604      	mov	r4, r0
 8007c1a:	460d      	mov	r5, r1
 8007c1c:	ec45 4b10 	vmov	d0, r4, r5
 8007c20:	b005      	add	sp, #20
 8007c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c26:	2200      	movs	r2, #0
 8007c28:	4b1b      	ldr	r3, [pc, #108]	@ (8007c98 <__kernel_sin+0x148>)
 8007c2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c2e:	f7f8 fcc7 	bl	80005c0 <__aeabi_dmul>
 8007c32:	4680      	mov	r8, r0
 8007c34:	4689      	mov	r9, r1
 8007c36:	4632      	mov	r2, r6
 8007c38:	463b      	mov	r3, r7
 8007c3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c3e:	f7f8 fcbf 	bl	80005c0 <__aeabi_dmul>
 8007c42:	4602      	mov	r2, r0
 8007c44:	460b      	mov	r3, r1
 8007c46:	4640      	mov	r0, r8
 8007c48:	4649      	mov	r1, r9
 8007c4a:	f7f8 fb01 	bl	8000250 <__aeabi_dsub>
 8007c4e:	4652      	mov	r2, sl
 8007c50:	465b      	mov	r3, fp
 8007c52:	f7f8 fcb5 	bl	80005c0 <__aeabi_dmul>
 8007c56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c5a:	f7f8 faf9 	bl	8000250 <__aeabi_dsub>
 8007c5e:	4606      	mov	r6, r0
 8007c60:	460f      	mov	r7, r1
 8007c62:	a30b      	add	r3, pc, #44	@ (adr r3, 8007c90 <__kernel_sin+0x140>)
 8007c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c6c:	f7f8 fca8 	bl	80005c0 <__aeabi_dmul>
 8007c70:	4602      	mov	r2, r0
 8007c72:	460b      	mov	r3, r1
 8007c74:	4630      	mov	r0, r6
 8007c76:	4639      	mov	r1, r7
 8007c78:	f7f8 faec 	bl	8000254 <__adddf3>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	460b      	mov	r3, r1
 8007c80:	4620      	mov	r0, r4
 8007c82:	4629      	mov	r1, r5
 8007c84:	f7f8 fae4 	bl	8000250 <__aeabi_dsub>
 8007c88:	e7c6      	b.n	8007c18 <__kernel_sin+0xc8>
 8007c8a:	bf00      	nop
 8007c8c:	f3af 8000 	nop.w
 8007c90:	55555549 	.word	0x55555549
 8007c94:	3fc55555 	.word	0x3fc55555
 8007c98:	3fe00000 	.word	0x3fe00000
 8007c9c:	5acfd57c 	.word	0x5acfd57c
 8007ca0:	3de5d93a 	.word	0x3de5d93a
 8007ca4:	8a2b9ceb 	.word	0x8a2b9ceb
 8007ca8:	3e5ae5e6 	.word	0x3e5ae5e6
 8007cac:	57b1fe7d 	.word	0x57b1fe7d
 8007cb0:	3ec71de3 	.word	0x3ec71de3
 8007cb4:	19c161d5 	.word	0x19c161d5
 8007cb8:	3f2a01a0 	.word	0x3f2a01a0
 8007cbc:	1110f8a6 	.word	0x1110f8a6
 8007cc0:	3f811111 	.word	0x3f811111
 8007cc4:	00000000 	.word	0x00000000

08007cc8 <__ieee754_pow>:
 8007cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ccc:	b091      	sub	sp, #68	@ 0x44
 8007cce:	ed8d 1b00 	vstr	d1, [sp]
 8007cd2:	e9dd 1900 	ldrd	r1, r9, [sp]
 8007cd6:	ec57 6b10 	vmov	r6, r7, d0
 8007cda:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8007cde:	ea5a 0001 	orrs.w	r0, sl, r1
 8007ce2:	d113      	bne.n	8007d0c <__ieee754_pow+0x44>
 8007ce4:	19b3      	adds	r3, r6, r6
 8007ce6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8007cea:	4152      	adcs	r2, r2
 8007cec:	4298      	cmp	r0, r3
 8007cee:	4b9a      	ldr	r3, [pc, #616]	@ (8007f58 <__ieee754_pow+0x290>)
 8007cf0:	4193      	sbcs	r3, r2
 8007cf2:	f080 84ef 	bcs.w	80086d4 <__ieee754_pow+0xa0c>
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	4639      	mov	r1, r7
 8007cfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cfe:	f7f8 faa9 	bl	8000254 <__adddf3>
 8007d02:	ec41 0b10 	vmov	d0, r0, r1
 8007d06:	b011      	add	sp, #68	@ 0x44
 8007d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d0c:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8007d10:	4a92      	ldr	r2, [pc, #584]	@ (8007f5c <__ieee754_pow+0x294>)
 8007d12:	46b8      	mov	r8, r7
 8007d14:	4633      	mov	r3, r6
 8007d16:	4295      	cmp	r5, r2
 8007d18:	d80a      	bhi.n	8007d30 <__ieee754_pow+0x68>
 8007d1a:	d104      	bne.n	8007d26 <__ieee754_pow+0x5e>
 8007d1c:	2e00      	cmp	r6, #0
 8007d1e:	d1ea      	bne.n	8007cf6 <__ieee754_pow+0x2e>
 8007d20:	45aa      	cmp	sl, r5
 8007d22:	d8e8      	bhi.n	8007cf6 <__ieee754_pow+0x2e>
 8007d24:	e001      	b.n	8007d2a <__ieee754_pow+0x62>
 8007d26:	4592      	cmp	sl, r2
 8007d28:	d802      	bhi.n	8007d30 <__ieee754_pow+0x68>
 8007d2a:	4592      	cmp	sl, r2
 8007d2c:	d10f      	bne.n	8007d4e <__ieee754_pow+0x86>
 8007d2e:	b171      	cbz	r1, 8007d4e <__ieee754_pow+0x86>
 8007d30:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8007d34:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007d38:	ea58 0803 	orrs.w	r8, r8, r3
 8007d3c:	d1db      	bne.n	8007cf6 <__ieee754_pow+0x2e>
 8007d3e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007d42:	18db      	adds	r3, r3, r3
 8007d44:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007d48:	4152      	adcs	r2, r2
 8007d4a:	4598      	cmp	r8, r3
 8007d4c:	e7cf      	b.n	8007cee <__ieee754_pow+0x26>
 8007d4e:	f1b8 0f00 	cmp.w	r8, #0
 8007d52:	46ab      	mov	fp, r5
 8007d54:	da43      	bge.n	8007dde <__ieee754_pow+0x116>
 8007d56:	4a82      	ldr	r2, [pc, #520]	@ (8007f60 <__ieee754_pow+0x298>)
 8007d58:	4592      	cmp	sl, r2
 8007d5a:	d856      	bhi.n	8007e0a <__ieee754_pow+0x142>
 8007d5c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8007d60:	4592      	cmp	sl, r2
 8007d62:	f240 84c6 	bls.w	80086f2 <__ieee754_pow+0xa2a>
 8007d66:	ea4f 522a 	mov.w	r2, sl, asr #20
 8007d6a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007d6e:	2a14      	cmp	r2, #20
 8007d70:	dd18      	ble.n	8007da4 <__ieee754_pow+0xdc>
 8007d72:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8007d76:	fa21 f402 	lsr.w	r4, r1, r2
 8007d7a:	fa04 f202 	lsl.w	r2, r4, r2
 8007d7e:	428a      	cmp	r2, r1
 8007d80:	f040 84b7 	bne.w	80086f2 <__ieee754_pow+0xa2a>
 8007d84:	f004 0401 	and.w	r4, r4, #1
 8007d88:	f1c4 0402 	rsb	r4, r4, #2
 8007d8c:	2900      	cmp	r1, #0
 8007d8e:	d159      	bne.n	8007e44 <__ieee754_pow+0x17c>
 8007d90:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8007d94:	d148      	bne.n	8007e28 <__ieee754_pow+0x160>
 8007d96:	4632      	mov	r2, r6
 8007d98:	463b      	mov	r3, r7
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	4639      	mov	r1, r7
 8007d9e:	f7f8 fc0f 	bl	80005c0 <__aeabi_dmul>
 8007da2:	e7ae      	b.n	8007d02 <__ieee754_pow+0x3a>
 8007da4:	2900      	cmp	r1, #0
 8007da6:	d14c      	bne.n	8007e42 <__ieee754_pow+0x17a>
 8007da8:	f1c2 0214 	rsb	r2, r2, #20
 8007dac:	fa4a f402 	asr.w	r4, sl, r2
 8007db0:	fa04 f202 	lsl.w	r2, r4, r2
 8007db4:	4552      	cmp	r2, sl
 8007db6:	f040 8499 	bne.w	80086ec <__ieee754_pow+0xa24>
 8007dba:	f004 0401 	and.w	r4, r4, #1
 8007dbe:	f1c4 0402 	rsb	r4, r4, #2
 8007dc2:	4a68      	ldr	r2, [pc, #416]	@ (8007f64 <__ieee754_pow+0x29c>)
 8007dc4:	4592      	cmp	sl, r2
 8007dc6:	d1e3      	bne.n	8007d90 <__ieee754_pow+0xc8>
 8007dc8:	f1b9 0f00 	cmp.w	r9, #0
 8007dcc:	f280 848a 	bge.w	80086e4 <__ieee754_pow+0xa1c>
 8007dd0:	4632      	mov	r2, r6
 8007dd2:	463b      	mov	r3, r7
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	4963      	ldr	r1, [pc, #396]	@ (8007f64 <__ieee754_pow+0x29c>)
 8007dd8:	f7f8 fd1c 	bl	8000814 <__aeabi_ddiv>
 8007ddc:	e791      	b.n	8007d02 <__ieee754_pow+0x3a>
 8007dde:	2400      	movs	r4, #0
 8007de0:	bb81      	cbnz	r1, 8007e44 <__ieee754_pow+0x17c>
 8007de2:	4a5e      	ldr	r2, [pc, #376]	@ (8007f5c <__ieee754_pow+0x294>)
 8007de4:	4592      	cmp	sl, r2
 8007de6:	d1ec      	bne.n	8007dc2 <__ieee754_pow+0xfa>
 8007de8:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8007dec:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8007df0:	431a      	orrs	r2, r3
 8007df2:	f000 846f 	beq.w	80086d4 <__ieee754_pow+0xa0c>
 8007df6:	4b5c      	ldr	r3, [pc, #368]	@ (8007f68 <__ieee754_pow+0x2a0>)
 8007df8:	429d      	cmp	r5, r3
 8007dfa:	d908      	bls.n	8007e0e <__ieee754_pow+0x146>
 8007dfc:	f1b9 0f00 	cmp.w	r9, #0
 8007e00:	f280 846c 	bge.w	80086dc <__ieee754_pow+0xa14>
 8007e04:	2000      	movs	r0, #0
 8007e06:	2100      	movs	r1, #0
 8007e08:	e77b      	b.n	8007d02 <__ieee754_pow+0x3a>
 8007e0a:	2402      	movs	r4, #2
 8007e0c:	e7e8      	b.n	8007de0 <__ieee754_pow+0x118>
 8007e0e:	f1b9 0f00 	cmp.w	r9, #0
 8007e12:	f04f 0000 	mov.w	r0, #0
 8007e16:	f04f 0100 	mov.w	r1, #0
 8007e1a:	f6bf af72 	bge.w	8007d02 <__ieee754_pow+0x3a>
 8007e1e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007e22:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007e26:	e76c      	b.n	8007d02 <__ieee754_pow+0x3a>
 8007e28:	4a50      	ldr	r2, [pc, #320]	@ (8007f6c <__ieee754_pow+0x2a4>)
 8007e2a:	4591      	cmp	r9, r2
 8007e2c:	d10a      	bne.n	8007e44 <__ieee754_pow+0x17c>
 8007e2e:	f1b8 0f00 	cmp.w	r8, #0
 8007e32:	db07      	blt.n	8007e44 <__ieee754_pow+0x17c>
 8007e34:	ec47 6b10 	vmov	d0, r6, r7
 8007e38:	b011      	add	sp, #68	@ 0x44
 8007e3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3e:	f000 bf4b 	b.w	8008cd8 <__ieee754_sqrt>
 8007e42:	2400      	movs	r4, #0
 8007e44:	9302      	str	r3, [sp, #8]
 8007e46:	ec47 6b10 	vmov	d0, r6, r7
 8007e4a:	f000 fe85 	bl	8008b58 <fabs>
 8007e4e:	9b02      	ldr	r3, [sp, #8]
 8007e50:	ec51 0b10 	vmov	r0, r1, d0
 8007e54:	bb43      	cbnz	r3, 8007ea8 <__ieee754_pow+0x1e0>
 8007e56:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8007e5a:	4b42      	ldr	r3, [pc, #264]	@ (8007f64 <__ieee754_pow+0x29c>)
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d000      	beq.n	8007e62 <__ieee754_pow+0x19a>
 8007e60:	bb15      	cbnz	r5, 8007ea8 <__ieee754_pow+0x1e0>
 8007e62:	f1b9 0f00 	cmp.w	r9, #0
 8007e66:	da05      	bge.n	8007e74 <__ieee754_pow+0x1ac>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	493d      	ldr	r1, [pc, #244]	@ (8007f64 <__ieee754_pow+0x29c>)
 8007e70:	f7f8 fcd0 	bl	8000814 <__aeabi_ddiv>
 8007e74:	f1b8 0f00 	cmp.w	r8, #0
 8007e78:	f6bf af43 	bge.w	8007d02 <__ieee754_pow+0x3a>
 8007e7c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007e80:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007e84:	4325      	orrs	r5, r4
 8007e86:	d108      	bne.n	8007e9a <__ieee754_pow+0x1d2>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	4610      	mov	r0, r2
 8007e8e:	4619      	mov	r1, r3
 8007e90:	f7f8 f9de 	bl	8000250 <__aeabi_dsub>
 8007e94:	4602      	mov	r2, r0
 8007e96:	460b      	mov	r3, r1
 8007e98:	e79e      	b.n	8007dd8 <__ieee754_pow+0x110>
 8007e9a:	2c01      	cmp	r4, #1
 8007e9c:	f47f af31 	bne.w	8007d02 <__ieee754_pow+0x3a>
 8007ea0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	e72c      	b.n	8007d02 <__ieee754_pow+0x3a>
 8007ea8:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8007eac:	3b01      	subs	r3, #1
 8007eae:	ea53 0204 	orrs.w	r2, r3, r4
 8007eb2:	d102      	bne.n	8007eba <__ieee754_pow+0x1f2>
 8007eb4:	4632      	mov	r2, r6
 8007eb6:	463b      	mov	r3, r7
 8007eb8:	e7e8      	b.n	8007e8c <__ieee754_pow+0x1c4>
 8007eba:	3c01      	subs	r4, #1
 8007ebc:	431c      	orrs	r4, r3
 8007ebe:	d016      	beq.n	8007eee <__ieee754_pow+0x226>
 8007ec0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007f48 <__ieee754_pow+0x280>
 8007ec4:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8007ec8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ecc:	f240 8110 	bls.w	80080f0 <__ieee754_pow+0x428>
 8007ed0:	4b27      	ldr	r3, [pc, #156]	@ (8007f70 <__ieee754_pow+0x2a8>)
 8007ed2:	459a      	cmp	sl, r3
 8007ed4:	4b24      	ldr	r3, [pc, #144]	@ (8007f68 <__ieee754_pow+0x2a0>)
 8007ed6:	d916      	bls.n	8007f06 <__ieee754_pow+0x23e>
 8007ed8:	429d      	cmp	r5, r3
 8007eda:	d80b      	bhi.n	8007ef4 <__ieee754_pow+0x22c>
 8007edc:	f1b9 0f00 	cmp.w	r9, #0
 8007ee0:	da0b      	bge.n	8007efa <__ieee754_pow+0x232>
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	b011      	add	sp, #68	@ 0x44
 8007ee6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eea:	f000 beed 	b.w	8008cc8 <__math_oflow>
 8007eee:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8007f50 <__ieee754_pow+0x288>
 8007ef2:	e7e7      	b.n	8007ec4 <__ieee754_pow+0x1fc>
 8007ef4:	f1b9 0f00 	cmp.w	r9, #0
 8007ef8:	dcf3      	bgt.n	8007ee2 <__ieee754_pow+0x21a>
 8007efa:	2000      	movs	r0, #0
 8007efc:	b011      	add	sp, #68	@ 0x44
 8007efe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f02:	f000 bed9 	b.w	8008cb8 <__math_uflow>
 8007f06:	429d      	cmp	r5, r3
 8007f08:	d20c      	bcs.n	8007f24 <__ieee754_pow+0x25c>
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f12:	f7f8 fdc7 	bl	8000aa4 <__aeabi_dcmplt>
 8007f16:	3800      	subs	r0, #0
 8007f18:	bf18      	it	ne
 8007f1a:	2001      	movne	r0, #1
 8007f1c:	f1b9 0f00 	cmp.w	r9, #0
 8007f20:	daec      	bge.n	8007efc <__ieee754_pow+0x234>
 8007f22:	e7df      	b.n	8007ee4 <__ieee754_pow+0x21c>
 8007f24:	4b0f      	ldr	r3, [pc, #60]	@ (8007f64 <__ieee754_pow+0x29c>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	429d      	cmp	r5, r3
 8007f2a:	d923      	bls.n	8007f74 <__ieee754_pow+0x2ac>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f32:	f7f8 fdb7 	bl	8000aa4 <__aeabi_dcmplt>
 8007f36:	3800      	subs	r0, #0
 8007f38:	bf18      	it	ne
 8007f3a:	2001      	movne	r0, #1
 8007f3c:	f1b9 0f00 	cmp.w	r9, #0
 8007f40:	dcd0      	bgt.n	8007ee4 <__ieee754_pow+0x21c>
 8007f42:	e7db      	b.n	8007efc <__ieee754_pow+0x234>
 8007f44:	f3af 8000 	nop.w
 8007f48:	00000000 	.word	0x00000000
 8007f4c:	3ff00000 	.word	0x3ff00000
 8007f50:	00000000 	.word	0x00000000
 8007f54:	bff00000 	.word	0xbff00000
 8007f58:	fff00000 	.word	0xfff00000
 8007f5c:	7ff00000 	.word	0x7ff00000
 8007f60:	433fffff 	.word	0x433fffff
 8007f64:	3ff00000 	.word	0x3ff00000
 8007f68:	3fefffff 	.word	0x3fefffff
 8007f6c:	3fe00000 	.word	0x3fe00000
 8007f70:	43f00000 	.word	0x43f00000
 8007f74:	4b5a      	ldr	r3, [pc, #360]	@ (80080e0 <__ieee754_pow+0x418>)
 8007f76:	f7f8 f96b 	bl	8000250 <__aeabi_dsub>
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	460d      	mov	r5, r1
 8007f7e:	a350      	add	r3, pc, #320	@ (adr r3, 80080c0 <__ieee754_pow+0x3f8>)
 8007f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f84:	f7f8 fb1c 	bl	80005c0 <__aeabi_dmul>
 8007f88:	4606      	mov	r6, r0
 8007f8a:	460f      	mov	r7, r1
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	4629      	mov	r1, r5
 8007f90:	a34d      	add	r3, pc, #308	@ (adr r3, 80080c8 <__ieee754_pow+0x400>)
 8007f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f96:	f7f8 fb13 	bl	80005c0 <__aeabi_dmul>
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	4682      	mov	sl, r0
 8007f9e:	468b      	mov	fp, r1
 8007fa0:	4b50      	ldr	r3, [pc, #320]	@ (80080e4 <__ieee754_pow+0x41c>)
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	4629      	mov	r1, r5
 8007fa6:	f7f8 fb0b 	bl	80005c0 <__aeabi_dmul>
 8007faa:	4602      	mov	r2, r0
 8007fac:	460b      	mov	r3, r1
 8007fae:	a148      	add	r1, pc, #288	@ (adr r1, 80080d0 <__ieee754_pow+0x408>)
 8007fb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fb4:	f7f8 f94c 	bl	8000250 <__aeabi_dsub>
 8007fb8:	4622      	mov	r2, r4
 8007fba:	462b      	mov	r3, r5
 8007fbc:	f7f8 fb00 	bl	80005c0 <__aeabi_dmul>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	4948      	ldr	r1, [pc, #288]	@ (80080e8 <__ieee754_pow+0x420>)
 8007fc8:	f7f8 f942 	bl	8000250 <__aeabi_dsub>
 8007fcc:	4680      	mov	r8, r0
 8007fce:	4689      	mov	r9, r1
 8007fd0:	4622      	mov	r2, r4
 8007fd2:	462b      	mov	r3, r5
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	4629      	mov	r1, r5
 8007fd8:	2400      	movs	r4, #0
 8007fda:	f7f8 faf1 	bl	80005c0 <__aeabi_dmul>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4640      	mov	r0, r8
 8007fe4:	4649      	mov	r1, r9
 8007fe6:	f7f8 faeb 	bl	80005c0 <__aeabi_dmul>
 8007fea:	a33b      	add	r3, pc, #236	@ (adr r3, 80080d8 <__ieee754_pow+0x410>)
 8007fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff0:	f7f8 fae6 	bl	80005c0 <__aeabi_dmul>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	4650      	mov	r0, sl
 8007ffa:	4659      	mov	r1, fp
 8007ffc:	f7f8 f928 	bl	8000250 <__aeabi_dsub>
 8008000:	4602      	mov	r2, r0
 8008002:	460b      	mov	r3, r1
 8008004:	4680      	mov	r8, r0
 8008006:	4689      	mov	r9, r1
 8008008:	4630      	mov	r0, r6
 800800a:	4639      	mov	r1, r7
 800800c:	f7f8 f922 	bl	8000254 <__adddf3>
 8008010:	4632      	mov	r2, r6
 8008012:	463b      	mov	r3, r7
 8008014:	4620      	mov	r0, r4
 8008016:	460d      	mov	r5, r1
 8008018:	f7f8 f91a 	bl	8000250 <__aeabi_dsub>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	4640      	mov	r0, r8
 8008022:	4649      	mov	r1, r9
 8008024:	f7f8 f914 	bl	8000250 <__aeabi_dsub>
 8008028:	4606      	mov	r6, r0
 800802a:	460f      	mov	r7, r1
 800802c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008030:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008034:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008038:	2300      	movs	r3, #0
 800803a:	9304      	str	r3, [sp, #16]
 800803c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008040:	465b      	mov	r3, fp
 8008042:	4652      	mov	r2, sl
 8008044:	f7f8 f904 	bl	8000250 <__aeabi_dsub>
 8008048:	4622      	mov	r2, r4
 800804a:	462b      	mov	r3, r5
 800804c:	f7f8 fab8 	bl	80005c0 <__aeabi_dmul>
 8008050:	4680      	mov	r8, r0
 8008052:	4689      	mov	r9, r1
 8008054:	4630      	mov	r0, r6
 8008056:	4639      	mov	r1, r7
 8008058:	e9dd 2300 	ldrd	r2, r3, [sp]
 800805c:	f7f8 fab0 	bl	80005c0 <__aeabi_dmul>
 8008060:	4602      	mov	r2, r0
 8008062:	460b      	mov	r3, r1
 8008064:	4640      	mov	r0, r8
 8008066:	4649      	mov	r1, r9
 8008068:	f7f8 f8f4 	bl	8000254 <__adddf3>
 800806c:	4606      	mov	r6, r0
 800806e:	460f      	mov	r7, r1
 8008070:	465b      	mov	r3, fp
 8008072:	4652      	mov	r2, sl
 8008074:	4620      	mov	r0, r4
 8008076:	4629      	mov	r1, r5
 8008078:	f7f8 faa2 	bl	80005c0 <__aeabi_dmul>
 800807c:	460b      	mov	r3, r1
 800807e:	4602      	mov	r2, r0
 8008080:	4680      	mov	r8, r0
 8008082:	4689      	mov	r9, r1
 8008084:	4630      	mov	r0, r6
 8008086:	4639      	mov	r1, r7
 8008088:	f7f8 f8e4 	bl	8000254 <__adddf3>
 800808c:	4b17      	ldr	r3, [pc, #92]	@ (80080ec <__ieee754_pow+0x424>)
 800808e:	4604      	mov	r4, r0
 8008090:	460d      	mov	r5, r1
 8008092:	4299      	cmp	r1, r3
 8008094:	468b      	mov	fp, r1
 8008096:	f340 820b 	ble.w	80084b0 <__ieee754_pow+0x7e8>
 800809a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800809e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80080a2:	4303      	orrs	r3, r0
 80080a4:	f000 81ea 	beq.w	800847c <__ieee754_pow+0x7b4>
 80080a8:	2200      	movs	r2, #0
 80080aa:	2300      	movs	r3, #0
 80080ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080b0:	f7f8 fcf8 	bl	8000aa4 <__aeabi_dcmplt>
 80080b4:	3800      	subs	r0, #0
 80080b6:	bf18      	it	ne
 80080b8:	2001      	movne	r0, #1
 80080ba:	e713      	b.n	8007ee4 <__ieee754_pow+0x21c>
 80080bc:	f3af 8000 	nop.w
 80080c0:	60000000 	.word	0x60000000
 80080c4:	3ff71547 	.word	0x3ff71547
 80080c8:	f85ddf44 	.word	0xf85ddf44
 80080cc:	3e54ae0b 	.word	0x3e54ae0b
 80080d0:	55555555 	.word	0x55555555
 80080d4:	3fd55555 	.word	0x3fd55555
 80080d8:	652b82fe 	.word	0x652b82fe
 80080dc:	3ff71547 	.word	0x3ff71547
 80080e0:	3ff00000 	.word	0x3ff00000
 80080e4:	3fd00000 	.word	0x3fd00000
 80080e8:	3fe00000 	.word	0x3fe00000
 80080ec:	408fffff 	.word	0x408fffff
 80080f0:	4bd5      	ldr	r3, [pc, #852]	@ (8008448 <__ieee754_pow+0x780>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	ea08 0303 	and.w	r3, r8, r3
 80080f8:	b92b      	cbnz	r3, 8008106 <__ieee754_pow+0x43e>
 80080fa:	4bd4      	ldr	r3, [pc, #848]	@ (800844c <__ieee754_pow+0x784>)
 80080fc:	f7f8 fa60 	bl	80005c0 <__aeabi_dmul>
 8008100:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8008104:	468b      	mov	fp, r1
 8008106:	ea4f 532b 	mov.w	r3, fp, asr #20
 800810a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800810e:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008112:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8008116:	4413      	add	r3, r2
 8008118:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800811c:	930a      	str	r3, [sp, #40]	@ 0x28
 800811e:	4bcc      	ldr	r3, [pc, #816]	@ (8008450 <__ieee754_pow+0x788>)
 8008120:	459b      	cmp	fp, r3
 8008122:	dd08      	ble.n	8008136 <__ieee754_pow+0x46e>
 8008124:	4bcb      	ldr	r3, [pc, #812]	@ (8008454 <__ieee754_pow+0x78c>)
 8008126:	459b      	cmp	fp, r3
 8008128:	f340 81a5 	ble.w	8008476 <__ieee754_pow+0x7ae>
 800812c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800812e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008132:	3301      	adds	r3, #1
 8008134:	930a      	str	r3, [sp, #40]	@ 0x28
 8008136:	f04f 0a00 	mov.w	sl, #0
 800813a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800813e:	4629      	mov	r1, r5
 8008140:	106d      	asrs	r5, r5, #1
 8008142:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008144:	4bc4      	ldr	r3, [pc, #784]	@ (8008458 <__ieee754_pow+0x790>)
 8008146:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800814a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800814e:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008152:	ed93 7b00 	vldr	d7, [r3]
 8008156:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800815a:	ec53 2b17 	vmov	r2, r3, d7
 800815e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008162:	f7f8 f875 	bl	8000250 <__aeabi_dsub>
 8008166:	4606      	mov	r6, r0
 8008168:	460f      	mov	r7, r1
 800816a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800816e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008172:	f7f8 f86f 	bl	8000254 <__adddf3>
 8008176:	4602      	mov	r2, r0
 8008178:	460b      	mov	r3, r1
 800817a:	2000      	movs	r0, #0
 800817c:	49b7      	ldr	r1, [pc, #732]	@ (800845c <__ieee754_pow+0x794>)
 800817e:	f7f8 fb49 	bl	8000814 <__aeabi_ddiv>
 8008182:	4602      	mov	r2, r0
 8008184:	460b      	mov	r3, r1
 8008186:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800818a:	4630      	mov	r0, r6
 800818c:	4639      	mov	r1, r7
 800818e:	f7f8 fa17 	bl	80005c0 <__aeabi_dmul>
 8008192:	2200      	movs	r2, #0
 8008194:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008198:	4614      	mov	r4, r2
 800819a:	461d      	mov	r5, r3
 800819c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081a0:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80081a4:	f04f 0b00 	mov.w	fp, #0
 80081a8:	4661      	mov	r1, ip
 80081aa:	46e1      	mov	r9, ip
 80081ac:	4658      	mov	r0, fp
 80081ae:	46d8      	mov	r8, fp
 80081b0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80081b4:	f7f8 fa04 	bl	80005c0 <__aeabi_dmul>
 80081b8:	4602      	mov	r2, r0
 80081ba:	460b      	mov	r3, r1
 80081bc:	4630      	mov	r0, r6
 80081be:	4639      	mov	r1, r7
 80081c0:	f7f8 f846 	bl	8000250 <__aeabi_dsub>
 80081c4:	4606      	mov	r6, r0
 80081c6:	460f      	mov	r7, r1
 80081c8:	4620      	mov	r0, r4
 80081ca:	4629      	mov	r1, r5
 80081cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081d0:	f7f8 f83e 	bl	8000250 <__aeabi_dsub>
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80081dc:	f7f8 f838 	bl	8000250 <__aeabi_dsub>
 80081e0:	465a      	mov	r2, fp
 80081e2:	464b      	mov	r3, r9
 80081e4:	f7f8 f9ec 	bl	80005c0 <__aeabi_dmul>
 80081e8:	4602      	mov	r2, r0
 80081ea:	460b      	mov	r3, r1
 80081ec:	4630      	mov	r0, r6
 80081ee:	4639      	mov	r1, r7
 80081f0:	f7f8 f82e 	bl	8000250 <__aeabi_dsub>
 80081f4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80081f8:	f7f8 f9e2 	bl	80005c0 <__aeabi_dmul>
 80081fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008200:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008204:	4610      	mov	r0, r2
 8008206:	4619      	mov	r1, r3
 8008208:	f7f8 f9da 	bl	80005c0 <__aeabi_dmul>
 800820c:	4604      	mov	r4, r0
 800820e:	460d      	mov	r5, r1
 8008210:	a37b      	add	r3, pc, #492	@ (adr r3, 8008400 <__ieee754_pow+0x738>)
 8008212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008216:	f7f8 f9d3 	bl	80005c0 <__aeabi_dmul>
 800821a:	a37b      	add	r3, pc, #492	@ (adr r3, 8008408 <__ieee754_pow+0x740>)
 800821c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008220:	f7f8 f818 	bl	8000254 <__adddf3>
 8008224:	4622      	mov	r2, r4
 8008226:	462b      	mov	r3, r5
 8008228:	f7f8 f9ca 	bl	80005c0 <__aeabi_dmul>
 800822c:	a378      	add	r3, pc, #480	@ (adr r3, 8008410 <__ieee754_pow+0x748>)
 800822e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008232:	f7f8 f80f 	bl	8000254 <__adddf3>
 8008236:	4622      	mov	r2, r4
 8008238:	462b      	mov	r3, r5
 800823a:	f7f8 f9c1 	bl	80005c0 <__aeabi_dmul>
 800823e:	a376      	add	r3, pc, #472	@ (adr r3, 8008418 <__ieee754_pow+0x750>)
 8008240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008244:	f7f8 f806 	bl	8000254 <__adddf3>
 8008248:	4622      	mov	r2, r4
 800824a:	462b      	mov	r3, r5
 800824c:	f7f8 f9b8 	bl	80005c0 <__aeabi_dmul>
 8008250:	a373      	add	r3, pc, #460	@ (adr r3, 8008420 <__ieee754_pow+0x758>)
 8008252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008256:	f7f7 fffd 	bl	8000254 <__adddf3>
 800825a:	4622      	mov	r2, r4
 800825c:	462b      	mov	r3, r5
 800825e:	f7f8 f9af 	bl	80005c0 <__aeabi_dmul>
 8008262:	a371      	add	r3, pc, #452	@ (adr r3, 8008428 <__ieee754_pow+0x760>)
 8008264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008268:	f7f7 fff4 	bl	8000254 <__adddf3>
 800826c:	4606      	mov	r6, r0
 800826e:	460f      	mov	r7, r1
 8008270:	4622      	mov	r2, r4
 8008272:	462b      	mov	r3, r5
 8008274:	4620      	mov	r0, r4
 8008276:	4629      	mov	r1, r5
 8008278:	f7f8 f9a2 	bl	80005c0 <__aeabi_dmul>
 800827c:	4602      	mov	r2, r0
 800827e:	460b      	mov	r3, r1
 8008280:	4630      	mov	r0, r6
 8008282:	4639      	mov	r1, r7
 8008284:	f7f8 f99c 	bl	80005c0 <__aeabi_dmul>
 8008288:	465a      	mov	r2, fp
 800828a:	4604      	mov	r4, r0
 800828c:	460d      	mov	r5, r1
 800828e:	464b      	mov	r3, r9
 8008290:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008294:	f7f7 ffde 	bl	8000254 <__adddf3>
 8008298:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800829c:	f7f8 f990 	bl	80005c0 <__aeabi_dmul>
 80082a0:	4622      	mov	r2, r4
 80082a2:	462b      	mov	r3, r5
 80082a4:	f7f7 ffd6 	bl	8000254 <__adddf3>
 80082a8:	465a      	mov	r2, fp
 80082aa:	464b      	mov	r3, r9
 80082ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80082b0:	4658      	mov	r0, fp
 80082b2:	4649      	mov	r1, r9
 80082b4:	f7f8 f984 	bl	80005c0 <__aeabi_dmul>
 80082b8:	2200      	movs	r2, #0
 80082ba:	4b69      	ldr	r3, [pc, #420]	@ (8008460 <__ieee754_pow+0x798>)
 80082bc:	4606      	mov	r6, r0
 80082be:	460f      	mov	r7, r1
 80082c0:	f7f7 ffc8 	bl	8000254 <__adddf3>
 80082c4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80082c8:	f7f7 ffc4 	bl	8000254 <__adddf3>
 80082cc:	460d      	mov	r5, r1
 80082ce:	460b      	mov	r3, r1
 80082d0:	4640      	mov	r0, r8
 80082d2:	4649      	mov	r1, r9
 80082d4:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80082d8:	465c      	mov	r4, fp
 80082da:	465a      	mov	r2, fp
 80082dc:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80082e0:	f7f8 f96e 	bl	80005c0 <__aeabi_dmul>
 80082e4:	2200      	movs	r2, #0
 80082e6:	4680      	mov	r8, r0
 80082e8:	4689      	mov	r9, r1
 80082ea:	4b5d      	ldr	r3, [pc, #372]	@ (8008460 <__ieee754_pow+0x798>)
 80082ec:	4620      	mov	r0, r4
 80082ee:	4629      	mov	r1, r5
 80082f0:	f7f7 ffae 	bl	8000250 <__aeabi_dsub>
 80082f4:	4632      	mov	r2, r6
 80082f6:	463b      	mov	r3, r7
 80082f8:	f7f7 ffaa 	bl	8000250 <__aeabi_dsub>
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008304:	f7f7 ffa4 	bl	8000250 <__aeabi_dsub>
 8008308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800830c:	f7f8 f958 	bl	80005c0 <__aeabi_dmul>
 8008310:	4606      	mov	r6, r0
 8008312:	460f      	mov	r7, r1
 8008314:	4622      	mov	r2, r4
 8008316:	462b      	mov	r3, r5
 8008318:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800831c:	f7f8 f950 	bl	80005c0 <__aeabi_dmul>
 8008320:	4602      	mov	r2, r0
 8008322:	460b      	mov	r3, r1
 8008324:	4630      	mov	r0, r6
 8008326:	4639      	mov	r1, r7
 8008328:	f7f7 ff94 	bl	8000254 <__adddf3>
 800832c:	4606      	mov	r6, r0
 800832e:	460f      	mov	r7, r1
 8008330:	4602      	mov	r2, r0
 8008332:	460b      	mov	r3, r1
 8008334:	4640      	mov	r0, r8
 8008336:	4649      	mov	r1, r9
 8008338:	f7f7 ff8c 	bl	8000254 <__adddf3>
 800833c:	460d      	mov	r5, r1
 800833e:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8008342:	a33b      	add	r3, pc, #236	@ (adr r3, 8008430 <__ieee754_pow+0x768>)
 8008344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008348:	465c      	mov	r4, fp
 800834a:	4658      	mov	r0, fp
 800834c:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8008350:	f7f8 f936 	bl	80005c0 <__aeabi_dmul>
 8008354:	4642      	mov	r2, r8
 8008356:	464b      	mov	r3, r9
 8008358:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800835c:	4620      	mov	r0, r4
 800835e:	4629      	mov	r1, r5
 8008360:	f7f7 ff76 	bl	8000250 <__aeabi_dsub>
 8008364:	4602      	mov	r2, r0
 8008366:	460b      	mov	r3, r1
 8008368:	4630      	mov	r0, r6
 800836a:	4639      	mov	r1, r7
 800836c:	f7f7 ff70 	bl	8000250 <__aeabi_dsub>
 8008370:	a331      	add	r3, pc, #196	@ (adr r3, 8008438 <__ieee754_pow+0x770>)
 8008372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008376:	f7f8 f923 	bl	80005c0 <__aeabi_dmul>
 800837a:	4606      	mov	r6, r0
 800837c:	460f      	mov	r7, r1
 800837e:	4620      	mov	r0, r4
 8008380:	4629      	mov	r1, r5
 8008382:	a32f      	add	r3, pc, #188	@ (adr r3, 8008440 <__ieee754_pow+0x778>)
 8008384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008388:	f7f8 f91a 	bl	80005c0 <__aeabi_dmul>
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
 8008390:	4630      	mov	r0, r6
 8008392:	4639      	mov	r1, r7
 8008394:	f7f7 ff5e 	bl	8000254 <__adddf3>
 8008398:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800839a:	4b32      	ldr	r3, [pc, #200]	@ (8008464 <__ieee754_pow+0x79c>)
 800839c:	4413      	add	r3, r2
 800839e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a2:	f7f7 ff57 	bl	8000254 <__adddf3>
 80083a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80083aa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80083ac:	f7f8 f89e 	bl	80004ec <__aeabi_i2d>
 80083b0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80083b2:	4b2d      	ldr	r3, [pc, #180]	@ (8008468 <__ieee754_pow+0x7a0>)
 80083b4:	4606      	mov	r6, r0
 80083b6:	460f      	mov	r7, r1
 80083b8:	4413      	add	r3, r2
 80083ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083c6:	f7f7 ff45 	bl	8000254 <__adddf3>
 80083ca:	4642      	mov	r2, r8
 80083cc:	464b      	mov	r3, r9
 80083ce:	f7f7 ff41 	bl	8000254 <__adddf3>
 80083d2:	4632      	mov	r2, r6
 80083d4:	463b      	mov	r3, r7
 80083d6:	f7f7 ff3d 	bl	8000254 <__adddf3>
 80083da:	4632      	mov	r2, r6
 80083dc:	463b      	mov	r3, r7
 80083de:	460d      	mov	r5, r1
 80083e0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80083e4:	4658      	mov	r0, fp
 80083e6:	465c      	mov	r4, fp
 80083e8:	f7f7 ff32 	bl	8000250 <__aeabi_dsub>
 80083ec:	4642      	mov	r2, r8
 80083ee:	464b      	mov	r3, r9
 80083f0:	f7f7 ff2e 	bl	8000250 <__aeabi_dsub>
 80083f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083f8:	f7f7 ff2a 	bl	8000250 <__aeabi_dsub>
 80083fc:	e036      	b.n	800846c <__ieee754_pow+0x7a4>
 80083fe:	bf00      	nop
 8008400:	4a454eef 	.word	0x4a454eef
 8008404:	3fca7e28 	.word	0x3fca7e28
 8008408:	93c9db65 	.word	0x93c9db65
 800840c:	3fcd864a 	.word	0x3fcd864a
 8008410:	a91d4101 	.word	0xa91d4101
 8008414:	3fd17460 	.word	0x3fd17460
 8008418:	518f264d 	.word	0x518f264d
 800841c:	3fd55555 	.word	0x3fd55555
 8008420:	db6fabff 	.word	0xdb6fabff
 8008424:	3fdb6db6 	.word	0x3fdb6db6
 8008428:	33333303 	.word	0x33333303
 800842c:	3fe33333 	.word	0x3fe33333
 8008430:	e0000000 	.word	0xe0000000
 8008434:	3feec709 	.word	0x3feec709
 8008438:	dc3a03fd 	.word	0xdc3a03fd
 800843c:	3feec709 	.word	0x3feec709
 8008440:	145b01f5 	.word	0x145b01f5
 8008444:	be3e2fe0 	.word	0xbe3e2fe0
 8008448:	7ff00000 	.word	0x7ff00000
 800844c:	43400000 	.word	0x43400000
 8008450:	0003988e 	.word	0x0003988e
 8008454:	000bb679 	.word	0x000bb679
 8008458:	0800c278 	.word	0x0800c278
 800845c:	3ff00000 	.word	0x3ff00000
 8008460:	40080000 	.word	0x40080000
 8008464:	0800c258 	.word	0x0800c258
 8008468:	0800c268 	.word	0x0800c268
 800846c:	4602      	mov	r2, r0
 800846e:	460b      	mov	r3, r1
 8008470:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008474:	e5d6      	b.n	8008024 <__ieee754_pow+0x35c>
 8008476:	f04f 0a01 	mov.w	sl, #1
 800847a:	e65e      	b.n	800813a <__ieee754_pow+0x472>
 800847c:	a3b5      	add	r3, pc, #724	@ (adr r3, 8008754 <__ieee754_pow+0xa8c>)
 800847e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008482:	4630      	mov	r0, r6
 8008484:	4639      	mov	r1, r7
 8008486:	f7f7 fee5 	bl	8000254 <__adddf3>
 800848a:	4642      	mov	r2, r8
 800848c:	464b      	mov	r3, r9
 800848e:	e9cd 0100 	strd	r0, r1, [sp]
 8008492:	4620      	mov	r0, r4
 8008494:	4629      	mov	r1, r5
 8008496:	f7f7 fedb 	bl	8000250 <__aeabi_dsub>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084a2:	f7f8 fb1d 	bl	8000ae0 <__aeabi_dcmpgt>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	f47f adfe 	bne.w	80080a8 <__ieee754_pow+0x3e0>
 80084ac:	4ba2      	ldr	r3, [pc, #648]	@ (8008738 <__ieee754_pow+0xa70>)
 80084ae:	e022      	b.n	80084f6 <__ieee754_pow+0x82e>
 80084b0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80084b4:	4ca1      	ldr	r4, [pc, #644]	@ (800873c <__ieee754_pow+0xa74>)
 80084b6:	42a3      	cmp	r3, r4
 80084b8:	d919      	bls.n	80084ee <__ieee754_pow+0x826>
 80084ba:	4ba1      	ldr	r3, [pc, #644]	@ (8008740 <__ieee754_pow+0xa78>)
 80084bc:	440b      	add	r3, r1
 80084be:	4303      	orrs	r3, r0
 80084c0:	d009      	beq.n	80084d6 <__ieee754_pow+0x80e>
 80084c2:	2200      	movs	r2, #0
 80084c4:	2300      	movs	r3, #0
 80084c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084ca:	f7f8 faeb 	bl	8000aa4 <__aeabi_dcmplt>
 80084ce:	3800      	subs	r0, #0
 80084d0:	bf18      	it	ne
 80084d2:	2001      	movne	r0, #1
 80084d4:	e512      	b.n	8007efc <__ieee754_pow+0x234>
 80084d6:	4642      	mov	r2, r8
 80084d8:	464b      	mov	r3, r9
 80084da:	f7f7 feb9 	bl	8000250 <__aeabi_dsub>
 80084de:	4632      	mov	r2, r6
 80084e0:	463b      	mov	r3, r7
 80084e2:	f7f8 faf3 	bl	8000acc <__aeabi_dcmpge>
 80084e6:	2800      	cmp	r0, #0
 80084e8:	d1eb      	bne.n	80084c2 <__ieee754_pow+0x7fa>
 80084ea:	4b96      	ldr	r3, [pc, #600]	@ (8008744 <__ieee754_pow+0xa7c>)
 80084ec:	e003      	b.n	80084f6 <__ieee754_pow+0x82e>
 80084ee:	4a96      	ldr	r2, [pc, #600]	@ (8008748 <__ieee754_pow+0xa80>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	f240 80e8 	bls.w	80086c6 <__ieee754_pow+0x9fe>
 80084f6:	151b      	asrs	r3, r3, #20
 80084f8:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 80084fc:	4893      	ldr	r0, [pc, #588]	@ (800874c <__ieee754_pow+0xa84>)
 80084fe:	f1bb 0f00 	cmp.w	fp, #0
 8008502:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8008506:	f04f 0200 	mov.w	r2, #0
 800850a:	fa4a fa03 	asr.w	sl, sl, r3
 800850e:	44da      	add	sl, fp
 8008510:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008514:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008518:	fa40 f001 	asr.w	r0, r0, r1
 800851c:	f1c1 0114 	rsb	r1, r1, #20
 8008520:	ea00 030a 	and.w	r3, r0, sl
 8008524:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008528:	4640      	mov	r0, r8
 800852a:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800852e:	fa4a fa01 	asr.w	sl, sl, r1
 8008532:	4649      	mov	r1, r9
 8008534:	bfb8      	it	lt
 8008536:	f1ca 0a00 	rsblt	sl, sl, #0
 800853a:	f7f7 fe89 	bl	8000250 <__aeabi_dsub>
 800853e:	4680      	mov	r8, r0
 8008540:	4689      	mov	r9, r1
 8008542:	2400      	movs	r4, #0
 8008544:	4632      	mov	r2, r6
 8008546:	463b      	mov	r3, r7
 8008548:	4640      	mov	r0, r8
 800854a:	4649      	mov	r1, r9
 800854c:	f7f7 fe82 	bl	8000254 <__adddf3>
 8008550:	460d      	mov	r5, r1
 8008552:	4620      	mov	r0, r4
 8008554:	a368      	add	r3, pc, #416	@ (adr r3, 80086f8 <__ieee754_pow+0xa30>)
 8008556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855a:	f7f8 f831 	bl	80005c0 <__aeabi_dmul>
 800855e:	4642      	mov	r2, r8
 8008560:	464b      	mov	r3, r9
 8008562:	e9cd 0100 	strd	r0, r1, [sp]
 8008566:	4620      	mov	r0, r4
 8008568:	4629      	mov	r1, r5
 800856a:	f7f7 fe71 	bl	8000250 <__aeabi_dsub>
 800856e:	4602      	mov	r2, r0
 8008570:	460b      	mov	r3, r1
 8008572:	4630      	mov	r0, r6
 8008574:	4639      	mov	r1, r7
 8008576:	f7f7 fe6b 	bl	8000250 <__aeabi_dsub>
 800857a:	a361      	add	r3, pc, #388	@ (adr r3, 8008700 <__ieee754_pow+0xa38>)
 800857c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008580:	f7f8 f81e 	bl	80005c0 <__aeabi_dmul>
 8008584:	4680      	mov	r8, r0
 8008586:	4689      	mov	r9, r1
 8008588:	4620      	mov	r0, r4
 800858a:	4629      	mov	r1, r5
 800858c:	a35e      	add	r3, pc, #376	@ (adr r3, 8008708 <__ieee754_pow+0xa40>)
 800858e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008592:	f7f8 f815 	bl	80005c0 <__aeabi_dmul>
 8008596:	4602      	mov	r2, r0
 8008598:	460b      	mov	r3, r1
 800859a:	4640      	mov	r0, r8
 800859c:	4649      	mov	r1, r9
 800859e:	f7f7 fe59 	bl	8000254 <__adddf3>
 80085a2:	4604      	mov	r4, r0
 80085a4:	460d      	mov	r5, r1
 80085a6:	4602      	mov	r2, r0
 80085a8:	460b      	mov	r3, r1
 80085aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085ae:	f7f7 fe51 	bl	8000254 <__adddf3>
 80085b2:	4680      	mov	r8, r0
 80085b4:	4689      	mov	r9, r1
 80085b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085ba:	f7f7 fe49 	bl	8000250 <__aeabi_dsub>
 80085be:	4602      	mov	r2, r0
 80085c0:	460b      	mov	r3, r1
 80085c2:	4620      	mov	r0, r4
 80085c4:	4629      	mov	r1, r5
 80085c6:	f7f7 fe43 	bl	8000250 <__aeabi_dsub>
 80085ca:	4642      	mov	r2, r8
 80085cc:	4606      	mov	r6, r0
 80085ce:	460f      	mov	r7, r1
 80085d0:	464b      	mov	r3, r9
 80085d2:	4640      	mov	r0, r8
 80085d4:	4649      	mov	r1, r9
 80085d6:	f7f7 fff3 	bl	80005c0 <__aeabi_dmul>
 80085da:	4604      	mov	r4, r0
 80085dc:	460d      	mov	r5, r1
 80085de:	a34c      	add	r3, pc, #304	@ (adr r3, 8008710 <__ieee754_pow+0xa48>)
 80085e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e4:	f7f7 ffec 	bl	80005c0 <__aeabi_dmul>
 80085e8:	a34b      	add	r3, pc, #300	@ (adr r3, 8008718 <__ieee754_pow+0xa50>)
 80085ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ee:	f7f7 fe2f 	bl	8000250 <__aeabi_dsub>
 80085f2:	4622      	mov	r2, r4
 80085f4:	462b      	mov	r3, r5
 80085f6:	f7f7 ffe3 	bl	80005c0 <__aeabi_dmul>
 80085fa:	a349      	add	r3, pc, #292	@ (adr r3, 8008720 <__ieee754_pow+0xa58>)
 80085fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008600:	f7f7 fe28 	bl	8000254 <__adddf3>
 8008604:	4622      	mov	r2, r4
 8008606:	462b      	mov	r3, r5
 8008608:	f7f7 ffda 	bl	80005c0 <__aeabi_dmul>
 800860c:	a346      	add	r3, pc, #280	@ (adr r3, 8008728 <__ieee754_pow+0xa60>)
 800860e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008612:	f7f7 fe1d 	bl	8000250 <__aeabi_dsub>
 8008616:	4622      	mov	r2, r4
 8008618:	462b      	mov	r3, r5
 800861a:	f7f7 ffd1 	bl	80005c0 <__aeabi_dmul>
 800861e:	a344      	add	r3, pc, #272	@ (adr r3, 8008730 <__ieee754_pow+0xa68>)
 8008620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008624:	f7f7 fe16 	bl	8000254 <__adddf3>
 8008628:	4622      	mov	r2, r4
 800862a:	462b      	mov	r3, r5
 800862c:	f7f7 ffc8 	bl	80005c0 <__aeabi_dmul>
 8008630:	4602      	mov	r2, r0
 8008632:	460b      	mov	r3, r1
 8008634:	4640      	mov	r0, r8
 8008636:	4649      	mov	r1, r9
 8008638:	f7f7 fe0a 	bl	8000250 <__aeabi_dsub>
 800863c:	4604      	mov	r4, r0
 800863e:	460d      	mov	r5, r1
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
 8008644:	4640      	mov	r0, r8
 8008646:	4649      	mov	r1, r9
 8008648:	f7f7 ffba 	bl	80005c0 <__aeabi_dmul>
 800864c:	2200      	movs	r2, #0
 800864e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008652:	e9cd 0100 	strd	r0, r1, [sp]
 8008656:	4620      	mov	r0, r4
 8008658:	4629      	mov	r1, r5
 800865a:	f7f7 fdf9 	bl	8000250 <__aeabi_dsub>
 800865e:	4602      	mov	r2, r0
 8008660:	460b      	mov	r3, r1
 8008662:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008666:	f7f8 f8d5 	bl	8000814 <__aeabi_ddiv>
 800866a:	4632      	mov	r2, r6
 800866c:	4604      	mov	r4, r0
 800866e:	460d      	mov	r5, r1
 8008670:	463b      	mov	r3, r7
 8008672:	4640      	mov	r0, r8
 8008674:	4649      	mov	r1, r9
 8008676:	f7f7 ffa3 	bl	80005c0 <__aeabi_dmul>
 800867a:	4632      	mov	r2, r6
 800867c:	463b      	mov	r3, r7
 800867e:	f7f7 fde9 	bl	8000254 <__adddf3>
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	4620      	mov	r0, r4
 8008688:	4629      	mov	r1, r5
 800868a:	f7f7 fde1 	bl	8000250 <__aeabi_dsub>
 800868e:	4642      	mov	r2, r8
 8008690:	464b      	mov	r3, r9
 8008692:	f7f7 fddd 	bl	8000250 <__aeabi_dsub>
 8008696:	460b      	mov	r3, r1
 8008698:	4602      	mov	r2, r0
 800869a:	492d      	ldr	r1, [pc, #180]	@ (8008750 <__ieee754_pow+0xa88>)
 800869c:	2000      	movs	r0, #0
 800869e:	f7f7 fdd7 	bl	8000250 <__aeabi_dsub>
 80086a2:	ec41 0b10 	vmov	d0, r0, r1
 80086a6:	ee10 3a90 	vmov	r3, s1
 80086aa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80086ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086b2:	da0b      	bge.n	80086cc <__ieee754_pow+0xa04>
 80086b4:	4650      	mov	r0, sl
 80086b6:	f000 fa57 	bl	8008b68 <scalbn>
 80086ba:	ec51 0b10 	vmov	r0, r1, d0
 80086be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086c2:	f7ff bb6c 	b.w	8007d9e <__ieee754_pow+0xd6>
 80086c6:	f8dd a010 	ldr.w	sl, [sp, #16]
 80086ca:	e73a      	b.n	8008542 <__ieee754_pow+0x87a>
 80086cc:	ec51 0b10 	vmov	r0, r1, d0
 80086d0:	4619      	mov	r1, r3
 80086d2:	e7f4      	b.n	80086be <__ieee754_pow+0x9f6>
 80086d4:	2000      	movs	r0, #0
 80086d6:	491e      	ldr	r1, [pc, #120]	@ (8008750 <__ieee754_pow+0xa88>)
 80086d8:	f7ff bb13 	b.w	8007d02 <__ieee754_pow+0x3a>
 80086dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086e0:	f7ff bb0f 	b.w	8007d02 <__ieee754_pow+0x3a>
 80086e4:	4630      	mov	r0, r6
 80086e6:	4639      	mov	r1, r7
 80086e8:	f7ff bb0b 	b.w	8007d02 <__ieee754_pow+0x3a>
 80086ec:	460c      	mov	r4, r1
 80086ee:	f7ff bb68 	b.w	8007dc2 <__ieee754_pow+0xfa>
 80086f2:	2400      	movs	r4, #0
 80086f4:	f7ff bb4a 	b.w	8007d8c <__ieee754_pow+0xc4>
 80086f8:	00000000 	.word	0x00000000
 80086fc:	3fe62e43 	.word	0x3fe62e43
 8008700:	fefa39ef 	.word	0xfefa39ef
 8008704:	3fe62e42 	.word	0x3fe62e42
 8008708:	0ca86c39 	.word	0x0ca86c39
 800870c:	be205c61 	.word	0xbe205c61
 8008710:	72bea4d0 	.word	0x72bea4d0
 8008714:	3e663769 	.word	0x3e663769
 8008718:	c5d26bf1 	.word	0xc5d26bf1
 800871c:	3ebbbd41 	.word	0x3ebbbd41
 8008720:	af25de2c 	.word	0xaf25de2c
 8008724:	3f11566a 	.word	0x3f11566a
 8008728:	16bebd93 	.word	0x16bebd93
 800872c:	3f66c16c 	.word	0x3f66c16c
 8008730:	5555553e 	.word	0x5555553e
 8008734:	3fc55555 	.word	0x3fc55555
 8008738:	40900000 	.word	0x40900000
 800873c:	4090cbff 	.word	0x4090cbff
 8008740:	3f6f3400 	.word	0x3f6f3400
 8008744:	4090cc00 	.word	0x4090cc00
 8008748:	3fe00000 	.word	0x3fe00000
 800874c:	fff00000 	.word	0xfff00000
 8008750:	3ff00000 	.word	0x3ff00000
 8008754:	652b82fe 	.word	0x652b82fe
 8008758:	3c971547 	.word	0x3c971547
 800875c:	00000000 	.word	0x00000000

08008760 <__ieee754_rem_pio2>:
 8008760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008764:	ec57 6b10 	vmov	r6, r7, d0
 8008768:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800876c:	4bc4      	ldr	r3, [pc, #784]	@ (8008a80 <__ieee754_rem_pio2+0x320>)
 800876e:	b08d      	sub	sp, #52	@ 0x34
 8008770:	4604      	mov	r4, r0
 8008772:	4598      	cmp	r8, r3
 8008774:	9704      	str	r7, [sp, #16]
 8008776:	d807      	bhi.n	8008788 <__ieee754_rem_pio2+0x28>
 8008778:	2200      	movs	r2, #0
 800877a:	2300      	movs	r3, #0
 800877c:	ed80 0b00 	vstr	d0, [r0]
 8008780:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008784:	2500      	movs	r5, #0
 8008786:	e028      	b.n	80087da <__ieee754_rem_pio2+0x7a>
 8008788:	4bbe      	ldr	r3, [pc, #760]	@ (8008a84 <__ieee754_rem_pio2+0x324>)
 800878a:	4598      	cmp	r8, r3
 800878c:	d878      	bhi.n	8008880 <__ieee754_rem_pio2+0x120>
 800878e:	9b04      	ldr	r3, [sp, #16]
 8008790:	4630      	mov	r0, r6
 8008792:	4dbd      	ldr	r5, [pc, #756]	@ (8008a88 <__ieee754_rem_pio2+0x328>)
 8008794:	4639      	mov	r1, r7
 8008796:	2b00      	cmp	r3, #0
 8008798:	a3ab      	add	r3, pc, #684	@ (adr r3, 8008a48 <__ieee754_rem_pio2+0x2e8>)
 800879a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879e:	dd38      	ble.n	8008812 <__ieee754_rem_pio2+0xb2>
 80087a0:	f7f7 fd56 	bl	8000250 <__aeabi_dsub>
 80087a4:	45a8      	cmp	r8, r5
 80087a6:	4606      	mov	r6, r0
 80087a8:	460f      	mov	r7, r1
 80087aa:	d01a      	beq.n	80087e2 <__ieee754_rem_pio2+0x82>
 80087ac:	a3a8      	add	r3, pc, #672	@ (adr r3, 8008a50 <__ieee754_rem_pio2+0x2f0>)
 80087ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b2:	f7f7 fd4d 	bl	8000250 <__aeabi_dsub>
 80087b6:	4602      	mov	r2, r0
 80087b8:	460b      	mov	r3, r1
 80087ba:	4680      	mov	r8, r0
 80087bc:	4689      	mov	r9, r1
 80087be:	4630      	mov	r0, r6
 80087c0:	4639      	mov	r1, r7
 80087c2:	f7f7 fd45 	bl	8000250 <__aeabi_dsub>
 80087c6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8008a50 <__ieee754_rem_pio2+0x2f0>)
 80087c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087cc:	2501      	movs	r5, #1
 80087ce:	f7f7 fd3f 	bl	8000250 <__aeabi_dsub>
 80087d2:	e9c4 8900 	strd	r8, r9, [r4]
 80087d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80087da:	4628      	mov	r0, r5
 80087dc:	b00d      	add	sp, #52	@ 0x34
 80087de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e2:	a39d      	add	r3, pc, #628	@ (adr r3, 8008a58 <__ieee754_rem_pio2+0x2f8>)
 80087e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e8:	f7f7 fd32 	bl	8000250 <__aeabi_dsub>
 80087ec:	4606      	mov	r6, r0
 80087ee:	460f      	mov	r7, r1
 80087f0:	a39b      	add	r3, pc, #620	@ (adr r3, 8008a60 <__ieee754_rem_pio2+0x300>)
 80087f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f6:	f7f7 fd2b 	bl	8000250 <__aeabi_dsub>
 80087fa:	4602      	mov	r2, r0
 80087fc:	460b      	mov	r3, r1
 80087fe:	4680      	mov	r8, r0
 8008800:	4689      	mov	r9, r1
 8008802:	4630      	mov	r0, r6
 8008804:	4639      	mov	r1, r7
 8008806:	f7f7 fd23 	bl	8000250 <__aeabi_dsub>
 800880a:	a395      	add	r3, pc, #596	@ (adr r3, 8008a60 <__ieee754_rem_pio2+0x300>)
 800880c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008810:	e7dc      	b.n	80087cc <__ieee754_rem_pio2+0x6c>
 8008812:	f7f7 fd1f 	bl	8000254 <__adddf3>
 8008816:	45a8      	cmp	r8, r5
 8008818:	4606      	mov	r6, r0
 800881a:	460f      	mov	r7, r1
 800881c:	d018      	beq.n	8008850 <__ieee754_rem_pio2+0xf0>
 800881e:	a38c      	add	r3, pc, #560	@ (adr r3, 8008a50 <__ieee754_rem_pio2+0x2f0>)
 8008820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008824:	f7f7 fd16 	bl	8000254 <__adddf3>
 8008828:	4602      	mov	r2, r0
 800882a:	460b      	mov	r3, r1
 800882c:	4680      	mov	r8, r0
 800882e:	4689      	mov	r9, r1
 8008830:	4630      	mov	r0, r6
 8008832:	4639      	mov	r1, r7
 8008834:	f7f7 fd0c 	bl	8000250 <__aeabi_dsub>
 8008838:	a385      	add	r3, pc, #532	@ (adr r3, 8008a50 <__ieee754_rem_pio2+0x2f0>)
 800883a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883e:	f7f7 fd09 	bl	8000254 <__adddf3>
 8008842:	f04f 35ff 	mov.w	r5, #4294967295
 8008846:	e9c4 8900 	strd	r8, r9, [r4]
 800884a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800884e:	e7c4      	b.n	80087da <__ieee754_rem_pio2+0x7a>
 8008850:	a381      	add	r3, pc, #516	@ (adr r3, 8008a58 <__ieee754_rem_pio2+0x2f8>)
 8008852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008856:	f7f7 fcfd 	bl	8000254 <__adddf3>
 800885a:	4606      	mov	r6, r0
 800885c:	460f      	mov	r7, r1
 800885e:	a380      	add	r3, pc, #512	@ (adr r3, 8008a60 <__ieee754_rem_pio2+0x300>)
 8008860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008864:	f7f7 fcf6 	bl	8000254 <__adddf3>
 8008868:	4602      	mov	r2, r0
 800886a:	460b      	mov	r3, r1
 800886c:	4680      	mov	r8, r0
 800886e:	4689      	mov	r9, r1
 8008870:	4630      	mov	r0, r6
 8008872:	4639      	mov	r1, r7
 8008874:	f7f7 fcec 	bl	8000250 <__aeabi_dsub>
 8008878:	a379      	add	r3, pc, #484	@ (adr r3, 8008a60 <__ieee754_rem_pio2+0x300>)
 800887a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887e:	e7de      	b.n	800883e <__ieee754_rem_pio2+0xde>
 8008880:	4b82      	ldr	r3, [pc, #520]	@ (8008a8c <__ieee754_rem_pio2+0x32c>)
 8008882:	4598      	cmp	r8, r3
 8008884:	f200 80d1 	bhi.w	8008a2a <__ieee754_rem_pio2+0x2ca>
 8008888:	f000 f966 	bl	8008b58 <fabs>
 800888c:	ec57 6b10 	vmov	r6, r7, d0
 8008890:	a375      	add	r3, pc, #468	@ (adr r3, 8008a68 <__ieee754_rem_pio2+0x308>)
 8008892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008896:	4630      	mov	r0, r6
 8008898:	4639      	mov	r1, r7
 800889a:	f7f7 fe91 	bl	80005c0 <__aeabi_dmul>
 800889e:	2200      	movs	r2, #0
 80088a0:	4b7b      	ldr	r3, [pc, #492]	@ (8008a90 <__ieee754_rem_pio2+0x330>)
 80088a2:	f7f7 fcd7 	bl	8000254 <__adddf3>
 80088a6:	f7f8 f93b 	bl	8000b20 <__aeabi_d2iz>
 80088aa:	4605      	mov	r5, r0
 80088ac:	f7f7 fe1e 	bl	80004ec <__aeabi_i2d>
 80088b0:	4602      	mov	r2, r0
 80088b2:	460b      	mov	r3, r1
 80088b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80088b8:	a363      	add	r3, pc, #396	@ (adr r3, 8008a48 <__ieee754_rem_pio2+0x2e8>)
 80088ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088be:	f7f7 fe7f 	bl	80005c0 <__aeabi_dmul>
 80088c2:	4602      	mov	r2, r0
 80088c4:	460b      	mov	r3, r1
 80088c6:	4630      	mov	r0, r6
 80088c8:	4639      	mov	r1, r7
 80088ca:	f7f7 fcc1 	bl	8000250 <__aeabi_dsub>
 80088ce:	4682      	mov	sl, r0
 80088d0:	468b      	mov	fp, r1
 80088d2:	a35f      	add	r3, pc, #380	@ (adr r3, 8008a50 <__ieee754_rem_pio2+0x2f0>)
 80088d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088dc:	f7f7 fe70 	bl	80005c0 <__aeabi_dmul>
 80088e0:	2d1f      	cmp	r5, #31
 80088e2:	4606      	mov	r6, r0
 80088e4:	460f      	mov	r7, r1
 80088e6:	dc0c      	bgt.n	8008902 <__ieee754_rem_pio2+0x1a2>
 80088e8:	1e6a      	subs	r2, r5, #1
 80088ea:	4b6a      	ldr	r3, [pc, #424]	@ (8008a94 <__ieee754_rem_pio2+0x334>)
 80088ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f0:	4543      	cmp	r3, r8
 80088f2:	d006      	beq.n	8008902 <__ieee754_rem_pio2+0x1a2>
 80088f4:	4632      	mov	r2, r6
 80088f6:	463b      	mov	r3, r7
 80088f8:	4650      	mov	r0, sl
 80088fa:	4659      	mov	r1, fp
 80088fc:	f7f7 fca8 	bl	8000250 <__aeabi_dsub>
 8008900:	e00e      	b.n	8008920 <__ieee754_rem_pio2+0x1c0>
 8008902:	463b      	mov	r3, r7
 8008904:	4632      	mov	r2, r6
 8008906:	4650      	mov	r0, sl
 8008908:	4659      	mov	r1, fp
 800890a:	f7f7 fca1 	bl	8000250 <__aeabi_dsub>
 800890e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008912:	9305      	str	r3, [sp, #20]
 8008914:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008918:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800891c:	2b10      	cmp	r3, #16
 800891e:	dc02      	bgt.n	8008926 <__ieee754_rem_pio2+0x1c6>
 8008920:	e9c4 0100 	strd	r0, r1, [r4]
 8008924:	e039      	b.n	800899a <__ieee754_rem_pio2+0x23a>
 8008926:	a34c      	add	r3, pc, #304	@ (adr r3, 8008a58 <__ieee754_rem_pio2+0x2f8>)
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008930:	f7f7 fe46 	bl	80005c0 <__aeabi_dmul>
 8008934:	4606      	mov	r6, r0
 8008936:	460f      	mov	r7, r1
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	4650      	mov	r0, sl
 800893e:	4659      	mov	r1, fp
 8008940:	f7f7 fc86 	bl	8000250 <__aeabi_dsub>
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	4680      	mov	r8, r0
 800894a:	4689      	mov	r9, r1
 800894c:	4650      	mov	r0, sl
 800894e:	4659      	mov	r1, fp
 8008950:	f7f7 fc7e 	bl	8000250 <__aeabi_dsub>
 8008954:	4632      	mov	r2, r6
 8008956:	463b      	mov	r3, r7
 8008958:	f7f7 fc7a 	bl	8000250 <__aeabi_dsub>
 800895c:	4606      	mov	r6, r0
 800895e:	460f      	mov	r7, r1
 8008960:	a33f      	add	r3, pc, #252	@ (adr r3, 8008a60 <__ieee754_rem_pio2+0x300>)
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800896a:	f7f7 fe29 	bl	80005c0 <__aeabi_dmul>
 800896e:	4632      	mov	r2, r6
 8008970:	463b      	mov	r3, r7
 8008972:	f7f7 fc6d 	bl	8000250 <__aeabi_dsub>
 8008976:	4602      	mov	r2, r0
 8008978:	460b      	mov	r3, r1
 800897a:	4606      	mov	r6, r0
 800897c:	460f      	mov	r7, r1
 800897e:	4640      	mov	r0, r8
 8008980:	4649      	mov	r1, r9
 8008982:	f7f7 fc65 	bl	8000250 <__aeabi_dsub>
 8008986:	9a05      	ldr	r2, [sp, #20]
 8008988:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	2b31      	cmp	r3, #49	@ 0x31
 8008990:	dc20      	bgt.n	80089d4 <__ieee754_rem_pio2+0x274>
 8008992:	46c2      	mov	sl, r8
 8008994:	46cb      	mov	fp, r9
 8008996:	e9c4 0100 	strd	r0, r1, [r4]
 800899a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800899e:	4650      	mov	r0, sl
 80089a0:	4659      	mov	r1, fp
 80089a2:	4642      	mov	r2, r8
 80089a4:	464b      	mov	r3, r9
 80089a6:	f7f7 fc53 	bl	8000250 <__aeabi_dsub>
 80089aa:	463b      	mov	r3, r7
 80089ac:	4632      	mov	r2, r6
 80089ae:	f7f7 fc4f 	bl	8000250 <__aeabi_dsub>
 80089b2:	9b04      	ldr	r3, [sp, #16]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80089ba:	f6bf af0e 	bge.w	80087da <__ieee754_rem_pio2+0x7a>
 80089be:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80089c2:	f8c4 8000 	str.w	r8, [r4]
 80089c6:	60a0      	str	r0, [r4, #8]
 80089c8:	6063      	str	r3, [r4, #4]
 80089ca:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80089ce:	60e3      	str	r3, [r4, #12]
 80089d0:	426d      	negs	r5, r5
 80089d2:	e702      	b.n	80087da <__ieee754_rem_pio2+0x7a>
 80089d4:	a326      	add	r3, pc, #152	@ (adr r3, 8008a70 <__ieee754_rem_pio2+0x310>)
 80089d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089de:	f7f7 fdef 	bl	80005c0 <__aeabi_dmul>
 80089e2:	4606      	mov	r6, r0
 80089e4:	460f      	mov	r7, r1
 80089e6:	4602      	mov	r2, r0
 80089e8:	460b      	mov	r3, r1
 80089ea:	4640      	mov	r0, r8
 80089ec:	4649      	mov	r1, r9
 80089ee:	f7f7 fc2f 	bl	8000250 <__aeabi_dsub>
 80089f2:	4602      	mov	r2, r0
 80089f4:	460b      	mov	r3, r1
 80089f6:	4682      	mov	sl, r0
 80089f8:	468b      	mov	fp, r1
 80089fa:	4640      	mov	r0, r8
 80089fc:	4649      	mov	r1, r9
 80089fe:	f7f7 fc27 	bl	8000250 <__aeabi_dsub>
 8008a02:	4632      	mov	r2, r6
 8008a04:	463b      	mov	r3, r7
 8008a06:	f7f7 fc23 	bl	8000250 <__aeabi_dsub>
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	460f      	mov	r7, r1
 8008a0e:	a31a      	add	r3, pc, #104	@ (adr r3, 8008a78 <__ieee754_rem_pio2+0x318>)
 8008a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a18:	f7f7 fdd2 	bl	80005c0 <__aeabi_dmul>
 8008a1c:	4632      	mov	r2, r6
 8008a1e:	463b      	mov	r3, r7
 8008a20:	f7f7 fc16 	bl	8000250 <__aeabi_dsub>
 8008a24:	4606      	mov	r6, r0
 8008a26:	460f      	mov	r7, r1
 8008a28:	e764      	b.n	80088f4 <__ieee754_rem_pio2+0x194>
 8008a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8008a98 <__ieee754_rem_pio2+0x338>)
 8008a2c:	4598      	cmp	r8, r3
 8008a2e:	d935      	bls.n	8008a9c <__ieee754_rem_pio2+0x33c>
 8008a30:	4632      	mov	r2, r6
 8008a32:	463b      	mov	r3, r7
 8008a34:	4630      	mov	r0, r6
 8008a36:	4639      	mov	r1, r7
 8008a38:	f7f7 fc0a 	bl	8000250 <__aeabi_dsub>
 8008a3c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008a40:	e9c4 0100 	strd	r0, r1, [r4]
 8008a44:	e69e      	b.n	8008784 <__ieee754_rem_pio2+0x24>
 8008a46:	bf00      	nop
 8008a48:	54400000 	.word	0x54400000
 8008a4c:	3ff921fb 	.word	0x3ff921fb
 8008a50:	1a626331 	.word	0x1a626331
 8008a54:	3dd0b461 	.word	0x3dd0b461
 8008a58:	1a600000 	.word	0x1a600000
 8008a5c:	3dd0b461 	.word	0x3dd0b461
 8008a60:	2e037073 	.word	0x2e037073
 8008a64:	3ba3198a 	.word	0x3ba3198a
 8008a68:	6dc9c883 	.word	0x6dc9c883
 8008a6c:	3fe45f30 	.word	0x3fe45f30
 8008a70:	2e000000 	.word	0x2e000000
 8008a74:	3ba3198a 	.word	0x3ba3198a
 8008a78:	252049c1 	.word	0x252049c1
 8008a7c:	397b839a 	.word	0x397b839a
 8008a80:	3fe921fb 	.word	0x3fe921fb
 8008a84:	4002d97b 	.word	0x4002d97b
 8008a88:	3ff921fb 	.word	0x3ff921fb
 8008a8c:	413921fb 	.word	0x413921fb
 8008a90:	3fe00000 	.word	0x3fe00000
 8008a94:	0800c288 	.word	0x0800c288
 8008a98:	7fefffff 	.word	0x7fefffff
 8008a9c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8008aa6:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8008aaa:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008aae:	f04f 0803 	mov.w	r8, #3
 8008ab2:	460f      	mov	r7, r1
 8008ab4:	f7f8 f834 	bl	8000b20 <__aeabi_d2iz>
 8008ab8:	f7f7 fd18 	bl	80004ec <__aeabi_i2d>
 8008abc:	4602      	mov	r2, r0
 8008abe:	460b      	mov	r3, r1
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	4639      	mov	r1, r7
 8008ac4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008ac8:	f7f7 fbc2 	bl	8000250 <__aeabi_dsub>
 8008acc:	2200      	movs	r2, #0
 8008ace:	4b20      	ldr	r3, [pc, #128]	@ (8008b50 <__ieee754_rem_pio2+0x3f0>)
 8008ad0:	f7f7 fd76 	bl	80005c0 <__aeabi_dmul>
 8008ad4:	460f      	mov	r7, r1
 8008ad6:	4606      	mov	r6, r0
 8008ad8:	f7f8 f822 	bl	8000b20 <__aeabi_d2iz>
 8008adc:	f7f7 fd06 	bl	80004ec <__aeabi_i2d>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	4630      	mov	r0, r6
 8008ae6:	4639      	mov	r1, r7
 8008ae8:	2600      	movs	r6, #0
 8008aea:	2700      	movs	r7, #0
 8008aec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008af0:	f7f7 fbae 	bl	8000250 <__aeabi_dsub>
 8008af4:	2200      	movs	r2, #0
 8008af6:	4b16      	ldr	r3, [pc, #88]	@ (8008b50 <__ieee754_rem_pio2+0x3f0>)
 8008af8:	f7f7 fd62 	bl	80005c0 <__aeabi_dmul>
 8008afc:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8008b00:	4632      	mov	r2, r6
 8008b02:	463b      	mov	r3, r7
 8008b04:	46c2      	mov	sl, r8
 8008b06:	f108 38ff 	add.w	r8, r8, #4294967295
 8008b0a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008b0e:	f7f7 ffbf 	bl	8000a90 <__aeabi_dcmpeq>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d1f4      	bne.n	8008b00 <__ieee754_rem_pio2+0x3a0>
 8008b16:	4b0f      	ldr	r3, [pc, #60]	@ (8008b54 <__ieee754_rem_pio2+0x3f4>)
 8008b18:	462a      	mov	r2, r5
 8008b1a:	4621      	mov	r1, r4
 8008b1c:	a806      	add	r0, sp, #24
 8008b1e:	9301      	str	r3, [sp, #4]
 8008b20:	2302      	movs	r3, #2
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	4653      	mov	r3, sl
 8008b26:	f000 f9b3 	bl	8008e90 <__kernel_rem_pio2>
 8008b2a:	9b04      	ldr	r3, [sp, #16]
 8008b2c:	4605      	mov	r5, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f6bf ae53 	bge.w	80087da <__ieee754_rem_pio2+0x7a>
 8008b34:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008b38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008b3c:	e9c4 2300 	strd	r2, r3, [r4]
 8008b40:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8008b44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008b48:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008b4c:	e740      	b.n	80089d0 <__ieee754_rem_pio2+0x270>
 8008b4e:	bf00      	nop
 8008b50:	41700000 	.word	0x41700000
 8008b54:	0800c308 	.word	0x0800c308

08008b58 <fabs>:
 8008b58:	ec51 0b10 	vmov	r0, r1, d0
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008b62:	ec43 2b10 	vmov	d0, r2, r3
 8008b66:	4770      	bx	lr

08008b68 <scalbn>:
 8008b68:	b570      	push	{r4, r5, r6, lr}
 8008b6a:	ec55 4b10 	vmov	r4, r5, d0
 8008b6e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008b72:	4606      	mov	r6, r0
 8008b74:	462b      	mov	r3, r5
 8008b76:	b991      	cbnz	r1, 8008b9e <scalbn+0x36>
 8008b78:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008b7c:	4323      	orrs	r3, r4
 8008b7e:	d03b      	beq.n	8008bf8 <scalbn+0x90>
 8008b80:	4b33      	ldr	r3, [pc, #204]	@ (8008c50 <scalbn+0xe8>)
 8008b82:	4620      	mov	r0, r4
 8008b84:	4629      	mov	r1, r5
 8008b86:	2200      	movs	r2, #0
 8008b88:	f7f7 fd1a 	bl	80005c0 <__aeabi_dmul>
 8008b8c:	4b31      	ldr	r3, [pc, #196]	@ (8008c54 <scalbn+0xec>)
 8008b8e:	4604      	mov	r4, r0
 8008b90:	460d      	mov	r5, r1
 8008b92:	429e      	cmp	r6, r3
 8008b94:	da0f      	bge.n	8008bb6 <scalbn+0x4e>
 8008b96:	a326      	add	r3, pc, #152	@ (adr r3, 8008c30 <scalbn+0xc8>)
 8008b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9c:	e01e      	b.n	8008bdc <scalbn+0x74>
 8008b9e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008ba2:	4291      	cmp	r1, r2
 8008ba4:	d10b      	bne.n	8008bbe <scalbn+0x56>
 8008ba6:	4622      	mov	r2, r4
 8008ba8:	4620      	mov	r0, r4
 8008baa:	4629      	mov	r1, r5
 8008bac:	f7f7 fb52 	bl	8000254 <__adddf3>
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	460d      	mov	r5, r1
 8008bb4:	e020      	b.n	8008bf8 <scalbn+0x90>
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008bbc:	3936      	subs	r1, #54	@ 0x36
 8008bbe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008bc2:	4296      	cmp	r6, r2
 8008bc4:	dd0d      	ble.n	8008be2 <scalbn+0x7a>
 8008bc6:	2d00      	cmp	r5, #0
 8008bc8:	a11b      	add	r1, pc, #108	@ (adr r1, 8008c38 <scalbn+0xd0>)
 8008bca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bce:	da02      	bge.n	8008bd6 <scalbn+0x6e>
 8008bd0:	a11b      	add	r1, pc, #108	@ (adr r1, 8008c40 <scalbn+0xd8>)
 8008bd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bd6:	a318      	add	r3, pc, #96	@ (adr r3, 8008c38 <scalbn+0xd0>)
 8008bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bdc:	f7f7 fcf0 	bl	80005c0 <__aeabi_dmul>
 8008be0:	e7e6      	b.n	8008bb0 <scalbn+0x48>
 8008be2:	1872      	adds	r2, r6, r1
 8008be4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008be8:	428a      	cmp	r2, r1
 8008bea:	dcec      	bgt.n	8008bc6 <scalbn+0x5e>
 8008bec:	2a00      	cmp	r2, #0
 8008bee:	dd06      	ble.n	8008bfe <scalbn+0x96>
 8008bf0:	f36f 531e 	bfc	r3, #20, #11
 8008bf4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008bf8:	ec45 4b10 	vmov	d0, r4, r5
 8008bfc:	bd70      	pop	{r4, r5, r6, pc}
 8008bfe:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008c02:	da08      	bge.n	8008c16 <scalbn+0xae>
 8008c04:	2d00      	cmp	r5, #0
 8008c06:	a10a      	add	r1, pc, #40	@ (adr r1, 8008c30 <scalbn+0xc8>)
 8008c08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c0c:	dac3      	bge.n	8008b96 <scalbn+0x2e>
 8008c0e:	a10e      	add	r1, pc, #56	@ (adr r1, 8008c48 <scalbn+0xe0>)
 8008c10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c14:	e7bf      	b.n	8008b96 <scalbn+0x2e>
 8008c16:	3236      	adds	r2, #54	@ 0x36
 8008c18:	f36f 531e 	bfc	r3, #20, #11
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008c22:	2200      	movs	r2, #0
 8008c24:	4b0c      	ldr	r3, [pc, #48]	@ (8008c58 <scalbn+0xf0>)
 8008c26:	4629      	mov	r1, r5
 8008c28:	e7d8      	b.n	8008bdc <scalbn+0x74>
 8008c2a:	bf00      	nop
 8008c2c:	f3af 8000 	nop.w
 8008c30:	c2f8f359 	.word	0xc2f8f359
 8008c34:	01a56e1f 	.word	0x01a56e1f
 8008c38:	8800759c 	.word	0x8800759c
 8008c3c:	7e37e43c 	.word	0x7e37e43c
 8008c40:	8800759c 	.word	0x8800759c
 8008c44:	fe37e43c 	.word	0xfe37e43c
 8008c48:	c2f8f359 	.word	0xc2f8f359
 8008c4c:	81a56e1f 	.word	0x81a56e1f
 8008c50:	43500000 	.word	0x43500000
 8008c54:	ffff3cb0 	.word	0xffff3cb0
 8008c58:	3c900000 	.word	0x3c900000

08008c5c <with_errno>:
 8008c5c:	b510      	push	{r4, lr}
 8008c5e:	ed2d 8b02 	vpush	{d8}
 8008c62:	eeb0 8a40 	vmov.f32	s16, s0
 8008c66:	eef0 8a60 	vmov.f32	s17, s1
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	f001 faa6 	bl	800a1bc <__errno>
 8008c70:	6004      	str	r4, [r0, #0]
 8008c72:	eeb0 0a48 	vmov.f32	s0, s16
 8008c76:	eef0 0a68 	vmov.f32	s1, s17
 8008c7a:	ecbd 8b02 	vpop	{d8}
 8008c7e:	bd10      	pop	{r4, pc}

08008c80 <xflow>:
 8008c80:	4603      	mov	r3, r0
 8008c82:	b507      	push	{r0, r1, r2, lr}
 8008c84:	ec51 0b10 	vmov	r0, r1, d0
 8008c88:	b183      	cbz	r3, 8008cac <xflow+0x2c>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008c90:	e9cd 2300 	strd	r2, r3, [sp]
 8008c94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c98:	f7f7 fc92 	bl	80005c0 <__aeabi_dmul>
 8008c9c:	ec41 0b10 	vmov	d0, r0, r1
 8008ca0:	2022      	movs	r0, #34	@ 0x22
 8008ca2:	b003      	add	sp, #12
 8008ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ca8:	f7ff bfd8 	b.w	8008c5c <with_errno>
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	e7ee      	b.n	8008c90 <xflow+0x10>
 8008cb2:	0000      	movs	r0, r0
 8008cb4:	0000      	movs	r0, r0
	...

08008cb8 <__math_uflow>:
 8008cb8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008cc0 <__math_uflow+0x8>
 8008cbc:	f7ff bfe0 	b.w	8008c80 <xflow>
 8008cc0:	00000000 	.word	0x00000000
 8008cc4:	10000000 	.word	0x10000000

08008cc8 <__math_oflow>:
 8008cc8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008cd0 <__math_oflow+0x8>
 8008ccc:	f7ff bfd8 	b.w	8008c80 <xflow>
 8008cd0:	00000000 	.word	0x00000000
 8008cd4:	70000000 	.word	0x70000000

08008cd8 <__ieee754_sqrt>:
 8008cd8:	4a69      	ldr	r2, [pc, #420]	@ (8008e80 <__ieee754_sqrt+0x1a8>)
 8008cda:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cde:	ec55 4b10 	vmov	r4, r5, d0
 8008ce2:	43aa      	bics	r2, r5
 8008ce4:	462b      	mov	r3, r5
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	d110      	bne.n	8008d0c <__ieee754_sqrt+0x34>
 8008cea:	4622      	mov	r2, r4
 8008cec:	4620      	mov	r0, r4
 8008cee:	4629      	mov	r1, r5
 8008cf0:	f7f7 fc66 	bl	80005c0 <__aeabi_dmul>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	f7f7 faaa 	bl	8000254 <__adddf3>
 8008d00:	4604      	mov	r4, r0
 8008d02:	460d      	mov	r5, r1
 8008d04:	ec45 4b10 	vmov	d0, r4, r5
 8008d08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d0c:	2d00      	cmp	r5, #0
 8008d0e:	dc0e      	bgt.n	8008d2e <__ieee754_sqrt+0x56>
 8008d10:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8008d14:	4322      	orrs	r2, r4
 8008d16:	d0f5      	beq.n	8008d04 <__ieee754_sqrt+0x2c>
 8008d18:	b19d      	cbz	r5, 8008d42 <__ieee754_sqrt+0x6a>
 8008d1a:	4622      	mov	r2, r4
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	4629      	mov	r1, r5
 8008d20:	f7f7 fa96 	bl	8000250 <__aeabi_dsub>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	f7f7 fd74 	bl	8000814 <__aeabi_ddiv>
 8008d2c:	e7e8      	b.n	8008d00 <__ieee754_sqrt+0x28>
 8008d2e:	152a      	asrs	r2, r5, #20
 8008d30:	d115      	bne.n	8008d5e <__ieee754_sqrt+0x86>
 8008d32:	2000      	movs	r0, #0
 8008d34:	e009      	b.n	8008d4a <__ieee754_sqrt+0x72>
 8008d36:	0acb      	lsrs	r3, r1, #11
 8008d38:	3a15      	subs	r2, #21
 8008d3a:	0549      	lsls	r1, r1, #21
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d0fa      	beq.n	8008d36 <__ieee754_sqrt+0x5e>
 8008d40:	e7f7      	b.n	8008d32 <__ieee754_sqrt+0x5a>
 8008d42:	462a      	mov	r2, r5
 8008d44:	e7fa      	b.n	8008d3c <__ieee754_sqrt+0x64>
 8008d46:	005b      	lsls	r3, r3, #1
 8008d48:	3001      	adds	r0, #1
 8008d4a:	02dc      	lsls	r4, r3, #11
 8008d4c:	d5fb      	bpl.n	8008d46 <__ieee754_sqrt+0x6e>
 8008d4e:	1e44      	subs	r4, r0, #1
 8008d50:	1b12      	subs	r2, r2, r4
 8008d52:	f1c0 0420 	rsb	r4, r0, #32
 8008d56:	fa21 f404 	lsr.w	r4, r1, r4
 8008d5a:	4081      	lsls	r1, r0
 8008d5c:	4323      	orrs	r3, r4
 8008d5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d62:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8008d66:	07d2      	lsls	r2, r2, #31
 8008d68:	f04f 0600 	mov.w	r6, #0
 8008d6c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d70:	ea4f 0767 	mov.w	r7, r7, asr #1
 8008d74:	f04f 0016 	mov.w	r0, #22
 8008d78:	4632      	mov	r2, r6
 8008d7a:	bf58      	it	pl
 8008d7c:	005b      	lslpl	r3, r3, #1
 8008d7e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8008d82:	bf5c      	itt	pl
 8008d84:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8008d88:	0049      	lslpl	r1, r1, #1
 8008d8a:	005b      	lsls	r3, r3, #1
 8008d8c:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8008d90:	0049      	lsls	r1, r1, #1
 8008d92:	1915      	adds	r5, r2, r4
 8008d94:	429d      	cmp	r5, r3
 8008d96:	bfde      	ittt	le
 8008d98:	192a      	addle	r2, r5, r4
 8008d9a:	1b5b      	suble	r3, r3, r5
 8008d9c:	1936      	addle	r6, r6, r4
 8008d9e:	0fcd      	lsrs	r5, r1, #31
 8008da0:	3801      	subs	r0, #1
 8008da2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008da6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8008daa:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008dae:	d1f0      	bne.n	8008d92 <__ieee754_sqrt+0xba>
 8008db0:	4605      	mov	r5, r0
 8008db2:	2420      	movs	r4, #32
 8008db4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8008db8:	4293      	cmp	r3, r2
 8008dba:	eb0c 0e00 	add.w	lr, ip, r0
 8008dbe:	dc02      	bgt.n	8008dc6 <__ieee754_sqrt+0xee>
 8008dc0:	d113      	bne.n	8008dea <__ieee754_sqrt+0x112>
 8008dc2:	458e      	cmp	lr, r1
 8008dc4:	d811      	bhi.n	8008dea <__ieee754_sqrt+0x112>
 8008dc6:	f1be 0f00 	cmp.w	lr, #0
 8008dca:	eb0e 000c 	add.w	r0, lr, ip
 8008dce:	da3f      	bge.n	8008e50 <__ieee754_sqrt+0x178>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	db3d      	blt.n	8008e50 <__ieee754_sqrt+0x178>
 8008dd4:	f102 0801 	add.w	r8, r2, #1
 8008dd8:	1a9b      	subs	r3, r3, r2
 8008dda:	458e      	cmp	lr, r1
 8008ddc:	4465      	add	r5, ip
 8008dde:	eba1 010e 	sub.w	r1, r1, lr
 8008de2:	bf88      	it	hi
 8008de4:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008de8:	4642      	mov	r2, r8
 8008dea:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008dee:	3c01      	subs	r4, #1
 8008df0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008df4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008df8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008dfc:	d1dc      	bne.n	8008db8 <__ieee754_sqrt+0xe0>
 8008dfe:	4319      	orrs	r1, r3
 8008e00:	d01b      	beq.n	8008e3a <__ieee754_sqrt+0x162>
 8008e02:	f8df a080 	ldr.w	sl, [pc, #128]	@ 8008e84 <__ieee754_sqrt+0x1ac>
 8008e06:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8008e88 <__ieee754_sqrt+0x1b0>
 8008e0a:	e9da 0100 	ldrd	r0, r1, [sl]
 8008e0e:	e9db 2300 	ldrd	r2, r3, [fp]
 8008e12:	e9da 8900 	ldrd	r8, r9, [sl]
 8008e16:	f7f7 fa1b 	bl	8000250 <__aeabi_dsub>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	4640      	mov	r0, r8
 8008e20:	4649      	mov	r1, r9
 8008e22:	f7f7 fe49 	bl	8000ab8 <__aeabi_dcmple>
 8008e26:	b140      	cbz	r0, 8008e3a <__ieee754_sqrt+0x162>
 8008e28:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008e2c:	e9da 0100 	ldrd	r0, r1, [sl]
 8008e30:	e9db 2300 	ldrd	r2, r3, [fp]
 8008e34:	d10e      	bne.n	8008e54 <__ieee754_sqrt+0x17c>
 8008e36:	3601      	adds	r6, #1
 8008e38:	4625      	mov	r5, r4
 8008e3a:	1073      	asrs	r3, r6, #1
 8008e3c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8008e40:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8008e44:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8008e48:	086b      	lsrs	r3, r5, #1
 8008e4a:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8008e4e:	e757      	b.n	8008d00 <__ieee754_sqrt+0x28>
 8008e50:	4690      	mov	r8, r2
 8008e52:	e7c1      	b.n	8008dd8 <__ieee754_sqrt+0x100>
 8008e54:	e9da 8900 	ldrd	r8, r9, [sl]
 8008e58:	f7f7 f9fc 	bl	8000254 <__adddf3>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4640      	mov	r0, r8
 8008e62:	4649      	mov	r1, r9
 8008e64:	f7f7 fe1e 	bl	8000aa4 <__aeabi_dcmplt>
 8008e68:	b128      	cbz	r0, 8008e76 <__ieee754_sqrt+0x19e>
 8008e6a:	1cab      	adds	r3, r5, #2
 8008e6c:	f105 0502 	add.w	r5, r5, #2
 8008e70:	bf08      	it	eq
 8008e72:	3601      	addeq	r6, #1
 8008e74:	e7e1      	b.n	8008e3a <__ieee754_sqrt+0x162>
 8008e76:	1c6b      	adds	r3, r5, #1
 8008e78:	f023 0501 	bic.w	r5, r3, #1
 8008e7c:	e7dd      	b.n	8008e3a <__ieee754_sqrt+0x162>
 8008e7e:	bf00      	nop
 8008e80:	7ff00000 	.word	0x7ff00000
 8008e84:	0800c418 	.word	0x0800c418
 8008e88:	0800c410 	.word	0x0800c410
 8008e8c:	00000000 	.word	0x00000000

08008e90 <__kernel_rem_pio2>:
 8008e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e94:	ed2d 8b02 	vpush	{d8}
 8008e98:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8008e9c:	f112 0f14 	cmn.w	r2, #20
 8008ea0:	f04f 0500 	mov.w	r5, #0
 8008ea4:	9306      	str	r3, [sp, #24]
 8008ea6:	bfa8      	it	ge
 8008ea8:	1ed4      	subge	r4, r2, #3
 8008eaa:	4bc3      	ldr	r3, [pc, #780]	@ (80091b8 <__kernel_rem_pio2+0x328>)
 8008eac:	bfb8      	it	lt
 8008eae:	2400      	movlt	r4, #0
 8008eb0:	9104      	str	r1, [sp, #16]
 8008eb2:	ae20      	add	r6, sp, #128	@ 0x80
 8008eb4:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8008eb6:	9008      	str	r0, [sp, #32]
 8008eb8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	9b06      	ldr	r3, [sp, #24]
 8008ec0:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ec4:	9305      	str	r3, [sp, #20]
 8008ec6:	bfa4      	itt	ge
 8008ec8:	2318      	movge	r3, #24
 8008eca:	fb94 f4f3 	sdivge	r4, r4, r3
 8008ece:	f06f 0317 	mvn.w	r3, #23
 8008ed2:	fb04 3303 	mla	r3, r4, r3, r3
 8008ed6:	eb03 0b02 	add.w	fp, r3, r2
 8008eda:	9b00      	ldr	r3, [sp, #0]
 8008edc:	9a05      	ldr	r2, [sp, #20]
 8008ede:	eb03 0802 	add.w	r8, r3, r2
 8008ee2:	1aa7      	subs	r7, r4, r2
 8008ee4:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8008ee6:	ed9f 8bb0 	vldr	d8, [pc, #704]	@ 80091a8 <__kernel_rem_pio2+0x318>
 8008eea:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008eee:	4545      	cmp	r5, r8
 8008ef0:	dd12      	ble.n	8008f18 <__kernel_rem_pio2+0x88>
 8008ef2:	aa20      	add	r2, sp, #128	@ 0x80
 8008ef4:	9b06      	ldr	r3, [sp, #24]
 8008ef6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8008efa:	2700      	movs	r7, #0
 8008efc:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008f00:	9b00      	ldr	r3, [sp, #0]
 8008f02:	429f      	cmp	r7, r3
 8008f04:	dc2e      	bgt.n	8008f64 <__kernel_rem_pio2+0xd4>
 8008f06:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f0a:	46a8      	mov	r8, r5
 8008f0c:	2600      	movs	r6, #0
 8008f0e:	ed9f 7ba6 	vldr	d7, [pc, #664]	@ 80091a8 <__kernel_rem_pio2+0x318>
 8008f12:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008f16:	e01b      	b.n	8008f50 <__kernel_rem_pio2+0xc0>
 8008f18:	42ef      	cmn	r7, r5
 8008f1a:	d407      	bmi.n	8008f2c <__kernel_rem_pio2+0x9c>
 8008f1c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008f20:	f7f7 fae4 	bl	80004ec <__aeabi_i2d>
 8008f24:	3501      	adds	r5, #1
 8008f26:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008f2a:	e7e0      	b.n	8008eee <__kernel_rem_pio2+0x5e>
 8008f2c:	ec51 0b18 	vmov	r0, r1, d8
 8008f30:	e7f8      	b.n	8008f24 <__kernel_rem_pio2+0x94>
 8008f32:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8008f36:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008f3a:	3601      	adds	r6, #1
 8008f3c:	f7f7 fb40 	bl	80005c0 <__aeabi_dmul>
 8008f40:	4602      	mov	r2, r0
 8008f42:	460b      	mov	r3, r1
 8008f44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f48:	f7f7 f984 	bl	8000254 <__adddf3>
 8008f4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f50:	9b05      	ldr	r3, [sp, #20]
 8008f52:	429e      	cmp	r6, r3
 8008f54:	dded      	ble.n	8008f32 <__kernel_rem_pio2+0xa2>
 8008f56:	3701      	adds	r7, #1
 8008f58:	3508      	adds	r5, #8
 8008f5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f5e:	ecaa 7b02 	vstmia	sl!, {d7}
 8008f62:	e7cd      	b.n	8008f00 <__kernel_rem_pio2+0x70>
 8008f64:	9b00      	ldr	r3, [sp, #0]
 8008f66:	aa0c      	add	r2, sp, #48	@ 0x30
 8008f68:	f8dd 8000 	ldr.w	r8, [sp]
 8008f6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f70:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f72:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8008f74:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008f78:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f7a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8008f7e:	ac0c      	add	r4, sp, #48	@ 0x30
 8008f80:	46c2      	mov	sl, r8
 8008f82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f84:	ab98      	add	r3, sp, #608	@ 0x260
 8008f86:	46a1      	mov	r9, r4
 8008f88:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008f8c:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8008f90:	ab70      	add	r3, sp, #448	@ 0x1c0
 8008f92:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8008f96:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008f9a:	f1ba 0f00 	cmp.w	sl, #0
 8008f9e:	dc77      	bgt.n	8009090 <__kernel_rem_pio2+0x200>
 8008fa0:	4658      	mov	r0, fp
 8008fa2:	ed9d 0b02 	vldr	d0, [sp, #8]
 8008fa6:	f7ff fddf 	bl	8008b68 <scalbn>
 8008faa:	2200      	movs	r2, #0
 8008fac:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8008fb0:	ec57 6b10 	vmov	r6, r7, d0
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	4639      	mov	r1, r7
 8008fb8:	f7f7 fb02 	bl	80005c0 <__aeabi_dmul>
 8008fbc:	ec41 0b10 	vmov	d0, r0, r1
 8008fc0:	f000 fab6 	bl	8009530 <floor>
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	4b7d      	ldr	r3, [pc, #500]	@ (80091bc <__kernel_rem_pio2+0x32c>)
 8008fc8:	ec51 0b10 	vmov	r0, r1, d0
 8008fcc:	f7f7 faf8 	bl	80005c0 <__aeabi_dmul>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	4639      	mov	r1, r7
 8008fd8:	f7f7 f93a 	bl	8000250 <__aeabi_dsub>
 8008fdc:	460f      	mov	r7, r1
 8008fde:	4606      	mov	r6, r0
 8008fe0:	f7f7 fd9e 	bl	8000b20 <__aeabi_d2iz>
 8008fe4:	9002      	str	r0, [sp, #8]
 8008fe6:	f7f7 fa81 	bl	80004ec <__aeabi_i2d>
 8008fea:	4602      	mov	r2, r0
 8008fec:	460b      	mov	r3, r1
 8008fee:	4630      	mov	r0, r6
 8008ff0:	4639      	mov	r1, r7
 8008ff2:	f7f7 f92d 	bl	8000250 <__aeabi_dsub>
 8008ff6:	f1bb 0f00 	cmp.w	fp, #0
 8008ffa:	4606      	mov	r6, r0
 8008ffc:	460f      	mov	r7, r1
 8008ffe:	dd6c      	ble.n	80090da <__kernel_rem_pio2+0x24a>
 8009000:	f108 31ff 	add.w	r1, r8, #4294967295
 8009004:	ab0c      	add	r3, sp, #48	@ 0x30
 8009006:	f1cb 0018 	rsb	r0, fp, #24
 800900a:	9d02      	ldr	r5, [sp, #8]
 800900c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009010:	fa43 f200 	asr.w	r2, r3, r0
 8009014:	4415      	add	r5, r2
 8009016:	4082      	lsls	r2, r0
 8009018:	1a9b      	subs	r3, r3, r2
 800901a:	aa0c      	add	r2, sp, #48	@ 0x30
 800901c:	9502      	str	r5, [sp, #8]
 800901e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009022:	f1cb 0217 	rsb	r2, fp, #23
 8009026:	fa43 f902 	asr.w	r9, r3, r2
 800902a:	f1b9 0f00 	cmp.w	r9, #0
 800902e:	dd64      	ble.n	80090fa <__kernel_rem_pio2+0x26a>
 8009030:	9b02      	ldr	r3, [sp, #8]
 8009032:	2200      	movs	r2, #0
 8009034:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8009038:	3301      	adds	r3, #1
 800903a:	4615      	mov	r5, r2
 800903c:	9302      	str	r3, [sp, #8]
 800903e:	4590      	cmp	r8, r2
 8009040:	f300 80a1 	bgt.w	8009186 <__kernel_rem_pio2+0x2f6>
 8009044:	f1bb 0f00 	cmp.w	fp, #0
 8009048:	dd07      	ble.n	800905a <__kernel_rem_pio2+0x1ca>
 800904a:	f1bb 0f01 	cmp.w	fp, #1
 800904e:	f000 80c1 	beq.w	80091d4 <__kernel_rem_pio2+0x344>
 8009052:	f1bb 0f02 	cmp.w	fp, #2
 8009056:	f000 80c8 	beq.w	80091ea <__kernel_rem_pio2+0x35a>
 800905a:	f1b9 0f02 	cmp.w	r9, #2
 800905e:	d14c      	bne.n	80090fa <__kernel_rem_pio2+0x26a>
 8009060:	4632      	mov	r2, r6
 8009062:	463b      	mov	r3, r7
 8009064:	2000      	movs	r0, #0
 8009066:	4956      	ldr	r1, [pc, #344]	@ (80091c0 <__kernel_rem_pio2+0x330>)
 8009068:	f7f7 f8f2 	bl	8000250 <__aeabi_dsub>
 800906c:	4606      	mov	r6, r0
 800906e:	460f      	mov	r7, r1
 8009070:	2d00      	cmp	r5, #0
 8009072:	d042      	beq.n	80090fa <__kernel_rem_pio2+0x26a>
 8009074:	4658      	mov	r0, fp
 8009076:	ed9f 0b4e 	vldr	d0, [pc, #312]	@ 80091b0 <__kernel_rem_pio2+0x320>
 800907a:	f7ff fd75 	bl	8008b68 <scalbn>
 800907e:	4630      	mov	r0, r6
 8009080:	4639      	mov	r1, r7
 8009082:	ec53 2b10 	vmov	r2, r3, d0
 8009086:	f7f7 f8e3 	bl	8000250 <__aeabi_dsub>
 800908a:	4606      	mov	r6, r0
 800908c:	460f      	mov	r7, r1
 800908e:	e034      	b.n	80090fa <__kernel_rem_pio2+0x26a>
 8009090:	2200      	movs	r2, #0
 8009092:	4b4c      	ldr	r3, [pc, #304]	@ (80091c4 <__kernel_rem_pio2+0x334>)
 8009094:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009098:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800909c:	f7f7 fa90 	bl	80005c0 <__aeabi_dmul>
 80090a0:	f7f7 fd3e 	bl	8000b20 <__aeabi_d2iz>
 80090a4:	f7f7 fa22 	bl	80004ec <__aeabi_i2d>
 80090a8:	2200      	movs	r2, #0
 80090aa:	4b47      	ldr	r3, [pc, #284]	@ (80091c8 <__kernel_rem_pio2+0x338>)
 80090ac:	4606      	mov	r6, r0
 80090ae:	460f      	mov	r7, r1
 80090b0:	f7f7 fa86 	bl	80005c0 <__aeabi_dmul>
 80090b4:	4602      	mov	r2, r0
 80090b6:	460b      	mov	r3, r1
 80090b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090bc:	f7f7 f8c8 	bl	8000250 <__aeabi_dsub>
 80090c0:	f7f7 fd2e 	bl	8000b20 <__aeabi_d2iz>
 80090c4:	4639      	mov	r1, r7
 80090c6:	f849 0b04 	str.w	r0, [r9], #4
 80090ca:	4630      	mov	r0, r6
 80090cc:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80090d0:	f7f7 f8c0 	bl	8000254 <__adddf3>
 80090d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090d8:	e75f      	b.n	8008f9a <__kernel_rem_pio2+0x10a>
 80090da:	d107      	bne.n	80090ec <__kernel_rem_pio2+0x25c>
 80090dc:	f108 33ff 	add.w	r3, r8, #4294967295
 80090e0:	aa0c      	add	r2, sp, #48	@ 0x30
 80090e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090e6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80090ea:	e79e      	b.n	800902a <__kernel_rem_pio2+0x19a>
 80090ec:	2200      	movs	r2, #0
 80090ee:	4b37      	ldr	r3, [pc, #220]	@ (80091cc <__kernel_rem_pio2+0x33c>)
 80090f0:	f7f7 fcec 	bl	8000acc <__aeabi_dcmpge>
 80090f4:	2800      	cmp	r0, #0
 80090f6:	d143      	bne.n	8009180 <__kernel_rem_pio2+0x2f0>
 80090f8:	4681      	mov	r9, r0
 80090fa:	2200      	movs	r2, #0
 80090fc:	2300      	movs	r3, #0
 80090fe:	4630      	mov	r0, r6
 8009100:	4639      	mov	r1, r7
 8009102:	f7f7 fcc5 	bl	8000a90 <__aeabi_dcmpeq>
 8009106:	2800      	cmp	r0, #0
 8009108:	f000 80c1 	beq.w	800928e <__kernel_rem_pio2+0x3fe>
 800910c:	f108 33ff 	add.w	r3, r8, #4294967295
 8009110:	2200      	movs	r2, #0
 8009112:	9900      	ldr	r1, [sp, #0]
 8009114:	428b      	cmp	r3, r1
 8009116:	da70      	bge.n	80091fa <__kernel_rem_pio2+0x36a>
 8009118:	2a00      	cmp	r2, #0
 800911a:	f000 808b 	beq.w	8009234 <__kernel_rem_pio2+0x3a4>
 800911e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009122:	ab0c      	add	r3, sp, #48	@ 0x30
 8009124:	f1ab 0b18 	sub.w	fp, fp, #24
 8009128:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d0f6      	beq.n	800911e <__kernel_rem_pio2+0x28e>
 8009130:	4658      	mov	r0, fp
 8009132:	4646      	mov	r6, r8
 8009134:	f04f 0a00 	mov.w	sl, #0
 8009138:	f8df b088 	ldr.w	fp, [pc, #136]	@ 80091c4 <__kernel_rem_pio2+0x334>
 800913c:	ed9f 0b1c 	vldr	d0, [pc, #112]	@ 80091b0 <__kernel_rem_pio2+0x320>
 8009140:	f7ff fd12 	bl	8008b68 <scalbn>
 8009144:	f108 0301 	add.w	r3, r8, #1
 8009148:	00da      	lsls	r2, r3, #3
 800914a:	9205      	str	r2, [sp, #20]
 800914c:	aa70      	add	r2, sp, #448	@ 0x1c0
 800914e:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8009152:	ec55 4b10 	vmov	r4, r5, d0
 8009156:	2e00      	cmp	r6, #0
 8009158:	f280 80d1 	bge.w	80092fe <__kernel_rem_pio2+0x46e>
 800915c:	4644      	mov	r4, r8
 800915e:	2c00      	cmp	r4, #0
 8009160:	f2c0 80ff 	blt.w	8009362 <__kernel_rem_pio2+0x4d2>
 8009164:	4b1a      	ldr	r3, [pc, #104]	@ (80091d0 <__kernel_rem_pio2+0x340>)
 8009166:	f04f 0a00 	mov.w	sl, #0
 800916a:	f04f 0b00 	mov.w	fp, #0
 800916e:	2600      	movs	r6, #0
 8009170:	461f      	mov	r7, r3
 8009172:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009174:	eba8 0504 	sub.w	r5, r8, r4
 8009178:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800917c:	9306      	str	r3, [sp, #24]
 800917e:	e0e4      	b.n	800934a <__kernel_rem_pio2+0x4ba>
 8009180:	f04f 0902 	mov.w	r9, #2
 8009184:	e754      	b.n	8009030 <__kernel_rem_pio2+0x1a0>
 8009186:	f854 3b04 	ldr.w	r3, [r4], #4
 800918a:	b945      	cbnz	r5, 800919e <__kernel_rem_pio2+0x30e>
 800918c:	b123      	cbz	r3, 8009198 <__kernel_rem_pio2+0x308>
 800918e:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009192:	f844 3c04 	str.w	r3, [r4, #-4]
 8009196:	2301      	movs	r3, #1
 8009198:	3201      	adds	r2, #1
 800919a:	461d      	mov	r5, r3
 800919c:	e74f      	b.n	800903e <__kernel_rem_pio2+0x1ae>
 800919e:	1acb      	subs	r3, r1, r3
 80091a0:	e7f7      	b.n	8009192 <__kernel_rem_pio2+0x302>
 80091a2:	bf00      	nop
 80091a4:	f3af 8000 	nop.w
	...
 80091b4:	3ff00000 	.word	0x3ff00000
 80091b8:	0800c460 	.word	0x0800c460
 80091bc:	40200000 	.word	0x40200000
 80091c0:	3ff00000 	.word	0x3ff00000
 80091c4:	3e700000 	.word	0x3e700000
 80091c8:	41700000 	.word	0x41700000
 80091cc:	3fe00000 	.word	0x3fe00000
 80091d0:	0800c420 	.word	0x0800c420
 80091d4:	f108 32ff 	add.w	r2, r8, #4294967295
 80091d8:	ab0c      	add	r3, sp, #48	@ 0x30
 80091da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091de:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80091e2:	a90c      	add	r1, sp, #48	@ 0x30
 80091e4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80091e8:	e737      	b.n	800905a <__kernel_rem_pio2+0x1ca>
 80091ea:	f108 32ff 	add.w	r2, r8, #4294967295
 80091ee:	ab0c      	add	r3, sp, #48	@ 0x30
 80091f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80091f8:	e7f3      	b.n	80091e2 <__kernel_rem_pio2+0x352>
 80091fa:	a90c      	add	r1, sp, #48	@ 0x30
 80091fc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009200:	3b01      	subs	r3, #1
 8009202:	430a      	orrs	r2, r1
 8009204:	e785      	b.n	8009112 <__kernel_rem_pio2+0x282>
 8009206:	3401      	adds	r4, #1
 8009208:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800920c:	2a00      	cmp	r2, #0
 800920e:	d0fa      	beq.n	8009206 <__kernel_rem_pio2+0x376>
 8009210:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009212:	aa20      	add	r2, sp, #128	@ 0x80
 8009214:	f108 0701 	add.w	r7, r8, #1
 8009218:	4444      	add	r4, r8
 800921a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800921e:	eb0d 0503 	add.w	r5, sp, r3
 8009222:	9b06      	ldr	r3, [sp, #24]
 8009224:	4443      	add	r3, r8
 8009226:	3d98      	subs	r5, #152	@ 0x98
 8009228:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800922c:	42bc      	cmp	r4, r7
 800922e:	da04      	bge.n	800923a <__kernel_rem_pio2+0x3aa>
 8009230:	46a0      	mov	r8, r4
 8009232:	e6a2      	b.n	8008f7a <__kernel_rem_pio2+0xea>
 8009234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009236:	2401      	movs	r4, #1
 8009238:	e7e6      	b.n	8009208 <__kernel_rem_pio2+0x378>
 800923a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800923c:	f04f 0800 	mov.w	r8, #0
 8009240:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8009244:	f7f7 f952 	bl	80004ec <__aeabi_i2d>
 8009248:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800924c:	ed9f 7bb4 	vldr	d7, [pc, #720]	@ 8009520 <__kernel_rem_pio2+0x690>
 8009250:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009254:	46b2      	mov	sl, r6
 8009256:	ed8d 7b02 	vstr	d7, [sp, #8]
 800925a:	9b05      	ldr	r3, [sp, #20]
 800925c:	4598      	cmp	r8, r3
 800925e:	dd05      	ble.n	800926c <__kernel_rem_pio2+0x3dc>
 8009260:	3701      	adds	r7, #1
 8009262:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009266:	eca5 7b02 	vstmia	r5!, {d7}
 800926a:	e7df      	b.n	800922c <__kernel_rem_pio2+0x39c>
 800926c:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8009270:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009274:	f7f7 f9a4 	bl	80005c0 <__aeabi_dmul>
 8009278:	4602      	mov	r2, r0
 800927a:	460b      	mov	r3, r1
 800927c:	f108 0801 	add.w	r8, r8, #1
 8009280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009284:	f7f6 ffe6 	bl	8000254 <__adddf3>
 8009288:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800928c:	e7e5      	b.n	800925a <__kernel_rem_pio2+0x3ca>
 800928e:	f1cb 0000 	rsb	r0, fp, #0
 8009292:	ec47 6b10 	vmov	d0, r6, r7
 8009296:	f7ff fc67 	bl	8008b68 <scalbn>
 800929a:	2200      	movs	r2, #0
 800929c:	4ba2      	ldr	r3, [pc, #648]	@ (8009528 <__kernel_rem_pio2+0x698>)
 800929e:	ec55 4b10 	vmov	r4, r5, d0
 80092a2:	4620      	mov	r0, r4
 80092a4:	4629      	mov	r1, r5
 80092a6:	f7f7 fc11 	bl	8000acc <__aeabi_dcmpge>
 80092aa:	b300      	cbz	r0, 80092ee <__kernel_rem_pio2+0x45e>
 80092ac:	2200      	movs	r2, #0
 80092ae:	4b9f      	ldr	r3, [pc, #636]	@ (800952c <__kernel_rem_pio2+0x69c>)
 80092b0:	4620      	mov	r0, r4
 80092b2:	4629      	mov	r1, r5
 80092b4:	f7f7 f984 	bl	80005c0 <__aeabi_dmul>
 80092b8:	f10b 0b18 	add.w	fp, fp, #24
 80092bc:	f7f7 fc30 	bl	8000b20 <__aeabi_d2iz>
 80092c0:	4606      	mov	r6, r0
 80092c2:	f7f7 f913 	bl	80004ec <__aeabi_i2d>
 80092c6:	2200      	movs	r2, #0
 80092c8:	4b97      	ldr	r3, [pc, #604]	@ (8009528 <__kernel_rem_pio2+0x698>)
 80092ca:	f7f7 f979 	bl	80005c0 <__aeabi_dmul>
 80092ce:	460b      	mov	r3, r1
 80092d0:	4602      	mov	r2, r0
 80092d2:	4629      	mov	r1, r5
 80092d4:	4620      	mov	r0, r4
 80092d6:	f7f6 ffbb 	bl	8000250 <__aeabi_dsub>
 80092da:	f7f7 fc21 	bl	8000b20 <__aeabi_d2iz>
 80092de:	ab0c      	add	r3, sp, #48	@ 0x30
 80092e0:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80092e4:	f108 0801 	add.w	r8, r8, #1
 80092e8:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80092ec:	e720      	b.n	8009130 <__kernel_rem_pio2+0x2a0>
 80092ee:	4620      	mov	r0, r4
 80092f0:	4629      	mov	r1, r5
 80092f2:	f7f7 fc15 	bl	8000b20 <__aeabi_d2iz>
 80092f6:	ab0c      	add	r3, sp, #48	@ 0x30
 80092f8:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80092fc:	e718      	b.n	8009130 <__kernel_rem_pio2+0x2a0>
 80092fe:	ab0c      	add	r3, sp, #48	@ 0x30
 8009300:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009304:	3e01      	subs	r6, #1
 8009306:	f7f7 f8f1 	bl	80004ec <__aeabi_i2d>
 800930a:	4622      	mov	r2, r4
 800930c:	462b      	mov	r3, r5
 800930e:	f7f7 f957 	bl	80005c0 <__aeabi_dmul>
 8009312:	4652      	mov	r2, sl
 8009314:	465b      	mov	r3, fp
 8009316:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800931a:	4620      	mov	r0, r4
 800931c:	4629      	mov	r1, r5
 800931e:	f7f7 f94f 	bl	80005c0 <__aeabi_dmul>
 8009322:	4604      	mov	r4, r0
 8009324:	460d      	mov	r5, r1
 8009326:	e716      	b.n	8009156 <__kernel_rem_pio2+0x2c6>
 8009328:	9906      	ldr	r1, [sp, #24]
 800932a:	3601      	adds	r6, #1
 800932c:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8009330:	9106      	str	r1, [sp, #24]
 8009332:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009336:	f7f7 f943 	bl	80005c0 <__aeabi_dmul>
 800933a:	4602      	mov	r2, r0
 800933c:	460b      	mov	r3, r1
 800933e:	4650      	mov	r0, sl
 8009340:	4659      	mov	r1, fp
 8009342:	f7f6 ff87 	bl	8000254 <__adddf3>
 8009346:	4682      	mov	sl, r0
 8009348:	468b      	mov	fp, r1
 800934a:	9b00      	ldr	r3, [sp, #0]
 800934c:	429e      	cmp	r6, r3
 800934e:	dc01      	bgt.n	8009354 <__kernel_rem_pio2+0x4c4>
 8009350:	42ae      	cmp	r6, r5
 8009352:	dde9      	ble.n	8009328 <__kernel_rem_pio2+0x498>
 8009354:	ab48      	add	r3, sp, #288	@ 0x120
 8009356:	3c01      	subs	r4, #1
 8009358:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800935c:	e9c5 ab00 	strd	sl, fp, [r5]
 8009360:	e6fd      	b.n	800915e <__kernel_rem_pio2+0x2ce>
 8009362:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009364:	2b02      	cmp	r3, #2
 8009366:	dc0b      	bgt.n	8009380 <__kernel_rem_pio2+0x4f0>
 8009368:	2b00      	cmp	r3, #0
 800936a:	dc35      	bgt.n	80093d8 <__kernel_rem_pio2+0x548>
 800936c:	d059      	beq.n	8009422 <__kernel_rem_pio2+0x592>
 800936e:	9b02      	ldr	r3, [sp, #8]
 8009370:	f003 0007 	and.w	r0, r3, #7
 8009374:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8009378:	ecbd 8b02 	vpop	{d8}
 800937c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009380:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009382:	2b03      	cmp	r3, #3
 8009384:	d1f3      	bne.n	800936e <__kernel_rem_pio2+0x4de>
 8009386:	9b05      	ldr	r3, [sp, #20]
 8009388:	46c2      	mov	sl, r8
 800938a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800938e:	eb0d 0403 	add.w	r4, sp, r3
 8009392:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8009396:	4625      	mov	r5, r4
 8009398:	f1ba 0f00 	cmp.w	sl, #0
 800939c:	dc69      	bgt.n	8009472 <__kernel_rem_pio2+0x5e2>
 800939e:	4645      	mov	r5, r8
 80093a0:	2d01      	cmp	r5, #1
 80093a2:	f300 8087 	bgt.w	80094b4 <__kernel_rem_pio2+0x624>
 80093a6:	9c05      	ldr	r4, [sp, #20]
 80093a8:	ab48      	add	r3, sp, #288	@ 0x120
 80093aa:	2000      	movs	r0, #0
 80093ac:	2100      	movs	r1, #0
 80093ae:	441c      	add	r4, r3
 80093b0:	f1b8 0f01 	cmp.w	r8, #1
 80093b4:	f300 809c 	bgt.w	80094f0 <__kernel_rem_pio2+0x660>
 80093b8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 80093bc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 80093c0:	f1b9 0f00 	cmp.w	r9, #0
 80093c4:	f040 809b 	bne.w	80094fe <__kernel_rem_pio2+0x66e>
 80093c8:	9b04      	ldr	r3, [sp, #16]
 80093ca:	e9c3 5600 	strd	r5, r6, [r3]
 80093ce:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80093d2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80093d6:	e7ca      	b.n	800936e <__kernel_rem_pio2+0x4de>
 80093d8:	9d05      	ldr	r5, [sp, #20]
 80093da:	ab48      	add	r3, sp, #288	@ 0x120
 80093dc:	4644      	mov	r4, r8
 80093de:	2000      	movs	r0, #0
 80093e0:	441d      	add	r5, r3
 80093e2:	2100      	movs	r1, #0
 80093e4:	2c00      	cmp	r4, #0
 80093e6:	da35      	bge.n	8009454 <__kernel_rem_pio2+0x5c4>
 80093e8:	f1b9 0f00 	cmp.w	r9, #0
 80093ec:	d038      	beq.n	8009460 <__kernel_rem_pio2+0x5d0>
 80093ee:	4602      	mov	r2, r0
 80093f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80093f4:	9c04      	ldr	r4, [sp, #16]
 80093f6:	ad4a      	add	r5, sp, #296	@ 0x128
 80093f8:	e9c4 2300 	strd	r2, r3, [r4]
 80093fc:	2401      	movs	r4, #1
 80093fe:	4602      	mov	r2, r0
 8009400:	460b      	mov	r3, r1
 8009402:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8009406:	f7f6 ff23 	bl	8000250 <__aeabi_dsub>
 800940a:	45a0      	cmp	r8, r4
 800940c:	da2b      	bge.n	8009466 <__kernel_rem_pio2+0x5d6>
 800940e:	f1b9 0f00 	cmp.w	r9, #0
 8009412:	d002      	beq.n	800941a <__kernel_rem_pio2+0x58a>
 8009414:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009418:	4619      	mov	r1, r3
 800941a:	9b04      	ldr	r3, [sp, #16]
 800941c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009420:	e7a5      	b.n	800936e <__kernel_rem_pio2+0x4de>
 8009422:	9c05      	ldr	r4, [sp, #20]
 8009424:	ab48      	add	r3, sp, #288	@ 0x120
 8009426:	2000      	movs	r0, #0
 8009428:	2100      	movs	r1, #0
 800942a:	441c      	add	r4, r3
 800942c:	f1b8 0f00 	cmp.w	r8, #0
 8009430:	da09      	bge.n	8009446 <__kernel_rem_pio2+0x5b6>
 8009432:	f1b9 0f00 	cmp.w	r9, #0
 8009436:	d002      	beq.n	800943e <__kernel_rem_pio2+0x5ae>
 8009438:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800943c:	4619      	mov	r1, r3
 800943e:	9b04      	ldr	r3, [sp, #16]
 8009440:	e9c3 0100 	strd	r0, r1, [r3]
 8009444:	e793      	b.n	800936e <__kernel_rem_pio2+0x4de>
 8009446:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800944a:	f108 38ff 	add.w	r8, r8, #4294967295
 800944e:	f7f6 ff01 	bl	8000254 <__adddf3>
 8009452:	e7eb      	b.n	800942c <__kernel_rem_pio2+0x59c>
 8009454:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009458:	3c01      	subs	r4, #1
 800945a:	f7f6 fefb 	bl	8000254 <__adddf3>
 800945e:	e7c1      	b.n	80093e4 <__kernel_rem_pio2+0x554>
 8009460:	4602      	mov	r2, r0
 8009462:	460b      	mov	r3, r1
 8009464:	e7c6      	b.n	80093f4 <__kernel_rem_pio2+0x564>
 8009466:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800946a:	3401      	adds	r4, #1
 800946c:	f7f6 fef2 	bl	8000254 <__adddf3>
 8009470:	e7cb      	b.n	800940a <__kernel_rem_pio2+0x57a>
 8009472:	ed35 7b02 	vldmdb	r5!, {d7}
 8009476:	f10a 3aff 	add.w	sl, sl, #4294967295
 800947a:	ed8d 7b00 	vstr	d7, [sp]
 800947e:	ed95 7b02 	vldr	d7, [r5, #8]
 8009482:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009486:	ec53 2b17 	vmov	r2, r3, d7
 800948a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800948e:	f7f6 fee1 	bl	8000254 <__adddf3>
 8009492:	4602      	mov	r2, r0
 8009494:	460b      	mov	r3, r1
 8009496:	4606      	mov	r6, r0
 8009498:	460f      	mov	r7, r1
 800949a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800949e:	f7f6 fed7 	bl	8000250 <__aeabi_dsub>
 80094a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80094a6:	f7f6 fed5 	bl	8000254 <__adddf3>
 80094aa:	e9c5 6700 	strd	r6, r7, [r5]
 80094ae:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80094b2:	e771      	b.n	8009398 <__kernel_rem_pio2+0x508>
 80094b4:	ed34 7b02 	vldmdb	r4!, {d7}
 80094b8:	3d01      	subs	r5, #1
 80094ba:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80094be:	ec51 0b17 	vmov	r0, r1, d7
 80094c2:	4652      	mov	r2, sl
 80094c4:	465b      	mov	r3, fp
 80094c6:	ed8d 7b00 	vstr	d7, [sp]
 80094ca:	f7f6 fec3 	bl	8000254 <__adddf3>
 80094ce:	4602      	mov	r2, r0
 80094d0:	460b      	mov	r3, r1
 80094d2:	4606      	mov	r6, r0
 80094d4:	460f      	mov	r7, r1
 80094d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094da:	f7f6 feb9 	bl	8000250 <__aeabi_dsub>
 80094de:	4652      	mov	r2, sl
 80094e0:	465b      	mov	r3, fp
 80094e2:	f7f6 feb7 	bl	8000254 <__adddf3>
 80094e6:	e9c4 6700 	strd	r6, r7, [r4]
 80094ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80094ee:	e757      	b.n	80093a0 <__kernel_rem_pio2+0x510>
 80094f0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80094f4:	f108 38ff 	add.w	r8, r8, #4294967295
 80094f8:	f7f6 feac 	bl	8000254 <__adddf3>
 80094fc:	e758      	b.n	80093b0 <__kernel_rem_pio2+0x520>
 80094fe:	9b04      	ldr	r3, [sp, #16]
 8009500:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8009504:	9a04      	ldr	r2, [sp, #16]
 8009506:	601d      	str	r5, [r3, #0]
 8009508:	605c      	str	r4, [r3, #4]
 800950a:	609f      	str	r7, [r3, #8]
 800950c:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8009510:	6110      	str	r0, [r2, #16]
 8009512:	60d3      	str	r3, [r2, #12]
 8009514:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009518:	6153      	str	r3, [r2, #20]
 800951a:	e728      	b.n	800936e <__kernel_rem_pio2+0x4de>
 800951c:	f3af 8000 	nop.w
	...
 8009528:	41700000 	.word	0x41700000
 800952c:	3e700000 	.word	0x3e700000

08009530 <floor>:
 8009530:	ec51 0b10 	vmov	r0, r1, d0
 8009534:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800953c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8009540:	460c      	mov	r4, r1
 8009542:	4605      	mov	r5, r0
 8009544:	4680      	mov	r8, r0
 8009546:	2e13      	cmp	r6, #19
 8009548:	dc35      	bgt.n	80095b6 <floor+0x86>
 800954a:	2e00      	cmp	r6, #0
 800954c:	da17      	bge.n	800957e <floor+0x4e>
 800954e:	a334      	add	r3, pc, #208	@ (adr r3, 8009620 <floor+0xf0>)
 8009550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009554:	f7f6 fe7e 	bl	8000254 <__adddf3>
 8009558:	2200      	movs	r2, #0
 800955a:	2300      	movs	r3, #0
 800955c:	f7f7 fac0 	bl	8000ae0 <__aeabi_dcmpgt>
 8009560:	b150      	cbz	r0, 8009578 <floor+0x48>
 8009562:	2c00      	cmp	r4, #0
 8009564:	da56      	bge.n	8009614 <floor+0xe4>
 8009566:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800956a:	432c      	orrs	r4, r5
 800956c:	2500      	movs	r5, #0
 800956e:	42ac      	cmp	r4, r5
 8009570:	4c2d      	ldr	r4, [pc, #180]	@ (8009628 <floor+0xf8>)
 8009572:	bf08      	it	eq
 8009574:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009578:	4621      	mov	r1, r4
 800957a:	4628      	mov	r0, r5
 800957c:	e024      	b.n	80095c8 <floor+0x98>
 800957e:	4f2b      	ldr	r7, [pc, #172]	@ (800962c <floor+0xfc>)
 8009580:	4137      	asrs	r7, r6
 8009582:	ea01 0307 	and.w	r3, r1, r7
 8009586:	4303      	orrs	r3, r0
 8009588:	d01e      	beq.n	80095c8 <floor+0x98>
 800958a:	a325      	add	r3, pc, #148	@ (adr r3, 8009620 <floor+0xf0>)
 800958c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009590:	f7f6 fe60 	bl	8000254 <__adddf3>
 8009594:	2200      	movs	r2, #0
 8009596:	2300      	movs	r3, #0
 8009598:	f7f7 faa2 	bl	8000ae0 <__aeabi_dcmpgt>
 800959c:	2800      	cmp	r0, #0
 800959e:	d0eb      	beq.n	8009578 <floor+0x48>
 80095a0:	2c00      	cmp	r4, #0
 80095a2:	f04f 0500 	mov.w	r5, #0
 80095a6:	bfbe      	ittt	lt
 80095a8:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80095ac:	4133      	asrlt	r3, r6
 80095ae:	18e4      	addlt	r4, r4, r3
 80095b0:	ea24 0407 	bic.w	r4, r4, r7
 80095b4:	e7e0      	b.n	8009578 <floor+0x48>
 80095b6:	2e33      	cmp	r6, #51	@ 0x33
 80095b8:	dd0a      	ble.n	80095d0 <floor+0xa0>
 80095ba:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80095be:	d103      	bne.n	80095c8 <floor+0x98>
 80095c0:	4602      	mov	r2, r0
 80095c2:	460b      	mov	r3, r1
 80095c4:	f7f6 fe46 	bl	8000254 <__adddf3>
 80095c8:	ec41 0b10 	vmov	d0, r0, r1
 80095cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095d0:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80095d4:	f04f 37ff 	mov.w	r7, #4294967295
 80095d8:	40df      	lsrs	r7, r3
 80095da:	4207      	tst	r7, r0
 80095dc:	d0f4      	beq.n	80095c8 <floor+0x98>
 80095de:	a310      	add	r3, pc, #64	@ (adr r3, 8009620 <floor+0xf0>)
 80095e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e4:	f7f6 fe36 	bl	8000254 <__adddf3>
 80095e8:	2200      	movs	r2, #0
 80095ea:	2300      	movs	r3, #0
 80095ec:	f7f7 fa78 	bl	8000ae0 <__aeabi_dcmpgt>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d0c1      	beq.n	8009578 <floor+0x48>
 80095f4:	2c00      	cmp	r4, #0
 80095f6:	da0a      	bge.n	800960e <floor+0xde>
 80095f8:	2e14      	cmp	r6, #20
 80095fa:	d101      	bne.n	8009600 <floor+0xd0>
 80095fc:	3401      	adds	r4, #1
 80095fe:	e006      	b.n	800960e <floor+0xde>
 8009600:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8009604:	2301      	movs	r3, #1
 8009606:	40b3      	lsls	r3, r6
 8009608:	441d      	add	r5, r3
 800960a:	4545      	cmp	r5, r8
 800960c:	d3f6      	bcc.n	80095fc <floor+0xcc>
 800960e:	ea25 0507 	bic.w	r5, r5, r7
 8009612:	e7b1      	b.n	8009578 <floor+0x48>
 8009614:	2500      	movs	r5, #0
 8009616:	462c      	mov	r4, r5
 8009618:	e7ae      	b.n	8009578 <floor+0x48>
 800961a:	bf00      	nop
 800961c:	f3af 8000 	nop.w
 8009620:	8800759c 	.word	0x8800759c
 8009624:	7e37e43c 	.word	0x7e37e43c
 8009628:	bff00000 	.word	0xbff00000
 800962c:	000fffff 	.word	0x000fffff

08009630 <abs>:
 8009630:	2800      	cmp	r0, #0
 8009632:	bfb8      	it	lt
 8009634:	4240      	neglt	r0, r0
 8009636:	4770      	bx	lr

08009638 <__cvt>:
 8009638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800963c:	ec57 6b10 	vmov	r6, r7, d0
 8009640:	2f00      	cmp	r7, #0
 8009642:	460c      	mov	r4, r1
 8009644:	4619      	mov	r1, r3
 8009646:	463b      	mov	r3, r7
 8009648:	bfb4      	ite	lt
 800964a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800964e:	2300      	movge	r3, #0
 8009650:	4691      	mov	r9, r2
 8009652:	bfbf      	itttt	lt
 8009654:	4632      	movlt	r2, r6
 8009656:	461f      	movlt	r7, r3
 8009658:	232d      	movlt	r3, #45	@ 0x2d
 800965a:	4616      	movlt	r6, r2
 800965c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009660:	700b      	strb	r3, [r1, #0]
 8009662:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009664:	f023 0820 	bic.w	r8, r3, #32
 8009668:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800966c:	d005      	beq.n	800967a <__cvt+0x42>
 800966e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009672:	d100      	bne.n	8009676 <__cvt+0x3e>
 8009674:	3401      	adds	r4, #1
 8009676:	2102      	movs	r1, #2
 8009678:	e000      	b.n	800967c <__cvt+0x44>
 800967a:	2103      	movs	r1, #3
 800967c:	ab03      	add	r3, sp, #12
 800967e:	4622      	mov	r2, r4
 8009680:	9301      	str	r3, [sp, #4]
 8009682:	ab02      	add	r3, sp, #8
 8009684:	ec47 6b10 	vmov	d0, r6, r7
 8009688:	9300      	str	r3, [sp, #0]
 800968a:	4653      	mov	r3, sl
 800968c:	f000 fe60 	bl	800a350 <_dtoa_r>
 8009690:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009694:	4605      	mov	r5, r0
 8009696:	d119      	bne.n	80096cc <__cvt+0x94>
 8009698:	f019 0f01 	tst.w	r9, #1
 800969c:	d00e      	beq.n	80096bc <__cvt+0x84>
 800969e:	eb00 0904 	add.w	r9, r0, r4
 80096a2:	2200      	movs	r2, #0
 80096a4:	2300      	movs	r3, #0
 80096a6:	4630      	mov	r0, r6
 80096a8:	4639      	mov	r1, r7
 80096aa:	f7f7 f9f1 	bl	8000a90 <__aeabi_dcmpeq>
 80096ae:	b108      	cbz	r0, 80096b4 <__cvt+0x7c>
 80096b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80096b4:	2230      	movs	r2, #48	@ 0x30
 80096b6:	9b03      	ldr	r3, [sp, #12]
 80096b8:	454b      	cmp	r3, r9
 80096ba:	d31e      	bcc.n	80096fa <__cvt+0xc2>
 80096bc:	9b03      	ldr	r3, [sp, #12]
 80096be:	4628      	mov	r0, r5
 80096c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096c2:	1b5b      	subs	r3, r3, r5
 80096c4:	6013      	str	r3, [r2, #0]
 80096c6:	b004      	add	sp, #16
 80096c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80096d0:	eb00 0904 	add.w	r9, r0, r4
 80096d4:	d1e5      	bne.n	80096a2 <__cvt+0x6a>
 80096d6:	7803      	ldrb	r3, [r0, #0]
 80096d8:	2b30      	cmp	r3, #48	@ 0x30
 80096da:	d10a      	bne.n	80096f2 <__cvt+0xba>
 80096dc:	2200      	movs	r2, #0
 80096de:	2300      	movs	r3, #0
 80096e0:	4630      	mov	r0, r6
 80096e2:	4639      	mov	r1, r7
 80096e4:	f7f7 f9d4 	bl	8000a90 <__aeabi_dcmpeq>
 80096e8:	b918      	cbnz	r0, 80096f2 <__cvt+0xba>
 80096ea:	f1c4 0401 	rsb	r4, r4, #1
 80096ee:	f8ca 4000 	str.w	r4, [sl]
 80096f2:	f8da 3000 	ldr.w	r3, [sl]
 80096f6:	4499      	add	r9, r3
 80096f8:	e7d3      	b.n	80096a2 <__cvt+0x6a>
 80096fa:	1c59      	adds	r1, r3, #1
 80096fc:	9103      	str	r1, [sp, #12]
 80096fe:	701a      	strb	r2, [r3, #0]
 8009700:	e7d9      	b.n	80096b6 <__cvt+0x7e>

08009702 <__exponent>:
 8009702:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009704:	2900      	cmp	r1, #0
 8009706:	7002      	strb	r2, [r0, #0]
 8009708:	bfba      	itte	lt
 800970a:	4249      	neglt	r1, r1
 800970c:	232d      	movlt	r3, #45	@ 0x2d
 800970e:	232b      	movge	r3, #43	@ 0x2b
 8009710:	2909      	cmp	r1, #9
 8009712:	7043      	strb	r3, [r0, #1]
 8009714:	dd28      	ble.n	8009768 <__exponent+0x66>
 8009716:	f10d 0307 	add.w	r3, sp, #7
 800971a:	270a      	movs	r7, #10
 800971c:	461d      	mov	r5, r3
 800971e:	461a      	mov	r2, r3
 8009720:	3b01      	subs	r3, #1
 8009722:	fbb1 f6f7 	udiv	r6, r1, r7
 8009726:	fb07 1416 	mls	r4, r7, r6, r1
 800972a:	3430      	adds	r4, #48	@ 0x30
 800972c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009730:	460c      	mov	r4, r1
 8009732:	4631      	mov	r1, r6
 8009734:	2c63      	cmp	r4, #99	@ 0x63
 8009736:	dcf2      	bgt.n	800971e <__exponent+0x1c>
 8009738:	3130      	adds	r1, #48	@ 0x30
 800973a:	1e94      	subs	r4, r2, #2
 800973c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009740:	1c41      	adds	r1, r0, #1
 8009742:	4623      	mov	r3, r4
 8009744:	42ab      	cmp	r3, r5
 8009746:	d30a      	bcc.n	800975e <__exponent+0x5c>
 8009748:	f10d 0309 	add.w	r3, sp, #9
 800974c:	1a9b      	subs	r3, r3, r2
 800974e:	42ac      	cmp	r4, r5
 8009750:	bf88      	it	hi
 8009752:	2300      	movhi	r3, #0
 8009754:	3302      	adds	r3, #2
 8009756:	4403      	add	r3, r0
 8009758:	1a18      	subs	r0, r3, r0
 800975a:	b003      	add	sp, #12
 800975c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800975e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009762:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009766:	e7ed      	b.n	8009744 <__exponent+0x42>
 8009768:	2330      	movs	r3, #48	@ 0x30
 800976a:	3130      	adds	r1, #48	@ 0x30
 800976c:	7083      	strb	r3, [r0, #2]
 800976e:	1d03      	adds	r3, r0, #4
 8009770:	70c1      	strb	r1, [r0, #3]
 8009772:	e7f1      	b.n	8009758 <__exponent+0x56>

08009774 <_printf_float>:
 8009774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009778:	b08d      	sub	sp, #52	@ 0x34
 800977a:	460c      	mov	r4, r1
 800977c:	4616      	mov	r6, r2
 800977e:	461f      	mov	r7, r3
 8009780:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009784:	4605      	mov	r5, r0
 8009786:	f000 fccf 	bl	800a128 <_localeconv_r>
 800978a:	6803      	ldr	r3, [r0, #0]
 800978c:	4618      	mov	r0, r3
 800978e:	9304      	str	r3, [sp, #16]
 8009790:	f7f6 fd52 	bl	8000238 <strlen>
 8009794:	2300      	movs	r3, #0
 8009796:	9005      	str	r0, [sp, #20]
 8009798:	930a      	str	r3, [sp, #40]	@ 0x28
 800979a:	f8d8 3000 	ldr.w	r3, [r8]
 800979e:	f894 a018 	ldrb.w	sl, [r4, #24]
 80097a2:	3307      	adds	r3, #7
 80097a4:	f8d4 b000 	ldr.w	fp, [r4]
 80097a8:	f023 0307 	bic.w	r3, r3, #7
 80097ac:	f103 0208 	add.w	r2, r3, #8
 80097b0:	f8c8 2000 	str.w	r2, [r8]
 80097b4:	f04f 32ff 	mov.w	r2, #4294967295
 80097b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80097bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80097c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80097c4:	9307      	str	r3, [sp, #28]
 80097c6:	4b9d      	ldr	r3, [pc, #628]	@ (8009a3c <_printf_float+0x2c8>)
 80097c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097cc:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80097d0:	f7f7 f990 	bl	8000af4 <__aeabi_dcmpun>
 80097d4:	bb70      	cbnz	r0, 8009834 <_printf_float+0xc0>
 80097d6:	f04f 32ff 	mov.w	r2, #4294967295
 80097da:	4b98      	ldr	r3, [pc, #608]	@ (8009a3c <_printf_float+0x2c8>)
 80097dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097e0:	f7f7 f96a 	bl	8000ab8 <__aeabi_dcmple>
 80097e4:	bb30      	cbnz	r0, 8009834 <_printf_float+0xc0>
 80097e6:	2200      	movs	r2, #0
 80097e8:	2300      	movs	r3, #0
 80097ea:	4640      	mov	r0, r8
 80097ec:	4649      	mov	r1, r9
 80097ee:	f7f7 f959 	bl	8000aa4 <__aeabi_dcmplt>
 80097f2:	b110      	cbz	r0, 80097fa <_printf_float+0x86>
 80097f4:	232d      	movs	r3, #45	@ 0x2d
 80097f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097fa:	4a91      	ldr	r2, [pc, #580]	@ (8009a40 <_printf_float+0x2cc>)
 80097fc:	4b91      	ldr	r3, [pc, #580]	@ (8009a44 <_printf_float+0x2d0>)
 80097fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009802:	bf8c      	ite	hi
 8009804:	4690      	movhi	r8, r2
 8009806:	4698      	movls	r8, r3
 8009808:	2303      	movs	r3, #3
 800980a:	f04f 0900 	mov.w	r9, #0
 800980e:	6123      	str	r3, [r4, #16]
 8009810:	f02b 0304 	bic.w	r3, fp, #4
 8009814:	6023      	str	r3, [r4, #0]
 8009816:	4633      	mov	r3, r6
 8009818:	aa0b      	add	r2, sp, #44	@ 0x2c
 800981a:	4621      	mov	r1, r4
 800981c:	4628      	mov	r0, r5
 800981e:	9700      	str	r7, [sp, #0]
 8009820:	f000 f9d2 	bl	8009bc8 <_printf_common>
 8009824:	3001      	adds	r0, #1
 8009826:	f040 808d 	bne.w	8009944 <_printf_float+0x1d0>
 800982a:	f04f 30ff 	mov.w	r0, #4294967295
 800982e:	b00d      	add	sp, #52	@ 0x34
 8009830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009834:	4642      	mov	r2, r8
 8009836:	464b      	mov	r3, r9
 8009838:	4640      	mov	r0, r8
 800983a:	4649      	mov	r1, r9
 800983c:	f7f7 f95a 	bl	8000af4 <__aeabi_dcmpun>
 8009840:	b140      	cbz	r0, 8009854 <_printf_float+0xe0>
 8009842:	464b      	mov	r3, r9
 8009844:	4a80      	ldr	r2, [pc, #512]	@ (8009a48 <_printf_float+0x2d4>)
 8009846:	2b00      	cmp	r3, #0
 8009848:	bfbc      	itt	lt
 800984a:	232d      	movlt	r3, #45	@ 0x2d
 800984c:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009850:	4b7e      	ldr	r3, [pc, #504]	@ (8009a4c <_printf_float+0x2d8>)
 8009852:	e7d4      	b.n	80097fe <_printf_float+0x8a>
 8009854:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009858:	6863      	ldr	r3, [r4, #4]
 800985a:	9206      	str	r2, [sp, #24]
 800985c:	1c5a      	adds	r2, r3, #1
 800985e:	d13b      	bne.n	80098d8 <_printf_float+0x164>
 8009860:	2306      	movs	r3, #6
 8009862:	6063      	str	r3, [r4, #4]
 8009864:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009868:	2300      	movs	r3, #0
 800986a:	4628      	mov	r0, r5
 800986c:	6022      	str	r2, [r4, #0]
 800986e:	9303      	str	r3, [sp, #12]
 8009870:	ab0a      	add	r3, sp, #40	@ 0x28
 8009872:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009876:	ab09      	add	r3, sp, #36	@ 0x24
 8009878:	ec49 8b10 	vmov	d0, r8, r9
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009882:	6861      	ldr	r1, [r4, #4]
 8009884:	f7ff fed8 	bl	8009638 <__cvt>
 8009888:	9b06      	ldr	r3, [sp, #24]
 800988a:	4680      	mov	r8, r0
 800988c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800988e:	2b47      	cmp	r3, #71	@ 0x47
 8009890:	d129      	bne.n	80098e6 <_printf_float+0x172>
 8009892:	1cc8      	adds	r0, r1, #3
 8009894:	db02      	blt.n	800989c <_printf_float+0x128>
 8009896:	6863      	ldr	r3, [r4, #4]
 8009898:	4299      	cmp	r1, r3
 800989a:	dd41      	ble.n	8009920 <_printf_float+0x1ac>
 800989c:	f1aa 0a02 	sub.w	sl, sl, #2
 80098a0:	fa5f fa8a 	uxtb.w	sl, sl
 80098a4:	3901      	subs	r1, #1
 80098a6:	4652      	mov	r2, sl
 80098a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80098ac:	9109      	str	r1, [sp, #36]	@ 0x24
 80098ae:	f7ff ff28 	bl	8009702 <__exponent>
 80098b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80098b4:	4681      	mov	r9, r0
 80098b6:	1813      	adds	r3, r2, r0
 80098b8:	2a01      	cmp	r2, #1
 80098ba:	6123      	str	r3, [r4, #16]
 80098bc:	dc02      	bgt.n	80098c4 <_printf_float+0x150>
 80098be:	6822      	ldr	r2, [r4, #0]
 80098c0:	07d2      	lsls	r2, r2, #31
 80098c2:	d501      	bpl.n	80098c8 <_printf_float+0x154>
 80098c4:	3301      	adds	r3, #1
 80098c6:	6123      	str	r3, [r4, #16]
 80098c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d0a2      	beq.n	8009816 <_printf_float+0xa2>
 80098d0:	232d      	movs	r3, #45	@ 0x2d
 80098d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098d6:	e79e      	b.n	8009816 <_printf_float+0xa2>
 80098d8:	9a06      	ldr	r2, [sp, #24]
 80098da:	2a47      	cmp	r2, #71	@ 0x47
 80098dc:	d1c2      	bne.n	8009864 <_printf_float+0xf0>
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1c0      	bne.n	8009864 <_printf_float+0xf0>
 80098e2:	2301      	movs	r3, #1
 80098e4:	e7bd      	b.n	8009862 <_printf_float+0xee>
 80098e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80098ea:	d9db      	bls.n	80098a4 <_printf_float+0x130>
 80098ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80098f0:	d118      	bne.n	8009924 <_printf_float+0x1b0>
 80098f2:	2900      	cmp	r1, #0
 80098f4:	6863      	ldr	r3, [r4, #4]
 80098f6:	dd0b      	ble.n	8009910 <_printf_float+0x19c>
 80098f8:	6121      	str	r1, [r4, #16]
 80098fa:	b913      	cbnz	r3, 8009902 <_printf_float+0x18e>
 80098fc:	6822      	ldr	r2, [r4, #0]
 80098fe:	07d0      	lsls	r0, r2, #31
 8009900:	d502      	bpl.n	8009908 <_printf_float+0x194>
 8009902:	3301      	adds	r3, #1
 8009904:	440b      	add	r3, r1
 8009906:	6123      	str	r3, [r4, #16]
 8009908:	f04f 0900 	mov.w	r9, #0
 800990c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800990e:	e7db      	b.n	80098c8 <_printf_float+0x154>
 8009910:	b913      	cbnz	r3, 8009918 <_printf_float+0x1a4>
 8009912:	6822      	ldr	r2, [r4, #0]
 8009914:	07d2      	lsls	r2, r2, #31
 8009916:	d501      	bpl.n	800991c <_printf_float+0x1a8>
 8009918:	3302      	adds	r3, #2
 800991a:	e7f4      	b.n	8009906 <_printf_float+0x192>
 800991c:	2301      	movs	r3, #1
 800991e:	e7f2      	b.n	8009906 <_printf_float+0x192>
 8009920:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009926:	4299      	cmp	r1, r3
 8009928:	db05      	blt.n	8009936 <_printf_float+0x1c2>
 800992a:	6823      	ldr	r3, [r4, #0]
 800992c:	6121      	str	r1, [r4, #16]
 800992e:	07d8      	lsls	r0, r3, #31
 8009930:	d5ea      	bpl.n	8009908 <_printf_float+0x194>
 8009932:	1c4b      	adds	r3, r1, #1
 8009934:	e7e7      	b.n	8009906 <_printf_float+0x192>
 8009936:	2900      	cmp	r1, #0
 8009938:	bfd4      	ite	le
 800993a:	f1c1 0202 	rsble	r2, r1, #2
 800993e:	2201      	movgt	r2, #1
 8009940:	4413      	add	r3, r2
 8009942:	e7e0      	b.n	8009906 <_printf_float+0x192>
 8009944:	6823      	ldr	r3, [r4, #0]
 8009946:	055a      	lsls	r2, r3, #21
 8009948:	d407      	bmi.n	800995a <_printf_float+0x1e6>
 800994a:	6923      	ldr	r3, [r4, #16]
 800994c:	4642      	mov	r2, r8
 800994e:	4631      	mov	r1, r6
 8009950:	4628      	mov	r0, r5
 8009952:	47b8      	blx	r7
 8009954:	3001      	adds	r0, #1
 8009956:	d12b      	bne.n	80099b0 <_printf_float+0x23c>
 8009958:	e767      	b.n	800982a <_printf_float+0xb6>
 800995a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800995e:	f240 80dd 	bls.w	8009b1c <_printf_float+0x3a8>
 8009962:	2200      	movs	r2, #0
 8009964:	2300      	movs	r3, #0
 8009966:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800996a:	f7f7 f891 	bl	8000a90 <__aeabi_dcmpeq>
 800996e:	2800      	cmp	r0, #0
 8009970:	d033      	beq.n	80099da <_printf_float+0x266>
 8009972:	2301      	movs	r3, #1
 8009974:	4a36      	ldr	r2, [pc, #216]	@ (8009a50 <_printf_float+0x2dc>)
 8009976:	4631      	mov	r1, r6
 8009978:	4628      	mov	r0, r5
 800997a:	47b8      	blx	r7
 800997c:	3001      	adds	r0, #1
 800997e:	f43f af54 	beq.w	800982a <_printf_float+0xb6>
 8009982:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009986:	4543      	cmp	r3, r8
 8009988:	db02      	blt.n	8009990 <_printf_float+0x21c>
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	07d8      	lsls	r0, r3, #31
 800998e:	d50f      	bpl.n	80099b0 <_printf_float+0x23c>
 8009990:	4631      	mov	r1, r6
 8009992:	4628      	mov	r0, r5
 8009994:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009998:	47b8      	blx	r7
 800999a:	3001      	adds	r0, #1
 800999c:	f43f af45 	beq.w	800982a <_printf_float+0xb6>
 80099a0:	f04f 0900 	mov.w	r9, #0
 80099a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80099a8:	f104 0a1a 	add.w	sl, r4, #26
 80099ac:	45c8      	cmp	r8, r9
 80099ae:	dc09      	bgt.n	80099c4 <_printf_float+0x250>
 80099b0:	6823      	ldr	r3, [r4, #0]
 80099b2:	079b      	lsls	r3, r3, #30
 80099b4:	f100 8103 	bmi.w	8009bbe <_printf_float+0x44a>
 80099b8:	68e0      	ldr	r0, [r4, #12]
 80099ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099bc:	4298      	cmp	r0, r3
 80099be:	bfb8      	it	lt
 80099c0:	4618      	movlt	r0, r3
 80099c2:	e734      	b.n	800982e <_printf_float+0xba>
 80099c4:	2301      	movs	r3, #1
 80099c6:	4652      	mov	r2, sl
 80099c8:	4631      	mov	r1, r6
 80099ca:	4628      	mov	r0, r5
 80099cc:	47b8      	blx	r7
 80099ce:	3001      	adds	r0, #1
 80099d0:	f43f af2b 	beq.w	800982a <_printf_float+0xb6>
 80099d4:	f109 0901 	add.w	r9, r9, #1
 80099d8:	e7e8      	b.n	80099ac <_printf_float+0x238>
 80099da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099dc:	2b00      	cmp	r3, #0
 80099de:	dc39      	bgt.n	8009a54 <_printf_float+0x2e0>
 80099e0:	2301      	movs	r3, #1
 80099e2:	4a1b      	ldr	r2, [pc, #108]	@ (8009a50 <_printf_float+0x2dc>)
 80099e4:	4631      	mov	r1, r6
 80099e6:	4628      	mov	r0, r5
 80099e8:	47b8      	blx	r7
 80099ea:	3001      	adds	r0, #1
 80099ec:	f43f af1d 	beq.w	800982a <_printf_float+0xb6>
 80099f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80099f4:	ea59 0303 	orrs.w	r3, r9, r3
 80099f8:	d102      	bne.n	8009a00 <_printf_float+0x28c>
 80099fa:	6823      	ldr	r3, [r4, #0]
 80099fc:	07d9      	lsls	r1, r3, #31
 80099fe:	d5d7      	bpl.n	80099b0 <_printf_float+0x23c>
 8009a00:	4631      	mov	r1, r6
 8009a02:	4628      	mov	r0, r5
 8009a04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a08:	47b8      	blx	r7
 8009a0a:	3001      	adds	r0, #1
 8009a0c:	f43f af0d 	beq.w	800982a <_printf_float+0xb6>
 8009a10:	f04f 0a00 	mov.w	sl, #0
 8009a14:	f104 0b1a 	add.w	fp, r4, #26
 8009a18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a1a:	425b      	negs	r3, r3
 8009a1c:	4553      	cmp	r3, sl
 8009a1e:	dc01      	bgt.n	8009a24 <_printf_float+0x2b0>
 8009a20:	464b      	mov	r3, r9
 8009a22:	e793      	b.n	800994c <_printf_float+0x1d8>
 8009a24:	2301      	movs	r3, #1
 8009a26:	465a      	mov	r2, fp
 8009a28:	4631      	mov	r1, r6
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	47b8      	blx	r7
 8009a2e:	3001      	adds	r0, #1
 8009a30:	f43f aefb 	beq.w	800982a <_printf_float+0xb6>
 8009a34:	f10a 0a01 	add.w	sl, sl, #1
 8009a38:	e7ee      	b.n	8009a18 <_printf_float+0x2a4>
 8009a3a:	bf00      	nop
 8009a3c:	7fefffff 	.word	0x7fefffff
 8009a40:	0800c474 	.word	0x0800c474
 8009a44:	0800c470 	.word	0x0800c470
 8009a48:	0800c47c 	.word	0x0800c47c
 8009a4c:	0800c478 	.word	0x0800c478
 8009a50:	0800c480 	.word	0x0800c480
 8009a54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009a56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009a5a:	4553      	cmp	r3, sl
 8009a5c:	bfa8      	it	ge
 8009a5e:	4653      	movge	r3, sl
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	4699      	mov	r9, r3
 8009a64:	dc36      	bgt.n	8009ad4 <_printf_float+0x360>
 8009a66:	f04f 0b00 	mov.w	fp, #0
 8009a6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a6e:	f104 021a 	add.w	r2, r4, #26
 8009a72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009a74:	9306      	str	r3, [sp, #24]
 8009a76:	eba3 0309 	sub.w	r3, r3, r9
 8009a7a:	455b      	cmp	r3, fp
 8009a7c:	dc31      	bgt.n	8009ae2 <_printf_float+0x36e>
 8009a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a80:	459a      	cmp	sl, r3
 8009a82:	dc3a      	bgt.n	8009afa <_printf_float+0x386>
 8009a84:	6823      	ldr	r3, [r4, #0]
 8009a86:	07da      	lsls	r2, r3, #31
 8009a88:	d437      	bmi.n	8009afa <_printf_float+0x386>
 8009a8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a8c:	ebaa 0903 	sub.w	r9, sl, r3
 8009a90:	9b06      	ldr	r3, [sp, #24]
 8009a92:	ebaa 0303 	sub.w	r3, sl, r3
 8009a96:	4599      	cmp	r9, r3
 8009a98:	bfa8      	it	ge
 8009a9a:	4699      	movge	r9, r3
 8009a9c:	f1b9 0f00 	cmp.w	r9, #0
 8009aa0:	dc33      	bgt.n	8009b0a <_printf_float+0x396>
 8009aa2:	f04f 0800 	mov.w	r8, #0
 8009aa6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009aaa:	f104 0b1a 	add.w	fp, r4, #26
 8009aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ab0:	ebaa 0303 	sub.w	r3, sl, r3
 8009ab4:	eba3 0309 	sub.w	r3, r3, r9
 8009ab8:	4543      	cmp	r3, r8
 8009aba:	f77f af79 	ble.w	80099b0 <_printf_float+0x23c>
 8009abe:	2301      	movs	r3, #1
 8009ac0:	465a      	mov	r2, fp
 8009ac2:	4631      	mov	r1, r6
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	47b8      	blx	r7
 8009ac8:	3001      	adds	r0, #1
 8009aca:	f43f aeae 	beq.w	800982a <_printf_float+0xb6>
 8009ace:	f108 0801 	add.w	r8, r8, #1
 8009ad2:	e7ec      	b.n	8009aae <_printf_float+0x33a>
 8009ad4:	4642      	mov	r2, r8
 8009ad6:	4631      	mov	r1, r6
 8009ad8:	4628      	mov	r0, r5
 8009ada:	47b8      	blx	r7
 8009adc:	3001      	adds	r0, #1
 8009ade:	d1c2      	bne.n	8009a66 <_printf_float+0x2f2>
 8009ae0:	e6a3      	b.n	800982a <_printf_float+0xb6>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	4631      	mov	r1, r6
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	9206      	str	r2, [sp, #24]
 8009aea:	47b8      	blx	r7
 8009aec:	3001      	adds	r0, #1
 8009aee:	f43f ae9c 	beq.w	800982a <_printf_float+0xb6>
 8009af2:	f10b 0b01 	add.w	fp, fp, #1
 8009af6:	9a06      	ldr	r2, [sp, #24]
 8009af8:	e7bb      	b.n	8009a72 <_printf_float+0x2fe>
 8009afa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009afe:	4631      	mov	r1, r6
 8009b00:	4628      	mov	r0, r5
 8009b02:	47b8      	blx	r7
 8009b04:	3001      	adds	r0, #1
 8009b06:	d1c0      	bne.n	8009a8a <_printf_float+0x316>
 8009b08:	e68f      	b.n	800982a <_printf_float+0xb6>
 8009b0a:	9a06      	ldr	r2, [sp, #24]
 8009b0c:	464b      	mov	r3, r9
 8009b0e:	4631      	mov	r1, r6
 8009b10:	4628      	mov	r0, r5
 8009b12:	4442      	add	r2, r8
 8009b14:	47b8      	blx	r7
 8009b16:	3001      	adds	r0, #1
 8009b18:	d1c3      	bne.n	8009aa2 <_printf_float+0x32e>
 8009b1a:	e686      	b.n	800982a <_printf_float+0xb6>
 8009b1c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009b20:	f1ba 0f01 	cmp.w	sl, #1
 8009b24:	dc01      	bgt.n	8009b2a <_printf_float+0x3b6>
 8009b26:	07db      	lsls	r3, r3, #31
 8009b28:	d536      	bpl.n	8009b98 <_printf_float+0x424>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	4642      	mov	r2, r8
 8009b2e:	4631      	mov	r1, r6
 8009b30:	4628      	mov	r0, r5
 8009b32:	47b8      	blx	r7
 8009b34:	3001      	adds	r0, #1
 8009b36:	f43f ae78 	beq.w	800982a <_printf_float+0xb6>
 8009b3a:	4631      	mov	r1, r6
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b42:	47b8      	blx	r7
 8009b44:	3001      	adds	r0, #1
 8009b46:	f43f ae70 	beq.w	800982a <_printf_float+0xb6>
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009b56:	f7f6 ff9b 	bl	8000a90 <__aeabi_dcmpeq>
 8009b5a:	b9c0      	cbnz	r0, 8009b8e <_printf_float+0x41a>
 8009b5c:	4653      	mov	r3, sl
 8009b5e:	f108 0201 	add.w	r2, r8, #1
 8009b62:	4631      	mov	r1, r6
 8009b64:	4628      	mov	r0, r5
 8009b66:	47b8      	blx	r7
 8009b68:	3001      	adds	r0, #1
 8009b6a:	d10c      	bne.n	8009b86 <_printf_float+0x412>
 8009b6c:	e65d      	b.n	800982a <_printf_float+0xb6>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	465a      	mov	r2, fp
 8009b72:	4631      	mov	r1, r6
 8009b74:	4628      	mov	r0, r5
 8009b76:	47b8      	blx	r7
 8009b78:	3001      	adds	r0, #1
 8009b7a:	f43f ae56 	beq.w	800982a <_printf_float+0xb6>
 8009b7e:	f108 0801 	add.w	r8, r8, #1
 8009b82:	45d0      	cmp	r8, sl
 8009b84:	dbf3      	blt.n	8009b6e <_printf_float+0x3fa>
 8009b86:	464b      	mov	r3, r9
 8009b88:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009b8c:	e6df      	b.n	800994e <_printf_float+0x1da>
 8009b8e:	f04f 0800 	mov.w	r8, #0
 8009b92:	f104 0b1a 	add.w	fp, r4, #26
 8009b96:	e7f4      	b.n	8009b82 <_printf_float+0x40e>
 8009b98:	2301      	movs	r3, #1
 8009b9a:	4642      	mov	r2, r8
 8009b9c:	e7e1      	b.n	8009b62 <_printf_float+0x3ee>
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	464a      	mov	r2, r9
 8009ba2:	4631      	mov	r1, r6
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	47b8      	blx	r7
 8009ba8:	3001      	adds	r0, #1
 8009baa:	f43f ae3e 	beq.w	800982a <_printf_float+0xb6>
 8009bae:	f108 0801 	add.w	r8, r8, #1
 8009bb2:	68e3      	ldr	r3, [r4, #12]
 8009bb4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009bb6:	1a5b      	subs	r3, r3, r1
 8009bb8:	4543      	cmp	r3, r8
 8009bba:	dcf0      	bgt.n	8009b9e <_printf_float+0x42a>
 8009bbc:	e6fc      	b.n	80099b8 <_printf_float+0x244>
 8009bbe:	f04f 0800 	mov.w	r8, #0
 8009bc2:	f104 0919 	add.w	r9, r4, #25
 8009bc6:	e7f4      	b.n	8009bb2 <_printf_float+0x43e>

08009bc8 <_printf_common>:
 8009bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bcc:	4616      	mov	r6, r2
 8009bce:	4698      	mov	r8, r3
 8009bd0:	688a      	ldr	r2, [r1, #8]
 8009bd2:	4607      	mov	r7, r0
 8009bd4:	690b      	ldr	r3, [r1, #16]
 8009bd6:	460c      	mov	r4, r1
 8009bd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	bfb8      	it	lt
 8009be0:	4613      	movlt	r3, r2
 8009be2:	6033      	str	r3, [r6, #0]
 8009be4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009be8:	b10a      	cbz	r2, 8009bee <_printf_common+0x26>
 8009bea:	3301      	adds	r3, #1
 8009bec:	6033      	str	r3, [r6, #0]
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	0699      	lsls	r1, r3, #26
 8009bf2:	bf42      	ittt	mi
 8009bf4:	6833      	ldrmi	r3, [r6, #0]
 8009bf6:	3302      	addmi	r3, #2
 8009bf8:	6033      	strmi	r3, [r6, #0]
 8009bfa:	6825      	ldr	r5, [r4, #0]
 8009bfc:	f015 0506 	ands.w	r5, r5, #6
 8009c00:	d106      	bne.n	8009c10 <_printf_common+0x48>
 8009c02:	f104 0a19 	add.w	sl, r4, #25
 8009c06:	68e3      	ldr	r3, [r4, #12]
 8009c08:	6832      	ldr	r2, [r6, #0]
 8009c0a:	1a9b      	subs	r3, r3, r2
 8009c0c:	42ab      	cmp	r3, r5
 8009c0e:	dc2b      	bgt.n	8009c68 <_printf_common+0xa0>
 8009c10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c14:	6822      	ldr	r2, [r4, #0]
 8009c16:	3b00      	subs	r3, #0
 8009c18:	bf18      	it	ne
 8009c1a:	2301      	movne	r3, #1
 8009c1c:	0692      	lsls	r2, r2, #26
 8009c1e:	d430      	bmi.n	8009c82 <_printf_common+0xba>
 8009c20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009c24:	4641      	mov	r1, r8
 8009c26:	4638      	mov	r0, r7
 8009c28:	47c8      	blx	r9
 8009c2a:	3001      	adds	r0, #1
 8009c2c:	d023      	beq.n	8009c76 <_printf_common+0xae>
 8009c2e:	6823      	ldr	r3, [r4, #0]
 8009c30:	341a      	adds	r4, #26
 8009c32:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009c36:	f003 0306 	and.w	r3, r3, #6
 8009c3a:	2b04      	cmp	r3, #4
 8009c3c:	bf0a      	itet	eq
 8009c3e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009c42:	2500      	movne	r5, #0
 8009c44:	6833      	ldreq	r3, [r6, #0]
 8009c46:	f04f 0600 	mov.w	r6, #0
 8009c4a:	bf08      	it	eq
 8009c4c:	1aed      	subeq	r5, r5, r3
 8009c4e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009c52:	bf08      	it	eq
 8009c54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	bfc4      	itt	gt
 8009c5c:	1a9b      	subgt	r3, r3, r2
 8009c5e:	18ed      	addgt	r5, r5, r3
 8009c60:	42b5      	cmp	r5, r6
 8009c62:	d11a      	bne.n	8009c9a <_printf_common+0xd2>
 8009c64:	2000      	movs	r0, #0
 8009c66:	e008      	b.n	8009c7a <_printf_common+0xb2>
 8009c68:	2301      	movs	r3, #1
 8009c6a:	4652      	mov	r2, sl
 8009c6c:	4641      	mov	r1, r8
 8009c6e:	4638      	mov	r0, r7
 8009c70:	47c8      	blx	r9
 8009c72:	3001      	adds	r0, #1
 8009c74:	d103      	bne.n	8009c7e <_printf_common+0xb6>
 8009c76:	f04f 30ff 	mov.w	r0, #4294967295
 8009c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c7e:	3501      	adds	r5, #1
 8009c80:	e7c1      	b.n	8009c06 <_printf_common+0x3e>
 8009c82:	18e1      	adds	r1, r4, r3
 8009c84:	1c5a      	adds	r2, r3, #1
 8009c86:	2030      	movs	r0, #48	@ 0x30
 8009c88:	3302      	adds	r3, #2
 8009c8a:	4422      	add	r2, r4
 8009c8c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009c90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009c94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009c98:	e7c2      	b.n	8009c20 <_printf_common+0x58>
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	4622      	mov	r2, r4
 8009c9e:	4641      	mov	r1, r8
 8009ca0:	4638      	mov	r0, r7
 8009ca2:	47c8      	blx	r9
 8009ca4:	3001      	adds	r0, #1
 8009ca6:	d0e6      	beq.n	8009c76 <_printf_common+0xae>
 8009ca8:	3601      	adds	r6, #1
 8009caa:	e7d9      	b.n	8009c60 <_printf_common+0x98>

08009cac <_printf_i>:
 8009cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cb0:	7e0f      	ldrb	r7, [r1, #24]
 8009cb2:	4691      	mov	r9, r2
 8009cb4:	4680      	mov	r8, r0
 8009cb6:	460c      	mov	r4, r1
 8009cb8:	2f78      	cmp	r7, #120	@ 0x78
 8009cba:	469a      	mov	sl, r3
 8009cbc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009cbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009cc2:	d807      	bhi.n	8009cd4 <_printf_i+0x28>
 8009cc4:	2f62      	cmp	r7, #98	@ 0x62
 8009cc6:	d80a      	bhi.n	8009cde <_printf_i+0x32>
 8009cc8:	2f00      	cmp	r7, #0
 8009cca:	f000 80d1 	beq.w	8009e70 <_printf_i+0x1c4>
 8009cce:	2f58      	cmp	r7, #88	@ 0x58
 8009cd0:	f000 80b8 	beq.w	8009e44 <_printf_i+0x198>
 8009cd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009cd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009cdc:	e03a      	b.n	8009d54 <_printf_i+0xa8>
 8009cde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009ce2:	2b15      	cmp	r3, #21
 8009ce4:	d8f6      	bhi.n	8009cd4 <_printf_i+0x28>
 8009ce6:	a101      	add	r1, pc, #4	@ (adr r1, 8009cec <_printf_i+0x40>)
 8009ce8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cec:	08009d45 	.word	0x08009d45
 8009cf0:	08009d59 	.word	0x08009d59
 8009cf4:	08009cd5 	.word	0x08009cd5
 8009cf8:	08009cd5 	.word	0x08009cd5
 8009cfc:	08009cd5 	.word	0x08009cd5
 8009d00:	08009cd5 	.word	0x08009cd5
 8009d04:	08009d59 	.word	0x08009d59
 8009d08:	08009cd5 	.word	0x08009cd5
 8009d0c:	08009cd5 	.word	0x08009cd5
 8009d10:	08009cd5 	.word	0x08009cd5
 8009d14:	08009cd5 	.word	0x08009cd5
 8009d18:	08009e57 	.word	0x08009e57
 8009d1c:	08009d83 	.word	0x08009d83
 8009d20:	08009e11 	.word	0x08009e11
 8009d24:	08009cd5 	.word	0x08009cd5
 8009d28:	08009cd5 	.word	0x08009cd5
 8009d2c:	08009e79 	.word	0x08009e79
 8009d30:	08009cd5 	.word	0x08009cd5
 8009d34:	08009d83 	.word	0x08009d83
 8009d38:	08009cd5 	.word	0x08009cd5
 8009d3c:	08009cd5 	.word	0x08009cd5
 8009d40:	08009e19 	.word	0x08009e19
 8009d44:	6833      	ldr	r3, [r6, #0]
 8009d46:	1d1a      	adds	r2, r3, #4
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	6032      	str	r2, [r6, #0]
 8009d4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009d54:	2301      	movs	r3, #1
 8009d56:	e09c      	b.n	8009e92 <_printf_i+0x1e6>
 8009d58:	6833      	ldr	r3, [r6, #0]
 8009d5a:	6820      	ldr	r0, [r4, #0]
 8009d5c:	1d19      	adds	r1, r3, #4
 8009d5e:	6031      	str	r1, [r6, #0]
 8009d60:	0606      	lsls	r6, r0, #24
 8009d62:	d501      	bpl.n	8009d68 <_printf_i+0xbc>
 8009d64:	681d      	ldr	r5, [r3, #0]
 8009d66:	e003      	b.n	8009d70 <_printf_i+0xc4>
 8009d68:	0645      	lsls	r5, r0, #25
 8009d6a:	d5fb      	bpl.n	8009d64 <_printf_i+0xb8>
 8009d6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009d70:	2d00      	cmp	r5, #0
 8009d72:	da03      	bge.n	8009d7c <_printf_i+0xd0>
 8009d74:	232d      	movs	r3, #45	@ 0x2d
 8009d76:	426d      	negs	r5, r5
 8009d78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d7c:	4858      	ldr	r0, [pc, #352]	@ (8009ee0 <_printf_i+0x234>)
 8009d7e:	230a      	movs	r3, #10
 8009d80:	e011      	b.n	8009da6 <_printf_i+0xfa>
 8009d82:	6821      	ldr	r1, [r4, #0]
 8009d84:	6833      	ldr	r3, [r6, #0]
 8009d86:	0608      	lsls	r0, r1, #24
 8009d88:	f853 5b04 	ldr.w	r5, [r3], #4
 8009d8c:	d402      	bmi.n	8009d94 <_printf_i+0xe8>
 8009d8e:	0649      	lsls	r1, r1, #25
 8009d90:	bf48      	it	mi
 8009d92:	b2ad      	uxthmi	r5, r5
 8009d94:	2f6f      	cmp	r7, #111	@ 0x6f
 8009d96:	6033      	str	r3, [r6, #0]
 8009d98:	4851      	ldr	r0, [pc, #324]	@ (8009ee0 <_printf_i+0x234>)
 8009d9a:	bf14      	ite	ne
 8009d9c:	230a      	movne	r3, #10
 8009d9e:	2308      	moveq	r3, #8
 8009da0:	2100      	movs	r1, #0
 8009da2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009da6:	6866      	ldr	r6, [r4, #4]
 8009da8:	2e00      	cmp	r6, #0
 8009daa:	60a6      	str	r6, [r4, #8]
 8009dac:	db05      	blt.n	8009dba <_printf_i+0x10e>
 8009dae:	6821      	ldr	r1, [r4, #0]
 8009db0:	432e      	orrs	r6, r5
 8009db2:	f021 0104 	bic.w	r1, r1, #4
 8009db6:	6021      	str	r1, [r4, #0]
 8009db8:	d04b      	beq.n	8009e52 <_printf_i+0x1a6>
 8009dba:	4616      	mov	r6, r2
 8009dbc:	fbb5 f1f3 	udiv	r1, r5, r3
 8009dc0:	fb03 5711 	mls	r7, r3, r1, r5
 8009dc4:	5dc7      	ldrb	r7, [r0, r7]
 8009dc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009dca:	462f      	mov	r7, r5
 8009dcc:	460d      	mov	r5, r1
 8009dce:	42bb      	cmp	r3, r7
 8009dd0:	d9f4      	bls.n	8009dbc <_printf_i+0x110>
 8009dd2:	2b08      	cmp	r3, #8
 8009dd4:	d10b      	bne.n	8009dee <_printf_i+0x142>
 8009dd6:	6823      	ldr	r3, [r4, #0]
 8009dd8:	07df      	lsls	r7, r3, #31
 8009dda:	d508      	bpl.n	8009dee <_printf_i+0x142>
 8009ddc:	6923      	ldr	r3, [r4, #16]
 8009dde:	6861      	ldr	r1, [r4, #4]
 8009de0:	4299      	cmp	r1, r3
 8009de2:	bfde      	ittt	le
 8009de4:	2330      	movle	r3, #48	@ 0x30
 8009de6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009dea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009dee:	1b92      	subs	r2, r2, r6
 8009df0:	6122      	str	r2, [r4, #16]
 8009df2:	464b      	mov	r3, r9
 8009df4:	aa03      	add	r2, sp, #12
 8009df6:	4621      	mov	r1, r4
 8009df8:	4640      	mov	r0, r8
 8009dfa:	f8cd a000 	str.w	sl, [sp]
 8009dfe:	f7ff fee3 	bl	8009bc8 <_printf_common>
 8009e02:	3001      	adds	r0, #1
 8009e04:	d14a      	bne.n	8009e9c <_printf_i+0x1f0>
 8009e06:	f04f 30ff 	mov.w	r0, #4294967295
 8009e0a:	b004      	add	sp, #16
 8009e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e10:	6823      	ldr	r3, [r4, #0]
 8009e12:	f043 0320 	orr.w	r3, r3, #32
 8009e16:	6023      	str	r3, [r4, #0]
 8009e18:	2778      	movs	r7, #120	@ 0x78
 8009e1a:	4832      	ldr	r0, [pc, #200]	@ (8009ee4 <_printf_i+0x238>)
 8009e1c:	6823      	ldr	r3, [r4, #0]
 8009e1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009e22:	061f      	lsls	r7, r3, #24
 8009e24:	6831      	ldr	r1, [r6, #0]
 8009e26:	f851 5b04 	ldr.w	r5, [r1], #4
 8009e2a:	d402      	bmi.n	8009e32 <_printf_i+0x186>
 8009e2c:	065f      	lsls	r7, r3, #25
 8009e2e:	bf48      	it	mi
 8009e30:	b2ad      	uxthmi	r5, r5
 8009e32:	6031      	str	r1, [r6, #0]
 8009e34:	07d9      	lsls	r1, r3, #31
 8009e36:	bf44      	itt	mi
 8009e38:	f043 0320 	orrmi.w	r3, r3, #32
 8009e3c:	6023      	strmi	r3, [r4, #0]
 8009e3e:	b11d      	cbz	r5, 8009e48 <_printf_i+0x19c>
 8009e40:	2310      	movs	r3, #16
 8009e42:	e7ad      	b.n	8009da0 <_printf_i+0xf4>
 8009e44:	4826      	ldr	r0, [pc, #152]	@ (8009ee0 <_printf_i+0x234>)
 8009e46:	e7e9      	b.n	8009e1c <_printf_i+0x170>
 8009e48:	6823      	ldr	r3, [r4, #0]
 8009e4a:	f023 0320 	bic.w	r3, r3, #32
 8009e4e:	6023      	str	r3, [r4, #0]
 8009e50:	e7f6      	b.n	8009e40 <_printf_i+0x194>
 8009e52:	4616      	mov	r6, r2
 8009e54:	e7bd      	b.n	8009dd2 <_printf_i+0x126>
 8009e56:	6833      	ldr	r3, [r6, #0]
 8009e58:	6825      	ldr	r5, [r4, #0]
 8009e5a:	1d18      	adds	r0, r3, #4
 8009e5c:	6961      	ldr	r1, [r4, #20]
 8009e5e:	6030      	str	r0, [r6, #0]
 8009e60:	062e      	lsls	r6, r5, #24
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	d501      	bpl.n	8009e6a <_printf_i+0x1be>
 8009e66:	6019      	str	r1, [r3, #0]
 8009e68:	e002      	b.n	8009e70 <_printf_i+0x1c4>
 8009e6a:	0668      	lsls	r0, r5, #25
 8009e6c:	d5fb      	bpl.n	8009e66 <_printf_i+0x1ba>
 8009e6e:	8019      	strh	r1, [r3, #0]
 8009e70:	2300      	movs	r3, #0
 8009e72:	4616      	mov	r6, r2
 8009e74:	6123      	str	r3, [r4, #16]
 8009e76:	e7bc      	b.n	8009df2 <_printf_i+0x146>
 8009e78:	6833      	ldr	r3, [r6, #0]
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	1d1a      	adds	r2, r3, #4
 8009e7e:	6032      	str	r2, [r6, #0]
 8009e80:	681e      	ldr	r6, [r3, #0]
 8009e82:	6862      	ldr	r2, [r4, #4]
 8009e84:	4630      	mov	r0, r6
 8009e86:	f000 f9c6 	bl	800a216 <memchr>
 8009e8a:	b108      	cbz	r0, 8009e90 <_printf_i+0x1e4>
 8009e8c:	1b80      	subs	r0, r0, r6
 8009e8e:	6060      	str	r0, [r4, #4]
 8009e90:	6863      	ldr	r3, [r4, #4]
 8009e92:	6123      	str	r3, [r4, #16]
 8009e94:	2300      	movs	r3, #0
 8009e96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e9a:	e7aa      	b.n	8009df2 <_printf_i+0x146>
 8009e9c:	6923      	ldr	r3, [r4, #16]
 8009e9e:	4632      	mov	r2, r6
 8009ea0:	4649      	mov	r1, r9
 8009ea2:	4640      	mov	r0, r8
 8009ea4:	47d0      	blx	sl
 8009ea6:	3001      	adds	r0, #1
 8009ea8:	d0ad      	beq.n	8009e06 <_printf_i+0x15a>
 8009eaa:	6823      	ldr	r3, [r4, #0]
 8009eac:	079b      	lsls	r3, r3, #30
 8009eae:	d413      	bmi.n	8009ed8 <_printf_i+0x22c>
 8009eb0:	68e0      	ldr	r0, [r4, #12]
 8009eb2:	9b03      	ldr	r3, [sp, #12]
 8009eb4:	4298      	cmp	r0, r3
 8009eb6:	bfb8      	it	lt
 8009eb8:	4618      	movlt	r0, r3
 8009eba:	e7a6      	b.n	8009e0a <_printf_i+0x15e>
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	4632      	mov	r2, r6
 8009ec0:	4649      	mov	r1, r9
 8009ec2:	4640      	mov	r0, r8
 8009ec4:	47d0      	blx	sl
 8009ec6:	3001      	adds	r0, #1
 8009ec8:	d09d      	beq.n	8009e06 <_printf_i+0x15a>
 8009eca:	3501      	adds	r5, #1
 8009ecc:	68e3      	ldr	r3, [r4, #12]
 8009ece:	9903      	ldr	r1, [sp, #12]
 8009ed0:	1a5b      	subs	r3, r3, r1
 8009ed2:	42ab      	cmp	r3, r5
 8009ed4:	dcf2      	bgt.n	8009ebc <_printf_i+0x210>
 8009ed6:	e7eb      	b.n	8009eb0 <_printf_i+0x204>
 8009ed8:	2500      	movs	r5, #0
 8009eda:	f104 0619 	add.w	r6, r4, #25
 8009ede:	e7f5      	b.n	8009ecc <_printf_i+0x220>
 8009ee0:	0800c482 	.word	0x0800c482
 8009ee4:	0800c493 	.word	0x0800c493

08009ee8 <std>:
 8009ee8:	2300      	movs	r3, #0
 8009eea:	b510      	push	{r4, lr}
 8009eec:	4604      	mov	r4, r0
 8009eee:	6083      	str	r3, [r0, #8]
 8009ef0:	8181      	strh	r1, [r0, #12]
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	6643      	str	r3, [r0, #100]	@ 0x64
 8009ef6:	81c2      	strh	r2, [r0, #14]
 8009ef8:	2208      	movs	r2, #8
 8009efa:	6183      	str	r3, [r0, #24]
 8009efc:	e9c0 3300 	strd	r3, r3, [r0]
 8009f00:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f04:	305c      	adds	r0, #92	@ 0x5c
 8009f06:	f000 f906 	bl	800a116 <memset>
 8009f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8009f40 <std+0x58>)
 8009f0c:	6224      	str	r4, [r4, #32]
 8009f0e:	6263      	str	r3, [r4, #36]	@ 0x24
 8009f10:	4b0c      	ldr	r3, [pc, #48]	@ (8009f44 <std+0x5c>)
 8009f12:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009f14:	4b0c      	ldr	r3, [pc, #48]	@ (8009f48 <std+0x60>)
 8009f16:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009f18:	4b0c      	ldr	r3, [pc, #48]	@ (8009f4c <std+0x64>)
 8009f1a:	6323      	str	r3, [r4, #48]	@ 0x30
 8009f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8009f50 <std+0x68>)
 8009f1e:	429c      	cmp	r4, r3
 8009f20:	d006      	beq.n	8009f30 <std+0x48>
 8009f22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009f26:	4294      	cmp	r4, r2
 8009f28:	d002      	beq.n	8009f30 <std+0x48>
 8009f2a:	33d0      	adds	r3, #208	@ 0xd0
 8009f2c:	429c      	cmp	r4, r3
 8009f2e:	d105      	bne.n	8009f3c <std+0x54>
 8009f30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f38:	f000 b96a 	b.w	800a210 <__retarget_lock_init_recursive>
 8009f3c:	bd10      	pop	{r4, pc}
 8009f3e:	bf00      	nop
 8009f40:	0800a091 	.word	0x0800a091
 8009f44:	0800a0b3 	.word	0x0800a0b3
 8009f48:	0800a0eb 	.word	0x0800a0eb
 8009f4c:	0800a10f 	.word	0x0800a10f
 8009f50:	20000714 	.word	0x20000714

08009f54 <stdio_exit_handler>:
 8009f54:	4a02      	ldr	r2, [pc, #8]	@ (8009f60 <stdio_exit_handler+0xc>)
 8009f56:	4903      	ldr	r1, [pc, #12]	@ (8009f64 <stdio_exit_handler+0x10>)
 8009f58:	4803      	ldr	r0, [pc, #12]	@ (8009f68 <stdio_exit_handler+0x14>)
 8009f5a:	f000 b869 	b.w	800a030 <_fwalk_sglue>
 8009f5e:	bf00      	nop
 8009f60:	20000010 	.word	0x20000010
 8009f64:	0800bb85 	.word	0x0800bb85
 8009f68:	20000020 	.word	0x20000020

08009f6c <cleanup_stdio>:
 8009f6c:	6841      	ldr	r1, [r0, #4]
 8009f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8009fa0 <cleanup_stdio+0x34>)
 8009f70:	4299      	cmp	r1, r3
 8009f72:	b510      	push	{r4, lr}
 8009f74:	4604      	mov	r4, r0
 8009f76:	d001      	beq.n	8009f7c <cleanup_stdio+0x10>
 8009f78:	f001 fe04 	bl	800bb84 <_fflush_r>
 8009f7c:	68a1      	ldr	r1, [r4, #8]
 8009f7e:	4b09      	ldr	r3, [pc, #36]	@ (8009fa4 <cleanup_stdio+0x38>)
 8009f80:	4299      	cmp	r1, r3
 8009f82:	d002      	beq.n	8009f8a <cleanup_stdio+0x1e>
 8009f84:	4620      	mov	r0, r4
 8009f86:	f001 fdfd 	bl	800bb84 <_fflush_r>
 8009f8a:	68e1      	ldr	r1, [r4, #12]
 8009f8c:	4b06      	ldr	r3, [pc, #24]	@ (8009fa8 <cleanup_stdio+0x3c>)
 8009f8e:	4299      	cmp	r1, r3
 8009f90:	d004      	beq.n	8009f9c <cleanup_stdio+0x30>
 8009f92:	4620      	mov	r0, r4
 8009f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f98:	f001 bdf4 	b.w	800bb84 <_fflush_r>
 8009f9c:	bd10      	pop	{r4, pc}
 8009f9e:	bf00      	nop
 8009fa0:	20000714 	.word	0x20000714
 8009fa4:	2000077c 	.word	0x2000077c
 8009fa8:	200007e4 	.word	0x200007e4

08009fac <global_stdio_init.part.0>:
 8009fac:	b510      	push	{r4, lr}
 8009fae:	4b0b      	ldr	r3, [pc, #44]	@ (8009fdc <global_stdio_init.part.0+0x30>)
 8009fb0:	2104      	movs	r1, #4
 8009fb2:	4c0b      	ldr	r4, [pc, #44]	@ (8009fe0 <global_stdio_init.part.0+0x34>)
 8009fb4:	4a0b      	ldr	r2, [pc, #44]	@ (8009fe4 <global_stdio_init.part.0+0x38>)
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	601a      	str	r2, [r3, #0]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f7ff ff94 	bl	8009ee8 <std>
 8009fc0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	2109      	movs	r1, #9
 8009fc8:	f7ff ff8e 	bl	8009ee8 <std>
 8009fcc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009fd0:	2202      	movs	r2, #2
 8009fd2:	2112      	movs	r1, #18
 8009fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fd8:	f7ff bf86 	b.w	8009ee8 <std>
 8009fdc:	2000084c 	.word	0x2000084c
 8009fe0:	20000714 	.word	0x20000714
 8009fe4:	08009f55 	.word	0x08009f55

08009fe8 <__sfp_lock_acquire>:
 8009fe8:	4801      	ldr	r0, [pc, #4]	@ (8009ff0 <__sfp_lock_acquire+0x8>)
 8009fea:	f000 b912 	b.w	800a212 <__retarget_lock_acquire_recursive>
 8009fee:	bf00      	nop
 8009ff0:	20000855 	.word	0x20000855

08009ff4 <__sfp_lock_release>:
 8009ff4:	4801      	ldr	r0, [pc, #4]	@ (8009ffc <__sfp_lock_release+0x8>)
 8009ff6:	f000 b90d 	b.w	800a214 <__retarget_lock_release_recursive>
 8009ffa:	bf00      	nop
 8009ffc:	20000855 	.word	0x20000855

0800a000 <__sinit>:
 800a000:	b510      	push	{r4, lr}
 800a002:	4604      	mov	r4, r0
 800a004:	f7ff fff0 	bl	8009fe8 <__sfp_lock_acquire>
 800a008:	6a23      	ldr	r3, [r4, #32]
 800a00a:	b11b      	cbz	r3, 800a014 <__sinit+0x14>
 800a00c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a010:	f7ff bff0 	b.w	8009ff4 <__sfp_lock_release>
 800a014:	4b04      	ldr	r3, [pc, #16]	@ (800a028 <__sinit+0x28>)
 800a016:	6223      	str	r3, [r4, #32]
 800a018:	4b04      	ldr	r3, [pc, #16]	@ (800a02c <__sinit+0x2c>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d1f5      	bne.n	800a00c <__sinit+0xc>
 800a020:	f7ff ffc4 	bl	8009fac <global_stdio_init.part.0>
 800a024:	e7f2      	b.n	800a00c <__sinit+0xc>
 800a026:	bf00      	nop
 800a028:	08009f6d 	.word	0x08009f6d
 800a02c:	2000084c 	.word	0x2000084c

0800a030 <_fwalk_sglue>:
 800a030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a034:	4607      	mov	r7, r0
 800a036:	4688      	mov	r8, r1
 800a038:	4614      	mov	r4, r2
 800a03a:	2600      	movs	r6, #0
 800a03c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a040:	f1b9 0901 	subs.w	r9, r9, #1
 800a044:	d505      	bpl.n	800a052 <_fwalk_sglue+0x22>
 800a046:	6824      	ldr	r4, [r4, #0]
 800a048:	2c00      	cmp	r4, #0
 800a04a:	d1f7      	bne.n	800a03c <_fwalk_sglue+0xc>
 800a04c:	4630      	mov	r0, r6
 800a04e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a052:	89ab      	ldrh	r3, [r5, #12]
 800a054:	2b01      	cmp	r3, #1
 800a056:	d907      	bls.n	800a068 <_fwalk_sglue+0x38>
 800a058:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a05c:	3301      	adds	r3, #1
 800a05e:	d003      	beq.n	800a068 <_fwalk_sglue+0x38>
 800a060:	4629      	mov	r1, r5
 800a062:	4638      	mov	r0, r7
 800a064:	47c0      	blx	r8
 800a066:	4306      	orrs	r6, r0
 800a068:	3568      	adds	r5, #104	@ 0x68
 800a06a:	e7e9      	b.n	800a040 <_fwalk_sglue+0x10>

0800a06c <iprintf>:
 800a06c:	b40f      	push	{r0, r1, r2, r3}
 800a06e:	b507      	push	{r0, r1, r2, lr}
 800a070:	4906      	ldr	r1, [pc, #24]	@ (800a08c <iprintf+0x20>)
 800a072:	ab04      	add	r3, sp, #16
 800a074:	6808      	ldr	r0, [r1, #0]
 800a076:	f853 2b04 	ldr.w	r2, [r3], #4
 800a07a:	6881      	ldr	r1, [r0, #8]
 800a07c:	9301      	str	r3, [sp, #4]
 800a07e:	f001 fbe5 	bl	800b84c <_vfiprintf_r>
 800a082:	b003      	add	sp, #12
 800a084:	f85d eb04 	ldr.w	lr, [sp], #4
 800a088:	b004      	add	sp, #16
 800a08a:	4770      	bx	lr
 800a08c:	2000001c 	.word	0x2000001c

0800a090 <__sread>:
 800a090:	b510      	push	{r4, lr}
 800a092:	460c      	mov	r4, r1
 800a094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a098:	f000 f86c 	bl	800a174 <_read_r>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	bfab      	itete	ge
 800a0a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a0a2:	89a3      	ldrhlt	r3, [r4, #12]
 800a0a4:	181b      	addge	r3, r3, r0
 800a0a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a0aa:	bfac      	ite	ge
 800a0ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a0ae:	81a3      	strhlt	r3, [r4, #12]
 800a0b0:	bd10      	pop	{r4, pc}

0800a0b2 <__swrite>:
 800a0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b6:	461f      	mov	r7, r3
 800a0b8:	898b      	ldrh	r3, [r1, #12]
 800a0ba:	4605      	mov	r5, r0
 800a0bc:	460c      	mov	r4, r1
 800a0be:	05db      	lsls	r3, r3, #23
 800a0c0:	4616      	mov	r6, r2
 800a0c2:	d505      	bpl.n	800a0d0 <__swrite+0x1e>
 800a0c4:	2302      	movs	r3, #2
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0cc:	f000 f840 	bl	800a150 <_lseek_r>
 800a0d0:	89a3      	ldrh	r3, [r4, #12]
 800a0d2:	4632      	mov	r2, r6
 800a0d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0d8:	4628      	mov	r0, r5
 800a0da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a0de:	81a3      	strh	r3, [r4, #12]
 800a0e0:	463b      	mov	r3, r7
 800a0e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0e6:	f000 b857 	b.w	800a198 <_write_r>

0800a0ea <__sseek>:
 800a0ea:	b510      	push	{r4, lr}
 800a0ec:	460c      	mov	r4, r1
 800a0ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0f2:	f000 f82d 	bl	800a150 <_lseek_r>
 800a0f6:	1c43      	adds	r3, r0, #1
 800a0f8:	89a3      	ldrh	r3, [r4, #12]
 800a0fa:	bf15      	itete	ne
 800a0fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a0fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a102:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a106:	81a3      	strheq	r3, [r4, #12]
 800a108:	bf18      	it	ne
 800a10a:	81a3      	strhne	r3, [r4, #12]
 800a10c:	bd10      	pop	{r4, pc}

0800a10e <__sclose>:
 800a10e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a112:	f000 b80d 	b.w	800a130 <_close_r>

0800a116 <memset>:
 800a116:	4402      	add	r2, r0
 800a118:	4603      	mov	r3, r0
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d100      	bne.n	800a120 <memset+0xa>
 800a11e:	4770      	bx	lr
 800a120:	f803 1b01 	strb.w	r1, [r3], #1
 800a124:	e7f9      	b.n	800a11a <memset+0x4>
	...

0800a128 <_localeconv_r>:
 800a128:	4800      	ldr	r0, [pc, #0]	@ (800a12c <_localeconv_r+0x4>)
 800a12a:	4770      	bx	lr
 800a12c:	2000015c 	.word	0x2000015c

0800a130 <_close_r>:
 800a130:	b538      	push	{r3, r4, r5, lr}
 800a132:	2300      	movs	r3, #0
 800a134:	4d05      	ldr	r5, [pc, #20]	@ (800a14c <_close_r+0x1c>)
 800a136:	4604      	mov	r4, r0
 800a138:	4608      	mov	r0, r1
 800a13a:	602b      	str	r3, [r5, #0]
 800a13c:	f7f8 f8db 	bl	80022f6 <_close>
 800a140:	1c43      	adds	r3, r0, #1
 800a142:	d102      	bne.n	800a14a <_close_r+0x1a>
 800a144:	682b      	ldr	r3, [r5, #0]
 800a146:	b103      	cbz	r3, 800a14a <_close_r+0x1a>
 800a148:	6023      	str	r3, [r4, #0]
 800a14a:	bd38      	pop	{r3, r4, r5, pc}
 800a14c:	20000850 	.word	0x20000850

0800a150 <_lseek_r>:
 800a150:	b538      	push	{r3, r4, r5, lr}
 800a152:	4604      	mov	r4, r0
 800a154:	4d06      	ldr	r5, [pc, #24]	@ (800a170 <_lseek_r+0x20>)
 800a156:	4608      	mov	r0, r1
 800a158:	4611      	mov	r1, r2
 800a15a:	2200      	movs	r2, #0
 800a15c:	602a      	str	r2, [r5, #0]
 800a15e:	461a      	mov	r2, r3
 800a160:	f7f8 f8f0 	bl	8002344 <_lseek>
 800a164:	1c43      	adds	r3, r0, #1
 800a166:	d102      	bne.n	800a16e <_lseek_r+0x1e>
 800a168:	682b      	ldr	r3, [r5, #0]
 800a16a:	b103      	cbz	r3, 800a16e <_lseek_r+0x1e>
 800a16c:	6023      	str	r3, [r4, #0]
 800a16e:	bd38      	pop	{r3, r4, r5, pc}
 800a170:	20000850 	.word	0x20000850

0800a174 <_read_r>:
 800a174:	b538      	push	{r3, r4, r5, lr}
 800a176:	4604      	mov	r4, r0
 800a178:	4d06      	ldr	r5, [pc, #24]	@ (800a194 <_read_r+0x20>)
 800a17a:	4608      	mov	r0, r1
 800a17c:	4611      	mov	r1, r2
 800a17e:	2200      	movs	r2, #0
 800a180:	602a      	str	r2, [r5, #0]
 800a182:	461a      	mov	r2, r3
 800a184:	f7f8 f89a 	bl	80022bc <_read>
 800a188:	1c43      	adds	r3, r0, #1
 800a18a:	d102      	bne.n	800a192 <_read_r+0x1e>
 800a18c:	682b      	ldr	r3, [r5, #0]
 800a18e:	b103      	cbz	r3, 800a192 <_read_r+0x1e>
 800a190:	6023      	str	r3, [r4, #0]
 800a192:	bd38      	pop	{r3, r4, r5, pc}
 800a194:	20000850 	.word	0x20000850

0800a198 <_write_r>:
 800a198:	b538      	push	{r3, r4, r5, lr}
 800a19a:	4604      	mov	r4, r0
 800a19c:	4d06      	ldr	r5, [pc, #24]	@ (800a1b8 <_write_r+0x20>)
 800a19e:	4608      	mov	r0, r1
 800a1a0:	4611      	mov	r1, r2
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	602a      	str	r2, [r5, #0]
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	f7f7 fd5c 	bl	8001c64 <_write>
 800a1ac:	1c43      	adds	r3, r0, #1
 800a1ae:	d102      	bne.n	800a1b6 <_write_r+0x1e>
 800a1b0:	682b      	ldr	r3, [r5, #0]
 800a1b2:	b103      	cbz	r3, 800a1b6 <_write_r+0x1e>
 800a1b4:	6023      	str	r3, [r4, #0]
 800a1b6:	bd38      	pop	{r3, r4, r5, pc}
 800a1b8:	20000850 	.word	0x20000850

0800a1bc <__errno>:
 800a1bc:	4b01      	ldr	r3, [pc, #4]	@ (800a1c4 <__errno+0x8>)
 800a1be:	6818      	ldr	r0, [r3, #0]
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop
 800a1c4:	2000001c 	.word	0x2000001c

0800a1c8 <__libc_init_array>:
 800a1c8:	b570      	push	{r4, r5, r6, lr}
 800a1ca:	4d0d      	ldr	r5, [pc, #52]	@ (800a200 <__libc_init_array+0x38>)
 800a1cc:	2600      	movs	r6, #0
 800a1ce:	4c0d      	ldr	r4, [pc, #52]	@ (800a204 <__libc_init_array+0x3c>)
 800a1d0:	1b64      	subs	r4, r4, r5
 800a1d2:	10a4      	asrs	r4, r4, #2
 800a1d4:	42a6      	cmp	r6, r4
 800a1d6:	d109      	bne.n	800a1ec <__libc_init_array+0x24>
 800a1d8:	4d0b      	ldr	r5, [pc, #44]	@ (800a208 <__libc_init_array+0x40>)
 800a1da:	2600      	movs	r6, #0
 800a1dc:	4c0b      	ldr	r4, [pc, #44]	@ (800a20c <__libc_init_array+0x44>)
 800a1de:	f001 fedf 	bl	800bfa0 <_init>
 800a1e2:	1b64      	subs	r4, r4, r5
 800a1e4:	10a4      	asrs	r4, r4, #2
 800a1e6:	42a6      	cmp	r6, r4
 800a1e8:	d105      	bne.n	800a1f6 <__libc_init_array+0x2e>
 800a1ea:	bd70      	pop	{r4, r5, r6, pc}
 800a1ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1f0:	3601      	adds	r6, #1
 800a1f2:	4798      	blx	r3
 800a1f4:	e7ee      	b.n	800a1d4 <__libc_init_array+0xc>
 800a1f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1fa:	3601      	adds	r6, #1
 800a1fc:	4798      	blx	r3
 800a1fe:	e7f2      	b.n	800a1e6 <__libc_init_array+0x1e>
 800a200:	0800c7ec 	.word	0x0800c7ec
 800a204:	0800c7ec 	.word	0x0800c7ec
 800a208:	0800c7ec 	.word	0x0800c7ec
 800a20c:	0800c7f0 	.word	0x0800c7f0

0800a210 <__retarget_lock_init_recursive>:
 800a210:	4770      	bx	lr

0800a212 <__retarget_lock_acquire_recursive>:
 800a212:	4770      	bx	lr

0800a214 <__retarget_lock_release_recursive>:
 800a214:	4770      	bx	lr

0800a216 <memchr>:
 800a216:	b2c9      	uxtb	r1, r1
 800a218:	4603      	mov	r3, r0
 800a21a:	4402      	add	r2, r0
 800a21c:	b510      	push	{r4, lr}
 800a21e:	4293      	cmp	r3, r2
 800a220:	4618      	mov	r0, r3
 800a222:	d101      	bne.n	800a228 <memchr+0x12>
 800a224:	2000      	movs	r0, #0
 800a226:	e003      	b.n	800a230 <memchr+0x1a>
 800a228:	7804      	ldrb	r4, [r0, #0]
 800a22a:	3301      	adds	r3, #1
 800a22c:	428c      	cmp	r4, r1
 800a22e:	d1f6      	bne.n	800a21e <memchr+0x8>
 800a230:	bd10      	pop	{r4, pc}

0800a232 <quorem>:
 800a232:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a236:	6903      	ldr	r3, [r0, #16]
 800a238:	4607      	mov	r7, r0
 800a23a:	690c      	ldr	r4, [r1, #16]
 800a23c:	42a3      	cmp	r3, r4
 800a23e:	f2c0 8083 	blt.w	800a348 <quorem+0x116>
 800a242:	3c01      	subs	r4, #1
 800a244:	f100 0514 	add.w	r5, r0, #20
 800a248:	f101 0814 	add.w	r8, r1, #20
 800a24c:	00a3      	lsls	r3, r4, #2
 800a24e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a252:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a25c:	9301      	str	r3, [sp, #4]
 800a25e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a262:	3301      	adds	r3, #1
 800a264:	429a      	cmp	r2, r3
 800a266:	fbb2 f6f3 	udiv	r6, r2, r3
 800a26a:	d331      	bcc.n	800a2d0 <quorem+0x9e>
 800a26c:	f04f 0a00 	mov.w	sl, #0
 800a270:	46c4      	mov	ip, r8
 800a272:	46ae      	mov	lr, r5
 800a274:	46d3      	mov	fp, sl
 800a276:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a27a:	b298      	uxth	r0, r3
 800a27c:	45e1      	cmp	r9, ip
 800a27e:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a282:	fb06 a000 	mla	r0, r6, r0, sl
 800a286:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800a28a:	b280      	uxth	r0, r0
 800a28c:	fb06 2303 	mla	r3, r6, r3, r2
 800a290:	f8de 2000 	ldr.w	r2, [lr]
 800a294:	b292      	uxth	r2, r2
 800a296:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a29a:	eba2 0200 	sub.w	r2, r2, r0
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	f8de 0000 	ldr.w	r0, [lr]
 800a2a4:	445a      	add	r2, fp
 800a2a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a2aa:	b292      	uxth	r2, r2
 800a2ac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a2b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a2b4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a2b8:	f84e 2b04 	str.w	r2, [lr], #4
 800a2bc:	d2db      	bcs.n	800a276 <quorem+0x44>
 800a2be:	9b00      	ldr	r3, [sp, #0]
 800a2c0:	58eb      	ldr	r3, [r5, r3]
 800a2c2:	b92b      	cbnz	r3, 800a2d0 <quorem+0x9e>
 800a2c4:	9b01      	ldr	r3, [sp, #4]
 800a2c6:	3b04      	subs	r3, #4
 800a2c8:	429d      	cmp	r5, r3
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	d330      	bcc.n	800a330 <quorem+0xfe>
 800a2ce:	613c      	str	r4, [r7, #16]
 800a2d0:	4638      	mov	r0, r7
 800a2d2:	f001 f985 	bl	800b5e0 <__mcmp>
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	db26      	blt.n	800a328 <quorem+0xf6>
 800a2da:	4629      	mov	r1, r5
 800a2dc:	2000      	movs	r0, #0
 800a2de:	f858 2b04 	ldr.w	r2, [r8], #4
 800a2e2:	f8d1 c000 	ldr.w	ip, [r1]
 800a2e6:	fa1f fe82 	uxth.w	lr, r2
 800a2ea:	45c1      	cmp	r9, r8
 800a2ec:	fa1f f38c 	uxth.w	r3, ip
 800a2f0:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800a2f4:	eba3 030e 	sub.w	r3, r3, lr
 800a2f8:	4403      	add	r3, r0
 800a2fa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a304:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a308:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a30c:	f841 3b04 	str.w	r3, [r1], #4
 800a310:	d2e5      	bcs.n	800a2de <quorem+0xac>
 800a312:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a316:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a31a:	b922      	cbnz	r2, 800a326 <quorem+0xf4>
 800a31c:	3b04      	subs	r3, #4
 800a31e:	429d      	cmp	r5, r3
 800a320:	461a      	mov	r2, r3
 800a322:	d30b      	bcc.n	800a33c <quorem+0x10a>
 800a324:	613c      	str	r4, [r7, #16]
 800a326:	3601      	adds	r6, #1
 800a328:	4630      	mov	r0, r6
 800a32a:	b003      	add	sp, #12
 800a32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a330:	6812      	ldr	r2, [r2, #0]
 800a332:	3b04      	subs	r3, #4
 800a334:	2a00      	cmp	r2, #0
 800a336:	d1ca      	bne.n	800a2ce <quorem+0x9c>
 800a338:	3c01      	subs	r4, #1
 800a33a:	e7c5      	b.n	800a2c8 <quorem+0x96>
 800a33c:	6812      	ldr	r2, [r2, #0]
 800a33e:	3b04      	subs	r3, #4
 800a340:	2a00      	cmp	r2, #0
 800a342:	d1ef      	bne.n	800a324 <quorem+0xf2>
 800a344:	3c01      	subs	r4, #1
 800a346:	e7ea      	b.n	800a31e <quorem+0xec>
 800a348:	2000      	movs	r0, #0
 800a34a:	e7ee      	b.n	800a32a <quorem+0xf8>
 800a34c:	0000      	movs	r0, r0
	...

0800a350 <_dtoa_r>:
 800a350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a354:	69c7      	ldr	r7, [r0, #28]
 800a356:	b097      	sub	sp, #92	@ 0x5c
 800a358:	4681      	mov	r9, r0
 800a35a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a35c:	9107      	str	r1, [sp, #28]
 800a35e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a360:	9311      	str	r3, [sp, #68]	@ 0x44
 800a362:	ec55 4b10 	vmov	r4, r5, d0
 800a366:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a36a:	b97f      	cbnz	r7, 800a38c <_dtoa_r+0x3c>
 800a36c:	2010      	movs	r0, #16
 800a36e:	f000 fe0b 	bl	800af88 <malloc>
 800a372:	4602      	mov	r2, r0
 800a374:	f8c9 001c 	str.w	r0, [r9, #28]
 800a378:	b920      	cbnz	r0, 800a384 <_dtoa_r+0x34>
 800a37a:	4ba9      	ldr	r3, [pc, #676]	@ (800a620 <_dtoa_r+0x2d0>)
 800a37c:	21ef      	movs	r1, #239	@ 0xef
 800a37e:	48a9      	ldr	r0, [pc, #676]	@ (800a624 <_dtoa_r+0x2d4>)
 800a380:	f001 fcda 	bl	800bd38 <__assert_func>
 800a384:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a388:	6007      	str	r7, [r0, #0]
 800a38a:	60c7      	str	r7, [r0, #12]
 800a38c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a390:	6819      	ldr	r1, [r3, #0]
 800a392:	b159      	cbz	r1, 800a3ac <_dtoa_r+0x5c>
 800a394:	685a      	ldr	r2, [r3, #4]
 800a396:	2301      	movs	r3, #1
 800a398:	4648      	mov	r0, r9
 800a39a:	4093      	lsls	r3, r2
 800a39c:	604a      	str	r2, [r1, #4]
 800a39e:	608b      	str	r3, [r1, #8]
 800a3a0:	f000 fee8 	bl	800b174 <_Bfree>
 800a3a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	601a      	str	r2, [r3, #0]
 800a3ac:	1e2b      	subs	r3, r5, #0
 800a3ae:	bfb7      	itett	lt
 800a3b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a3b4:	2300      	movge	r3, #0
 800a3b6:	2201      	movlt	r2, #1
 800a3b8:	9305      	strlt	r3, [sp, #20]
 800a3ba:	bfa8      	it	ge
 800a3bc:	6033      	strge	r3, [r6, #0]
 800a3be:	9f05      	ldr	r7, [sp, #20]
 800a3c0:	4b99      	ldr	r3, [pc, #612]	@ (800a628 <_dtoa_r+0x2d8>)
 800a3c2:	bfb8      	it	lt
 800a3c4:	6032      	strlt	r2, [r6, #0]
 800a3c6:	43bb      	bics	r3, r7
 800a3c8:	d112      	bne.n	800a3f0 <_dtoa_r+0xa0>
 800a3ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a3ce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a3d0:	6013      	str	r3, [r2, #0]
 800a3d2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a3d6:	4323      	orrs	r3, r4
 800a3d8:	f000 855a 	beq.w	800ae90 <_dtoa_r+0xb40>
 800a3dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a3de:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a63c <_dtoa_r+0x2ec>
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	f000 855c 	beq.w	800aea0 <_dtoa_r+0xb50>
 800a3e8:	f10a 0303 	add.w	r3, sl, #3
 800a3ec:	f000 bd56 	b.w	800ae9c <_dtoa_r+0xb4c>
 800a3f0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	ec51 0b17 	vmov	r0, r1, d7
 800a3fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a400:	f7f6 fb46 	bl	8000a90 <__aeabi_dcmpeq>
 800a404:	4680      	mov	r8, r0
 800a406:	b158      	cbz	r0, 800a420 <_dtoa_r+0xd0>
 800a408:	2301      	movs	r3, #1
 800a40a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a40c:	6013      	str	r3, [r2, #0]
 800a40e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a410:	b113      	cbz	r3, 800a418 <_dtoa_r+0xc8>
 800a412:	4b86      	ldr	r3, [pc, #536]	@ (800a62c <_dtoa_r+0x2dc>)
 800a414:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a416:	6013      	str	r3, [r2, #0]
 800a418:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800a640 <_dtoa_r+0x2f0>
 800a41c:	f000 bd40 	b.w	800aea0 <_dtoa_r+0xb50>
 800a420:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a424:	aa14      	add	r2, sp, #80	@ 0x50
 800a426:	a915      	add	r1, sp, #84	@ 0x54
 800a428:	4648      	mov	r0, r9
 800a42a:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a42e:	f001 f98b 	bl	800b748 <__d2b>
 800a432:	9002      	str	r0, [sp, #8]
 800a434:	2e00      	cmp	r6, #0
 800a436:	d076      	beq.n	800a526 <_dtoa_r+0x1d6>
 800a438:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a43a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a43e:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a442:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a446:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a44a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a44e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a452:	4619      	mov	r1, r3
 800a454:	2200      	movs	r2, #0
 800a456:	4b76      	ldr	r3, [pc, #472]	@ (800a630 <_dtoa_r+0x2e0>)
 800a458:	f7f5 fefa 	bl	8000250 <__aeabi_dsub>
 800a45c:	a36a      	add	r3, pc, #424	@ (adr r3, 800a608 <_dtoa_r+0x2b8>)
 800a45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a462:	f7f6 f8ad 	bl	80005c0 <__aeabi_dmul>
 800a466:	a36a      	add	r3, pc, #424	@ (adr r3, 800a610 <_dtoa_r+0x2c0>)
 800a468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46c:	f7f5 fef2 	bl	8000254 <__adddf3>
 800a470:	4604      	mov	r4, r0
 800a472:	460d      	mov	r5, r1
 800a474:	4630      	mov	r0, r6
 800a476:	f7f6 f839 	bl	80004ec <__aeabi_i2d>
 800a47a:	a367      	add	r3, pc, #412	@ (adr r3, 800a618 <_dtoa_r+0x2c8>)
 800a47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a480:	f7f6 f89e 	bl	80005c0 <__aeabi_dmul>
 800a484:	4602      	mov	r2, r0
 800a486:	460b      	mov	r3, r1
 800a488:	4620      	mov	r0, r4
 800a48a:	4629      	mov	r1, r5
 800a48c:	f7f5 fee2 	bl	8000254 <__adddf3>
 800a490:	4604      	mov	r4, r0
 800a492:	460d      	mov	r5, r1
 800a494:	f7f6 fb44 	bl	8000b20 <__aeabi_d2iz>
 800a498:	2200      	movs	r2, #0
 800a49a:	4607      	mov	r7, r0
 800a49c:	2300      	movs	r3, #0
 800a49e:	4620      	mov	r0, r4
 800a4a0:	4629      	mov	r1, r5
 800a4a2:	f7f6 faff 	bl	8000aa4 <__aeabi_dcmplt>
 800a4a6:	b140      	cbz	r0, 800a4ba <_dtoa_r+0x16a>
 800a4a8:	4638      	mov	r0, r7
 800a4aa:	f7f6 f81f 	bl	80004ec <__aeabi_i2d>
 800a4ae:	4622      	mov	r2, r4
 800a4b0:	462b      	mov	r3, r5
 800a4b2:	f7f6 faed 	bl	8000a90 <__aeabi_dcmpeq>
 800a4b6:	b900      	cbnz	r0, 800a4ba <_dtoa_r+0x16a>
 800a4b8:	3f01      	subs	r7, #1
 800a4ba:	2f16      	cmp	r7, #22
 800a4bc:	d852      	bhi.n	800a564 <_dtoa_r+0x214>
 800a4be:	4b5d      	ldr	r3, [pc, #372]	@ (800a634 <_dtoa_r+0x2e4>)
 800a4c0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a4c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4cc:	f7f6 faea 	bl	8000aa4 <__aeabi_dcmplt>
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d049      	beq.n	800a568 <_dtoa_r+0x218>
 800a4d4:	3f01      	subs	r7, #1
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a4da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a4dc:	1b9b      	subs	r3, r3, r6
 800a4de:	1e5a      	subs	r2, r3, #1
 800a4e0:	bf4c      	ite	mi
 800a4e2:	f1c3 0301 	rsbmi	r3, r3, #1
 800a4e6:	2300      	movpl	r3, #0
 800a4e8:	9206      	str	r2, [sp, #24]
 800a4ea:	bf45      	ittet	mi
 800a4ec:	9300      	strmi	r3, [sp, #0]
 800a4ee:	2300      	movmi	r3, #0
 800a4f0:	9300      	strpl	r3, [sp, #0]
 800a4f2:	9306      	strmi	r3, [sp, #24]
 800a4f4:	2f00      	cmp	r7, #0
 800a4f6:	db39      	blt.n	800a56c <_dtoa_r+0x21c>
 800a4f8:	9b06      	ldr	r3, [sp, #24]
 800a4fa:	970d      	str	r7, [sp, #52]	@ 0x34
 800a4fc:	443b      	add	r3, r7
 800a4fe:	9306      	str	r3, [sp, #24]
 800a500:	2300      	movs	r3, #0
 800a502:	9308      	str	r3, [sp, #32]
 800a504:	9b07      	ldr	r3, [sp, #28]
 800a506:	2b09      	cmp	r3, #9
 800a508:	d863      	bhi.n	800a5d2 <_dtoa_r+0x282>
 800a50a:	2b05      	cmp	r3, #5
 800a50c:	bfc5      	ittet	gt
 800a50e:	3b04      	subgt	r3, #4
 800a510:	2400      	movgt	r4, #0
 800a512:	2401      	movle	r4, #1
 800a514:	9307      	strgt	r3, [sp, #28]
 800a516:	9b07      	ldr	r3, [sp, #28]
 800a518:	3b02      	subs	r3, #2
 800a51a:	2b03      	cmp	r3, #3
 800a51c:	d865      	bhi.n	800a5ea <_dtoa_r+0x29a>
 800a51e:	e8df f003 	tbb	[pc, r3]
 800a522:	5654      	.short	0x5654
 800a524:	2d39      	.short	0x2d39
 800a526:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a52a:	441e      	add	r6, r3
 800a52c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a530:	2b20      	cmp	r3, #32
 800a532:	bfc9      	itett	gt
 800a534:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a538:	f1c3 0320 	rsble	r3, r3, #32
 800a53c:	409f      	lslgt	r7, r3
 800a53e:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a542:	bfd8      	it	le
 800a544:	fa04 f003 	lslle.w	r0, r4, r3
 800a548:	f106 36ff 	add.w	r6, r6, #4294967295
 800a54c:	bfc4      	itt	gt
 800a54e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a552:	ea47 0003 	orrgt.w	r0, r7, r3
 800a556:	f7f5 ffb9 	bl	80004cc <__aeabi_ui2d>
 800a55a:	2201      	movs	r2, #1
 800a55c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a560:	9212      	str	r2, [sp, #72]	@ 0x48
 800a562:	e776      	b.n	800a452 <_dtoa_r+0x102>
 800a564:	2301      	movs	r3, #1
 800a566:	e7b7      	b.n	800a4d8 <_dtoa_r+0x188>
 800a568:	9010      	str	r0, [sp, #64]	@ 0x40
 800a56a:	e7b6      	b.n	800a4da <_dtoa_r+0x18a>
 800a56c:	9b00      	ldr	r3, [sp, #0]
 800a56e:	1bdb      	subs	r3, r3, r7
 800a570:	9300      	str	r3, [sp, #0]
 800a572:	427b      	negs	r3, r7
 800a574:	9308      	str	r3, [sp, #32]
 800a576:	2300      	movs	r3, #0
 800a578:	930d      	str	r3, [sp, #52]	@ 0x34
 800a57a:	e7c3      	b.n	800a504 <_dtoa_r+0x1b4>
 800a57c:	2301      	movs	r3, #1
 800a57e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a580:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a582:	eb07 0b03 	add.w	fp, r7, r3
 800a586:	f10b 0301 	add.w	r3, fp, #1
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	9303      	str	r3, [sp, #12]
 800a58e:	bfb8      	it	lt
 800a590:	2301      	movlt	r3, #1
 800a592:	e006      	b.n	800a5a2 <_dtoa_r+0x252>
 800a594:	2301      	movs	r3, #1
 800a596:	9309      	str	r3, [sp, #36]	@ 0x24
 800a598:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	dd28      	ble.n	800a5f0 <_dtoa_r+0x2a0>
 800a59e:	469b      	mov	fp, r3
 800a5a0:	9303      	str	r3, [sp, #12]
 800a5a2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a5a6:	2100      	movs	r1, #0
 800a5a8:	2204      	movs	r2, #4
 800a5aa:	f102 0514 	add.w	r5, r2, #20
 800a5ae:	429d      	cmp	r5, r3
 800a5b0:	d926      	bls.n	800a600 <_dtoa_r+0x2b0>
 800a5b2:	6041      	str	r1, [r0, #4]
 800a5b4:	4648      	mov	r0, r9
 800a5b6:	f000 fd9d 	bl	800b0f4 <_Balloc>
 800a5ba:	4682      	mov	sl, r0
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	d141      	bne.n	800a644 <_dtoa_r+0x2f4>
 800a5c0:	4b1d      	ldr	r3, [pc, #116]	@ (800a638 <_dtoa_r+0x2e8>)
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	f240 11af 	movw	r1, #431	@ 0x1af
 800a5c8:	e6d9      	b.n	800a37e <_dtoa_r+0x2e>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	e7e3      	b.n	800a596 <_dtoa_r+0x246>
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	e7d5      	b.n	800a57e <_dtoa_r+0x22e>
 800a5d2:	2401      	movs	r4, #1
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	9409      	str	r4, [sp, #36]	@ 0x24
 800a5d8:	9307      	str	r3, [sp, #28]
 800a5da:	f04f 3bff 	mov.w	fp, #4294967295
 800a5de:	2200      	movs	r2, #0
 800a5e0:	2312      	movs	r3, #18
 800a5e2:	f8cd b00c 	str.w	fp, [sp, #12]
 800a5e6:	920c      	str	r2, [sp, #48]	@ 0x30
 800a5e8:	e7db      	b.n	800a5a2 <_dtoa_r+0x252>
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5ee:	e7f4      	b.n	800a5da <_dtoa_r+0x28a>
 800a5f0:	f04f 0b01 	mov.w	fp, #1
 800a5f4:	465b      	mov	r3, fp
 800a5f6:	f8cd b00c 	str.w	fp, [sp, #12]
 800a5fa:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a5fe:	e7d0      	b.n	800a5a2 <_dtoa_r+0x252>
 800a600:	3101      	adds	r1, #1
 800a602:	0052      	lsls	r2, r2, #1
 800a604:	e7d1      	b.n	800a5aa <_dtoa_r+0x25a>
 800a606:	bf00      	nop
 800a608:	636f4361 	.word	0x636f4361
 800a60c:	3fd287a7 	.word	0x3fd287a7
 800a610:	8b60c8b3 	.word	0x8b60c8b3
 800a614:	3fc68a28 	.word	0x3fc68a28
 800a618:	509f79fb 	.word	0x509f79fb
 800a61c:	3fd34413 	.word	0x3fd34413
 800a620:	0800c4b1 	.word	0x0800c4b1
 800a624:	0800c4c8 	.word	0x0800c4c8
 800a628:	7ff00000 	.word	0x7ff00000
 800a62c:	0800c481 	.word	0x0800c481
 800a630:	3ff80000 	.word	0x3ff80000
 800a634:	0800c618 	.word	0x0800c618
 800a638:	0800c520 	.word	0x0800c520
 800a63c:	0800c4ad 	.word	0x0800c4ad
 800a640:	0800c480 	.word	0x0800c480
 800a644:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a648:	6018      	str	r0, [r3, #0]
 800a64a:	9b03      	ldr	r3, [sp, #12]
 800a64c:	2b0e      	cmp	r3, #14
 800a64e:	f200 80a1 	bhi.w	800a794 <_dtoa_r+0x444>
 800a652:	2c00      	cmp	r4, #0
 800a654:	f000 809e 	beq.w	800a794 <_dtoa_r+0x444>
 800a658:	2f00      	cmp	r7, #0
 800a65a:	dd33      	ble.n	800a6c4 <_dtoa_r+0x374>
 800a65c:	f007 020f 	and.w	r2, r7, #15
 800a660:	4b9b      	ldr	r3, [pc, #620]	@ (800a8d0 <_dtoa_r+0x580>)
 800a662:	05f8      	lsls	r0, r7, #23
 800a664:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a668:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a66c:	ed93 7b00 	vldr	d7, [r3]
 800a670:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a674:	d516      	bpl.n	800a6a4 <_dtoa_r+0x354>
 800a676:	4b97      	ldr	r3, [pc, #604]	@ (800a8d4 <_dtoa_r+0x584>)
 800a678:	f004 040f 	and.w	r4, r4, #15
 800a67c:	2603      	movs	r6, #3
 800a67e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a682:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a686:	f7f6 f8c5 	bl	8000814 <__aeabi_ddiv>
 800a68a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a68e:	4d91      	ldr	r5, [pc, #580]	@ (800a8d4 <_dtoa_r+0x584>)
 800a690:	b954      	cbnz	r4, 800a6a8 <_dtoa_r+0x358>
 800a692:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a696:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a69a:	f7f6 f8bb 	bl	8000814 <__aeabi_ddiv>
 800a69e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a6a2:	e028      	b.n	800a6f6 <_dtoa_r+0x3a6>
 800a6a4:	2602      	movs	r6, #2
 800a6a6:	e7f2      	b.n	800a68e <_dtoa_r+0x33e>
 800a6a8:	07e1      	lsls	r1, r4, #31
 800a6aa:	d508      	bpl.n	800a6be <_dtoa_r+0x36e>
 800a6ac:	3601      	adds	r6, #1
 800a6ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a6b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a6b6:	f7f5 ff83 	bl	80005c0 <__aeabi_dmul>
 800a6ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a6be:	1064      	asrs	r4, r4, #1
 800a6c0:	3508      	adds	r5, #8
 800a6c2:	e7e5      	b.n	800a690 <_dtoa_r+0x340>
 800a6c4:	f000 80af 	beq.w	800a826 <_dtoa_r+0x4d6>
 800a6c8:	427c      	negs	r4, r7
 800a6ca:	4b81      	ldr	r3, [pc, #516]	@ (800a8d0 <_dtoa_r+0x580>)
 800a6cc:	4d81      	ldr	r5, [pc, #516]	@ (800a8d4 <_dtoa_r+0x584>)
 800a6ce:	2602      	movs	r6, #2
 800a6d0:	f004 020f 	and.w	r2, r4, #15
 800a6d4:	1124      	asrs	r4, r4, #4
 800a6d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e2:	f7f5 ff6d 	bl	80005c0 <__aeabi_dmul>
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a6ec:	2c00      	cmp	r4, #0
 800a6ee:	f040 808f 	bne.w	800a810 <_dtoa_r+0x4c0>
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d1d3      	bne.n	800a69e <_dtoa_r+0x34e>
 800a6f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a6f8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f000 8094 	beq.w	800a82a <_dtoa_r+0x4da>
 800a702:	2200      	movs	r2, #0
 800a704:	4b74      	ldr	r3, [pc, #464]	@ (800a8d8 <_dtoa_r+0x588>)
 800a706:	4620      	mov	r0, r4
 800a708:	4629      	mov	r1, r5
 800a70a:	f7f6 f9cb 	bl	8000aa4 <__aeabi_dcmplt>
 800a70e:	2800      	cmp	r0, #0
 800a710:	f000 808b 	beq.w	800a82a <_dtoa_r+0x4da>
 800a714:	9b03      	ldr	r3, [sp, #12]
 800a716:	2b00      	cmp	r3, #0
 800a718:	f000 8087 	beq.w	800a82a <_dtoa_r+0x4da>
 800a71c:	f1bb 0f00 	cmp.w	fp, #0
 800a720:	dd34      	ble.n	800a78c <_dtoa_r+0x43c>
 800a722:	4620      	mov	r0, r4
 800a724:	f107 38ff 	add.w	r8, r7, #4294967295
 800a728:	3601      	adds	r6, #1
 800a72a:	465c      	mov	r4, fp
 800a72c:	2200      	movs	r2, #0
 800a72e:	4b6b      	ldr	r3, [pc, #428]	@ (800a8dc <_dtoa_r+0x58c>)
 800a730:	4629      	mov	r1, r5
 800a732:	f7f5 ff45 	bl	80005c0 <__aeabi_dmul>
 800a736:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a73a:	4630      	mov	r0, r6
 800a73c:	f7f5 fed6 	bl	80004ec <__aeabi_i2d>
 800a740:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a744:	f7f5 ff3c 	bl	80005c0 <__aeabi_dmul>
 800a748:	2200      	movs	r2, #0
 800a74a:	4b65      	ldr	r3, [pc, #404]	@ (800a8e0 <_dtoa_r+0x590>)
 800a74c:	f7f5 fd82 	bl	8000254 <__adddf3>
 800a750:	4605      	mov	r5, r0
 800a752:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a756:	2c00      	cmp	r4, #0
 800a758:	d16a      	bne.n	800a830 <_dtoa_r+0x4e0>
 800a75a:	2200      	movs	r2, #0
 800a75c:	4b61      	ldr	r3, [pc, #388]	@ (800a8e4 <_dtoa_r+0x594>)
 800a75e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a762:	f7f5 fd75 	bl	8000250 <__aeabi_dsub>
 800a766:	4602      	mov	r2, r0
 800a768:	460b      	mov	r3, r1
 800a76a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a76e:	462a      	mov	r2, r5
 800a770:	4633      	mov	r3, r6
 800a772:	f7f6 f9b5 	bl	8000ae0 <__aeabi_dcmpgt>
 800a776:	2800      	cmp	r0, #0
 800a778:	f040 8298 	bne.w	800acac <_dtoa_r+0x95c>
 800a77c:	462a      	mov	r2, r5
 800a77e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a782:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a786:	f7f6 f98d 	bl	8000aa4 <__aeabi_dcmplt>
 800a78a:	bb38      	cbnz	r0, 800a7dc <_dtoa_r+0x48c>
 800a78c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a790:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a794:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a796:	2b00      	cmp	r3, #0
 800a798:	f2c0 8157 	blt.w	800aa4a <_dtoa_r+0x6fa>
 800a79c:	2f0e      	cmp	r7, #14
 800a79e:	f300 8154 	bgt.w	800aa4a <_dtoa_r+0x6fa>
 800a7a2:	4b4b      	ldr	r3, [pc, #300]	@ (800a8d0 <_dtoa_r+0x580>)
 800a7a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a7a8:	ed93 7b00 	vldr	d7, [r3]
 800a7ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	ed8d 7b00 	vstr	d7, [sp]
 800a7b4:	f280 80e5 	bge.w	800a982 <_dtoa_r+0x632>
 800a7b8:	9b03      	ldr	r3, [sp, #12]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f300 80e1 	bgt.w	800a982 <_dtoa_r+0x632>
 800a7c0:	d10c      	bne.n	800a7dc <_dtoa_r+0x48c>
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	4b47      	ldr	r3, [pc, #284]	@ (800a8e4 <_dtoa_r+0x594>)
 800a7c6:	ec51 0b17 	vmov	r0, r1, d7
 800a7ca:	f7f5 fef9 	bl	80005c0 <__aeabi_dmul>
 800a7ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7d2:	f7f6 f97b 	bl	8000acc <__aeabi_dcmpge>
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	f000 8266 	beq.w	800aca8 <_dtoa_r+0x958>
 800a7dc:	2400      	movs	r4, #0
 800a7de:	4625      	mov	r5, r4
 800a7e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a7e2:	4656      	mov	r6, sl
 800a7e4:	ea6f 0803 	mvn.w	r8, r3
 800a7e8:	2700      	movs	r7, #0
 800a7ea:	4621      	mov	r1, r4
 800a7ec:	4648      	mov	r0, r9
 800a7ee:	f000 fcc1 	bl	800b174 <_Bfree>
 800a7f2:	2d00      	cmp	r5, #0
 800a7f4:	f000 80bd 	beq.w	800a972 <_dtoa_r+0x622>
 800a7f8:	b12f      	cbz	r7, 800a806 <_dtoa_r+0x4b6>
 800a7fa:	42af      	cmp	r7, r5
 800a7fc:	d003      	beq.n	800a806 <_dtoa_r+0x4b6>
 800a7fe:	4639      	mov	r1, r7
 800a800:	4648      	mov	r0, r9
 800a802:	f000 fcb7 	bl	800b174 <_Bfree>
 800a806:	4629      	mov	r1, r5
 800a808:	4648      	mov	r0, r9
 800a80a:	f000 fcb3 	bl	800b174 <_Bfree>
 800a80e:	e0b0      	b.n	800a972 <_dtoa_r+0x622>
 800a810:	07e2      	lsls	r2, r4, #31
 800a812:	d505      	bpl.n	800a820 <_dtoa_r+0x4d0>
 800a814:	3601      	adds	r6, #1
 800a816:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a81a:	f7f5 fed1 	bl	80005c0 <__aeabi_dmul>
 800a81e:	2301      	movs	r3, #1
 800a820:	1064      	asrs	r4, r4, #1
 800a822:	3508      	adds	r5, #8
 800a824:	e762      	b.n	800a6ec <_dtoa_r+0x39c>
 800a826:	2602      	movs	r6, #2
 800a828:	e765      	b.n	800a6f6 <_dtoa_r+0x3a6>
 800a82a:	46b8      	mov	r8, r7
 800a82c:	9c03      	ldr	r4, [sp, #12]
 800a82e:	e784      	b.n	800a73a <_dtoa_r+0x3ea>
 800a830:	4b27      	ldr	r3, [pc, #156]	@ (800a8d0 <_dtoa_r+0x580>)
 800a832:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a834:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a838:	4454      	add	r4, sl
 800a83a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a83e:	2900      	cmp	r1, #0
 800a840:	d054      	beq.n	800a8ec <_dtoa_r+0x59c>
 800a842:	2000      	movs	r0, #0
 800a844:	4928      	ldr	r1, [pc, #160]	@ (800a8e8 <_dtoa_r+0x598>)
 800a846:	f7f5 ffe5 	bl	8000814 <__aeabi_ddiv>
 800a84a:	4633      	mov	r3, r6
 800a84c:	4656      	mov	r6, sl
 800a84e:	462a      	mov	r2, r5
 800a850:	f7f5 fcfe 	bl	8000250 <__aeabi_dsub>
 800a854:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a858:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a85c:	f7f6 f960 	bl	8000b20 <__aeabi_d2iz>
 800a860:	4605      	mov	r5, r0
 800a862:	f7f5 fe43 	bl	80004ec <__aeabi_i2d>
 800a866:	4602      	mov	r2, r0
 800a868:	460b      	mov	r3, r1
 800a86a:	3530      	adds	r5, #48	@ 0x30
 800a86c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a870:	f7f5 fcee 	bl	8000250 <__aeabi_dsub>
 800a874:	4602      	mov	r2, r0
 800a876:	460b      	mov	r3, r1
 800a878:	f806 5b01 	strb.w	r5, [r6], #1
 800a87c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a880:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a884:	f7f6 f90e 	bl	8000aa4 <__aeabi_dcmplt>
 800a888:	2800      	cmp	r0, #0
 800a88a:	d172      	bne.n	800a972 <_dtoa_r+0x622>
 800a88c:	2000      	movs	r0, #0
 800a88e:	4912      	ldr	r1, [pc, #72]	@ (800a8d8 <_dtoa_r+0x588>)
 800a890:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a894:	f7f5 fcdc 	bl	8000250 <__aeabi_dsub>
 800a898:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a89c:	f7f6 f902 	bl	8000aa4 <__aeabi_dcmplt>
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	f040 80b4 	bne.w	800aa0e <_dtoa_r+0x6be>
 800a8a6:	42a6      	cmp	r6, r4
 800a8a8:	f43f af70 	beq.w	800a78c <_dtoa_r+0x43c>
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	4b0b      	ldr	r3, [pc, #44]	@ (800a8dc <_dtoa_r+0x58c>)
 800a8b0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a8b4:	f7f5 fe84 	bl	80005c0 <__aeabi_dmul>
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	4b08      	ldr	r3, [pc, #32]	@ (800a8dc <_dtoa_r+0x58c>)
 800a8bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a8c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8c4:	f7f5 fe7c 	bl	80005c0 <__aeabi_dmul>
 800a8c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8cc:	e7c4      	b.n	800a858 <_dtoa_r+0x508>
 800a8ce:	bf00      	nop
 800a8d0:	0800c618 	.word	0x0800c618
 800a8d4:	0800c5f0 	.word	0x0800c5f0
 800a8d8:	3ff00000 	.word	0x3ff00000
 800a8dc:	40240000 	.word	0x40240000
 800a8e0:	401c0000 	.word	0x401c0000
 800a8e4:	40140000 	.word	0x40140000
 800a8e8:	3fe00000 	.word	0x3fe00000
 800a8ec:	4631      	mov	r1, r6
 800a8ee:	4656      	mov	r6, sl
 800a8f0:	4628      	mov	r0, r5
 800a8f2:	f7f5 fe65 	bl	80005c0 <__aeabi_dmul>
 800a8f6:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a8f8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a8fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a900:	f7f6 f90e 	bl	8000b20 <__aeabi_d2iz>
 800a904:	4605      	mov	r5, r0
 800a906:	f7f5 fdf1 	bl	80004ec <__aeabi_i2d>
 800a90a:	4602      	mov	r2, r0
 800a90c:	3530      	adds	r5, #48	@ 0x30
 800a90e:	460b      	mov	r3, r1
 800a910:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a914:	f7f5 fc9c 	bl	8000250 <__aeabi_dsub>
 800a918:	f806 5b01 	strb.w	r5, [r6], #1
 800a91c:	4602      	mov	r2, r0
 800a91e:	460b      	mov	r3, r1
 800a920:	42a6      	cmp	r6, r4
 800a922:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a926:	f04f 0200 	mov.w	r2, #0
 800a92a:	d124      	bne.n	800a976 <_dtoa_r+0x626>
 800a92c:	4baf      	ldr	r3, [pc, #700]	@ (800abec <_dtoa_r+0x89c>)
 800a92e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a932:	f7f5 fc8f 	bl	8000254 <__adddf3>
 800a936:	4602      	mov	r2, r0
 800a938:	460b      	mov	r3, r1
 800a93a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a93e:	f7f6 f8cf 	bl	8000ae0 <__aeabi_dcmpgt>
 800a942:	2800      	cmp	r0, #0
 800a944:	d163      	bne.n	800aa0e <_dtoa_r+0x6be>
 800a946:	2000      	movs	r0, #0
 800a948:	49a8      	ldr	r1, [pc, #672]	@ (800abec <_dtoa_r+0x89c>)
 800a94a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a94e:	f7f5 fc7f 	bl	8000250 <__aeabi_dsub>
 800a952:	4602      	mov	r2, r0
 800a954:	460b      	mov	r3, r1
 800a956:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a95a:	f7f6 f8a3 	bl	8000aa4 <__aeabi_dcmplt>
 800a95e:	2800      	cmp	r0, #0
 800a960:	f43f af14 	beq.w	800a78c <_dtoa_r+0x43c>
 800a964:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a966:	1e73      	subs	r3, r6, #1
 800a968:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a96a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a96e:	2b30      	cmp	r3, #48	@ 0x30
 800a970:	d0f8      	beq.n	800a964 <_dtoa_r+0x614>
 800a972:	4647      	mov	r7, r8
 800a974:	e03b      	b.n	800a9ee <_dtoa_r+0x69e>
 800a976:	4b9e      	ldr	r3, [pc, #632]	@ (800abf0 <_dtoa_r+0x8a0>)
 800a978:	f7f5 fe22 	bl	80005c0 <__aeabi_dmul>
 800a97c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a980:	e7bc      	b.n	800a8fc <_dtoa_r+0x5ac>
 800a982:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a986:	4656      	mov	r6, sl
 800a988:	4620      	mov	r0, r4
 800a98a:	4629      	mov	r1, r5
 800a98c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a990:	f7f5 ff40 	bl	8000814 <__aeabi_ddiv>
 800a994:	f7f6 f8c4 	bl	8000b20 <__aeabi_d2iz>
 800a998:	4680      	mov	r8, r0
 800a99a:	f7f5 fda7 	bl	80004ec <__aeabi_i2d>
 800a99e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9a2:	f7f5 fe0d 	bl	80005c0 <__aeabi_dmul>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	4629      	mov	r1, r5
 800a9b2:	f7f5 fc4d 	bl	8000250 <__aeabi_dsub>
 800a9b6:	9d03      	ldr	r5, [sp, #12]
 800a9b8:	f806 4b01 	strb.w	r4, [r6], #1
 800a9bc:	eba6 040a 	sub.w	r4, r6, sl
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	42a5      	cmp	r5, r4
 800a9c6:	d133      	bne.n	800aa30 <_dtoa_r+0x6e0>
 800a9c8:	f7f5 fc44 	bl	8000254 <__adddf3>
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	460d      	mov	r5, r1
 800a9d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9d4:	f7f6 f884 	bl	8000ae0 <__aeabi_dcmpgt>
 800a9d8:	b9c0      	cbnz	r0, 800aa0c <_dtoa_r+0x6bc>
 800a9da:	4620      	mov	r0, r4
 800a9dc:	4629      	mov	r1, r5
 800a9de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9e2:	f7f6 f855 	bl	8000a90 <__aeabi_dcmpeq>
 800a9e6:	b110      	cbz	r0, 800a9ee <_dtoa_r+0x69e>
 800a9e8:	f018 0f01 	tst.w	r8, #1
 800a9ec:	d10e      	bne.n	800aa0c <_dtoa_r+0x6bc>
 800a9ee:	9902      	ldr	r1, [sp, #8]
 800a9f0:	4648      	mov	r0, r9
 800a9f2:	f000 fbbf 	bl	800b174 <_Bfree>
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	3701      	adds	r7, #1
 800a9fa:	7033      	strb	r3, [r6, #0]
 800a9fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a9fe:	601f      	str	r7, [r3, #0]
 800aa00:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	f000 824c 	beq.w	800aea0 <_dtoa_r+0xb50>
 800aa08:	601e      	str	r6, [r3, #0]
 800aa0a:	e249      	b.n	800aea0 <_dtoa_r+0xb50>
 800aa0c:	46b8      	mov	r8, r7
 800aa0e:	4633      	mov	r3, r6
 800aa10:	461e      	mov	r6, r3
 800aa12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa16:	2a39      	cmp	r2, #57	@ 0x39
 800aa18:	d106      	bne.n	800aa28 <_dtoa_r+0x6d8>
 800aa1a:	459a      	cmp	sl, r3
 800aa1c:	d1f8      	bne.n	800aa10 <_dtoa_r+0x6c0>
 800aa1e:	2230      	movs	r2, #48	@ 0x30
 800aa20:	f108 0801 	add.w	r8, r8, #1
 800aa24:	f88a 2000 	strb.w	r2, [sl]
 800aa28:	781a      	ldrb	r2, [r3, #0]
 800aa2a:	3201      	adds	r2, #1
 800aa2c:	701a      	strb	r2, [r3, #0]
 800aa2e:	e7a0      	b.n	800a972 <_dtoa_r+0x622>
 800aa30:	2200      	movs	r2, #0
 800aa32:	4b6f      	ldr	r3, [pc, #444]	@ (800abf0 <_dtoa_r+0x8a0>)
 800aa34:	f7f5 fdc4 	bl	80005c0 <__aeabi_dmul>
 800aa38:	2200      	movs	r2, #0
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	4604      	mov	r4, r0
 800aa3e:	460d      	mov	r5, r1
 800aa40:	f7f6 f826 	bl	8000a90 <__aeabi_dcmpeq>
 800aa44:	2800      	cmp	r0, #0
 800aa46:	d09f      	beq.n	800a988 <_dtoa_r+0x638>
 800aa48:	e7d1      	b.n	800a9ee <_dtoa_r+0x69e>
 800aa4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa4c:	2a00      	cmp	r2, #0
 800aa4e:	f000 80ea 	beq.w	800ac26 <_dtoa_r+0x8d6>
 800aa52:	9a07      	ldr	r2, [sp, #28]
 800aa54:	2a01      	cmp	r2, #1
 800aa56:	f300 80cd 	bgt.w	800abf4 <_dtoa_r+0x8a4>
 800aa5a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800aa5c:	2a00      	cmp	r2, #0
 800aa5e:	f000 80c1 	beq.w	800abe4 <_dtoa_r+0x894>
 800aa62:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800aa66:	9c08      	ldr	r4, [sp, #32]
 800aa68:	9e00      	ldr	r6, [sp, #0]
 800aa6a:	9a00      	ldr	r2, [sp, #0]
 800aa6c:	2101      	movs	r1, #1
 800aa6e:	4648      	mov	r0, r9
 800aa70:	441a      	add	r2, r3
 800aa72:	9200      	str	r2, [sp, #0]
 800aa74:	9a06      	ldr	r2, [sp, #24]
 800aa76:	441a      	add	r2, r3
 800aa78:	9206      	str	r2, [sp, #24]
 800aa7a:	f000 fc31 	bl	800b2e0 <__i2b>
 800aa7e:	4605      	mov	r5, r0
 800aa80:	b166      	cbz	r6, 800aa9c <_dtoa_r+0x74c>
 800aa82:	9b06      	ldr	r3, [sp, #24]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	dd09      	ble.n	800aa9c <_dtoa_r+0x74c>
 800aa88:	42b3      	cmp	r3, r6
 800aa8a:	9a00      	ldr	r2, [sp, #0]
 800aa8c:	bfa8      	it	ge
 800aa8e:	4633      	movge	r3, r6
 800aa90:	1ad2      	subs	r2, r2, r3
 800aa92:	1af6      	subs	r6, r6, r3
 800aa94:	9200      	str	r2, [sp, #0]
 800aa96:	9a06      	ldr	r2, [sp, #24]
 800aa98:	1ad3      	subs	r3, r2, r3
 800aa9a:	9306      	str	r3, [sp, #24]
 800aa9c:	9b08      	ldr	r3, [sp, #32]
 800aa9e:	b30b      	cbz	r3, 800aae4 <_dtoa_r+0x794>
 800aaa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	f000 80c6 	beq.w	800ac34 <_dtoa_r+0x8e4>
 800aaa8:	2c00      	cmp	r4, #0
 800aaaa:	f000 80c0 	beq.w	800ac2e <_dtoa_r+0x8de>
 800aaae:	4629      	mov	r1, r5
 800aab0:	4622      	mov	r2, r4
 800aab2:	4648      	mov	r0, r9
 800aab4:	f000 fcce 	bl	800b454 <__pow5mult>
 800aab8:	9a02      	ldr	r2, [sp, #8]
 800aaba:	4601      	mov	r1, r0
 800aabc:	4605      	mov	r5, r0
 800aabe:	4648      	mov	r0, r9
 800aac0:	f000 fc24 	bl	800b30c <__multiply>
 800aac4:	9902      	ldr	r1, [sp, #8]
 800aac6:	4680      	mov	r8, r0
 800aac8:	4648      	mov	r0, r9
 800aaca:	f000 fb53 	bl	800b174 <_Bfree>
 800aace:	9b08      	ldr	r3, [sp, #32]
 800aad0:	1b1b      	subs	r3, r3, r4
 800aad2:	9308      	str	r3, [sp, #32]
 800aad4:	f000 80b1 	beq.w	800ac3a <_dtoa_r+0x8ea>
 800aad8:	9a08      	ldr	r2, [sp, #32]
 800aada:	4641      	mov	r1, r8
 800aadc:	4648      	mov	r0, r9
 800aade:	f000 fcb9 	bl	800b454 <__pow5mult>
 800aae2:	9002      	str	r0, [sp, #8]
 800aae4:	2101      	movs	r1, #1
 800aae6:	4648      	mov	r0, r9
 800aae8:	f000 fbfa 	bl	800b2e0 <__i2b>
 800aaec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aaee:	4604      	mov	r4, r0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f000 81d9 	beq.w	800aea8 <_dtoa_r+0xb58>
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	4601      	mov	r1, r0
 800aafa:	4648      	mov	r0, r9
 800aafc:	f000 fcaa 	bl	800b454 <__pow5mult>
 800ab00:	9b07      	ldr	r3, [sp, #28]
 800ab02:	4604      	mov	r4, r0
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	f300 809f 	bgt.w	800ac48 <_dtoa_r+0x8f8>
 800ab0a:	9b04      	ldr	r3, [sp, #16]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f040 8097 	bne.w	800ac40 <_dtoa_r+0x8f0>
 800ab12:	9b05      	ldr	r3, [sp, #20]
 800ab14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	f040 8093 	bne.w	800ac44 <_dtoa_r+0x8f4>
 800ab1e:	9b05      	ldr	r3, [sp, #20]
 800ab20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ab24:	0d1b      	lsrs	r3, r3, #20
 800ab26:	051b      	lsls	r3, r3, #20
 800ab28:	b133      	cbz	r3, 800ab38 <_dtoa_r+0x7e8>
 800ab2a:	9b00      	ldr	r3, [sp, #0]
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	9300      	str	r3, [sp, #0]
 800ab30:	9b06      	ldr	r3, [sp, #24]
 800ab32:	3301      	adds	r3, #1
 800ab34:	9306      	str	r3, [sp, #24]
 800ab36:	2301      	movs	r3, #1
 800ab38:	9308      	str	r3, [sp, #32]
 800ab3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f000 81b9 	beq.w	800aeb4 <_dtoa_r+0xb64>
 800ab42:	6923      	ldr	r3, [r4, #16]
 800ab44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ab48:	6918      	ldr	r0, [r3, #16]
 800ab4a:	f000 fb7d 	bl	800b248 <__hi0bits>
 800ab4e:	f1c0 0020 	rsb	r0, r0, #32
 800ab52:	9b06      	ldr	r3, [sp, #24]
 800ab54:	4418      	add	r0, r3
 800ab56:	f010 001f 	ands.w	r0, r0, #31
 800ab5a:	f000 8082 	beq.w	800ac62 <_dtoa_r+0x912>
 800ab5e:	f1c0 0320 	rsb	r3, r0, #32
 800ab62:	2b04      	cmp	r3, #4
 800ab64:	dd73      	ble.n	800ac4e <_dtoa_r+0x8fe>
 800ab66:	f1c0 001c 	rsb	r0, r0, #28
 800ab6a:	9b00      	ldr	r3, [sp, #0]
 800ab6c:	4403      	add	r3, r0
 800ab6e:	4406      	add	r6, r0
 800ab70:	9300      	str	r3, [sp, #0]
 800ab72:	9b06      	ldr	r3, [sp, #24]
 800ab74:	4403      	add	r3, r0
 800ab76:	9306      	str	r3, [sp, #24]
 800ab78:	9b00      	ldr	r3, [sp, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	dd05      	ble.n	800ab8a <_dtoa_r+0x83a>
 800ab7e:	461a      	mov	r2, r3
 800ab80:	9902      	ldr	r1, [sp, #8]
 800ab82:	4648      	mov	r0, r9
 800ab84:	f000 fcc0 	bl	800b508 <__lshift>
 800ab88:	9002      	str	r0, [sp, #8]
 800ab8a:	9b06      	ldr	r3, [sp, #24]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	dd05      	ble.n	800ab9c <_dtoa_r+0x84c>
 800ab90:	4621      	mov	r1, r4
 800ab92:	461a      	mov	r2, r3
 800ab94:	4648      	mov	r0, r9
 800ab96:	f000 fcb7 	bl	800b508 <__lshift>
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d061      	beq.n	800ac66 <_dtoa_r+0x916>
 800aba2:	4621      	mov	r1, r4
 800aba4:	9802      	ldr	r0, [sp, #8]
 800aba6:	f000 fd1b 	bl	800b5e0 <__mcmp>
 800abaa:	2800      	cmp	r0, #0
 800abac:	da5b      	bge.n	800ac66 <_dtoa_r+0x916>
 800abae:	2300      	movs	r3, #0
 800abb0:	220a      	movs	r2, #10
 800abb2:	9902      	ldr	r1, [sp, #8]
 800abb4:	4648      	mov	r0, r9
 800abb6:	f000 faff 	bl	800b1b8 <__multadd>
 800abba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abbc:	f107 38ff 	add.w	r8, r7, #4294967295
 800abc0:	9002      	str	r0, [sp, #8]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	f000 8178 	beq.w	800aeb8 <_dtoa_r+0xb68>
 800abc8:	4629      	mov	r1, r5
 800abca:	2300      	movs	r3, #0
 800abcc:	220a      	movs	r2, #10
 800abce:	4648      	mov	r0, r9
 800abd0:	f000 faf2 	bl	800b1b8 <__multadd>
 800abd4:	f1bb 0f00 	cmp.w	fp, #0
 800abd8:	4605      	mov	r5, r0
 800abda:	dc6f      	bgt.n	800acbc <_dtoa_r+0x96c>
 800abdc:	9b07      	ldr	r3, [sp, #28]
 800abde:	2b02      	cmp	r3, #2
 800abe0:	dc49      	bgt.n	800ac76 <_dtoa_r+0x926>
 800abe2:	e06b      	b.n	800acbc <_dtoa_r+0x96c>
 800abe4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800abe6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800abea:	e73c      	b.n	800aa66 <_dtoa_r+0x716>
 800abec:	3fe00000 	.word	0x3fe00000
 800abf0:	40240000 	.word	0x40240000
 800abf4:	9b03      	ldr	r3, [sp, #12]
 800abf6:	1e5c      	subs	r4, r3, #1
 800abf8:	9b08      	ldr	r3, [sp, #32]
 800abfa:	42a3      	cmp	r3, r4
 800abfc:	db09      	blt.n	800ac12 <_dtoa_r+0x8c2>
 800abfe:	1b1c      	subs	r4, r3, r4
 800ac00:	9b03      	ldr	r3, [sp, #12]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	f6bf af30 	bge.w	800aa68 <_dtoa_r+0x718>
 800ac08:	9b00      	ldr	r3, [sp, #0]
 800ac0a:	9a03      	ldr	r2, [sp, #12]
 800ac0c:	1a9e      	subs	r6, r3, r2
 800ac0e:	2300      	movs	r3, #0
 800ac10:	e72b      	b.n	800aa6a <_dtoa_r+0x71a>
 800ac12:	9b08      	ldr	r3, [sp, #32]
 800ac14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ac16:	1ae3      	subs	r3, r4, r3
 800ac18:	9408      	str	r4, [sp, #32]
 800ac1a:	9e00      	ldr	r6, [sp, #0]
 800ac1c:	2400      	movs	r4, #0
 800ac1e:	441a      	add	r2, r3
 800ac20:	9b03      	ldr	r3, [sp, #12]
 800ac22:	920d      	str	r2, [sp, #52]	@ 0x34
 800ac24:	e721      	b.n	800aa6a <_dtoa_r+0x71a>
 800ac26:	9c08      	ldr	r4, [sp, #32]
 800ac28:	9e00      	ldr	r6, [sp, #0]
 800ac2a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ac2c:	e728      	b.n	800aa80 <_dtoa_r+0x730>
 800ac2e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ac32:	e751      	b.n	800aad8 <_dtoa_r+0x788>
 800ac34:	9a08      	ldr	r2, [sp, #32]
 800ac36:	9902      	ldr	r1, [sp, #8]
 800ac38:	e750      	b.n	800aadc <_dtoa_r+0x78c>
 800ac3a:	f8cd 8008 	str.w	r8, [sp, #8]
 800ac3e:	e751      	b.n	800aae4 <_dtoa_r+0x794>
 800ac40:	2300      	movs	r3, #0
 800ac42:	e779      	b.n	800ab38 <_dtoa_r+0x7e8>
 800ac44:	9b04      	ldr	r3, [sp, #16]
 800ac46:	e777      	b.n	800ab38 <_dtoa_r+0x7e8>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	9308      	str	r3, [sp, #32]
 800ac4c:	e779      	b.n	800ab42 <_dtoa_r+0x7f2>
 800ac4e:	d093      	beq.n	800ab78 <_dtoa_r+0x828>
 800ac50:	331c      	adds	r3, #28
 800ac52:	9a00      	ldr	r2, [sp, #0]
 800ac54:	441a      	add	r2, r3
 800ac56:	441e      	add	r6, r3
 800ac58:	9200      	str	r2, [sp, #0]
 800ac5a:	9a06      	ldr	r2, [sp, #24]
 800ac5c:	441a      	add	r2, r3
 800ac5e:	9206      	str	r2, [sp, #24]
 800ac60:	e78a      	b.n	800ab78 <_dtoa_r+0x828>
 800ac62:	4603      	mov	r3, r0
 800ac64:	e7f4      	b.n	800ac50 <_dtoa_r+0x900>
 800ac66:	9b03      	ldr	r3, [sp, #12]
 800ac68:	46b8      	mov	r8, r7
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	dc20      	bgt.n	800acb0 <_dtoa_r+0x960>
 800ac6e:	469b      	mov	fp, r3
 800ac70:	9b07      	ldr	r3, [sp, #28]
 800ac72:	2b02      	cmp	r3, #2
 800ac74:	dd1e      	ble.n	800acb4 <_dtoa_r+0x964>
 800ac76:	f1bb 0f00 	cmp.w	fp, #0
 800ac7a:	f47f adb1 	bne.w	800a7e0 <_dtoa_r+0x490>
 800ac7e:	4621      	mov	r1, r4
 800ac80:	465b      	mov	r3, fp
 800ac82:	2205      	movs	r2, #5
 800ac84:	4648      	mov	r0, r9
 800ac86:	f000 fa97 	bl	800b1b8 <__multadd>
 800ac8a:	4601      	mov	r1, r0
 800ac8c:	4604      	mov	r4, r0
 800ac8e:	9802      	ldr	r0, [sp, #8]
 800ac90:	f000 fca6 	bl	800b5e0 <__mcmp>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	f77f ada3 	ble.w	800a7e0 <_dtoa_r+0x490>
 800ac9a:	4656      	mov	r6, sl
 800ac9c:	2331      	movs	r3, #49	@ 0x31
 800ac9e:	f108 0801 	add.w	r8, r8, #1
 800aca2:	f806 3b01 	strb.w	r3, [r6], #1
 800aca6:	e59f      	b.n	800a7e8 <_dtoa_r+0x498>
 800aca8:	46b8      	mov	r8, r7
 800acaa:	9c03      	ldr	r4, [sp, #12]
 800acac:	4625      	mov	r5, r4
 800acae:	e7f4      	b.n	800ac9a <_dtoa_r+0x94a>
 800acb0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800acb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f000 8102 	beq.w	800aec0 <_dtoa_r+0xb70>
 800acbc:	2e00      	cmp	r6, #0
 800acbe:	dd05      	ble.n	800accc <_dtoa_r+0x97c>
 800acc0:	4629      	mov	r1, r5
 800acc2:	4632      	mov	r2, r6
 800acc4:	4648      	mov	r0, r9
 800acc6:	f000 fc1f 	bl	800b508 <__lshift>
 800acca:	4605      	mov	r5, r0
 800accc:	9b08      	ldr	r3, [sp, #32]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d05c      	beq.n	800ad8c <_dtoa_r+0xa3c>
 800acd2:	6869      	ldr	r1, [r5, #4]
 800acd4:	4648      	mov	r0, r9
 800acd6:	f000 fa0d 	bl	800b0f4 <_Balloc>
 800acda:	4606      	mov	r6, r0
 800acdc:	b928      	cbnz	r0, 800acea <_dtoa_r+0x99a>
 800acde:	4b83      	ldr	r3, [pc, #524]	@ (800aeec <_dtoa_r+0xb9c>)
 800ace0:	4602      	mov	r2, r0
 800ace2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ace6:	f7ff bb4a 	b.w	800a37e <_dtoa_r+0x2e>
 800acea:	692a      	ldr	r2, [r5, #16]
 800acec:	f105 010c 	add.w	r1, r5, #12
 800acf0:	300c      	adds	r0, #12
 800acf2:	3202      	adds	r2, #2
 800acf4:	0092      	lsls	r2, r2, #2
 800acf6:	f001 f811 	bl	800bd1c <memcpy>
 800acfa:	2201      	movs	r2, #1
 800acfc:	4631      	mov	r1, r6
 800acfe:	4648      	mov	r0, r9
 800ad00:	f000 fc02 	bl	800b508 <__lshift>
 800ad04:	f10a 0301 	add.w	r3, sl, #1
 800ad08:	462f      	mov	r7, r5
 800ad0a:	4605      	mov	r5, r0
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	eb0a 030b 	add.w	r3, sl, fp
 800ad12:	9308      	str	r3, [sp, #32]
 800ad14:	9b04      	ldr	r3, [sp, #16]
 800ad16:	f003 0301 	and.w	r3, r3, #1
 800ad1a:	9306      	str	r3, [sp, #24]
 800ad1c:	9b00      	ldr	r3, [sp, #0]
 800ad1e:	4621      	mov	r1, r4
 800ad20:	9802      	ldr	r0, [sp, #8]
 800ad22:	f103 3bff 	add.w	fp, r3, #4294967295
 800ad26:	f7ff fa84 	bl	800a232 <quorem>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	4639      	mov	r1, r7
 800ad2e:	9003      	str	r0, [sp, #12]
 800ad30:	3330      	adds	r3, #48	@ 0x30
 800ad32:	9802      	ldr	r0, [sp, #8]
 800ad34:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad36:	f000 fc53 	bl	800b5e0 <__mcmp>
 800ad3a:	462a      	mov	r2, r5
 800ad3c:	9004      	str	r0, [sp, #16]
 800ad3e:	4621      	mov	r1, r4
 800ad40:	4648      	mov	r0, r9
 800ad42:	f000 fc69 	bl	800b618 <__mdiff>
 800ad46:	68c2      	ldr	r2, [r0, #12]
 800ad48:	4606      	mov	r6, r0
 800ad4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad4c:	bb02      	cbnz	r2, 800ad90 <_dtoa_r+0xa40>
 800ad4e:	4601      	mov	r1, r0
 800ad50:	9802      	ldr	r0, [sp, #8]
 800ad52:	f000 fc45 	bl	800b5e0 <__mcmp>
 800ad56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad58:	4602      	mov	r2, r0
 800ad5a:	4631      	mov	r1, r6
 800ad5c:	4648      	mov	r0, r9
 800ad5e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ad60:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad62:	f000 fa07 	bl	800b174 <_Bfree>
 800ad66:	9b07      	ldr	r3, [sp, #28]
 800ad68:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ad6a:	9e00      	ldr	r6, [sp, #0]
 800ad6c:	ea42 0103 	orr.w	r1, r2, r3
 800ad70:	9b06      	ldr	r3, [sp, #24]
 800ad72:	4319      	orrs	r1, r3
 800ad74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad76:	d10d      	bne.n	800ad94 <_dtoa_r+0xa44>
 800ad78:	2b39      	cmp	r3, #57	@ 0x39
 800ad7a:	d027      	beq.n	800adcc <_dtoa_r+0xa7c>
 800ad7c:	9a04      	ldr	r2, [sp, #16]
 800ad7e:	2a00      	cmp	r2, #0
 800ad80:	dd01      	ble.n	800ad86 <_dtoa_r+0xa36>
 800ad82:	9b03      	ldr	r3, [sp, #12]
 800ad84:	3331      	adds	r3, #49	@ 0x31
 800ad86:	f88b 3000 	strb.w	r3, [fp]
 800ad8a:	e52e      	b.n	800a7ea <_dtoa_r+0x49a>
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	e7b9      	b.n	800ad04 <_dtoa_r+0x9b4>
 800ad90:	2201      	movs	r2, #1
 800ad92:	e7e2      	b.n	800ad5a <_dtoa_r+0xa0a>
 800ad94:	9904      	ldr	r1, [sp, #16]
 800ad96:	2900      	cmp	r1, #0
 800ad98:	db04      	blt.n	800ada4 <_dtoa_r+0xa54>
 800ad9a:	9807      	ldr	r0, [sp, #28]
 800ad9c:	4301      	orrs	r1, r0
 800ad9e:	9806      	ldr	r0, [sp, #24]
 800ada0:	4301      	orrs	r1, r0
 800ada2:	d120      	bne.n	800ade6 <_dtoa_r+0xa96>
 800ada4:	2a00      	cmp	r2, #0
 800ada6:	ddee      	ble.n	800ad86 <_dtoa_r+0xa36>
 800ada8:	2201      	movs	r2, #1
 800adaa:	9902      	ldr	r1, [sp, #8]
 800adac:	4648      	mov	r0, r9
 800adae:	9300      	str	r3, [sp, #0]
 800adb0:	f000 fbaa 	bl	800b508 <__lshift>
 800adb4:	4621      	mov	r1, r4
 800adb6:	9002      	str	r0, [sp, #8]
 800adb8:	f000 fc12 	bl	800b5e0 <__mcmp>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	9b00      	ldr	r3, [sp, #0]
 800adc0:	dc02      	bgt.n	800adc8 <_dtoa_r+0xa78>
 800adc2:	d1e0      	bne.n	800ad86 <_dtoa_r+0xa36>
 800adc4:	07da      	lsls	r2, r3, #31
 800adc6:	d5de      	bpl.n	800ad86 <_dtoa_r+0xa36>
 800adc8:	2b39      	cmp	r3, #57	@ 0x39
 800adca:	d1da      	bne.n	800ad82 <_dtoa_r+0xa32>
 800adcc:	2339      	movs	r3, #57	@ 0x39
 800adce:	f88b 3000 	strb.w	r3, [fp]
 800add2:	4633      	mov	r3, r6
 800add4:	461e      	mov	r6, r3
 800add6:	3b01      	subs	r3, #1
 800add8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800addc:	2a39      	cmp	r2, #57	@ 0x39
 800adde:	d04f      	beq.n	800ae80 <_dtoa_r+0xb30>
 800ade0:	3201      	adds	r2, #1
 800ade2:	701a      	strb	r2, [r3, #0]
 800ade4:	e501      	b.n	800a7ea <_dtoa_r+0x49a>
 800ade6:	2a00      	cmp	r2, #0
 800ade8:	dd03      	ble.n	800adf2 <_dtoa_r+0xaa2>
 800adea:	2b39      	cmp	r3, #57	@ 0x39
 800adec:	d0ee      	beq.n	800adcc <_dtoa_r+0xa7c>
 800adee:	3301      	adds	r3, #1
 800adf0:	e7c9      	b.n	800ad86 <_dtoa_r+0xa36>
 800adf2:	9a00      	ldr	r2, [sp, #0]
 800adf4:	9908      	ldr	r1, [sp, #32]
 800adf6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800adfa:	428a      	cmp	r2, r1
 800adfc:	d029      	beq.n	800ae52 <_dtoa_r+0xb02>
 800adfe:	2300      	movs	r3, #0
 800ae00:	220a      	movs	r2, #10
 800ae02:	9902      	ldr	r1, [sp, #8]
 800ae04:	4648      	mov	r0, r9
 800ae06:	f000 f9d7 	bl	800b1b8 <__multadd>
 800ae0a:	42af      	cmp	r7, r5
 800ae0c:	9002      	str	r0, [sp, #8]
 800ae0e:	f04f 0300 	mov.w	r3, #0
 800ae12:	f04f 020a 	mov.w	r2, #10
 800ae16:	4639      	mov	r1, r7
 800ae18:	4648      	mov	r0, r9
 800ae1a:	d107      	bne.n	800ae2c <_dtoa_r+0xadc>
 800ae1c:	f000 f9cc 	bl	800b1b8 <__multadd>
 800ae20:	4607      	mov	r7, r0
 800ae22:	4605      	mov	r5, r0
 800ae24:	9b00      	ldr	r3, [sp, #0]
 800ae26:	3301      	adds	r3, #1
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	e777      	b.n	800ad1c <_dtoa_r+0x9cc>
 800ae2c:	f000 f9c4 	bl	800b1b8 <__multadd>
 800ae30:	4629      	mov	r1, r5
 800ae32:	4607      	mov	r7, r0
 800ae34:	2300      	movs	r3, #0
 800ae36:	220a      	movs	r2, #10
 800ae38:	4648      	mov	r0, r9
 800ae3a:	f000 f9bd 	bl	800b1b8 <__multadd>
 800ae3e:	4605      	mov	r5, r0
 800ae40:	e7f0      	b.n	800ae24 <_dtoa_r+0xad4>
 800ae42:	f1bb 0f00 	cmp.w	fp, #0
 800ae46:	f04f 0700 	mov.w	r7, #0
 800ae4a:	bfcc      	ite	gt
 800ae4c:	465e      	movgt	r6, fp
 800ae4e:	2601      	movle	r6, #1
 800ae50:	4456      	add	r6, sl
 800ae52:	2201      	movs	r2, #1
 800ae54:	9902      	ldr	r1, [sp, #8]
 800ae56:	4648      	mov	r0, r9
 800ae58:	9300      	str	r3, [sp, #0]
 800ae5a:	f000 fb55 	bl	800b508 <__lshift>
 800ae5e:	4621      	mov	r1, r4
 800ae60:	9002      	str	r0, [sp, #8]
 800ae62:	f000 fbbd 	bl	800b5e0 <__mcmp>
 800ae66:	2800      	cmp	r0, #0
 800ae68:	dcb3      	bgt.n	800add2 <_dtoa_r+0xa82>
 800ae6a:	d102      	bne.n	800ae72 <_dtoa_r+0xb22>
 800ae6c:	9b00      	ldr	r3, [sp, #0]
 800ae6e:	07db      	lsls	r3, r3, #31
 800ae70:	d4af      	bmi.n	800add2 <_dtoa_r+0xa82>
 800ae72:	4633      	mov	r3, r6
 800ae74:	461e      	mov	r6, r3
 800ae76:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae7a:	2a30      	cmp	r2, #48	@ 0x30
 800ae7c:	d0fa      	beq.n	800ae74 <_dtoa_r+0xb24>
 800ae7e:	e4b4      	b.n	800a7ea <_dtoa_r+0x49a>
 800ae80:	459a      	cmp	sl, r3
 800ae82:	d1a7      	bne.n	800add4 <_dtoa_r+0xa84>
 800ae84:	2331      	movs	r3, #49	@ 0x31
 800ae86:	f108 0801 	add.w	r8, r8, #1
 800ae8a:	f88a 3000 	strb.w	r3, [sl]
 800ae8e:	e4ac      	b.n	800a7ea <_dtoa_r+0x49a>
 800ae90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ae92:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800aef0 <_dtoa_r+0xba0>
 800ae96:	b11b      	cbz	r3, 800aea0 <_dtoa_r+0xb50>
 800ae98:	f10a 0308 	add.w	r3, sl, #8
 800ae9c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ae9e:	6013      	str	r3, [r2, #0]
 800aea0:	4650      	mov	r0, sl
 800aea2:	b017      	add	sp, #92	@ 0x5c
 800aea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aea8:	9b07      	ldr	r3, [sp, #28]
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	f77f ae2d 	ble.w	800ab0a <_dtoa_r+0x7ba>
 800aeb0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aeb2:	9308      	str	r3, [sp, #32]
 800aeb4:	2001      	movs	r0, #1
 800aeb6:	e64c      	b.n	800ab52 <_dtoa_r+0x802>
 800aeb8:	f1bb 0f00 	cmp.w	fp, #0
 800aebc:	f77f aed8 	ble.w	800ac70 <_dtoa_r+0x920>
 800aec0:	4656      	mov	r6, sl
 800aec2:	4621      	mov	r1, r4
 800aec4:	9802      	ldr	r0, [sp, #8]
 800aec6:	f7ff f9b4 	bl	800a232 <quorem>
 800aeca:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800aece:	f806 3b01 	strb.w	r3, [r6], #1
 800aed2:	eba6 020a 	sub.w	r2, r6, sl
 800aed6:	4593      	cmp	fp, r2
 800aed8:	ddb3      	ble.n	800ae42 <_dtoa_r+0xaf2>
 800aeda:	2300      	movs	r3, #0
 800aedc:	220a      	movs	r2, #10
 800aede:	9902      	ldr	r1, [sp, #8]
 800aee0:	4648      	mov	r0, r9
 800aee2:	f000 f969 	bl	800b1b8 <__multadd>
 800aee6:	9002      	str	r0, [sp, #8]
 800aee8:	e7eb      	b.n	800aec2 <_dtoa_r+0xb72>
 800aeea:	bf00      	nop
 800aeec:	0800c520 	.word	0x0800c520
 800aef0:	0800c4a4 	.word	0x0800c4a4

0800aef4 <_free_r>:
 800aef4:	b538      	push	{r3, r4, r5, lr}
 800aef6:	4605      	mov	r5, r0
 800aef8:	2900      	cmp	r1, #0
 800aefa:	d041      	beq.n	800af80 <_free_r+0x8c>
 800aefc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af00:	1f0c      	subs	r4, r1, #4
 800af02:	2b00      	cmp	r3, #0
 800af04:	bfb8      	it	lt
 800af06:	18e4      	addlt	r4, r4, r3
 800af08:	f000 f8e8 	bl	800b0dc <__malloc_lock>
 800af0c:	4a1d      	ldr	r2, [pc, #116]	@ (800af84 <_free_r+0x90>)
 800af0e:	6813      	ldr	r3, [r2, #0]
 800af10:	b933      	cbnz	r3, 800af20 <_free_r+0x2c>
 800af12:	6063      	str	r3, [r4, #4]
 800af14:	6014      	str	r4, [r2, #0]
 800af16:	4628      	mov	r0, r5
 800af18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af1c:	f000 b8e4 	b.w	800b0e8 <__malloc_unlock>
 800af20:	42a3      	cmp	r3, r4
 800af22:	d908      	bls.n	800af36 <_free_r+0x42>
 800af24:	6820      	ldr	r0, [r4, #0]
 800af26:	1821      	adds	r1, r4, r0
 800af28:	428b      	cmp	r3, r1
 800af2a:	bf01      	itttt	eq
 800af2c:	6819      	ldreq	r1, [r3, #0]
 800af2e:	685b      	ldreq	r3, [r3, #4]
 800af30:	1809      	addeq	r1, r1, r0
 800af32:	6021      	streq	r1, [r4, #0]
 800af34:	e7ed      	b.n	800af12 <_free_r+0x1e>
 800af36:	461a      	mov	r2, r3
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	b10b      	cbz	r3, 800af40 <_free_r+0x4c>
 800af3c:	42a3      	cmp	r3, r4
 800af3e:	d9fa      	bls.n	800af36 <_free_r+0x42>
 800af40:	6811      	ldr	r1, [r2, #0]
 800af42:	1850      	adds	r0, r2, r1
 800af44:	42a0      	cmp	r0, r4
 800af46:	d10b      	bne.n	800af60 <_free_r+0x6c>
 800af48:	6820      	ldr	r0, [r4, #0]
 800af4a:	4401      	add	r1, r0
 800af4c:	1850      	adds	r0, r2, r1
 800af4e:	6011      	str	r1, [r2, #0]
 800af50:	4283      	cmp	r3, r0
 800af52:	d1e0      	bne.n	800af16 <_free_r+0x22>
 800af54:	6818      	ldr	r0, [r3, #0]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	4408      	add	r0, r1
 800af5a:	6053      	str	r3, [r2, #4]
 800af5c:	6010      	str	r0, [r2, #0]
 800af5e:	e7da      	b.n	800af16 <_free_r+0x22>
 800af60:	d902      	bls.n	800af68 <_free_r+0x74>
 800af62:	230c      	movs	r3, #12
 800af64:	602b      	str	r3, [r5, #0]
 800af66:	e7d6      	b.n	800af16 <_free_r+0x22>
 800af68:	6820      	ldr	r0, [r4, #0]
 800af6a:	1821      	adds	r1, r4, r0
 800af6c:	428b      	cmp	r3, r1
 800af6e:	bf02      	ittt	eq
 800af70:	6819      	ldreq	r1, [r3, #0]
 800af72:	685b      	ldreq	r3, [r3, #4]
 800af74:	1809      	addeq	r1, r1, r0
 800af76:	6063      	str	r3, [r4, #4]
 800af78:	bf08      	it	eq
 800af7a:	6021      	streq	r1, [r4, #0]
 800af7c:	6054      	str	r4, [r2, #4]
 800af7e:	e7ca      	b.n	800af16 <_free_r+0x22>
 800af80:	bd38      	pop	{r3, r4, r5, pc}
 800af82:	bf00      	nop
 800af84:	2000085c 	.word	0x2000085c

0800af88 <malloc>:
 800af88:	4b02      	ldr	r3, [pc, #8]	@ (800af94 <malloc+0xc>)
 800af8a:	4601      	mov	r1, r0
 800af8c:	6818      	ldr	r0, [r3, #0]
 800af8e:	f000 b825 	b.w	800afdc <_malloc_r>
 800af92:	bf00      	nop
 800af94:	2000001c 	.word	0x2000001c

0800af98 <sbrk_aligned>:
 800af98:	b570      	push	{r4, r5, r6, lr}
 800af9a:	4e0f      	ldr	r6, [pc, #60]	@ (800afd8 <sbrk_aligned+0x40>)
 800af9c:	460c      	mov	r4, r1
 800af9e:	4605      	mov	r5, r0
 800afa0:	6831      	ldr	r1, [r6, #0]
 800afa2:	b911      	cbnz	r1, 800afaa <sbrk_aligned+0x12>
 800afa4:	f000 feaa 	bl	800bcfc <_sbrk_r>
 800afa8:	6030      	str	r0, [r6, #0]
 800afaa:	4621      	mov	r1, r4
 800afac:	4628      	mov	r0, r5
 800afae:	f000 fea5 	bl	800bcfc <_sbrk_r>
 800afb2:	1c43      	adds	r3, r0, #1
 800afb4:	d103      	bne.n	800afbe <sbrk_aligned+0x26>
 800afb6:	f04f 34ff 	mov.w	r4, #4294967295
 800afba:	4620      	mov	r0, r4
 800afbc:	bd70      	pop	{r4, r5, r6, pc}
 800afbe:	1cc4      	adds	r4, r0, #3
 800afc0:	f024 0403 	bic.w	r4, r4, #3
 800afc4:	42a0      	cmp	r0, r4
 800afc6:	d0f8      	beq.n	800afba <sbrk_aligned+0x22>
 800afc8:	1a21      	subs	r1, r4, r0
 800afca:	4628      	mov	r0, r5
 800afcc:	f000 fe96 	bl	800bcfc <_sbrk_r>
 800afd0:	3001      	adds	r0, #1
 800afd2:	d1f2      	bne.n	800afba <sbrk_aligned+0x22>
 800afd4:	e7ef      	b.n	800afb6 <sbrk_aligned+0x1e>
 800afd6:	bf00      	nop
 800afd8:	20000858 	.word	0x20000858

0800afdc <_malloc_r>:
 800afdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afe0:	1ccd      	adds	r5, r1, #3
 800afe2:	4606      	mov	r6, r0
 800afe4:	f025 0503 	bic.w	r5, r5, #3
 800afe8:	3508      	adds	r5, #8
 800afea:	2d0c      	cmp	r5, #12
 800afec:	bf38      	it	cc
 800afee:	250c      	movcc	r5, #12
 800aff0:	2d00      	cmp	r5, #0
 800aff2:	db01      	blt.n	800aff8 <_malloc_r+0x1c>
 800aff4:	42a9      	cmp	r1, r5
 800aff6:	d904      	bls.n	800b002 <_malloc_r+0x26>
 800aff8:	230c      	movs	r3, #12
 800affa:	6033      	str	r3, [r6, #0]
 800affc:	2000      	movs	r0, #0
 800affe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b002:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b0d8 <_malloc_r+0xfc>
 800b006:	f000 f869 	bl	800b0dc <__malloc_lock>
 800b00a:	f8d8 3000 	ldr.w	r3, [r8]
 800b00e:	461c      	mov	r4, r3
 800b010:	bb44      	cbnz	r4, 800b064 <_malloc_r+0x88>
 800b012:	4629      	mov	r1, r5
 800b014:	4630      	mov	r0, r6
 800b016:	f7ff ffbf 	bl	800af98 <sbrk_aligned>
 800b01a:	1c43      	adds	r3, r0, #1
 800b01c:	4604      	mov	r4, r0
 800b01e:	d158      	bne.n	800b0d2 <_malloc_r+0xf6>
 800b020:	f8d8 4000 	ldr.w	r4, [r8]
 800b024:	4627      	mov	r7, r4
 800b026:	2f00      	cmp	r7, #0
 800b028:	d143      	bne.n	800b0b2 <_malloc_r+0xd6>
 800b02a:	2c00      	cmp	r4, #0
 800b02c:	d04b      	beq.n	800b0c6 <_malloc_r+0xea>
 800b02e:	6823      	ldr	r3, [r4, #0]
 800b030:	4639      	mov	r1, r7
 800b032:	4630      	mov	r0, r6
 800b034:	eb04 0903 	add.w	r9, r4, r3
 800b038:	f000 fe60 	bl	800bcfc <_sbrk_r>
 800b03c:	4581      	cmp	r9, r0
 800b03e:	d142      	bne.n	800b0c6 <_malloc_r+0xea>
 800b040:	6821      	ldr	r1, [r4, #0]
 800b042:	4630      	mov	r0, r6
 800b044:	1a6d      	subs	r5, r5, r1
 800b046:	4629      	mov	r1, r5
 800b048:	f7ff ffa6 	bl	800af98 <sbrk_aligned>
 800b04c:	3001      	adds	r0, #1
 800b04e:	d03a      	beq.n	800b0c6 <_malloc_r+0xea>
 800b050:	6823      	ldr	r3, [r4, #0]
 800b052:	442b      	add	r3, r5
 800b054:	6023      	str	r3, [r4, #0]
 800b056:	f8d8 3000 	ldr.w	r3, [r8]
 800b05a:	685a      	ldr	r2, [r3, #4]
 800b05c:	bb62      	cbnz	r2, 800b0b8 <_malloc_r+0xdc>
 800b05e:	f8c8 7000 	str.w	r7, [r8]
 800b062:	e00f      	b.n	800b084 <_malloc_r+0xa8>
 800b064:	6822      	ldr	r2, [r4, #0]
 800b066:	1b52      	subs	r2, r2, r5
 800b068:	d420      	bmi.n	800b0ac <_malloc_r+0xd0>
 800b06a:	2a0b      	cmp	r2, #11
 800b06c:	d917      	bls.n	800b09e <_malloc_r+0xc2>
 800b06e:	1961      	adds	r1, r4, r5
 800b070:	42a3      	cmp	r3, r4
 800b072:	6025      	str	r5, [r4, #0]
 800b074:	bf18      	it	ne
 800b076:	6059      	strne	r1, [r3, #4]
 800b078:	6863      	ldr	r3, [r4, #4]
 800b07a:	bf08      	it	eq
 800b07c:	f8c8 1000 	streq.w	r1, [r8]
 800b080:	5162      	str	r2, [r4, r5]
 800b082:	604b      	str	r3, [r1, #4]
 800b084:	4630      	mov	r0, r6
 800b086:	f000 f82f 	bl	800b0e8 <__malloc_unlock>
 800b08a:	f104 000b 	add.w	r0, r4, #11
 800b08e:	1d23      	adds	r3, r4, #4
 800b090:	f020 0007 	bic.w	r0, r0, #7
 800b094:	1ac2      	subs	r2, r0, r3
 800b096:	bf1c      	itt	ne
 800b098:	1a1b      	subne	r3, r3, r0
 800b09a:	50a3      	strne	r3, [r4, r2]
 800b09c:	e7af      	b.n	800affe <_malloc_r+0x22>
 800b09e:	6862      	ldr	r2, [r4, #4]
 800b0a0:	42a3      	cmp	r3, r4
 800b0a2:	bf0c      	ite	eq
 800b0a4:	f8c8 2000 	streq.w	r2, [r8]
 800b0a8:	605a      	strne	r2, [r3, #4]
 800b0aa:	e7eb      	b.n	800b084 <_malloc_r+0xa8>
 800b0ac:	4623      	mov	r3, r4
 800b0ae:	6864      	ldr	r4, [r4, #4]
 800b0b0:	e7ae      	b.n	800b010 <_malloc_r+0x34>
 800b0b2:	463c      	mov	r4, r7
 800b0b4:	687f      	ldr	r7, [r7, #4]
 800b0b6:	e7b6      	b.n	800b026 <_malloc_r+0x4a>
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	42a3      	cmp	r3, r4
 800b0be:	d1fb      	bne.n	800b0b8 <_malloc_r+0xdc>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	6053      	str	r3, [r2, #4]
 800b0c4:	e7de      	b.n	800b084 <_malloc_r+0xa8>
 800b0c6:	230c      	movs	r3, #12
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	6033      	str	r3, [r6, #0]
 800b0cc:	f000 f80c 	bl	800b0e8 <__malloc_unlock>
 800b0d0:	e794      	b.n	800affc <_malloc_r+0x20>
 800b0d2:	6005      	str	r5, [r0, #0]
 800b0d4:	e7d6      	b.n	800b084 <_malloc_r+0xa8>
 800b0d6:	bf00      	nop
 800b0d8:	2000085c 	.word	0x2000085c

0800b0dc <__malloc_lock>:
 800b0dc:	4801      	ldr	r0, [pc, #4]	@ (800b0e4 <__malloc_lock+0x8>)
 800b0de:	f7ff b898 	b.w	800a212 <__retarget_lock_acquire_recursive>
 800b0e2:	bf00      	nop
 800b0e4:	20000854 	.word	0x20000854

0800b0e8 <__malloc_unlock>:
 800b0e8:	4801      	ldr	r0, [pc, #4]	@ (800b0f0 <__malloc_unlock+0x8>)
 800b0ea:	f7ff b893 	b.w	800a214 <__retarget_lock_release_recursive>
 800b0ee:	bf00      	nop
 800b0f0:	20000854 	.word	0x20000854

0800b0f4 <_Balloc>:
 800b0f4:	b570      	push	{r4, r5, r6, lr}
 800b0f6:	69c6      	ldr	r6, [r0, #28]
 800b0f8:	4604      	mov	r4, r0
 800b0fa:	460d      	mov	r5, r1
 800b0fc:	b976      	cbnz	r6, 800b11c <_Balloc+0x28>
 800b0fe:	2010      	movs	r0, #16
 800b100:	f7ff ff42 	bl	800af88 <malloc>
 800b104:	4602      	mov	r2, r0
 800b106:	61e0      	str	r0, [r4, #28]
 800b108:	b920      	cbnz	r0, 800b114 <_Balloc+0x20>
 800b10a:	4b18      	ldr	r3, [pc, #96]	@ (800b16c <_Balloc+0x78>)
 800b10c:	216b      	movs	r1, #107	@ 0x6b
 800b10e:	4818      	ldr	r0, [pc, #96]	@ (800b170 <_Balloc+0x7c>)
 800b110:	f000 fe12 	bl	800bd38 <__assert_func>
 800b114:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b118:	6006      	str	r6, [r0, #0]
 800b11a:	60c6      	str	r6, [r0, #12]
 800b11c:	69e6      	ldr	r6, [r4, #28]
 800b11e:	68f3      	ldr	r3, [r6, #12]
 800b120:	b183      	cbz	r3, 800b144 <_Balloc+0x50>
 800b122:	69e3      	ldr	r3, [r4, #28]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b12a:	b9b8      	cbnz	r0, 800b15c <_Balloc+0x68>
 800b12c:	2101      	movs	r1, #1
 800b12e:	4620      	mov	r0, r4
 800b130:	fa01 f605 	lsl.w	r6, r1, r5
 800b134:	1d72      	adds	r2, r6, #5
 800b136:	0092      	lsls	r2, r2, #2
 800b138:	f000 fe1c 	bl	800bd74 <_calloc_r>
 800b13c:	b160      	cbz	r0, 800b158 <_Balloc+0x64>
 800b13e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b142:	e00e      	b.n	800b162 <_Balloc+0x6e>
 800b144:	2221      	movs	r2, #33	@ 0x21
 800b146:	2104      	movs	r1, #4
 800b148:	4620      	mov	r0, r4
 800b14a:	f000 fe13 	bl	800bd74 <_calloc_r>
 800b14e:	69e3      	ldr	r3, [r4, #28]
 800b150:	60f0      	str	r0, [r6, #12]
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d1e4      	bne.n	800b122 <_Balloc+0x2e>
 800b158:	2000      	movs	r0, #0
 800b15a:	bd70      	pop	{r4, r5, r6, pc}
 800b15c:	6802      	ldr	r2, [r0, #0]
 800b15e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b162:	2300      	movs	r3, #0
 800b164:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b168:	e7f7      	b.n	800b15a <_Balloc+0x66>
 800b16a:	bf00      	nop
 800b16c:	0800c4b1 	.word	0x0800c4b1
 800b170:	0800c531 	.word	0x0800c531

0800b174 <_Bfree>:
 800b174:	b570      	push	{r4, r5, r6, lr}
 800b176:	69c6      	ldr	r6, [r0, #28]
 800b178:	4605      	mov	r5, r0
 800b17a:	460c      	mov	r4, r1
 800b17c:	b976      	cbnz	r6, 800b19c <_Bfree+0x28>
 800b17e:	2010      	movs	r0, #16
 800b180:	f7ff ff02 	bl	800af88 <malloc>
 800b184:	4602      	mov	r2, r0
 800b186:	61e8      	str	r0, [r5, #28]
 800b188:	b920      	cbnz	r0, 800b194 <_Bfree+0x20>
 800b18a:	4b09      	ldr	r3, [pc, #36]	@ (800b1b0 <_Bfree+0x3c>)
 800b18c:	218f      	movs	r1, #143	@ 0x8f
 800b18e:	4809      	ldr	r0, [pc, #36]	@ (800b1b4 <_Bfree+0x40>)
 800b190:	f000 fdd2 	bl	800bd38 <__assert_func>
 800b194:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b198:	6006      	str	r6, [r0, #0]
 800b19a:	60c6      	str	r6, [r0, #12]
 800b19c:	b13c      	cbz	r4, 800b1ae <_Bfree+0x3a>
 800b19e:	69eb      	ldr	r3, [r5, #28]
 800b1a0:	6862      	ldr	r2, [r4, #4]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1a8:	6021      	str	r1, [r4, #0]
 800b1aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b1ae:	bd70      	pop	{r4, r5, r6, pc}
 800b1b0:	0800c4b1 	.word	0x0800c4b1
 800b1b4:	0800c531 	.word	0x0800c531

0800b1b8 <__multadd>:
 800b1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1bc:	f101 0c14 	add.w	ip, r1, #20
 800b1c0:	4607      	mov	r7, r0
 800b1c2:	460c      	mov	r4, r1
 800b1c4:	461e      	mov	r6, r3
 800b1c6:	690d      	ldr	r5, [r1, #16]
 800b1c8:	2000      	movs	r0, #0
 800b1ca:	f8dc 3000 	ldr.w	r3, [ip]
 800b1ce:	3001      	adds	r0, #1
 800b1d0:	b299      	uxth	r1, r3
 800b1d2:	4285      	cmp	r5, r0
 800b1d4:	fb02 6101 	mla	r1, r2, r1, r6
 800b1d8:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b1dc:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800b1e0:	b289      	uxth	r1, r1
 800b1e2:	fb02 3306 	mla	r3, r2, r6, r3
 800b1e6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b1ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b1ee:	f84c 1b04 	str.w	r1, [ip], #4
 800b1f2:	dcea      	bgt.n	800b1ca <__multadd+0x12>
 800b1f4:	b30e      	cbz	r6, 800b23a <__multadd+0x82>
 800b1f6:	68a3      	ldr	r3, [r4, #8]
 800b1f8:	42ab      	cmp	r3, r5
 800b1fa:	dc19      	bgt.n	800b230 <__multadd+0x78>
 800b1fc:	6861      	ldr	r1, [r4, #4]
 800b1fe:	4638      	mov	r0, r7
 800b200:	3101      	adds	r1, #1
 800b202:	f7ff ff77 	bl	800b0f4 <_Balloc>
 800b206:	4680      	mov	r8, r0
 800b208:	b928      	cbnz	r0, 800b216 <__multadd+0x5e>
 800b20a:	4602      	mov	r2, r0
 800b20c:	4b0c      	ldr	r3, [pc, #48]	@ (800b240 <__multadd+0x88>)
 800b20e:	21ba      	movs	r1, #186	@ 0xba
 800b210:	480c      	ldr	r0, [pc, #48]	@ (800b244 <__multadd+0x8c>)
 800b212:	f000 fd91 	bl	800bd38 <__assert_func>
 800b216:	6922      	ldr	r2, [r4, #16]
 800b218:	f104 010c 	add.w	r1, r4, #12
 800b21c:	300c      	adds	r0, #12
 800b21e:	3202      	adds	r2, #2
 800b220:	0092      	lsls	r2, r2, #2
 800b222:	f000 fd7b 	bl	800bd1c <memcpy>
 800b226:	4621      	mov	r1, r4
 800b228:	4644      	mov	r4, r8
 800b22a:	4638      	mov	r0, r7
 800b22c:	f7ff ffa2 	bl	800b174 <_Bfree>
 800b230:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b234:	3501      	adds	r5, #1
 800b236:	615e      	str	r6, [r3, #20]
 800b238:	6125      	str	r5, [r4, #16]
 800b23a:	4620      	mov	r0, r4
 800b23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b240:	0800c520 	.word	0x0800c520
 800b244:	0800c531 	.word	0x0800c531

0800b248 <__hi0bits>:
 800b248:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b24c:	4603      	mov	r3, r0
 800b24e:	bf36      	itet	cc
 800b250:	0403      	lslcc	r3, r0, #16
 800b252:	2000      	movcs	r0, #0
 800b254:	2010      	movcc	r0, #16
 800b256:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b25a:	bf3c      	itt	cc
 800b25c:	021b      	lslcc	r3, r3, #8
 800b25e:	3008      	addcc	r0, #8
 800b260:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b264:	bf3c      	itt	cc
 800b266:	011b      	lslcc	r3, r3, #4
 800b268:	3004      	addcc	r0, #4
 800b26a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b26e:	bf3c      	itt	cc
 800b270:	009b      	lslcc	r3, r3, #2
 800b272:	3002      	addcc	r0, #2
 800b274:	2b00      	cmp	r3, #0
 800b276:	db05      	blt.n	800b284 <__hi0bits+0x3c>
 800b278:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b27c:	f100 0001 	add.w	r0, r0, #1
 800b280:	bf08      	it	eq
 800b282:	2020      	moveq	r0, #32
 800b284:	4770      	bx	lr

0800b286 <__lo0bits>:
 800b286:	6803      	ldr	r3, [r0, #0]
 800b288:	4602      	mov	r2, r0
 800b28a:	f013 0007 	ands.w	r0, r3, #7
 800b28e:	d00b      	beq.n	800b2a8 <__lo0bits+0x22>
 800b290:	07d9      	lsls	r1, r3, #31
 800b292:	d421      	bmi.n	800b2d8 <__lo0bits+0x52>
 800b294:	0798      	lsls	r0, r3, #30
 800b296:	bf47      	ittee	mi
 800b298:	085b      	lsrmi	r3, r3, #1
 800b29a:	2001      	movmi	r0, #1
 800b29c:	089b      	lsrpl	r3, r3, #2
 800b29e:	2002      	movpl	r0, #2
 800b2a0:	bf4c      	ite	mi
 800b2a2:	6013      	strmi	r3, [r2, #0]
 800b2a4:	6013      	strpl	r3, [r2, #0]
 800b2a6:	4770      	bx	lr
 800b2a8:	b299      	uxth	r1, r3
 800b2aa:	b909      	cbnz	r1, 800b2b0 <__lo0bits+0x2a>
 800b2ac:	0c1b      	lsrs	r3, r3, #16
 800b2ae:	2010      	movs	r0, #16
 800b2b0:	b2d9      	uxtb	r1, r3
 800b2b2:	b909      	cbnz	r1, 800b2b8 <__lo0bits+0x32>
 800b2b4:	3008      	adds	r0, #8
 800b2b6:	0a1b      	lsrs	r3, r3, #8
 800b2b8:	0719      	lsls	r1, r3, #28
 800b2ba:	bf04      	itt	eq
 800b2bc:	091b      	lsreq	r3, r3, #4
 800b2be:	3004      	addeq	r0, #4
 800b2c0:	0799      	lsls	r1, r3, #30
 800b2c2:	bf04      	itt	eq
 800b2c4:	089b      	lsreq	r3, r3, #2
 800b2c6:	3002      	addeq	r0, #2
 800b2c8:	07d9      	lsls	r1, r3, #31
 800b2ca:	d403      	bmi.n	800b2d4 <__lo0bits+0x4e>
 800b2cc:	085b      	lsrs	r3, r3, #1
 800b2ce:	f100 0001 	add.w	r0, r0, #1
 800b2d2:	d003      	beq.n	800b2dc <__lo0bits+0x56>
 800b2d4:	6013      	str	r3, [r2, #0]
 800b2d6:	4770      	bx	lr
 800b2d8:	2000      	movs	r0, #0
 800b2da:	4770      	bx	lr
 800b2dc:	2020      	movs	r0, #32
 800b2de:	4770      	bx	lr

0800b2e0 <__i2b>:
 800b2e0:	b510      	push	{r4, lr}
 800b2e2:	460c      	mov	r4, r1
 800b2e4:	2101      	movs	r1, #1
 800b2e6:	f7ff ff05 	bl	800b0f4 <_Balloc>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	b928      	cbnz	r0, 800b2fa <__i2b+0x1a>
 800b2ee:	4b05      	ldr	r3, [pc, #20]	@ (800b304 <__i2b+0x24>)
 800b2f0:	f240 1145 	movw	r1, #325	@ 0x145
 800b2f4:	4804      	ldr	r0, [pc, #16]	@ (800b308 <__i2b+0x28>)
 800b2f6:	f000 fd1f 	bl	800bd38 <__assert_func>
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	6144      	str	r4, [r0, #20]
 800b2fe:	6103      	str	r3, [r0, #16]
 800b300:	bd10      	pop	{r4, pc}
 800b302:	bf00      	nop
 800b304:	0800c520 	.word	0x0800c520
 800b308:	0800c531 	.word	0x0800c531

0800b30c <__multiply>:
 800b30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b310:	4617      	mov	r7, r2
 800b312:	690a      	ldr	r2, [r1, #16]
 800b314:	4689      	mov	r9, r1
 800b316:	b085      	sub	sp, #20
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	bfa2      	ittt	ge
 800b31e:	463b      	movge	r3, r7
 800b320:	460f      	movge	r7, r1
 800b322:	4699      	movge	r9, r3
 800b324:	693d      	ldr	r5, [r7, #16]
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b32c:	6879      	ldr	r1, [r7, #4]
 800b32e:	eb05 060a 	add.w	r6, r5, sl
 800b332:	42b3      	cmp	r3, r6
 800b334:	bfb8      	it	lt
 800b336:	3101      	addlt	r1, #1
 800b338:	f7ff fedc 	bl	800b0f4 <_Balloc>
 800b33c:	b930      	cbnz	r0, 800b34c <__multiply+0x40>
 800b33e:	4602      	mov	r2, r0
 800b340:	4b42      	ldr	r3, [pc, #264]	@ (800b44c <__multiply+0x140>)
 800b342:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b346:	4842      	ldr	r0, [pc, #264]	@ (800b450 <__multiply+0x144>)
 800b348:	f000 fcf6 	bl	800bd38 <__assert_func>
 800b34c:	f100 0414 	add.w	r4, r0, #20
 800b350:	2200      	movs	r2, #0
 800b352:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b356:	4623      	mov	r3, r4
 800b358:	4573      	cmp	r3, lr
 800b35a:	d320      	bcc.n	800b39e <__multiply+0x92>
 800b35c:	f107 0814 	add.w	r8, r7, #20
 800b360:	f109 0114 	add.w	r1, r9, #20
 800b364:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b368:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b36c:	9302      	str	r3, [sp, #8]
 800b36e:	1beb      	subs	r3, r5, r7
 800b370:	3715      	adds	r7, #21
 800b372:	3b15      	subs	r3, #21
 800b374:	f023 0303 	bic.w	r3, r3, #3
 800b378:	3304      	adds	r3, #4
 800b37a:	42bd      	cmp	r5, r7
 800b37c:	bf38      	it	cc
 800b37e:	2304      	movcc	r3, #4
 800b380:	9301      	str	r3, [sp, #4]
 800b382:	9b02      	ldr	r3, [sp, #8]
 800b384:	9103      	str	r1, [sp, #12]
 800b386:	428b      	cmp	r3, r1
 800b388:	d80c      	bhi.n	800b3a4 <__multiply+0x98>
 800b38a:	2e00      	cmp	r6, #0
 800b38c:	dd03      	ble.n	800b396 <__multiply+0x8a>
 800b38e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b392:	2b00      	cmp	r3, #0
 800b394:	d057      	beq.n	800b446 <__multiply+0x13a>
 800b396:	6106      	str	r6, [r0, #16]
 800b398:	b005      	add	sp, #20
 800b39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b39e:	f843 2b04 	str.w	r2, [r3], #4
 800b3a2:	e7d9      	b.n	800b358 <__multiply+0x4c>
 800b3a4:	f8b1 a000 	ldrh.w	sl, [r1]
 800b3a8:	f1ba 0f00 	cmp.w	sl, #0
 800b3ac:	d021      	beq.n	800b3f2 <__multiply+0xe6>
 800b3ae:	46c4      	mov	ip, r8
 800b3b0:	46a1      	mov	r9, r4
 800b3b2:	2700      	movs	r7, #0
 800b3b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b3b8:	f8d9 3000 	ldr.w	r3, [r9]
 800b3bc:	fa1f fb82 	uxth.w	fp, r2
 800b3c0:	4565      	cmp	r5, ip
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800b3c8:	fb0a 330b 	mla	r3, sl, fp, r3
 800b3cc:	443b      	add	r3, r7
 800b3ce:	f8d9 7000 	ldr.w	r7, [r9]
 800b3d2:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800b3d6:	fb0a 7202 	mla	r2, sl, r2, r7
 800b3da:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b3e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b3e8:	f849 3b04 	str.w	r3, [r9], #4
 800b3ec:	d8e2      	bhi.n	800b3b4 <__multiply+0xa8>
 800b3ee:	9b01      	ldr	r3, [sp, #4]
 800b3f0:	50e7      	str	r7, [r4, r3]
 800b3f2:	9b03      	ldr	r3, [sp, #12]
 800b3f4:	3104      	adds	r1, #4
 800b3f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b3fa:	f1b9 0f00 	cmp.w	r9, #0
 800b3fe:	d020      	beq.n	800b442 <__multiply+0x136>
 800b400:	6823      	ldr	r3, [r4, #0]
 800b402:	4647      	mov	r7, r8
 800b404:	46a4      	mov	ip, r4
 800b406:	f04f 0a00 	mov.w	sl, #0
 800b40a:	f8b7 b000 	ldrh.w	fp, [r7]
 800b40e:	b29b      	uxth	r3, r3
 800b410:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b414:	fb09 220b 	mla	r2, r9, fp, r2
 800b418:	4452      	add	r2, sl
 800b41a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b41e:	f84c 3b04 	str.w	r3, [ip], #4
 800b422:	f857 3b04 	ldr.w	r3, [r7], #4
 800b426:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b42a:	f8bc 3000 	ldrh.w	r3, [ip]
 800b42e:	42bd      	cmp	r5, r7
 800b430:	fb09 330a 	mla	r3, r9, sl, r3
 800b434:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b438:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b43c:	d8e5      	bhi.n	800b40a <__multiply+0xfe>
 800b43e:	9a01      	ldr	r2, [sp, #4]
 800b440:	50a3      	str	r3, [r4, r2]
 800b442:	3404      	adds	r4, #4
 800b444:	e79d      	b.n	800b382 <__multiply+0x76>
 800b446:	3e01      	subs	r6, #1
 800b448:	e79f      	b.n	800b38a <__multiply+0x7e>
 800b44a:	bf00      	nop
 800b44c:	0800c520 	.word	0x0800c520
 800b450:	0800c531 	.word	0x0800c531

0800b454 <__pow5mult>:
 800b454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b458:	4615      	mov	r5, r2
 800b45a:	f012 0203 	ands.w	r2, r2, #3
 800b45e:	4607      	mov	r7, r0
 800b460:	460e      	mov	r6, r1
 800b462:	d007      	beq.n	800b474 <__pow5mult+0x20>
 800b464:	3a01      	subs	r2, #1
 800b466:	4c25      	ldr	r4, [pc, #148]	@ (800b4fc <__pow5mult+0xa8>)
 800b468:	2300      	movs	r3, #0
 800b46a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b46e:	f7ff fea3 	bl	800b1b8 <__multadd>
 800b472:	4606      	mov	r6, r0
 800b474:	10ad      	asrs	r5, r5, #2
 800b476:	d03d      	beq.n	800b4f4 <__pow5mult+0xa0>
 800b478:	69fc      	ldr	r4, [r7, #28]
 800b47a:	b97c      	cbnz	r4, 800b49c <__pow5mult+0x48>
 800b47c:	2010      	movs	r0, #16
 800b47e:	f7ff fd83 	bl	800af88 <malloc>
 800b482:	4602      	mov	r2, r0
 800b484:	61f8      	str	r0, [r7, #28]
 800b486:	b928      	cbnz	r0, 800b494 <__pow5mult+0x40>
 800b488:	4b1d      	ldr	r3, [pc, #116]	@ (800b500 <__pow5mult+0xac>)
 800b48a:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b48e:	481d      	ldr	r0, [pc, #116]	@ (800b504 <__pow5mult+0xb0>)
 800b490:	f000 fc52 	bl	800bd38 <__assert_func>
 800b494:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b498:	6004      	str	r4, [r0, #0]
 800b49a:	60c4      	str	r4, [r0, #12]
 800b49c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b4a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b4a4:	b94c      	cbnz	r4, 800b4ba <__pow5mult+0x66>
 800b4a6:	f240 2171 	movw	r1, #625	@ 0x271
 800b4aa:	4638      	mov	r0, r7
 800b4ac:	f7ff ff18 	bl	800b2e0 <__i2b>
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	4604      	mov	r4, r0
 800b4b4:	f8c8 0008 	str.w	r0, [r8, #8]
 800b4b8:	6003      	str	r3, [r0, #0]
 800b4ba:	f04f 0900 	mov.w	r9, #0
 800b4be:	07eb      	lsls	r3, r5, #31
 800b4c0:	d50a      	bpl.n	800b4d8 <__pow5mult+0x84>
 800b4c2:	4631      	mov	r1, r6
 800b4c4:	4622      	mov	r2, r4
 800b4c6:	4638      	mov	r0, r7
 800b4c8:	f7ff ff20 	bl	800b30c <__multiply>
 800b4cc:	4680      	mov	r8, r0
 800b4ce:	4631      	mov	r1, r6
 800b4d0:	4638      	mov	r0, r7
 800b4d2:	4646      	mov	r6, r8
 800b4d4:	f7ff fe4e 	bl	800b174 <_Bfree>
 800b4d8:	106d      	asrs	r5, r5, #1
 800b4da:	d00b      	beq.n	800b4f4 <__pow5mult+0xa0>
 800b4dc:	6820      	ldr	r0, [r4, #0]
 800b4de:	b938      	cbnz	r0, 800b4f0 <__pow5mult+0x9c>
 800b4e0:	4622      	mov	r2, r4
 800b4e2:	4621      	mov	r1, r4
 800b4e4:	4638      	mov	r0, r7
 800b4e6:	f7ff ff11 	bl	800b30c <__multiply>
 800b4ea:	6020      	str	r0, [r4, #0]
 800b4ec:	f8c0 9000 	str.w	r9, [r0]
 800b4f0:	4604      	mov	r4, r0
 800b4f2:	e7e4      	b.n	800b4be <__pow5mult+0x6a>
 800b4f4:	4630      	mov	r0, r6
 800b4f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4fa:	bf00      	nop
 800b4fc:	0800c5e4 	.word	0x0800c5e4
 800b500:	0800c4b1 	.word	0x0800c4b1
 800b504:	0800c531 	.word	0x0800c531

0800b508 <__lshift>:
 800b508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b50c:	460c      	mov	r4, r1
 800b50e:	4607      	mov	r7, r0
 800b510:	4691      	mov	r9, r2
 800b512:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b516:	6923      	ldr	r3, [r4, #16]
 800b518:	6849      	ldr	r1, [r1, #4]
 800b51a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b51e:	68a3      	ldr	r3, [r4, #8]
 800b520:	f108 0601 	add.w	r6, r8, #1
 800b524:	42b3      	cmp	r3, r6
 800b526:	db0b      	blt.n	800b540 <__lshift+0x38>
 800b528:	4638      	mov	r0, r7
 800b52a:	f7ff fde3 	bl	800b0f4 <_Balloc>
 800b52e:	4605      	mov	r5, r0
 800b530:	b948      	cbnz	r0, 800b546 <__lshift+0x3e>
 800b532:	4602      	mov	r2, r0
 800b534:	4b28      	ldr	r3, [pc, #160]	@ (800b5d8 <__lshift+0xd0>)
 800b536:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b53a:	4828      	ldr	r0, [pc, #160]	@ (800b5dc <__lshift+0xd4>)
 800b53c:	f000 fbfc 	bl	800bd38 <__assert_func>
 800b540:	3101      	adds	r1, #1
 800b542:	005b      	lsls	r3, r3, #1
 800b544:	e7ee      	b.n	800b524 <__lshift+0x1c>
 800b546:	2300      	movs	r3, #0
 800b548:	f100 0114 	add.w	r1, r0, #20
 800b54c:	f100 0210 	add.w	r2, r0, #16
 800b550:	4618      	mov	r0, r3
 800b552:	4553      	cmp	r3, sl
 800b554:	db33      	blt.n	800b5be <__lshift+0xb6>
 800b556:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b55a:	f104 0314 	add.w	r3, r4, #20
 800b55e:	6920      	ldr	r0, [r4, #16]
 800b560:	f019 091f 	ands.w	r9, r9, #31
 800b564:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b568:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b56c:	d02b      	beq.n	800b5c6 <__lshift+0xbe>
 800b56e:	f1c9 0e20 	rsb	lr, r9, #32
 800b572:	468a      	mov	sl, r1
 800b574:	2200      	movs	r2, #0
 800b576:	6818      	ldr	r0, [r3, #0]
 800b578:	fa00 f009 	lsl.w	r0, r0, r9
 800b57c:	4310      	orrs	r0, r2
 800b57e:	f84a 0b04 	str.w	r0, [sl], #4
 800b582:	f853 2b04 	ldr.w	r2, [r3], #4
 800b586:	459c      	cmp	ip, r3
 800b588:	fa22 f20e 	lsr.w	r2, r2, lr
 800b58c:	d8f3      	bhi.n	800b576 <__lshift+0x6e>
 800b58e:	ebac 0304 	sub.w	r3, ip, r4
 800b592:	f104 0015 	add.w	r0, r4, #21
 800b596:	3b15      	subs	r3, #21
 800b598:	f023 0303 	bic.w	r3, r3, #3
 800b59c:	3304      	adds	r3, #4
 800b59e:	4560      	cmp	r0, ip
 800b5a0:	bf88      	it	hi
 800b5a2:	2304      	movhi	r3, #4
 800b5a4:	50ca      	str	r2, [r1, r3]
 800b5a6:	b10a      	cbz	r2, 800b5ac <__lshift+0xa4>
 800b5a8:	f108 0602 	add.w	r6, r8, #2
 800b5ac:	3e01      	subs	r6, #1
 800b5ae:	4638      	mov	r0, r7
 800b5b0:	4621      	mov	r1, r4
 800b5b2:	612e      	str	r6, [r5, #16]
 800b5b4:	f7ff fdde 	bl	800b174 <_Bfree>
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5be:	3301      	adds	r3, #1
 800b5c0:	f842 0f04 	str.w	r0, [r2, #4]!
 800b5c4:	e7c5      	b.n	800b552 <__lshift+0x4a>
 800b5c6:	3904      	subs	r1, #4
 800b5c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5cc:	459c      	cmp	ip, r3
 800b5ce:	f841 2f04 	str.w	r2, [r1, #4]!
 800b5d2:	d8f9      	bhi.n	800b5c8 <__lshift+0xc0>
 800b5d4:	e7ea      	b.n	800b5ac <__lshift+0xa4>
 800b5d6:	bf00      	nop
 800b5d8:	0800c520 	.word	0x0800c520
 800b5dc:	0800c531 	.word	0x0800c531

0800b5e0 <__mcmp>:
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	690a      	ldr	r2, [r1, #16]
 800b5e4:	6900      	ldr	r0, [r0, #16]
 800b5e6:	1a80      	subs	r0, r0, r2
 800b5e8:	b530      	push	{r4, r5, lr}
 800b5ea:	d10e      	bne.n	800b60a <__mcmp+0x2a>
 800b5ec:	3314      	adds	r3, #20
 800b5ee:	3114      	adds	r1, #20
 800b5f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b5f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b5f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b5fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b600:	4295      	cmp	r5, r2
 800b602:	d003      	beq.n	800b60c <__mcmp+0x2c>
 800b604:	d205      	bcs.n	800b612 <__mcmp+0x32>
 800b606:	f04f 30ff 	mov.w	r0, #4294967295
 800b60a:	bd30      	pop	{r4, r5, pc}
 800b60c:	42a3      	cmp	r3, r4
 800b60e:	d3f3      	bcc.n	800b5f8 <__mcmp+0x18>
 800b610:	e7fb      	b.n	800b60a <__mcmp+0x2a>
 800b612:	2001      	movs	r0, #1
 800b614:	e7f9      	b.n	800b60a <__mcmp+0x2a>
	...

0800b618 <__mdiff>:
 800b618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b61c:	4689      	mov	r9, r1
 800b61e:	4606      	mov	r6, r0
 800b620:	4611      	mov	r1, r2
 800b622:	4614      	mov	r4, r2
 800b624:	4648      	mov	r0, r9
 800b626:	f7ff ffdb 	bl	800b5e0 <__mcmp>
 800b62a:	1e05      	subs	r5, r0, #0
 800b62c:	d112      	bne.n	800b654 <__mdiff+0x3c>
 800b62e:	4629      	mov	r1, r5
 800b630:	4630      	mov	r0, r6
 800b632:	f7ff fd5f 	bl	800b0f4 <_Balloc>
 800b636:	4602      	mov	r2, r0
 800b638:	b928      	cbnz	r0, 800b646 <__mdiff+0x2e>
 800b63a:	4b41      	ldr	r3, [pc, #260]	@ (800b740 <__mdiff+0x128>)
 800b63c:	f240 2137 	movw	r1, #567	@ 0x237
 800b640:	4840      	ldr	r0, [pc, #256]	@ (800b744 <__mdiff+0x12c>)
 800b642:	f000 fb79 	bl	800bd38 <__assert_func>
 800b646:	2301      	movs	r3, #1
 800b648:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b64c:	4610      	mov	r0, r2
 800b64e:	b003      	add	sp, #12
 800b650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b654:	bfbc      	itt	lt
 800b656:	464b      	movlt	r3, r9
 800b658:	46a1      	movlt	r9, r4
 800b65a:	4630      	mov	r0, r6
 800b65c:	bfb8      	it	lt
 800b65e:	2501      	movlt	r5, #1
 800b660:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b664:	bfb4      	ite	lt
 800b666:	461c      	movlt	r4, r3
 800b668:	2500      	movge	r5, #0
 800b66a:	f7ff fd43 	bl	800b0f4 <_Balloc>
 800b66e:	4602      	mov	r2, r0
 800b670:	b918      	cbnz	r0, 800b67a <__mdiff+0x62>
 800b672:	4b33      	ldr	r3, [pc, #204]	@ (800b740 <__mdiff+0x128>)
 800b674:	f240 2145 	movw	r1, #581	@ 0x245
 800b678:	e7e2      	b.n	800b640 <__mdiff+0x28>
 800b67a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b67e:	f104 0e14 	add.w	lr, r4, #20
 800b682:	6926      	ldr	r6, [r4, #16]
 800b684:	f100 0b14 	add.w	fp, r0, #20
 800b688:	60c5      	str	r5, [r0, #12]
 800b68a:	f109 0514 	add.w	r5, r9, #20
 800b68e:	f109 0310 	add.w	r3, r9, #16
 800b692:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b696:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b69a:	46d9      	mov	r9, fp
 800b69c:	f04f 0c00 	mov.w	ip, #0
 800b6a0:	9301      	str	r3, [sp, #4]
 800b6a2:	9b01      	ldr	r3, [sp, #4]
 800b6a4:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b6a8:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b6ac:	4576      	cmp	r6, lr
 800b6ae:	9301      	str	r3, [sp, #4]
 800b6b0:	fa1f f38a 	uxth.w	r3, sl
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	b283      	uxth	r3, r0
 800b6b8:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800b6bc:	eba1 0303 	sub.w	r3, r1, r3
 800b6c0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b6c4:	4463      	add	r3, ip
 800b6c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b6d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b6d4:	f849 3b04 	str.w	r3, [r9], #4
 800b6d8:	d8e3      	bhi.n	800b6a2 <__mdiff+0x8a>
 800b6da:	1b33      	subs	r3, r6, r4
 800b6dc:	3415      	adds	r4, #21
 800b6de:	3b15      	subs	r3, #21
 800b6e0:	f023 0303 	bic.w	r3, r3, #3
 800b6e4:	3304      	adds	r3, #4
 800b6e6:	42a6      	cmp	r6, r4
 800b6e8:	bf38      	it	cc
 800b6ea:	2304      	movcc	r3, #4
 800b6ec:	441d      	add	r5, r3
 800b6ee:	445b      	add	r3, fp
 800b6f0:	462c      	mov	r4, r5
 800b6f2:	461e      	mov	r6, r3
 800b6f4:	4544      	cmp	r4, r8
 800b6f6:	d30e      	bcc.n	800b716 <__mdiff+0xfe>
 800b6f8:	f108 0103 	add.w	r1, r8, #3
 800b6fc:	1b49      	subs	r1, r1, r5
 800b6fe:	3d03      	subs	r5, #3
 800b700:	f021 0103 	bic.w	r1, r1, #3
 800b704:	45a8      	cmp	r8, r5
 800b706:	bf38      	it	cc
 800b708:	2100      	movcc	r1, #0
 800b70a:	440b      	add	r3, r1
 800b70c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b710:	b199      	cbz	r1, 800b73a <__mdiff+0x122>
 800b712:	6117      	str	r7, [r2, #16]
 800b714:	e79a      	b.n	800b64c <__mdiff+0x34>
 800b716:	f854 1b04 	ldr.w	r1, [r4], #4
 800b71a:	46e6      	mov	lr, ip
 800b71c:	fa1f fc81 	uxth.w	ip, r1
 800b720:	0c08      	lsrs	r0, r1, #16
 800b722:	4471      	add	r1, lr
 800b724:	44f4      	add	ip, lr
 800b726:	b289      	uxth	r1, r1
 800b728:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b72c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b730:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b734:	f846 1b04 	str.w	r1, [r6], #4
 800b738:	e7dc      	b.n	800b6f4 <__mdiff+0xdc>
 800b73a:	3f01      	subs	r7, #1
 800b73c:	e7e6      	b.n	800b70c <__mdiff+0xf4>
 800b73e:	bf00      	nop
 800b740:	0800c520 	.word	0x0800c520
 800b744:	0800c531 	.word	0x0800c531

0800b748 <__d2b>:
 800b748:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b74c:	460f      	mov	r7, r1
 800b74e:	2101      	movs	r1, #1
 800b750:	4616      	mov	r6, r2
 800b752:	ec59 8b10 	vmov	r8, r9, d0
 800b756:	f7ff fccd 	bl	800b0f4 <_Balloc>
 800b75a:	4604      	mov	r4, r0
 800b75c:	b930      	cbnz	r0, 800b76c <__d2b+0x24>
 800b75e:	4602      	mov	r2, r0
 800b760:	4b23      	ldr	r3, [pc, #140]	@ (800b7f0 <__d2b+0xa8>)
 800b762:	f240 310f 	movw	r1, #783	@ 0x30f
 800b766:	4823      	ldr	r0, [pc, #140]	@ (800b7f4 <__d2b+0xac>)
 800b768:	f000 fae6 	bl	800bd38 <__assert_func>
 800b76c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b770:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b774:	b10d      	cbz	r5, 800b77a <__d2b+0x32>
 800b776:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b77a:	9301      	str	r3, [sp, #4]
 800b77c:	f1b8 0300 	subs.w	r3, r8, #0
 800b780:	d023      	beq.n	800b7ca <__d2b+0x82>
 800b782:	4668      	mov	r0, sp
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	f7ff fd7e 	bl	800b286 <__lo0bits>
 800b78a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b78e:	b1d0      	cbz	r0, 800b7c6 <__d2b+0x7e>
 800b790:	f1c0 0320 	rsb	r3, r0, #32
 800b794:	fa02 f303 	lsl.w	r3, r2, r3
 800b798:	40c2      	lsrs	r2, r0
 800b79a:	430b      	orrs	r3, r1
 800b79c:	9201      	str	r2, [sp, #4]
 800b79e:	6163      	str	r3, [r4, #20]
 800b7a0:	9b01      	ldr	r3, [sp, #4]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	61a3      	str	r3, [r4, #24]
 800b7a6:	bf0c      	ite	eq
 800b7a8:	2201      	moveq	r2, #1
 800b7aa:	2202      	movne	r2, #2
 800b7ac:	6122      	str	r2, [r4, #16]
 800b7ae:	b1a5      	cbz	r5, 800b7da <__d2b+0x92>
 800b7b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b7b4:	4405      	add	r5, r0
 800b7b6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b7ba:	603d      	str	r5, [r7, #0]
 800b7bc:	6030      	str	r0, [r6, #0]
 800b7be:	4620      	mov	r0, r4
 800b7c0:	b003      	add	sp, #12
 800b7c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7c6:	6161      	str	r1, [r4, #20]
 800b7c8:	e7ea      	b.n	800b7a0 <__d2b+0x58>
 800b7ca:	a801      	add	r0, sp, #4
 800b7cc:	f7ff fd5b 	bl	800b286 <__lo0bits>
 800b7d0:	9b01      	ldr	r3, [sp, #4]
 800b7d2:	3020      	adds	r0, #32
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	6163      	str	r3, [r4, #20]
 800b7d8:	e7e8      	b.n	800b7ac <__d2b+0x64>
 800b7da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b7de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b7e2:	6038      	str	r0, [r7, #0]
 800b7e4:	6918      	ldr	r0, [r3, #16]
 800b7e6:	f7ff fd2f 	bl	800b248 <__hi0bits>
 800b7ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b7ee:	e7e5      	b.n	800b7bc <__d2b+0x74>
 800b7f0:	0800c520 	.word	0x0800c520
 800b7f4:	0800c531 	.word	0x0800c531

0800b7f8 <__sfputc_r>:
 800b7f8:	6893      	ldr	r3, [r2, #8]
 800b7fa:	3b01      	subs	r3, #1
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	b410      	push	{r4}
 800b800:	6093      	str	r3, [r2, #8]
 800b802:	da08      	bge.n	800b816 <__sfputc_r+0x1e>
 800b804:	6994      	ldr	r4, [r2, #24]
 800b806:	42a3      	cmp	r3, r4
 800b808:	db01      	blt.n	800b80e <__sfputc_r+0x16>
 800b80a:	290a      	cmp	r1, #10
 800b80c:	d103      	bne.n	800b816 <__sfputc_r+0x1e>
 800b80e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b812:	f000 b9df 	b.w	800bbd4 <__swbuf_r>
 800b816:	6813      	ldr	r3, [r2, #0]
 800b818:	1c58      	adds	r0, r3, #1
 800b81a:	6010      	str	r0, [r2, #0]
 800b81c:	4608      	mov	r0, r1
 800b81e:	7019      	strb	r1, [r3, #0]
 800b820:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b824:	4770      	bx	lr

0800b826 <__sfputs_r>:
 800b826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b828:	4606      	mov	r6, r0
 800b82a:	460f      	mov	r7, r1
 800b82c:	4614      	mov	r4, r2
 800b82e:	18d5      	adds	r5, r2, r3
 800b830:	42ac      	cmp	r4, r5
 800b832:	d101      	bne.n	800b838 <__sfputs_r+0x12>
 800b834:	2000      	movs	r0, #0
 800b836:	e007      	b.n	800b848 <__sfputs_r+0x22>
 800b838:	463a      	mov	r2, r7
 800b83a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b83e:	4630      	mov	r0, r6
 800b840:	f7ff ffda 	bl	800b7f8 <__sfputc_r>
 800b844:	1c43      	adds	r3, r0, #1
 800b846:	d1f3      	bne.n	800b830 <__sfputs_r+0xa>
 800b848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b84c <_vfiprintf_r>:
 800b84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b850:	460d      	mov	r5, r1
 800b852:	b09d      	sub	sp, #116	@ 0x74
 800b854:	4614      	mov	r4, r2
 800b856:	4698      	mov	r8, r3
 800b858:	4606      	mov	r6, r0
 800b85a:	b118      	cbz	r0, 800b864 <_vfiprintf_r+0x18>
 800b85c:	6a03      	ldr	r3, [r0, #32]
 800b85e:	b90b      	cbnz	r3, 800b864 <_vfiprintf_r+0x18>
 800b860:	f7fe fbce 	bl	800a000 <__sinit>
 800b864:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b866:	07d9      	lsls	r1, r3, #31
 800b868:	d405      	bmi.n	800b876 <_vfiprintf_r+0x2a>
 800b86a:	89ab      	ldrh	r3, [r5, #12]
 800b86c:	059a      	lsls	r2, r3, #22
 800b86e:	d402      	bmi.n	800b876 <_vfiprintf_r+0x2a>
 800b870:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b872:	f7fe fcce 	bl	800a212 <__retarget_lock_acquire_recursive>
 800b876:	89ab      	ldrh	r3, [r5, #12]
 800b878:	071b      	lsls	r3, r3, #28
 800b87a:	d501      	bpl.n	800b880 <_vfiprintf_r+0x34>
 800b87c:	692b      	ldr	r3, [r5, #16]
 800b87e:	b99b      	cbnz	r3, 800b8a8 <_vfiprintf_r+0x5c>
 800b880:	4629      	mov	r1, r5
 800b882:	4630      	mov	r0, r6
 800b884:	f000 f9e4 	bl	800bc50 <__swsetup_r>
 800b888:	b170      	cbz	r0, 800b8a8 <_vfiprintf_r+0x5c>
 800b88a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b88c:	07dc      	lsls	r4, r3, #31
 800b88e:	d504      	bpl.n	800b89a <_vfiprintf_r+0x4e>
 800b890:	f04f 30ff 	mov.w	r0, #4294967295
 800b894:	b01d      	add	sp, #116	@ 0x74
 800b896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b89a:	89ab      	ldrh	r3, [r5, #12]
 800b89c:	0598      	lsls	r0, r3, #22
 800b89e:	d4f7      	bmi.n	800b890 <_vfiprintf_r+0x44>
 800b8a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8a2:	f7fe fcb7 	bl	800a214 <__retarget_lock_release_recursive>
 800b8a6:	e7f3      	b.n	800b890 <_vfiprintf_r+0x44>
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8ae:	f04f 0901 	mov.w	r9, #1
 800b8b2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800ba68 <_vfiprintf_r+0x21c>
 800b8b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8b8:	2320      	movs	r3, #32
 800b8ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b8be:	2330      	movs	r3, #48	@ 0x30
 800b8c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b8c4:	4623      	mov	r3, r4
 800b8c6:	469a      	mov	sl, r3
 800b8c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8cc:	b10a      	cbz	r2, 800b8d2 <_vfiprintf_r+0x86>
 800b8ce:	2a25      	cmp	r2, #37	@ 0x25
 800b8d0:	d1f9      	bne.n	800b8c6 <_vfiprintf_r+0x7a>
 800b8d2:	ebba 0b04 	subs.w	fp, sl, r4
 800b8d6:	d00b      	beq.n	800b8f0 <_vfiprintf_r+0xa4>
 800b8d8:	465b      	mov	r3, fp
 800b8da:	4622      	mov	r2, r4
 800b8dc:	4629      	mov	r1, r5
 800b8de:	4630      	mov	r0, r6
 800b8e0:	f7ff ffa1 	bl	800b826 <__sfputs_r>
 800b8e4:	3001      	adds	r0, #1
 800b8e6:	f000 80a7 	beq.w	800ba38 <_vfiprintf_r+0x1ec>
 800b8ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8ec:	445a      	add	r2, fp
 800b8ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800b8f0:	f89a 3000 	ldrb.w	r3, [sl]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	f000 809f 	beq.w	800ba38 <_vfiprintf_r+0x1ec>
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b900:	f10a 0a01 	add.w	sl, sl, #1
 800b904:	9304      	str	r3, [sp, #16]
 800b906:	9307      	str	r3, [sp, #28]
 800b908:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b90c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b90e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b912:	4654      	mov	r4, sl
 800b914:	2205      	movs	r2, #5
 800b916:	4854      	ldr	r0, [pc, #336]	@ (800ba68 <_vfiprintf_r+0x21c>)
 800b918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b91c:	f7fe fc7b 	bl	800a216 <memchr>
 800b920:	9a04      	ldr	r2, [sp, #16]
 800b922:	b9d8      	cbnz	r0, 800b95c <_vfiprintf_r+0x110>
 800b924:	06d1      	lsls	r1, r2, #27
 800b926:	bf44      	itt	mi
 800b928:	2320      	movmi	r3, #32
 800b92a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b92e:	0713      	lsls	r3, r2, #28
 800b930:	bf44      	itt	mi
 800b932:	232b      	movmi	r3, #43	@ 0x2b
 800b934:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b938:	f89a 3000 	ldrb.w	r3, [sl]
 800b93c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b93e:	d015      	beq.n	800b96c <_vfiprintf_r+0x120>
 800b940:	9a07      	ldr	r2, [sp, #28]
 800b942:	4654      	mov	r4, sl
 800b944:	2000      	movs	r0, #0
 800b946:	f04f 0c0a 	mov.w	ip, #10
 800b94a:	4621      	mov	r1, r4
 800b94c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b950:	3b30      	subs	r3, #48	@ 0x30
 800b952:	2b09      	cmp	r3, #9
 800b954:	d94b      	bls.n	800b9ee <_vfiprintf_r+0x1a2>
 800b956:	b1b0      	cbz	r0, 800b986 <_vfiprintf_r+0x13a>
 800b958:	9207      	str	r2, [sp, #28]
 800b95a:	e014      	b.n	800b986 <_vfiprintf_r+0x13a>
 800b95c:	eba0 0308 	sub.w	r3, r0, r8
 800b960:	46a2      	mov	sl, r4
 800b962:	fa09 f303 	lsl.w	r3, r9, r3
 800b966:	4313      	orrs	r3, r2
 800b968:	9304      	str	r3, [sp, #16]
 800b96a:	e7d2      	b.n	800b912 <_vfiprintf_r+0xc6>
 800b96c:	9b03      	ldr	r3, [sp, #12]
 800b96e:	1d19      	adds	r1, r3, #4
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	9103      	str	r1, [sp, #12]
 800b976:	bfbb      	ittet	lt
 800b978:	425b      	neglt	r3, r3
 800b97a:	f042 0202 	orrlt.w	r2, r2, #2
 800b97e:	9307      	strge	r3, [sp, #28]
 800b980:	9307      	strlt	r3, [sp, #28]
 800b982:	bfb8      	it	lt
 800b984:	9204      	strlt	r2, [sp, #16]
 800b986:	7823      	ldrb	r3, [r4, #0]
 800b988:	2b2e      	cmp	r3, #46	@ 0x2e
 800b98a:	d10a      	bne.n	800b9a2 <_vfiprintf_r+0x156>
 800b98c:	7863      	ldrb	r3, [r4, #1]
 800b98e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b990:	d132      	bne.n	800b9f8 <_vfiprintf_r+0x1ac>
 800b992:	9b03      	ldr	r3, [sp, #12]
 800b994:	3402      	adds	r4, #2
 800b996:	1d1a      	adds	r2, r3, #4
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b99e:	9203      	str	r2, [sp, #12]
 800b9a0:	9305      	str	r3, [sp, #20]
 800b9a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ba78 <_vfiprintf_r+0x22c>
 800b9a6:	2203      	movs	r2, #3
 800b9a8:	7821      	ldrb	r1, [r4, #0]
 800b9aa:	4650      	mov	r0, sl
 800b9ac:	f7fe fc33 	bl	800a216 <memchr>
 800b9b0:	b138      	cbz	r0, 800b9c2 <_vfiprintf_r+0x176>
 800b9b2:	eba0 000a 	sub.w	r0, r0, sl
 800b9b6:	2240      	movs	r2, #64	@ 0x40
 800b9b8:	9b04      	ldr	r3, [sp, #16]
 800b9ba:	3401      	adds	r4, #1
 800b9bc:	4082      	lsls	r2, r0
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	9304      	str	r3, [sp, #16]
 800b9c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9c6:	2206      	movs	r2, #6
 800b9c8:	4828      	ldr	r0, [pc, #160]	@ (800ba6c <_vfiprintf_r+0x220>)
 800b9ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b9ce:	f7fe fc22 	bl	800a216 <memchr>
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	d03f      	beq.n	800ba56 <_vfiprintf_r+0x20a>
 800b9d6:	4b26      	ldr	r3, [pc, #152]	@ (800ba70 <_vfiprintf_r+0x224>)
 800b9d8:	bb1b      	cbnz	r3, 800ba22 <_vfiprintf_r+0x1d6>
 800b9da:	9b03      	ldr	r3, [sp, #12]
 800b9dc:	3307      	adds	r3, #7
 800b9de:	f023 0307 	bic.w	r3, r3, #7
 800b9e2:	3308      	adds	r3, #8
 800b9e4:	9303      	str	r3, [sp, #12]
 800b9e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9e8:	443b      	add	r3, r7
 800b9ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9ec:	e76a      	b.n	800b8c4 <_vfiprintf_r+0x78>
 800b9ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9f2:	460c      	mov	r4, r1
 800b9f4:	2001      	movs	r0, #1
 800b9f6:	e7a8      	b.n	800b94a <_vfiprintf_r+0xfe>
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	3401      	adds	r4, #1
 800b9fc:	f04f 0c0a 	mov.w	ip, #10
 800ba00:	4619      	mov	r1, r3
 800ba02:	9305      	str	r3, [sp, #20]
 800ba04:	4620      	mov	r0, r4
 800ba06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba0a:	3a30      	subs	r2, #48	@ 0x30
 800ba0c:	2a09      	cmp	r2, #9
 800ba0e:	d903      	bls.n	800ba18 <_vfiprintf_r+0x1cc>
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d0c6      	beq.n	800b9a2 <_vfiprintf_r+0x156>
 800ba14:	9105      	str	r1, [sp, #20]
 800ba16:	e7c4      	b.n	800b9a2 <_vfiprintf_r+0x156>
 800ba18:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba1c:	4604      	mov	r4, r0
 800ba1e:	2301      	movs	r3, #1
 800ba20:	e7f0      	b.n	800ba04 <_vfiprintf_r+0x1b8>
 800ba22:	ab03      	add	r3, sp, #12
 800ba24:	462a      	mov	r2, r5
 800ba26:	a904      	add	r1, sp, #16
 800ba28:	4630      	mov	r0, r6
 800ba2a:	9300      	str	r3, [sp, #0]
 800ba2c:	4b11      	ldr	r3, [pc, #68]	@ (800ba74 <_vfiprintf_r+0x228>)
 800ba2e:	f7fd fea1 	bl	8009774 <_printf_float>
 800ba32:	4607      	mov	r7, r0
 800ba34:	1c78      	adds	r0, r7, #1
 800ba36:	d1d6      	bne.n	800b9e6 <_vfiprintf_r+0x19a>
 800ba38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba3a:	07d9      	lsls	r1, r3, #31
 800ba3c:	d405      	bmi.n	800ba4a <_vfiprintf_r+0x1fe>
 800ba3e:	89ab      	ldrh	r3, [r5, #12]
 800ba40:	059a      	lsls	r2, r3, #22
 800ba42:	d402      	bmi.n	800ba4a <_vfiprintf_r+0x1fe>
 800ba44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba46:	f7fe fbe5 	bl	800a214 <__retarget_lock_release_recursive>
 800ba4a:	89ab      	ldrh	r3, [r5, #12]
 800ba4c:	065b      	lsls	r3, r3, #25
 800ba4e:	f53f af1f 	bmi.w	800b890 <_vfiprintf_r+0x44>
 800ba52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ba54:	e71e      	b.n	800b894 <_vfiprintf_r+0x48>
 800ba56:	ab03      	add	r3, sp, #12
 800ba58:	462a      	mov	r2, r5
 800ba5a:	a904      	add	r1, sp, #16
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	9300      	str	r3, [sp, #0]
 800ba60:	4b04      	ldr	r3, [pc, #16]	@ (800ba74 <_vfiprintf_r+0x228>)
 800ba62:	f7fe f923 	bl	8009cac <_printf_i>
 800ba66:	e7e4      	b.n	800ba32 <_vfiprintf_r+0x1e6>
 800ba68:	0800c58a 	.word	0x0800c58a
 800ba6c:	0800c594 	.word	0x0800c594
 800ba70:	08009775 	.word	0x08009775
 800ba74:	0800b827 	.word	0x0800b827
 800ba78:	0800c590 	.word	0x0800c590

0800ba7c <__sflush_r>:
 800ba7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba84:	0716      	lsls	r6, r2, #28
 800ba86:	4605      	mov	r5, r0
 800ba88:	460c      	mov	r4, r1
 800ba8a:	d454      	bmi.n	800bb36 <__sflush_r+0xba>
 800ba8c:	684b      	ldr	r3, [r1, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	dc02      	bgt.n	800ba98 <__sflush_r+0x1c>
 800ba92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	dd48      	ble.n	800bb2a <__sflush_r+0xae>
 800ba98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ba9a:	2e00      	cmp	r6, #0
 800ba9c:	d045      	beq.n	800bb2a <__sflush_r+0xae>
 800ba9e:	2300      	movs	r3, #0
 800baa0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800baa4:	682f      	ldr	r7, [r5, #0]
 800baa6:	6a21      	ldr	r1, [r4, #32]
 800baa8:	602b      	str	r3, [r5, #0]
 800baaa:	d030      	beq.n	800bb0e <__sflush_r+0x92>
 800baac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800baae:	89a3      	ldrh	r3, [r4, #12]
 800bab0:	0759      	lsls	r1, r3, #29
 800bab2:	d505      	bpl.n	800bac0 <__sflush_r+0x44>
 800bab4:	6863      	ldr	r3, [r4, #4]
 800bab6:	1ad2      	subs	r2, r2, r3
 800bab8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800baba:	b10b      	cbz	r3, 800bac0 <__sflush_r+0x44>
 800babc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800babe:	1ad2      	subs	r2, r2, r3
 800bac0:	2300      	movs	r3, #0
 800bac2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bac4:	6a21      	ldr	r1, [r4, #32]
 800bac6:	4628      	mov	r0, r5
 800bac8:	47b0      	blx	r6
 800baca:	1c43      	adds	r3, r0, #1
 800bacc:	89a3      	ldrh	r3, [r4, #12]
 800bace:	d106      	bne.n	800bade <__sflush_r+0x62>
 800bad0:	6829      	ldr	r1, [r5, #0]
 800bad2:	291d      	cmp	r1, #29
 800bad4:	d82b      	bhi.n	800bb2e <__sflush_r+0xb2>
 800bad6:	4a2a      	ldr	r2, [pc, #168]	@ (800bb80 <__sflush_r+0x104>)
 800bad8:	40ca      	lsrs	r2, r1
 800bada:	07d6      	lsls	r6, r2, #31
 800badc:	d527      	bpl.n	800bb2e <__sflush_r+0xb2>
 800bade:	2200      	movs	r2, #0
 800bae0:	04d9      	lsls	r1, r3, #19
 800bae2:	6062      	str	r2, [r4, #4]
 800bae4:	6922      	ldr	r2, [r4, #16]
 800bae6:	6022      	str	r2, [r4, #0]
 800bae8:	d504      	bpl.n	800baf4 <__sflush_r+0x78>
 800baea:	1c42      	adds	r2, r0, #1
 800baec:	d101      	bne.n	800baf2 <__sflush_r+0x76>
 800baee:	682b      	ldr	r3, [r5, #0]
 800baf0:	b903      	cbnz	r3, 800baf4 <__sflush_r+0x78>
 800baf2:	6560      	str	r0, [r4, #84]	@ 0x54
 800baf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800baf6:	602f      	str	r7, [r5, #0]
 800baf8:	b1b9      	cbz	r1, 800bb2a <__sflush_r+0xae>
 800bafa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bafe:	4299      	cmp	r1, r3
 800bb00:	d002      	beq.n	800bb08 <__sflush_r+0x8c>
 800bb02:	4628      	mov	r0, r5
 800bb04:	f7ff f9f6 	bl	800aef4 <_free_r>
 800bb08:	2300      	movs	r3, #0
 800bb0a:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb0c:	e00d      	b.n	800bb2a <__sflush_r+0xae>
 800bb0e:	2301      	movs	r3, #1
 800bb10:	4628      	mov	r0, r5
 800bb12:	47b0      	blx	r6
 800bb14:	4602      	mov	r2, r0
 800bb16:	1c50      	adds	r0, r2, #1
 800bb18:	d1c9      	bne.n	800baae <__sflush_r+0x32>
 800bb1a:	682b      	ldr	r3, [r5, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d0c6      	beq.n	800baae <__sflush_r+0x32>
 800bb20:	2b1d      	cmp	r3, #29
 800bb22:	d001      	beq.n	800bb28 <__sflush_r+0xac>
 800bb24:	2b16      	cmp	r3, #22
 800bb26:	d11d      	bne.n	800bb64 <__sflush_r+0xe8>
 800bb28:	602f      	str	r7, [r5, #0]
 800bb2a:	2000      	movs	r0, #0
 800bb2c:	e021      	b.n	800bb72 <__sflush_r+0xf6>
 800bb2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb32:	b21b      	sxth	r3, r3
 800bb34:	e01a      	b.n	800bb6c <__sflush_r+0xf0>
 800bb36:	690f      	ldr	r7, [r1, #16]
 800bb38:	2f00      	cmp	r7, #0
 800bb3a:	d0f6      	beq.n	800bb2a <__sflush_r+0xae>
 800bb3c:	0793      	lsls	r3, r2, #30
 800bb3e:	680e      	ldr	r6, [r1, #0]
 800bb40:	600f      	str	r7, [r1, #0]
 800bb42:	bf0c      	ite	eq
 800bb44:	694b      	ldreq	r3, [r1, #20]
 800bb46:	2300      	movne	r3, #0
 800bb48:	eba6 0807 	sub.w	r8, r6, r7
 800bb4c:	608b      	str	r3, [r1, #8]
 800bb4e:	f1b8 0f00 	cmp.w	r8, #0
 800bb52:	ddea      	ble.n	800bb2a <__sflush_r+0xae>
 800bb54:	4643      	mov	r3, r8
 800bb56:	463a      	mov	r2, r7
 800bb58:	6a21      	ldr	r1, [r4, #32]
 800bb5a:	4628      	mov	r0, r5
 800bb5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bb5e:	47b0      	blx	r6
 800bb60:	2800      	cmp	r0, #0
 800bb62:	dc08      	bgt.n	800bb76 <__sflush_r+0xfa>
 800bb64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb70:	81a3      	strh	r3, [r4, #12]
 800bb72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb76:	4407      	add	r7, r0
 800bb78:	eba8 0800 	sub.w	r8, r8, r0
 800bb7c:	e7e7      	b.n	800bb4e <__sflush_r+0xd2>
 800bb7e:	bf00      	nop
 800bb80:	20400001 	.word	0x20400001

0800bb84 <_fflush_r>:
 800bb84:	b538      	push	{r3, r4, r5, lr}
 800bb86:	690b      	ldr	r3, [r1, #16]
 800bb88:	4605      	mov	r5, r0
 800bb8a:	460c      	mov	r4, r1
 800bb8c:	b913      	cbnz	r3, 800bb94 <_fflush_r+0x10>
 800bb8e:	2500      	movs	r5, #0
 800bb90:	4628      	mov	r0, r5
 800bb92:	bd38      	pop	{r3, r4, r5, pc}
 800bb94:	b118      	cbz	r0, 800bb9e <_fflush_r+0x1a>
 800bb96:	6a03      	ldr	r3, [r0, #32]
 800bb98:	b90b      	cbnz	r3, 800bb9e <_fflush_r+0x1a>
 800bb9a:	f7fe fa31 	bl	800a000 <__sinit>
 800bb9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d0f3      	beq.n	800bb8e <_fflush_r+0xa>
 800bba6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bba8:	07d0      	lsls	r0, r2, #31
 800bbaa:	d404      	bmi.n	800bbb6 <_fflush_r+0x32>
 800bbac:	0599      	lsls	r1, r3, #22
 800bbae:	d402      	bmi.n	800bbb6 <_fflush_r+0x32>
 800bbb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbb2:	f7fe fb2e 	bl	800a212 <__retarget_lock_acquire_recursive>
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	4621      	mov	r1, r4
 800bbba:	f7ff ff5f 	bl	800ba7c <__sflush_r>
 800bbbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bbc0:	4605      	mov	r5, r0
 800bbc2:	07da      	lsls	r2, r3, #31
 800bbc4:	d4e4      	bmi.n	800bb90 <_fflush_r+0xc>
 800bbc6:	89a3      	ldrh	r3, [r4, #12]
 800bbc8:	059b      	lsls	r3, r3, #22
 800bbca:	d4e1      	bmi.n	800bb90 <_fflush_r+0xc>
 800bbcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbce:	f7fe fb21 	bl	800a214 <__retarget_lock_release_recursive>
 800bbd2:	e7dd      	b.n	800bb90 <_fflush_r+0xc>

0800bbd4 <__swbuf_r>:
 800bbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbd6:	460e      	mov	r6, r1
 800bbd8:	4614      	mov	r4, r2
 800bbda:	4605      	mov	r5, r0
 800bbdc:	b118      	cbz	r0, 800bbe6 <__swbuf_r+0x12>
 800bbde:	6a03      	ldr	r3, [r0, #32]
 800bbe0:	b90b      	cbnz	r3, 800bbe6 <__swbuf_r+0x12>
 800bbe2:	f7fe fa0d 	bl	800a000 <__sinit>
 800bbe6:	69a3      	ldr	r3, [r4, #24]
 800bbe8:	60a3      	str	r3, [r4, #8]
 800bbea:	89a3      	ldrh	r3, [r4, #12]
 800bbec:	071a      	lsls	r2, r3, #28
 800bbee:	d501      	bpl.n	800bbf4 <__swbuf_r+0x20>
 800bbf0:	6923      	ldr	r3, [r4, #16]
 800bbf2:	b943      	cbnz	r3, 800bc06 <__swbuf_r+0x32>
 800bbf4:	4621      	mov	r1, r4
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	f000 f82a 	bl	800bc50 <__swsetup_r>
 800bbfc:	b118      	cbz	r0, 800bc06 <__swbuf_r+0x32>
 800bbfe:	f04f 37ff 	mov.w	r7, #4294967295
 800bc02:	4638      	mov	r0, r7
 800bc04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc06:	6823      	ldr	r3, [r4, #0]
 800bc08:	b2f6      	uxtb	r6, r6
 800bc0a:	6922      	ldr	r2, [r4, #16]
 800bc0c:	4637      	mov	r7, r6
 800bc0e:	1a98      	subs	r0, r3, r2
 800bc10:	6963      	ldr	r3, [r4, #20]
 800bc12:	4283      	cmp	r3, r0
 800bc14:	dc05      	bgt.n	800bc22 <__swbuf_r+0x4e>
 800bc16:	4621      	mov	r1, r4
 800bc18:	4628      	mov	r0, r5
 800bc1a:	f7ff ffb3 	bl	800bb84 <_fflush_r>
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	d1ed      	bne.n	800bbfe <__swbuf_r+0x2a>
 800bc22:	68a3      	ldr	r3, [r4, #8]
 800bc24:	3b01      	subs	r3, #1
 800bc26:	60a3      	str	r3, [r4, #8]
 800bc28:	6823      	ldr	r3, [r4, #0]
 800bc2a:	1c5a      	adds	r2, r3, #1
 800bc2c:	6022      	str	r2, [r4, #0]
 800bc2e:	701e      	strb	r6, [r3, #0]
 800bc30:	1c43      	adds	r3, r0, #1
 800bc32:	6962      	ldr	r2, [r4, #20]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d004      	beq.n	800bc42 <__swbuf_r+0x6e>
 800bc38:	89a3      	ldrh	r3, [r4, #12]
 800bc3a:	07db      	lsls	r3, r3, #31
 800bc3c:	d5e1      	bpl.n	800bc02 <__swbuf_r+0x2e>
 800bc3e:	2e0a      	cmp	r6, #10
 800bc40:	d1df      	bne.n	800bc02 <__swbuf_r+0x2e>
 800bc42:	4621      	mov	r1, r4
 800bc44:	4628      	mov	r0, r5
 800bc46:	f7ff ff9d 	bl	800bb84 <_fflush_r>
 800bc4a:	2800      	cmp	r0, #0
 800bc4c:	d0d9      	beq.n	800bc02 <__swbuf_r+0x2e>
 800bc4e:	e7d6      	b.n	800bbfe <__swbuf_r+0x2a>

0800bc50 <__swsetup_r>:
 800bc50:	b538      	push	{r3, r4, r5, lr}
 800bc52:	4b29      	ldr	r3, [pc, #164]	@ (800bcf8 <__swsetup_r+0xa8>)
 800bc54:	4605      	mov	r5, r0
 800bc56:	460c      	mov	r4, r1
 800bc58:	6818      	ldr	r0, [r3, #0]
 800bc5a:	b118      	cbz	r0, 800bc64 <__swsetup_r+0x14>
 800bc5c:	6a03      	ldr	r3, [r0, #32]
 800bc5e:	b90b      	cbnz	r3, 800bc64 <__swsetup_r+0x14>
 800bc60:	f7fe f9ce 	bl	800a000 <__sinit>
 800bc64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc68:	0719      	lsls	r1, r3, #28
 800bc6a:	d422      	bmi.n	800bcb2 <__swsetup_r+0x62>
 800bc6c:	06da      	lsls	r2, r3, #27
 800bc6e:	d407      	bmi.n	800bc80 <__swsetup_r+0x30>
 800bc70:	2209      	movs	r2, #9
 800bc72:	602a      	str	r2, [r5, #0]
 800bc74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc78:	f04f 30ff 	mov.w	r0, #4294967295
 800bc7c:	81a3      	strh	r3, [r4, #12]
 800bc7e:	e033      	b.n	800bce8 <__swsetup_r+0x98>
 800bc80:	0758      	lsls	r0, r3, #29
 800bc82:	d512      	bpl.n	800bcaa <__swsetup_r+0x5a>
 800bc84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc86:	b141      	cbz	r1, 800bc9a <__swsetup_r+0x4a>
 800bc88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc8c:	4299      	cmp	r1, r3
 800bc8e:	d002      	beq.n	800bc96 <__swsetup_r+0x46>
 800bc90:	4628      	mov	r0, r5
 800bc92:	f7ff f92f 	bl	800aef4 <_free_r>
 800bc96:	2300      	movs	r3, #0
 800bc98:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc9a:	89a3      	ldrh	r3, [r4, #12]
 800bc9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bca0:	81a3      	strh	r3, [r4, #12]
 800bca2:	2300      	movs	r3, #0
 800bca4:	6063      	str	r3, [r4, #4]
 800bca6:	6923      	ldr	r3, [r4, #16]
 800bca8:	6023      	str	r3, [r4, #0]
 800bcaa:	89a3      	ldrh	r3, [r4, #12]
 800bcac:	f043 0308 	orr.w	r3, r3, #8
 800bcb0:	81a3      	strh	r3, [r4, #12]
 800bcb2:	6923      	ldr	r3, [r4, #16]
 800bcb4:	b94b      	cbnz	r3, 800bcca <__swsetup_r+0x7a>
 800bcb6:	89a3      	ldrh	r3, [r4, #12]
 800bcb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bcbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bcc0:	d003      	beq.n	800bcca <__swsetup_r+0x7a>
 800bcc2:	4621      	mov	r1, r4
 800bcc4:	4628      	mov	r0, r5
 800bcc6:	f000 f8c0 	bl	800be4a <__smakebuf_r>
 800bcca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcce:	f013 0201 	ands.w	r2, r3, #1
 800bcd2:	d00a      	beq.n	800bcea <__swsetup_r+0x9a>
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	60a2      	str	r2, [r4, #8]
 800bcd8:	6962      	ldr	r2, [r4, #20]
 800bcda:	4252      	negs	r2, r2
 800bcdc:	61a2      	str	r2, [r4, #24]
 800bcde:	6922      	ldr	r2, [r4, #16]
 800bce0:	b942      	cbnz	r2, 800bcf4 <__swsetup_r+0xa4>
 800bce2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bce6:	d1c5      	bne.n	800bc74 <__swsetup_r+0x24>
 800bce8:	bd38      	pop	{r3, r4, r5, pc}
 800bcea:	0799      	lsls	r1, r3, #30
 800bcec:	bf58      	it	pl
 800bcee:	6962      	ldrpl	r2, [r4, #20]
 800bcf0:	60a2      	str	r2, [r4, #8]
 800bcf2:	e7f4      	b.n	800bcde <__swsetup_r+0x8e>
 800bcf4:	2000      	movs	r0, #0
 800bcf6:	e7f7      	b.n	800bce8 <__swsetup_r+0x98>
 800bcf8:	2000001c 	.word	0x2000001c

0800bcfc <_sbrk_r>:
 800bcfc:	b538      	push	{r3, r4, r5, lr}
 800bcfe:	2300      	movs	r3, #0
 800bd00:	4d05      	ldr	r5, [pc, #20]	@ (800bd18 <_sbrk_r+0x1c>)
 800bd02:	4604      	mov	r4, r0
 800bd04:	4608      	mov	r0, r1
 800bd06:	602b      	str	r3, [r5, #0]
 800bd08:	f7f6 fb2a 	bl	8002360 <_sbrk>
 800bd0c:	1c43      	adds	r3, r0, #1
 800bd0e:	d102      	bne.n	800bd16 <_sbrk_r+0x1a>
 800bd10:	682b      	ldr	r3, [r5, #0]
 800bd12:	b103      	cbz	r3, 800bd16 <_sbrk_r+0x1a>
 800bd14:	6023      	str	r3, [r4, #0]
 800bd16:	bd38      	pop	{r3, r4, r5, pc}
 800bd18:	20000850 	.word	0x20000850

0800bd1c <memcpy>:
 800bd1c:	440a      	add	r2, r1
 800bd1e:	1e43      	subs	r3, r0, #1
 800bd20:	4291      	cmp	r1, r2
 800bd22:	d100      	bne.n	800bd26 <memcpy+0xa>
 800bd24:	4770      	bx	lr
 800bd26:	b510      	push	{r4, lr}
 800bd28:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd2c:	4291      	cmp	r1, r2
 800bd2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd32:	d1f9      	bne.n	800bd28 <memcpy+0xc>
 800bd34:	bd10      	pop	{r4, pc}
	...

0800bd38 <__assert_func>:
 800bd38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd3a:	4614      	mov	r4, r2
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	4b09      	ldr	r3, [pc, #36]	@ (800bd64 <__assert_func+0x2c>)
 800bd40:	4605      	mov	r5, r0
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	68d8      	ldr	r0, [r3, #12]
 800bd46:	b14c      	cbz	r4, 800bd5c <__assert_func+0x24>
 800bd48:	4b07      	ldr	r3, [pc, #28]	@ (800bd68 <__assert_func+0x30>)
 800bd4a:	9100      	str	r1, [sp, #0]
 800bd4c:	4907      	ldr	r1, [pc, #28]	@ (800bd6c <__assert_func+0x34>)
 800bd4e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd52:	462b      	mov	r3, r5
 800bd54:	f000 f842 	bl	800bddc <fiprintf>
 800bd58:	f000 f8d6 	bl	800bf08 <abort>
 800bd5c:	4b04      	ldr	r3, [pc, #16]	@ (800bd70 <__assert_func+0x38>)
 800bd5e:	461c      	mov	r4, r3
 800bd60:	e7f3      	b.n	800bd4a <__assert_func+0x12>
 800bd62:	bf00      	nop
 800bd64:	2000001c 	.word	0x2000001c
 800bd68:	0800c5a5 	.word	0x0800c5a5
 800bd6c:	0800c5b2 	.word	0x0800c5b2
 800bd70:	0800c5e0 	.word	0x0800c5e0

0800bd74 <_calloc_r>:
 800bd74:	b570      	push	{r4, r5, r6, lr}
 800bd76:	fba1 5402 	umull	r5, r4, r1, r2
 800bd7a:	b934      	cbnz	r4, 800bd8a <_calloc_r+0x16>
 800bd7c:	4629      	mov	r1, r5
 800bd7e:	f7ff f92d 	bl	800afdc <_malloc_r>
 800bd82:	4606      	mov	r6, r0
 800bd84:	b928      	cbnz	r0, 800bd92 <_calloc_r+0x1e>
 800bd86:	4630      	mov	r0, r6
 800bd88:	bd70      	pop	{r4, r5, r6, pc}
 800bd8a:	220c      	movs	r2, #12
 800bd8c:	2600      	movs	r6, #0
 800bd8e:	6002      	str	r2, [r0, #0]
 800bd90:	e7f9      	b.n	800bd86 <_calloc_r+0x12>
 800bd92:	462a      	mov	r2, r5
 800bd94:	4621      	mov	r1, r4
 800bd96:	f7fe f9be 	bl	800a116 <memset>
 800bd9a:	e7f4      	b.n	800bd86 <_calloc_r+0x12>

0800bd9c <__ascii_mbtowc>:
 800bd9c:	b082      	sub	sp, #8
 800bd9e:	b901      	cbnz	r1, 800bda2 <__ascii_mbtowc+0x6>
 800bda0:	a901      	add	r1, sp, #4
 800bda2:	b142      	cbz	r2, 800bdb6 <__ascii_mbtowc+0x1a>
 800bda4:	b14b      	cbz	r3, 800bdba <__ascii_mbtowc+0x1e>
 800bda6:	7813      	ldrb	r3, [r2, #0]
 800bda8:	600b      	str	r3, [r1, #0]
 800bdaa:	7812      	ldrb	r2, [r2, #0]
 800bdac:	1e10      	subs	r0, r2, #0
 800bdae:	bf18      	it	ne
 800bdb0:	2001      	movne	r0, #1
 800bdb2:	b002      	add	sp, #8
 800bdb4:	4770      	bx	lr
 800bdb6:	4610      	mov	r0, r2
 800bdb8:	e7fb      	b.n	800bdb2 <__ascii_mbtowc+0x16>
 800bdba:	f06f 0001 	mvn.w	r0, #1
 800bdbe:	e7f8      	b.n	800bdb2 <__ascii_mbtowc+0x16>

0800bdc0 <__ascii_wctomb>:
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	4608      	mov	r0, r1
 800bdc4:	b141      	cbz	r1, 800bdd8 <__ascii_wctomb+0x18>
 800bdc6:	2aff      	cmp	r2, #255	@ 0xff
 800bdc8:	d904      	bls.n	800bdd4 <__ascii_wctomb+0x14>
 800bdca:	228a      	movs	r2, #138	@ 0x8a
 800bdcc:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd0:	601a      	str	r2, [r3, #0]
 800bdd2:	4770      	bx	lr
 800bdd4:	2001      	movs	r0, #1
 800bdd6:	700a      	strb	r2, [r1, #0]
 800bdd8:	4770      	bx	lr
	...

0800bddc <fiprintf>:
 800bddc:	b40e      	push	{r1, r2, r3}
 800bdde:	b503      	push	{r0, r1, lr}
 800bde0:	ab03      	add	r3, sp, #12
 800bde2:	4601      	mov	r1, r0
 800bde4:	4805      	ldr	r0, [pc, #20]	@ (800bdfc <fiprintf+0x20>)
 800bde6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdea:	6800      	ldr	r0, [r0, #0]
 800bdec:	9301      	str	r3, [sp, #4]
 800bdee:	f7ff fd2d 	bl	800b84c <_vfiprintf_r>
 800bdf2:	b002      	add	sp, #8
 800bdf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdf8:	b003      	add	sp, #12
 800bdfa:	4770      	bx	lr
 800bdfc:	2000001c 	.word	0x2000001c

0800be00 <__swhatbuf_r>:
 800be00:	b570      	push	{r4, r5, r6, lr}
 800be02:	460c      	mov	r4, r1
 800be04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be08:	b096      	sub	sp, #88	@ 0x58
 800be0a:	4615      	mov	r5, r2
 800be0c:	2900      	cmp	r1, #0
 800be0e:	461e      	mov	r6, r3
 800be10:	da0c      	bge.n	800be2c <__swhatbuf_r+0x2c>
 800be12:	89a3      	ldrh	r3, [r4, #12]
 800be14:	2100      	movs	r1, #0
 800be16:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800be1a:	bf14      	ite	ne
 800be1c:	2340      	movne	r3, #64	@ 0x40
 800be1e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800be22:	2000      	movs	r0, #0
 800be24:	6031      	str	r1, [r6, #0]
 800be26:	602b      	str	r3, [r5, #0]
 800be28:	b016      	add	sp, #88	@ 0x58
 800be2a:	bd70      	pop	{r4, r5, r6, pc}
 800be2c:	466a      	mov	r2, sp
 800be2e:	f000 f849 	bl	800bec4 <_fstat_r>
 800be32:	2800      	cmp	r0, #0
 800be34:	dbed      	blt.n	800be12 <__swhatbuf_r+0x12>
 800be36:	9901      	ldr	r1, [sp, #4]
 800be38:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be3c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be40:	4259      	negs	r1, r3
 800be42:	4159      	adcs	r1, r3
 800be44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be48:	e7eb      	b.n	800be22 <__swhatbuf_r+0x22>

0800be4a <__smakebuf_r>:
 800be4a:	898b      	ldrh	r3, [r1, #12]
 800be4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be4e:	079d      	lsls	r5, r3, #30
 800be50:	4606      	mov	r6, r0
 800be52:	460c      	mov	r4, r1
 800be54:	d507      	bpl.n	800be66 <__smakebuf_r+0x1c>
 800be56:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be5a:	6023      	str	r3, [r4, #0]
 800be5c:	6123      	str	r3, [r4, #16]
 800be5e:	2301      	movs	r3, #1
 800be60:	6163      	str	r3, [r4, #20]
 800be62:	b003      	add	sp, #12
 800be64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be66:	ab01      	add	r3, sp, #4
 800be68:	466a      	mov	r2, sp
 800be6a:	f7ff ffc9 	bl	800be00 <__swhatbuf_r>
 800be6e:	9f00      	ldr	r7, [sp, #0]
 800be70:	4605      	mov	r5, r0
 800be72:	4630      	mov	r0, r6
 800be74:	4639      	mov	r1, r7
 800be76:	f7ff f8b1 	bl	800afdc <_malloc_r>
 800be7a:	b948      	cbnz	r0, 800be90 <__smakebuf_r+0x46>
 800be7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be80:	059a      	lsls	r2, r3, #22
 800be82:	d4ee      	bmi.n	800be62 <__smakebuf_r+0x18>
 800be84:	f023 0303 	bic.w	r3, r3, #3
 800be88:	f043 0302 	orr.w	r3, r3, #2
 800be8c:	81a3      	strh	r3, [r4, #12]
 800be8e:	e7e2      	b.n	800be56 <__smakebuf_r+0xc>
 800be90:	89a3      	ldrh	r3, [r4, #12]
 800be92:	6020      	str	r0, [r4, #0]
 800be94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be98:	81a3      	strh	r3, [r4, #12]
 800be9a:	9b01      	ldr	r3, [sp, #4]
 800be9c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bea0:	b15b      	cbz	r3, 800beba <__smakebuf_r+0x70>
 800bea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bea6:	4630      	mov	r0, r6
 800bea8:	f000 f81e 	bl	800bee8 <_isatty_r>
 800beac:	b128      	cbz	r0, 800beba <__smakebuf_r+0x70>
 800beae:	89a3      	ldrh	r3, [r4, #12]
 800beb0:	f023 0303 	bic.w	r3, r3, #3
 800beb4:	f043 0301 	orr.w	r3, r3, #1
 800beb8:	81a3      	strh	r3, [r4, #12]
 800beba:	89a3      	ldrh	r3, [r4, #12]
 800bebc:	431d      	orrs	r5, r3
 800bebe:	81a5      	strh	r5, [r4, #12]
 800bec0:	e7cf      	b.n	800be62 <__smakebuf_r+0x18>
	...

0800bec4 <_fstat_r>:
 800bec4:	b538      	push	{r3, r4, r5, lr}
 800bec6:	2300      	movs	r3, #0
 800bec8:	4d06      	ldr	r5, [pc, #24]	@ (800bee4 <_fstat_r+0x20>)
 800beca:	4604      	mov	r4, r0
 800becc:	4608      	mov	r0, r1
 800bece:	4611      	mov	r1, r2
 800bed0:	602b      	str	r3, [r5, #0]
 800bed2:	f7f6 fa1c 	bl	800230e <_fstat>
 800bed6:	1c43      	adds	r3, r0, #1
 800bed8:	d102      	bne.n	800bee0 <_fstat_r+0x1c>
 800beda:	682b      	ldr	r3, [r5, #0]
 800bedc:	b103      	cbz	r3, 800bee0 <_fstat_r+0x1c>
 800bede:	6023      	str	r3, [r4, #0]
 800bee0:	bd38      	pop	{r3, r4, r5, pc}
 800bee2:	bf00      	nop
 800bee4:	20000850 	.word	0x20000850

0800bee8 <_isatty_r>:
 800bee8:	b538      	push	{r3, r4, r5, lr}
 800beea:	2300      	movs	r3, #0
 800beec:	4d05      	ldr	r5, [pc, #20]	@ (800bf04 <_isatty_r+0x1c>)
 800beee:	4604      	mov	r4, r0
 800bef0:	4608      	mov	r0, r1
 800bef2:	602b      	str	r3, [r5, #0]
 800bef4:	f7f6 fa1b 	bl	800232e <_isatty>
 800bef8:	1c43      	adds	r3, r0, #1
 800befa:	d102      	bne.n	800bf02 <_isatty_r+0x1a>
 800befc:	682b      	ldr	r3, [r5, #0]
 800befe:	b103      	cbz	r3, 800bf02 <_isatty_r+0x1a>
 800bf00:	6023      	str	r3, [r4, #0]
 800bf02:	bd38      	pop	{r3, r4, r5, pc}
 800bf04:	20000850 	.word	0x20000850

0800bf08 <abort>:
 800bf08:	2006      	movs	r0, #6
 800bf0a:	b508      	push	{r3, lr}
 800bf0c:	f000 f82c 	bl	800bf68 <raise>
 800bf10:	2001      	movs	r0, #1
 800bf12:	f7f6 f9c8 	bl	80022a6 <_exit>

0800bf16 <_raise_r>:
 800bf16:	291f      	cmp	r1, #31
 800bf18:	b538      	push	{r3, r4, r5, lr}
 800bf1a:	4605      	mov	r5, r0
 800bf1c:	460c      	mov	r4, r1
 800bf1e:	d904      	bls.n	800bf2a <_raise_r+0x14>
 800bf20:	2316      	movs	r3, #22
 800bf22:	6003      	str	r3, [r0, #0]
 800bf24:	f04f 30ff 	mov.w	r0, #4294967295
 800bf28:	bd38      	pop	{r3, r4, r5, pc}
 800bf2a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bf2c:	b112      	cbz	r2, 800bf34 <_raise_r+0x1e>
 800bf2e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf32:	b94b      	cbnz	r3, 800bf48 <_raise_r+0x32>
 800bf34:	4628      	mov	r0, r5
 800bf36:	f000 f831 	bl	800bf9c <_getpid_r>
 800bf3a:	4622      	mov	r2, r4
 800bf3c:	4601      	mov	r1, r0
 800bf3e:	4628      	mov	r0, r5
 800bf40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf44:	f000 b818 	b.w	800bf78 <_kill_r>
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d00a      	beq.n	800bf62 <_raise_r+0x4c>
 800bf4c:	1c59      	adds	r1, r3, #1
 800bf4e:	d103      	bne.n	800bf58 <_raise_r+0x42>
 800bf50:	2316      	movs	r3, #22
 800bf52:	6003      	str	r3, [r0, #0]
 800bf54:	2001      	movs	r0, #1
 800bf56:	e7e7      	b.n	800bf28 <_raise_r+0x12>
 800bf58:	2100      	movs	r1, #0
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bf60:	4798      	blx	r3
 800bf62:	2000      	movs	r0, #0
 800bf64:	e7e0      	b.n	800bf28 <_raise_r+0x12>
	...

0800bf68 <raise>:
 800bf68:	4b02      	ldr	r3, [pc, #8]	@ (800bf74 <raise+0xc>)
 800bf6a:	4601      	mov	r1, r0
 800bf6c:	6818      	ldr	r0, [r3, #0]
 800bf6e:	f7ff bfd2 	b.w	800bf16 <_raise_r>
 800bf72:	bf00      	nop
 800bf74:	2000001c 	.word	0x2000001c

0800bf78 <_kill_r>:
 800bf78:	b538      	push	{r3, r4, r5, lr}
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	4d06      	ldr	r5, [pc, #24]	@ (800bf98 <_kill_r+0x20>)
 800bf7e:	4604      	mov	r4, r0
 800bf80:	4608      	mov	r0, r1
 800bf82:	4611      	mov	r1, r2
 800bf84:	602b      	str	r3, [r5, #0]
 800bf86:	f7f6 f97e 	bl	8002286 <_kill>
 800bf8a:	1c43      	adds	r3, r0, #1
 800bf8c:	d102      	bne.n	800bf94 <_kill_r+0x1c>
 800bf8e:	682b      	ldr	r3, [r5, #0]
 800bf90:	b103      	cbz	r3, 800bf94 <_kill_r+0x1c>
 800bf92:	6023      	str	r3, [r4, #0]
 800bf94:	bd38      	pop	{r3, r4, r5, pc}
 800bf96:	bf00      	nop
 800bf98:	20000850 	.word	0x20000850

0800bf9c <_getpid_r>:
 800bf9c:	f7f6 b96b 	b.w	8002276 <_getpid>

0800bfa0 <_init>:
 800bfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa2:	bf00      	nop
 800bfa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfa6:	bc08      	pop	{r3}
 800bfa8:	469e      	mov	lr, r3
 800bfaa:	4770      	bx	lr

0800bfac <_fini>:
 800bfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfae:	bf00      	nop
 800bfb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfb2:	bc08      	pop	{r3}
 800bfb4:	469e      	mov	lr, r3
 800bfb6:	4770      	bx	lr
