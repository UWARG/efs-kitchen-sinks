
CAN-ESC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c794  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  0800c990  0800c990  0000d990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cee0  0800cee0  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cee0  0800cee0  0000dee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cee8  0800cee8  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cee8  0800cee8  0000dee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ceec  0800ceec  0000deec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800cef0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a10  200001d4  0800d0c4  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000be4  0800d0c4  0000ebe4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000223b3  00000000  00000000  0000e20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000487d  00000000  00000000  000305bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c08  00000000  00000000  00034e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001560  00000000  00000000  00036a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032b4a  00000000  00000000  00037fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022570  00000000  00000000  0006aaf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001418bc  00000000  00000000  0008d062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ce91e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008970  00000000  00000000  001ce964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001d72d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001d4 	.word	0x200001d4
 8000214:	00000000 	.word	0x00000000
 8000218:	0800c974 	.word	0x0800c974

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001d8 	.word	0x200001d8
 8000234:	0800c974 	.word	0x0800c974

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_drsub>:
 8000248:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800024c:	e002      	b.n	8000254 <__adddf3>
 800024e:	bf00      	nop

08000250 <__aeabi_dsub>:
 8000250:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000254 <__adddf3>:
 8000254:	b530      	push	{r4, r5, lr}
 8000256:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025e:	ea94 0f05 	teq	r4, r5
 8000262:	bf08      	it	eq
 8000264:	ea90 0f02 	teqeq	r0, r2
 8000268:	bf1f      	itttt	ne
 800026a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000272:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000276:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027a:	f000 80e2 	beq.w	8000442 <__adddf3+0x1ee>
 800027e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000282:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000286:	bfb8      	it	lt
 8000288:	426d      	neglt	r5, r5
 800028a:	dd0c      	ble.n	80002a6 <__adddf3+0x52>
 800028c:	442c      	add	r4, r5
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	ea82 0000 	eor.w	r0, r2, r0
 800029a:	ea83 0101 	eor.w	r1, r3, r1
 800029e:	ea80 0202 	eor.w	r2, r0, r2
 80002a2:	ea81 0303 	eor.w	r3, r1, r3
 80002a6:	2d36      	cmp	r5, #54	@ 0x36
 80002a8:	bf88      	it	hi
 80002aa:	bd30      	pophi	{r4, r5, pc}
 80002ac:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x70>
 80002be:	4240      	negs	r0, r0
 80002c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x84>
 80002d2:	4252      	negs	r2, r2
 80002d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d8:	ea94 0f05 	teq	r4, r5
 80002dc:	f000 80a7 	beq.w	800042e <__adddf3+0x1da>
 80002e0:	f1a4 0401 	sub.w	r4, r4, #1
 80002e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e8:	db0d      	blt.n	8000306 <__adddf3+0xb2>
 80002ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ee:	fa22 f205 	lsr.w	r2, r2, r5
 80002f2:	1880      	adds	r0, r0, r2
 80002f4:	f141 0100 	adc.w	r1, r1, #0
 80002f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002fc:	1880      	adds	r0, r0, r2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	4159      	adcs	r1, r3
 8000304:	e00e      	b.n	8000324 <__adddf3+0xd0>
 8000306:	f1a5 0520 	sub.w	r5, r5, #32
 800030a:	f10e 0e20 	add.w	lr, lr, #32
 800030e:	2a01      	cmp	r2, #1
 8000310:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000314:	bf28      	it	cs
 8000316:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	18c0      	adds	r0, r0, r3
 8000320:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000324:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000328:	d507      	bpl.n	800033a <__adddf3+0xe6>
 800032a:	f04f 0e00 	mov.w	lr, #0
 800032e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000332:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000336:	eb6e 0101 	sbc.w	r1, lr, r1
 800033a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800033e:	d31b      	bcc.n	8000378 <__adddf3+0x124>
 8000340:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000344:	d30c      	bcc.n	8000360 <__adddf3+0x10c>
 8000346:	0849      	lsrs	r1, r1, #1
 8000348:	ea5f 0030 	movs.w	r0, r0, rrx
 800034c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000350:	f104 0401 	add.w	r4, r4, #1
 8000354:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000358:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800035c:	f080 809a 	bcs.w	8000494 <__adddf3+0x240>
 8000360:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	ea41 0105 	orr.w	r1, r1, r5
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800037c:	4140      	adcs	r0, r0
 800037e:	eb41 0101 	adc.w	r1, r1, r1
 8000382:	3c01      	subs	r4, #1
 8000384:	bf28      	it	cs
 8000386:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800038a:	d2e9      	bcs.n	8000360 <__adddf3+0x10c>
 800038c:	f091 0f00 	teq	r1, #0
 8000390:	bf04      	itt	eq
 8000392:	4601      	moveq	r1, r0
 8000394:	2000      	moveq	r0, #0
 8000396:	fab1 f381 	clz	r3, r1
 800039a:	bf08      	it	eq
 800039c:	3320      	addeq	r3, #32
 800039e:	f1a3 030b 	sub.w	r3, r3, #11
 80003a2:	f1b3 0220 	subs.w	r2, r3, #32
 80003a6:	da0c      	bge.n	80003c2 <__adddf3+0x16e>
 80003a8:	320c      	adds	r2, #12
 80003aa:	dd08      	ble.n	80003be <__adddf3+0x16a>
 80003ac:	f102 0c14 	add.w	ip, r2, #20
 80003b0:	f1c2 020c 	rsb	r2, r2, #12
 80003b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b8:	fa21 f102 	lsr.w	r1, r1, r2
 80003bc:	e00c      	b.n	80003d8 <__adddf3+0x184>
 80003be:	f102 0214 	add.w	r2, r2, #20
 80003c2:	bfd8      	it	le
 80003c4:	f1c2 0c20 	rsble	ip, r2, #32
 80003c8:	fa01 f102 	lsl.w	r1, r1, r2
 80003cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d0:	bfdc      	itt	le
 80003d2:	ea41 010c 	orrle.w	r1, r1, ip
 80003d6:	4090      	lslle	r0, r2
 80003d8:	1ae4      	subs	r4, r4, r3
 80003da:	bfa2      	ittt	ge
 80003dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e0:	4329      	orrge	r1, r5
 80003e2:	bd30      	popge	{r4, r5, pc}
 80003e4:	ea6f 0404 	mvn.w	r4, r4
 80003e8:	3c1f      	subs	r4, #31
 80003ea:	da1c      	bge.n	8000426 <__adddf3+0x1d2>
 80003ec:	340c      	adds	r4, #12
 80003ee:	dc0e      	bgt.n	800040e <__adddf3+0x1ba>
 80003f0:	f104 0414 	add.w	r4, r4, #20
 80003f4:	f1c4 0220 	rsb	r2, r4, #32
 80003f8:	fa20 f004 	lsr.w	r0, r0, r4
 80003fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000400:	ea40 0003 	orr.w	r0, r0, r3
 8000404:	fa21 f304 	lsr.w	r3, r1, r4
 8000408:	ea45 0103 	orr.w	r1, r5, r3
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f1c4 040c 	rsb	r4, r4, #12
 8000412:	f1c4 0220 	rsb	r2, r4, #32
 8000416:	fa20 f002 	lsr.w	r0, r0, r2
 800041a:	fa01 f304 	lsl.w	r3, r1, r4
 800041e:	ea40 0003 	orr.w	r0, r0, r3
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	fa21 f004 	lsr.w	r0, r1, r4
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	f094 0f00 	teq	r4, #0
 8000432:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000436:	bf06      	itte	eq
 8000438:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800043c:	3401      	addeq	r4, #1
 800043e:	3d01      	subne	r5, #1
 8000440:	e74e      	b.n	80002e0 <__adddf3+0x8c>
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf18      	it	ne
 8000448:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044c:	d029      	beq.n	80004a2 <__adddf3+0x24e>
 800044e:	ea94 0f05 	teq	r4, r5
 8000452:	bf08      	it	eq
 8000454:	ea90 0f02 	teqeq	r0, r2
 8000458:	d005      	beq.n	8000466 <__adddf3+0x212>
 800045a:	ea54 0c00 	orrs.w	ip, r4, r0
 800045e:	bf04      	itt	eq
 8000460:	4619      	moveq	r1, r3
 8000462:	4610      	moveq	r0, r2
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	ea91 0f03 	teq	r1, r3
 800046a:	bf1e      	ittt	ne
 800046c:	2100      	movne	r1, #0
 800046e:	2000      	movne	r0, #0
 8000470:	bd30      	popne	{r4, r5, pc}
 8000472:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000476:	d105      	bne.n	8000484 <__adddf3+0x230>
 8000478:	0040      	lsls	r0, r0, #1
 800047a:	4149      	adcs	r1, r1
 800047c:	bf28      	it	cs
 800047e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000482:	bd30      	pop	{r4, r5, pc}
 8000484:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000488:	bf3c      	itt	cc
 800048a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800048e:	bd30      	popcc	{r4, r5, pc}
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000498:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800049c:	f04f 0000 	mov.w	r0, #0
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf1a      	itte	ne
 80004a8:	4619      	movne	r1, r3
 80004aa:	4610      	movne	r0, r2
 80004ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b0:	bf1c      	itt	ne
 80004b2:	460b      	movne	r3, r1
 80004b4:	4602      	movne	r2, r0
 80004b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ba:	bf06      	itte	eq
 80004bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c0:	ea91 0f03 	teqeq	r1, r3
 80004c4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	bf00      	nop

080004cc <__aeabi_ui2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f04f 0500 	mov.w	r5, #0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e750      	b.n	800038c <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_i2d>:
 80004ec:	f090 0f00 	teq	r0, #0
 80004f0:	bf04      	itt	eq
 80004f2:	2100      	moveq	r1, #0
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000500:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	f04f 0100 	mov.w	r1, #0
 800050c:	e73e      	b.n	800038c <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_f2d>:
 8000510:	0042      	lsls	r2, r0, #1
 8000512:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000516:	ea4f 0131 	mov.w	r1, r1, rrx
 800051a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051e:	bf1f      	itttt	ne
 8000520:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000524:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000528:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800052c:	4770      	bxne	lr
 800052e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000532:	bf08      	it	eq
 8000534:	4770      	bxeq	lr
 8000536:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800053a:	bf04      	itt	eq
 800053c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000550:	e71c      	b.n	800038c <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_ul2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f04f 0500 	mov.w	r5, #0
 8000562:	e00a      	b.n	800057a <__aeabi_l2d+0x16>

08000564 <__aeabi_l2d>:
 8000564:	ea50 0201 	orrs.w	r2, r0, r1
 8000568:	bf08      	it	eq
 800056a:	4770      	bxeq	lr
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000572:	d502      	bpl.n	800057a <__aeabi_l2d+0x16>
 8000574:	4240      	negs	r0, r0
 8000576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000582:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000586:	f43f aed8 	beq.w	800033a <__adddf3+0xe6>
 800058a:	f04f 0203 	mov.w	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b2:	ea40 000e 	orr.w	r0, r0, lr
 80005b6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ba:	4414      	add	r4, r2
 80005bc:	e6bd      	b.n	800033a <__adddf3+0xe6>
 80005be:	bf00      	nop

080005c0 <__aeabi_dmul>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ce:	bf1d      	ittte	ne
 80005d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d4:	ea94 0f0c 	teqne	r4, ip
 80005d8:	ea95 0f0c 	teqne	r5, ip
 80005dc:	f000 f8de 	bleq	800079c <__aeabi_dmul+0x1dc>
 80005e0:	442c      	add	r4, r5
 80005e2:	ea81 0603 	eor.w	r6, r1, r3
 80005e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f2:	bf18      	it	ne
 80005f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000600:	d038      	beq.n	8000674 <__aeabi_dmul+0xb4>
 8000602:	fba0 ce02 	umull	ip, lr, r0, r2
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000612:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000616:	f04f 0600 	mov.w	r6, #0
 800061a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061e:	f09c 0f00 	teq	ip, #0
 8000622:	bf18      	it	ne
 8000624:	f04e 0e01 	orrne.w	lr, lr, #1
 8000628:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800062c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000630:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000634:	d204      	bcs.n	8000640 <__aeabi_dmul+0x80>
 8000636:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063a:	416d      	adcs	r5, r5
 800063c:	eb46 0606 	adc.w	r6, r6, r6
 8000640:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000644:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000648:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800064c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000650:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000654:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000658:	bf88      	it	hi
 800065a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800065e:	d81e      	bhi.n	800069e <__aeabi_dmul+0xde>
 8000660:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000664:	bf08      	it	eq
 8000666:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066a:	f150 0000 	adcs.w	r0, r0, #0
 800066e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000678:	ea46 0101 	orr.w	r1, r6, r1
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	ea81 0103 	eor.w	r1, r1, r3
 8000684:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000688:	bfc2      	ittt	gt
 800068a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000692:	bd70      	popgt	{r4, r5, r6, pc}
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000698:	f04f 0e00 	mov.w	lr, #0
 800069c:	3c01      	subs	r4, #1
 800069e:	f300 80ab 	bgt.w	80007f8 <__aeabi_dmul+0x238>
 80006a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006a6:	bfde      	ittt	le
 80006a8:	2000      	movle	r0, #0
 80006aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ae:	bd70      	pople	{r4, r5, r6, pc}
 80006b0:	f1c4 0400 	rsb	r4, r4, #0
 80006b4:	3c20      	subs	r4, #32
 80006b6:	da35      	bge.n	8000724 <__aeabi_dmul+0x164>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc1b      	bgt.n	80006f4 <__aeabi_dmul+0x134>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f305 	lsl.w	r3, r0, r5
 80006c8:	fa20 f004 	lsr.w	r0, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	fa21 f604 	lsr.w	r6, r1, r4
 80006e4:	eb42 0106 	adc.w	r1, r2, r6
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 040c 	rsb	r4, r4, #12
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000700:	fa20 f005 	lsr.w	r0, r0, r5
 8000704:	fa01 f204 	lsl.w	r2, r1, r4
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000714:	f141 0100 	adc.w	r1, r1, #0
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f205 	lsl.w	r2, r0, r5
 800072c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000730:	fa20 f304 	lsr.w	r3, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea43 0302 	orr.w	r3, r3, r2
 800073c:	fa21 f004 	lsr.w	r0, r1, r4
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	fa21 f204 	lsr.w	r2, r1, r4
 8000748:	ea20 0002 	bic.w	r0, r0, r2
 800074c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f094 0f00 	teq	r4, #0
 8000760:	d10f      	bne.n	8000782 <__aeabi_dmul+0x1c2>
 8000762:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000766:	0040      	lsls	r0, r0, #1
 8000768:	eb41 0101 	adc.w	r1, r1, r1
 800076c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3c01      	subeq	r4, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1a6>
 8000776:	ea41 0106 	orr.w	r1, r1, r6
 800077a:	f095 0f00 	teq	r5, #0
 800077e:	bf18      	it	ne
 8000780:	4770      	bxne	lr
 8000782:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000786:	0052      	lsls	r2, r2, #1
 8000788:	eb43 0303 	adc.w	r3, r3, r3
 800078c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000790:	bf08      	it	eq
 8000792:	3d01      	subeq	r5, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1c6>
 8000796:	ea43 0306 	orr.w	r3, r3, r6
 800079a:	4770      	bx	lr
 800079c:	ea94 0f0c 	teq	r4, ip
 80007a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a4:	bf18      	it	ne
 80007a6:	ea95 0f0c 	teqne	r5, ip
 80007aa:	d00c      	beq.n	80007c6 <__aeabi_dmul+0x206>
 80007ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b0:	bf18      	it	ne
 80007b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b6:	d1d1      	bne.n	800075c <__aeabi_dmul+0x19c>
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ca:	bf06      	itte	eq
 80007cc:	4610      	moveq	r0, r2
 80007ce:	4619      	moveq	r1, r3
 80007d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d4:	d019      	beq.n	800080a <__aeabi_dmul+0x24a>
 80007d6:	ea94 0f0c 	teq	r4, ip
 80007da:	d102      	bne.n	80007e2 <__aeabi_dmul+0x222>
 80007dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e0:	d113      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007e2:	ea95 0f0c 	teq	r5, ip
 80007e6:	d105      	bne.n	80007f4 <__aeabi_dmul+0x234>
 80007e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ec:	bf1c      	itt	ne
 80007ee:	4610      	movne	r0, r2
 80007f0:	4619      	movne	r1, r3
 80007f2:	d10a      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007f4:	ea81 0103 	eor.w	r1, r1, r3
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000800:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	bd70      	pop	{r4, r5, r6, pc}
 800080a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800080e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000812:	bd70      	pop	{r4, r5, r6, pc}

08000814 <__aeabi_ddiv>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800081a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800081e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000822:	bf1d      	ittte	ne
 8000824:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000828:	ea94 0f0c 	teqne	r4, ip
 800082c:	ea95 0f0c 	teqne	r5, ip
 8000830:	f000 f8a7 	bleq	8000982 <__aeabi_ddiv+0x16e>
 8000834:	eba4 0405 	sub.w	r4, r4, r5
 8000838:	ea81 0e03 	eor.w	lr, r1, r3
 800083c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000840:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000844:	f000 8088 	beq.w	8000958 <__aeabi_ddiv+0x144>
 8000848:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800084c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000850:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000854:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000858:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800085c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000860:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000864:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000868:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800086c:	429d      	cmp	r5, r3
 800086e:	bf08      	it	eq
 8000870:	4296      	cmpeq	r6, r2
 8000872:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000876:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800087a:	d202      	bcs.n	8000882 <__aeabi_ddiv+0x6e>
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	1ab6      	subs	r6, r6, r2
 8000884:	eb65 0503 	sbc.w	r5, r5, r3
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000892:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f4:	d018      	beq.n	8000928 <__aeabi_ddiv+0x114>
 80008f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000906:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000912:	d1c0      	bne.n	8000896 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000918:	d10b      	bne.n	8000932 <__aeabi_ddiv+0x11e>
 800091a:	ea41 0100 	orr.w	r1, r1, r0
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000926:	e7b6      	b.n	8000896 <__aeabi_ddiv+0x82>
 8000928:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800092c:	bf04      	itt	eq
 800092e:	4301      	orreq	r1, r0
 8000930:	2000      	moveq	r0, #0
 8000932:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000936:	bf88      	it	hi
 8000938:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800093c:	f63f aeaf 	bhi.w	800069e <__aeabi_dmul+0xde>
 8000940:	ebb5 0c03 	subs.w	ip, r5, r3
 8000944:	bf04      	itt	eq
 8000946:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094e:	f150 0000 	adcs.w	r0, r0, #0
 8000952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800095c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000960:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000964:	bfc2      	ittt	gt
 8000966:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096e:	bd70      	popgt	{r4, r5, r6, pc}
 8000970:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000974:	f04f 0e00 	mov.w	lr, #0
 8000978:	3c01      	subs	r4, #1
 800097a:	e690      	b.n	800069e <__aeabi_dmul+0xde>
 800097c:	ea45 0e06 	orr.w	lr, r5, r6
 8000980:	e68d      	b.n	800069e <__aeabi_dmul+0xde>
 8000982:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000986:	ea94 0f0c 	teq	r4, ip
 800098a:	bf08      	it	eq
 800098c:	ea95 0f0c 	teqeq	r5, ip
 8000990:	f43f af3b 	beq.w	800080a <__aeabi_dmul+0x24a>
 8000994:	ea94 0f0c 	teq	r4, ip
 8000998:	d10a      	bne.n	80009b0 <__aeabi_ddiv+0x19c>
 800099a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099e:	f47f af34 	bne.w	800080a <__aeabi_dmul+0x24a>
 80009a2:	ea95 0f0c 	teq	r5, ip
 80009a6:	f47f af25 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e72c      	b.n	800080a <__aeabi_dmul+0x24a>
 80009b0:	ea95 0f0c 	teq	r5, ip
 80009b4:	d106      	bne.n	80009c4 <__aeabi_ddiv+0x1b0>
 80009b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ba:	f43f aefd 	beq.w	80007b8 <__aeabi_dmul+0x1f8>
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	e722      	b.n	800080a <__aeabi_dmul+0x24a>
 80009c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ce:	f47f aec5 	bne.w	800075c <__aeabi_dmul+0x19c>
 80009d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d6:	f47f af0d 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009de:	f47f aeeb 	bne.w	80007b8 <__aeabi_dmul+0x1f8>
 80009e2:	e712      	b.n	800080a <__aeabi_dmul+0x24a>

080009e4 <__gedf2>:
 80009e4:	f04f 3cff 	mov.w	ip, #4294967295
 80009e8:	e006      	b.n	80009f8 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__ledf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	e002      	b.n	80009f8 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__cmpdf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0e:	d01b      	beq.n	8000a48 <__cmpdf2+0x54>
 8000a10:	b001      	add	sp, #4
 8000a12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a16:	bf0c      	ite	eq
 8000a18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a1c:	ea91 0f03 	teqne	r1, r3
 8000a20:	bf02      	ittt	eq
 8000a22:	ea90 0f02 	teqeq	r0, r2
 8000a26:	2000      	moveq	r0, #0
 8000a28:	4770      	bxeq	lr
 8000a2a:	f110 0f00 	cmn.w	r0, #0
 8000a2e:	ea91 0f03 	teq	r1, r3
 8000a32:	bf58      	it	pl
 8000a34:	4299      	cmppl	r1, r3
 8000a36:	bf08      	it	eq
 8000a38:	4290      	cmpeq	r0, r2
 8000a3a:	bf2c      	ite	cs
 8000a3c:	17d8      	asrcs	r0, r3, #31
 8000a3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a42:	f040 0001 	orr.w	r0, r0, #1
 8000a46:	4770      	bx	lr
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d102      	bne.n	8000a58 <__cmpdf2+0x64>
 8000a52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a56:	d107      	bne.n	8000a68 <__cmpdf2+0x74>
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	d1d6      	bne.n	8000a10 <__cmpdf2+0x1c>
 8000a62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a66:	d0d3      	beq.n	8000a10 <__cmpdf2+0x1c>
 8000a68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdrcmple>:
 8000a70:	4684      	mov	ip, r0
 8000a72:	4610      	mov	r0, r2
 8000a74:	4662      	mov	r2, ip
 8000a76:	468c      	mov	ip, r1
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	e000      	b.n	8000a80 <__aeabi_cdcmpeq>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cdcmpeq>:
 8000a80:	b501      	push	{r0, lr}
 8000a82:	f7ff ffb7 	bl	80009f4 <__cmpdf2>
 8000a86:	2800      	cmp	r0, #0
 8000a88:	bf48      	it	mi
 8000a8a:	f110 0f00 	cmnmi.w	r0, #0
 8000a8e:	bd01      	pop	{r0, pc}

08000a90 <__aeabi_dcmpeq>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff fff4 	bl	8000a80 <__aeabi_cdcmpeq>
 8000a98:	bf0c      	ite	eq
 8000a9a:	2001      	moveq	r0, #1
 8000a9c:	2000      	movne	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmplt>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffea 	bl	8000a80 <__aeabi_cdcmpeq>
 8000aac:	bf34      	ite	cc
 8000aae:	2001      	movcc	r0, #1
 8000ab0:	2000      	movcs	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmple>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffe0 	bl	8000a80 <__aeabi_cdcmpeq>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpge>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffce 	bl	8000a70 <__aeabi_cdrcmple>
 8000ad4:	bf94      	ite	ls
 8000ad6:	2001      	movls	r0, #1
 8000ad8:	2000      	movhi	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpgt>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffc4 	bl	8000a70 <__aeabi_cdrcmple>
 8000ae8:	bf34      	ite	cc
 8000aea:	2001      	movcc	r0, #1
 8000aec:	2000      	movcs	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpun>:
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x10>
 8000afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b02:	d10a      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d102      	bne.n	8000b14 <__aeabi_dcmpun+0x20>
 8000b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0001 	mov.w	r0, #1
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2iz>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b28:	d215      	bcs.n	8000b56 <__aeabi_d2iz+0x36>
 8000b2a:	d511      	bpl.n	8000b50 <__aeabi_d2iz+0x30>
 8000b2c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b34:	d912      	bls.n	8000b5c <__aeabi_d2iz+0x3c>
 8000b36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	4240      	negne	r0, r0
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5a:	d105      	bne.n	8000b68 <__aeabi_d2iz+0x48>
 8000b5c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b60:	bf08      	it	eq
 8000b62:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <__aeabi_uldivmod>:
 8000b70:	b953      	cbnz	r3, 8000b88 <__aeabi_uldivmod+0x18>
 8000b72:	b94a      	cbnz	r2, 8000b88 <__aeabi_uldivmod+0x18>
 8000b74:	2900      	cmp	r1, #0
 8000b76:	bf08      	it	eq
 8000b78:	2800      	cmpeq	r0, #0
 8000b7a:	bf1c      	itt	ne
 8000b7c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b80:	f04f 30ff 	movne.w	r0, #4294967295
 8000b84:	f000 b97e 	b.w	8000e84 <__aeabi_idiv0>
 8000b88:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b90:	f000 f806 	bl	8000ba0 <__udivmoddi4>
 8000b94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b9c:	b004      	add	sp, #16
 8000b9e:	4770      	bx	lr

08000ba0 <__udivmoddi4>:
 8000ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ba4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000ba6:	460c      	mov	r4, r1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d14d      	bne.n	8000c48 <__udivmoddi4+0xa8>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	460f      	mov	r7, r1
 8000bb0:	4684      	mov	ip, r0
 8000bb2:	4696      	mov	lr, r2
 8000bb4:	fab2 f382 	clz	r3, r2
 8000bb8:	d960      	bls.n	8000c7c <__udivmoddi4+0xdc>
 8000bba:	b14b      	cbz	r3, 8000bd0 <__udivmoddi4+0x30>
 8000bbc:	fa02 fe03 	lsl.w	lr, r2, r3
 8000bc0:	f1c3 0220 	rsb	r2, r3, #32
 8000bc4:	409f      	lsls	r7, r3
 8000bc6:	fa00 fc03 	lsl.w	ip, r0, r3
 8000bca:	fa20 f202 	lsr.w	r2, r0, r2
 8000bce:	4317      	orrs	r7, r2
 8000bd0:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000bd4:	fa1f f48e 	uxth.w	r4, lr
 8000bd8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000bdc:	fbb7 f1f6 	udiv	r1, r7, r6
 8000be0:	fb06 7711 	mls	r7, r6, r1, r7
 8000be4:	fb01 f004 	mul.w	r0, r1, r4
 8000be8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bec:	4290      	cmp	r0, r2
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x62>
 8000bf0:	eb1e 0202 	adds.w	r2, lr, r2
 8000bf4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x60>
 8000bfa:	4290      	cmp	r0, r2
 8000bfc:	f200 812d 	bhi.w	8000e5a <__udivmoddi4+0x2ba>
 8000c00:	4639      	mov	r1, r7
 8000c02:	1a12      	subs	r2, r2, r0
 8000c04:	fa1f fc8c 	uxth.w	ip, ip
 8000c08:	fbb2 f0f6 	udiv	r0, r2, r6
 8000c0c:	fb06 2210 	mls	r2, r6, r0, r2
 8000c10:	fb00 f404 	mul.w	r4, r0, r4
 8000c14:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c18:	4564      	cmp	r4, ip
 8000c1a:	d908      	bls.n	8000c2e <__udivmoddi4+0x8e>
 8000c1c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c20:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c24:	d202      	bcs.n	8000c2c <__udivmoddi4+0x8c>
 8000c26:	4564      	cmp	r4, ip
 8000c28:	f200 811a 	bhi.w	8000e60 <__udivmoddi4+0x2c0>
 8000c2c:	4610      	mov	r0, r2
 8000c2e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c32:	ebac 0c04 	sub.w	ip, ip, r4
 8000c36:	2100      	movs	r1, #0
 8000c38:	b125      	cbz	r5, 8000c44 <__udivmoddi4+0xa4>
 8000c3a:	fa2c f303 	lsr.w	r3, ip, r3
 8000c3e:	2200      	movs	r2, #0
 8000c40:	e9c5 3200 	strd	r3, r2, [r5]
 8000c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d905      	bls.n	8000c58 <__udivmoddi4+0xb8>
 8000c4c:	b10d      	cbz	r5, 8000c52 <__udivmoddi4+0xb2>
 8000c4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c52:	2100      	movs	r1, #0
 8000c54:	4608      	mov	r0, r1
 8000c56:	e7f5      	b.n	8000c44 <__udivmoddi4+0xa4>
 8000c58:	fab3 f183 	clz	r1, r3
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	d14d      	bne.n	8000cfc <__udivmoddi4+0x15c>
 8000c60:	42a3      	cmp	r3, r4
 8000c62:	f0c0 80f2 	bcc.w	8000e4a <__udivmoddi4+0x2aa>
 8000c66:	4290      	cmp	r0, r2
 8000c68:	f080 80ef 	bcs.w	8000e4a <__udivmoddi4+0x2aa>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	4623      	mov	r3, r4
 8000c70:	4608      	mov	r0, r1
 8000c72:	2d00      	cmp	r5, #0
 8000c74:	d0e6      	beq.n	8000c44 <__udivmoddi4+0xa4>
 8000c76:	e9c5 6300 	strd	r6, r3, [r5]
 8000c7a:	e7e3      	b.n	8000c44 <__udivmoddi4+0xa4>
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	f040 80a2 	bne.w	8000dc6 <__udivmoddi4+0x226>
 8000c82:	1a8a      	subs	r2, r1, r2
 8000c84:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000c88:	fa1f f68e 	uxth.w	r6, lr
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fbb2 f4f7 	udiv	r4, r2, r7
 8000c92:	fb07 2014 	mls	r0, r7, r4, r2
 8000c96:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c9a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c9e:	fb06 f004 	mul.w	r0, r6, r4
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	d90f      	bls.n	8000cc6 <__udivmoddi4+0x126>
 8000ca6:	eb1e 0202 	adds.w	r2, lr, r2
 8000caa:	f104 38ff 	add.w	r8, r4, #4294967295
 8000cae:	bf2c      	ite	cs
 8000cb0:	f04f 0901 	movcs.w	r9, #1
 8000cb4:	f04f 0900 	movcc.w	r9, #0
 8000cb8:	4290      	cmp	r0, r2
 8000cba:	d903      	bls.n	8000cc4 <__udivmoddi4+0x124>
 8000cbc:	f1b9 0f00 	cmp.w	r9, #0
 8000cc0:	f000 80c8 	beq.w	8000e54 <__udivmoddi4+0x2b4>
 8000cc4:	4644      	mov	r4, r8
 8000cc6:	1a12      	subs	r2, r2, r0
 8000cc8:	fa1f fc8c 	uxth.w	ip, ip
 8000ccc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cd0:	fb07 2210 	mls	r2, r7, r0, r2
 8000cd4:	fb00 f606 	mul.w	r6, r0, r6
 8000cd8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000cdc:	4566      	cmp	r6, ip
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x152>
 8000ce0:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000ce4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ce8:	d202      	bcs.n	8000cf0 <__udivmoddi4+0x150>
 8000cea:	4566      	cmp	r6, ip
 8000cec:	f200 80bb 	bhi.w	8000e66 <__udivmoddi4+0x2c6>
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	ebac 0c06 	sub.w	ip, ip, r6
 8000cf6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cfa:	e79d      	b.n	8000c38 <__udivmoddi4+0x98>
 8000cfc:	f1c1 0620 	rsb	r6, r1, #32
 8000d00:	408b      	lsls	r3, r1
 8000d02:	fa04 fe01 	lsl.w	lr, r4, r1
 8000d06:	fa22 f706 	lsr.w	r7, r2, r6
 8000d0a:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d0e:	40f4      	lsrs	r4, r6
 8000d10:	408a      	lsls	r2, r1
 8000d12:	431f      	orrs	r7, r3
 8000d14:	ea4e 030c 	orr.w	r3, lr, ip
 8000d18:	fa00 fe01 	lsl.w	lr, r0, r1
 8000d1c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d20:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d24:	fa1f fc87 	uxth.w	ip, r7
 8000d28:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2c:	fb08 4410 	mls	r4, r8, r0, r4
 8000d30:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d34:	fb00 f90c 	mul.w	r9, r0, ip
 8000d38:	45a1      	cmp	r9, r4
 8000d3a:	d90e      	bls.n	8000d5a <__udivmoddi4+0x1ba>
 8000d3c:	193c      	adds	r4, r7, r4
 8000d3e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d42:	bf2c      	ite	cs
 8000d44:	f04f 0b01 	movcs.w	fp, #1
 8000d48:	f04f 0b00 	movcc.w	fp, #0
 8000d4c:	45a1      	cmp	r9, r4
 8000d4e:	d903      	bls.n	8000d58 <__udivmoddi4+0x1b8>
 8000d50:	f1bb 0f00 	cmp.w	fp, #0
 8000d54:	f000 8093 	beq.w	8000e7e <__udivmoddi4+0x2de>
 8000d58:	4650      	mov	r0, sl
 8000d5a:	eba4 0409 	sub.w	r4, r4, r9
 8000d5e:	fa1f f983 	uxth.w	r9, r3
 8000d62:	fbb4 f3f8 	udiv	r3, r4, r8
 8000d66:	fb08 4413 	mls	r4, r8, r3, r4
 8000d6a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d72:	45a4      	cmp	ip, r4
 8000d74:	d906      	bls.n	8000d84 <__udivmoddi4+0x1e4>
 8000d76:	193c      	adds	r4, r7, r4
 8000d78:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d7c:	d201      	bcs.n	8000d82 <__udivmoddi4+0x1e2>
 8000d7e:	45a4      	cmp	ip, r4
 8000d80:	d87a      	bhi.n	8000e78 <__udivmoddi4+0x2d8>
 8000d82:	4643      	mov	r3, r8
 8000d84:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	fba0 9802 	umull	r9, r8, r0, r2
 8000d90:	4544      	cmp	r4, r8
 8000d92:	46cc      	mov	ip, r9
 8000d94:	4643      	mov	r3, r8
 8000d96:	d302      	bcc.n	8000d9e <__udivmoddi4+0x1fe>
 8000d98:	d106      	bne.n	8000da8 <__udivmoddi4+0x208>
 8000d9a:	45ce      	cmp	lr, r9
 8000d9c:	d204      	bcs.n	8000da8 <__udivmoddi4+0x208>
 8000d9e:	3801      	subs	r0, #1
 8000da0:	ebb9 0c02 	subs.w	ip, r9, r2
 8000da4:	eb68 0307 	sbc.w	r3, r8, r7
 8000da8:	b15d      	cbz	r5, 8000dc2 <__udivmoddi4+0x222>
 8000daa:	ebbe 020c 	subs.w	r2, lr, ip
 8000dae:	eb64 0403 	sbc.w	r4, r4, r3
 8000db2:	fa04 f606 	lsl.w	r6, r4, r6
 8000db6:	fa22 f301 	lsr.w	r3, r2, r1
 8000dba:	40cc      	lsrs	r4, r1
 8000dbc:	431e      	orrs	r6, r3
 8000dbe:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	e73e      	b.n	8000c44 <__udivmoddi4+0xa4>
 8000dc6:	fa02 fe03 	lsl.w	lr, r2, r3
 8000dca:	f1c3 0120 	rsb	r1, r3, #32
 8000dce:	fa04 f203 	lsl.w	r2, r4, r3
 8000dd2:	fa00 fc03 	lsl.w	ip, r0, r3
 8000dd6:	40cc      	lsrs	r4, r1
 8000dd8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000ddc:	fa20 f101 	lsr.w	r1, r0, r1
 8000de0:	fa1f f68e 	uxth.w	r6, lr
 8000de4:	fbb4 f0f7 	udiv	r0, r4, r7
 8000de8:	430a      	orrs	r2, r1
 8000dea:	fb07 4410 	mls	r4, r7, r0, r4
 8000dee:	0c11      	lsrs	r1, r2, #16
 8000df0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000df4:	fb00 f406 	mul.w	r4, r0, r6
 8000df8:	428c      	cmp	r4, r1
 8000dfa:	d90e      	bls.n	8000e1a <__udivmoddi4+0x27a>
 8000dfc:	eb1e 0101 	adds.w	r1, lr, r1
 8000e00:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e04:	bf2c      	ite	cs
 8000e06:	f04f 0901 	movcs.w	r9, #1
 8000e0a:	f04f 0900 	movcc.w	r9, #0
 8000e0e:	428c      	cmp	r4, r1
 8000e10:	d902      	bls.n	8000e18 <__udivmoddi4+0x278>
 8000e12:	f1b9 0f00 	cmp.w	r9, #0
 8000e16:	d02c      	beq.n	8000e72 <__udivmoddi4+0x2d2>
 8000e18:	4640      	mov	r0, r8
 8000e1a:	1b09      	subs	r1, r1, r4
 8000e1c:	b292      	uxth	r2, r2
 8000e1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e22:	fb07 1114 	mls	r1, r7, r4, r1
 8000e26:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e2a:	fb04 f106 	mul.w	r1, r4, r6
 8000e2e:	4291      	cmp	r1, r2
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x2a2>
 8000e32:	eb1e 0202 	adds.w	r2, lr, r2
 8000e36:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e3a:	d201      	bcs.n	8000e40 <__udivmoddi4+0x2a0>
 8000e3c:	4291      	cmp	r1, r2
 8000e3e:	d815      	bhi.n	8000e6c <__udivmoddi4+0x2cc>
 8000e40:	4644      	mov	r4, r8
 8000e42:	1a52      	subs	r2, r2, r1
 8000e44:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000e48:	e721      	b.n	8000c8e <__udivmoddi4+0xee>
 8000e4a:	1a86      	subs	r6, r0, r2
 8000e4c:	eb64 0303 	sbc.w	r3, r4, r3
 8000e50:	2001      	movs	r0, #1
 8000e52:	e70e      	b.n	8000c72 <__udivmoddi4+0xd2>
 8000e54:	3c02      	subs	r4, #2
 8000e56:	4472      	add	r2, lr
 8000e58:	e735      	b.n	8000cc6 <__udivmoddi4+0x126>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4472      	add	r2, lr
 8000e5e:	e6d0      	b.n	8000c02 <__udivmoddi4+0x62>
 8000e60:	44f4      	add	ip, lr
 8000e62:	3802      	subs	r0, #2
 8000e64:	e6e3      	b.n	8000c2e <__udivmoddi4+0x8e>
 8000e66:	44f4      	add	ip, lr
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e742      	b.n	8000cf2 <__udivmoddi4+0x152>
 8000e6c:	3c02      	subs	r4, #2
 8000e6e:	4472      	add	r2, lr
 8000e70:	e7e7      	b.n	8000e42 <__udivmoddi4+0x2a2>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4471      	add	r1, lr
 8000e76:	e7d0      	b.n	8000e1a <__udivmoddi4+0x27a>
 8000e78:	3b02      	subs	r3, #2
 8000e7a:	443c      	add	r4, r7
 8000e7c:	e782      	b.n	8000d84 <__udivmoddi4+0x1e4>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	443c      	add	r4, r7
 8000e82:	e76a      	b.n	8000d5a <__udivmoddi4+0x1ba>

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <canardInit>:
                void* mem_arena,
                size_t mem_arena_size,
                CanardOnTransferReception on_reception,
                CanardShouldAcceptTransfer should_accept,
                void* user_reference)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	603b      	str	r3, [r7, #0]
     * If your application fails here, make sure it's not built in 64-bit mode.
     * Refer to the design documentation for more info.
     */
    CANARD_ASSERT(CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE >= 5);

    memset(out_ins, 0, sizeof(*out_ins));
 8000e96:	222c      	movs	r2, #44	@ 0x2c
 8000e98:	2100      	movs	r1, #0
 8000e9a:	68f8      	ldr	r0, [r7, #12]
 8000e9c:	f009 fe70 	bl	800ab80 <memset>

    out_ins->node_id = CANARD_BROADCAST_NODE_ID;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
    out_ins->on_reception = on_reception;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	683a      	ldr	r2, [r7, #0]
 8000eaa:	609a      	str	r2, [r3, #8]
    out_ins->should_accept = should_accept;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	6a3a      	ldr	r2, [r7, #32]
 8000eb0:	605a      	str	r2, [r3, #4]
    out_ins->rx_states = NULL;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
    out_ins->tx_queue = NULL;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	625a      	str	r2, [r3, #36]	@ 0x24
    out_ins->user_reference = user_reference;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ec2:	629a      	str	r2, [r3, #40]	@ 0x28
#if CANARD_ENABLE_TAO_OPTION
    out_ins->tao_disabled = false;
#endif
    size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	095b      	lsrs	r3, r3, #5
 8000ec8:	617b      	str	r3, [r7, #20]
    if (pool_capacity > 0xFFFFU)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ed0:	d302      	bcc.n	8000ed8 <canardInit+0x50>
    {
        pool_capacity = 0xFFFFU;
 8000ed2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ed6:	617b      	str	r3, [r7, #20]
    }

    initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	330c      	adds	r3, #12
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	b292      	uxth	r2, r2
 8000ee0:	68b9      	ldr	r1, [r7, #8]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 fedf 	bl	8002ca6 <initPoolAllocator>
}
 8000ee8:	bf00      	nop
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <canardSetLocalNodeID>:
    CANARD_ASSERT(ins != NULL);
    return ins->user_reference;
}

void canardSetLocalNodeID(CanardInstance* ins, uint8_t self_node_id)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);

    if ((ins->node_id == CANARD_BROADCAST_NODE_ID) &&
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d109      	bne.n	8000f18 <canardSetLocalNodeID+0x28>
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d006      	beq.n	8000f18 <canardSetLocalNodeID+0x28>
        (self_node_id >= CANARD_MIN_NODE_ID) &&
        (self_node_id <= CANARD_MAX_NODE_ID))
 8000f0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
        (self_node_id >= CANARD_MIN_NODE_ID) &&
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	db02      	blt.n	8000f18 <canardSetLocalNodeID+0x28>
    {
        ins->node_id = self_node_id;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	78fa      	ldrb	r2, [r7, #3]
 8000f16:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        CANARD_ASSERT(false);
    }
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <canardGetLocalNodeID>:

uint8_t canardGetLocalNodeID(const CanardInstance* ins)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    return ins->node_id;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <canardBroadcast>:
#endif
#if CANARD_ENABLE_CANFD
                        ,bool canfd
#endif
)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08e      	sub	sp, #56	@ 0x38
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	e9c7 2300 	strd	r2, r3, [r7]
    // create transfer object
    CanardTxTransfer transfer_object = {
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	2228      	movs	r2, #40	@ 0x28
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f009 fe15 	bl	800ab80 <memset>
 8000f56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f5a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000f5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000f62:	843b      	strh	r3, [r7, #32]
 8000f64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f68:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000f6c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000f70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8000f78:	863b      	strh	r3, [r7, #48]	@ 0x30
#if CANARD_ENABLE_CANFD
        .canfd = canfd,
#endif
    };

    return canardBroadcastObj(ins, &transfer_object);
 8000f7a:	f107 0310 	add.w	r3, r7, #16
 8000f7e:	4619      	mov	r1, r3
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f000 f805 	bl	8000f90 <canardBroadcastObj>
 8000f86:	4603      	mov	r3, r0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3738      	adds	r7, #56	@ 0x38
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <canardBroadcastObj>:

int16_t canardBroadcastObj(CanardInstance* ins, CanardTxTransfer* transfer_object)
{
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
    if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d106      	bne.n	8000fb0 <canardBroadcastObj+0x20>
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	8c1b      	ldrh	r3, [r3, #32]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d002      	beq.n	8000fb0 <canardBroadcastObj+0x20>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000faa:	f06f 0301 	mvn.w	r3, #1
 8000fae:	e070      	b.n	8001092 <canardBroadcastObj+0x102>
    }
    if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	7e1b      	ldrb	r3, [r3, #24]
 8000fb4:	2b1f      	cmp	r3, #31
 8000fb6:	d902      	bls.n	8000fbe <canardBroadcastObj+0x2e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000fb8:	f06f 0301 	mvn.w	r3, #1
 8000fbc:	e069      	b.n	8001092 <canardBroadcastObj+0x102>
    }

    uint32_t can_id = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
    uint16_t crc = 0xFFFFU;
 8000fc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fc6:	827b      	strh	r3, [r7, #18]

    if (canardGetLocalNodeID(ins) == 0)
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ffab 	bl	8000f24 <canardGetLocalNodeID>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d138      	bne.n	8001046 <canardBroadcastObj+0xb6>
    {
        if (transfer_object->payload_len > 7)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	8c1b      	ldrh	r3, [r3, #32]
 8000fd8:	2b07      	cmp	r3, #7
 8000fda:	d902      	bls.n	8000fe2 <canardBroadcastObj+0x52>
        {
            return -CANARD_ERROR_NODE_ID_NOT_SET;
 8000fdc:	f06f 0303 	mvn.w	r3, #3
 8000fe0:	e057      	b.n	8001092 <canardBroadcastObj+0x102>
        }

        static const uint16_t DTIDMask = (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;

        if ((transfer_object->data_type_id & DTIDMask) != transfer_object->data_type_id)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	8a1a      	ldrh	r2, [r3, #16]
 8000fe6:	4b2d      	ldr	r3, [pc, #180]	@ (800109c <canardBroadcastObj+0x10c>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	4013      	ands	r3, r2
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	8a1b      	ldrh	r3, [r3, #16]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d002      	beq.n	8000ffc <canardBroadcastObj+0x6c>
        {
            return -CANARD_ERROR_INVALID_ARGUMENT;
 8000ff6:	f06f 0301 	mvn.w	r3, #1
 8000ffa:	e04a      	b.n	8001092 <canardBroadcastObj+0x102>
        }

        // anonymous transfer, random discriminator
        const uint16_t discriminator = (uint16_t)((crcAdd(0xFFFFU, transfer_object->payload, transfer_object->payload_len)) & 0x7FFEU);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	69d9      	ldr	r1, [r3, #28]
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	8c1b      	ldrh	r3, [r3, #32]
 8001004:	461a      	mov	r2, r3
 8001006:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800100a:	f001 fe2f 	bl	8002c6c <crcAdd>
 800100e:	4603      	mov	r3, r0
 8001010:	461a      	mov	r2, r3
 8001012:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 8001016:	4013      	ands	r3, r2
 8001018:	823b      	strh	r3, [r7, #16]
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	7e1b      	ldrb	r3, [r3, #24]
 800101e:	061a      	lsls	r2, r3, #24
 8001020:	8a3b      	ldrh	r3, [r7, #16]
 8001022:	025b      	lsls	r3, r3, #9
 8001024:	431a      	orrs	r2, r3
                 ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	8a19      	ldrh	r1, [r3, #16]
 800102a:	4b1c      	ldr	r3, [pc, #112]	@ (800109c <canardBroadcastObj+0x10c>)
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	400b      	ands	r3, r1
 8001030:	b29b      	uxth	r3, r3
 8001032:	021b      	lsls	r3, r3, #8
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8001034:	ea42 0403 	orr.w	r4, r2, r3
                 ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ff73 	bl	8000f24 <canardGetLocalNodeID>
 800103e:	4603      	mov	r3, r0
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8001040:	4323      	orrs	r3, r4
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	e012      	b.n	800106c <canardBroadcastObj+0xdc>
    }
    else
    {
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	7e1b      	ldrb	r3, [r3, #24]
 800104a:	061a      	lsls	r2, r3, #24
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	8a1b      	ldrh	r3, [r3, #16]
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	ea42 0403 	orr.w	r4, r2, r3
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ff64 	bl	8000f24 <canardGetLocalNodeID>
 800105c:	4603      	mov	r3, r0
 800105e:	4323      	orrs	r3, r4
 8001060:	617b      	str	r3, [r7, #20]
        crc = calculateCRC(transfer_object);
 8001062:	6838      	ldr	r0, [r7, #0]
 8001064:	f000 f84c 	bl	8001100 <calculateCRC>
 8001068:	4603      	mov	r3, r0
 800106a:	827b      	strh	r3, [r7, #18]
    }

    const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 800106c:	8a7a      	ldrh	r2, [r7, #18]
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	6979      	ldr	r1, [r7, #20]
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 ffe6 	bl	8002044 <enqueueTxFrames>
 8001078:	4603      	mov	r3, r0
 800107a:	81fb      	strh	r3, [r7, #14]

    if (result > 0) {
 800107c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001080:	2b00      	cmp	r3, #0
 8001082:	dd04      	ble.n	800108e <canardBroadcastObj+0xfe>
        incrementTransferID(transfer_object->inout_transfer_id);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	4618      	mov	r0, r3
 800108a:	f000 ff66 	bl	8001f5a <incrementTransferID>
    }

    return result;
 800108e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001092:	4618      	mov	r0, r3
 8001094:	371c      	adds	r7, #28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd90      	pop	{r4, r7, pc}
 800109a:	bf00      	nop
 800109c:	0800cada 	.word	0x0800cada

080010a0 <canardBufferFromIdx>:
  CanardBufferBlock and CanartRxState structures to have the same size
  on 32 bit and 64 bit platforms, which allows for easier testing in
  simulator environments
 */
CANARD_INTERNAL CanardBufferBlock *canardBufferFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardBufferBlock *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardBufferBlock *)idx;
 80010aa:	683b      	ldr	r3, [r7, #0]
#endif
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <canardBufferToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardBufferToIdx(CanardPoolAllocator* allocator, const CanardBufferBlock *buf)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)buf - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)buf;
 80010c2:	683b      	ldr	r3, [r7, #0]
#endif
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <canardRxFromIdx>:

CANARD_INTERNAL CanardRxState *canardRxFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardRxState *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardRxState *)idx;
 80010da:	683b      	ldr	r3, [r7, #0]
#endif
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <canardRxToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardRxToIdx(CanardPoolAllocator* allocator, const CanardRxState *rx)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)rx - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)rx;
 80010f2:	683b      	ldr	r3, [r7, #0]
#endif
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <calculateCRC>:

CANARD_INTERNAL uint16_t calculateCRC(const CanardTxTransfer* transfer_object)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
    uint16_t crc = 0xFFFFU;
 8001108:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800110c:	81fb      	strh	r3, [r7, #14]
#if CANARD_ENABLE_CANFD
    if ((transfer_object->payload_len > 7 && !transfer_object->canfd) ||
        (transfer_object->payload_len > 63 && transfer_object->canfd))
#else
    if (transfer_object->payload_len > 7)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	8c1b      	ldrh	r3, [r3, #32]
 8001112:	2b07      	cmp	r3, #7
 8001114:	d913      	bls.n	800113e <calculateCRC+0x3e>
#endif
    {
        crc = crcAddSignature(crc, transfer_object->data_type_signature);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800111c:	89f9      	ldrh	r1, [r7, #14]
 800111e:	4608      	mov	r0, r1
 8001120:	f001 fd75 	bl	8002c0e <crcAddSignature>
 8001124:	4603      	mov	r3, r0
 8001126:	81fb      	strh	r3, [r7, #14]
        crc = crcAdd(crc, transfer_object->payload, transfer_object->payload_len);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69d9      	ldr	r1, [r3, #28]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	8c1b      	ldrh	r3, [r3, #32]
 8001130:	461a      	mov	r2, r3
 8001132:	89fb      	ldrh	r3, [r7, #14]
 8001134:	4618      	mov	r0, r3
 8001136:	f001 fd99 	bl	8002c6c <crcAdd>
 800113a:	4603      	mov	r3, r0
 800113c:	81fb      	strh	r3, [r7, #14]
                crc = crcAddByte(crc, empty);
            }
        }
#endif
    }
    return crc;
 800113e:	89fb      	ldrh	r3, [r7, #14]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <canardRequestOrRespond>:
#endif
#if CANARD_ENABLE_CANFD
                               ,bool canfd
#endif
)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08e      	sub	sp, #56	@ 0x38
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	e9c7 2300 	strd	r2, r3, [r7]
 8001154:	460b      	mov	r3, r1
 8001156:	72fb      	strb	r3, [r7, #11]
    CanardTxTransfer transfer_object = {
        .data_type_signature = data_type_signature,
        .data_type_id = data_type_id,
        .inout_transfer_id = inout_transfer_id,
        .priority = priority,
        .transfer_type = kind == CanardRequest ? CanardTransferTypeRequest : CanardTransferTypeResponse,
 8001158:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800115c:	2b01      	cmp	r3, #1
 800115e:	bf0c      	ite	eq
 8001160:	2301      	moveq	r3, #1
 8001162:	2300      	movne	r3, #0
 8001164:	b2db      	uxtb	r3, r3
    CanardTxTransfer transfer_object = {
 8001166:	743b      	strb	r3, [r7, #16]
 8001168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800116c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001170:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001174:	b29b      	uxth	r3, r3
 8001176:	843b      	strh	r3, [r7, #32]
 8001178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800117a:	627b      	str	r3, [r7, #36]	@ 0x24
 800117c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001180:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8001184:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001186:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001188:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800118c:	863b      	strh	r3, [r7, #48]	@ 0x30
#endif
#if CANARD_ENABLE_CANFD
        .canfd = canfd,
#endif
    };
    return canardRequestOrRespondObj(ins, destination_node_id, &transfer_object);
 800118e:	f107 0210 	add.w	r2, r7, #16
 8001192:	7afb      	ldrb	r3, [r7, #11]
 8001194:	4619      	mov	r1, r3
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f000 f805 	bl	80011a6 <canardRequestOrRespondObj>
 800119c:	4603      	mov	r3, r0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3738      	adds	r7, #56	@ 0x38
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <canardRequestOrRespondObj>:

int16_t canardRequestOrRespondObj(CanardInstance* ins, uint8_t destination_node_id, CanardTxTransfer* transfer_object)
{
 80011a6:	b590      	push	{r4, r7, lr}
 80011a8:	b087      	sub	sp, #28
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	60f8      	str	r0, [r7, #12]
 80011ae:	460b      	mov	r3, r1
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	72fb      	strb	r3, [r7, #11]
    if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d106      	bne.n	80011ca <canardRequestOrRespondObj+0x24>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	8c1b      	ldrh	r3, [r3, #32]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d002      	beq.n	80011ca <canardRequestOrRespondObj+0x24>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80011c4:	f06f 0301 	mvn.w	r3, #1
 80011c8:	e042      	b.n	8001250 <canardRequestOrRespondObj+0xaa>
    }
    if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	7e1b      	ldrb	r3, [r3, #24]
 80011ce:	2b1f      	cmp	r3, #31
 80011d0:	d902      	bls.n	80011d8 <canardRequestOrRespondObj+0x32>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80011d2:	f06f 0301 	mvn.w	r3, #1
 80011d6:	e03b      	b.n	8001250 <canardRequestOrRespondObj+0xaa>
    }
    if (canardGetLocalNodeID(ins) == 0)
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f7ff fea3 	bl	8000f24 <canardGetLocalNodeID>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d102      	bne.n	80011ea <canardRequestOrRespondObj+0x44>
    {
        return -CANARD_ERROR_NODE_ID_NOT_SET;
 80011e4:	f06f 0303 	mvn.w	r3, #3
 80011e8:	e032      	b.n	8001250 <canardRequestOrRespondObj+0xaa>
    }

    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	7e1b      	ldrb	r3, [r3, #24]
 80011ee:	061a      	lsls	r2, r3, #24
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	8a1b      	ldrh	r3, [r3, #16]
 80011f4:	041b      	lsls	r3, r3, #16
 80011f6:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	03db      	lsls	r3, r3, #15
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 80011fe:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 8001200:	7afb      	ldrb	r3, [r7, #11]
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	ea42 0403 	orr.w	r4, r2, r3
                            (1U << 7U) | (uint32_t) canardGetLocalNodeID(ins);
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f7ff fe8b 	bl	8000f24 <canardGetLocalNodeID>
 800120e:	4603      	mov	r3, r0
 8001210:	4323      	orrs	r3, r4
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8001212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001216:	617b      	str	r3, [r7, #20]

    uint16_t crc = calculateCRC(transfer_object);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff71 	bl	8001100 <calculateCRC>
 800121e:	4603      	mov	r3, r0
 8001220:	827b      	strh	r3, [r7, #18]


    const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 8001222:	8a7a      	ldrh	r2, [r7, #18]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6979      	ldr	r1, [r7, #20]
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f000 ff0b 	bl	8002044 <enqueueTxFrames>
 800122e:	4603      	mov	r3, r0
 8001230:	823b      	strh	r3, [r7, #16]

    if (result > 0 && transfer_object->transfer_type == CanardTransferTypeRequest)                      // Response Transfer ID must not be altered
 8001232:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001236:	2b00      	cmp	r3, #0
 8001238:	dd08      	ble.n	800124c <canardRequestOrRespondObj+0xa6>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d104      	bne.n	800124c <canardRequestOrRespondObj+0xa6>
    {
        incrementTransferID(transfer_object->inout_transfer_id);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	4618      	mov	r0, r3
 8001248:	f000 fe87 	bl	8001f5a <incrementTransferID>
    }

    return result;
 800124c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
}
 8001250:	4618      	mov	r0, r3
 8001252:	371c      	adds	r7, #28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd90      	pop	{r4, r7, pc}

08001258 <canardPeekTxQueue>:

CanardCANFrame* canardPeekTxQueue(const CanardInstance* ins)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
    if (ins->tx_queue == NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <canardPeekTxQueue+0x14>
    {
        return NULL;
 8001268:	2300      	movs	r3, #0
 800126a:	e002      	b.n	8001272 <canardPeekTxQueue+0x1a>
    }
    return &ins->tx_queue->frame;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001270:	3304      	adds	r3, #4
}
 8001272:	4618      	mov	r0, r3
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <canardPopTxQueue>:

void canardPopTxQueue(CanardInstance* ins)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b084      	sub	sp, #16
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = ins->tx_queue;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800128a:	60fb      	str	r3, [r7, #12]
    ins->tx_queue = item->next;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	625a      	str	r2, [r3, #36]	@ 0x24
    freeBlock(&ins->allocator, item);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	330c      	adds	r3, #12
 8001298:	68f9      	ldr	r1, [r7, #12]
 800129a:	4618      	mov	r0, r3
 800129c:	f001 fd63 	bl	8002d66 <freeBlock>
}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <canardHandleRxFrame>:

int16_t canardHandleRxFrame(CanardInstance* ins, const CanardCANFrame* frame, uint64_t timestamp_usec)
{
 80012a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012ac:	b09f      	sub	sp, #124	@ 0x7c
 80012ae:	af02      	add	r7, sp, #8
 80012b0:	60f8      	str	r0, [r7, #12]
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	e9c7 2300 	strd	r2, r3, [r7]
    const CanardTransferType transfer_type = extractTransferType(frame->id);
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f001 f8c8 	bl	8002452 <extractTransferType>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 80012c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d007      	beq.n	80012e0 <canardHandleRxFrame+0x38>
                                        (uint8_t)CANARD_BROADCAST_NODE_ID :
                                        DEST_ID_FROM_ID(frame->id);
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	b2db      	uxtb	r3, r3
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 80012d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	e000      	b.n	80012e2 <canardHandleRxFrame+0x3a>
 80012e0:	2300      	movs	r3, #0
 80012e2:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

    // TODO: This function should maintain statistics of transfer errors and such.

    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	da0f      	bge.n	800130e <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d109      	bne.n	800130e <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 8001302:	2b00      	cmp	r3, #0
 8001304:	d103      	bne.n	800130e <canardHandleRxFrame+0x66>
        (frame->data_len < 1))
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	7b1b      	ldrb	r3, [r3, #12]
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 800130a:	2b00      	cmp	r3, #0
 800130c:	d102      	bne.n	8001314 <canardHandleRxFrame+0x6c>
    {
        return -CANARD_ERROR_RX_INCOMPATIBLE_PACKET;
 800130e:	f06f 0309 	mvn.w	r3, #9
 8001312:	e361      	b.n	80019d8 <canardHandleRxFrame+0x730>
    }

    if (transfer_type != CanardTransferTypeBroadcast &&
 8001314:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001318:	2b02      	cmp	r3, #2
 800131a:	d00b      	beq.n	8001334 <canardHandleRxFrame+0x8c>
        destination_node_id != canardGetLocalNodeID(ins))
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f7ff fe01 	bl	8000f24 <canardGetLocalNodeID>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
    if (transfer_type != CanardTransferTypeBroadcast &&
 8001326:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800132a:	4293      	cmp	r3, r2
 800132c:	d002      	beq.n	8001334 <canardHandleRxFrame+0x8c>
    {
        return -CANARD_ERROR_RX_WRONG_ADDRESS;
 800132e:	f06f 030a 	mvn.w	r3, #10
 8001332:	e351      	b.n	80019d8 <canardHandleRxFrame+0x730>
    }

    const uint8_t priority = PRIORITY_FROM_ID(frame->id);
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	0e1b      	lsrs	r3, r3, #24
 800133a:	b2db      	uxtb	r3, r3
 800133c:	f003 031f 	and.w	r3, r3, #31
 8001340:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    const uint8_t source_node_id = SOURCE_ID_FROM_ID(frame->id);
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800134e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    const uint16_t data_type_id = extractDataType(frame->id);
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f001 f85b 	bl	8002412 <extractDataType>
 800135c:	4603      	mov	r3, r0
 800135e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    const uint32_t transfer_descriptor =
            MAKE_TRANSFER_DESCRIPTOR(data_type_id, transfer_type, source_node_id, destination_node_id);
 8001362:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8001366:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800136a:	041b      	lsls	r3, r3, #16
 800136c:	431a      	orrs	r2, r3
 800136e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8001372:	049b      	lsls	r3, r3, #18
 8001374:	431a      	orrs	r2, r3
 8001376:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800137a:	065b      	lsls	r3, r3, #25
    const uint32_t transfer_descriptor =
 800137c:	4313      	orrs	r3, r2
 800137e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    const uint8_t tail_byte = frame->data[frame->data_len - 1];
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	7b1b      	ldrb	r3, [r3, #12]
 8001384:	3b01      	subs	r3, #1
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	4413      	add	r3, r2
 800138a:	791b      	ldrb	r3, [r3, #4]
 800138c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

    uint64_t data_type_signature = 0;
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    CanardRxState* rx_state = NULL;
 800139c:	2300      	movs	r3, #0
 800139e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    if (IS_START_OF_TRANSFER(tail_byte))
 80013a0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80013a4:	09db      	lsrs	r3, r3, #7
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d01e      	beq.n	80013ee <canardHandleRxFrame+0x146>
    {

        if (ins->should_accept(ins, &data_type_signature, data_type_id, transfer_type, source_node_id))
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	685e      	ldr	r6, [r3, #4]
 80013b4:	f897 0057 	ldrb.w	r0, [r7, #87]	@ 0x57
 80013b8:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 80013bc:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80013c0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	4603      	mov	r3, r0
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	47b0      	blx	r6
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00a      	beq.n	80013e8 <canardHandleRxFrame+0x140>
        {
            rx_state = traverseRxStates(ins, transfer_descriptor);
 80013d2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	f001 f860 	bl	800249a <traverseRxStates>
 80013da:	66f8      	str	r0, [r7, #108]	@ 0x6c

            if(rx_state == NULL)
 80013dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d110      	bne.n	8001404 <canardHandleRxFrame+0x15c>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 80013e2:	f06f 0302 	mvn.w	r3, #2
 80013e6:	e2f7      	b.n	80019d8 <canardHandleRxFrame+0x730>
            }
        }
        else
        {
            return -CANARD_ERROR_RX_NOT_WANTED;
 80013e8:	f06f 030b 	mvn.w	r3, #11
 80013ec:	e2f4      	b.n	80019d8 <canardHandleRxFrame+0x730>
        }
    }
    else
    {
        rx_state = findRxState(ins, transfer_descriptor);
 80013ee:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f001 f881 	bl	80024f8 <findRxState>
 80013f6:	66f8      	str	r0, [r7, #108]	@ 0x6c

        if (rx_state == NULL)
 80013f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d102      	bne.n	8001404 <canardHandleRxFrame+0x15c>
        {
            return -CANARD_ERROR_RX_MISSED_START;
 80013fe:	f06f 030c 	mvn.w	r3, #12
 8001402:	e2e9      	b.n	80019d8 <canardHandleRxFrame+0x730>
    }

    CANARD_ASSERT(rx_state != NULL);    // All paths that lead to NULL should be terminated with return above

    // Resolving the state flags:
    const bool not_initialized = rx_state->timestamp_usec == 0;
 8001404:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001406:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800140a:	4313      	orrs	r3, r2
 800140c:	2b00      	cmp	r3, #0
 800140e:	bf0c      	ite	eq
 8001410:	2301      	moveq	r3, #1
 8001412:	2300      	movne	r3, #0
 8001414:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
    const bool tid_timed_out = (timestamp_usec - rx_state->timestamp_usec) > TRANSFER_TIMEOUT_USEC;
 8001418:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800141a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800141e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001422:	ebb0 0802 	subs.w	r8, r0, r2
 8001426:	eb61 0903 	sbc.w	r9, r1, r3
 800142a:	4ba9      	ldr	r3, [pc, #676]	@ (80016d0 <canardHandleRxFrame+0x428>)
 800142c:	4598      	cmp	r8, r3
 800142e:	f179 0300 	sbcs.w	r3, r9, #0
 8001432:	bf2c      	ite	cs
 8001434:	2301      	movcs	r3, #1
 8001436:	2300      	movcc	r3, #0
 8001438:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
    const bool same_iface = frame->iface_id == rx_state->iface_id;
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	7b5a      	ldrb	r2, [r3, #13]
 8001440:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001442:	7e9b      	ldrb	r3, [r3, #26]
 8001444:	429a      	cmp	r2, r3
 8001446:	bf0c      	ite	eq
 8001448:	2301      	moveq	r3, #1
 800144a:	2300      	movne	r3, #0
 800144c:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
    const bool first_frame = IS_START_OF_TRANSFER(tail_byte);
 8001450:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001454:	09db      	lsrs	r3, r3, #7
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b00      	cmp	r3, #0
 800145e:	bf14      	ite	ne
 8001460:	2301      	movne	r3, #1
 8001462:	2300      	moveq	r3, #0
 8001464:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    const bool not_previous_tid =
        computeTransferIDForwardDistance((uint8_t) rx_state->transfer_id, TRANSFER_ID_FROM_TAIL_BYTE(tail_byte)) > 1;
 8001468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800146a:	7ddb      	ldrb	r3, [r3, #23]
 800146c:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8001470:	b2db      	uxtb	r3, r3
 8001472:	461a      	mov	r2, r3
 8001474:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001478:	f003 031f 	and.w	r3, r3, #31
 800147c:	b2db      	uxtb	r3, r3
 800147e:	4619      	mov	r1, r3
 8001480:	4610      	mov	r0, r2
 8001482:	f000 fd4b 	bl	8001f1c <computeTransferIDForwardDistance>
 8001486:	4603      	mov	r3, r0
    const bool not_previous_tid =
 8001488:	2b01      	cmp	r3, #1
 800148a:	bfcc      	ite	gt
 800148c:	2301      	movgt	r3, #1
 800148e:	2300      	movle	r3, #0
 8001490:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    const bool iface_switch_allowed = (timestamp_usec - rx_state->timestamp_usec) > IFACE_SWITCH_DELAY_USEC;
 8001494:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001496:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800149a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800149e:	1a84      	subs	r4, r0, r2
 80014a0:	eb61 0503 	sbc.w	r5, r1, r3
 80014a4:	4b8b      	ldr	r3, [pc, #556]	@ (80016d4 <canardHandleRxFrame+0x42c>)
 80014a6:	429c      	cmp	r4, r3
 80014a8:	f175 0300 	sbcs.w	r3, r5, #0
 80014ac:	bf2c      	ite	cs
 80014ae:	2301      	movcs	r3, #1
 80014b0:	2300      	movcc	r3, #0
 80014b2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    const bool non_wrapped_tid = computeTransferIDForwardDistance(TRANSFER_ID_FROM_TAIL_BYTE(tail_byte), (uint8_t) rx_state->transfer_id) < (1 << (TRANSFER_ID_BIT_LEN-1));
 80014b6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80014ba:	f003 031f 	and.w	r3, r3, #31
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014c2:	7ddb      	ldrb	r3, [r3, #23]
 80014c4:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	4619      	mov	r1, r3
 80014cc:	4610      	mov	r0, r2
 80014ce:	f000 fd25 	bl	8001f1c <computeTransferIDForwardDistance>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	bfd4      	ite	le
 80014d8:	2301      	movle	r3, #1
 80014da:	2300      	movgt	r3, #0
 80014dc:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    const bool incomplete_frame = rx_state->buffer_blocks != CANARD_BUFFER_IDX_NONE;
 80014e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	bf14      	ite	ne
 80014e8:	2301      	movne	r3, #1
 80014ea:	2300      	moveq	r3, #0
 80014ec:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    const bool need_restart =
            (not_initialized) ||
            (tid_timed_out) ||
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 80014f0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d11f      	bne.n	8001538 <canardHandleRxFrame+0x290>
            (not_initialized) ||
 80014f8:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d11b      	bne.n	8001538 <canardHandleRxFrame+0x290>
            (tid_timed_out) ||
 8001500:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00b      	beq.n	8001520 <canardHandleRxFrame+0x278>
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 8001508:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800150c:	2b00      	cmp	r3, #0
 800150e:	d007      	beq.n	8001520 <canardHandleRxFrame+0x278>
 8001510:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001514:	2b00      	cmp	r3, #0
 8001516:	d10f      	bne.n	8001538 <canardHandleRxFrame+0x290>
 8001518:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10b      	bne.n	8001538 <canardHandleRxFrame+0x290>
 8001520:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001524:	2b00      	cmp	r3, #0
 8001526:	d009      	beq.n	800153c <canardHandleRxFrame+0x294>
            (iface_switch_allowed && first_frame && non_wrapped_tid);
 8001528:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800152c:	2b00      	cmp	r3, #0
 800152e:	d005      	beq.n	800153c <canardHandleRxFrame+0x294>
 8001530:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <canardHandleRxFrame+0x294>
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <canardHandleRxFrame+0x296>
 800153c:	2300      	movs	r3, #0
    const bool need_restart =
 800153e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8001542:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

    if (need_restart)
 800154e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001552:	2b00      	cmp	r3, #0
 8001554:	d02f      	beq.n	80015b6 <canardHandleRxFrame+0x30e>
    {
        rx_state->transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte);
 8001556:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800155a:	f003 031f 	and.w	r3, r3, #31
 800155e:	b2d9      	uxtb	r1, r3
 8001560:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001562:	7dd3      	ldrb	r3, [r2, #23]
 8001564:	f361 0386 	bfi	r3, r1, #2, #5
 8001568:	75d3      	strb	r3, [r2, #23]
        rx_state->next_toggle = 0;
 800156a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800156c:	7dd3      	ldrb	r3, [r2, #23]
 800156e:	f36f 13c7 	bfc	r3, #7, #1
 8001572:	75d3      	strb	r3, [r2, #23]
        releaseStatePayload(ins, rx_state);
 8001574:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f001 f828 	bl	80025cc <releaseStatePayload>
        rx_state->iface_id = frame->iface_id;
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	7b5a      	ldrb	r2, [r3, #13]
 8001580:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001582:	769a      	strb	r2, [r3, #26]
        if (!IS_START_OF_TRANSFER(tail_byte))
 8001584:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001588:	09db      	lsrs	r3, r3, #7
 800158a:	b2db      	uxtb	r3, r3
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b00      	cmp	r3, #0
 8001592:	d110      	bne.n	80015b6 <canardHandleRxFrame+0x30e>
        {
            rx_state->transfer_id++;
 8001594:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001596:	7ddb      	ldrb	r3, [r3, #23]
 8001598:	f3c3 0384 	ubfx	r3, r3, #2, #5
 800159c:	b2db      	uxtb	r3, r3
 800159e:	3301      	adds	r3, #1
 80015a0:	f003 031f 	and.w	r3, r3, #31
 80015a4:	b2d9      	uxtb	r1, r3
 80015a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015a8:	7dd3      	ldrb	r3, [r2, #23]
 80015aa:	f361 0386 	bfi	r3, r1, #2, #5
 80015ae:	75d3      	strb	r3, [r2, #23]
            return -CANARD_ERROR_RX_MISSED_START;
 80015b0:	f06f 030c 	mvn.w	r3, #12
 80015b4:	e210      	b.n	80019d8 <canardHandleRxFrame+0x730>
        }
    }

    if (frame->iface_id != rx_state->iface_id)
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	7b5a      	ldrb	r2, [r3, #13]
 80015ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015bc:	7e9b      	ldrb	r3, [r3, #26]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d001      	beq.n	80015c6 <canardHandleRxFrame+0x31e>
    {
        // drop frame if coming from unexpected interface
        return CANARD_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e208      	b.n	80019d8 <canardHandleRxFrame+0x730>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && IS_END_OF_TRANSFER(tail_byte)) // single frame transfer
 80015c6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80015ca:	09db      	lsrs	r3, r3, #7
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d041      	beq.n	800165a <canardHandleRxFrame+0x3b2>
 80015d6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80015da:	099b      	lsrs	r3, r3, #6
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d039      	beq.n	800165a <canardHandleRxFrame+0x3b2>
    {
        rx_state->timestamp_usec = timestamp_usec;
 80015e6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80015e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
        CanardRxTransfer rx_transfer = {
 80015f0:	f107 0310 	add.w	r3, r7, #16
 80015f4:	2220      	movs	r2, #32
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f009 fac1 	bl	800ab80 <memset>
 80015fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001602:	e9c7 2304 	strd	r2, r3, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = frame->data,
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	3304      	adds	r3, #4
        CanardRxTransfer rx_transfer = {
 800160a:	61bb      	str	r3, [r7, #24]
            .payload_len = (uint8_t)(frame->data_len - 1U),
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	7b1b      	ldrb	r3, [r3, #12]
 8001610:	3b01      	subs	r3, #1
 8001612:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8001614:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001616:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800161a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800161c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001620:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 8001624:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001628:	f003 031f 	and.w	r3, r3, #31
 800162c:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 800162e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8001632:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001636:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800163a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800163e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#elif CANARD_ENABLE_TAO_OPTION
            .tao = !ins->tao_disabled
#endif
        };

        ins->on_reception(ins, &rx_transfer);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f107 0210 	add.w	r2, r7, #16
 800164a:	4611      	mov	r1, r2
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	4798      	blx	r3

        prepareForNextTransfer(rx_state);
 8001650:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001652:	f000 febc 	bl	80023ce <prepareForNextTransfer>
        return CANARD_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	e1be      	b.n	80019d8 <canardHandleRxFrame+0x730>
    }

    if (TOGGLE_BIT(tail_byte) != rx_state->next_toggle)
 800165a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800165e:	095b      	lsrs	r3, r3, #5
 8001660:	b2db      	uxtb	r3, r3
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	bf14      	ite	ne
 800166a:	2301      	movne	r3, #1
 800166c:	2300      	moveq	r3, #0
 800166e:	b2db      	uxtb	r3, r3
 8001670:	461a      	mov	r2, r3
 8001672:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001674:	7ddb      	ldrb	r3, [r3, #23]
 8001676:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800167a:	b2db      	uxtb	r3, r3
 800167c:	429a      	cmp	r2, r3
 800167e:	d002      	beq.n	8001686 <canardHandleRxFrame+0x3de>
    {
        return -CANARD_ERROR_RX_WRONG_TOGGLE;
 8001680:	f06f 030d 	mvn.w	r3, #13
 8001684:	e1a8      	b.n	80019d8 <canardHandleRxFrame+0x730>
    }

    if (TRANSFER_ID_FROM_TAIL_BYTE(tail_byte) != rx_state->transfer_id)
 8001686:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800168a:	f003 031f 	and.w	r3, r3, #31
 800168e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001690:	7dd2      	ldrb	r2, [r2, #23]
 8001692:	f3c2 0284 	ubfx	r2, r2, #2, #5
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	4293      	cmp	r3, r2
 800169a:	d002      	beq.n	80016a2 <canardHandleRxFrame+0x3fa>
    {
        return -CANARD_ERROR_RX_UNEXPECTED_TID;
 800169c:	f06f 030e 	mvn.w	r3, #14
 80016a0:	e19a      	b.n	80019d8 <canardHandleRxFrame+0x730>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))      // Beginning of multi frame transfer
 80016a2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80016a6:	09db      	lsrs	r3, r3, #7
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d060      	beq.n	8001774 <canardHandleRxFrame+0x4cc>
 80016b2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80016b6:	099b      	lsrs	r3, r3, #6
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d158      	bne.n	8001774 <canardHandleRxFrame+0x4cc>
    {
        if (frame->data_len <= 3)
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	7b1b      	ldrb	r3, [r3, #12]
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d806      	bhi.n	80016d8 <canardHandleRxFrame+0x430>
        {
            return -CANARD_ERROR_RX_SHORT_FRAME;
 80016ca:	f06f 030f 	mvn.w	r3, #15
 80016ce:	e183      	b.n	80019d8 <canardHandleRxFrame+0x730>
 80016d0:	001e8481 	.word	0x001e8481
 80016d4:	000f4241 	.word	0x000f4241
        }

        // take off the crc and store the payload
        rx_state->timestamp_usec = timestamp_usec;
 80016d8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80016da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016de:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rx_state->payload_len = 0;
 80016e2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80016e4:	8ad3      	ldrh	r3, [r2, #22]
 80016e6:	f36f 0309 	bfc	r3, #0, #10
 80016ea:	82d3      	strh	r3, [r2, #22]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f103 000c 	add.w	r0, r3, #12
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	3304      	adds	r3, #4
 80016f6:	1c9a      	adds	r2, r3, #2
                                                 (uint8_t) (frame->data_len - 3));
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 80016fc:	3b03      	subs	r3, #3
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001702:	f000 ff97 	bl	8002634 <bufferBlockPushBytes>
 8001706:	4603      	mov	r3, r0
 8001708:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        if (ret < 0)
 800170c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8001710:	2b00      	cmp	r3, #0
 8001712:	da09      	bge.n	8001728 <canardHandleRxFrame+0x480>
        {
            releaseStatePayload(ins, rx_state);
 8001714:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f000 ff58 	bl	80025cc <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 800171c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800171e:	f000 fe56 	bl	80023ce <prepareForNextTransfer>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8001722:	f06f 0302 	mvn.w	r3, #2
 8001726:	e157      	b.n	80019d8 <canardHandleRxFrame+0x730>
        }
        rx_state->payload_crc = (uint16_t)(((uint16_t) frame->data[0]) | (uint16_t)((uint16_t) frame->data[1] << 8U));
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	791b      	ldrb	r3, [r3, #4]
 800172c:	461a      	mov	r2, r3
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	795b      	ldrb	r3, [r3, #5]
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	b29b      	uxth	r3, r3
 8001736:	4313      	orrs	r3, r2
 8001738:	b29a      	uxth	r2, r3
 800173a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800173c:	831a      	strh	r2, [r3, #24]
        rx_state->calculated_crc = crcAddSignature(0xFFFFU, data_type_signature);
 800173e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001742:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001746:	f001 fa62 	bl	8002c0e <crcAddSignature>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001750:	829a      	strh	r2, [r3, #20]
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8001752:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001754:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	3304      	adds	r3, #4
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 800175a:	1c99      	adds	r1, r3, #2
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	7b1b      	ldrb	r3, [r3, #12]
 8001760:	3b03      	subs	r3, #3
 8001762:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8001764:	461a      	mov	r2, r3
 8001766:	f001 fa81 	bl	8002c6c <crcAdd>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001770:	829a      	strh	r2, [r3, #20]
    {
 8001772:	e124      	b.n	80019be <canardHandleRxFrame+0x716>
    }
    else if (!IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))    // Middle of a multi-frame transfer
 8001774:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001778:	09db      	lsrs	r3, r3, #7
 800177a:	b2db      	uxtb	r3, r3
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b00      	cmp	r3, #0
 8001782:	d133      	bne.n	80017ec <canardHandleRxFrame+0x544>
 8001784:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001788:	099b      	lsrs	r3, r3, #6
 800178a:	b2db      	uxtb	r3, r3
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b00      	cmp	r3, #0
 8001792:	d12b      	bne.n	80017ec <canardHandleRxFrame+0x544>
    {
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f103 000c 	add.w	r0, r3, #12
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	1d1a      	adds	r2, r3, #4
                                                 (uint8_t) (frame->data_len - 1));
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 80017a2:	3b01      	subs	r3, #1
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80017a8:	f000 ff44 	bl	8002634 <bufferBlockPushBytes>
 80017ac:	4603      	mov	r3, r0
 80017ae:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (ret < 0)
 80017b0:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	da09      	bge.n	80017cc <canardHandleRxFrame+0x524>
        {
            releaseStatePayload(ins, rx_state);
 80017b8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 ff06 	bl	80025cc <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 80017c0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80017c2:	f000 fe04 	bl	80023ce <prepareForNextTransfer>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 80017c6:	f06f 0302 	mvn.w	r3, #2
 80017ca:	e105      	b.n	80019d8 <canardHandleRxFrame+0x730>
        }
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 80017cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80017ce:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data, (uint8_t)(frame->data_len - 1));
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	1d19      	adds	r1, r3, #4
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	7b1b      	ldrb	r3, [r3, #12]
 80017d8:	3b01      	subs	r3, #1
 80017da:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 80017dc:	461a      	mov	r2, r3
 80017de:	f001 fa45 	bl	8002c6c <crcAdd>
 80017e2:	4603      	mov	r3, r0
 80017e4:	461a      	mov	r2, r3
 80017e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80017e8:	829a      	strh	r2, [r3, #20]
    {
 80017ea:	e0e8      	b.n	80019be <canardHandleRxFrame+0x716>
    }
    else                                                                            // End of a multi-frame transfer
    {
        const uint8_t frame_payload_size = (uint8_t)(frame->data_len - 1);
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	7b1b      	ldrb	r3, [r3, #12]
 80017f0:	3b01      	subs	r3, #1
 80017f2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

        uint8_t tail_offset = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

        if (rx_state->payload_len < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE)
 80017fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80017fe:	8adb      	ldrh	r3, [r3, #22]
 8001800:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001804:	b29b      	uxth	r3, r3
 8001806:	2b04      	cmp	r3, #4
 8001808:	d823      	bhi.n	8001852 <canardHandleRxFrame+0x5aa>
        {
            // Copy the beginning of the frame into the head, point the tail pointer to the remainder
            for (size_t i = rx_state->payload_len;
 800180a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800180c:	8adb      	ldrh	r3, [r3, #22]
 800180e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001812:	b29b      	uxth	r3, r3
 8001814:	667b      	str	r3, [r7, #100]	@ 0x64
 8001816:	e012      	b.n	800183e <canardHandleRxFrame+0x596>
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
                 i++, tail_offset++)
            {
                rx_state->buffer_head[i] = frame->data[tail_offset];
 8001818:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	4413      	add	r3, r2
 8001820:	7919      	ldrb	r1, [r3, #4]
 8001822:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001824:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001826:	4413      	add	r3, r2
 8001828:	331b      	adds	r3, #27
 800182a:	460a      	mov	r2, r1
 800182c:	701a      	strb	r2, [r3, #0]
                 i++, tail_offset++)
 800182e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001830:	3301      	adds	r3, #1
 8001832:	667b      	str	r3, [r7, #100]	@ 0x64
 8001834:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001838:	3301      	adds	r3, #1
 800183a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
 800183e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001840:	2b04      	cmp	r3, #4
 8001842:	d848      	bhi.n	80018d6 <canardHandleRxFrame+0x62e>
 8001844:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8001848:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800184c:	429a      	cmp	r2, r3
 800184e:	d3e3      	bcc.n	8001818 <canardHandleRxFrame+0x570>
 8001850:	e041      	b.n	80018d6 <canardHandleRxFrame+0x62e>
            }
        }
        else
        {
            // Like above, except that the beginning goes into the last block of the storage
            CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f103 020c 	add.w	r2, r3, #12
 8001858:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	4619      	mov	r1, r3
 800185e:	4610      	mov	r0, r2
 8001860:	f7ff fc1e 	bl	80010a0 <canardBufferFromIdx>
 8001864:	6638      	str	r0, [r7, #96]	@ 0x60
            if (block != NULL)
 8001866:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001868:	2b00      	cmp	r3, #0
 800186a:	d034      	beq.n	80018d6 <canardHandleRxFrame+0x62e>
            {
                size_t offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE;    // Payload offset of the first block
 800186c:	2305      	movs	r3, #5
 800186e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (block->next != NULL)
 8001870:	e005      	b.n	800187e <canardHandleRxFrame+0x5d6>
                {
                    block = block->next;
 8001872:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	663b      	str	r3, [r7, #96]	@ 0x60
                    offset += CANARD_BUFFER_BLOCK_DATA_SIZE;
 8001878:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800187a:	331c      	adds	r3, #28
 800187c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (block->next != NULL)
 800187e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f5      	bne.n	8001872 <canardHandleRxFrame+0x5ca>
                }
                CANARD_ASSERT(block != NULL);

                const size_t offset_within_block = rx_state->payload_len - offset;
 8001886:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001888:	8adb      	ldrh	r3, [r3, #22]
 800188a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800188e:	b29b      	uxth	r3, r3
 8001890:	461a      	mov	r2, r3
 8001892:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	63bb      	str	r3, [r7, #56]	@ 0x38
                CANARD_ASSERT(offset_within_block <= CANARD_BUFFER_BLOCK_DATA_SIZE);

                for (size_t i = offset_within_block;
 8001898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800189a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800189c:	e012      	b.n	80018c4 <canardHandleRxFrame+0x61c>
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
                     i++, tail_offset++)
                {
                    block->data[i] = frame->data[tail_offset];
 800189e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	4413      	add	r3, r2
 80018a6:	7919      	ldrb	r1, [r3, #4]
 80018a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80018aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018ac:	4413      	add	r3, r2
 80018ae:	3304      	adds	r3, #4
 80018b0:	460a      	mov	r2, r1
 80018b2:	701a      	strb	r2, [r3, #0]
                     i++, tail_offset++)
 80018b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018b6:	3301      	adds	r3, #1
 80018b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80018ba:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80018be:	3301      	adds	r3, #1
 80018c0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
 80018c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018c6:	2b1b      	cmp	r3, #27
 80018c8:	d805      	bhi.n	80018d6 <canardHandleRxFrame+0x62e>
 80018ca:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 80018ce:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d3e3      	bcc.n	800189e <canardHandleRxFrame+0x5f6>
                }
            }
        }

        CanardRxTransfer rx_transfer = {
 80018d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018da:	e9c7 2304 	strd	r2, r3, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = rx_state->buffer_head,
 80018de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018e0:	331b      	adds	r3, #27
        CanardRxTransfer rx_transfer = {
 80018e2:	61bb      	str	r3, [r7, #24]
            .payload_middle = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks),
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f103 020c 	add.w	r2, r3, #12
 80018ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	4619      	mov	r1, r3
 80018f0:	4610      	mov	r0, r2
 80018f2:	f7ff fbd5 	bl	80010a0 <canardBufferFromIdx>
 80018f6:	4603      	mov	r3, r0
        CanardRxTransfer rx_transfer = {
 80018f8:	61fb      	str	r3, [r7, #28]
            .payload_tail = (tail_offset >= frame_payload_size) ? NULL : (&frame->data[tail_offset]),
 80018fa:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 80018fe:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001902:	429a      	cmp	r2, r3
 8001904:	d205      	bcs.n	8001912 <canardHandleRxFrame+0x66a>
 8001906:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	4413      	add	r3, r2
 800190e:	3304      	adds	r3, #4
 8001910:	e000      	b.n	8001914 <canardHandleRxFrame+0x66c>
 8001912:	2300      	movs	r3, #0
        CanardRxTransfer rx_transfer = {
 8001914:	623b      	str	r3, [r7, #32]
            .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 8001916:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001918:	8adb      	ldrh	r3, [r3, #22]
 800191a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800191e:	b29b      	uxth	r3, r3
 8001920:	461a      	mov	r2, r3
 8001922:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001926:	b29b      	uxth	r3, r3
 8001928:	4413      	add	r3, r2
 800192a:	b29b      	uxth	r3, r3
        CanardRxTransfer rx_transfer = {
 800192c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800192e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001932:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001934:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001938:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 800193c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001940:	f003 031f 	and.w	r3, r3, #31
 8001944:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8001946:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800194a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800194e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001952:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8001956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#elif CANARD_ENABLE_TAO_OPTION
            .tao = !ins->tao_disabled
#endif
        };

        rx_state->buffer_blocks = CANARD_BUFFER_IDX_NONE;     // Block list ownership has been transferred to rx_transfer!
 800195a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800195c:	2200      	movs	r2, #0
 800195e:	605a      	str	r2, [r3, #4]

        // CRC validation
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc, frame->data, frame->data_len - 1U);
 8001960:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001962:	8a98      	ldrh	r0, [r3, #20]
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	1d19      	adds	r1, r3, #4
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	7b1b      	ldrb	r3, [r3, #12]
 800196c:	3b01      	subs	r3, #1
 800196e:	461a      	mov	r2, r3
 8001970:	f001 f97c 	bl	8002c6c <crcAdd>
 8001974:	4603      	mov	r3, r0
 8001976:	461a      	mov	r2, r3
 8001978:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800197a:	829a      	strh	r2, [r3, #20]
        if (rx_state->calculated_crc == rx_state->payload_crc)
 800197c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800197e:	8a9a      	ldrh	r2, [r3, #20]
 8001980:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001982:	8b1b      	ldrh	r3, [r3, #24]
 8001984:	429a      	cmp	r2, r3
 8001986:	d106      	bne.n	8001996 <canardHandleRxFrame+0x6ee>
        {
            ins->on_reception(ins, &rx_transfer);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f107 0210 	add.w	r2, r7, #16
 8001990:	4611      	mov	r1, r2
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	4798      	blx	r3
        }

        // Making sure the payload is released even if the application didn't bother with it
        canardReleaseRxTransferPayload(ins, &rx_transfer);
 8001996:	f107 0310 	add.w	r3, r7, #16
 800199a:	4619      	mov	r1, r3
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 fa93 	bl	8001ec8 <canardReleaseRxTransferPayload>
        prepareForNextTransfer(rx_state);
 80019a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80019a4:	f000 fd13 	bl	80023ce <prepareForNextTransfer>

        if (rx_state->calculated_crc == rx_state->payload_crc)
 80019a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80019aa:	8a9a      	ldrh	r2, [r3, #20]
 80019ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80019ae:	8b1b      	ldrh	r3, [r3, #24]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d101      	bne.n	80019b8 <canardHandleRxFrame+0x710>
        {
            return CANARD_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	e00f      	b.n	80019d8 <canardHandleRxFrame+0x730>
        }
        else
        {
            return -CANARD_ERROR_RX_BAD_CRC;
 80019b8:	f06f 0310 	mvn.w	r3, #16
 80019bc:	e00c      	b.n	80019d8 <canardHandleRxFrame+0x730>
        }
    }

    rx_state->next_toggle = rx_state->next_toggle ? 0 : 1;
 80019be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80019c0:	7ddb      	ldrb	r3, [r3, #23]
 80019c2:	b25b      	sxtb	r3, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	09db      	lsrs	r3, r3, #7
 80019ca:	b2d9      	uxtb	r1, r3
 80019cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80019ce:	7dd3      	ldrb	r3, [r2, #23]
 80019d0:	f361 13c7 	bfi	r3, r1, #7, #1
 80019d4:	75d3      	strb	r3, [r2, #23]
    return CANARD_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3774      	adds	r7, #116	@ 0x74
 80019dc:	46bd      	mov	sp, r7
 80019de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019e2:	bf00      	nop

080019e4 <canardCleanupStaleTransfers>:

void canardCleanupStaleTransfers(CanardInstance* ins, uint64_t current_time_usec)
{
 80019e4:	b5b0      	push	{r4, r5, r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	e9c7 2300 	strd	r2, r3, [r7]
    CanardRxState* prev = ins->rx_states, * state = ins->rx_states;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	613b      	str	r3, [r7, #16]

    while (state != NULL)
 80019fc:	e053      	b.n	8001aa6 <canardCleanupStaleTransfers+0xc2>
    {
        if ((current_time_usec - state->timestamp_usec) > TRANSFER_TIMEOUT_USEC)
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a08:	1a84      	subs	r4, r0, r2
 8001a0a:	eb61 0503 	sbc.w	r5, r1, r3
 8001a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab8 <canardCleanupStaleTransfers+0xd4>)
 8001a10:	429c      	cmp	r4, r3
 8001a12:	f175 0300 	sbcs.w	r3, r5, #0
 8001a16:	d33a      	bcc.n	8001a8e <canardCleanupStaleTransfers+0xaa>
        {
            if (state == ins->rx_states)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d11c      	bne.n	8001a5c <canardCleanupStaleTransfers+0x78>
            {
                releaseStatePayload(ins, state);
 8001a22:	6939      	ldr	r1, [r7, #16]
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f000 fdd1 	bl	80025cc <releaseStatePayload>
                ins->rx_states = canardRxFromIdx(&ins->allocator, ins->rx_states->next);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f103 020c 	add.w	r2, r3, #12
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	4610      	mov	r0, r2
 8001a3a:	f7ff fb49 	bl	80010d0 <canardRxFromIdx>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	621a      	str	r2, [r3, #32]
                freeBlock(&ins->allocator, state);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	330c      	adds	r3, #12
 8001a48:	6939      	ldr	r1, [r7, #16]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f001 f98b 	bl	8002d66 <freeBlock>
                state = ins->rx_states;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	613b      	str	r3, [r7, #16]
                prev = state;
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	e024      	b.n	8001aa6 <canardCleanupStaleTransfers+0xc2>
            }
            else
            {
                releaseStatePayload(ins, state);
 8001a5c:	6939      	ldr	r1, [r7, #16]
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 fdb4 	bl	80025cc <releaseStatePayload>
                prev->next = state->next;
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	601a      	str	r2, [r3, #0]
                freeBlock(&ins->allocator, state);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	330c      	adds	r3, #12
 8001a70:	6939      	ldr	r1, [r7, #16]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f001 f977 	bl	8002d66 <freeBlock>
                state = canardRxFromIdx(&ins->allocator, prev->next);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f103 020c 	add.w	r2, r3, #12
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4619      	mov	r1, r3
 8001a84:	4610      	mov	r0, r2
 8001a86:	f7ff fb23 	bl	80010d0 <canardRxFromIdx>
 8001a8a:	6138      	str	r0, [r7, #16]
 8001a8c:	e00b      	b.n	8001aa6 <canardCleanupStaleTransfers+0xc2>
            }
        }
        else
        {
            prev = state;
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	617b      	str	r3, [r7, #20]
            state = canardRxFromIdx(&ins->allocator, state->next);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f103 020c 	add.w	r2, r3, #12
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	f7ff fb16 	bl	80010d0 <canardRxFromIdx>
 8001aa4:	6138      	str	r0, [r7, #16]
    while (state != NULL)
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1a8      	bne.n	80019fe <canardCleanupStaleTransfers+0x1a>
            prev_item = item;
            item = item->next;
        }
    }
#endif
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	001e8481 	.word	0x001e8481

08001abc <canardDecodeScalar>:
int16_t canardDecodeScalar(const CanardRxTransfer* transfer,
                           uint32_t bit_offset,
                           uint8_t bit_length,
                           bool value_is_signed,
                           void* out_value)
{
 8001abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ac0:	b08d      	sub	sp, #52	@ 0x34
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	61f8      	str	r0, [r7, #28]
 8001ac6:	61b9      	str	r1, [r7, #24]
 8001ac8:	4611      	mov	r1, r2
 8001aca:	461a      	mov	r2, r3
 8001acc:	460b      	mov	r3, r1
 8001ace:	75fb      	strb	r3, [r7, #23]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	75bb      	strb	r3, [r7, #22]
    if (transfer == NULL || out_value == NULL)
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d002      	beq.n	8001ae0 <canardDecodeScalar+0x24>
 8001ada:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <canardDecodeScalar+0x2a>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8001ae0:	f06f 0301 	mvn.w	r3, #1
 8001ae4:	e16e      	b.n	8001dc4 <canardDecodeScalar+0x308>
    }

    if (bit_length < 1 || bit_length > 64)
 8001ae6:	7dfb      	ldrb	r3, [r7, #23]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <canardDecodeScalar+0x36>
 8001aec:	7dfb      	ldrb	r3, [r7, #23]
 8001aee:	2b40      	cmp	r3, #64	@ 0x40
 8001af0:	d902      	bls.n	8001af8 <canardDecodeScalar+0x3c>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8001af2:	f06f 0301 	mvn.w	r3, #1
 8001af6:	e165      	b.n	8001dc4 <canardDecodeScalar+0x308>
    }

    if (bit_length == 1 && value_is_signed)
 8001af8:	7dfb      	ldrb	r3, [r7, #23]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d105      	bne.n	8001b0a <canardDecodeScalar+0x4e>
 8001afe:	7dbb      	ldrb	r3, [r7, #22]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <canardDecodeScalar+0x4e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8001b04:	f06f 0301 	mvn.w	r3, #1
 8001b08:	e15c      	b.n	8001dc4 <canardDecodeScalar+0x308>
        uint64_t u64;
        int64_t  s64;           ///< Also double, possibly float, possibly long double (depends on implementation)
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));   // This is important
 8001b0a:	f107 0320 	add.w	r3, r7, #32
 8001b0e:	2208      	movs	r2, #8
 8001b10:	2100      	movs	r1, #0
 8001b12:	4618      	mov	r0, r3
 8001b14:	f009 f834 	bl	800ab80 <memset>

    const int16_t result = descatterTransferPayload(transfer, bit_offset, bit_length, &storage.bytes[0]);
 8001b18:	f107 0320 	add.w	r3, r7, #32
 8001b1c:	7dfa      	ldrb	r2, [r7, #23]
 8001b1e:	69b9      	ldr	r1, [r7, #24]
 8001b20:	69f8      	ldr	r0, [r7, #28]
 8001b22:	f000 ff0f 	bl	8002944 <descatterTransferPayload>
 8001b26:	4603      	mov	r3, r0
 8001b28:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (result <= 0)
 8001b2a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	dc02      	bgt.n	8001b38 <canardDecodeScalar+0x7c>
    {
        return result;
 8001b32:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001b36:	e145      	b.n	8001dc4 <canardDecodeScalar+0x308>
     * The bit copy algorithm assumes that more significant bits have lower index, so we need to shift some.
     * Extra most significant bits will be filled with zeroes, which is fine.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 8001b38:	7dfb      	ldrb	r3, [r7, #23]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d018      	beq.n	8001b76 <canardDecodeScalar+0xba>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] >> ((8U - (bit_length % 8U)) & 7U));
 8001b44:	7dfb      	ldrb	r3, [r7, #23]
 8001b46:	08db      	lsrs	r3, r3, #3
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	3320      	adds	r3, #32
 8001b4c:	f107 0210 	add.w	r2, r7, #16
 8001b50:	4413      	add	r3, r2
 8001b52:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001b56:	461a      	mov	r2, r3
 8001b58:	7dfb      	ldrb	r3, [r7, #23]
 8001b5a:	425b      	negs	r3, r3
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	411a      	asrs	r2, r3
 8001b62:	7dfb      	ldrb	r3, [r7, #23]
 8001b64:	08db      	lsrs	r3, r3, #3
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	3320      	adds	r3, #32
 8001b6c:	f107 0110 	add.w	r1, r7, #16
 8001b70:	440b      	add	r3, r1
 8001b72:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Determining the closest standard byte length - this will be needed for byte reordering and sign bit extension.
     */
    uint8_t std_byte_length = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 8001b7c:	7dfb      	ldrb	r3, [r7, #23]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d103      	bne.n	8001b8a <canardDecodeScalar+0xce>
 8001b82:	2301      	movs	r3, #1
 8001b84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001b88:	e01e      	b.n	8001bc8 <canardDecodeScalar+0x10c>
    else if (bit_length <= 8)   { std_byte_length = 1; }
 8001b8a:	7dfb      	ldrb	r3, [r7, #23]
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d803      	bhi.n	8001b98 <canardDecodeScalar+0xdc>
 8001b90:	2301      	movs	r3, #1
 8001b92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001b96:	e017      	b.n	8001bc8 <canardDecodeScalar+0x10c>
    else if (bit_length <= 16)  { std_byte_length = 2; }
 8001b98:	7dfb      	ldrb	r3, [r7, #23]
 8001b9a:	2b10      	cmp	r3, #16
 8001b9c:	d803      	bhi.n	8001ba6 <canardDecodeScalar+0xea>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001ba4:	e010      	b.n	8001bc8 <canardDecodeScalar+0x10c>
    else if (bit_length <= 32)  { std_byte_length = 4; }
 8001ba6:	7dfb      	ldrb	r3, [r7, #23]
 8001ba8:	2b20      	cmp	r3, #32
 8001baa:	d803      	bhi.n	8001bb4 <canardDecodeScalar+0xf8>
 8001bac:	2304      	movs	r3, #4
 8001bae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001bb2:	e009      	b.n	8001bc8 <canardDecodeScalar+0x10c>
    else if (bit_length <= 64)  { std_byte_length = 8; }
 8001bb4:	7dfb      	ldrb	r3, [r7, #23]
 8001bb6:	2b40      	cmp	r3, #64	@ 0x40
 8001bb8:	d803      	bhi.n	8001bc2 <canardDecodeScalar+0x106>
 8001bba:	2308      	movs	r3, #8
 8001bbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001bc0:	e002      	b.n	8001bc8 <canardDecodeScalar+0x10c>
    else
    {
        CANARD_ASSERT(false);
        return -CANARD_ERROR_INTERNAL;
 8001bc2:	f06f 0308 	mvn.w	r3, #8
 8001bc6:	e0fd      	b.n	8001dc4 <canardDecodeScalar+0x308>
    CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));

    /*
     * Flipping the byte order if needed.
     */
    if (isBigEndian())
 8001bc8:	f000 ffb1 	bl	8002b2e <isBigEndian>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d007      	beq.n	8001be2 <canardDecodeScalar+0x126>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 8001bd2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001bd6:	f107 0320 	add.w	r3, r7, #32
 8001bda:	4611      	mov	r1, r2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 ffb7 	bl	8002b50 <swapByteOrder>

    /*
     * Extending the sign bit if needed. I miss templates.
     * Note that we operate on unsigned values in order to avoid undefined behaviors.
     */
    if (value_is_signed && (std_byte_length * 8 != bit_length))
 8001be2:	7dbb      	ldrb	r3, [r7, #22]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 809b 	beq.w	8001d20 <canardDecodeScalar+0x264>
 8001bea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bee:	00da      	lsls	r2, r3, #3
 8001bf0:	7dfb      	ldrb	r3, [r7, #23]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	f000 8094 	beq.w	8001d20 <canardDecodeScalar+0x264>
    {
        if (bit_length <= 8)
 8001bf8:	7dfb      	ldrb	r3, [r7, #23]
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d819      	bhi.n	8001c32 <canardDecodeScalar+0x176>
        {
            if ((storage.u8 & (1U << (bit_length - 1U))) != 0)                           // If the sign bit is set...
 8001bfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c02:	461a      	mov	r2, r3
 8001c04:	7dfb      	ldrb	r3, [r7, #23]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 8085 	beq.w	8001d20 <canardDecodeScalar+0x264>
            {
                storage.u8 |= (uint8_t) 0xFFU & (uint8_t) ~((1U << bit_length) - 1U);   // ...set all bits above it.
 8001c16:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c1a:	7dfb      	ldrb	r3, [r7, #23]
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	425b      	negs	r3, r3
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f887 3020 	strb.w	r3, [r7, #32]
 8001c30:	e076      	b.n	8001d20 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 16)
 8001c32:	7dfb      	ldrb	r3, [r7, #23]
 8001c34:	2b10      	cmp	r3, #16
 8001c36:	d815      	bhi.n	8001c64 <canardDecodeScalar+0x1a8>
        {
            if ((storage.u16 & (1U << (bit_length - 1U))) != 0)
 8001c38:	8c3b      	ldrh	r3, [r7, #32]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	7dfb      	ldrb	r3, [r7, #23]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	fa22 f303 	lsr.w	r3, r2, r3
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d069      	beq.n	8001d20 <canardDecodeScalar+0x264>
            {
                storage.u16 |= (uint16_t) 0xFFFFU & (uint16_t) ~((1U << bit_length) - 1U);
 8001c4c:	8c3a      	ldrh	r2, [r7, #32]
 8001c4e:	7dfb      	ldrb	r3, [r7, #23]
 8001c50:	2101      	movs	r1, #1
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	425b      	negs	r3, r3
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	843b      	strh	r3, [r7, #32]
 8001c62:	e05d      	b.n	8001d20 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 32)
 8001c64:	7dfb      	ldrb	r3, [r7, #23]
 8001c66:	2b20      	cmp	r3, #32
 8001c68:	d811      	bhi.n	8001c8e <canardDecodeScalar+0x1d2>
        {
            if ((storage.u32 & (((uint32_t) 1) << (bit_length - 1U))) != 0)
 8001c6a:	6a3a      	ldr	r2, [r7, #32]
 8001c6c:	7dfb      	ldrb	r3, [r7, #23]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	fa22 f303 	lsr.w	r3, r2, r3
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d051      	beq.n	8001d20 <canardDecodeScalar+0x264>
            {
                storage.u32 |= (uint32_t) 0xFFFFFFFFUL & (uint32_t) ~((((uint32_t) 1) << bit_length) - 1U);
 8001c7c:	6a3a      	ldr	r2, [r7, #32]
 8001c7e:	7dfb      	ldrb	r3, [r7, #23]
 8001c80:	2101      	movs	r1, #1
 8001c82:	fa01 f303 	lsl.w	r3, r1, r3
 8001c86:	425b      	negs	r3, r3
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	623b      	str	r3, [r7, #32]
 8001c8c:	e048      	b.n	8001d20 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length < 64)   // Strictly less, this is not a typo
 8001c8e:	7dfb      	ldrb	r3, [r7, #23]
 8001c90:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c92:	d842      	bhi.n	8001d1a <canardDecodeScalar+0x25e>
        {
            if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 8001c94:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c98:	7df9      	ldrb	r1, [r7, #23]
 8001c9a:	1e48      	subs	r0, r1, #1
 8001c9c:	f1c0 0620 	rsb	r6, r0, #32
 8001ca0:	f1a0 0120 	sub.w	r1, r0, #32
 8001ca4:	fa22 f400 	lsr.w	r4, r2, r0
 8001ca8:	fa03 f606 	lsl.w	r6, r3, r6
 8001cac:	4334      	orrs	r4, r6
 8001cae:	fa23 f101 	lsr.w	r1, r3, r1
 8001cb2:	430c      	orrs	r4, r1
 8001cb4:	fa23 f500 	lsr.w	r5, r3, r0
 8001cb8:	f004 0301 	and.w	r3, r4, #1
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	d029      	beq.n	8001d20 <canardDecodeScalar+0x264>
            {
                storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << bit_length) - 1U);
 8001ccc:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001cd0:	7df9      	ldrb	r1, [r7, #23]
 8001cd2:	f04f 0201 	mov.w	r2, #1
 8001cd6:	f04f 0300 	mov.w	r3, #0
 8001cda:	f1a1 0620 	sub.w	r6, r1, #32
 8001cde:	f1c1 0020 	rsb	r0, r1, #32
 8001ce2:	fa03 f901 	lsl.w	r9, r3, r1
 8001ce6:	fa02 f606 	lsl.w	r6, r2, r6
 8001cea:	ea49 0906 	orr.w	r9, r9, r6
 8001cee:	fa22 f000 	lsr.w	r0, r2, r0
 8001cf2:	ea49 0900 	orr.w	r9, r9, r0
 8001cf6:	fa02 f801 	lsl.w	r8, r2, r1
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f1d8 0a00 	rsbs	sl, r8, #0
 8001d00:	eb63 0b09 	sbc.w	fp, r3, r9
 8001d04:	ea44 030a 	orr.w	r3, r4, sl
 8001d08:	603b      	str	r3, [r7, #0]
 8001d0a:	ea45 030b 	orr.w	r3, r5, fp
 8001d0e:	607b      	str	r3, [r7, #4]
 8001d10:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001d14:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001d18:	e002      	b.n	8001d20 <canardDecodeScalar+0x264>
            }
        }
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 8001d1a:	f06f 0308 	mvn.w	r3, #8
 8001d1e:	e051      	b.n	8001dc4 <canardDecodeScalar+0x308>
    }

    /*
     * Copying the result out.
     */
    if (value_is_signed)
 8001d20:	7dbb      	ldrb	r3, [r7, #22]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d022      	beq.n	8001d6c <canardDecodeScalar+0x2b0>
    {
        if      (bit_length <= 8)   { *( (int8_t*) out_value) = storage.s8;  }
 8001d26:	7dfb      	ldrb	r3, [r7, #23]
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d804      	bhi.n	8001d36 <canardDecodeScalar+0x27a>
 8001d2c:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8001d30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d32:	701a      	strb	r2, [r3, #0]
 8001d34:	e044      	b.n	8001dc0 <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 8001d36:	7dfb      	ldrb	r3, [r7, #23]
 8001d38:	2b10      	cmp	r3, #16
 8001d3a:	d804      	bhi.n	8001d46 <canardDecodeScalar+0x28a>
 8001d3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001d40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d42:	801a      	strh	r2, [r3, #0]
 8001d44:	e03c      	b.n	8001dc0 <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 8001d46:	7dfb      	ldrb	r3, [r7, #23]
 8001d48:	2b20      	cmp	r3, #32
 8001d4a:	d803      	bhi.n	8001d54 <canardDecodeScalar+0x298>
 8001d4c:	6a3a      	ldr	r2, [r7, #32]
 8001d4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	e035      	b.n	8001dc0 <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	2b40      	cmp	r3, #64	@ 0x40
 8001d58:	d805      	bhi.n	8001d66 <canardDecodeScalar+0x2aa>
 8001d5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d5e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001d60:	e9c1 2300 	strd	r2, r3, [r1]
 8001d64:	e02c      	b.n	8001dc0 <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 8001d66:	f06f 0308 	mvn.w	r3, #8
 8001d6a:	e02b      	b.n	8001dc4 <canardDecodeScalar+0x308>
        }
    }
    else
    {
        if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d104      	bne.n	8001d7c <canardDecodeScalar+0x2c0>
 8001d72:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d78:	701a      	strb	r2, [r3, #0]
 8001d7a:	e021      	b.n	8001dc0 <canardDecodeScalar+0x304>
        else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 8001d7c:	7dfb      	ldrb	r3, [r7, #23]
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d804      	bhi.n	8001d8c <canardDecodeScalar+0x2d0>
 8001d82:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d88:	701a      	strb	r2, [r3, #0]
 8001d8a:	e019      	b.n	8001dc0 <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 8001d8c:	7dfb      	ldrb	r3, [r7, #23]
 8001d8e:	2b10      	cmp	r3, #16
 8001d90:	d803      	bhi.n	8001d9a <canardDecodeScalar+0x2de>
 8001d92:	8c3a      	ldrh	r2, [r7, #32]
 8001d94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d96:	801a      	strh	r2, [r3, #0]
 8001d98:	e012      	b.n	8001dc0 <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 8001d9a:	7dfb      	ldrb	r3, [r7, #23]
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d803      	bhi.n	8001da8 <canardDecodeScalar+0x2ec>
 8001da0:	6a3a      	ldr	r2, [r7, #32]
 8001da2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	e00b      	b.n	8001dc0 <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 8001da8:	7dfb      	ldrb	r3, [r7, #23]
 8001daa:	2b40      	cmp	r3, #64	@ 0x40
 8001dac:	d805      	bhi.n	8001dba <canardDecodeScalar+0x2fe>
 8001dae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001db2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001db4:	e9c1 2300 	strd	r2, r3, [r1]
 8001db8:	e002      	b.n	8001dc0 <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 8001dba:	f06f 0308 	mvn.w	r3, #8
 8001dbe:	e001      	b.n	8001dc4 <canardDecodeScalar+0x308>
        }
    }

    CANARD_ASSERT(result <= bit_length);
    CANARD_ASSERT(result > 0);
    return result;
 8001dc0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3734      	adds	r7, #52	@ 0x34
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001dce <canardEncodeScalar>:

void canardEncodeScalar(void* destination,
                        uint32_t bit_offset,
                        uint8_t bit_length,
                        const void* value)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b08a      	sub	sp, #40	@ 0x28
 8001dd2:	af02      	add	r7, sp, #8
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	71fb      	strb	r3, [r7, #7]
     * Maybe not the best solution, but it simplifies the API.
     */
    CANARD_ASSERT(destination != NULL);
    CANARD_ASSERT(value != NULL);

    if (bit_length > 64)
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	2b40      	cmp	r3, #64	@ 0x40
 8001de2:	d901      	bls.n	8001de8 <canardEncodeScalar+0x1a>
    {
        CANARD_ASSERT(false);
        bit_length = 64;
 8001de4:	2340      	movs	r3, #64	@ 0x40
 8001de6:	71fb      	strb	r3, [r7, #7]
    }

    if (bit_length < 1)
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <canardEncodeScalar+0x24>
    {
        CANARD_ASSERT(false);
        bit_length = 1;
 8001dee:	2301      	movs	r3, #1
 8001df0:	71fb      	strb	r3, [r7, #7]
        uint32_t u32;
        uint64_t u64;
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));
 8001df2:	f107 0310 	add.w	r3, r7, #16
 8001df6:	2208      	movs	r2, #8
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f008 fec0 	bl	800ab80 <memset>

    uint8_t std_byte_length = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	77fb      	strb	r3, [r7, #31]

    // Extra most significant bits can be safely ignored here.
    if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) value) != 0); }
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d105      	bne.n	8001e16 <canardEncodeScalar+0x48>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	77fb      	strb	r3, [r7, #31]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	743b      	strb	r3, [r7, #16]
 8001e14:	e024      	b.n	8001e60 <canardEncodeScalar+0x92>
    else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) value);  }
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d805      	bhi.n	8001e28 <canardEncodeScalar+0x5a>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	77fb      	strb	r3, [r7, #31]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	743b      	strb	r3, [r7, #16]
 8001e26:	e01b      	b.n	8001e60 <canardEncodeScalar+0x92>
    else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) value); }
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	2b10      	cmp	r3, #16
 8001e2c:	d805      	bhi.n	8001e3a <canardEncodeScalar+0x6c>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	77fb      	strb	r3, [r7, #31]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	823b      	strh	r3, [r7, #16]
 8001e38:	e012      	b.n	8001e60 <canardEncodeScalar+0x92>
    else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) value); }
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	2b20      	cmp	r3, #32
 8001e3e:	d805      	bhi.n	8001e4c <canardEncodeScalar+0x7e>
 8001e40:	2304      	movs	r3, #4
 8001e42:	77fb      	strb	r3, [r7, #31]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	e009      	b.n	8001e60 <canardEncodeScalar+0x92>
    else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) value); }
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	2b40      	cmp	r3, #64	@ 0x40
 8001e50:	d806      	bhi.n	8001e60 <canardEncodeScalar+0x92>
 8001e52:	2308      	movs	r3, #8
 8001e54:	77fb      	strb	r3, [r7, #31]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
            storage.bytes[i] = (temp >> (8*i)) & 0xFFU;
        }
    }
#endif

    if (isBigEndian())
 8001e60:	f000 fe65 	bl	8002b2e <isBigEndian>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d006      	beq.n	8001e78 <canardEncodeScalar+0xaa>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 8001e6a:	7ffa      	ldrb	r2, [r7, #31]
 8001e6c:	f107 0310 	add.w	r3, r7, #16
 8001e70:	4611      	mov	r1, r2
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 fe6c 	bl	8002b50 <swapByteOrder>
     * Extra least significant bits will be filled with zeroes, which is fine.
     * Extra most significant bits will be discarded here.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d014      	beq.n	8001eae <canardEncodeScalar+0xe0>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] << ((8U - (bit_length % 8U)) & 7U));
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	08db      	lsrs	r3, r3, #3
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	3320      	adds	r3, #32
 8001e8c:	443b      	add	r3, r7
 8001e8e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001e92:	461a      	mov	r2, r3
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	425b      	negs	r3, r3
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	08db      	lsrs	r3, r3, #3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	3320      	adds	r3, #32
 8001ea8:	443b      	add	r3, r7
 8001eaa:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Now, the storage contains properly serialized scalar. Copying it out.
     */
    copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
 8001eae:	79fa      	ldrb	r2, [r7, #7]
 8001eb0:	f107 0010 	add.w	r0, r7, #16
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2100      	movs	r1, #0
 8001ebc:	f000 fccb 	bl	8002856 <copyBitArray>
}
 8001ec0:	bf00      	nop
 8001ec2:	3720      	adds	r7, #32
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <canardReleaseRxTransferPayload>:

void canardReleaseRxTransferPayload(CanardInstance* ins, CanardRxTransfer* transfer)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
    while (transfer->payload_middle != NULL)
 8001ed2:	e00f      	b.n	8001ef4 <canardReleaseRxTransferPayload+0x2c>
    {
        CanardBufferBlock* const temp = transfer->payload_middle->next;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	60fb      	str	r3, [r7, #12]
        freeBlock(&ins->allocator, transfer->payload_middle);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f103 020c 	add.w	r2, r3, #12
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4610      	mov	r0, r2
 8001eea:	f000 ff3c 	bl	8002d66 <freeBlock>
        transfer->payload_middle = temp;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	60da      	str	r2, [r3, #12]
    while (transfer->payload_middle != NULL)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1eb      	bne.n	8001ed4 <canardReleaseRxTransferPayload+0xc>
    }

    transfer->payload_middle = NULL;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	2200      	movs	r2, #0
 8001f00:	60da      	str	r2, [r3, #12]
    transfer->payload_head = NULL;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
    transfer->payload_tail = NULL;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]
    transfer->payload_len = 0;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2200      	movs	r2, #0
 8001f12:	829a      	strh	r2, [r3, #20]
}
 8001f14:	bf00      	nop
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <computeTransferIDForwardDistance>:

/*
 * Internal (static functions)
 */
CANARD_INTERNAL int16_t computeTransferIDForwardDistance(uint8_t a, uint8_t b)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	460a      	mov	r2, r1
 8001f26:	71fb      	strb	r3, [r7, #7]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	71bb      	strb	r3, [r7, #6]
    int16_t d = (int16_t)(a - b);
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	79bb      	ldrb	r3, [r7, #6]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	81fb      	strh	r3, [r7, #14]
    if (d < 0)
 8001f3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	da03      	bge.n	8001f4a <computeTransferIDForwardDistance+0x2e>
    {
        d = (int16_t)(d + (int16_t)(1U << TRANSFER_ID_BIT_LEN));
 8001f42:	89fb      	ldrh	r3, [r7, #14]
 8001f44:	3320      	adds	r3, #32
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	81fb      	strh	r3, [r7, #14]
    }
    return d;
 8001f4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <incrementTransferID>:

CANARD_INTERNAL void incrementTransferID(uint8_t* transfer_id)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(transfer_id != NULL);

    (*transfer_id)++;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	3301      	adds	r3, #1
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	701a      	strb	r2, [r3, #0]
    if (*transfer_id >= 32)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b1f      	cmp	r3, #31
 8001f74:	d902      	bls.n	8001f7c <incrementTransferID+0x22>
    {
        *transfer_id = 0;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
    }
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <dlcToDataLength>:

CANARD_INTERNAL uint16_t dlcToDataLength(uint16_t dlc) {
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	80fb      	strh	r3, [r7, #6]
    /*
    Data Length Code      9  10  11  12  13  14  15
    Number of data bytes 12  16  20  24  32  48  64
    */
    if (dlc <= 8) {
 8001f92:	88fb      	ldrh	r3, [r7, #6]
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d801      	bhi.n	8001f9c <dlcToDataLength+0x14>
        return dlc;
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	e01e      	b.n	8001fda <dlcToDataLength+0x52>
    } else if (dlc == 9) {
 8001f9c:	88fb      	ldrh	r3, [r7, #6]
 8001f9e:	2b09      	cmp	r3, #9
 8001fa0:	d101      	bne.n	8001fa6 <dlcToDataLength+0x1e>
        return 12;
 8001fa2:	230c      	movs	r3, #12
 8001fa4:	e019      	b.n	8001fda <dlcToDataLength+0x52>
    } else if (dlc == 10) {
 8001fa6:	88fb      	ldrh	r3, [r7, #6]
 8001fa8:	2b0a      	cmp	r3, #10
 8001faa:	d101      	bne.n	8001fb0 <dlcToDataLength+0x28>
        return 16;
 8001fac:	2310      	movs	r3, #16
 8001fae:	e014      	b.n	8001fda <dlcToDataLength+0x52>
    } else if (dlc == 11) {
 8001fb0:	88fb      	ldrh	r3, [r7, #6]
 8001fb2:	2b0b      	cmp	r3, #11
 8001fb4:	d101      	bne.n	8001fba <dlcToDataLength+0x32>
        return 20;
 8001fb6:	2314      	movs	r3, #20
 8001fb8:	e00f      	b.n	8001fda <dlcToDataLength+0x52>
    } else if (dlc == 12) {
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	2b0c      	cmp	r3, #12
 8001fbe:	d101      	bne.n	8001fc4 <dlcToDataLength+0x3c>
        return 24;
 8001fc0:	2318      	movs	r3, #24
 8001fc2:	e00a      	b.n	8001fda <dlcToDataLength+0x52>
    } else if (dlc == 13) {
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	2b0d      	cmp	r3, #13
 8001fc8:	d101      	bne.n	8001fce <dlcToDataLength+0x46>
        return 32;
 8001fca:	2320      	movs	r3, #32
 8001fcc:	e005      	b.n	8001fda <dlcToDataLength+0x52>
    } else if (dlc == 14) {
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	2b0e      	cmp	r3, #14
 8001fd2:	d101      	bne.n	8001fd8 <dlcToDataLength+0x50>
        return 48;
 8001fd4:	2330      	movs	r3, #48	@ 0x30
 8001fd6:	e000      	b.n	8001fda <dlcToDataLength+0x52>
    }
    return 64;
 8001fd8:	2340      	movs	r3, #64	@ 0x40
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <dataLengthToDlc>:

CANARD_INTERNAL uint16_t dataLengthToDlc(uint16_t data_length) {
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	80fb      	strh	r3, [r7, #6]
    if (data_length <= 8) {
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d801      	bhi.n	8001ffa <dataLengthToDlc+0x14>
        return data_length;
 8001ff6:	88fb      	ldrh	r3, [r7, #6]
 8001ff8:	e01e      	b.n	8002038 <dataLengthToDlc+0x52>
    } else if (data_length <= 12) {
 8001ffa:	88fb      	ldrh	r3, [r7, #6]
 8001ffc:	2b0c      	cmp	r3, #12
 8001ffe:	d801      	bhi.n	8002004 <dataLengthToDlc+0x1e>
        return 9;
 8002000:	2309      	movs	r3, #9
 8002002:	e019      	b.n	8002038 <dataLengthToDlc+0x52>
    } else if (data_length <= 16) {
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	2b10      	cmp	r3, #16
 8002008:	d801      	bhi.n	800200e <dataLengthToDlc+0x28>
        return 10;
 800200a:	230a      	movs	r3, #10
 800200c:	e014      	b.n	8002038 <dataLengthToDlc+0x52>
    } else if (data_length <= 20) {
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	2b14      	cmp	r3, #20
 8002012:	d801      	bhi.n	8002018 <dataLengthToDlc+0x32>
        return 11;
 8002014:	230b      	movs	r3, #11
 8002016:	e00f      	b.n	8002038 <dataLengthToDlc+0x52>
    } else if (data_length <= 24) {
 8002018:	88fb      	ldrh	r3, [r7, #6]
 800201a:	2b18      	cmp	r3, #24
 800201c:	d801      	bhi.n	8002022 <dataLengthToDlc+0x3c>
        return 12;
 800201e:	230c      	movs	r3, #12
 8002020:	e00a      	b.n	8002038 <dataLengthToDlc+0x52>
    } else if (data_length <= 32) {
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	2b20      	cmp	r3, #32
 8002026:	d801      	bhi.n	800202c <dataLengthToDlc+0x46>
        return 13;
 8002028:	230d      	movs	r3, #13
 800202a:	e005      	b.n	8002038 <dataLengthToDlc+0x52>
    } else if (data_length <= 48) {
 800202c:	88fb      	ldrh	r3, [r7, #6]
 800202e:	2b30      	cmp	r3, #48	@ 0x30
 8002030:	d801      	bhi.n	8002036 <dataLengthToDlc+0x50>
        return 14;
 8002032:	230e      	movs	r3, #14
 8002034:	e000      	b.n	8002038 <dataLengthToDlc+0x52>
    }
    return 15;
 8002036:	230f      	movs	r3, #15
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <enqueueTxFrames>:
CANARD_INTERNAL int16_t enqueueTxFrames(CanardInstance* ins,
                                        uint32_t can_id,
                                        uint16_t crc,
                                        CanardTxTransfer* transfer
)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	@ 0x28
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	4613      	mov	r3, r2
 8002052:	80fb      	strh	r3, [r7, #6]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared

    if (transfer->inout_transfer_id == NULL)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d102      	bne.n	8002062 <enqueueTxFrames+0x1e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 800205c:	f06f 0301 	mvn.w	r3, #1
 8002060:	e0f9      	b.n	8002256 <enqueueTxFrames+0x212>
    }

    if ((transfer->payload_len > 0) && (transfer->payload == NULL))
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	8c1b      	ldrh	r3, [r3, #32]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d006      	beq.n	8002078 <enqueueTxFrames+0x34>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d102      	bne.n	8002078 <enqueueTxFrames+0x34>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8002072:	f06f 0301 	mvn.w	r3, #1
 8002076:	e0ee      	b.n	8002256 <enqueueTxFrames+0x212>
    }

    int16_t result = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	84fb      	strh	r3, [r7, #38]	@ 0x26
#if CANARD_ENABLE_CANFD
    uint8_t frame_max_data_len = transfer->canfd ? CANARD_CANFD_FRAME_MAX_DATA_LEN:CANARD_CAN_FRAME_MAX_DATA_LEN;
#else
    uint8_t frame_max_data_len = CANARD_CAN_FRAME_MAX_DATA_LEN;
 800207c:	2308      	movs	r3, #8
 800207e:	77fb      	strb	r3, [r7, #31]
#endif
    if (transfer->payload_len < frame_max_data_len)                        // Single frame transfer
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	8c1a      	ldrh	r2, [r3, #32]
 8002084:	7ffb      	ldrb	r3, [r7, #31]
 8002086:	b29b      	uxth	r3, r3
 8002088:	429a      	cmp	r2, r3
 800208a:	d24b      	bcs.n	8002124 <enqueueTxFrames+0xe0>
    {
        CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	330c      	adds	r3, #12
 8002090:	4618      	mov	r0, r3
 8002092:	f000 f929 	bl	80022e8 <createTxItem>
 8002096:	6178      	str	r0, [r7, #20]
        if (queue_item == NULL)
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d102      	bne.n	80020a4 <enqueueTxFrames+0x60>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 800209e:	f06f 0302 	mvn.w	r3, #2
 80020a2:	e0d8      	b.n	8002256 <enqueueTxFrames+0x212>
        }

        memcpy(queue_item->frame.data, transfer->payload, transfer->payload_len);
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f103 0008 	add.w	r0, r3, #8
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	69d9      	ldr	r1, [r3, #28]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	8c1b      	ldrh	r3, [r3, #32]
 80020b2:	461a      	mov	r2, r3
 80020b4:	f008 fe11 	bl	800acda <memcpy>

        transfer->payload_len = dlcToDataLength(dataLengthToDlc(transfer->payload_len+1))-1;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	8c1b      	ldrh	r3, [r3, #32]
 80020bc:	3301      	adds	r3, #1
 80020be:	b29b      	uxth	r3, r3
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff90 	bl	8001fe6 <dataLengthToDlc>
 80020c6:	4603      	mov	r3, r0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff5d 	bl	8001f88 <dlcToDataLength>
 80020ce:	4603      	mov	r3, r0
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	841a      	strh	r2, [r3, #32]
        queue_item->frame.data_len = (uint8_t)(transfer->payload_len + 1);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	8c1b      	ldrh	r3, [r3, #32]
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	3301      	adds	r3, #1
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	741a      	strb	r2, [r3, #16]
        queue_item->frame.data[transfer->payload_len] = (uint8_t)(0xC0U | (*transfer->inout_transfer_id & 31U));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	f003 031f 	and.w	r3, r3, #31
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	8c12      	ldrh	r2, [r2, #32]
 80020f6:	4611      	mov	r1, r2
 80020f8:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	440b      	add	r3, r1
 8002102:	721a      	strb	r2, [r3, #8]
        queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	605a      	str	r2, [r3, #4]
        queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
        queue_item->frame.canfd = transfer->canfd;
#endif
        pushTxQueue(ins, queue_item);
 800210e:	6979      	ldr	r1, [r7, #20]
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 f8a4 	bl	800225e <pushTxQueue>
        result++;
 8002116:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800211a:	b29b      	uxth	r3, r3
 800211c:	3301      	adds	r3, #1
 800211e:	b29b      	uxth	r3, r3
 8002120:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002122:	e096      	b.n	8002252 <enqueueTxFrames+0x20e>
    }
    else                                                                    // Multi frame transfer
    {
        uint16_t data_index = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	84bb      	strh	r3, [r7, #36]	@ 0x24
        uint8_t toggle = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        uint8_t sot_eot = 0x80;
 800212e:	2380      	movs	r3, #128	@ 0x80
 8002130:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        CanardTxQueueItem* queue_item = NULL;
 8002134:	2300      	movs	r3, #0
 8002136:	61bb      	str	r3, [r7, #24]

        while (transfer->payload_len - data_index != 0)
 8002138:	e085      	b.n	8002246 <enqueueTxFrames+0x202>
        {
            queue_item = createTxItem(&ins->allocator);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	330c      	adds	r3, #12
 800213e:	4618      	mov	r0, r3
 8002140:	f000 f8d2 	bl	80022e8 <createTxItem>
 8002144:	61b8      	str	r0, [r7, #24]
            if (queue_item == NULL)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <enqueueTxFrames+0x10e>
            {
                CANARD_ASSERT(false);
                return -CANARD_ERROR_OUT_OF_MEMORY;          // TODO: Purge all frames enqueued so far
 800214c:	f06f 0302 	mvn.w	r3, #2
 8002150:	e081      	b.n	8002256 <enqueueTxFrames+0x212>
            }

            uint16_t i = 0;
 8002152:	2300      	movs	r3, #0
 8002154:	843b      	strh	r3, [r7, #32]
            if (data_index == 0)
 8002156:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10c      	bne.n	8002176 <enqueueTxFrames+0x132>
            {
                // add crc
                queue_item->frame.data[0] = (uint8_t) (crc);
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	b2da      	uxtb	r2, r3
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	721a      	strb	r2, [r3, #8]
                queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	0a1b      	lsrs	r3, r3, #8
 8002168:	b29b      	uxth	r3, r3
 800216a:	b2da      	uxtb	r2, r3
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	725a      	strb	r2, [r3, #9]
                i = 2;
 8002170:	2302      	movs	r3, #2
 8002172:	843b      	strh	r3, [r7, #32]
 8002174:	e012      	b.n	800219c <enqueueTxFrames+0x158>
            }
            else
            {
                i = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	843b      	strh	r3, [r7, #32]
            }

            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 800217a:	e00f      	b.n	800219c <enqueueTxFrames+0x158>
            {
                queue_item->frame.data[i] = transfer->payload[data_index];
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	69da      	ldr	r2, [r3, #28]
 8002180:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002182:	441a      	add	r2, r3
 8002184:	8c3b      	ldrh	r3, [r7, #32]
 8002186:	7811      	ldrb	r1, [r2, #0]
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4413      	add	r3, r2
 800218c:	460a      	mov	r2, r1
 800218e:	721a      	strb	r2, [r3, #8]
            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 8002190:	8c3b      	ldrh	r3, [r7, #32]
 8002192:	3301      	adds	r3, #1
 8002194:	843b      	strh	r3, [r7, #32]
 8002196:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002198:	3301      	adds	r3, #1
 800219a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800219c:	8c3a      	ldrh	r2, [r7, #32]
 800219e:	7ffb      	ldrb	r3, [r7, #31]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	429a      	cmp	r2, r3
 80021a4:	da04      	bge.n	80021b0 <enqueueTxFrames+0x16c>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	8c1b      	ldrh	r3, [r3, #32]
 80021aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d3e5      	bcc.n	800217c <enqueueTxFrames+0x138>
            }
            // tail byte
            sot_eot = (data_index == transfer->payload_len) ? (uint8_t)0x40 : sot_eot;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	8c1b      	ldrh	r3, [r3, #32]
 80021b4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d002      	beq.n	80021c0 <enqueueTxFrames+0x17c>
 80021ba:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80021be:	e000      	b.n	80021c2 <enqueueTxFrames+0x17e>
 80021c0:	2340      	movs	r3, #64	@ 0x40
 80021c2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            
            i = dlcToDataLength(dataLengthToDlc(i+1))-1;
 80021c6:	8c3b      	ldrh	r3, [r7, #32]
 80021c8:	3301      	adds	r3, #1
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff0a 	bl	8001fe6 <dataLengthToDlc>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fed7 	bl	8001f88 <dlcToDataLength>
 80021da:	4603      	mov	r3, r0
 80021dc:	3b01      	subs	r3, #1
 80021de:	843b      	strh	r3, [r7, #32]
            queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*transfer->inout_transfer_id & 31U));
 80021e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80021e4:	015b      	lsls	r3, r3, #5
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80021ec:	4313      	orrs	r3, r2
 80021ee:	b2d9      	uxtb	r1, r3
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	f003 031f 	and.w	r3, r3, #31
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	8c3b      	ldrh	r3, [r7, #32]
 80021fe:	430a      	orrs	r2, r1
 8002200:	b2d1      	uxtb	r1, r2
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4413      	add	r3, r2
 8002206:	460a      	mov	r2, r1
 8002208:	721a      	strb	r2, [r3, #8]
            queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	605a      	str	r2, [r3, #4]
            queue_item->frame.data_len = (uint8_t)(i + 1);
 8002214:	8c3b      	ldrh	r3, [r7, #32]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	3301      	adds	r3, #1
 800221a:	b2da      	uxtb	r2, r3
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	741a      	strb	r2, [r3, #16]
            queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
            queue_item->frame.canfd = transfer->canfd;
#endif
            pushTxQueue(ins, queue_item);
 8002220:	69b9      	ldr	r1, [r7, #24]
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 f81b 	bl	800225e <pushTxQueue>

            result++;
 8002228:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800222c:	b29b      	uxth	r3, r3
 800222e:	3301      	adds	r3, #1
 8002230:	b29b      	uxth	r3, r3
 8002232:	84fb      	strh	r3, [r7, #38]	@ 0x26
            toggle ^= 1;
 8002234:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002238:	f083 0301 	eor.w	r3, r3, #1
 800223c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            sot_eot = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        while (transfer->payload_len - data_index != 0)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	8c1b      	ldrh	r3, [r3, #32]
 800224a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800224c:	429a      	cmp	r2, r3
 800224e:	f47f af74 	bne.w	800213a <enqueueTxFrames+0xf6>
        }
    }

    return result;
 8002252:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 8002256:	4618      	mov	r0, r3
 8002258:	3728      	adds	r7, #40	@ 0x28
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <pushTxQueue>:

/**
 * Puts frame on on the TX queue. Higher priority placed first
 */
CANARD_INTERNAL void pushTxQueue(CanardInstance* ins, CanardTxQueueItem* item)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames

    if (ins->tx_queue == NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226c:	2b00      	cmp	r3, #0
 800226e:	d103      	bne.n	8002278 <pushTxQueue+0x1a>
    {
        ins->tx_queue = item;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	625a      	str	r2, [r3, #36]	@ 0x24
        return;
 8002276:	e034      	b.n	80022e2 <pushTxQueue+0x84>
    }

    CanardTxQueueItem* queue = ins->tx_queue;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227c:	60fb      	str	r3, [r7, #12]
    CanardTxQueueItem* previous = ins->tx_queue;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002282:	60bb      	str	r3, [r7, #8]

    while (queue != NULL)
 8002284:	e02a      	b.n	80022dc <pushTxQueue+0x7e>
    {
        if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	4619      	mov	r1, r3
 8002290:	4610      	mov	r0, r2
 8002292:	f000 f840 	bl	8002316 <isPriorityHigher>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d012      	beq.n	80022c2 <pushTxQueue+0x64>
        {
            if (queue == ins->tx_queue)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d106      	bne.n	80022b4 <pushTxQueue+0x56>
            {
                item->next = queue;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	601a      	str	r2, [r3, #0]
                ins->tx_queue = item;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	625a      	str	r2, [r3, #36]	@ 0x24
            else
            {
                previous->next = item;
                item->next = queue;
            }
            return;
 80022b2:	e016      	b.n	80022e2 <pushTxQueue+0x84>
                previous->next = item;
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	601a      	str	r2, [r3, #0]
                item->next = queue;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	601a      	str	r2, [r3, #0]
            return;
 80022c0:	e00f      	b.n	80022e2 <pushTxQueue+0x84>
        }
        else
        {
            if (queue->next == NULL)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d103      	bne.n	80022d2 <pushTxQueue+0x74>
            {
                queue->next = item;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	601a      	str	r2, [r3, #0]
                return;
 80022d0:	e007      	b.n	80022e2 <pushTxQueue+0x84>
            }
            else
            {
                previous = queue;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	60bb      	str	r3, [r7, #8]
                queue = queue->next;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	60fb      	str	r3, [r7, #12]
    while (queue != NULL)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1d1      	bne.n	8002286 <pushTxQueue+0x28>
            }
        }
    }
}
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <createTxItem>:

/**
 * Creates new tx queue item from allocator
 */
CANARD_INTERNAL CanardTxQueueItem* createTxItem(CanardPoolAllocator* allocator)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 fd0f 	bl	8002d14 <allocateBlock>
 80022f6:	60f8      	str	r0, [r7, #12]
    if (item == NULL)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <createTxItem+0x1a>
    {
        return NULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	e005      	b.n	800230e <createTxItem+0x26>
    }
    memset(item, 0, sizeof(*item));
 8002302:	2214      	movs	r2, #20
 8002304:	2100      	movs	r1, #0
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f008 fc3a 	bl	800ab80 <memset>
    return item;
 800230c:	68fb      	ldr	r3, [r7, #12]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <isPriorityHigher>:

/**
 * Returns true if priority of rhs is higher than id
 */
CANARD_INTERNAL bool isPriorityHigher(uint32_t rhs, uint32_t id)
{
 8002316:	b480      	push	{r7}
 8002318:	b089      	sub	sp, #36	@ 0x24
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
    const uint32_t clean_id = id & CANARD_CAN_EXT_ID_MASK;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8002326:	61fb      	str	r3, [r7, #28]
    const uint32_t rhs_clean_id = rhs & CANARD_CAN_EXT_ID_MASK;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800232e:	61bb      	str	r3, [r7, #24]

    /*
     * STD vs EXT - if 11 most significant bits are the same, EXT loses.
     */
    const bool ext = (id & CANARD_CAN_FRAME_EFF) != 0;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	0fdb      	lsrs	r3, r3, #31
 8002334:	75fb      	strb	r3, [r7, #23]
    const bool rhs_ext = (rhs & CANARD_CAN_FRAME_EFF) != 0;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	0fdb      	lsrs	r3, r3, #31
 800233a:	75bb      	strb	r3, [r7, #22]
    if (ext != rhs_ext)
 800233c:	7dfa      	ldrb	r2, [r7, #23]
 800233e:	7dbb      	ldrb	r3, [r7, #22]
 8002340:	429a      	cmp	r2, r3
 8002342:	d01d      	beq.n	8002380 <isPriorityHigher+0x6a>
    {
        uint32_t arb11 = ext ? (clean_id >> 18U) : clean_id;
 8002344:	7dfb      	ldrb	r3, [r7, #23]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <isPriorityHigher+0x3a>
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	0c9b      	lsrs	r3, r3, #18
 800234e:	e000      	b.n	8002352 <isPriorityHigher+0x3c>
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	613b      	str	r3, [r7, #16]
        uint32_t rhs_arb11 = rhs_ext ? (rhs_clean_id >> 18U) : rhs_clean_id;
 8002354:	7dbb      	ldrb	r3, [r7, #22]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <isPriorityHigher+0x4a>
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	0c9b      	lsrs	r3, r3, #18
 800235e:	e000      	b.n	8002362 <isPriorityHigher+0x4c>
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	60fb      	str	r3, [r7, #12]
        if (arb11 != rhs_arb11)
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	429a      	cmp	r2, r3
 800236a:	d007      	beq.n	800237c <isPriorityHigher+0x66>
        {
            return arb11 < rhs_arb11;
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	429a      	cmp	r2, r3
 8002372:	bf34      	ite	cc
 8002374:	2301      	movcc	r3, #1
 8002376:	2300      	movcs	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	e022      	b.n	80023c2 <isPriorityHigher+0xac>
        }
        else
        {
            return rhs_ext;
 800237c:	7dbb      	ldrb	r3, [r7, #22]
 800237e:	e020      	b.n	80023c2 <isPriorityHigher+0xac>
    }

    /*
     * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
     */
    const bool rtr = (id & CANARD_CAN_FRAME_RTR) != 0;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	bf14      	ite	ne
 800238a:	2301      	movne	r3, #1
 800238c:	2300      	moveq	r3, #0
 800238e:	757b      	strb	r3, [r7, #21]
    const bool rhs_rtr = (rhs & CANARD_CAN_FRAME_RTR) != 0;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	bf14      	ite	ne
 800239a:	2301      	movne	r3, #1
 800239c:	2300      	moveq	r3, #0
 800239e:	753b      	strb	r3, [r7, #20]
    if (clean_id == rhs_clean_id && rtr != rhs_rtr)
 80023a0:	69fa      	ldr	r2, [r7, #28]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d105      	bne.n	80023b4 <isPriorityHigher+0x9e>
 80023a8:	7d7a      	ldrb	r2, [r7, #21]
 80023aa:	7d3b      	ldrb	r3, [r7, #20]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d001      	beq.n	80023b4 <isPriorityHigher+0x9e>
    {
        return rhs_rtr;
 80023b0:	7d3b      	ldrb	r3, [r7, #20]
 80023b2:	e006      	b.n	80023c2 <isPriorityHigher+0xac>
    }

    /*
     * Plain ID arbitration - greater value loses.
     */
    return clean_id < rhs_clean_id;
 80023b4:	69fa      	ldr	r2, [r7, #28]
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	bf34      	ite	cc
 80023bc:	2301      	movcc	r3, #1
 80023be:	2300      	movcs	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3724      	adds	r7, #36	@ 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <prepareForNextTransfer>:

/**
 * preps the rx state for the next transfer. does not delete the state
 */
CANARD_INTERNAL void prepareForNextTransfer(CanardRxState* state)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(state->buffer_blocks == CANARD_BUFFER_IDX_NONE);
    state->transfer_id++;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	7ddb      	ldrb	r3, [r3, #23]
 80023da:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	3301      	adds	r3, #1
 80023e2:	f003 031f 	and.w	r3, r3, #31
 80023e6:	b2d9      	uxtb	r1, r3
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	7dd3      	ldrb	r3, [r2, #23]
 80023ec:	f361 0386 	bfi	r3, r1, #2, #5
 80023f0:	75d3      	strb	r3, [r2, #23]
    state->payload_len = 0;
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	8ad3      	ldrh	r3, [r2, #22]
 80023f6:	f36f 0309 	bfc	r3, #0, #10
 80023fa:	82d3      	strh	r3, [r2, #22]
    state->next_toggle = 0;
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	7dd3      	ldrb	r3, [r2, #23]
 8002400:	f36f 13c7 	bfc	r3, #7, #1
 8002404:	75d3      	strb	r3, [r2, #23]
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <extractDataType>:

/**
 * returns data type from id
 */
uint16_t extractDataType(uint32_t id)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b084      	sub	sp, #16
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
    if (extractTransferType(id) == CanardTransferTypeBroadcast)
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f819 	bl	8002452 <extractTransferType>
 8002420:	4603      	mov	r3, r0
 8002422:	2b02      	cmp	r3, #2
 8002424:	d10e      	bne.n	8002444 <extractDataType+0x32>
    {
        uint16_t dtid = MSG_TYPE_FROM_ID(id);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	81fb      	strh	r3, [r7, #14]
        if (SOURCE_ID_FROM_ID(id) == CANARD_BROADCAST_NODE_ID)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	b2db      	uxtb	r3, r3
 8002430:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002434:	2b00      	cmp	r3, #0
 8002436:	d103      	bne.n	8002440 <extractDataType+0x2e>
        {
            dtid &= (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;
 8002438:	89fb      	ldrh	r3, [r7, #14]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	81fb      	strh	r3, [r7, #14]
        }
        return dtid;
 8002440:	89fb      	ldrh	r3, [r7, #14]
 8002442:	e002      	b.n	800244a <extractDataType+0x38>
    }
    else
    {
        return (uint16_t) SRV_TYPE_FROM_ID(id);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	0c1b      	lsrs	r3, r3, #16
 8002448:	b2db      	uxtb	r3, r3
    }
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <extractTransferType>:

/**
 * returns transfer type from id
 */
CanardTransferType extractTransferType(uint32_t id)
{
 8002452:	b480      	push	{r7}
 8002454:	b085      	sub	sp, #20
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
    const bool is_service = SERVICE_NOT_MSG_FROM_ID(id);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf14      	ite	ne
 8002464:	2301      	movne	r3, #1
 8002466:	2300      	moveq	r3, #0
 8002468:	73fb      	strb	r3, [r7, #15]
    if (!is_service)
 800246a:	7bfb      	ldrb	r3, [r7, #15]
 800246c:	f083 0301 	eor.w	r3, r3, #1
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <extractTransferType+0x28>
    {
        return CanardTransferTypeBroadcast;
 8002476:	2302      	movs	r3, #2
 8002478:	e009      	b.n	800248e <extractTransferType+0x3c>
    }
    else if (REQUEST_NOT_RESPONSE_FROM_ID(id) == 1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	0bdb      	lsrs	r3, r3, #15
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <extractTransferType+0x3a>
    {
        return CanardTransferTypeRequest;
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <extractTransferType+0x3c>
    }
    else
    {
        return CanardTransferTypeResponse;
 800248c:	2300      	movs	r3, #0
    }
}
 800248e:	4618      	mov	r0, r3
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <traverseRxStates>:
/**
 * Traverses the list of CanardRxState's and returns a pointer to the CanardRxState
 * with either the Id or a new one at the end
 */
CANARD_INTERNAL CanardRxState* traverseRxStates(CanardInstance* ins, uint32_t transfer_descriptor)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	6039      	str	r1, [r7, #0]
    CanardRxState* states = ins->rx_states;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	60fb      	str	r3, [r7, #12]

    if (states == NULL) // initialize CanardRxStates
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d110      	bne.n	80024d2 <traverseRxStates+0x38>
    {
        states = createRxState(&ins->allocator, transfer_descriptor);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	330c      	adds	r3, #12
 80024b4:	6839      	ldr	r1, [r7, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 f865 	bl	8002586 <createRxState>
 80024bc:	60f8      	str	r0, [r7, #12]

        if(states == NULL)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <traverseRxStates+0x2e>
        {
            return NULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	e013      	b.n	80024f0 <traverseRxStates+0x56>
        }

        ins->rx_states = states;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	621a      	str	r2, [r3, #32]
        return states;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	e00e      	b.n	80024f0 <traverseRxStates+0x56>
    }

    states = findRxState(ins, transfer_descriptor);
 80024d2:	6839      	ldr	r1, [r7, #0]
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f80f 	bl	80024f8 <findRxState>
 80024da:	60f8      	str	r0, [r7, #12]
    if (states != NULL)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <traverseRxStates+0x4c>
    {
        return states;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	e004      	b.n	80024f0 <traverseRxStates+0x56>
    }
    else
    {
        return prependRxState(ins, transfer_descriptor);
 80024e6:	6839      	ldr	r1, [r7, #0]
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f827 	bl	800253c <prependRxState>
 80024ee:	4603      	mov	r3, r0
    }
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <findRxState>:

/**
 * returns pointer to the rx state of transfer descriptor or null if not found
 */
CANARD_INTERNAL CanardRxState* findRxState(CanardInstance *ins, uint32_t transfer_descriptor)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
    CanardRxState *state = ins->rx_states;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	60fb      	str	r3, [r7, #12]
    while (state != NULL)
 8002508:	e010      	b.n	800252c <findRxState+0x34>
    {
        if (state->dtid_tt_snid_dnid == transfer_descriptor)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d101      	bne.n	8002518 <findRxState+0x20>
        {
            return state;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	e00d      	b.n	8002534 <findRxState+0x3c>
        }
        state = canardRxFromIdx(&ins->allocator, state->next);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f103 020c 	add.w	r2, r3, #12
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4619      	mov	r1, r3
 8002524:	4610      	mov	r0, r2
 8002526:	f7fe fdd3 	bl	80010d0 <canardRxFromIdx>
 800252a:	60f8      	str	r0, [r7, #12]
    while (state != NULL)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1eb      	bne.n	800250a <findRxState+0x12>
    }
    return NULL;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <prependRxState>:

/**
 * prepends rx state to the canard instance rx_states
 */
CANARD_INTERNAL CanardRxState* prependRxState(CanardInstance* ins, uint32_t transfer_descriptor)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
    CanardRxState* state = createRxState(&ins->allocator, transfer_descriptor);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	330c      	adds	r3, #12
 800254a:	6839      	ldr	r1, [r7, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f000 f81a 	bl	8002586 <createRxState>
 8002552:	60f8      	str	r0, [r7, #12]

    if(state == NULL)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <prependRxState+0x22>
    {
        return NULL;
 800255a:	2300      	movs	r3, #0
 800255c:	e00f      	b.n	800257e <prependRxState+0x42>
    }

    state->next = canardRxToIdx(&ins->allocator, ins->rx_states);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f103 020c 	add.w	r2, r3, #12
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	4619      	mov	r1, r3
 800256a:	4610      	mov	r0, r2
 800256c:	f7fe fdbc 	bl	80010e8 <canardRxToIdx>
 8002570:	4602      	mov	r2, r0
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	601a      	str	r2, [r3, #0]
    ins->rx_states = state;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	621a      	str	r2, [r3, #32]
    return state;
 800257c:	68fb      	ldr	r3, [r7, #12]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <createRxState>:

CANARD_INTERNAL CanardRxState* createRxState(CanardPoolAllocator* allocator, uint32_t transfer_descriptor)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b08c      	sub	sp, #48	@ 0x30
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	6039      	str	r1, [r7, #0]
    CanardRxState init = {
 8002590:	f107 0308 	add.w	r3, r7, #8
 8002594:	2220      	movs	r2, #32
 8002596:	2100      	movs	r1, #0
 8002598:	4618      	mov	r0, r3
 800259a:	f008 faf1 	bl	800ab80 <memset>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	61bb      	str	r3, [r7, #24]
        .next = CANARD_BUFFER_IDX_NONE,
        .buffer_blocks = CANARD_BUFFER_IDX_NONE,
        .dtid_tt_snid_dnid = transfer_descriptor
    };

    CanardRxState* state = (CanardRxState*) allocateBlock(allocator);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 fbb6 	bl	8002d14 <allocateBlock>
 80025a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (state == NULL)
 80025aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <createRxState+0x2e>
    {
        return NULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	e007      	b.n	80025c4 <createRxState+0x3e>
    }
    memcpy(state, &init, sizeof(*state));
 80025b4:	f107 0308 	add.w	r3, r7, #8
 80025b8:	2220      	movs	r2, #32
 80025ba:	4619      	mov	r1, r3
 80025bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80025be:	f008 fb8c 	bl	800acda <memcpy>

    return state;
 80025c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3730      	adds	r7, #48	@ 0x30
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <releaseStatePayload>:

CANARD_INTERNAL uint64_t releaseStatePayload(CanardInstance* ins, CanardRxState* rxstate)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 80025d6:	e01b      	b.n	8002610 <releaseStatePayload+0x44>
    {
        CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rxstate->buffer_blocks);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f103 020c 	add.w	r2, r3, #12
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4619      	mov	r1, r3
 80025e4:	4610      	mov	r0, r2
 80025e6:	f7fe fd5b 	bl	80010a0 <canardBufferFromIdx>
 80025ea:	60f8      	str	r0, [r7, #12]
        CanardBufferBlock* const temp = block->next;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60bb      	str	r3, [r7, #8]
        freeBlock(&ins->allocator, block);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	330c      	adds	r3, #12
 80025f6:	68f9      	ldr	r1, [r7, #12]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 fbb4 	bl	8002d66 <freeBlock>
        rxstate->buffer_blocks = canardBufferToIdx(&ins->allocator, temp);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	330c      	adds	r3, #12
 8002602:	68b9      	ldr	r1, [r7, #8]
 8002604:	4618      	mov	r0, r3
 8002606:	f7fe fd57 	bl	80010b8 <canardBufferToIdx>
 800260a:	4602      	mov	r2, r0
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	605a      	str	r2, [r3, #4]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1df      	bne.n	80025d8 <releaseStatePayload+0xc>
    }
    rxstate->payload_len = 0;
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	8ad3      	ldrh	r3, [r2, #22]
 800261c:	f36f 0309 	bfc	r3, #0, #10
 8002620:	82d3      	strh	r3, [r2, #22]
    return CANARD_OK;
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
}
 800262a:	4610      	mov	r0, r2
 800262c:	4619      	mov	r1, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <bufferBlockPushBytes>:
 */
CANARD_INTERNAL int16_t bufferBlockPushBytes(CanardPoolAllocator* allocator,
                                             CanardRxState* state,
                                             const uint8_t* data,
                                             uint8_t data_len)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	@ 0x28
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	70fb      	strb	r3, [r7, #3]
    uint16_t data_index = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // if head is not full, add data to head
    if ((CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE - state->payload_len) > 0)
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	8adb      	ldrh	r3, [r3, #22]
 800264a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800264e:	b29b      	uxth	r3, r3
 8002650:	2b05      	cmp	r3, #5
 8002652:	d036      	beq.n	80026c2 <bufferBlockPushBytes+0x8e>
    {
        for (uint16_t i = (uint16_t)state->payload_len;
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	8adb      	ldrh	r3, [r3, #22]
 8002658:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800265c:	b29b      	uxth	r3, r3
 800265e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002660:	e00e      	b.n	8002680 <bufferBlockPushBytes+0x4c>
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
             i++, data_index++)
        {
            state->buffer_head[i] = data[data_index];
 8002662:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	441a      	add	r2, r3
 8002668:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800266a:	7811      	ldrb	r1, [r2, #0]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	4413      	add	r3, r2
 8002670:	460a      	mov	r2, r1
 8002672:	76da      	strb	r2, [r3, #27]
             i++, data_index++)
 8002674:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002676:	3301      	adds	r3, #1
 8002678:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800267a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800267c:	3301      	adds	r3, #1
 800267e:	84fb      	strh	r3, [r7, #38]	@ 0x26
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
 8002680:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002682:	2b04      	cmp	r3, #4
 8002684:	d804      	bhi.n	8002690 <bufferBlockPushBytes+0x5c>
 8002686:	78fb      	ldrb	r3, [r7, #3]
 8002688:	b29b      	uxth	r3, r3
 800268a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800268c:	429a      	cmp	r2, r3
 800268e:	d3e8      	bcc.n	8002662 <bufferBlockPushBytes+0x2e>
        }
        if (data_index >= data_len)
 8002690:	78fb      	ldrb	r3, [r7, #3]
 8002692:	b29b      	uxth	r3, r3
 8002694:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002696:	429a      	cmp	r2, r3
 8002698:	d313      	bcc.n	80026c2 <bufferBlockPushBytes+0x8e>
        {
            state->payload_len =
                (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	8adb      	ldrh	r3, [r3, #22]
 800269e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	78fb      	ldrb	r3, [r7, #3]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	4413      	add	r3, r2
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026b2:	b299      	uxth	r1, r3
            state->payload_len =
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	8ad3      	ldrh	r3, [r2, #22]
 80026b8:	f361 0309 	bfi	r3, r1, #0, #10
 80026bc:	82d3      	strh	r3, [r2, #22]
            return 1;
 80026be:	2301      	movs	r3, #1
 80026c0:	e0ae      	b.n	8002820 <bufferBlockPushBytes+0x1ec>
        }
    } // head is full.

    uint16_t index_at_nth_block =
        (uint16_t)(((state->payload_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) % CANARD_BUFFER_BLOCK_DATA_SIZE);
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	8adb      	ldrh	r3, [r3, #22]
 80026c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	1f5a      	subs	r2, r3, #5
 80026ce:	0893      	lsrs	r3, r2, #2
 80026d0:	4955      	ldr	r1, [pc, #340]	@ (8002828 <bufferBlockPushBytes+0x1f4>)
 80026d2:	fba1 3103 	umull	r3, r1, r1, r3
 80026d6:	460b      	mov	r3, r1
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	1a5b      	subs	r3, r3, r1
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	1ad3      	subs	r3, r2, r3
    uint16_t index_at_nth_block =
 80026e0:	847b      	strh	r3, [r7, #34]	@ 0x22

    // get to current block
    CanardBufferBlock* block = NULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]

    // buffer blocks uninitialized
    if (state->buffer_blocks == CANARD_BUFFER_IDX_NONE)
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d113      	bne.n	8002716 <bufferBlockPushBytes+0xe2>
    {
        block = createBufferBlock(allocator);
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 f89c 	bl	800282c <createBufferBlock>
 80026f4:	61f8      	str	r0, [r7, #28]
        state->buffer_blocks = canardBufferToIdx(allocator, block);
 80026f6:	69f9      	ldr	r1, [r7, #28]
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f7fe fcdd 	bl	80010b8 <canardBufferToIdx>
 80026fe:	4602      	mov	r2, r0
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	605a      	str	r2, [r3, #4]
        if (block == NULL)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d102      	bne.n	8002710 <bufferBlockPushBytes+0xdc>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 800270a:	f06f 0302 	mvn.w	r3, #2
 800270e:	e087      	b.n	8002820 <bufferBlockPushBytes+0x1ec>
        }

        index_at_nth_block = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002714:	e06c      	b.n	80027f0 <bufferBlockPushBytes+0x1bc>
    }
    else
    {
        uint16_t nth_block = 1;
 8002716:	2301      	movs	r3, #1
 8002718:	837b      	strh	r3, [r7, #26]

        // get to block
        block = canardBufferFromIdx(allocator, state->buffer_blocks);
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4619      	mov	r1, r3
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f7fe fcbd 	bl	80010a0 <canardBufferFromIdx>
 8002726:	61f8      	str	r0, [r7, #28]
        while (block->next != NULL)
 8002728:	e005      	b.n	8002736 <bufferBlockPushBytes+0x102>
        {
            nth_block++;
 800272a:	8b7b      	ldrh	r3, [r7, #26]
 800272c:	3301      	adds	r3, #1
 800272e:	837b      	strh	r3, [r7, #26]
            block = block->next;
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	61fb      	str	r3, [r7, #28]
        while (block->next != NULL)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f5      	bne.n	800272a <bufferBlockPushBytes+0xf6>
        }

        const uint16_t num_buffer_blocks =
            (uint16_t) (((((uint32_t)state->payload_len + data_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) /
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	8adb      	ldrh	r3, [r3, #22]
 8002742:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002746:	b29b      	uxth	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	78fb      	ldrb	r3, [r7, #3]
 800274c:	4413      	add	r3, r2
 800274e:	3b05      	subs	r3, #5
 8002750:	089b      	lsrs	r3, r3, #2
 8002752:	4a35      	ldr	r2, [pc, #212]	@ (8002828 <bufferBlockPushBytes+0x1f4>)
 8002754:	fba2 2303 	umull	r2, r3, r2, r3
 8002758:	b29b      	uxth	r3, r3
        const uint16_t num_buffer_blocks =
 800275a:	3301      	adds	r3, #1
 800275c:	82fb      	strh	r3, [r7, #22]
                         CANARD_BUFFER_BLOCK_DATA_SIZE) + 1U);

        if (num_buffer_blocks > nth_block && index_at_nth_block == 0)
 800275e:	8afa      	ldrh	r2, [r7, #22]
 8002760:	8b7b      	ldrh	r3, [r7, #26]
 8002762:	429a      	cmp	r2, r3
 8002764:	d944      	bls.n	80027f0 <bufferBlockPushBytes+0x1bc>
 8002766:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002768:	2b00      	cmp	r3, #0
 800276a:	d141      	bne.n	80027f0 <bufferBlockPushBytes+0x1bc>
        {
            block->next = createBufferBlock(allocator);
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 f85d 	bl	800282c <createBufferBlock>
 8002772:	4602      	mov	r2, r0
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d102      	bne.n	8002786 <bufferBlockPushBytes+0x152>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8002780:	f06f 0302 	mvn.w	r3, #2
 8002784:	e04c      	b.n	8002820 <bufferBlockPushBytes+0x1ec>
            }
            block = block->next;
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	61fb      	str	r3, [r7, #28]
        }
    }

    // add data to current block until it becomes full, add new block if necessary
    while (data_index < data_len)
 800278c:	e030      	b.n	80027f0 <bufferBlockPushBytes+0x1bc>
    {
        for (uint16_t i = index_at_nth_block;
 800278e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002790:	833b      	strh	r3, [r7, #24]
 8002792:	e00e      	b.n	80027b2 <bufferBlockPushBytes+0x17e>
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
             i++, data_index++)
        {
            block->data[i] = data[data_index];
 8002794:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	441a      	add	r2, r3
 800279a:	8b3b      	ldrh	r3, [r7, #24]
 800279c:	7811      	ldrb	r1, [r2, #0]
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	4413      	add	r3, r2
 80027a2:	460a      	mov	r2, r1
 80027a4:	711a      	strb	r2, [r3, #4]
             i++, data_index++)
 80027a6:	8b3b      	ldrh	r3, [r7, #24]
 80027a8:	3301      	adds	r3, #1
 80027aa:	833b      	strh	r3, [r7, #24]
 80027ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80027ae:	3301      	adds	r3, #1
 80027b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
 80027b2:	8b3b      	ldrh	r3, [r7, #24]
 80027b4:	2b1b      	cmp	r3, #27
 80027b6:	d804      	bhi.n	80027c2 <bufferBlockPushBytes+0x18e>
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80027be:	429a      	cmp	r2, r3
 80027c0:	d3e8      	bcc.n	8002794 <bufferBlockPushBytes+0x160>
        }

        if (data_index < data_len)
 80027c2:	78fb      	ldrb	r3, [r7, #3]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d211      	bcs.n	80027f0 <bufferBlockPushBytes+0x1bc>
        {
            block->next = createBufferBlock(allocator);
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 f82d 	bl	800282c <createBufferBlock>
 80027d2:	4602      	mov	r2, r0
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d102      	bne.n	80027e6 <bufferBlockPushBytes+0x1b2>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 80027e0:	f06f 0302 	mvn.w	r3, #2
 80027e4:	e01c      	b.n	8002820 <bufferBlockPushBytes+0x1ec>
            }
            block = block->next;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	61fb      	str	r3, [r7, #28]
            index_at_nth_block = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	847b      	strh	r3, [r7, #34]	@ 0x22
    while (data_index < data_len)
 80027f0:	78fb      	ldrb	r3, [r7, #3]
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d3c9      	bcc.n	800278e <bufferBlockPushBytes+0x15a>
        }
    }

    state->payload_len = (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	8adb      	ldrh	r3, [r3, #22]
 80027fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002802:	b29b      	uxth	r3, r3
 8002804:	461a      	mov	r2, r3
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	b29b      	uxth	r3, r3
 800280a:	4413      	add	r3, r2
 800280c:	b29b      	uxth	r3, r3
 800280e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002812:	b299      	uxth	r1, r3
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	8ad3      	ldrh	r3, [r2, #22]
 8002818:	f361 0309 	bfi	r3, r1, #0, #10
 800281c:	82d3      	strh	r3, [r2, #22]

    return 1;
 800281e:	2301      	movs	r3, #1
}
 8002820:	4618      	mov	r0, r3
 8002822:	3728      	adds	r7, #40	@ 0x28
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	24924925 	.word	0x24924925

0800282c <createBufferBlock>:

CANARD_INTERNAL CanardBufferBlock* createBufferBlock(CanardPoolAllocator* allocator)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
    CanardBufferBlock* block = (CanardBufferBlock*) allocateBlock(allocator);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 fa6d 	bl	8002d14 <allocateBlock>
 800283a:	60f8      	str	r0, [r7, #12]
    if (block == NULL)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <createBufferBlock+0x1a>
    {
        return NULL;
 8002842:	2300      	movs	r3, #0
 8002844:	e003      	b.n	800284e <createBufferBlock+0x22>
    }
    block->next = NULL;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
    return block;
 800284c:	68fb      	ldr	r3, [r7, #12]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <copyBitArray>:
/**
 * Bit array copy routine, originally developed by Ben Dyer for Libuavcan. Thanks Ben.
 */
void copyBitArray(const uint8_t* src, uint32_t src_offset, uint32_t src_len,
                        uint8_t* dst, uint32_t dst_offset)
{
 8002856:	b480      	push	{r7}
 8002858:	b089      	sub	sp, #36	@ 0x24
 800285a:	af00      	add	r7, sp, #0
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(src_len > 0U);

    // Normalizing inputs
    src += src_offset / 8U;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	08db      	lsrs	r3, r3, #3
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4413      	add	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
    dst += dst_offset / 8U;
 800286e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002870:	08db      	lsrs	r3, r3, #3
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	4413      	add	r3, r2
 8002876:	603b      	str	r3, [r7, #0]

    src_offset %= 8U;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	60bb      	str	r3, [r7, #8]
    dst_offset %= 8U;
 8002880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	62bb      	str	r3, [r7, #40]	@ 0x28

    const size_t last_bit = src_offset + src_len;
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4413      	add	r3, r2
 800288e:	61fb      	str	r3, [r7, #28]
    while (last_bit - src_offset)
 8002890:	e04d      	b.n	800292e <copyBitArray+0xd8>
    {
        const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	b2db      	uxtb	r3, r3
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	76fb      	strb	r3, [r7, #27]
        const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 800289c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	76bb      	strb	r3, [r7, #26]

        const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
 80028a6:	7eba      	ldrb	r2, [r7, #26]
 80028a8:	7efb      	ldrb	r3, [r7, #27]
 80028aa:	4293      	cmp	r3, r2
 80028ac:	bf38      	it	cc
 80028ae:	4613      	movcc	r3, r2
 80028b0:	767b      	strb	r3, [r7, #25]
        const uint32_t copy_bits = (uint32_t)MIN(last_bit - src_offset, 8U - max_offset);
 80028b2:	7e7b      	ldrb	r3, [r7, #25]
 80028b4:	f1c3 0208 	rsb	r2, r3, #8
 80028b8:	69f9      	ldr	r1, [r7, #28]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	1acb      	subs	r3, r1, r3
 80028be:	4293      	cmp	r3, r2
 80028c0:	bf28      	it	cs
 80028c2:	4613      	movcs	r3, r2
 80028c4:	617b      	str	r3, [r7, #20]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset)&0xFF;

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask))&0xFF;
#else
        const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
 80028c6:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	fa22 f303 	lsr.w	r3, r2, r3
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	461a      	mov	r2, r3
 80028d4:	7ebb      	ldrb	r3, [r7, #26]
 80028d6:	fa42 f303 	asr.w	r3, r2, r3
 80028da:	74fb      	strb	r3, [r7, #19]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset);
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	08db      	lsrs	r3, r3, #3
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4413      	add	r3, r2
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	7efb      	ldrb	r3, [r7, #27]
 80028ea:	409a      	lsls	r2, r3
 80028ec:	7ebb      	ldrb	r3, [r7, #26]
 80028ee:	fa22 f303 	lsr.w	r3, r2, r3
 80028f2:	74bb      	strb	r3, [r7, #18]

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 80028f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f6:	08db      	lsrs	r3, r3, #3
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	4413      	add	r3, r2
 80028fc:	781a      	ldrb	r2, [r3, #0]
 80028fe:	7cfb      	ldrb	r3, [r7, #19]
 8002900:	43db      	mvns	r3, r3
 8002902:	b2db      	uxtb	r3, r3
 8002904:	4013      	ands	r3, r2
 8002906:	b2d9      	uxtb	r1, r3
 8002908:	7cba      	ldrb	r2, [r7, #18]
 800290a:	7cfb      	ldrb	r3, [r7, #19]
 800290c:	4013      	ands	r3, r2
 800290e:	b2da      	uxtb	r2, r3
        dst[dst_offset / 8U] =
 8002910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002912:	08db      	lsrs	r3, r3, #3
 8002914:	6838      	ldr	r0, [r7, #0]
 8002916:	4403      	add	r3, r0
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8002918:	430a      	orrs	r2, r1
 800291a:	b2d2      	uxtb	r2, r2
        dst[dst_offset / 8U] =
 800291c:	701a      	strb	r2, [r3, #0]
#endif

        src_offset += copy_bits;
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	4413      	add	r3, r2
 8002924:	60bb      	str	r3, [r7, #8]
        dst_offset += copy_bits;
 8002926:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	4413      	add	r3, r2
 800292c:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (last_bit - src_offset)
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	429a      	cmp	r2, r3
 8002934:	d1ad      	bne.n	8002892 <copyBitArray+0x3c>
    }
}
 8002936:	bf00      	nop
 8002938:	bf00      	nop
 800293a:	3724      	adds	r7, #36	@ 0x24
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <descatterTransferPayload>:

CANARD_INTERNAL int16_t descatterTransferPayload(const CanardRxTransfer* transfer,
                                                 uint32_t bit_offset,
                                                 uint8_t bit_length,
                                                 void* output)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b090      	sub	sp, #64	@ 0x40
 8002948:	af02      	add	r7, sp, #8
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	4613      	mov	r3, r2
 8002952:	71fb      	strb	r3, [r7, #7]
    CANARD_ASSERT(transfer != 0);

    if (bit_offset >= transfer->payload_len * 8)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8a9b      	ldrh	r3, [r3, #20]
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	461a      	mov	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4293      	cmp	r3, r2
 8002960:	d301      	bcc.n	8002966 <descatterTransferPayload+0x22>
    {
        return 0;       // Out of range, reading zero bits
 8002962:	2300      	movs	r3, #0
 8002964:	e0df      	b.n	8002b26 <descatterTransferPayload+0x1e2>
    }

    if (bit_offset + bit_length > transfer->payload_len * 8)
 8002966:	79fa      	ldrb	r2, [r7, #7]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4413      	add	r3, r2
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	8a92      	ldrh	r2, [r2, #20]
 8002970:	00d2      	lsls	r2, r2, #3
 8002972:	4293      	cmp	r3, r2
 8002974:	d908      	bls.n	8002988 <descatterTransferPayload+0x44>
    {
        bit_length = (uint8_t)(transfer->payload_len * 8U - bit_offset);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8a9b      	ldrh	r3, [r3, #20]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	b2da      	uxtb	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	71fb      	strb	r3, [r7, #7]
    }

    CANARD_ASSERT(bit_length > 0);

    if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d104      	bne.n	800299a <descatterTransferPayload+0x56>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 80b9 	beq.w	8002b0c <descatterTransferPayload+0x1c8>
        /*
         * This part is hideously complicated and probably should be redesigned.
         * The objective here is to copy the requested number of bits from scattered storage into the temporary
         * local storage. We go through great pains to ensure that all corner cases are handled correctly.
         */
        uint32_t input_bit_offset = bit_offset;
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t output_bit_offset = 0;
 800299e:	2300      	movs	r3, #0
 80029a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        uint8_t remaining_bit_length = bit_length;
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

        // Reading head
        if (input_bit_offset < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8)
 80029aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ac:	2b27      	cmp	r3, #39	@ 0x27
 80029ae:	d82d      	bhi.n	8002a0c <descatterTransferPayload+0xc8>
        {
            const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
 80029b0:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80029b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029b6:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d305      	bcc.n	80029ca <descatterTransferPayload+0x86>
 80029be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	e001      	b.n	80029ce <descatterTransferPayload+0x8a>
 80029ca:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80029ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                                CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input_bit_offset);

            copyBitArray(&transfer->payload_head[0], input_bit_offset, amount, (uint8_t*) output, 0);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6898      	ldr	r0, [r3, #8]
 80029d6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80029da:	2300      	movs	r3, #0
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80029e2:	f7ff ff38 	bl	8002856 <copyBitArray>

            input_bit_offset += amount;
 80029e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80029ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80029ec:	4413      	add	r3, r2
 80029ee:	637b      	str	r3, [r7, #52]	@ 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + amount);
 80029f0:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80029f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80029f8:	4413      	add	r3, r2
 80029fa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 80029fe:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002a02:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
        }

        // Reading middle
        uint32_t remaining_bits = (uint32_t)(transfer->payload_len * 8U - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8a9b      	ldrh	r3, [r3, #20]
 8002a10:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8002a14:	3b05      	subs	r3, #5
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 8002a1a:	2328      	movs	r3, #40	@ 0x28
 8002a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
        const CanardBufferBlock* block = transfer->payload_middle;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	627b      	str	r3, [r7, #36]	@ 0x24

        while ((block != NULL) && (remaining_bit_length > 0))
 8002a24:	e044      	b.n	8002ab0 <descatterTransferPayload+0x16c>
        {
            CANARD_ASSERT(remaining_bits > 0);
            const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_SIZE * 8,
 8002a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a28:	2be0      	cmp	r3, #224	@ 0xe0
 8002a2a:	bf28      	it	cs
 8002a2c:	23e0      	movcs	r3, #224	@ 0xe0
 8002a2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a30:	4413      	add	r3, r2
 8002a32:	61fb      	str	r3, [r7, #28]
                                                                         remaining_bits);

            // Perform copy if we've reached the requested offset, otherwise jump over this block and try next
            if (block_end_bit_offset > input_bit_offset)
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d92e      	bls.n	8002a9a <descatterTransferPayload+0x156>
            {
                const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - input_bit_offset);
 8002a3c:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002a40:	69f9      	ldr	r1, [r7, #28]
 8002a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a44:	1acb      	subs	r3, r1, r3
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d306      	bcc.n	8002a58 <descatterTransferPayload+0x114>
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	e001      	b.n	8002a5c <descatterTransferPayload+0x118>
 8002a58:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002a5c:	76fb      	strb	r3, [r7, #27]

                CANARD_ASSERT(input_bit_offset >= block_bit_offset);
                const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 8002a5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	617b      	str	r3, [r7, #20]

                copyBitArray(&block->data[0], bit_offset_within_block, amount, (uint8_t*) output, output_bit_offset);
 8002a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a68:	1d18      	adds	r0, r3, #4
 8002a6a:	7efa      	ldrb	r2, [r7, #27]
 8002a6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6979      	ldr	r1, [r7, #20]
 8002a76:	f7ff feee 	bl	8002856 <copyBitArray>

                input_bit_offset += amount;
 8002a7a:	7efb      	ldrb	r3, [r7, #27]
 8002a7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a7e:	4413      	add	r3, r2
 8002a80:	637b      	str	r3, [r7, #52]	@ 0x34
                output_bit_offset = (uint8_t)(output_bit_offset + amount);
 8002a82:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8002a86:	7efb      	ldrb	r3, [r7, #27]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 8002a8e:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002a92:	7efb      	ldrb	r3, [r7, #27]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
            }

            CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
            remaining_bits -= block_end_bit_offset - block_bit_offset;
 8002a9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002aa2:	4413      	add	r3, r2
 8002aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            block_bit_offset = block_end_bit_offset;
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
            block = block->next;
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	627b      	str	r3, [r7, #36]	@ 0x24
        while ((block != NULL) && (remaining_bit_length > 0))
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <descatterTransferPayload+0x17a>
 8002ab6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1b3      	bne.n	8002a26 <descatterTransferPayload+0xe2>
        }

        CANARD_ASSERT(remaining_bit_length <= remaining_bits);

        // Reading tail
        if ((transfer->payload_tail != NULL) && (remaining_bit_length > 0))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d02c      	beq.n	8002b20 <descatterTransferPayload+0x1dc>
 8002ac6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d028      	beq.n	8002b20 <descatterTransferPayload+0x1dc>
        {
            CANARD_ASSERT(input_bit_offset >= block_bit_offset);
            const uint32_t offset = input_bit_offset - block_bit_offset;
 8002ace:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	613b      	str	r3, [r7, #16]

            copyBitArray(&transfer->payload_tail[0], offset, remaining_bit_length, (uint8_t*) output,
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6918      	ldr	r0, [r3, #16]
 8002ada:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002ade:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	6939      	ldr	r1, [r7, #16]
 8002ae8:	f7ff feb5 	bl	8002856 <copyBitArray>
                         output_bit_offset);

            input_bit_offset += remaining_bit_length;
 8002aec:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002af0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002af2:	4413      	add	r3, r2
 8002af4:	637b      	str	r3, [r7, #52]	@ 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
 8002af6:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8002afa:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002afe:	4413      	add	r3, r2
 8002b00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            remaining_bit_length = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    {
 8002b0a:	e009      	b.n	8002b20 <descatterTransferPayload+0x1dc>
        CANARD_ASSERT(output_bit_offset <= 64);
        CANARD_ASSERT(remaining_bit_length == 0);
    }
    else                                                                    // Single frame
    {
        copyBitArray(&transfer->payload_head[0], bit_offset, bit_length, (uint8_t*) output, 0);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6898      	ldr	r0, [r3, #8]
 8002b10:	79fa      	ldrb	r2, [r7, #7]
 8002b12:	2300      	movs	r3, #0
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	f7ff fe9c 	bl	8002856 <copyBitArray>
 8002b1e:	e000      	b.n	8002b22 <descatterTransferPayload+0x1de>
    {
 8002b20:	bf00      	nop
    }

    return bit_length;
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	b21b      	sxth	r3, r3
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3738      	adds	r7, #56	@ 0x38
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <isBigEndian>:

CANARD_INTERNAL bool isBigEndian(void)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
#else
        uint16_t a;
        uint8_t b[2];
#endif
    } u;
    u.a = 1;
 8002b34:	2301      	movs	r3, #1
 8002b36:	80bb      	strh	r3, [r7, #4]
    return u.b[1] == 1;                             // Some don't...
 8002b38:	797b      	ldrb	r3, [r7, #5]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	bf0c      	ite	eq
 8002b3e:	2301      	moveq	r3, #1
 8002b40:	2300      	movne	r3, #0
 8002b42:	b2db      	uxtb	r3, r3
#endif
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <swapByteOrder>:

CANARD_INTERNAL void swapByteOrder(void* data, unsigned size)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(data != NULL);

    uint8_t* const bytes = (uint8_t*) data;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	60fb      	str	r3, [r7, #12]

    size_t fwd = 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
    size_t rev = size - 1;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	3b01      	subs	r3, #1
 8002b66:	613b      	str	r3, [r7, #16]

    while (fwd < rev)
 8002b68:	e017      	b.n	8002b9a <swapByteOrder+0x4a>
    {
        const uint8_t x = bytes[fwd];
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	4413      	add	r3, r2
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	72fb      	strb	r3, [r7, #11]
        bytes[fwd] = bytes[rev];
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	441a      	add	r2, r3
 8002b7a:	68f9      	ldr	r1, [r7, #12]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	440b      	add	r3, r1
 8002b80:	7812      	ldrb	r2, [r2, #0]
 8002b82:	701a      	strb	r2, [r3, #0]
        bytes[rev] = x;
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4413      	add	r3, r2
 8002b8a:	7afa      	ldrb	r2, [r7, #11]
 8002b8c:	701a      	strb	r2, [r3, #0]
        fwd++;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	3301      	adds	r3, #1
 8002b92:	617b      	str	r3, [r7, #20]
        rev--;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	613b      	str	r3, [r7, #16]
    while (fwd < rev)
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d3e3      	bcc.n	8002b6a <swapByteOrder+0x1a>
    }
}
 8002ba2:	bf00      	nop
 8002ba4:	bf00      	nop
 8002ba6:	371c      	adds	r7, #28
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <crcAddByte>:

/*
 * CRC functions
 */
CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	460a      	mov	r2, r1
 8002bba:	80fb      	strh	r3, [r7, #6]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	717b      	strb	r3, [r7, #5]
    crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 8002bc0:	797b      	ldrb	r3, [r7, #5]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	021b      	lsls	r3, r3, #8
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	88fb      	ldrh	r3, [r7, #6]
 8002bca:	4053      	eors	r3, r2
 8002bcc:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	73fb      	strb	r3, [r7, #15]
 8002bd2:	e012      	b.n	8002bfa <crcAddByte+0x4a>
    {
        if (crc_val & 0x8000U)
 8002bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	da08      	bge.n	8002bee <crcAddByte+0x3e>
        {
            crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 8002bdc:	88fb      	ldrh	r3, [r7, #6]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8002be6:	f083 0301 	eor.w	r3, r3, #1
 8002bea:	80fb      	strh	r3, [r7, #6]
 8002bec:	e002      	b.n	8002bf4 <crcAddByte+0x44>
        }
        else
        {
            crc_val = (uint16_t) (crc_val << 1U);
 8002bee:	88fb      	ldrh	r3, [r7, #6]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	73fb      	strb	r3, [r7, #15]
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	2b07      	cmp	r3, #7
 8002bfe:	d9e9      	bls.n	8002bd4 <crcAddByte+0x24>
        }
    }
    return crc_val;
 8002c00:	88fb      	ldrh	r3, [r7, #6]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <crcAddSignature>:

CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
{
 8002c0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c10:	b087      	sub	sp, #28
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	4601      	mov	r1, r0
 8002c16:	e9c7 2300 	strd	r2, r3, [r7]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8002c1e:	2300      	movs	r3, #0
 8002c20:	82fb      	strh	r3, [r7, #22]
 8002c22:	e01b      	b.n	8002c5c <crcAddSignature+0x4e>
    {
        crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 8002c24:	8af9      	ldrh	r1, [r7, #22]
 8002c26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c2a:	f1c1 0620 	rsb	r6, r1, #32
 8002c2e:	f1a1 0020 	sub.w	r0, r1, #32
 8002c32:	fa22 f401 	lsr.w	r4, r2, r1
 8002c36:	fa03 f606 	lsl.w	r6, r3, r6
 8002c3a:	4334      	orrs	r4, r6
 8002c3c:	fa23 f000 	lsr.w	r0, r3, r0
 8002c40:	4304      	orrs	r4, r0
 8002c42:	fa23 f501 	lsr.w	r5, r3, r1
 8002c46:	b2e2      	uxtb	r2, r4
 8002c48:	89fb      	ldrh	r3, [r7, #14]
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff ffaf 	bl	8002bb0 <crcAddByte>
 8002c52:	4603      	mov	r3, r0
 8002c54:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8002c56:	8afb      	ldrh	r3, [r7, #22]
 8002c58:	3308      	adds	r3, #8
 8002c5a:	82fb      	strh	r3, [r7, #22]
 8002c5c:	8afb      	ldrh	r3, [r7, #22]
 8002c5e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c60:	d9e0      	bls.n	8002c24 <crcAddSignature+0x16>
    }
    return crc_val;
 8002c62:	89fb      	ldrh	r3, [r7, #14]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	371c      	adds	r7, #28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c6c <crcAdd>:

CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8002c7a:	e00a      	b.n	8002c92 <crcAdd+0x26>
    {
        crc_val = crcAddByte(crc_val, *bytes++);
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	60ba      	str	r2, [r7, #8]
 8002c82:	781a      	ldrb	r2, [r3, #0]
 8002c84:	89fb      	ldrh	r3, [r7, #14]
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff91 	bl	8002bb0 <crcAddByte>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	1e5a      	subs	r2, r3, #1
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1ef      	bne.n	8002c7c <crcAdd+0x10>
    }
    return crc_val;
 8002c9c:	89fb      	ldrh	r3, [r7, #14]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <initPoolAllocator>:
 *  Pool Allocator functions
 */
CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
                                       void* buf,
                                       uint16_t buf_len)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b089      	sub	sp, #36	@ 0x24
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	80fb      	strh	r3, [r7, #6]
    size_t current_index = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61fb      	str	r3, [r7, #28]
    CanardPoolAllocatorBlock *abuf = buf;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	617b      	str	r3, [r7, #20]
    allocator->arena = buf;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	611a      	str	r2, [r3, #16]
    CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	61bb      	str	r3, [r7, #24]
    while (current_index < buf_len)
 8002cc8:	e00b      	b.n	8002ce2 <initPoolAllocator+0x3c>
    {
        *current_block = &abuf[current_index];
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	015b      	lsls	r3, r3, #5
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	441a      	add	r2, r3
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	601a      	str	r2, [r3, #0]
        current_block = &((*current_block)->next);
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	61bb      	str	r3, [r7, #24]
        current_index++;
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	61fb      	str	r3, [r7, #28]
    while (current_index < buf_len)
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	69fa      	ldr	r2, [r7, #28]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d3ef      	bcc.n	8002cca <initPoolAllocator+0x24>
    }
    *current_block = NULL;
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]

    allocator->statistics.capacity_blocks = buf_len;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	88fa      	ldrh	r2, [r7, #6]
 8002cf4:	811a      	strh	r2, [r3, #8]
    allocator->statistics.current_usage_blocks = 0;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	815a      	strh	r2, [r3, #10]
    allocator->statistics.peak_usage_blocks = 0;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	819a      	strh	r2, [r3, #12]
    // user should initialize semaphore after the canardInit
    // or at first call of canard_allocate_sem_take
    allocator->semaphore = NULL;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
}
 8002d08:	bf00      	nop
 8002d0a:	3724      	adds	r7, #36	@ 0x24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <allocateBlock>:

CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    // Check if there are any blocks available in the free list.
    if (allocator->free_list == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <allocateBlock+0x14>
    {
#if CANARD_ALLOCATE_SEM
        canard_allocate_sem_give(allocator);
#endif
        return NULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	e018      	b.n	8002d5a <allocateBlock+0x46>
    }

    // Take first available block and prepares next block for use.
    void* result = allocator->free_list;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	60fb      	str	r3, [r7, #12]
    allocator->free_list = allocator->free_list->next;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	605a      	str	r2, [r3, #4]

    // Update statistics
    allocator->statistics.current_usage_blocks++;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	895b      	ldrh	r3, [r3, #10]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	815a      	strh	r2, [r3, #10]
    if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	899a      	ldrh	r2, [r3, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	895b      	ldrh	r3, [r3, #10]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d203      	bcs.n	8002d58 <allocateBlock+0x44>
    {
        allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	895a      	ldrh	r2, [r3, #10]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	819a      	strh	r2, [r3, #12]
    }
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
    return result;
 8002d58:	68fb      	ldr	r3, [r7, #12]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <freeBlock>:

CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b085      	sub	sp, #20
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	60fb      	str	r3, [r7, #12]

    block->next = allocator->free_list;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	601a      	str	r2, [r3, #0]
    allocator->free_list = block;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	605a      	str	r2, [r3, #4]

    CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
    allocator->statistics.current_usage_blocks--;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	895b      	ldrh	r3, [r3, #10]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	815a      	strh	r2, [r3, #10]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <canardSTM32Recieve>:
  *         This parameter can be a value of @arg FDCAN_Rx_location.
  * @param  rx_frame pointer to a CanardCANFrame structure where the received CAN message will be
  * 		stored.
  * @retval ret == 1: OK, ret < 0: CANARD_ERROR, ret == 0: Check hfdcan->ErrorCode
  */
int16_t canardSTM32Recieve(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, CanardCANFrame *const rx_frame) {
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b090      	sub	sp, #64	@ 0x40
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]
	if (rx_frame == NULL) {
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d102      	bne.n	8002db2 <canardSTM32Recieve+0x18>
		return -CANARD_ERROR_INVALID_ARGUMENT;
 8002dac:	f06f 0301 	mvn.w	r3, #1
 8002db0:	e033      	b.n	8002e1a <canardSTM32Recieve+0x80>
	}

	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	if (HAL_FDCAN_GetRxMessage(hfdcan, RxLocation, &RxHeader, RxData) == HAL_OK) {
 8002db2:	f107 0310 	add.w	r3, r7, #16
 8002db6:	f107 0218 	add.w	r2, r7, #24
 8002dba:	68b9      	ldr	r1, [r7, #8]
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f003 fa49 	bl	8006254 <HAL_FDCAN_GetRxMessage>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d127      	bne.n	8002e18 <canardSTM32Recieve+0x7e>
		//		printf("%02x", RxData[i]);
		//	}
		//	printf("\n");

		// Process ID to canard format
		rx_frame->id = RxHeader.Identifier;
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	601a      	str	r2, [r3, #0]

		if (RxHeader.IdType == FDCAN_EXTENDED_ID) { // canard will only process the message if it is extended ID
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dd4:	d105      	bne.n	8002de2 <canardSTM32Recieve+0x48>
			rx_frame->id |= CANARD_CAN_FRAME_EFF;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	601a      	str	r2, [r3, #0]
		}

		if (RxHeader.RxFrameType == FDCAN_REMOTE_FRAME) { // canard won't process the message if it is a remote frame
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002de8:	d105      	bne.n	8002df6 <canardSTM32Recieve+0x5c>
			rx_frame->id |= CANARD_CAN_FRAME_RTR;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	601a      	str	r2, [r3, #0]
		}

		rx_frame->data_len = RxHeader.DataLength;
 8002df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	731a      	strb	r2, [r3, #12]
		memcpy(rx_frame->data, RxData, RxHeader.DataLength);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3304      	adds	r3, #4
 8002e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e04:	f107 0110 	add.w	r1, r7, #16
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f007 ff66 	bl	800acda <memcpy>

		// assume a single interface
		rx_frame->iface_id = 0;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	735a      	strb	r2, [r3, #13]

		return 1;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <canardSTM32Recieve+0x80>
	}

	// Either no CAN msg to be read, or an error that can be read from hfdcan->ErrorCode
	return 0;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3740      	adds	r7, #64	@ 0x40
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <canardSTM32Transmit>:
  *         the configuration information for the specified FDCAN.
  * @param  tx_frame pointer to a CanardCANFrame structure that contains the CAN message to
  * 		transmit.
  * @retval ret == 1: OK, ret < 0: CANARD_ERROR, ret == 0: Check hfdcan->ErrorCode
  */
int16_t canardSTM32Transmit(FDCAN_HandleTypeDef *hfdcan, const CanardCANFrame* const tx_frame) {
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b08e      	sub	sp, #56	@ 0x38
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	6039      	str	r1, [r7, #0]
	if (tx_frame == NULL) {
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d102      	bne.n	8002e38 <canardSTM32Transmit+0x16>
		return -CANARD_ERROR_INVALID_ARGUMENT;
 8002e32:	f06f 0301 	mvn.w	r3, #1
 8002e36:	e04b      	b.n	8002ed0 <canardSTM32Transmit+0xae>
	}

	if (tx_frame->id & CANARD_CAN_FRAME_ERR) {
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <canardSTM32Transmit+0x28>
		return -CANARD_ERROR_INVALID_ARGUMENT; // unsupported frame format
 8002e44:	f06f 0301 	mvn.w	r3, #1
 8002e48:	e042      	b.n	8002ed0 <canardSTM32Transmit+0xae>

	FDCAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8];

	// Process canard id to STM FDCAN header format
	if (tx_frame->id & CANARD_CAN_FRAME_EFF) {
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	da08      	bge.n	8002e64 <canardSTM32Transmit+0x42>
		TxHeader.IdType = FDCAN_EXTENDED_ID;
 8002e52:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002e56:	61bb      	str	r3, [r7, #24]
		TxHeader.Identifier = tx_frame->id & CANARD_CAN_EXT_ID_MASK;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	e006      	b.n	8002e72 <canardSTM32Transmit+0x50>
	} else {
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8002e64:	2300      	movs	r3, #0
 8002e66:	61bb      	str	r3, [r7, #24]
		TxHeader.Identifier = tx_frame->id & CANARD_CAN_STD_ID_MASK;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e70:	617b      	str	r3, [r7, #20]
	}

	TxHeader.DataLength = tx_frame->data_len;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	7b1b      	ldrb	r3, [r3, #12]
 8002e76:	623b      	str	r3, [r7, #32]

	if (tx_frame->id & CANARD_CAN_FRAME_RTR) {
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <canardSTM32Transmit+0x6a>
		TxHeader.TxFrameType = FDCAN_REMOTE_FRAME;
 8002e84:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002e88:	61fb      	str	r3, [r7, #28]
 8002e8a:	e001      	b.n	8002e90 <canardSTM32Transmit+0x6e>
	} else {
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61fb      	str	r3, [r7, #28]
	}

	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE; // unsure about this one
 8002e90:	2300      	movs	r3, #0
 8002e92:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF; // Disabling FDCAN (using CAN 2.0)
 8002e94:	2300      	movs	r3, #0
 8002e96:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN; // Disabling FDCAN (using CAN 2.0)
 8002e98:	2300      	movs	r3, #0
 8002e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS; // unsure about this one
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	633b      	str	r3, [r7, #48]	@ 0x30
	TxHeader.MessageMarker = 0; // unsure about this one
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	637b      	str	r3, [r7, #52]	@ 0x34
	memcpy(TxData, tx_frame->data, TxHeader.DataLength);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	1d19      	adds	r1, r3, #4
 8002ea8:	6a3a      	ldr	r2, [r7, #32]
 8002eaa:	f107 030c 	add.w	r3, r7, #12
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f007 ff13 	bl	800acda <memcpy>

	if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, TxData) == HAL_OK) {
 8002eb4:	f107 020c 	add.w	r2, r7, #12
 8002eb8:	f107 0314 	add.w	r3, r7, #20
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f003 f984 	bl	80061cc <HAL_FDCAN_AddMessageToTxFifoQ>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <canardSTM32Transmit+0xac>
//		printf("Successfully sent message with id: %lu \n", TxHeader.Identifier);
		return 1;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <canardSTM32Transmit+0xae>
	}

//	printf("Failed at adding message with id: %lu to Tx Fifo", TxHeader.Identifier);
	// This might be for many reasons including the Tx Fifo being full, the error can be read from hfdcan->ErrorCode
	return 0;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3738      	adds	r7, #56	@ 0x38
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002ee0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002ee4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d013      	beq.n	8002f18 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002ef0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002ef4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002ef8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00b      	beq.n	8002f18 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002f00:	e000      	b.n	8002f04 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002f02:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002f04:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f9      	beq.n	8002f02 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002f0e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002f18:	687b      	ldr	r3, [r7, #4]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002f30:	4b08      	ldr	r3, [pc, #32]	@ (8002f54 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002f32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f34:	4907      	ldr	r1, [pc, #28]	@ (8002f54 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002f3c:	4b05      	ldr	r3, [pc, #20]	@ (8002f54 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002f3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4013      	ands	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f46:	68fb      	ldr	r3, [r7, #12]
}
 8002f48:	bf00      	nop
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	40021000 	.word	0x40021000

08002f58 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002f60:	4b08      	ldr	r3, [pc, #32]	@ (8002f84 <LL_APB1_GRP2_EnableClock+0x2c>)
 8002f62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f64:	4907      	ldr	r1, [pc, #28]	@ (8002f84 <LL_APB1_GRP2_EnableClock+0x2c>)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002f6c:	4b05      	ldr	r3, [pc, #20]	@ (8002f84 <LL_APB1_GRP2_EnableClock+0x2c>)
 8002f6e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4013      	ands	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f76:	68fb      	ldr	r3, [r7, #12]
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	40021000 	.word	0x40021000

08002f88 <HAL_FDCAN_RxFifo0Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8002f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f8c:	b08a      	sub	sp, #40	@ 0x28
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	6039      	str	r1, [r7, #0]
	// Receiving
	CanardCANFrame rx_frame;

	const uint64_t timestamp = HAL_GetTick() * 1000ULL;
 8002f94:	f001 fe66 	bl	8004c64 <HAL_GetTick>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	469a      	mov	sl, r3
 8002f9e:	4693      	mov	fp, r2
 8002fa0:	4652      	mov	r2, sl
 8002fa2:	465b      	mov	r3, fp
 8002fa4:	f04f 0000 	mov.w	r0, #0
 8002fa8:	f04f 0100 	mov.w	r1, #0
 8002fac:	0159      	lsls	r1, r3, #5
 8002fae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fb2:	0150      	lsls	r0, r2, #5
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	ebb2 040a 	subs.w	r4, r2, sl
 8002fbc:	eb63 050b 	sbc.w	r5, r3, fp
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	00ab      	lsls	r3, r5, #2
 8002fca:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002fce:	00a2      	lsls	r2, r4, #2
 8002fd0:	4614      	mov	r4, r2
 8002fd2:	461d      	mov	r5, r3
 8002fd4:	eb14 080a 	adds.w	r8, r4, sl
 8002fd8:	eb45 090b 	adc.w	r9, r5, fp
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fe8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ff0:	4690      	mov	r8, r2
 8002ff2:	4699      	mov	r9, r3
 8002ff4:	e9c7 8908 	strd	r8, r9, [r7, #32]
	const int16_t rx_res = canardSTM32Recieve(hfdcan, FDCAN_RX_FIFO0, &rx_frame);
 8002ff8:	f107 030c 	add.w	r3, r7, #12
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	2140      	movs	r1, #64	@ 0x40
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7ff feca 	bl	8002d9a <canardSTM32Recieve>
 8003006:	4603      	mov	r3, r0
 8003008:	83fb      	strh	r3, [r7, #30]

	if (rx_res < 0) {
 800300a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800300e:	2b00      	cmp	r3, #0
 8003010:	da06      	bge.n	8003020 <HAL_FDCAN_RxFifo0Callback+0x98>
		printf("Receive error %d\n", rx_res);
 8003012:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003016:	4619      	mov	r1, r3
 8003018:	4809      	ldr	r0, [pc, #36]	@ (8003040 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 800301a:	f007 fc61 	bl	800a8e0 <iprintf>
	}
	else if (rx_res > 0)        // Success - process the frame
	{
		canardHandleRxFrame(&canard, &rx_frame, timestamp);
	}
}
 800301e:	e00a      	b.n	8003036 <HAL_FDCAN_RxFifo0Callback+0xae>
	else if (rx_res > 0)        // Success - process the frame
 8003020:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003024:	2b00      	cmp	r3, #0
 8003026:	dd06      	ble.n	8003036 <HAL_FDCAN_RxFifo0Callback+0xae>
		canardHandleRxFrame(&canard, &rx_frame, timestamp);
 8003028:	f107 010c 	add.w	r1, r7, #12
 800302c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003030:	4804      	ldr	r0, [pc, #16]	@ (8003044 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8003032:	f7fe f939 	bl	80012a8 <canardHandleRxFrame>
}
 8003036:	bf00      	nop
 8003038:	3728      	adds	r7, #40	@ 0x28
 800303a:	46bd      	mov	sp, r7
 800303c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003040:	0800c990 	.word	0x0800c990
 8003044:	20000654 	.word	0x20000654

08003048 <handle_NodeStatus>:
// NOTE: All canard handlers and senders are based on this reference: https://dronecan.github.io/Specification/7._List_of_standard_data_types/
// Alternatively, you can look at the corresponding generated header file in the dsdlc_generated folder

// Canard Handlers ( Many have code copied from libcanard esc_node example: https://github.com/dronecan/libcanard/blob/master/examples/ESCNode/esc_node.c )

void handle_NodeStatus(CanardInstance *ins, CanardRxTransfer *transfer) {
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
	struct uavcan_protocol_NodeStatus nodeStatus;

	if (uavcan_protocol_NodeStatus_decode(transfer, &nodeStatus)) {
 8003052:	f107 030c 	add.w	r3, r7, #12
 8003056:	4619      	mov	r1, r3
 8003058:	6838      	ldr	r0, [r7, #0]
 800305a:	f001 fd74 	bl	8004b46 <uavcan_protocol_NodeStatus_decode>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d15d      	bne.n	8003120 <handle_NodeStatus+0xd8>
		return;
	}

	printf("Node health: %ud Node Mode: %ud\n", nodeStatus.health, nodeStatus.mode);
 8003064:	7c3b      	ldrb	r3, [r7, #16]
 8003066:	4619      	mov	r1, r3
 8003068:	7c7b      	ldrb	r3, [r7, #17]
 800306a:	461a      	mov	r2, r3
 800306c:	482e      	ldr	r0, [pc, #184]	@ (8003128 <handle_NodeStatus+0xe0>)
 800306e:	f007 fc37 	bl	800a8e0 <iprintf>

	printf("Node Health ");
 8003072:	482e      	ldr	r0, [pc, #184]	@ (800312c <handle_NodeStatus+0xe4>)
 8003074:	f007 fc34 	bl	800a8e0 <iprintf>

	switch (nodeStatus.health) {
 8003078:	7c3b      	ldrb	r3, [r7, #16]
 800307a:	2b03      	cmp	r3, #3
 800307c:	d81a      	bhi.n	80030b4 <handle_NodeStatus+0x6c>
 800307e:	a201      	add	r2, pc, #4	@ (adr r2, 8003084 <handle_NodeStatus+0x3c>)
 8003080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003084:	08003095 	.word	0x08003095
 8003088:	0800309d 	.word	0x0800309d
 800308c:	080030a5 	.word	0x080030a5
 8003090:	080030ad 	.word	0x080030ad
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_OK:
		printf("OK\n");
 8003094:	4826      	ldr	r0, [pc, #152]	@ (8003130 <handle_NodeStatus+0xe8>)
 8003096:	f007 fc93 	bl	800a9c0 <puts>
		break;
 800309a:	e00f      	b.n	80030bc <handle_NodeStatus+0x74>
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_WARNING:
		printf("WARNING\n");
 800309c:	4825      	ldr	r0, [pc, #148]	@ (8003134 <handle_NodeStatus+0xec>)
 800309e:	f007 fc8f 	bl	800a9c0 <puts>
		break;
 80030a2:	e00b      	b.n	80030bc <handle_NodeStatus+0x74>
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_ERROR:
		printf("ERROR\n");
 80030a4:	4824      	ldr	r0, [pc, #144]	@ (8003138 <handle_NodeStatus+0xf0>)
 80030a6:	f007 fc8b 	bl	800a9c0 <puts>
		break;
 80030aa:	e007      	b.n	80030bc <handle_NodeStatus+0x74>
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_CRITICAL:
		printf("CRITICAL\n");
 80030ac:	4823      	ldr	r0, [pc, #140]	@ (800313c <handle_NodeStatus+0xf4>)
 80030ae:	f007 fc87 	bl	800a9c0 <puts>
		break;
 80030b2:	e003      	b.n	80030bc <handle_NodeStatus+0x74>
	default:
		printf("UNKNOWN?\n");
 80030b4:	4822      	ldr	r0, [pc, #136]	@ (8003140 <handle_NodeStatus+0xf8>)
 80030b6:	f007 fc83 	bl	800a9c0 <puts>
		break;
 80030ba:	bf00      	nop
	}

	printf("Node Mode ");
 80030bc:	4821      	ldr	r0, [pc, #132]	@ (8003144 <handle_NodeStatus+0xfc>)
 80030be:	f007 fc0f 	bl	800a8e0 <iprintf>

	switch(nodeStatus.mode) {
 80030c2:	7c7b      	ldrb	r3, [r7, #17]
 80030c4:	2b07      	cmp	r3, #7
 80030c6:	d827      	bhi.n	8003118 <handle_NodeStatus+0xd0>
 80030c8:	a201      	add	r2, pc, #4	@ (adr r2, 80030d0 <handle_NodeStatus+0x88>)
 80030ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ce:	bf00      	nop
 80030d0:	080030f1 	.word	0x080030f1
 80030d4:	080030f9 	.word	0x080030f9
 80030d8:	08003101 	.word	0x08003101
 80030dc:	08003109 	.word	0x08003109
 80030e0:	08003119 	.word	0x08003119
 80030e4:	08003119 	.word	0x08003119
 80030e8:	08003119 	.word	0x08003119
 80030ec:	08003111 	.word	0x08003111
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_OPERATIONAL:
		printf("OPERATIONAL\n");
 80030f0:	4815      	ldr	r0, [pc, #84]	@ (8003148 <handle_NodeStatus+0x100>)
 80030f2:	f007 fc65 	bl	800a9c0 <puts>
		break;
 80030f6:	e014      	b.n	8003122 <handle_NodeStatus+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_INITIALIZATION:
		printf("INITIALIZATION\n");
 80030f8:	4814      	ldr	r0, [pc, #80]	@ (800314c <handle_NodeStatus+0x104>)
 80030fa:	f007 fc61 	bl	800a9c0 <puts>
		break;
 80030fe:	e010      	b.n	8003122 <handle_NodeStatus+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_MAINTENANCE:
		printf("MAINTENANCE\n");
 8003100:	4813      	ldr	r0, [pc, #76]	@ (8003150 <handle_NodeStatus+0x108>)
 8003102:	f007 fc5d 	bl	800a9c0 <puts>
		break;
 8003106:	e00c      	b.n	8003122 <handle_NodeStatus+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_SOFTWARE_UPDATE:
		printf("SOFTWARE UPDATE\n");
 8003108:	4812      	ldr	r0, [pc, #72]	@ (8003154 <handle_NodeStatus+0x10c>)
 800310a:	f007 fc59 	bl	800a9c0 <puts>
		break;
 800310e:	e008      	b.n	8003122 <handle_NodeStatus+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_OFFLINE:
		printf("OFFLINE\n");
 8003110:	4811      	ldr	r0, [pc, #68]	@ (8003158 <handle_NodeStatus+0x110>)
 8003112:	f007 fc55 	bl	800a9c0 <puts>
		break;
 8003116:	e004      	b.n	8003122 <handle_NodeStatus+0xda>
	default:
		printf("UNKNOWN?\n");
 8003118:	4809      	ldr	r0, [pc, #36]	@ (8003140 <handle_NodeStatus+0xf8>)
 800311a:	f007 fc51 	bl	800a9c0 <puts>
		break;
 800311e:	e000      	b.n	8003122 <handle_NodeStatus+0xda>
		return;
 8003120:	bf00      	nop
	}
}
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	0800c9a4 	.word	0x0800c9a4
 800312c:	0800c9c8 	.word	0x0800c9c8
 8003130:	0800c9d8 	.word	0x0800c9d8
 8003134:	0800c9dc 	.word	0x0800c9dc
 8003138:	0800c9e4 	.word	0x0800c9e4
 800313c:	0800c9ec 	.word	0x0800c9ec
 8003140:	0800c9f8 	.word	0x0800c9f8
 8003144:	0800ca04 	.word	0x0800ca04
 8003148:	0800ca10 	.word	0x0800ca10
 800314c:	0800ca1c 	.word	0x0800ca1c
 8003150:	0800ca2c 	.word	0x0800ca2c
 8003154:	0800ca38 	.word	0x0800ca38
 8003158:	0800ca48 	.word	0x0800ca48

0800315c <handle_NotifyState>:

void handle_NotifyState(CanardInstance *ins, CanardRxTransfer *transfer) {
 800315c:	b580      	push	{r7, lr}
 800315e:	b0c8      	sub	sp, #288	@ 0x120
 8003160:	af00      	add	r7, sp, #0
 8003162:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003166:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800316a:	6018      	str	r0, [r3, #0]
 800316c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003170:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003174:	6019      	str	r1, [r3, #0]
	struct ardupilot_indication_NotifyState notifyState;

	if (ardupilot_indication_NotifyState_decode(transfer, &notifyState)) {
 8003176:	f107 0208 	add.w	r2, r7, #8
 800317a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800317e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003182:	4611      	mov	r1, r2
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	f001 f9fa 	bl	800457e <ardupilot_indication_NotifyState_decode>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d13b      	bne.n	8003208 <handle_NotifyState+0xac>
		return;
	}

	uint32_t nl = notifyState.vehicle_state & 0xFFFFFFFF;  // ignoring the last 32 bits for printing since the highest vehicle_state value right now is 23 even though they're allowed to be up to 64bit unsigned integer
 8003190:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003194:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003198:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	@ 0x108
 800319c:	4613      	mov	r3, r2
 800319e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	printf("Vehicle State: %lu ", nl);
 80031a2:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 80031a6:	481b      	ldr	r0, [pc, #108]	@ (8003214 <handle_NotifyState+0xb8>)
 80031a8:	f007 fb9a 	bl	800a8e0 <iprintf>

	if (notifyState.aux_data.len > 0) {
 80031ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80031b0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80031b4:	785b      	ldrb	r3, [r3, #1]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d022      	beq.n	8003200 <handle_NotifyState+0xa4>
		printf("Aux Data: 0x");
 80031ba:	4817      	ldr	r0, [pc, #92]	@ (8003218 <handle_NotifyState+0xbc>)
 80031bc:	f007 fb90 	bl	800a8e0 <iprintf>

		for (int i = 0; i < notifyState.aux_data.len; i++) {
 80031c0:	2300      	movs	r3, #0
 80031c2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80031c6:	e011      	b.n	80031ec <handle_NotifyState+0x90>
			printf("%02x", notifyState.aux_data.data[i]);
 80031c8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80031cc:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 80031d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031d4:	4413      	add	r3, r2
 80031d6:	3302      	adds	r3, #2
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	4619      	mov	r1, r3
 80031dc:	480f      	ldr	r0, [pc, #60]	@ (800321c <handle_NotifyState+0xc0>)
 80031de:	f007 fb7f 	bl	800a8e0 <iprintf>
		for (int i = 0; i < notifyState.aux_data.len; i++) {
 80031e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031e6:	3301      	adds	r3, #1
 80031e8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80031ec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80031f0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80031f4:	785b      	ldrb	r3, [r3, #1]
 80031f6:	461a      	mov	r2, r3
 80031f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031fc:	4293      	cmp	r3, r2
 80031fe:	dbe3      	blt.n	80031c8 <handle_NotifyState+0x6c>
		}
	}

	printf("\n");
 8003200:	200a      	movs	r0, #10
 8003202:	f007 fb7f 	bl	800a904 <putchar>
 8003206:	e000      	b.n	800320a <handle_NotifyState+0xae>
		return;
 8003208:	bf00      	nop

}
 800320a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	0800ca50 	.word	0x0800ca50
 8003218:	0800ca64 	.word	0x0800ca64
 800321c:	0800ca74 	.word	0x0800ca74

08003220 <handle_RawCommand>:

/*
  handle a ESC RawCommand request
*/
void handle_RawCommand(CanardInstance *ins, CanardRxTransfer *transfer)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b08e      	sub	sp, #56	@ 0x38
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
    struct uavcan_equipment_esc_RawCommand rawCommand;
    if (uavcan_equipment_esc_RawCommand_decode(transfer, &rawCommand)) {
 800322a:	f107 030c 	add.w	r3, r7, #12
 800322e:	4619      	mov	r1, r3
 8003230:	6838      	ldr	r0, [r7, #0]
 8003232:	f001 fa21 	bl	8004678 <uavcan_equipment_esc_RawCommand_decode>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d102      	bne.n	8003242 <handle_RawCommand+0x22>
        return;
    }
    // see if it is for us
    if (rawCommand.cmd.len <= ESC_INDEX) {
 800323c:	7b3b      	ldrb	r3, [r7, #12]
 800323e:	2b00      	cmp	r3, #0
 8003240:	e000      	b.n	8003244 <handle_RawCommand+0x24>
        return;
 8003242:	bf00      	nop
        return;
    }
    // convert throttle to -1.0 to 1.0 range
//    printf("Throttle: %f \n", rawCommand.cmd.data[ESC_INDEX]/8192.0);
}
 8003244:	3738      	adds	r7, #56	@ 0x38
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <getUniqueID>:

/*
  get a 16 byte unique ID for this node, this should be based on the CPU unique ID or other unique ID
 */
void getUniqueID(uint8_t id[16]) {
 800324a:	b580      	push	{r7, lr}
 800324c:	b086      	sub	sp, #24
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
    uint32_t HALUniqueIDs[3];
    // Make Unique ID out of the 96-bit STM32 UID and fill the rest with 0s
    memset(id, 0, 16);
 8003252:	2210      	movs	r2, #16
 8003254:	2100      	movs	r1, #0
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f007 fc92 	bl	800ab80 <memset>
    HALUniqueIDs[0] = HAL_GetUIDw0();
 800325c:	f001 fd0e 	bl	8004c7c <HAL_GetUIDw0>
 8003260:	4603      	mov	r3, r0
 8003262:	60fb      	str	r3, [r7, #12]
    HALUniqueIDs[1] = HAL_GetUIDw1();
 8003264:	f001 fd16 	bl	8004c94 <HAL_GetUIDw1>
 8003268:	4603      	mov	r3, r0
 800326a:	613b      	str	r3, [r7, #16]
    HALUniqueIDs[2] = HAL_GetUIDw2();
 800326c:	f001 fd1e 	bl	8004cac <HAL_GetUIDw2>
 8003270:	4603      	mov	r3, r0
 8003272:	617b      	str	r3, [r7, #20]
    memcpy(id, HALUniqueIDs, 12);
 8003274:	f107 030c 	add.w	r3, r7, #12
 8003278:	220c      	movs	r2, #12
 800327a:	4619      	mov	r1, r3
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f007 fd2c 	bl	800acda <memcpy>
}
 8003282:	bf00      	nop
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	0000      	movs	r0, r0
 800328c:	0000      	movs	r0, r0
	...

08003290 <handle_GetNodeInfo>:

/*
  handle a GetNodeInfo request
*/
// TODO: All the data in here is temporary for testing. If actually need to send valid data, edit accordingly.
void handle_GetNodeInfo(CanardInstance *ins, CanardRxTransfer *transfer) {
 8003290:	b590      	push	{r4, r7, lr}
 8003292:	f5ad 7d4b 	sub.w	sp, sp, #812	@ 0x32c
 8003296:	af06      	add	r7, sp, #24
 8003298:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 800329c:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80032a0:	6018      	str	r0, [r3, #0]
 80032a2:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80032a6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80032aa:	6019      	str	r1, [r3, #0]
	printf("GetNodeInfo request from %d\n", transfer->source_node_id);
 80032ac:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80032b0:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	7edb      	ldrb	r3, [r3, #27]
 80032b8:	4619      	mov	r1, r3
 80032ba:	484f      	ldr	r0, [pc, #316]	@ (80033f8 <handle_GetNodeInfo+0x168>)
 80032bc:	f007 fb10 	bl	800a8e0 <iprintf>

	uint8_t buffer[UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE];
	struct uavcan_protocol_GetNodeInfoResponse pkt;

	memset(&pkt, 0, sizeof(pkt));
 80032c0:	f107 0308 	add.w	r3, r7, #8
 80032c4:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 80032c8:	2100      	movs	r1, #0
 80032ca:	4618      	mov	r0, r3
 80032cc:	f007 fc58 	bl	800ab80 <memset>

	node_status.uptime_sec = HAL_GetTick() / 1000ULL;
 80032d0:	f001 fcc8 	bl	8004c64 <HAL_GetTick>
 80032d4:	4603      	mov	r3, r0
 80032d6:	4a49      	ldr	r2, [pc, #292]	@ (80033fc <handle_GetNodeInfo+0x16c>)
 80032d8:	fba2 2303 	umull	r2, r3, r2, r3
 80032dc:	099b      	lsrs	r3, r3, #6
 80032de:	4a48      	ldr	r2, [pc, #288]	@ (8003400 <handle_GetNodeInfo+0x170>)
 80032e0:	6013      	str	r3, [r2, #0]
	pkt.status = node_status;
 80032e2:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80032e6:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80032ea:	4a45      	ldr	r2, [pc, #276]	@ (8003400 <handle_GetNodeInfo+0x170>)
 80032ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80032ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// fill in your major and minor firmware version
	pkt.software_version.major = 1;
 80032f2:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80032f6:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80032fa:	2201      	movs	r2, #1
 80032fc:	741a      	strb	r2, [r3, #16]
	pkt.software_version.minor = 0;
 80032fe:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8003302:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003306:	2200      	movs	r2, #0
 8003308:	745a      	strb	r2, [r3, #17]
	pkt.software_version.optional_field_flags = 0;
 800330a:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 800330e:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003312:	2200      	movs	r2, #0
 8003314:	749a      	strb	r2, [r3, #18]
	pkt.software_version.vcs_commit = 0; // should put git hash in here
 8003316:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 800331a:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 800331e:	2200      	movs	r2, #0
 8003320:	615a      	str	r2, [r3, #20]

	// should fill in hardware version
	pkt.hardware_version.major = 1;
 8003322:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8003326:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2020 	strb.w	r2, [r3, #32]
	pkt.hardware_version.minor = 0;
 8003330:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8003334:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	// just setting all 16 bytes to 1 for testing
	getUniqueID(pkt.hardware_version.unique_id);
 800333e:	f107 0308 	add.w	r3, r7, #8
 8003342:	3322      	adds	r3, #34	@ 0x22
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff ff80 	bl	800324a <getUniqueID>

	strncpy((char*)pkt.name.data, "ESCNode", sizeof(pkt.name.data));
 800334a:	f107 0308 	add.w	r3, r7, #8
 800334e:	f203 1333 	addw	r3, r3, #307	@ 0x133
 8003352:	2250      	movs	r2, #80	@ 0x50
 8003354:	492b      	ldr	r1, [pc, #172]	@ (8003404 <handle_GetNodeInfo+0x174>)
 8003356:	4618      	mov	r0, r3
 8003358:	f007 fc1a 	bl	800ab90 <strncpy>
	pkt.name.len = strnlen((char*)pkt.name.data, sizeof(pkt.name.data));
 800335c:	f107 0308 	add.w	r3, r7, #8
 8003360:	f203 1333 	addw	r3, r3, #307	@ 0x133
 8003364:	2150      	movs	r1, #80	@ 0x50
 8003366:	4618      	mov	r0, r3
 8003368:	f007 fc25 	bl	800abb6 <strnlen>
 800336c:	4603      	mov	r3, r0
 800336e:	b2da      	uxtb	r2, r3
 8003370:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8003374:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003378:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132

	uint16_t total_size = uavcan_protocol_GetNodeInfoResponse_encode(&pkt, buffer);
 800337c:	f507 72ca 	add.w	r2, r7, #404	@ 0x194
 8003380:	f107 0308 	add.w	r3, r7, #8
 8003384:	4611      	mov	r1, r2
 8003386:	4618      	mov	r0, r3
 8003388:	f001 fb03 	bl	8004992 <uavcan_protocol_GetNodeInfoResponse_encode>
 800338c:	4603      	mov	r3, r0
 800338e:	f8a7 330e 	strh.w	r3, [r7, #782]	@ 0x30e

	canardRequestOrRespond(ins,
 8003392:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8003396:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	7edc      	ldrb	r4, [r3, #27]
 800339e:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80033a2:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3319      	adds	r3, #25
 80033aa:	f507 7244 	add.w	r2, r7, #784	@ 0x310
 80033ae:	f5a2 7244 	sub.w	r2, r2, #784	@ 0x310
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	7e92      	ldrb	r2, [r2, #26]
 80033b6:	f507 7144 	add.w	r1, r7, #784	@ 0x310
 80033ba:	f5a1 7043 	sub.w	r0, r1, #780	@ 0x30c
 80033be:	f8b7 130e 	ldrh.w	r1, [r7, #782]	@ 0x30e
 80033c2:	9105      	str	r1, [sp, #20]
 80033c4:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 80033c8:	9104      	str	r1, [sp, #16]
 80033ca:	2100      	movs	r1, #0
 80033cc:	9103      	str	r1, [sp, #12]
 80033ce:	9202      	str	r2, [sp, #8]
 80033d0:	9301      	str	r3, [sp, #4]
 80033d2:	2301      	movs	r3, #1
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	a306      	add	r3, pc, #24	@ (adr r3, 80033f0 <handle_GetNodeInfo+0x160>)
 80033d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033dc:	4621      	mov	r1, r4
 80033de:	6800      	ldr	r0, [r0, #0]
 80033e0:	f7fd feb2 	bl	8001148 <canardRequestOrRespond>
						   &transfer->transfer_id,
						   transfer->priority,
						   CanardResponse,
						   &buffer[0],
						   total_size);
}
 80033e4:	bf00      	nop
 80033e6:	f507 7745 	add.w	r7, r7, #788	@ 0x314
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd90      	pop	{r4, r7, pc}
 80033ee:	bf00      	nop
 80033f0:	21c46a9e 	.word	0x21c46a9e
 80033f4:	ee468a81 	.word	0xee468a81
 80033f8:	0800ca7c 	.word	0x0800ca7c
 80033fc:	10624dd3 	.word	0x10624dd3
 8003400:	20000a80 	.word	0x20000a80
 8003404:	0800ca9c 	.word	0x0800ca9c

08003408 <send_NodeStatus>:

/*
  send the 1Hz NodeStatus message. This is what allows a node to show
  up in the DroneCAN GUI tool and in the flight controller logs
 */
void send_NodeStatus(void) {
 8003408:	b580      	push	{r7, lr}
 800340a:	b0e6      	sub	sp, #408	@ 0x198
 800340c:	af06      	add	r7, sp, #24
    uint8_t buffer[UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE];

    node_status.uptime_sec = HAL_GetTick() / 1000UL;
 800340e:	f001 fc29 	bl	8004c64 <HAL_GetTick>
 8003412:	4603      	mov	r3, r0
 8003414:	4a1a      	ldr	r2, [pc, #104]	@ (8003480 <send_NodeStatus+0x78>)
 8003416:	fba2 2303 	umull	r2, r3, r2, r3
 800341a:	099b      	lsrs	r3, r3, #6
 800341c:	4a19      	ldr	r2, [pc, #100]	@ (8003484 <send_NodeStatus+0x7c>)
 800341e:	6013      	str	r3, [r2, #0]
    node_status.health = UAVCAN_PROTOCOL_NODESTATUS_HEALTH_OK;
 8003420:	4b18      	ldr	r3, [pc, #96]	@ (8003484 <send_NodeStatus+0x7c>)
 8003422:	2200      	movs	r2, #0
 8003424:	711a      	strb	r2, [r3, #4]
    node_status.mode = UAVCAN_PROTOCOL_NODESTATUS_MODE_OPERATIONAL;
 8003426:	4b17      	ldr	r3, [pc, #92]	@ (8003484 <send_NodeStatus+0x7c>)
 8003428:	2200      	movs	r2, #0
 800342a:	715a      	strb	r2, [r3, #5]
    node_status.sub_mode = 0;
 800342c:	4b15      	ldr	r3, [pc, #84]	@ (8003484 <send_NodeStatus+0x7c>)
 800342e:	2200      	movs	r2, #0
 8003430:	719a      	strb	r2, [r3, #6]

    // put whatever you like in here for display in GUI
    node_status.vendor_specific_status_code = 1234;
 8003432:	4b14      	ldr	r3, [pc, #80]	@ (8003484 <send_NodeStatus+0x7c>)
 8003434:	f240 42d2 	movw	r2, #1234	@ 0x4d2
 8003438:	811a      	strh	r2, [r3, #8]

    uint32_t len = uavcan_protocol_NodeStatus_encode(&node_status, buffer);
 800343a:	463b      	mov	r3, r7
 800343c:	4619      	mov	r1, r3
 800343e:	4811      	ldr	r0, [pc, #68]	@ (8003484 <send_NodeStatus+0x7c>)
 8003440:	f001 fb67 	bl	8004b12 <uavcan_protocol_NodeStatus_encode>
 8003444:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
    // we need a static variable for the transfer ID. This is
    // incremeneted on each transfer, allowing for detection of packet
    // loss
    static uint8_t transfer_id;

    canardBroadcast(&canard,
 8003448:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800344c:	b29b      	uxth	r3, r3
 800344e:	9304      	str	r3, [sp, #16]
 8003450:	463b      	mov	r3, r7
 8003452:	9303      	str	r3, [sp, #12]
 8003454:	2318      	movs	r3, #24
 8003456:	9302      	str	r3, [sp, #8]
 8003458:	4b0b      	ldr	r3, [pc, #44]	@ (8003488 <send_NodeStatus+0x80>)
 800345a:	9301      	str	r3, [sp, #4]
 800345c:	f240 1355 	movw	r3, #341	@ 0x155
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	a305      	add	r3, pc, #20	@ (adr r3, 8003478 <send_NodeStatus+0x70>)
 8003464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003468:	4808      	ldr	r0, [pc, #32]	@ (800348c <send_NodeStatus+0x84>)
 800346a:	f7fd fd67 	bl	8000f3c <canardBroadcast>
                    UAVCAN_PROTOCOL_NODESTATUS_ID,
                    &transfer_id,
                    CANARD_TRANSFER_PRIORITY_LOW,
                    buffer,
                    len);
}
 800346e:	bf00      	nop
 8003470:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	c1a7c6f1 	.word	0xc1a7c6f1
 800347c:	0f0868d0 	.word	0x0f0868d0
 8003480:	10624dd3 	.word	0x10624dd3
 8003484:	20000a80 	.word	0x20000a80
 8003488:	20000a8c 	.word	0x20000a8c
 800348c:	20000654 	.word	0x20000654

08003490 <shouldAcceptTransfer>:
bool shouldAcceptTransfer(const CanardInstance *ins,
                                 uint64_t *out_data_type_signature,
                                 uint16_t data_type_id,
                                 CanardTransferType transfer_type,
                                 uint8_t source_node_id)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	4611      	mov	r1, r2
 800349c:	461a      	mov	r2, r3
 800349e:	460b      	mov	r3, r1
 80034a0:	80fb      	strh	r3, [r7, #6]
 80034a2:	4613      	mov	r3, r2
 80034a4:	717b      	strb	r3, [r7, #5]
	if (transfer_type == CanardTransferTypeRequest) {
 80034a6:	797b      	ldrb	r3, [r7, #5]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d10a      	bne.n	80034c2 <shouldAcceptTransfer+0x32>
	// check if we want to handle a specific service request
		switch (data_type_id) {
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d107      	bne.n	80034c2 <shouldAcceptTransfer+0x32>
		case UAVCAN_PROTOCOL_GETNODEINFO_ID: {
			*out_data_type_signature = UAVCAN_PROTOCOL_GETNODEINFO_REQUEST_SIGNATURE;
 80034b2:	68b9      	ldr	r1, [r7, #8]
 80034b4:	a31e      	add	r3, pc, #120	@ (adr r3, 8003530 <shouldAcceptTransfer+0xa0>)
 80034b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ba:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 80034be:	2301      	movs	r3, #1
 80034c0:	e02e      	b.n	8003520 <shouldAcceptTransfer+0x90>
		}
		}
	}
	if (transfer_type == CanardTransferTypeResponse) {
 80034c2:	797b      	ldrb	r3, [r7, #5]
 80034c4:	2b00      	cmp	r3, #0
		// check if we want to handle a specific service request
		switch (data_type_id) {
		}
	}
	if (transfer_type == CanardTransferTypeBroadcast) {
 80034c6:	797b      	ldrb	r3, [r7, #5]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d128      	bne.n	800351e <shouldAcceptTransfer+0x8e>
		// see if we want to handle a specific broadcast packet
		switch (data_type_id) {
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	f644 6227 	movw	r2, #20007	@ 0x4e27
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d01b      	beq.n	800350e <shouldAcceptTransfer+0x7e>
 80034d6:	f644 6227 	movw	r2, #20007	@ 0x4e27
 80034da:	4293      	cmp	r3, r2
 80034dc:	dc1f      	bgt.n	800351e <shouldAcceptTransfer+0x8e>
 80034de:	f240 1255 	movw	r2, #341	@ 0x155
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d00b      	beq.n	80034fe <shouldAcceptTransfer+0x6e>
 80034e6:	f240 4206 	movw	r2, #1030	@ 0x406
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d117      	bne.n	800351e <shouldAcceptTransfer+0x8e>
		case UAVCAN_EQUIPMENT_ESC_RAWCOMMAND_ID: {
			*out_data_type_signature = UAVCAN_EQUIPMENT_ESC_RAWCOMMAND_SIGNATURE;
 80034ee:	68b9      	ldr	r1, [r7, #8]
 80034f0:	a311      	add	r3, pc, #68	@ (adr r3, 8003538 <shouldAcceptTransfer+0xa8>)
 80034f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f6:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e010      	b.n	8003520 <shouldAcceptTransfer+0x90>
		}
		case UAVCAN_PROTOCOL_NODESTATUS_ID: {
			*out_data_type_signature = UAVCAN_PROTOCOL_NODESTATUS_SIGNATURE;
 80034fe:	68b9      	ldr	r1, [r7, #8]
 8003500:	a30f      	add	r3, pc, #60	@ (adr r3, 8003540 <shouldAcceptTransfer+0xb0>)
 8003502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003506:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 800350a:	2301      	movs	r3, #1
 800350c:	e008      	b.n	8003520 <shouldAcceptTransfer+0x90>
		}
		case ARDUPILOT_INDICATION_NOTIFYSTATE_ID: {
			*out_data_type_signature = ARDUPILOT_INDICATION_NOTIFYSTATE_SIGNATURE;
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	a30d      	add	r3, pc, #52	@ (adr r3, 8003548 <shouldAcceptTransfer+0xb8>)
 8003512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003516:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <shouldAcceptTransfer+0x90>
		}
		}
	}
	// we don't want any other messages
	return false;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	f3af 8000 	nop.w
 8003530:	21c46a9e 	.word	0x21c46a9e
 8003534:	ee468a81 	.word	0xee468a81
 8003538:	d7ec951d 	.word	0xd7ec951d
 800353c:	217f5c87 	.word	0x217f5c87
 8003540:	c1a7c6f1 	.word	0xc1a7c6f1
 8003544:	0f0868d0 	.word	0x0f0868d0
 8003548:	1651fdec 	.word	0x1651fdec
 800354c:	631f2a9c 	.word	0x631f2a9c

08003550 <onTransferReceived>:

void onTransferReceived(CanardInstance *ins, CanardRxTransfer *transfer) {
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
//		for (int i = 0; i < transfer->payload_len; i++) {
//			printf("%02x", transfer->payload_head[i]);
//		}
//
//		printf("\n");
	if (transfer->transfer_type == CanardTransferTypeRequest) {
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	7e1b      	ldrb	r3, [r3, #24]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d108      	bne.n	8003574 <onTransferReceived+0x24>
		// check if we want to handle a specific service request
		switch (transfer->data_type_id) {
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	8adb      	ldrh	r3, [r3, #22]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d104      	bne.n	8003574 <onTransferReceived+0x24>
		case UAVCAN_PROTOCOL_GETNODEINFO_ID: {
			handle_GetNodeInfo(ins, transfer);
 800356a:	6839      	ldr	r1, [r7, #0]
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff fe8f 	bl	8003290 <handle_GetNodeInfo>
			break;
 8003572:	bf00      	nop
		}
		}
	}
	if (transfer->transfer_type == CanardTransferTypeResponse) {
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	7e1b      	ldrb	r3, [r3, #24]
 8003578:	2b00      	cmp	r3, #0
		switch (transfer->data_type_id) {
		}
	}
	if (transfer->transfer_type == CanardTransferTypeBroadcast) {
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	7e1b      	ldrb	r3, [r3, #24]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d120      	bne.n	80035c4 <onTransferReceived+0x74>
		// check if we want to handle a specific broadcast message
		switch (transfer->data_type_id) {
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	8adb      	ldrh	r3, [r3, #22]
 8003586:	f644 6227 	movw	r2, #20007	@ 0x4e27
 800358a:	4293      	cmp	r3, r2
 800358c:	d015      	beq.n	80035ba <onTransferReceived+0x6a>
 800358e:	f644 6227 	movw	r2, #20007	@ 0x4e27
 8003592:	4293      	cmp	r3, r2
 8003594:	dc16      	bgt.n	80035c4 <onTransferReceived+0x74>
 8003596:	f240 1255 	movw	r2, #341	@ 0x155
 800359a:	4293      	cmp	r3, r2
 800359c:	d008      	beq.n	80035b0 <onTransferReceived+0x60>
 800359e:	f240 4206 	movw	r2, #1030	@ 0x406
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d10e      	bne.n	80035c4 <onTransferReceived+0x74>
		case UAVCAN_EQUIPMENT_ESC_RAWCOMMAND_ID: {
			handle_RawCommand(ins, transfer);
 80035a6:	6839      	ldr	r1, [r7, #0]
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7ff fe39 	bl	8003220 <handle_RawCommand>
			break;
 80035ae:	e009      	b.n	80035c4 <onTransferReceived+0x74>
		}
		case UAVCAN_PROTOCOL_NODESTATUS_ID: {
			handle_NodeStatus(ins, transfer);
 80035b0:	6839      	ldr	r1, [r7, #0]
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff fd48 	bl	8003048 <handle_NodeStatus>
			break;
 80035b8:	e004      	b.n	80035c4 <onTransferReceived+0x74>
		}
		case ARDUPILOT_INDICATION_NOTIFYSTATE_ID: {
			handle_NotifyState(ins, transfer);
 80035ba:	6839      	ldr	r1, [r7, #0]
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff fdcd 	bl	800315c <handle_NotifyState>
			break;
 80035c2:	bf00      	nop
		}
		}
	}
}
 80035c4:	bf00      	nop
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <processCanardTxQueue>:

void processCanardTxQueue(FDCAN_HandleTypeDef *hfdcan) {
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
	// Transmitting

	for (const CanardCANFrame *tx_frame ; (tx_frame = canardPeekTxQueue(&canard)) != NULL;) {
 80035d4:	e01a      	b.n	800360c <processCanardTxQueue+0x40>
		const int16_t tx_res = canardSTM32Transmit(hfdcan, tx_frame);
 80035d6:	68f9      	ldr	r1, [r7, #12]
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff fc22 	bl	8002e22 <canardSTM32Transmit>
 80035de:	4603      	mov	r3, r0
 80035e0:	817b      	strh	r3, [r7, #10]

		if (tx_res < 0) {
 80035e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	da06      	bge.n	80035f8 <processCanardTxQueue+0x2c>
			printf("Transmit error %d\n", tx_res);
 80035ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80035ee:	4619      	mov	r1, r3
 80035f0:	480c      	ldr	r0, [pc, #48]	@ (8003624 <processCanardTxQueue+0x58>)
 80035f2:	f007 f975 	bl	800a8e0 <iprintf>
 80035f6:	e006      	b.n	8003606 <processCanardTxQueue+0x3a>
		} else if (tx_res > 0) {
 80035f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	dd02      	ble.n	8003606 <processCanardTxQueue+0x3a>
			printf("Successfully transmitted message\n");
 8003600:	4809      	ldr	r0, [pc, #36]	@ (8003628 <processCanardTxQueue+0x5c>)
 8003602:	f007 f9dd 	bl	800a9c0 <puts>
		}

		// Pop canardTxQueue either way
		canardPopTxQueue(&canard);
 8003606:	4809      	ldr	r0, [pc, #36]	@ (800362c <processCanardTxQueue+0x60>)
 8003608:	f7fd fe39 	bl	800127e <canardPopTxQueue>
	for (const CanardCANFrame *tx_frame ; (tx_frame = canardPeekTxQueue(&canard)) != NULL;) {
 800360c:	4807      	ldr	r0, [pc, #28]	@ (800362c <processCanardTxQueue+0x60>)
 800360e:	f7fd fe23 	bl	8001258 <canardPeekTxQueue>
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1dd      	bne.n	80035d6 <processCanardTxQueue+0xa>
	}
}
 800361a:	bf00      	nop
 800361c:	bf00      	nop
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	0800caa4 	.word	0x0800caa4
 8003628:	0800cab8 	.word	0x0800cab8
 800362c:	20000654 	.word	0x20000654

08003630 <process1HzTasks>:

/*
  This function is called at 1 Hz rate from the main loop.
*/
void process1HzTasks(uint64_t timestamp_usec) {
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	e9c7 0100 	strd	r0, r1, [r7]
    /*
      Purge transfers that are no longer transmitted. This can free up some memory
    */
    canardCleanupStaleTransfers(&canard, timestamp_usec);
 800363a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800363e:	4804      	ldr	r0, [pc, #16]	@ (8003650 <process1HzTasks+0x20>)
 8003640:	f7fe f9d0 	bl	80019e4 <canardCleanupStaleTransfers>

    /*
      Transmit the node status message
    */
    send_NodeStatus();
 8003644:	f7ff fee0 	bl	8003408 <send_NodeStatus>
}
 8003648:	bf00      	nop
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20000654 	.word	0x20000654

08003654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003658:	b086      	sub	sp, #24
 800365a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800365c:	f001 fa97 	bl	8004b8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003660:	f000 f852 	bl	8003708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003664:	f000 fab2 	bl	8003bcc <MX_GPIO_Init>
  MX_ADC1_Init();
 8003668:	f000 f8b4 	bl	80037d4 <MX_ADC1_Init>
  MX_ICACHE_Init();
 800366c:	f000 f9a4 	bl	80039b8 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 8003670:	f000 f9b6 	bl	80039e0 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8003674:	f000 fa02 	bl	8003a7c <MX_RTC_Init>
  MX_UCPD1_Init();
 8003678:	f000 fa4a 	bl	8003b10 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 800367c:	f000 fa7e 	bl	8003b7c <MX_USB_PCD_Init>
  MX_FDCAN1_Init();
 8003680:	f000 f91e 	bl	80038c0 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  /*
   Initializing the Libcanard instance.
   */
  canardInit(&canard,
 8003684:	2300      	movs	r3, #0
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	4b1a      	ldr	r3, [pc, #104]	@ (80036f4 <main+0xa0>)
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	4b1a      	ldr	r3, [pc, #104]	@ (80036f8 <main+0xa4>)
 800368e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003692:	491a      	ldr	r1, [pc, #104]	@ (80036fc <main+0xa8>)
 8003694:	481a      	ldr	r0, [pc, #104]	@ (8003700 <main+0xac>)
 8003696:	f7fd fbf7 	bl	8000e88 <canardInit>
			 sizeof(memory_pool),
			 onTransferReceived,
			 shouldAcceptTransfer,
			 NULL);

  uint64_t next_1hz_service_at = HAL_GetTick();
 800369a:	f001 fae3 	bl	8004c64 <HAL_GetTick>
 800369e:	4603      	mov	r3, r0
 80036a0:	2200      	movs	r2, #0
 80036a2:	469a      	mov	sl, r3
 80036a4:	4693      	mov	fp, r2
 80036a6:	e9c7 ab02 	strd	sl, fp, [r7, #8]
//  uint64_t next_50hz_service_at = HAL_GetTick();

  // Could use DNA (Dynamic Node Allocation) by following example in esc_node.c but that requires a lot of setup and I'm not too sure of what advantage it brings
  // Instead, set a different NODE_ID for each device on the CAN bus by configuring node_settings
  if (NODE_ID > 0) {
	  canardSetLocalNodeID(&canard, NODE_ID);
 80036aa:	2101      	movs	r1, #1
 80036ac:	4814      	ldr	r0, [pc, #80]	@ (8003700 <main+0xac>)
 80036ae:	f7fd fc1f 	bl	8000ef0 <canardSetLocalNodeID>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	processCanardTxQueue(&hfdcan1);
 80036b2:	4814      	ldr	r0, [pc, #80]	@ (8003704 <main+0xb0>)
 80036b4:	f7ff ff8a 	bl	80035cc <processCanardTxQueue>

	const uint64_t ts = HAL_GetTick();
 80036b8:	f001 fad4 	bl	8004c64 <HAL_GetTick>
 80036bc:	4603      	mov	r3, r0
 80036be:	2200      	movs	r2, #0
 80036c0:	4698      	mov	r8, r3
 80036c2:	4691      	mov	r9, r2
 80036c4:	e9c7 8900 	strd	r8, r9, [r7]

	if (ts >= next_1hz_service_at) {
 80036c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036d0:	4290      	cmp	r0, r2
 80036d2:	eb71 0303 	sbcs.w	r3, r1, r3
 80036d6:	d3ec      	bcc.n	80036b2 <main+0x5e>
		next_1hz_service_at += 1000ULL;
 80036d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036dc:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 80036e0:	f143 0500 	adc.w	r5, r3, #0
 80036e4:	e9c7 4502 	strd	r4, r5, [r7, #8]
		process1HzTasks(ts);
 80036e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036ec:	f7ff ffa0 	bl	8003630 <process1HzTasks>
  {
 80036f0:	e7df      	b.n	80036b2 <main+0x5e>
 80036f2:	bf00      	nop
 80036f4:	08003491 	.word	0x08003491
 80036f8:	08003551 	.word	0x08003551
 80036fc:	20000680 	.word	0x20000680
 8003700:	20000654 	.word	0x20000654
 8003704:	20000258 	.word	0x20000258

08003708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b098      	sub	sp, #96	@ 0x60
 800370c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800370e:	f107 0318 	add.w	r3, r7, #24
 8003712:	2248      	movs	r2, #72	@ 0x48
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f007 fa32 	bl	800ab80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800371c:	1d3b      	adds	r3, r7, #4
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	605a      	str	r2, [r3, #4]
 8003724:	609a      	str	r2, [r3, #8]
 8003726:	60da      	str	r2, [r3, #12]
 8003728:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800372a:	2000      	movs	r0, #0
 800372c:	f003 fcbe 	bl	80070ac <HAL_PWREx_ControlVoltageScaling>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8003736:	f000 faf4 	bl	8003d22 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800373a:	f003 fc99 	bl	8007070 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800373e:	4b24      	ldr	r3, [pc, #144]	@ (80037d0 <SystemClock_Config+0xc8>)
 8003740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003744:	4a22      	ldr	r2, [pc, #136]	@ (80037d0 <SystemClock_Config+0xc8>)
 8003746:	f023 0318 	bic.w	r3, r3, #24
 800374a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800374e:	2336      	movs	r3, #54	@ 0x36
 8003750:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003752:	2381      	movs	r3, #129	@ 0x81
 8003754:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003756:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800375a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800375c:	2301      	movs	r3, #1
 800375e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003760:	2340      	movs	r3, #64	@ 0x40
 8003762:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003764:	2301      	movs	r3, #1
 8003766:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8003768:	2300      	movs	r3, #0
 800376a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800376c:	2360      	movs	r3, #96	@ 0x60
 800376e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003770:	2302      	movs	r3, #2
 8003772:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003774:	2301      	movs	r3, #1
 8003776:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003778:	2301      	movs	r3, #1
 800377a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 800377c:	2337      	movs	r3, #55	@ 0x37
 800377e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003780:	2307      	movs	r3, #7
 8003782:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003784:	2302      	movs	r3, #2
 8003786:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003788:	2302      	movs	r3, #2
 800378a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800378c:	f107 0318 	add.w	r3, r7, #24
 8003790:	4618      	mov	r0, r3
 8003792:	f003 fd1b 	bl	80071cc <HAL_RCC_OscConfig>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800379c:	f000 fac1 	bl	8003d22 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037a0:	230f      	movs	r3, #15
 80037a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037a4:	2303      	movs	r3, #3
 80037a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037a8:	2300      	movs	r3, #0
 80037aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037ac:	2300      	movs	r3, #0
 80037ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80037b4:	1d3b      	adds	r3, r7, #4
 80037b6:	2105      	movs	r1, #5
 80037b8:	4618      	mov	r0, r3
 80037ba:	f004 f9dd 	bl	8007b78 <HAL_RCC_ClockConfig>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80037c4:	f000 faad 	bl	8003d22 <Error_Handler>
  }
}
 80037c8:	bf00      	nop
 80037ca:	3760      	adds	r7, #96	@ 0x60
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40021000 	.word	0x40021000

080037d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08a      	sub	sp, #40	@ 0x28
 80037d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80037da:	f107 031c 	add.w	r3, r7, #28
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	605a      	str	r2, [r3, #4]
 80037e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80037e6:	1d3b      	adds	r3, r7, #4
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	605a      	str	r2, [r3, #4]
 80037ee:	609a      	str	r2, [r3, #8]
 80037f0:	60da      	str	r2, [r3, #12]
 80037f2:	611a      	str	r2, [r3, #16]
 80037f4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80037f6:	4b2f      	ldr	r3, [pc, #188]	@ (80038b4 <MX_ADC1_Init+0xe0>)
 80037f8:	4a2f      	ldr	r2, [pc, #188]	@ (80038b8 <MX_ADC1_Init+0xe4>)
 80037fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80037fc:	4b2d      	ldr	r3, [pc, #180]	@ (80038b4 <MX_ADC1_Init+0xe0>)
 80037fe:	2200      	movs	r2, #0
 8003800:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003802:	4b2c      	ldr	r3, [pc, #176]	@ (80038b4 <MX_ADC1_Init+0xe0>)
 8003804:	2200      	movs	r2, #0
 8003806:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003808:	4b2a      	ldr	r3, [pc, #168]	@ (80038b4 <MX_ADC1_Init+0xe0>)
 800380a:	2200      	movs	r2, #0
 800380c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800380e:	4b29      	ldr	r3, [pc, #164]	@ (80038b4 <MX_ADC1_Init+0xe0>)
 8003810:	2200      	movs	r2, #0
 8003812:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003814:	4b27      	ldr	r3, [pc, #156]	@ (80038b4 <MX_ADC1_Init+0xe0>)
 8003816:	2204      	movs	r2, #4
 8003818:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800381a:	4b26      	ldr	r3, [pc, #152]	@ (80038b4 <MX_ADC1_Init+0xe0>)
 800381c:	2200      	movs	r2, #0
 800381e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003820:	4b24      	ldr	r3, [pc, #144]	@ (80038b4 <MX_ADC1_Init+0xe0>)
 8003822:	2200      	movs	r2, #0
 8003824:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003826:	4b23      	ldr	r3, [pc, #140]	@ (80038b4 <MX_ADC1_Init+0xe0>)
 8003828:	2201      	movs	r2, #1
 800382a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800382c:	4b21      	ldr	r3, [pc, #132]	@ (80038b4 <MX_ADC1_Init+0xe0>)
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003834:	4b1f      	ldr	r3, [pc, #124]	@ (80038b4 <MX_ADC1_Init+0xe0>)
 8003836:	2200      	movs	r2, #0
 8003838:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800383a:	4b1e      	ldr	r3, [pc, #120]	@ (80038b4 <MX_ADC1_Init+0xe0>)
 800383c:	2200      	movs	r2, #0
 800383e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003840:	4b1c      	ldr	r3, [pc, #112]	@ (80038b4 <MX_ADC1_Init+0xe0>)
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003848:	4b1a      	ldr	r3, [pc, #104]	@ (80038b4 <MX_ADC1_Init+0xe0>)
 800384a:	2200      	movs	r2, #0
 800384c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800384e:	4b19      	ldr	r3, [pc, #100]	@ (80038b4 <MX_ADC1_Init+0xe0>)
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003856:	4817      	ldr	r0, [pc, #92]	@ (80038b4 <MX_ADC1_Init+0xe0>)
 8003858:	f001 fbd4 	bl	8005004 <HAL_ADC_Init>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8003862:	f000 fa5e 	bl	8003d22 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003866:	2300      	movs	r3, #0
 8003868:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800386a:	f107 031c 	add.w	r3, r7, #28
 800386e:	4619      	mov	r1, r3
 8003870:	4810      	ldr	r0, [pc, #64]	@ (80038b4 <MX_ADC1_Init+0xe0>)
 8003872:	f002 f923 	bl	8005abc <HAL_ADCEx_MultiModeConfigChannel>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800387c:	f000 fa51 	bl	8003d22 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003880:	4b0e      	ldr	r3, [pc, #56]	@ (80038bc <MX_ADC1_Init+0xe8>)
 8003882:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003884:	2306      	movs	r3, #6
 8003886:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800388c:	237f      	movs	r3, #127	@ 0x7f
 800388e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003890:	2304      	movs	r3, #4
 8003892:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003898:	1d3b      	adds	r3, r7, #4
 800389a:	4619      	mov	r1, r3
 800389c:	4805      	ldr	r0, [pc, #20]	@ (80038b4 <MX_ADC1_Init+0xe0>)
 800389e:	f001 fcfd 	bl	800529c <HAL_ADC_ConfigChannel>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80038a8:	f000 fa3b 	bl	8003d22 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80038ac:	bf00      	nop
 80038ae:	3728      	adds	r7, #40	@ 0x28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	200001f0 	.word	0x200001f0
 80038b8:	42028000 	.word	0x42028000
 80038bc:	0c900008 	.word	0x0c900008

080038c0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0

  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80038c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80038ca:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80038d0:	2302      	movs	r3, #2
 80038d2:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80038d4:	2301      	movs	r3, #1
 80038d6:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x01;
 80038d8:	2301      	movs	r3, #1
 80038da:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0;
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]
  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80038e0:	4b33      	ldr	r3, [pc, #204]	@ (80039b0 <MX_FDCAN1_Init+0xf0>)
 80038e2:	4a34      	ldr	r2, [pc, #208]	@ (80039b4 <MX_FDCAN1_Init+0xf4>)
 80038e4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV22;
 80038e6:	4b32      	ldr	r3, [pc, #200]	@ (80039b0 <MX_FDCAN1_Init+0xf0>)
 80038e8:	220b      	movs	r2, #11
 80038ea:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80038ec:	4b30      	ldr	r3, [pc, #192]	@ (80039b0 <MX_FDCAN1_Init+0xf0>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80038f2:	4b2f      	ldr	r3, [pc, #188]	@ (80039b0 <MX_FDCAN1_Init+0xf0>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80038f8:	4b2d      	ldr	r3, [pc, #180]	@ (80039b0 <MX_FDCAN1_Init+0xf0>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80038fe:	4b2c      	ldr	r3, [pc, #176]	@ (80039b0 <MX_FDCAN1_Init+0xf0>)
 8003900:	2200      	movs	r2, #0
 8003902:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003904:	4b2a      	ldr	r3, [pc, #168]	@ (80039b0 <MX_FDCAN1_Init+0xf0>)
 8003906:	2200      	movs	r2, #0
 8003908:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 100;
 800390a:	4b29      	ldr	r3, [pc, #164]	@ (80039b0 <MX_FDCAN1_Init+0xf0>)
 800390c:	2264      	movs	r2, #100	@ 0x64
 800390e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8003910:	4b27      	ldr	r3, [pc, #156]	@ (80039b0 <MX_FDCAN1_Init+0xf0>)
 8003912:	2201      	movs	r2, #1
 8003914:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8003916:	4b26      	ldr	r3, [pc, #152]	@ (80039b0 <MX_FDCAN1_Init+0xf0>)
 8003918:	2202      	movs	r2, #2
 800391a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800391c:	4b24      	ldr	r3, [pc, #144]	@ (80039b0 <MX_FDCAN1_Init+0xf0>)
 800391e:	2202      	movs	r2, #2
 8003920:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8003922:	4b23      	ldr	r3, [pc, #140]	@ (80039b0 <MX_FDCAN1_Init+0xf0>)
 8003924:	2201      	movs	r2, #1
 8003926:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8003928:	4b21      	ldr	r3, [pc, #132]	@ (80039b0 <MX_FDCAN1_Init+0xf0>)
 800392a:	2201      	movs	r2, #1
 800392c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800392e:	4b20      	ldr	r3, [pc, #128]	@ (80039b0 <MX_FDCAN1_Init+0xf0>)
 8003930:	2201      	movs	r2, #1
 8003932:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8003934:	4b1e      	ldr	r3, [pc, #120]	@ (80039b0 <MX_FDCAN1_Init+0xf0>)
 8003936:	2201      	movs	r2, #1
 8003938:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800393a:	4b1d      	ldr	r3, [pc, #116]	@ (80039b0 <MX_FDCAN1_Init+0xf0>)
 800393c:	2200      	movs	r2, #0
 800393e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 8003940:	4b1b      	ldr	r3, [pc, #108]	@ (80039b0 <MX_FDCAN1_Init+0xf0>)
 8003942:	2201      	movs	r2, #1
 8003944:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003946:	4b1a      	ldr	r3, [pc, #104]	@ (80039b0 <MX_FDCAN1_Init+0xf0>)
 8003948:	2200      	movs	r2, #0
 800394a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800394c:	4818      	ldr	r0, [pc, #96]	@ (80039b0 <MX_FDCAN1_Init+0xf0>)
 800394e:	f002 fa69 	bl	8005e24 <HAL_FDCAN_Init>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <MX_FDCAN1_Init+0x9c>
  {
    Error_Handler();
 8003958:	f000 f9e3 	bl	8003d22 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 800395c:	2200      	movs	r2, #0
 800395e:	2101      	movs	r1, #1
 8003960:	4813      	ldr	r0, [pc, #76]	@ (80039b0 <MX_FDCAN1_Init+0xf0>)
 8003962:	f002 fd7f 	bl	8006464 <HAL_FDCAN_ActivateNotification>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d004      	beq.n	8003976 <MX_FDCAN1_Init+0xb6>
	printf("1");
 800396c:	2031      	movs	r0, #49	@ 0x31
 800396e:	f006 ffc9 	bl	800a904 <putchar>
	Error_Handler();
 8003972:	f000 f9d6 	bl	8003d22 <Error_Handler>
  }
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8003976:	463b      	mov	r3, r7
 8003978:	4619      	mov	r1, r3
 800397a:	480d      	ldr	r0, [pc, #52]	@ (80039b0 <MX_FDCAN1_Init+0xf0>)
 800397c:	f002 fba4 	bl	80060c8 <HAL_FDCAN_ConfigFilter>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d004      	beq.n	8003990 <MX_FDCAN1_Init+0xd0>
    printf("2");
 8003986:	2032      	movs	r0, #50	@ 0x32
 8003988:	f006 ffbc 	bl	800a904 <putchar>
    Error_Handler();
 800398c:	f000 f9c9 	bl	8003d22 <Error_Handler>
  }
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8003990:	4807      	ldr	r0, [pc, #28]	@ (80039b0 <MX_FDCAN1_Init+0xf0>)
 8003992:	f002 fbf3 	bl	800617c <HAL_FDCAN_Start>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d004      	beq.n	80039a6 <MX_FDCAN1_Init+0xe6>
    printf("3");
 800399c:	2033      	movs	r0, #51	@ 0x33
 800399e:	f006 ffb1 	bl	800a904 <putchar>
    Error_Handler();
 80039a2:	f000 f9be 	bl	8003d22 <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 80039a6:	bf00      	nop
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000258 	.word	0x20000258
 80039b4:	4000a400 	.word	0x4000a400

080039b8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80039bc:	2000      	movs	r0, #0
 80039be:	f003 fa2f 	bl	8006e20 <HAL_ICACHE_ConfigAssociativityMode>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80039c8:	f000 f9ab 	bl	8003d22 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80039cc:	f003 fa48 	bl	8006e60 <HAL_ICACHE_Enable>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80039d6:	f000 f9a4 	bl	8003d22 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80039e4:	4b22      	ldr	r3, [pc, #136]	@ (8003a70 <MX_LPUART1_UART_Init+0x90>)
 80039e6:	4a23      	ldr	r2, [pc, #140]	@ (8003a74 <MX_LPUART1_UART_Init+0x94>)
 80039e8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80039ea:	4b21      	ldr	r3, [pc, #132]	@ (8003a70 <MX_LPUART1_UART_Init+0x90>)
 80039ec:	4a22      	ldr	r2, [pc, #136]	@ (8003a78 <MX_LPUART1_UART_Init+0x98>)
 80039ee:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80039f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003a70 <MX_LPUART1_UART_Init+0x90>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80039f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003a70 <MX_LPUART1_UART_Init+0x90>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80039fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003a70 <MX_LPUART1_UART_Init+0x90>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003a02:	4b1b      	ldr	r3, [pc, #108]	@ (8003a70 <MX_LPUART1_UART_Init+0x90>)
 8003a04:	220c      	movs	r2, #12
 8003a06:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a08:	4b19      	ldr	r3, [pc, #100]	@ (8003a70 <MX_LPUART1_UART_Init+0x90>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a0e:	4b18      	ldr	r3, [pc, #96]	@ (8003a70 <MX_LPUART1_UART_Init+0x90>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003a14:	4b16      	ldr	r3, [pc, #88]	@ (8003a70 <MX_LPUART1_UART_Init+0x90>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a1a:	4b15      	ldr	r3, [pc, #84]	@ (8003a70 <MX_LPUART1_UART_Init+0x90>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8003a20:	4b13      	ldr	r3, [pc, #76]	@ (8003a70 <MX_LPUART1_UART_Init+0x90>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003a26:	4812      	ldr	r0, [pc, #72]	@ (8003a70 <MX_LPUART1_UART_Init+0x90>)
 8003a28:	f005 f9da 	bl	8008de0 <HAL_UART_Init>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8003a32:	f000 f976 	bl	8003d22 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a36:	2100      	movs	r1, #0
 8003a38:	480d      	ldr	r0, [pc, #52]	@ (8003a70 <MX_LPUART1_UART_Init+0x90>)
 8003a3a:	f005 ff79 	bl	8009930 <HAL_UARTEx_SetTxFifoThreshold>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8003a44:	f000 f96d 	bl	8003d22 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4809      	ldr	r0, [pc, #36]	@ (8003a70 <MX_LPUART1_UART_Init+0x90>)
 8003a4c:	f005 ffae 	bl	80099ac <HAL_UARTEx_SetRxFifoThreshold>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8003a56:	f000 f964 	bl	8003d22 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003a5a:	4805      	ldr	r0, [pc, #20]	@ (8003a70 <MX_LPUART1_UART_Init+0x90>)
 8003a5c:	f005 ff2f 	bl	80098be <HAL_UARTEx_DisableFifoMode>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8003a66:	f000 f95c 	bl	8003d22 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003a6a:	bf00      	nop
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	200002bc 	.word	0x200002bc
 8003a74:	40008000 	.word	0x40008000
 8003a78:	00033324 	.word	0x00033324

08003a7c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8003a82:	463b      	mov	r3, r7
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	605a      	str	r2, [r3, #4]
 8003a8a:	609a      	str	r2, [r3, #8]
 8003a8c:	60da      	str	r2, [r3, #12]
 8003a8e:	611a      	str	r2, [r3, #16]
 8003a90:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003a92:	4b1d      	ldr	r3, [pc, #116]	@ (8003b08 <MX_RTC_Init+0x8c>)
 8003a94:	4a1d      	ldr	r2, [pc, #116]	@ (8003b0c <MX_RTC_Init+0x90>)
 8003a96:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003a98:	4b1b      	ldr	r3, [pc, #108]	@ (8003b08 <MX_RTC_Init+0x8c>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003b08 <MX_RTC_Init+0x8c>)
 8003aa0:	227f      	movs	r2, #127	@ 0x7f
 8003aa2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003aa4:	4b18      	ldr	r3, [pc, #96]	@ (8003b08 <MX_RTC_Init+0x8c>)
 8003aa6:	22ff      	movs	r2, #255	@ 0xff
 8003aa8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003aaa:	4b17      	ldr	r3, [pc, #92]	@ (8003b08 <MX_RTC_Init+0x8c>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003ab0:	4b15      	ldr	r3, [pc, #84]	@ (8003b08 <MX_RTC_Init+0x8c>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003ab6:	4b14      	ldr	r3, [pc, #80]	@ (8003b08 <MX_RTC_Init+0x8c>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003abc:	4b12      	ldr	r3, [pc, #72]	@ (8003b08 <MX_RTC_Init+0x8c>)
 8003abe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ac2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8003ac4:	4b10      	ldr	r3, [pc, #64]	@ (8003b08 <MX_RTC_Init+0x8c>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003aca:	480f      	ldr	r0, [pc, #60]	@ (8003b08 <MX_RTC_Init+0x8c>)
 8003acc:	f005 f84e 	bl	8008b6c <HAL_RTC_Init>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8003ad6:	f000 f924 	bl	8003d22 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8003ada:	2300      	movs	r3, #0
 8003adc:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8003aea:	463b      	mov	r3, r7
 8003aec:	4619      	mov	r1, r3
 8003aee:	4806      	ldr	r0, [pc, #24]	@ (8003b08 <MX_RTC_Init+0x8c>)
 8003af0:	f005 f94a 	bl	8008d88 <HAL_RTCEx_PrivilegeModeSet>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8003afa:	f000 f912 	bl	8003d22 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003afe:	bf00      	nop
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000350 	.word	0x20000350
 8003b0c:	40002800 	.word	0x40002800

08003b10 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b16:	463b      	mov	r3, r7
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	605a      	str	r2, [r3, #4]
 8003b1e:	609a      	str	r2, [r3, #8]
 8003b20:	60da      	str	r2, [r3, #12]
 8003b22:	611a      	str	r2, [r3, #16]
 8003b24:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8003b26:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8003b2a:	f7ff fa15 	bl	8002f58 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8003b2e:	2002      	movs	r0, #2
 8003b30:	f7ff f9fa 	bl	8002f28 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8003b34:	2001      	movs	r0, #1
 8003b36:	f7ff f9f7 	bl	8002f28 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003b3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b3e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003b40:	2303      	movs	r3, #3
 8003b42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003b44:	2300      	movs	r3, #0
 8003b46:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b48:	463b      	mov	r3, r7
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4809      	ldr	r0, [pc, #36]	@ (8003b74 <MX_UCPD1_Init+0x64>)
 8003b4e:	f006 f904 	bl	8009d5a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003b52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b56:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b60:	463b      	mov	r3, r7
 8003b62:	4619      	mov	r1, r3
 8003b64:	4804      	ldr	r0, [pc, #16]	@ (8003b78 <MX_UCPD1_Init+0x68>)
 8003b66:	f006 f8f8 	bl	8009d5a <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8003b6a:	bf00      	nop
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	42020400 	.word	0x42020400
 8003b78:	42020000 	.word	0x42020000

08003b7c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8003b80:	4b10      	ldr	r3, [pc, #64]	@ (8003bc4 <MX_USB_PCD_Init+0x48>)
 8003b82:	4a11      	ldr	r2, [pc, #68]	@ (8003bc8 <MX_USB_PCD_Init+0x4c>)
 8003b84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003b86:	4b0f      	ldr	r3, [pc, #60]	@ (8003bc4 <MX_USB_PCD_Init+0x48>)
 8003b88:	2208      	movs	r2, #8
 8003b8a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc4 <MX_USB_PCD_Init+0x48>)
 8003b8e:	2202      	movs	r2, #2
 8003b90:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003b92:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc4 <MX_USB_PCD_Init+0x48>)
 8003b94:	2202      	movs	r2, #2
 8003b96:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8003b98:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc4 <MX_USB_PCD_Init+0x48>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003b9e:	4b09      	ldr	r3, [pc, #36]	@ (8003bc4 <MX_USB_PCD_Init+0x48>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003ba4:	4b07      	ldr	r3, [pc, #28]	@ (8003bc4 <MX_USB_PCD_Init+0x48>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003baa:	4b06      	ldr	r3, [pc, #24]	@ (8003bc4 <MX_USB_PCD_Init+0x48>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003bb0:	4804      	ldr	r0, [pc, #16]	@ (8003bc4 <MX_USB_PCD_Init+0x48>)
 8003bb2:	f003 f965 	bl	8006e80 <HAL_PCD_Init>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8003bbc:	f000 f8b1 	bl	8003d22 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8003bc0:	bf00      	nop
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	20000378 	.word	0x20000378
 8003bc8:	4000d400 	.word	0x4000d400

08003bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08a      	sub	sp, #40	@ 0x28
 8003bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd2:	f107 0314 	add.w	r3, r7, #20
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	605a      	str	r2, [r3, #4]
 8003bdc:	609a      	str	r2, [r3, #8]
 8003bde:	60da      	str	r2, [r3, #12]
 8003be0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003be2:	4b45      	ldr	r3, [pc, #276]	@ (8003cf8 <MX_GPIO_Init+0x12c>)
 8003be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003be6:	4a44      	ldr	r2, [pc, #272]	@ (8003cf8 <MX_GPIO_Init+0x12c>)
 8003be8:	f043 0304 	orr.w	r3, r3, #4
 8003bec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bee:	4b42      	ldr	r3, [pc, #264]	@ (8003cf8 <MX_GPIO_Init+0x12c>)
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bfa:	4b3f      	ldr	r3, [pc, #252]	@ (8003cf8 <MX_GPIO_Init+0x12c>)
 8003bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bfe:	4a3e      	ldr	r2, [pc, #248]	@ (8003cf8 <MX_GPIO_Init+0x12c>)
 8003c00:	f043 0302 	orr.w	r3, r3, #2
 8003c04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c06:	4b3c      	ldr	r3, [pc, #240]	@ (8003cf8 <MX_GPIO_Init+0x12c>)
 8003c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c12:	4b39      	ldr	r3, [pc, #228]	@ (8003cf8 <MX_GPIO_Init+0x12c>)
 8003c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c16:	4a38      	ldr	r2, [pc, #224]	@ (8003cf8 <MX_GPIO_Init+0x12c>)
 8003c18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c1e:	4b36      	ldr	r3, [pc, #216]	@ (8003cf8 <MX_GPIO_Init+0x12c>)
 8003c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8003c2a:	f003 fa9b 	bl	8007164 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c2e:	4b32      	ldr	r3, [pc, #200]	@ (8003cf8 <MX_GPIO_Init+0x12c>)
 8003c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c32:	4a31      	ldr	r2, [pc, #196]	@ (8003cf8 <MX_GPIO_Init+0x12c>)
 8003c34:	f043 0301 	orr.w	r3, r3, #1
 8003c38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c3a:	4b2f      	ldr	r3, [pc, #188]	@ (8003cf8 <MX_GPIO_Init+0x12c>)
 8003c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	607b      	str	r3, [r7, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c46:	4b2c      	ldr	r3, [pc, #176]	@ (8003cf8 <MX_GPIO_Init+0x12c>)
 8003c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8003cf8 <MX_GPIO_Init+0x12c>)
 8003c4c:	f043 0308 	orr.w	r3, r3, #8
 8003c50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c52:	4b29      	ldr	r3, [pc, #164]	@ (8003cf8 <MX_GPIO_Init+0x12c>)
 8003c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2180      	movs	r1, #128	@ 0x80
 8003c62:	4826      	ldr	r0, [pc, #152]	@ (8003cfc <MX_GPIO_Init+0x130>)
 8003c64:	f003 f8c4 	bl	8006df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003c6e:	4824      	ldr	r0, [pc, #144]	@ (8003d00 <MX_GPIO_Init+0x134>)
 8003c70:	f003 f8be 	bl	8006df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8003c74:	2200      	movs	r2, #0
 8003c76:	21a0      	movs	r1, #160	@ 0xa0
 8003c78:	4822      	ldr	r0, [pc, #136]	@ (8003d04 <MX_GPIO_Init+0x138>)
 8003c7a:	f003 f8b9 	bl	8006df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8003c7e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c84:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8003c8e:	f107 0314 	add.w	r3, r7, #20
 8003c92:	4619      	mov	r1, r3
 8003c94:	481b      	ldr	r0, [pc, #108]	@ (8003d04 <MX_GPIO_Init+0x138>)
 8003c96:	f002 ff2b 	bl	8006af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8003c9a:	2380      	movs	r3, #128	@ 0x80
 8003c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8003caa:	f107 0314 	add.w	r3, r7, #20
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4812      	ldr	r0, [pc, #72]	@ (8003cfc <MX_GPIO_Init+0x130>)
 8003cb2:	f002 ff1d 	bl	8006af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8003cb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8003cc8:	f107 0314 	add.w	r3, r7, #20
 8003ccc:	4619      	mov	r1, r3
 8003cce:	480c      	ldr	r0, [pc, #48]	@ (8003d00 <MX_GPIO_Init+0x134>)
 8003cd0:	f002 ff0e 	bl	8006af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8003cd4:	23a0      	movs	r3, #160	@ 0xa0
 8003cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ce4:	f107 0314 	add.w	r3, r7, #20
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4806      	ldr	r0, [pc, #24]	@ (8003d04 <MX_GPIO_Init+0x138>)
 8003cec:	f002 ff00 	bl	8006af0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003cf0:	bf00      	nop
 8003cf2:	3728      	adds	r7, #40	@ 0x28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	42020800 	.word	0x42020800
 8003d00:	42020000 	.word	0x42020000
 8003d04:	42020400 	.word	0x42020400

08003d08 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	return ITM_SendChar(ch);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff f8e0 	bl	8002ed8 <ITM_SendChar>
 8003d18:	4603      	mov	r3, r0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d22:	b480      	push	{r7}
 8003d24:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d26:	b672      	cpsid	i
}
 8003d28:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d2a:	bf00      	nop
 8003d2c:	e7fd      	b.n	8003d2a <Error_Handler+0x8>
	...

08003d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d36:	4b0f      	ldr	r3, [pc, #60]	@ (8003d74 <HAL_MspInit+0x44>)
 8003d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8003d74 <HAL_MspInit+0x44>)
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
 8003d40:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d42:	4b0c      	ldr	r3, [pc, #48]	@ (8003d74 <HAL_MspInit+0x44>)
 8003d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	607b      	str	r3, [r7, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d4e:	4b09      	ldr	r3, [pc, #36]	@ (8003d74 <HAL_MspInit+0x44>)
 8003d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d52:	4a08      	ldr	r2, [pc, #32]	@ (8003d74 <HAL_MspInit+0x44>)
 8003d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d58:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d5a:	4b06      	ldr	r3, [pc, #24]	@ (8003d74 <HAL_MspInit+0x44>)
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40021000 	.word	0x40021000

08003d78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b0ae      	sub	sp, #184	@ 0xb8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d80:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	605a      	str	r2, [r3, #4]
 8003d8a:	609a      	str	r2, [r3, #8]
 8003d8c:	60da      	str	r2, [r3, #12]
 8003d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d90:	f107 0310 	add.w	r3, r7, #16
 8003d94:	2294      	movs	r2, #148	@ 0x94
 8003d96:	2100      	movs	r1, #0
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f006 fef1 	bl	800ab80 <memset>
  if(hadc->Instance==ADC1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a1f      	ldr	r2, [pc, #124]	@ (8003e20 <HAL_ADC_MspInit+0xa8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d137      	bne.n	8003e18 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003da8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003dac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003dae:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8003db2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003db6:	f107 0310 	add.w	r3, r7, #16
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f004 f9c0 	bl	8008140 <HAL_RCCEx_PeriphCLKConfig>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8003dc6:	f7ff ffac 	bl	8003d22 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003dca:	4b16      	ldr	r3, [pc, #88]	@ (8003e24 <HAL_ADC_MspInit+0xac>)
 8003dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dce:	4a15      	ldr	r2, [pc, #84]	@ (8003e24 <HAL_ADC_MspInit+0xac>)
 8003dd0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dd6:	4b13      	ldr	r3, [pc, #76]	@ (8003e24 <HAL_ADC_MspInit+0xac>)
 8003dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003de2:	4b10      	ldr	r3, [pc, #64]	@ (8003e24 <HAL_ADC_MspInit+0xac>)
 8003de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003de6:	4a0f      	ldr	r2, [pc, #60]	@ (8003e24 <HAL_ADC_MspInit+0xac>)
 8003de8:	f043 0304 	orr.w	r3, r3, #4
 8003dec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dee:	4b0d      	ldr	r3, [pc, #52]	@ (8003e24 <HAL_ADC_MspInit+0xac>)
 8003df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	60bb      	str	r3, [r7, #8]
 8003df8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8003dfa:	2304      	movs	r3, #4
 8003dfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e00:	2303      	movs	r3, #3
 8003e02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8003e0c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003e10:	4619      	mov	r1, r3
 8003e12:	4805      	ldr	r0, [pc, #20]	@ (8003e28 <HAL_ADC_MspInit+0xb0>)
 8003e14:	f002 fe6c 	bl	8006af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003e18:	bf00      	nop
 8003e1a:	37b8      	adds	r7, #184	@ 0xb8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	42028000 	.word	0x42028000
 8003e24:	40021000 	.word	0x40021000
 8003e28:	42020800 	.word	0x42020800

08003e2c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b0ae      	sub	sp, #184	@ 0xb8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e34:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e44:	f107 0310 	add.w	r3, r7, #16
 8003e48:	2294      	movs	r2, #148	@ 0x94
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f006 fe97 	bl	800ab80 <memset>
  if(hfdcan->Instance==FDCAN1)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a26      	ldr	r2, [pc, #152]	@ (8003ef0 <HAL_FDCAN_MspInit+0xc4>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d144      	bne.n	8003ee6 <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003e5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e60:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003e62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e66:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e68:	f107 0310 	add.w	r3, r7, #16
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f004 f967 	bl	8008140 <HAL_RCCEx_PeriphCLKConfig>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8003e78:	f7ff ff53 	bl	8003d22 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN1_CLK_ENABLE();
 8003e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ef4 <HAL_FDCAN_MspInit+0xc8>)
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e80:	4a1c      	ldr	r2, [pc, #112]	@ (8003ef4 <HAL_FDCAN_MspInit+0xc8>)
 8003e82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e86:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003e88:	4b1a      	ldr	r3, [pc, #104]	@ (8003ef4 <HAL_FDCAN_MspInit+0xc8>)
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e94:	4b17      	ldr	r3, [pc, #92]	@ (8003ef4 <HAL_FDCAN_MspInit+0xc8>)
 8003e96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e98:	4a16      	ldr	r2, [pc, #88]	@ (8003ef4 <HAL_FDCAN_MspInit+0xc8>)
 8003e9a:	f043 0308 	orr.w	r3, r3, #8
 8003e9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ea0:	4b14      	ldr	r3, [pc, #80]	@ (8003ef4 <HAL_FDCAN_MspInit+0xc8>)
 8003ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003eac:	2303      	movs	r3, #3
 8003eae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003ec4:	2309      	movs	r3, #9
 8003ec6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003eca:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4809      	ldr	r0, [pc, #36]	@ (8003ef8 <HAL_FDCAN_MspInit+0xcc>)
 8003ed2:	f002 fe0d 	bl	8006af0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	2100      	movs	r1, #0
 8003eda:	2027      	movs	r0, #39	@ 0x27
 8003edc:	f001 ff6d 	bl	8005dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003ee0:	2027      	movs	r0, #39	@ 0x27
 8003ee2:	f001 ff84 	bl	8005dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8003ee6:	bf00      	nop
 8003ee8:	37b8      	adds	r7, #184	@ 0xb8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	4000a400 	.word	0x4000a400
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	42020c00 	.word	0x42020c00

08003efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b0ae      	sub	sp, #184	@ 0xb8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f04:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	605a      	str	r2, [r3, #4]
 8003f0e:	609a      	str	r2, [r3, #8]
 8003f10:	60da      	str	r2, [r3, #12]
 8003f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f14:	f107 0310 	add.w	r3, r7, #16
 8003f18:	2294      	movs	r2, #148	@ 0x94
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f006 fe2f 	bl	800ab80 <memset>
  if(huart->Instance==LPUART1)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a22      	ldr	r2, [pc, #136]	@ (8003fb0 <HAL_UART_MspInit+0xb4>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d13d      	bne.n	8003fa8 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003f2c:	2320      	movs	r3, #32
 8003f2e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003f30:	2300      	movs	r3, #0
 8003f32:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f34:	f107 0310 	add.w	r3, r7, #16
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f004 f901 	bl	8008140 <HAL_RCCEx_PeriphCLKConfig>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003f44:	f7ff feed 	bl	8003d22 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003f48:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb4 <HAL_UART_MspInit+0xb8>)
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f4c:	4a19      	ldr	r2, [pc, #100]	@ (8003fb4 <HAL_UART_MspInit+0xb8>)
 8003f4e:	f043 0301 	orr.w	r3, r3, #1
 8003f52:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003f54:	4b17      	ldr	r3, [pc, #92]	@ (8003fb4 <HAL_UART_MspInit+0xb8>)
 8003f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003f60:	4b14      	ldr	r3, [pc, #80]	@ (8003fb4 <HAL_UART_MspInit+0xb8>)
 8003f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f64:	4a13      	ldr	r2, [pc, #76]	@ (8003fb4 <HAL_UART_MspInit+0xb8>)
 8003f66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f6c:	4b11      	ldr	r3, [pc, #68]	@ (8003fb4 <HAL_UART_MspInit+0xb8>)
 8003f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f74:	60bb      	str	r3, [r7, #8]
 8003f76:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8003f78:	f003 f8f4 	bl	8007164 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8003f7c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003f80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f84:	2302      	movs	r3, #2
 8003f86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f90:	2300      	movs	r3, #0
 8003f92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003f96:	2308      	movs	r3, #8
 8003f98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f9c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4805      	ldr	r0, [pc, #20]	@ (8003fb8 <HAL_UART_MspInit+0xbc>)
 8003fa4:	f002 fda4 	bl	8006af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8003fa8:	bf00      	nop
 8003faa:	37b8      	adds	r7, #184	@ 0xb8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40008000 	.word	0x40008000
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	42021800 	.word	0x42021800

08003fbc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b0a8      	sub	sp, #160	@ 0xa0
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fc4:	f107 030c 	add.w	r3, r7, #12
 8003fc8:	2294      	movs	r2, #148	@ 0x94
 8003fca:	2100      	movs	r1, #0
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f006 fdd7 	bl	800ab80 <memset>
  if(hrtc->Instance==RTC)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a16      	ldr	r2, [pc, #88]	@ (8004030 <HAL_RTC_MspInit+0x74>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d124      	bne.n	8004026 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003fdc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003fe0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003fe2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fe6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fea:	f107 030c 	add.w	r3, r7, #12
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f004 f8a6 	bl	8008140 <HAL_RCCEx_PeriphCLKConfig>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003ffa:	f7ff fe92 	bl	8003d22 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8004034 <HAL_RTC_MspInit+0x78>)
 8004000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004004:	4a0b      	ldr	r2, [pc, #44]	@ (8004034 <HAL_RTC_MspInit+0x78>)
 8004006:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800400a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800400e:	4b09      	ldr	r3, [pc, #36]	@ (8004034 <HAL_RTC_MspInit+0x78>)
 8004010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004012:	4a08      	ldr	r2, [pc, #32]	@ (8004034 <HAL_RTC_MspInit+0x78>)
 8004014:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004018:	6593      	str	r3, [r2, #88]	@ 0x58
 800401a:	4b06      	ldr	r3, [pc, #24]	@ (8004034 <HAL_RTC_MspInit+0x78>)
 800401c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800401e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004022:	60bb      	str	r3, [r7, #8]
 8004024:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004026:	bf00      	nop
 8004028:	37a0      	adds	r7, #160	@ 0xa0
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40002800 	.word	0x40002800
 8004034:	40021000 	.word	0x40021000

08004038 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b0ae      	sub	sp, #184	@ 0xb8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004040:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	605a      	str	r2, [r3, #4]
 800404a:	609a      	str	r2, [r3, #8]
 800404c:	60da      	str	r2, [r3, #12]
 800404e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004050:	f107 0310 	add.w	r3, r7, #16
 8004054:	2294      	movs	r2, #148	@ 0x94
 8004056:	2100      	movs	r1, #0
 8004058:	4618      	mov	r0, r3
 800405a:	f006 fd91 	bl	800ab80 <memset>
  if(hpcd->Instance==USB)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a22      	ldr	r2, [pc, #136]	@ (80040ec <HAL_PCD_MspInit+0xb4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d13d      	bne.n	80040e4 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004068:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800406c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800406e:	2300      	movs	r3, #0
 8004070:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004074:	f107 0310 	add.w	r3, r7, #16
 8004078:	4618      	mov	r0, r3
 800407a:	f004 f861 	bl	8008140 <HAL_RCCEx_PeriphCLKConfig>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8004084:	f7ff fe4d 	bl	8003d22 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004088:	4b19      	ldr	r3, [pc, #100]	@ (80040f0 <HAL_PCD_MspInit+0xb8>)
 800408a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800408c:	4a18      	ldr	r2, [pc, #96]	@ (80040f0 <HAL_PCD_MspInit+0xb8>)
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004094:	4b16      	ldr	r3, [pc, #88]	@ (80040f0 <HAL_PCD_MspInit+0xb8>)
 8004096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80040a0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80040a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a8:	2302      	movs	r3, #2
 80040aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040b4:	2300      	movs	r3, #0
 80040b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80040ba:	230a      	movs	r3, #10
 80040bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040c0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80040c4:	4619      	mov	r1, r3
 80040c6:	480b      	ldr	r0, [pc, #44]	@ (80040f4 <HAL_PCD_MspInit+0xbc>)
 80040c8:	f002 fd12 	bl	8006af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80040cc:	4b08      	ldr	r3, [pc, #32]	@ (80040f0 <HAL_PCD_MspInit+0xb8>)
 80040ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d0:	4a07      	ldr	r2, [pc, #28]	@ (80040f0 <HAL_PCD_MspInit+0xb8>)
 80040d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80040d6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80040d8:	4b05      	ldr	r3, [pc, #20]	@ (80040f0 <HAL_PCD_MspInit+0xb8>)
 80040da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040e0:	60bb      	str	r3, [r7, #8]
 80040e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80040e4:	bf00      	nop
 80040e6:	37b8      	adds	r7, #184	@ 0xb8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	4000d400 	.word	0x4000d400
 80040f0:	40021000 	.word	0x40021000
 80040f4:	42020000 	.word	0x42020000

080040f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80040fc:	bf00      	nop
 80040fe:	e7fd      	b.n	80040fc <NMI_Handler+0x4>

08004100 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004104:	bf00      	nop
 8004106:	e7fd      	b.n	8004104 <HardFault_Handler+0x4>

08004108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800410c:	bf00      	nop
 800410e:	e7fd      	b.n	800410c <MemManage_Handler+0x4>

08004110 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004114:	bf00      	nop
 8004116:	e7fd      	b.n	8004114 <BusFault_Handler+0x4>

08004118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800411c:	bf00      	nop
 800411e:	e7fd      	b.n	800411c <UsageFault_Handler+0x4>

08004120 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800412e:	b480      	push	{r7}
 8004130:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004132:	bf00      	nop
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004140:	bf00      	nop
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800414e:	f000 fd75 	bl	8004c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004152:	bf00      	nop
 8004154:	bd80      	pop	{r7, pc}
	...

08004158 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800415c:	4802      	ldr	r0, [pc, #8]	@ (8004168 <FDCAN1_IT0_IRQHandler+0x10>)
 800415e:	f002 fa67 	bl	8006630 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004162:	bf00      	nop
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20000258 	.word	0x20000258

0800416c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  return 1;
 8004170:	2301      	movs	r3, #1
}
 8004172:	4618      	mov	r0, r3
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <_kill>:

int _kill(int pid, int sig)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004186:	f006 fd6d 	bl	800ac64 <__errno>
 800418a:	4603      	mov	r3, r0
 800418c:	2216      	movs	r2, #22
 800418e:	601a      	str	r2, [r3, #0]
  return -1;
 8004190:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004194:	4618      	mov	r0, r3
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <_exit>:

void _exit (int status)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80041a4:	f04f 31ff 	mov.w	r1, #4294967295
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff ffe7 	bl	800417c <_kill>
  while (1) {}    /* Make sure we hang here */
 80041ae:	bf00      	nop
 80041b0:	e7fd      	b.n	80041ae <_exit+0x12>

080041b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b086      	sub	sp, #24
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	60f8      	str	r0, [r7, #12]
 80041ba:	60b9      	str	r1, [r7, #8]
 80041bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	e00a      	b.n	80041da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80041c4:	f3af 8000 	nop.w
 80041c8:	4601      	mov	r1, r0
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	60ba      	str	r2, [r7, #8]
 80041d0:	b2ca      	uxtb	r2, r1
 80041d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	3301      	adds	r3, #1
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	429a      	cmp	r2, r3
 80041e0:	dbf0      	blt.n	80041c4 <_read+0x12>
  }

  return len;
 80041e2:	687b      	ldr	r3, [r7, #4]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	e009      	b.n	8004212 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	60ba      	str	r2, [r7, #8]
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff fd7e 	bl	8003d08 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	3301      	adds	r3, #1
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	429a      	cmp	r2, r3
 8004218:	dbf1      	blt.n	80041fe <_write+0x12>
  }
  return len;
 800421a:	687b      	ldr	r3, [r7, #4]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <_close>:

int _close(int file)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800422c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004230:	4618      	mov	r0, r3
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800424c:	605a      	str	r2, [r3, #4]
  return 0;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <_isatty>:

int _isatty(int file)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004264:	2301      	movs	r3, #1
}
 8004266:	4618      	mov	r0, r3
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004272:	b480      	push	{r7}
 8004274:	b085      	sub	sp, #20
 8004276:	af00      	add	r7, sp, #0
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004294:	4a14      	ldr	r2, [pc, #80]	@ (80042e8 <_sbrk+0x5c>)
 8004296:	4b15      	ldr	r3, [pc, #84]	@ (80042ec <_sbrk+0x60>)
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042a0:	4b13      	ldr	r3, [pc, #76]	@ (80042f0 <_sbrk+0x64>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d102      	bne.n	80042ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042a8:	4b11      	ldr	r3, [pc, #68]	@ (80042f0 <_sbrk+0x64>)
 80042aa:	4a12      	ldr	r2, [pc, #72]	@ (80042f4 <_sbrk+0x68>)
 80042ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042ae:	4b10      	ldr	r3, [pc, #64]	@ (80042f0 <_sbrk+0x64>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4413      	add	r3, r2
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d207      	bcs.n	80042cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042bc:	f006 fcd2 	bl	800ac64 <__errno>
 80042c0:	4603      	mov	r3, r0
 80042c2:	220c      	movs	r2, #12
 80042c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042c6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ca:	e009      	b.n	80042e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042cc:	4b08      	ldr	r3, [pc, #32]	@ (80042f0 <_sbrk+0x64>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042d2:	4b07      	ldr	r3, [pc, #28]	@ (80042f0 <_sbrk+0x64>)
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4413      	add	r3, r2
 80042da:	4a05      	ldr	r2, [pc, #20]	@ (80042f0 <_sbrk+0x64>)
 80042dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042de:	68fb      	ldr	r3, [r7, #12]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	20030000 	.word	0x20030000
 80042ec:	00000400 	.word	0x00000400
 80042f0:	20000a90 	.word	0x20000a90
 80042f4:	20000be8 	.word	0x20000be8

080042f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80042fc:	4b06      	ldr	r3, [pc, #24]	@ (8004318 <SystemInit+0x20>)
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004302:	4a05      	ldr	r2, [pc, #20]	@ (8004318 <SystemInit+0x20>)
 8004304:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004308:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800430c:	bf00      	nop
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	e000ed00 	.word	0xe000ed00

0800431c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8004322:	4b4f      	ldr	r3, [pc, #316]	@ (8004460 <SystemCoreClockUpdate+0x144>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b00      	cmp	r3, #0
 800432c:	d107      	bne.n	800433e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800432e:	4b4c      	ldr	r3, [pc, #304]	@ (8004460 <SystemCoreClockUpdate+0x144>)
 8004330:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004334:	0a1b      	lsrs	r3, r3, #8
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	e005      	b.n	800434a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800433e:	4b48      	ldr	r3, [pc, #288]	@ (8004460 <SystemCoreClockUpdate+0x144>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	091b      	lsrs	r3, r3, #4
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800434a:	4a46      	ldr	r2, [pc, #280]	@ (8004464 <SystemCoreClockUpdate+0x148>)
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004352:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004354:	4b42      	ldr	r3, [pc, #264]	@ (8004460 <SystemCoreClockUpdate+0x144>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 030c 	and.w	r3, r3, #12
 800435c:	2b0c      	cmp	r3, #12
 800435e:	d866      	bhi.n	800442e <SystemCoreClockUpdate+0x112>
 8004360:	a201      	add	r2, pc, #4	@ (adr r2, 8004368 <SystemCoreClockUpdate+0x4c>)
 8004362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004366:	bf00      	nop
 8004368:	0800439d 	.word	0x0800439d
 800436c:	0800442f 	.word	0x0800442f
 8004370:	0800442f 	.word	0x0800442f
 8004374:	0800442f 	.word	0x0800442f
 8004378:	080043a5 	.word	0x080043a5
 800437c:	0800442f 	.word	0x0800442f
 8004380:	0800442f 	.word	0x0800442f
 8004384:	0800442f 	.word	0x0800442f
 8004388:	080043ad 	.word	0x080043ad
 800438c:	0800442f 	.word	0x0800442f
 8004390:	0800442f 	.word	0x0800442f
 8004394:	0800442f 	.word	0x0800442f
 8004398:	080043b5 	.word	0x080043b5
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800439c:	4a32      	ldr	r2, [pc, #200]	@ (8004468 <SystemCoreClockUpdate+0x14c>)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	6013      	str	r3, [r2, #0]
      break;
 80043a2:	e048      	b.n	8004436 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80043a4:	4b30      	ldr	r3, [pc, #192]	@ (8004468 <SystemCoreClockUpdate+0x14c>)
 80043a6:	4a31      	ldr	r2, [pc, #196]	@ (800446c <SystemCoreClockUpdate+0x150>)
 80043a8:	601a      	str	r2, [r3, #0]
      break;
 80043aa:	e044      	b.n	8004436 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80043ac:	4b2e      	ldr	r3, [pc, #184]	@ (8004468 <SystemCoreClockUpdate+0x14c>)
 80043ae:	4a30      	ldr	r2, [pc, #192]	@ (8004470 <SystemCoreClockUpdate+0x154>)
 80043b0:	601a      	str	r2, [r3, #0]
      break;
 80043b2:	e040      	b.n	8004436 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80043b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004460 <SystemCoreClockUpdate+0x144>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f003 0303 	and.w	r3, r3, #3
 80043bc:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80043be:	4b28      	ldr	r3, [pc, #160]	@ (8004460 <SystemCoreClockUpdate+0x144>)
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	091b      	lsrs	r3, r3, #4
 80043c4:	f003 030f 	and.w	r3, r3, #15
 80043c8:	3301      	adds	r3, #1
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d003      	beq.n	80043da <SystemCoreClockUpdate+0xbe>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d006      	beq.n	80043e6 <SystemCoreClockUpdate+0xca>
 80043d8:	e00b      	b.n	80043f2 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80043da:	4a24      	ldr	r2, [pc, #144]	@ (800446c <SystemCoreClockUpdate+0x150>)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e2:	613b      	str	r3, [r7, #16]
          break;
 80043e4:	e00b      	b.n	80043fe <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80043e6:	4a22      	ldr	r2, [pc, #136]	@ (8004470 <SystemCoreClockUpdate+0x154>)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ee:	613b      	str	r3, [r7, #16]
          break;
 80043f0:	e005      	b.n	80043fe <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fa:	613b      	str	r3, [r7, #16]
          break;
 80043fc:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80043fe:	4b18      	ldr	r3, [pc, #96]	@ (8004460 <SystemCoreClockUpdate+0x144>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	0a1b      	lsrs	r3, r3, #8
 8004404:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	fb02 f303 	mul.w	r3, r2, r3
 800440e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8004410:	4b13      	ldr	r3, [pc, #76]	@ (8004460 <SystemCoreClockUpdate+0x144>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	0e5b      	lsrs	r3, r3, #25
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	3301      	adds	r3, #1
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	fbb2 f3f3 	udiv	r3, r2, r3
 8004428:	4a0f      	ldr	r2, [pc, #60]	@ (8004468 <SystemCoreClockUpdate+0x14c>)
 800442a:	6013      	str	r3, [r2, #0]
      break;
 800442c:	e003      	b.n	8004436 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800442e:	4a0e      	ldr	r2, [pc, #56]	@ (8004468 <SystemCoreClockUpdate+0x14c>)
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	6013      	str	r3, [r2, #0]
      break;
 8004434:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8004436:	4b0a      	ldr	r3, [pc, #40]	@ (8004460 <SystemCoreClockUpdate+0x144>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	091b      	lsrs	r3, r3, #4
 800443c:	f003 030f 	and.w	r3, r3, #15
 8004440:	4a0c      	ldr	r2, [pc, #48]	@ (8004474 <SystemCoreClockUpdate+0x158>)
 8004442:	5cd3      	ldrb	r3, [r2, r3]
 8004444:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8004446:	4b08      	ldr	r3, [pc, #32]	@ (8004468 <SystemCoreClockUpdate+0x14c>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
 8004450:	4a05      	ldr	r2, [pc, #20]	@ (8004468 <SystemCoreClockUpdate+0x14c>)
 8004452:	6013      	str	r3, [r2, #0]
}
 8004454:	bf00      	nop
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	40021000 	.word	0x40021000
 8004464:	0800caf4 	.word	0x0800caf4
 8004468:	20000000 	.word	0x20000000
 800446c:	00f42400 	.word	0x00f42400
 8004470:	007a1200 	.word	0x007a1200
 8004474:	0800cadc 	.word	0x0800cadc

08004478 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8004478:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80044b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800447c:	f7ff ff3c 	bl	80042f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004480:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004482:	e003      	b.n	800448c <LoopCopyDataInit>

08004484 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004484:	4b0b      	ldr	r3, [pc, #44]	@ (80044b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004486:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004488:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800448a:	3104      	adds	r1, #4

0800448c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800448c:	480a      	ldr	r0, [pc, #40]	@ (80044b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800448e:	4b0b      	ldr	r3, [pc, #44]	@ (80044bc <LoopForever+0xe>)
	adds	r2, r0, r1
 8004490:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004492:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004494:	d3f6      	bcc.n	8004484 <CopyDataInit>
	ldr	r2, =_sbss
 8004496:	4a0a      	ldr	r2, [pc, #40]	@ (80044c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004498:	e002      	b.n	80044a0 <LoopFillZerobss>

0800449a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800449a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800449c:	f842 3b04 	str.w	r3, [r2], #4

080044a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80044a0:	4b08      	ldr	r3, [pc, #32]	@ (80044c4 <LoopForever+0x16>)
	cmp	r2, r3
 80044a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80044a4:	d3f9      	bcc.n	800449a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80044a6:	f006 fbe3 	bl	800ac70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80044aa:	f7ff f8d3 	bl	8003654 <main>

080044ae <LoopForever>:

LoopForever:
    b LoopForever
 80044ae:	e7fe      	b.n	80044ae <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80044b0:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80044b4:	0800cef0 	.word	0x0800cef0
	ldr	r0, =_sdata
 80044b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80044bc:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 80044c0:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 80044c4:	20000be4 	.word	0x20000be4

080044c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80044c8:	e7fe      	b.n	80044c8 <ADC1_2_IRQHandler>

080044ca <_ardupilot_indication_NotifyState_decode>:
}

/*
 decode ardupilot_indication_NotifyState, return true on failure, false on success
*/
bool _ardupilot_indication_NotifyState_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct ardupilot_indication_NotifyState* msg, bool tao) {
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b088      	sub	sp, #32
 80044ce:	af02      	add	r7, sp, #8
 80044d0:	60f8      	str	r0, [r7, #12]
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	607a      	str	r2, [r7, #4]
 80044d6:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->aux_data_type);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	6819      	ldr	r1, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	2300      	movs	r3, #0
 80044e2:	2208      	movs	r2, #8
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f7fd fae9 	bl	8001abc <canardDecodeScalar>

    *bit_ofs += 8;
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f103 0208 	add.w	r2, r3, #8
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->aux_data.len);
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	6819      	ldr	r1, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	3301      	adds	r3, #1
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	2300      	movs	r3, #0
 8004502:	2208      	movs	r2, #8
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f7fd fad9 	bl	8001abc <canardDecodeScalar>
    *bit_ofs += 8;
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f103 0208 	add.w	r2, r3, #8
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	601a      	str	r2, [r3, #0]
#pragma GCC diagnostic ignored "-Wtype-limits"
    if (msg->aux_data.len > 255) {
        return true; /* invalid value */
    }
#pragma GCC diagnostic pop
    for (size_t i=0; i < msg->aux_data.len; i++) {
 8004516:	2300      	movs	r3, #0
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	e014      	b.n	8004546 <_ardupilot_indication_NotifyState_decode+0x7c>




        canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->aux_data.data[i]);
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	6819      	ldr	r1, [r3, #0]
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	4413      	add	r3, r2
 8004526:	3302      	adds	r3, #2
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	2300      	movs	r3, #0
 800452c:	2208      	movs	r2, #8
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f7fd fac4 	bl	8001abc <canardDecodeScalar>

        *bit_ofs += 8;
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f103 0208 	add.w	r2, r3, #8
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < msg->aux_data.len; i++) {
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	3301      	adds	r3, #1
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	785b      	ldrb	r3, [r3, #1]
 800454a:	461a      	mov	r2, r3
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	4293      	cmp	r3, r2
 8004550:	d3e4      	bcc.n	800451c <_ardupilot_indication_NotifyState_decode+0x52>





    canardDecodeScalar(transfer, *bit_ofs, 64, false, &msg->vehicle_state);
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	6819      	ldr	r1, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	2300      	movs	r3, #0
 8004560:	2240      	movs	r2, #64	@ 0x40
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f7fd faaa 	bl	8001abc <canardDecodeScalar>

    *bit_ofs += 64;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	601a      	str	r2, [r3, #0]





    return false; /* success */
 8004574:	2300      	movs	r3, #0

}
 8004576:	4618      	mov	r0, r3
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <ardupilot_indication_NotifyState_decode>:
}

/*
  return true if the decode is invalid
 */
bool ardupilot_indication_NotifyState_decode(const CanardRxTransfer* transfer, struct ardupilot_indication_NotifyState* msg) {
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > ARDUPILOT_INDICATION_NOTIFYSTATE_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 8004588:	2300      	movs	r3, #0
 800458a:	60bb      	str	r3, [r7, #8]
    if (_ardupilot_indication_NotifyState_decode(transfer, &bit_ofs, msg,
 800458c:	f107 0108 	add.w	r1, r7, #8
 8004590:	2301      	movs	r3, #1
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff ff98 	bl	80044ca <_ardupilot_indication_NotifyState_decode>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <ardupilot_indication_NotifyState_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 80045a0:	2301      	movs	r3, #1
 80045a2:	e00c      	b.n	80045be <ardupilot_indication_NotifyState_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	3307      	adds	r3, #7
 80045a8:	08db      	lsrs	r3, r3, #3
 80045aa:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	8a9b      	ldrh	r3, [r3, #20]
 80045b0:	461a      	mov	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4293      	cmp	r3, r2
 80045b6:	bf14      	ite	ne
 80045b8:	2301      	movne	r3, #1
 80045ba:	2300      	moveq	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <_uavcan_equipment_esc_RawCommand_decode>:
}

/*
 decode uavcan_equipment_esc_RawCommand, return true on failure, false on success
*/
bool _uavcan_equipment_esc_RawCommand_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_equipment_esc_RawCommand* msg, bool tao) {
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	70fb      	strb	r3, [r7, #3]





    if (!tao) {
 80045d6:	78fb      	ldrb	r3, [r7, #3]
 80045d8:	f083 0301 	eor.w	r3, r3, #1
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00e      	beq.n	8004600 <_uavcan_equipment_esc_RawCommand_decode+0x38>


        canardDecodeScalar(transfer, *bit_ofs, 5, false, &msg->cmd.len);
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	6819      	ldr	r1, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	2300      	movs	r3, #0
 80045ec:	2205      	movs	r2, #5
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f7fd fa64 	bl	8001abc <canardDecodeScalar>
        *bit_ofs += 5;
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	1d5a      	adds	r2, r3, #5
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	e00e      	b.n	800461e <_uavcan_equipment_esc_RawCommand_decode+0x56>



    } else {

        msg->cmd.len = ((transfer->payload_len*8)-*bit_ofs)/14;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8a9b      	ldrh	r3, [r3, #20]
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	461a      	mov	r2, r3
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	085b      	lsrs	r3, r3, #1
 8004610:	4a18      	ldr	r2, [pc, #96]	@ (8004674 <_uavcan_equipment_esc_RawCommand_decode+0xac>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	089b      	lsrs	r3, r3, #2
 8004618:	b2da      	uxtb	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	701a      	strb	r2, [r3, #0]



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    if (msg->cmd.len > 20) {
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2b14      	cmp	r3, #20
 8004624:	d901      	bls.n	800462a <_uavcan_equipment_esc_RawCommand_decode+0x62>
        return true; /* invalid value */
 8004626:	2301      	movs	r3, #1
 8004628:	e01f      	b.n	800466a <_uavcan_equipment_esc_RawCommand_decode+0xa2>
    }
#pragma GCC diagnostic pop
    for (size_t i=0; i < msg->cmd.len; i++) {
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	e015      	b.n	800465c <_uavcan_equipment_esc_RawCommand_decode+0x94>




        canardDecodeScalar(transfer, *bit_ofs, 14, true, &msg->cmd.data[i]);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	6819      	ldr	r1, [r3, #0]
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	4413      	add	r3, r2
 800463c:	3302      	adds	r3, #2
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	2301      	movs	r3, #1
 8004642:	220e      	movs	r2, #14
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f7fd fa39 	bl	8001abc <canardDecodeScalar>

        *bit_ofs += 14;
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f103 020e 	add.w	r2, r3, #14
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < msg->cmd.len; i++) {
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	3301      	adds	r3, #1
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	461a      	mov	r2, r3
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	4293      	cmp	r3, r2
 8004666:	d3e3      	bcc.n	8004630 <_uavcan_equipment_esc_RawCommand_decode+0x68>





    return false; /* success */
 8004668:	2300      	movs	r3, #0

}
 800466a:	4618      	mov	r0, r3
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	92492493 	.word	0x92492493

08004678 <uavcan_equipment_esc_RawCommand_decode>:
}

/*
  return true if the decode is invalid
 */
bool uavcan_equipment_esc_RawCommand_decode(const CanardRxTransfer* transfer, struct uavcan_equipment_esc_RawCommand* msg) {
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_EQUIPMENT_ESC_RAWCOMMAND_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 8004682:	2300      	movs	r3, #0
 8004684:	60bb      	str	r3, [r7, #8]
    if (_uavcan_equipment_esc_RawCommand_decode(transfer, &bit_ofs, msg,
 8004686:	f107 0108 	add.w	r1, r7, #8
 800468a:	2301      	movs	r3, #1
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7ff ff9a 	bl	80045c8 <_uavcan_equipment_esc_RawCommand_decode>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <uavcan_equipment_esc_RawCommand_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 800469a:	2301      	movs	r3, #1
 800469c:	e00c      	b.n	80046b8 <uavcan_equipment_esc_RawCommand_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	3307      	adds	r3, #7
 80046a2:	08db      	lsrs	r3, r3, #3
 80046a4:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	8a9b      	ldrh	r3, [r3, #20]
 80046aa:	461a      	mov	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4293      	cmp	r3, r2
 80046b0:	bf14      	ite	ne
 80046b2:	2301      	movne	r3, #1
 80046b4:	2300      	moveq	r3, #0
 80046b6:	b2db      	uxtb	r3, r3
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <_uavcan_protocol_HardwareVersion_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_HardwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao);
static inline bool _uavcan_protocol_HardwareVersion_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao);
void _uavcan_protocol_HardwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao) {
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->major);
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	6819      	ldr	r1, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2208      	movs	r2, #8
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f7fd fb79 	bl	8001dce <canardEncodeScalar>

    *bit_ofs += 8;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f103 0208 	add.w	r2, r3, #8
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->minor);
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	6819      	ldr	r1, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3301      	adds	r3, #1
 80046f0:	2208      	movs	r2, #8
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f7fd fb6b 	bl	8001dce <canardEncodeScalar>

    *bit_ofs += 8;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f103 0208 	add.w	r2, r3, #8
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	601a      	str	r2, [r3, #0]





    for (size_t i=0; i < 16; i++) {
 8004704:	2300      	movs	r3, #0
 8004706:	61fb      	str	r3, [r7, #28]
 8004708:	e012      	b.n	8004730 <_uavcan_protocol_HardwareVersion_encode+0x70>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->unique_id[i]);
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	6819      	ldr	r1, [r3, #0]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	4413      	add	r3, r2
 8004714:	3302      	adds	r3, #2
 8004716:	2208      	movs	r2, #8
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f7fd fb58 	bl	8001dce <canardEncodeScalar>

        *bit_ofs += 8;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f103 0208 	add.w	r2, r3, #8
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < 16; i++) {
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	3301      	adds	r3, #1
 800472e:	61fb      	str	r3, [r7, #28]
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	2b0f      	cmp	r3, #15
 8004734:	d9e9      	bls.n	800470a <_uavcan_protocol_HardwareVersion_encode+0x4a>





    if (!tao) {
 8004736:	78fb      	ldrb	r3, [r7, #3]
 8004738:	f083 0301 	eor.w	r3, r3, #1
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00d      	beq.n	800475e <_uavcan_protocol_HardwareVersion_encode+0x9e>


        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->certificate_of_authenticity.len);
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	6819      	ldr	r1, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3312      	adds	r3, #18
 800474a:	2208      	movs	r2, #8
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f7fd fb3e 	bl	8001dce <canardEncodeScalar>
        *bit_ofs += 8;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f103 0208 	add.w	r2, r3, #8
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	601a      	str	r2, [r3, #0]

    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const size_t certificate_of_authenticity_len = msg->certificate_of_authenticity.len > 255 ? 255 : msg->certificate_of_authenticity.len;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	7c9b      	ldrb	r3, [r3, #18]
 8004762:	617b      	str	r3, [r7, #20]
#pragma GCC diagnostic pop
    for (size_t i=0; i < certificate_of_authenticity_len; i++) {
 8004764:	2300      	movs	r3, #0
 8004766:	61bb      	str	r3, [r7, #24]
 8004768:	e013      	b.n	8004792 <_uavcan_protocol_HardwareVersion_encode+0xd2>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->certificate_of_authenticity.data[i]);
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	6819      	ldr	r1, [r3, #0]
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	3310      	adds	r3, #16
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	4413      	add	r3, r2
 8004776:	3303      	adds	r3, #3
 8004778:	2208      	movs	r2, #8
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f7fd fb27 	bl	8001dce <canardEncodeScalar>

        *bit_ofs += 8;
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f103 0208 	add.w	r2, r3, #8
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < certificate_of_authenticity_len; i++) {
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	3301      	adds	r3, #1
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	429a      	cmp	r2, r3
 8004798:	d3e7      	bcc.n	800476a <_uavcan_protocol_HardwareVersion_encode+0xaa>





}
 800479a:	bf00      	nop
 800479c:	bf00      	nop
 800479e:	3720      	adds	r7, #32
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <_uavcan_protocol_NodeStatus_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
static inline bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
 80047b0:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->uptime_sec);
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	6819      	ldr	r1, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2220      	movs	r2, #32
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f7fd fb07 	bl	8001dce <canardEncodeScalar>

    *bit_ofs += 32;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f103 0220 	add.w	r2, r3, #32
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 2, &msg->health);
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	6819      	ldr	r1, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3304      	adds	r3, #4
 80047d4:	2202      	movs	r2, #2
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f7fd faf9 	bl	8001dce <canardEncodeScalar>

    *bit_ofs += 2;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	1c9a      	adds	r2, r3, #2
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->mode);
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	6819      	ldr	r1, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3305      	adds	r3, #5
 80047ee:	2203      	movs	r2, #3
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f7fd faec 	bl	8001dce <canardEncodeScalar>

    *bit_ofs += 3;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	1cda      	adds	r2, r3, #3
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->sub_mode);
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	6819      	ldr	r1, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3306      	adds	r3, #6
 8004808:	2203      	movs	r2, #3
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f7fd fadf 	bl	8001dce <canardEncodeScalar>

    *bit_ofs += 3;
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	1cda      	adds	r2, r3, #3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->vendor_specific_status_code);
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	6819      	ldr	r1, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3308      	adds	r3, #8
 8004822:	2210      	movs	r2, #16
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f7fd fad2 	bl	8001dce <canardEncodeScalar>

    *bit_ofs += 16;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f103 0210 	add.w	r2, r3, #16
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	601a      	str	r2, [r3, #0]





}
 8004836:	bf00      	nop
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <_uavcan_protocol_SoftwareVersion_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_SoftwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao);
static inline bool _uavcan_protocol_SoftwareVersion_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao);
void _uavcan_protocol_SoftwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao) {
 800483e:	b580      	push	{r7, lr}
 8004840:	b084      	sub	sp, #16
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	607a      	str	r2, [r7, #4]
 800484a:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->major);
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	6819      	ldr	r1, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2208      	movs	r2, #8
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f7fd faba 	bl	8001dce <canardEncodeScalar>

    *bit_ofs += 8;
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f103 0208 	add.w	r2, r3, #8
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->minor);
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	6819      	ldr	r1, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3301      	adds	r3, #1
 800486e:	2208      	movs	r2, #8
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f7fd faac 	bl	8001dce <canardEncodeScalar>

    *bit_ofs += 8;
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f103 0208 	add.w	r2, r3, #8
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->optional_field_flags);
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	6819      	ldr	r1, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3302      	adds	r3, #2
 800488a:	2208      	movs	r2, #8
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f7fd fa9e 	bl	8001dce <canardEncodeScalar>

    *bit_ofs += 8;
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f103 0208 	add.w	r2, r3, #8
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->vcs_commit);
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	6819      	ldr	r1, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3304      	adds	r3, #4
 80048a6:	2220      	movs	r2, #32
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f7fd fa90 	bl	8001dce <canardEncodeScalar>

    *bit_ofs += 32;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f103 0220 	add.w	r2, r3, #32
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 64, &msg->image_crc);
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	6819      	ldr	r1, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3308      	adds	r3, #8
 80048c2:	2240      	movs	r2, #64	@ 0x40
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f7fd fa82 	bl	8001dce <canardEncodeScalar>

    *bit_ofs += 64;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	601a      	str	r2, [r3, #0]





}
 80048d6:	bf00      	nop
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <_uavcan_protocol_GetNodeInfoResponse_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_GetNodeInfoResponse_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao);
static inline bool _uavcan_protocol_GetNodeInfoResponse_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao);
void _uavcan_protocol_GetNodeInfoResponse_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao) {
 80048de:	b580      	push	{r7, lr}
 80048e0:	b086      	sub	sp, #24
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	607a      	str	r2, [r7, #4]
 80048ea:	70fb      	strb	r3, [r7, #3]





    _uavcan_protocol_NodeStatus_encode(buffer, bit_ofs, &msg->status, false);
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	2300      	movs	r3, #0
 80048f0:	68b9      	ldr	r1, [r7, #8]
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f7ff ff56 	bl	80047a4 <_uavcan_protocol_NodeStatus_encode>





    _uavcan_protocol_SoftwareVersion_encode(buffer, bit_ofs, &msg->software_version, false);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f103 0210 	add.w	r2, r3, #16
 80048fe:	2300      	movs	r3, #0
 8004900:	68b9      	ldr	r1, [r7, #8]
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f7ff ff9b 	bl	800483e <_uavcan_protocol_SoftwareVersion_encode>





    _uavcan_protocol_HardwareVersion_encode(buffer, bit_ofs, &msg->hardware_version, false);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f103 0220 	add.w	r2, r3, #32
 800490e:	2300      	movs	r3, #0
 8004910:	68b9      	ldr	r1, [r7, #8]
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f7ff fed4 	bl	80046c0 <_uavcan_protocol_HardwareVersion_encode>





    if (!tao) {
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	f083 0301 	eor.w	r3, r3, #1
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00d      	beq.n	8004940 <_uavcan_protocol_GetNodeInfoResponse_encode+0x62>


        canardEncodeScalar(buffer, *bit_ofs, 7, &msg->name.len);
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	6819      	ldr	r1, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 800492e:	2207      	movs	r2, #7
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f7fd fa4c 	bl	8001dce <canardEncodeScalar>
        *bit_ofs += 7;
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	1dda      	adds	r2, r3, #7
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	601a      	str	r2, [r3, #0]

    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const size_t name_len = msg->name.len > 80 ? 80 : msg->name.len;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8004946:	2b50      	cmp	r3, #80	@ 0x50
 8004948:	bf28      	it	cs
 800494a:	2350      	movcs	r3, #80	@ 0x50
 800494c:	b2db      	uxtb	r3, r3
 800494e:	613b      	str	r3, [r7, #16]
#pragma GCC diagnostic pop
    for (size_t i=0; i < name_len; i++) {
 8004950:	2300      	movs	r3, #0
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	e014      	b.n	8004980 <_uavcan_protocol_GetNodeInfoResponse_encode+0xa2>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->name.data[i]);
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	6819      	ldr	r1, [r3, #0]
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	4413      	add	r3, r2
 8004964:	3303      	adds	r3, #3
 8004966:	2208      	movs	r2, #8
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f7fd fa30 	bl	8001dce <canardEncodeScalar>

        *bit_ofs += 8;
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f103 0208 	add.w	r2, r3, #8
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < name_len; i++) {
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	3301      	adds	r3, #1
 800497e:	617b      	str	r3, [r7, #20]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	429a      	cmp	r2, r3
 8004986:	d3e6      	bcc.n	8004956 <_uavcan_protocol_GetNodeInfoResponse_encode+0x78>





}
 8004988:	bf00      	nop
 800498a:	bf00      	nop
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <uavcan_protocol_GetNodeInfoResponse_encode>:

uint32_t uavcan_protocol_GetNodeInfoResponse_encode(struct uavcan_protocol_GetNodeInfoResponse* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 8004992:	b580      	push	{r7, lr}
 8004994:	b084      	sub	sp, #16
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE);
 80049a0:	f240 1279 	movw	r2, #377	@ 0x179
 80049a4:	2100      	movs	r1, #0
 80049a6:	6838      	ldr	r0, [r7, #0]
 80049a8:	f006 f8ea 	bl	800ab80 <memset>
    _uavcan_protocol_GetNodeInfoResponse_encode(buffer, &bit_ofs, msg, 
 80049ac:	f107 010c 	add.w	r1, r7, #12
 80049b0:	2301      	movs	r3, #1
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6838      	ldr	r0, [r7, #0]
 80049b6:	f7ff ff92 	bl	80048de <_uavcan_protocol_GetNodeInfoResponse_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	3307      	adds	r3, #7
 80049be:	08db      	lsrs	r3, r3, #3
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <_uavcan_protocol_NodeStatus_encode>:
void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	70fb      	strb	r3, [r7, #3]
    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->uptime_sec);
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	6819      	ldr	r1, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f7fd f9f5 	bl	8001dce <canardEncodeScalar>
    *bit_ofs += 32;
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f103 0220 	add.w	r2, r3, #32
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	601a      	str	r2, [r3, #0]
    canardEncodeScalar(buffer, *bit_ofs, 2, &msg->health);
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	6819      	ldr	r1, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3304      	adds	r3, #4
 80049f8:	2202      	movs	r2, #2
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f7fd f9e7 	bl	8001dce <canardEncodeScalar>
    *bit_ofs += 2;
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	1c9a      	adds	r2, r3, #2
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	601a      	str	r2, [r3, #0]
    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->mode);
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	6819      	ldr	r1, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	3305      	adds	r3, #5
 8004a12:	2203      	movs	r2, #3
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f7fd f9da 	bl	8001dce <canardEncodeScalar>
    *bit_ofs += 3;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	1cda      	adds	r2, r3, #3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	601a      	str	r2, [r3, #0]
    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->sub_mode);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	6819      	ldr	r1, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3306      	adds	r3, #6
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f7fd f9cd 	bl	8001dce <canardEncodeScalar>
    *bit_ofs += 3;
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	1cda      	adds	r2, r3, #3
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	601a      	str	r2, [r3, #0]
    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->vendor_specific_status_code);
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	6819      	ldr	r1, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	3308      	adds	r3, #8
 8004a46:	2210      	movs	r2, #16
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f7fd f9c0 	bl	8001dce <canardEncodeScalar>
    *bit_ofs += 16;
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f103 0210 	add.w	r2, r3, #16
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	601a      	str	r2, [r3, #0]
}
 8004a5a:	bf00      	nop
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <_uavcan_protocol_NodeStatus_decode>:

/*
 decode uavcan_protocol_NodeStatus, return true on failure, false on success
*/
bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b086      	sub	sp, #24
 8004a66:	af02      	add	r7, sp, #8
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	607a      	str	r2, [r7, #4]
 8004a6e:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 32, false, &msg->uptime_sec);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	6819      	ldr	r1, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	2300      	movs	r3, #0
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f7fd f81d 	bl	8001abc <canardDecodeScalar>

    *bit_ofs += 32;
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f103 0220 	add.w	r2, r3, #32
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 2, false, &msg->health);
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	6819      	ldr	r1, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	3304      	adds	r3, #4
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	2300      	movs	r3, #0
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f7fd f80d 	bl	8001abc <canardDecodeScalar>

    *bit_ofs += 2;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	1c9a      	adds	r2, r3, #2
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->mode);
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	6819      	ldr	r1, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3305      	adds	r3, #5
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	2203      	movs	r2, #3
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f7fc fffe 	bl	8001abc <canardDecodeScalar>

    *bit_ofs += 3;
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	1cda      	adds	r2, r3, #3
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->sub_mode);
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	6819      	ldr	r1, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	3306      	adds	r3, #6
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	2203      	movs	r2, #3
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f7fc ffef 	bl	8001abc <canardDecodeScalar>

    *bit_ofs += 3;
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	1cda      	adds	r2, r3, #3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 16, false, &msg->vendor_specific_status_code);
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	6819      	ldr	r1, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3308      	adds	r3, #8
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	2300      	movs	r3, #0
 8004af4:	2210      	movs	r2, #16
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f7fc ffe0 	bl	8001abc <canardDecodeScalar>

    *bit_ofs += 16;
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f103 0210 	add.w	r2, r3, #16
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	601a      	str	r2, [r3, #0]





    return false; /* success */
 8004b08:	2300      	movs	r3, #0

}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <uavcan_protocol_NodeStatus_encode>:

uint32_t uavcan_protocol_NodeStatus_encode(struct uavcan_protocol_NodeStatus* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b084      	sub	sp, #16
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE);
 8004b20:	2207      	movs	r2, #7
 8004b22:	2100      	movs	r1, #0
 8004b24:	6838      	ldr	r0, [r7, #0]
 8004b26:	f006 f82b 	bl	800ab80 <memset>
    _uavcan_protocol_NodeStatus_encode(buffer, &bit_ofs, msg, 
 8004b2a:	f107 010c 	add.w	r1, r7, #12
 8004b2e:	2301      	movs	r3, #1
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6838      	ldr	r0, [r7, #0]
 8004b34:	f7ff ff48 	bl	80049c8 <_uavcan_protocol_NodeStatus_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3307      	adds	r3, #7
 8004b3c:	08db      	lsrs	r3, r3, #3
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <uavcan_protocol_NodeStatus_decode>:

/*
  return true if the decode is invalid
 */
bool uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, struct uavcan_protocol_NodeStatus* msg) {
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	60bb      	str	r3, [r7, #8]
    if (_uavcan_protocol_NodeStatus_decode(transfer, &bit_ofs, msg,
 8004b54:	f107 0108 	add.w	r1, r7, #8
 8004b58:	2301      	movs	r3, #1
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff ff80 	bl	8004a62 <_uavcan_protocol_NodeStatus_decode>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <uavcan_protocol_NodeStatus_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e00c      	b.n	8004b86 <uavcan_protocol_NodeStatus_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	3307      	adds	r3, #7
 8004b70:	08db      	lsrs	r3, r3, #3
 8004b72:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	8a9b      	ldrh	r3, [r3, #20]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	bf14      	ite	ne
 8004b80:	2301      	movne	r3, #1
 8004b82:	2300      	moveq	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b082      	sub	sp, #8
 8004b92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8004b98:	2004      	movs	r0, #4
 8004b9a:	f001 f903 	bl	8005da4 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8004b9e:	f7ff fbbd 	bl	800431c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	f000 f80e 	bl	8004bc4 <HAL_InitTick>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	71fb      	strb	r3, [r7, #7]
 8004bb2:	e001      	b.n	8004bb8 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004bb4:	f7ff f8bc 	bl	8003d30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004bb8:	79fb      	ldrb	r3, [r7, #7]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004bd0:	4b17      	ldr	r3, [pc, #92]	@ (8004c30 <HAL_InitTick+0x6c>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d023      	beq.n	8004c20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004bd8:	4b16      	ldr	r3, [pc, #88]	@ (8004c34 <HAL_InitTick+0x70>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	4b14      	ldr	r3, [pc, #80]	@ (8004c30 <HAL_InitTick+0x6c>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	4619      	mov	r1, r3
 8004be2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f001 f90b 	bl	8005e0a <HAL_SYSTICK_Config>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10f      	bne.n	8004c1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b07      	cmp	r3, #7
 8004bfe:	d809      	bhi.n	8004c14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c00:	2200      	movs	r2, #0
 8004c02:	6879      	ldr	r1, [r7, #4]
 8004c04:	f04f 30ff 	mov.w	r0, #4294967295
 8004c08:	f001 f8d7 	bl	8005dba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8004c38 <HAL_InitTick+0x74>)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	e007      	b.n	8004c24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	73fb      	strb	r3, [r7, #15]
 8004c18:	e004      	b.n	8004c24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	73fb      	strb	r3, [r7, #15]
 8004c1e:	e001      	b.n	8004c24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000008 	.word	0x20000008
 8004c34:	20000000 	.word	0x20000000
 8004c38:	20000004 	.word	0x20000004

08004c3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004c40:	4b06      	ldr	r3, [pc, #24]	@ (8004c5c <HAL_IncTick+0x20>)
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	461a      	mov	r2, r3
 8004c46:	4b06      	ldr	r3, [pc, #24]	@ (8004c60 <HAL_IncTick+0x24>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	4a04      	ldr	r2, [pc, #16]	@ (8004c60 <HAL_IncTick+0x24>)
 8004c4e:	6013      	str	r3, [r2, #0]
}
 8004c50:	bf00      	nop
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	20000008 	.word	0x20000008
 8004c60:	20000a94 	.word	0x20000a94

08004c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
  return uwTick;
 8004c68:	4b03      	ldr	r3, [pc, #12]	@ (8004c78 <HAL_GetTick+0x14>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000a94 	.word	0x20000a94

08004c7c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8004c80:	4b03      	ldr	r3, [pc, #12]	@ (8004c90 <HAL_GetUIDw0+0x14>)
 8004c82:	681b      	ldr	r3, [r3, #0]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	0bfa0590 	.word	0x0bfa0590

08004c94 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8004c98:	4b03      	ldr	r3, [pc, #12]	@ (8004ca8 <HAL_GetUIDw1+0x14>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	0bfa0594 	.word	0x0bfa0594

08004cac <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8004cb0:	4b03      	ldr	r3, [pc, #12]	@ (8004cc0 <HAL_GetUIDw2+0x14>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	0bfa0598 	.word	0x0bfa0598

08004cc4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	609a      	str	r2, [r3, #8]
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	609a      	str	r2, [r3, #8]
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
 8004d38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3360      	adds	r3, #96	@ 0x60
 8004d3e:	461a      	mov	r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	4b08      	ldr	r3, [pc, #32]	@ (8004d70 <LL_ADC_SetOffset+0x44>)
 8004d4e:	4013      	ands	r3, r2
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004d64:	bf00      	nop
 8004d66:	371c      	adds	r7, #28
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	03fff000 	.word	0x03fff000

08004d74 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3360      	adds	r3, #96	@ 0x60
 8004d82:	461a      	mov	r2, r3
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3360      	adds	r3, #96	@ 0x60
 8004db0:	461a      	mov	r2, r3
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004dca:	bf00      	nop
 8004dcc:	371c      	adds	r7, #28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
 8004dde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	615a      	str	r2, [r3, #20]
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	3330      	adds	r3, #48	@ 0x30
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	0a1b      	lsrs	r3, r3, #8
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	f003 030c 	and.w	r3, r3, #12
 8004e18:	4413      	add	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	f003 031f 	and.w	r3, r3, #31
 8004e26:	211f      	movs	r1, #31
 8004e28:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	401a      	ands	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	0e9b      	lsrs	r3, r3, #26
 8004e34:	f003 011f 	and.w	r1, r3, #31
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f003 031f 	and.w	r3, r3, #31
 8004e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e42:	431a      	orrs	r2, r3
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004e48:	bf00      	nop
 8004e4a:	371c      	adds	r7, #28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	3314      	adds	r3, #20
 8004e64:	461a      	mov	r2, r3
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	0e5b      	lsrs	r3, r3, #25
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	4413      	add	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	0d1b      	lsrs	r3, r3, #20
 8004e7c:	f003 031f 	and.w	r3, r3, #31
 8004e80:	2107      	movs	r1, #7
 8004e82:	fa01 f303 	lsl.w	r3, r1, r3
 8004e86:	43db      	mvns	r3, r3
 8004e88:	401a      	ands	r2, r3
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	0d1b      	lsrs	r3, r3, #20
 8004e8e:	f003 031f 	and.w	r3, r3, #31
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	fa01 f303 	lsl.w	r3, r1, r3
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004e9e:	bf00      	nop
 8004ea0:	371c      	adds	r7, #28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
	...

08004eac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	401a      	ands	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f003 0318 	and.w	r3, r3, #24
 8004ece:	4908      	ldr	r1, [pc, #32]	@ (8004ef0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004ed0:	40d9      	lsrs	r1, r3
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	400b      	ands	r3, r1
 8004ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eda:	431a      	orrs	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004ee2:	bf00      	nop
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	0007ffff 	.word	0x0007ffff

08004ef4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004f04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6093      	str	r3, [r2, #8]
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f2c:	d101      	bne.n	8004f32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e000      	b.n	8004f34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004f50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004f54:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f7c:	d101      	bne.n	8004f82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e000      	b.n	8004f84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <LL_ADC_IsEnabled+0x18>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e000      	b.n	8004faa <LL_ADC_IsEnabled+0x1a>
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d101      	bne.n	8004fce <LL_ADC_REG_IsConversionOngoing+0x18>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e000      	b.n	8004fd0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 0308 	and.w	r3, r3, #8
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d101      	bne.n	8004ff4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e000      	b.n	8004ff6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
	...

08005004 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005004:	b590      	push	{r4, r7, lr}
 8005006:	b089      	sub	sp, #36	@ 0x24
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800500c:	2300      	movs	r3, #0
 800500e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005010:	2300      	movs	r3, #0
 8005012:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e12e      	b.n	800527c <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005028:	2b00      	cmp	r3, #0
 800502a:	d109      	bne.n	8005040 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7fe fea3 	bl	8003d78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4618      	mov	r0, r3
 8005046:	f7ff ff67 	bl	8004f18 <LL_ADC_IsDeepPowerDownEnabled>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d004      	beq.n	800505a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff ff4d 	bl	8004ef4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f7ff ff82 	bl	8004f68 <LL_ADC_IsInternalRegulatorEnabled>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d115      	bne.n	8005096 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f7ff ff66 	bl	8004f40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005074:	4b83      	ldr	r3, [pc, #524]	@ (8005284 <HAL_ADC_Init+0x280>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	099b      	lsrs	r3, r3, #6
 800507a:	4a83      	ldr	r2, [pc, #524]	@ (8005288 <HAL_ADC_Init+0x284>)
 800507c:	fba2 2303 	umull	r2, r3, r2, r3
 8005080:	099b      	lsrs	r3, r3, #6
 8005082:	3301      	adds	r3, #1
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005088:	e002      	b.n	8005090 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3b01      	subs	r3, #1
 800508e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f9      	bne.n	800508a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff ff64 	bl	8004f68 <LL_ADC_IsInternalRegulatorEnabled>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10d      	bne.n	80050c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050aa:	f043 0210 	orr.w	r2, r3, #16
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050b6:	f043 0201 	orr.w	r2, r3, #1
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff ff75 	bl	8004fb6 <LL_ADC_REG_IsConversionOngoing>
 80050cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d2:	f003 0310 	and.w	r3, r3, #16
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f040 80c7 	bne.w	800526a <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f040 80c3 	bne.w	800526a <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80050ec:	f043 0202 	orr.w	r2, r3, #2
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7ff ff49 	bl	8004f90 <LL_ADC_IsEnabled>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d110      	bne.n	8005126 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005104:	4861      	ldr	r0, [pc, #388]	@ (800528c <HAL_ADC_Init+0x288>)
 8005106:	f7ff ff43 	bl	8004f90 <LL_ADC_IsEnabled>
 800510a:	4604      	mov	r4, r0
 800510c:	4860      	ldr	r0, [pc, #384]	@ (8005290 <HAL_ADC_Init+0x28c>)
 800510e:	f7ff ff3f 	bl	8004f90 <LL_ADC_IsEnabled>
 8005112:	4603      	mov	r3, r0
 8005114:	4323      	orrs	r3, r4
 8005116:	2b00      	cmp	r3, #0
 8005118:	d105      	bne.n	8005126 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	4619      	mov	r1, r3
 8005120:	485c      	ldr	r0, [pc, #368]	@ (8005294 <HAL_ADC_Init+0x290>)
 8005122:	f7ff fdcf 	bl	8004cc4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	7e5b      	ldrb	r3, [r3, #25]
 800512a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005130:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005136:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800513c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005144:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005146:	4313      	orrs	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d106      	bne.n	8005162 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005158:	3b01      	subs	r3, #1
 800515a:	045b      	lsls	r3, r3, #17
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	4313      	orrs	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005166:	2b00      	cmp	r3, #0
 8005168:	d009      	beq.n	800517e <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516e:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005176:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	4313      	orrs	r3, r2
 800517c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	4b44      	ldr	r3, [pc, #272]	@ (8005298 <HAL_ADC_Init+0x294>)
 8005186:	4013      	ands	r3, r2
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6812      	ldr	r2, [r2, #0]
 800518c:	69b9      	ldr	r1, [r7, #24]
 800518e:	430b      	orrs	r3, r1
 8005190:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff ff20 	bl	8004fdc <LL_ADC_INJ_IsConversionOngoing>
 800519c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d140      	bne.n	8005226 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d13d      	bne.n	8005226 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	7e1b      	ldrb	r3, [r3, #24]
 80051b2:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80051b4:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80051bc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80051be:	4313      	orrs	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051cc:	f023 0306 	bic.w	r3, r3, #6
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	6812      	ldr	r2, [r2, #0]
 80051d4:	69b9      	ldr	r1, [r7, #24]
 80051d6:	430b      	orrs	r3, r1
 80051d8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d118      	bne.n	8005216 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80051ee:	f023 0304 	bic.w	r3, r3, #4
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80051fa:	4311      	orrs	r1, r2
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005200:	4311      	orrs	r1, r2
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005206:	430a      	orrs	r2, r1
 8005208:	431a      	orrs	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0201 	orr.w	r2, r2, #1
 8005212:	611a      	str	r2, [r3, #16]
 8005214:	e007      	b.n	8005226 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	691a      	ldr	r2, [r3, #16]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0201 	bic.w	r2, r2, #1
 8005224:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d10c      	bne.n	8005248 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005234:	f023 010f 	bic.w	r1, r3, #15
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	1e5a      	subs	r2, r3, #1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	631a      	str	r2, [r3, #48]	@ 0x30
 8005246:	e007      	b.n	8005258 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 020f 	bic.w	r2, r2, #15
 8005256:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800525c:	f023 0303 	bic.w	r3, r3, #3
 8005260:	f043 0201 	orr.w	r2, r3, #1
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	659a      	str	r2, [r3, #88]	@ 0x58
 8005268:	e007      	b.n	800527a <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800526e:	f043 0210 	orr.w	r2, r3, #16
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800527a:	7ffb      	ldrb	r3, [r7, #31]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3724      	adds	r7, #36	@ 0x24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd90      	pop	{r4, r7, pc}
 8005284:	20000000 	.word	0x20000000
 8005288:	053e2d63 	.word	0x053e2d63
 800528c:	42028000 	.word	0x42028000
 8005290:	42028100 	.word	0x42028100
 8005294:	42028300 	.word	0x42028300
 8005298:	fff0c007 	.word	0xfff0c007

0800529c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800529c:	b590      	push	{r4, r7, lr}
 800529e:	b0b7      	sub	sp, #220	@ 0xdc
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80052ac:	2300      	movs	r3, #0
 80052ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d101      	bne.n	80052be <HAL_ADC_ConfigChannel+0x22>
 80052ba:	2302      	movs	r3, #2
 80052bc:	e3c1      	b.n	8005a42 <HAL_ADC_ConfigChannel+0x7a6>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff fe73 	bl	8004fb6 <LL_ADC_REG_IsConversionOngoing>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f040 83a6 	bne.w	8005a24 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6818      	ldr	r0, [r3, #0]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	6859      	ldr	r1, [r3, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	461a      	mov	r2, r3
 80052e6:	f7ff fd89 	bl	8004dfc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff fe61 	bl	8004fb6 <LL_ADC_REG_IsConversionOngoing>
 80052f4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7ff fe6d 	bl	8004fdc <LL_ADC_INJ_IsConversionOngoing>
 8005302:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005306:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800530a:	2b00      	cmp	r3, #0
 800530c:	f040 81c1 	bne.w	8005692 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005310:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005314:	2b00      	cmp	r3, #0
 8005316:	f040 81bc 	bne.w	8005692 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005322:	d10f      	bne.n	8005344 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6818      	ldr	r0, [r3, #0]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2200      	movs	r2, #0
 800532e:	4619      	mov	r1, r3
 8005330:	f7ff fd90 	bl	8004e54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800533c:	4618      	mov	r0, r3
 800533e:	f7ff fd4a 	bl	8004dd6 <LL_ADC_SetSamplingTimeCommonConfig>
 8005342:	e00e      	b.n	8005362 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6818      	ldr	r0, [r3, #0]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	6819      	ldr	r1, [r3, #0]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	461a      	mov	r2, r3
 8005352:	f7ff fd7f 	bl	8004e54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2100      	movs	r1, #0
 800535c:	4618      	mov	r0, r3
 800535e:	f7ff fd3a 	bl	8004dd6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	695a      	ldr	r2, [r3, #20]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	08db      	lsrs	r3, r3, #3
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	fa02 f303 	lsl.w	r3, r2, r3
 8005378:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	2b04      	cmp	r3, #4
 8005382:	d00a      	beq.n	800539a <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6818      	ldr	r0, [r3, #0]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	6919      	ldr	r1, [r3, #16]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005394:	f7ff fcca 	bl	8004d2c <LL_ADC_SetOffset>
 8005398:	e17b      	b.n	8005692 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2100      	movs	r1, #0
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff fce7 	bl	8004d74 <LL_ADC_GetOffsetChannel>
 80053a6:	4603      	mov	r3, r0
 80053a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10a      	bne.n	80053c6 <HAL_ADC_ConfigChannel+0x12a>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2100      	movs	r1, #0
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7ff fcdc 	bl	8004d74 <LL_ADC_GetOffsetChannel>
 80053bc:	4603      	mov	r3, r0
 80053be:	0e9b      	lsrs	r3, r3, #26
 80053c0:	f003 021f 	and.w	r2, r3, #31
 80053c4:	e01e      	b.n	8005404 <HAL_ADC_ConfigChannel+0x168>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2100      	movs	r1, #0
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff fcd1 	bl	8004d74 <LL_ADC_GetOffsetChannel>
 80053d2:	4603      	mov	r3, r0
 80053d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80053dc:	fa93 f3a3 	rbit	r3, r3
 80053e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80053e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80053e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80053ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 80053f4:	2320      	movs	r3, #32
 80053f6:	e004      	b.n	8005402 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 80053f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80053fc:	fab3 f383 	clz	r3, r3
 8005400:	b2db      	uxtb	r3, r3
 8005402:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800540c:	2b00      	cmp	r3, #0
 800540e:	d105      	bne.n	800541c <HAL_ADC_ConfigChannel+0x180>
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	0e9b      	lsrs	r3, r3, #26
 8005416:	f003 031f 	and.w	r3, r3, #31
 800541a:	e018      	b.n	800544e <HAL_ADC_ConfigChannel+0x1b2>
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005424:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005428:	fa93 f3a3 	rbit	r3, r3
 800542c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005434:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8005438:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8005440:	2320      	movs	r3, #32
 8005442:	e004      	b.n	800544e <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8005444:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005448:	fab3 f383 	clz	r3, r3
 800544c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800544e:	429a      	cmp	r2, r3
 8005450:	d106      	bne.n	8005460 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2200      	movs	r2, #0
 8005458:	2100      	movs	r1, #0
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff fca0 	bl	8004da0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2101      	movs	r1, #1
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff fc84 	bl	8004d74 <LL_ADC_GetOffsetChannel>
 800546c:	4603      	mov	r3, r0
 800546e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10a      	bne.n	800548c <HAL_ADC_ConfigChannel+0x1f0>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2101      	movs	r1, #1
 800547c:	4618      	mov	r0, r3
 800547e:	f7ff fc79 	bl	8004d74 <LL_ADC_GetOffsetChannel>
 8005482:	4603      	mov	r3, r0
 8005484:	0e9b      	lsrs	r3, r3, #26
 8005486:	f003 021f 	and.w	r2, r3, #31
 800548a:	e01e      	b.n	80054ca <HAL_ADC_ConfigChannel+0x22e>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2101      	movs	r1, #1
 8005492:	4618      	mov	r0, r3
 8005494:	f7ff fc6e 	bl	8004d74 <LL_ADC_GetOffsetChannel>
 8005498:	4603      	mov	r3, r0
 800549a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80054a2:	fa93 f3a3 	rbit	r3, r3
 80054a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80054aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80054b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80054ba:	2320      	movs	r3, #32
 80054bc:	e004      	b.n	80054c8 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80054be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80054c2:	fab3 f383 	clz	r3, r3
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d105      	bne.n	80054e2 <HAL_ADC_ConfigChannel+0x246>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	0e9b      	lsrs	r3, r3, #26
 80054dc:	f003 031f 	and.w	r3, r3, #31
 80054e0:	e018      	b.n	8005514 <HAL_ADC_ConfigChannel+0x278>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054ee:	fa93 f3a3 	rbit	r3, r3
 80054f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80054f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80054fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8005506:	2320      	movs	r3, #32
 8005508:	e004      	b.n	8005514 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 800550a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800550e:	fab3 f383 	clz	r3, r3
 8005512:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005514:	429a      	cmp	r2, r3
 8005516:	d106      	bne.n	8005526 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2200      	movs	r2, #0
 800551e:	2101      	movs	r1, #1
 8005520:	4618      	mov	r0, r3
 8005522:	f7ff fc3d 	bl	8004da0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2102      	movs	r1, #2
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff fc21 	bl	8004d74 <LL_ADC_GetOffsetChannel>
 8005532:	4603      	mov	r3, r0
 8005534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10a      	bne.n	8005552 <HAL_ADC_ConfigChannel+0x2b6>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2102      	movs	r1, #2
 8005542:	4618      	mov	r0, r3
 8005544:	f7ff fc16 	bl	8004d74 <LL_ADC_GetOffsetChannel>
 8005548:	4603      	mov	r3, r0
 800554a:	0e9b      	lsrs	r3, r3, #26
 800554c:	f003 021f 	and.w	r2, r3, #31
 8005550:	e01e      	b.n	8005590 <HAL_ADC_ConfigChannel+0x2f4>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2102      	movs	r1, #2
 8005558:	4618      	mov	r0, r3
 800555a:	f7ff fc0b 	bl	8004d74 <LL_ADC_GetOffsetChannel>
 800555e:	4603      	mov	r3, r0
 8005560:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005564:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005568:	fa93 f3a3 	rbit	r3, r3
 800556c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005570:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005574:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005578:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8005580:	2320      	movs	r3, #32
 8005582:	e004      	b.n	800558e <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8005584:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005588:	fab3 f383 	clz	r3, r3
 800558c:	b2db      	uxtb	r3, r3
 800558e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005598:	2b00      	cmp	r3, #0
 800559a:	d105      	bne.n	80055a8 <HAL_ADC_ConfigChannel+0x30c>
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	0e9b      	lsrs	r3, r3, #26
 80055a2:	f003 031f 	and.w	r3, r3, #31
 80055a6:	e016      	b.n	80055d6 <HAL_ADC_ConfigChannel+0x33a>
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80055b4:	fa93 f3a3 	rbit	r3, r3
 80055b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80055ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80055bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80055c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80055c8:	2320      	movs	r3, #32
 80055ca:	e004      	b.n	80055d6 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80055cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055d0:	fab3 f383 	clz	r3, r3
 80055d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d106      	bne.n	80055e8 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2200      	movs	r2, #0
 80055e0:	2102      	movs	r1, #2
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7ff fbdc 	bl	8004da0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2103      	movs	r1, #3
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff fbc0 	bl	8004d74 <LL_ADC_GetOffsetChannel>
 80055f4:	4603      	mov	r3, r0
 80055f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10a      	bne.n	8005614 <HAL_ADC_ConfigChannel+0x378>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2103      	movs	r1, #3
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff fbb5 	bl	8004d74 <LL_ADC_GetOffsetChannel>
 800560a:	4603      	mov	r3, r0
 800560c:	0e9b      	lsrs	r3, r3, #26
 800560e:	f003 021f 	and.w	r2, r3, #31
 8005612:	e017      	b.n	8005644 <HAL_ADC_ConfigChannel+0x3a8>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2103      	movs	r1, #3
 800561a:	4618      	mov	r0, r3
 800561c:	f7ff fbaa 	bl	8004d74 <LL_ADC_GetOffsetChannel>
 8005620:	4603      	mov	r3, r0
 8005622:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005624:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005626:	fa93 f3a3 	rbit	r3, r3
 800562a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800562c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800562e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005630:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8005636:	2320      	movs	r3, #32
 8005638:	e003      	b.n	8005642 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800563a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800563c:	fab3 f383 	clz	r3, r3
 8005640:	b2db      	uxtb	r3, r3
 8005642:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800564c:	2b00      	cmp	r3, #0
 800564e:	d105      	bne.n	800565c <HAL_ADC_ConfigChannel+0x3c0>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	0e9b      	lsrs	r3, r3, #26
 8005656:	f003 031f 	and.w	r3, r3, #31
 800565a:	e011      	b.n	8005680 <HAL_ADC_ConfigChannel+0x3e4>
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005662:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005664:	fa93 f3a3 	rbit	r3, r3
 8005668:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800566a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800566c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800566e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8005674:	2320      	movs	r3, #32
 8005676:	e003      	b.n	8005680 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8005678:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800567a:	fab3 f383 	clz	r3, r3
 800567e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005680:	429a      	cmp	r2, r3
 8005682:	d106      	bne.n	8005692 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2200      	movs	r2, #0
 800568a:	2103      	movs	r1, #3
 800568c:	4618      	mov	r0, r3
 800568e:	f7ff fb87 	bl	8004da0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff fc7a 	bl	8004f90 <LL_ADC_IsEnabled>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f040 81c9 	bne.w	8005a36 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6818      	ldr	r0, [r3, #0]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	6819      	ldr	r1, [r3, #0]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	461a      	mov	r2, r3
 80056b2:	f7ff fbfb 	bl	8004eac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	4a8f      	ldr	r2, [pc, #572]	@ (80058f8 <HAL_ADC_ConfigChannel+0x65c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	f040 8131 	bne.w	8005924 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10b      	bne.n	80056ea <HAL_ADC_ConfigChannel+0x44e>
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	0e9b      	lsrs	r3, r3, #26
 80056d8:	3301      	adds	r3, #1
 80056da:	f003 031f 	and.w	r3, r3, #31
 80056de:	2b09      	cmp	r3, #9
 80056e0:	bf94      	ite	ls
 80056e2:	2301      	movls	r3, #1
 80056e4:	2300      	movhi	r3, #0
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	e019      	b.n	800571e <HAL_ADC_ConfigChannel+0x482>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056f2:	fa93 f3a3 	rbit	r3, r3
 80056f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80056f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056fa:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80056fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8005702:	2320      	movs	r3, #32
 8005704:	e003      	b.n	800570e <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8005706:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005708:	fab3 f383 	clz	r3, r3
 800570c:	b2db      	uxtb	r3, r3
 800570e:	3301      	adds	r3, #1
 8005710:	f003 031f 	and.w	r3, r3, #31
 8005714:	2b09      	cmp	r3, #9
 8005716:	bf94      	ite	ls
 8005718:	2301      	movls	r3, #1
 800571a:	2300      	movhi	r3, #0
 800571c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800571e:	2b00      	cmp	r3, #0
 8005720:	d079      	beq.n	8005816 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800572a:	2b00      	cmp	r3, #0
 800572c:	d107      	bne.n	800573e <HAL_ADC_ConfigChannel+0x4a2>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	0e9b      	lsrs	r3, r3, #26
 8005734:	3301      	adds	r3, #1
 8005736:	069b      	lsls	r3, r3, #26
 8005738:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800573c:	e015      	b.n	800576a <HAL_ADC_ConfigChannel+0x4ce>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005744:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005746:	fa93 f3a3 	rbit	r3, r3
 800574a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800574c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800574e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8005756:	2320      	movs	r3, #32
 8005758:	e003      	b.n	8005762 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800575a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800575c:	fab3 f383 	clz	r3, r3
 8005760:	b2db      	uxtb	r3, r3
 8005762:	3301      	adds	r3, #1
 8005764:	069b      	lsls	r3, r3, #26
 8005766:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005772:	2b00      	cmp	r3, #0
 8005774:	d109      	bne.n	800578a <HAL_ADC_ConfigChannel+0x4ee>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	0e9b      	lsrs	r3, r3, #26
 800577c:	3301      	adds	r3, #1
 800577e:	f003 031f 	and.w	r3, r3, #31
 8005782:	2101      	movs	r1, #1
 8005784:	fa01 f303 	lsl.w	r3, r1, r3
 8005788:	e017      	b.n	80057ba <HAL_ADC_ConfigChannel+0x51e>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005792:	fa93 f3a3 	rbit	r3, r3
 8005796:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005798:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800579a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800579c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 80057a2:	2320      	movs	r3, #32
 80057a4:	e003      	b.n	80057ae <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80057a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057a8:	fab3 f383 	clz	r3, r3
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	3301      	adds	r3, #1
 80057b0:	f003 031f 	and.w	r3, r3, #31
 80057b4:	2101      	movs	r1, #1
 80057b6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ba:	ea42 0103 	orr.w	r1, r2, r3
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10a      	bne.n	80057e0 <HAL_ADC_ConfigChannel+0x544>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	0e9b      	lsrs	r3, r3, #26
 80057d0:	3301      	adds	r3, #1
 80057d2:	f003 021f 	and.w	r2, r3, #31
 80057d6:	4613      	mov	r3, r2
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	4413      	add	r3, r2
 80057dc:	051b      	lsls	r3, r3, #20
 80057de:	e018      	b.n	8005812 <HAL_ADC_ConfigChannel+0x576>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e8:	fa93 f3a3 	rbit	r3, r3
 80057ec:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80057ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80057f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80057f8:	2320      	movs	r3, #32
 80057fa:	e003      	b.n	8005804 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80057fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057fe:	fab3 f383 	clz	r3, r3
 8005802:	b2db      	uxtb	r3, r3
 8005804:	3301      	adds	r3, #1
 8005806:	f003 021f 	and.w	r2, r3, #31
 800580a:	4613      	mov	r3, r2
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	4413      	add	r3, r2
 8005810:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005812:	430b      	orrs	r3, r1
 8005814:	e081      	b.n	800591a <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800581e:	2b00      	cmp	r3, #0
 8005820:	d107      	bne.n	8005832 <HAL_ADC_ConfigChannel+0x596>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	0e9b      	lsrs	r3, r3, #26
 8005828:	3301      	adds	r3, #1
 800582a:	069b      	lsls	r3, r3, #26
 800582c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005830:	e015      	b.n	800585e <HAL_ADC_ConfigChannel+0x5c2>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800583a:	fa93 f3a3 	rbit	r3, r3
 800583e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005842:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800584a:	2320      	movs	r3, #32
 800584c:	e003      	b.n	8005856 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800584e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005850:	fab3 f383 	clz	r3, r3
 8005854:	b2db      	uxtb	r3, r3
 8005856:	3301      	adds	r3, #1
 8005858:	069b      	lsls	r3, r3, #26
 800585a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005866:	2b00      	cmp	r3, #0
 8005868:	d109      	bne.n	800587e <HAL_ADC_ConfigChannel+0x5e2>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	0e9b      	lsrs	r3, r3, #26
 8005870:	3301      	adds	r3, #1
 8005872:	f003 031f 	and.w	r3, r3, #31
 8005876:	2101      	movs	r1, #1
 8005878:	fa01 f303 	lsl.w	r3, r1, r3
 800587c:	e017      	b.n	80058ae <HAL_ADC_ConfigChannel+0x612>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	fa93 f3a3 	rbit	r3, r3
 800588a:	61fb      	str	r3, [r7, #28]
  return result;
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8005896:	2320      	movs	r3, #32
 8005898:	e003      	b.n	80058a2 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 800589a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589c:	fab3 f383 	clz	r3, r3
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	3301      	adds	r3, #1
 80058a4:	f003 031f 	and.w	r3, r3, #31
 80058a8:	2101      	movs	r1, #1
 80058aa:	fa01 f303 	lsl.w	r3, r1, r3
 80058ae:	ea42 0103 	orr.w	r1, r2, r3
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10d      	bne.n	80058da <HAL_ADC_ConfigChannel+0x63e>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	0e9b      	lsrs	r3, r3, #26
 80058c4:	3301      	adds	r3, #1
 80058c6:	f003 021f 	and.w	r2, r3, #31
 80058ca:	4613      	mov	r3, r2
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	4413      	add	r3, r2
 80058d0:	3b1e      	subs	r3, #30
 80058d2:	051b      	lsls	r3, r3, #20
 80058d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80058d8:	e01e      	b.n	8005918 <HAL_ADC_ConfigChannel+0x67c>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	fa93 f3a3 	rbit	r3, r3
 80058e6:	613b      	str	r3, [r7, #16]
  return result;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d104      	bne.n	80058fc <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 80058f2:	2320      	movs	r3, #32
 80058f4:	e006      	b.n	8005904 <HAL_ADC_ConfigChannel+0x668>
 80058f6:	bf00      	nop
 80058f8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	fab3 f383 	clz	r3, r3
 8005902:	b2db      	uxtb	r3, r3
 8005904:	3301      	adds	r3, #1
 8005906:	f003 021f 	and.w	r2, r3, #31
 800590a:	4613      	mov	r3, r2
 800590c:	005b      	lsls	r3, r3, #1
 800590e:	4413      	add	r3, r2
 8005910:	3b1e      	subs	r3, #30
 8005912:	051b      	lsls	r3, r3, #20
 8005914:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005918:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800591e:	4619      	mov	r1, r3
 8005920:	f7ff fa98 	bl	8004e54 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	4b48      	ldr	r3, [pc, #288]	@ (8005a4c <HAL_ADC_ConfigChannel+0x7b0>)
 800592a:	4013      	ands	r3, r2
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 8082 	beq.w	8005a36 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005932:	4847      	ldr	r0, [pc, #284]	@ (8005a50 <HAL_ADC_ConfigChannel+0x7b4>)
 8005934:	f7ff f9ec 	bl	8004d10 <LL_ADC_GetCommonPathInternalCh>
 8005938:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800593c:	4845      	ldr	r0, [pc, #276]	@ (8005a54 <HAL_ADC_ConfigChannel+0x7b8>)
 800593e:	f7ff fb27 	bl	8004f90 <LL_ADC_IsEnabled>
 8005942:	4604      	mov	r4, r0
 8005944:	4844      	ldr	r0, [pc, #272]	@ (8005a58 <HAL_ADC_ConfigChannel+0x7bc>)
 8005946:	f7ff fb23 	bl	8004f90 <LL_ADC_IsEnabled>
 800594a:	4603      	mov	r3, r0
 800594c:	4323      	orrs	r3, r4
 800594e:	2b00      	cmp	r3, #0
 8005950:	d15e      	bne.n	8005a10 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a41      	ldr	r2, [pc, #260]	@ (8005a5c <HAL_ADC_ConfigChannel+0x7c0>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d127      	bne.n	80059ac <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800595c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005960:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d121      	bne.n	80059ac <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a39      	ldr	r2, [pc, #228]	@ (8005a54 <HAL_ADC_ConfigChannel+0x7b8>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d161      	bne.n	8005a36 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005972:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005976:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800597a:	4619      	mov	r1, r3
 800597c:	4834      	ldr	r0, [pc, #208]	@ (8005a50 <HAL_ADC_ConfigChannel+0x7b4>)
 800597e:	f7ff f9b4 	bl	8004cea <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005982:	4b37      	ldr	r3, [pc, #220]	@ (8005a60 <HAL_ADC_ConfigChannel+0x7c4>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	099b      	lsrs	r3, r3, #6
 8005988:	4a36      	ldr	r2, [pc, #216]	@ (8005a64 <HAL_ADC_ConfigChannel+0x7c8>)
 800598a:	fba2 2303 	umull	r2, r3, r2, r3
 800598e:	099b      	lsrs	r3, r3, #6
 8005990:	1c5a      	adds	r2, r3, #1
 8005992:	4613      	mov	r3, r2
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	4413      	add	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800599a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800599c:	e002      	b.n	80059a4 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3b01      	subs	r3, #1
 80059a2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1f9      	bne.n	800599e <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80059aa:	e044      	b.n	8005a36 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a2d      	ldr	r2, [pc, #180]	@ (8005a68 <HAL_ADC_ConfigChannel+0x7cc>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d113      	bne.n	80059de <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80059b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10d      	bne.n	80059de <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a23      	ldr	r2, [pc, #140]	@ (8005a54 <HAL_ADC_ConfigChannel+0x7b8>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d134      	bne.n	8005a36 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059d4:	4619      	mov	r1, r3
 80059d6:	481e      	ldr	r0, [pc, #120]	@ (8005a50 <HAL_ADC_ConfigChannel+0x7b4>)
 80059d8:	f7ff f987 	bl	8004cea <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80059dc:	e02b      	b.n	8005a36 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a22      	ldr	r2, [pc, #136]	@ (8005a6c <HAL_ADC_ConfigChannel+0x7d0>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d126      	bne.n	8005a36 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80059e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d120      	bne.n	8005a36 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a16      	ldr	r2, [pc, #88]	@ (8005a54 <HAL_ADC_ConfigChannel+0x7b8>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d11b      	bne.n	8005a36 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a02:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005a06:	4619      	mov	r1, r3
 8005a08:	4811      	ldr	r0, [pc, #68]	@ (8005a50 <HAL_ADC_ConfigChannel+0x7b4>)
 8005a0a:	f7ff f96e 	bl	8004cea <LL_ADC_SetCommonPathInternalCh>
 8005a0e:	e012      	b.n	8005a36 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a14:	f043 0220 	orr.w	r2, r3, #32
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	659a      	str	r2, [r3, #88]	@ 0x58

          tmp_hal_status = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005a22:	e008      	b.n	8005a36 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a28:	f043 0220 	orr.w	r2, r3, #32
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8005a3e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	37dc      	adds	r7, #220	@ 0xdc
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd90      	pop	{r4, r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	80080000 	.word	0x80080000
 8005a50:	42028300 	.word	0x42028300
 8005a54:	42028000 	.word	0x42028000
 8005a58:	42028100 	.word	0x42028100
 8005a5c:	c7520000 	.word	0xc7520000
 8005a60:	20000000 	.word	0x20000000
 8005a64:	053e2d63 	.word	0x053e2d63
 8005a68:	cb840000 	.word	0xcb840000
 8005a6c:	80000001 	.word	0x80000001

08005a70 <LL_ADC_IsEnabled>:
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <LL_ADC_IsEnabled+0x18>
 8005a84:	2301      	movs	r3, #1
 8005a86:	e000      	b.n	8005a8a <LL_ADC_IsEnabled+0x1a>
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <LL_ADC_REG_IsConversionOngoing>:
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 0304 	and.w	r3, r3, #4
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d101      	bne.n	8005aae <LL_ADC_REG_IsConversionOngoing+0x18>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005abc:	b590      	push	{r4, r7, lr}
 8005abe:	b0a1      	sub	sp, #132	@ 0x84
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d101      	bne.n	8005ada <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	e089      	b.n	8005bee <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a42      	ldr	r2, [pc, #264]	@ (8005bf8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d102      	bne.n	8005afa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005af4:	4b41      	ldr	r3, [pc, #260]	@ (8005bfc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	e001      	b.n	8005afe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10b      	bne.n	8005b1c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b08:	f043 0220 	orr.w	r2, r3, #32
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e068      	b.n	8005bee <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff ffb9 	bl	8005a96 <LL_ADC_REG_IsConversionOngoing>
 8005b24:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7ff ffb3 	bl	8005a96 <LL_ADC_REG_IsConversionOngoing>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d14a      	bne.n	8005bcc <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005b36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d147      	bne.n	8005bcc <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005b3c:	4b30      	ldr	r3, [pc, #192]	@ (8005c00 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005b3e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d027      	beq.n	8005b98 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005b48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	6859      	ldr	r1, [r3, #4]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005b5a:	035b      	lsls	r3, r3, #13
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b62:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b64:	4824      	ldr	r0, [pc, #144]	@ (8005bf8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005b66:	f7ff ff83 	bl	8005a70 <LL_ADC_IsEnabled>
 8005b6a:	4604      	mov	r4, r0
 8005b6c:	4823      	ldr	r0, [pc, #140]	@ (8005bfc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005b6e:	f7ff ff7f 	bl	8005a70 <LL_ADC_IsEnabled>
 8005b72:	4603      	mov	r3, r0
 8005b74:	4323      	orrs	r3, r4
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d132      	bne.n	8005be0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005b7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005b82:	f023 030f 	bic.w	r3, r3, #15
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	6811      	ldr	r1, [r2, #0]
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	6892      	ldr	r2, [r2, #8]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	431a      	orrs	r2, r3
 8005b92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b94:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005b96:	e023      	b.n	8005be0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005b98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ba0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ba2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ba4:	4814      	ldr	r0, [pc, #80]	@ (8005bf8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005ba6:	f7ff ff63 	bl	8005a70 <LL_ADC_IsEnabled>
 8005baa:	4604      	mov	r4, r0
 8005bac:	4813      	ldr	r0, [pc, #76]	@ (8005bfc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005bae:	f7ff ff5f 	bl	8005a70 <LL_ADC_IsEnabled>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	4323      	orrs	r3, r4
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d112      	bne.n	8005be0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005bba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005bc2:	f023 030f 	bic.w	r3, r3, #15
 8005bc6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005bc8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005bca:	e009      	b.n	8005be0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd0:	f043 0220 	orr.w	r2, r3, #32
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005bde:	e000      	b.n	8005be2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005be0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8005bea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3784      	adds	r7, #132	@ 0x84
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd90      	pop	{r4, r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	42028000 	.word	0x42028000
 8005bfc:	42028100 	.word	0x42028100
 8005c00:	42028300 	.word	0x42028300

08005c04 <__NVIC_SetPriorityGrouping>:
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f003 0307 	and.w	r3, r3, #7
 8005c12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c14:	4b0c      	ldr	r3, [pc, #48]	@ (8005c48 <__NVIC_SetPriorityGrouping+0x44>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005c20:	4013      	ands	r3, r2
 8005c22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c36:	4a04      	ldr	r2, [pc, #16]	@ (8005c48 <__NVIC_SetPriorityGrouping+0x44>)
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	60d3      	str	r3, [r2, #12]
}
 8005c3c:	bf00      	nop
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	e000ed00 	.word	0xe000ed00

08005c4c <__NVIC_GetPriorityGrouping>:
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c50:	4b04      	ldr	r3, [pc, #16]	@ (8005c64 <__NVIC_GetPriorityGrouping+0x18>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	0a1b      	lsrs	r3, r3, #8
 8005c56:	f003 0307 	and.w	r3, r3, #7
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	e000ed00 	.word	0xe000ed00

08005c68 <__NVIC_EnableIRQ>:
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	4603      	mov	r3, r0
 8005c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	db0b      	blt.n	8005c92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c7a:	79fb      	ldrb	r3, [r7, #7]
 8005c7c:	f003 021f 	and.w	r2, r3, #31
 8005c80:	4907      	ldr	r1, [pc, #28]	@ (8005ca0 <__NVIC_EnableIRQ+0x38>)
 8005c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c86:	095b      	lsrs	r3, r3, #5
 8005c88:	2001      	movs	r0, #1
 8005c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8005c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	e000e100 	.word	0xe000e100

08005ca4 <__NVIC_SetPriority>:
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	4603      	mov	r3, r0
 8005cac:	6039      	str	r1, [r7, #0]
 8005cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	db0a      	blt.n	8005cce <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	490c      	ldr	r1, [pc, #48]	@ (8005cf0 <__NVIC_SetPriority+0x4c>)
 8005cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cc2:	0152      	lsls	r2, r2, #5
 8005cc4:	b2d2      	uxtb	r2, r2
 8005cc6:	440b      	add	r3, r1
 8005cc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005ccc:	e00a      	b.n	8005ce4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	4908      	ldr	r1, [pc, #32]	@ (8005cf4 <__NVIC_SetPriority+0x50>)
 8005cd4:	79fb      	ldrb	r3, [r7, #7]
 8005cd6:	f003 030f 	and.w	r3, r3, #15
 8005cda:	3b04      	subs	r3, #4
 8005cdc:	0152      	lsls	r2, r2, #5
 8005cde:	b2d2      	uxtb	r2, r2
 8005ce0:	440b      	add	r3, r1
 8005ce2:	761a      	strb	r2, [r3, #24]
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	e000e100 	.word	0xe000e100
 8005cf4:	e000ed00 	.word	0xe000ed00

08005cf8 <NVIC_EncodePriority>:
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b089      	sub	sp, #36	@ 0x24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f003 0307 	and.w	r3, r3, #7
 8005d0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	f1c3 0307 	rsb	r3, r3, #7
 8005d12:	2b03      	cmp	r3, #3
 8005d14:	bf28      	it	cs
 8005d16:	2303      	movcs	r3, #3
 8005d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	3303      	adds	r3, #3
 8005d1e:	2b06      	cmp	r3, #6
 8005d20:	d902      	bls.n	8005d28 <NVIC_EncodePriority+0x30>
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	3b04      	subs	r3, #4
 8005d26:	e000      	b.n	8005d2a <NVIC_EncodePriority+0x32>
 8005d28:	2300      	movs	r3, #0
 8005d2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	fa02 f303 	lsl.w	r3, r2, r3
 8005d36:	43da      	mvns	r2, r3
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	401a      	ands	r2, r3
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d40:	f04f 31ff 	mov.w	r1, #4294967295
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	fa01 f303 	lsl.w	r3, r1, r3
 8005d4a:	43d9      	mvns	r1, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d50:	4313      	orrs	r3, r2
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3724      	adds	r7, #36	@ 0x24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
	...

08005d60 <SysTick_Config>:
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d70:	d301      	bcc.n	8005d76 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8005d72:	2301      	movs	r3, #1
 8005d74:	e00f      	b.n	8005d96 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d76:	4a0a      	ldr	r2, [pc, #40]	@ (8005da0 <SysTick_Config+0x40>)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d7e:	2107      	movs	r1, #7
 8005d80:	f04f 30ff 	mov.w	r0, #4294967295
 8005d84:	f7ff ff8e 	bl	8005ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d88:	4b05      	ldr	r3, [pc, #20]	@ (8005da0 <SysTick_Config+0x40>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d8e:	4b04      	ldr	r3, [pc, #16]	@ (8005da0 <SysTick_Config+0x40>)
 8005d90:	2207      	movs	r2, #7
 8005d92:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	e000e010 	.word	0xe000e010

08005da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7ff ff29 	bl	8005c04 <__NVIC_SetPriorityGrouping>
}
 8005db2:	bf00      	nop
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b086      	sub	sp, #24
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	607a      	str	r2, [r7, #4]
 8005dc6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005dc8:	f7ff ff40 	bl	8005c4c <__NVIC_GetPriorityGrouping>
 8005dcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	68b9      	ldr	r1, [r7, #8]
 8005dd2:	6978      	ldr	r0, [r7, #20]
 8005dd4:	f7ff ff90 	bl	8005cf8 <NVIC_EncodePriority>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dde:	4611      	mov	r1, r2
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7ff ff5f 	bl	8005ca4 <__NVIC_SetPriority>
}
 8005de6:	bf00      	nop
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b082      	sub	sp, #8
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	4603      	mov	r3, r0
 8005df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff ff33 	bl	8005c68 <__NVIC_EnableIRQ>
}
 8005e02:	bf00      	nop
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b082      	sub	sp, #8
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7ff ffa4 	bl	8005d60 <SysTick_Config>
 8005e18:	4603      	mov	r3, r0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
	...

08005e24 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e142      	b.n	80060bc <HAL_FDCAN_Init+0x298>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d106      	bne.n	8005e50 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7fd ffee 	bl	8003e2c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699a      	ldr	r2, [r3, #24]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 0210 	bic.w	r2, r2, #16
 8005e5e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e60:	f7fe ff00 	bl	8004c64 <HAL_GetTick>
 8005e64:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005e66:	e012      	b.n	8005e8e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005e68:	f7fe fefc 	bl	8004c64 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b0a      	cmp	r3, #10
 8005e74:	d90b      	bls.n	8005e8e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e7a:	f043 0201 	orr.w	r2, r3, #1
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2203      	movs	r2, #3
 8005e86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e116      	b.n	80060bc <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	f003 0308 	and.w	r3, r3, #8
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d0e5      	beq.n	8005e68 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	699a      	ldr	r2, [r3, #24]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f042 0201 	orr.w	r2, r2, #1
 8005eaa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005eac:	f7fe feda 	bl	8004c64 <HAL_GetTick>
 8005eb0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005eb2:	e012      	b.n	8005eda <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005eb4:	f7fe fed6 	bl	8004c64 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b0a      	cmp	r3, #10
 8005ec0:	d90b      	bls.n	8005eda <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ec6:	f043 0201 	orr.w	r2, r3, #1
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2203      	movs	r2, #3
 8005ed2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e0f0      	b.n	80060bc <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d0e5      	beq.n	8005eb4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699a      	ldr	r2, [r3, #24]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0202 	orr.w	r2, r2, #2
 8005ef6:	619a      	str	r2, [r3, #24]

  /* Configure Clock divider */
  FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005ef8:	4a72      	ldr	r2, [pc, #456]	@ (80060c4 <HAL_FDCAN_Init+0x2a0>)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	6013      	str	r3, [r2, #0]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	7c1b      	ldrb	r3, [r3, #16]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d108      	bne.n	8005f1a <HAL_FDCAN_Init+0xf6>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	699a      	ldr	r2, [r3, #24]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f16:	619a      	str	r2, [r3, #24]
 8005f18:	e007      	b.n	8005f2a <HAL_FDCAN_Init+0x106>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	699a      	ldr	r2, [r3, #24]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f28:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	7c5b      	ldrb	r3, [r3, #17]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d108      	bne.n	8005f44 <HAL_FDCAN_Init+0x120>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	699a      	ldr	r2, [r3, #24]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f40:	619a      	str	r2, [r3, #24]
 8005f42:	e007      	b.n	8005f54 <HAL_FDCAN_Init+0x130>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	699a      	ldr	r2, [r3, #24]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005f52:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	7c9b      	ldrb	r3, [r3, #18]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d108      	bne.n	8005f6e <HAL_FDCAN_Init+0x14a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	699a      	ldr	r2, [r3, #24]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005f6a:	619a      	str	r2, [r3, #24]
 8005f6c:	e007      	b.n	8005f7e <HAL_FDCAN_Init+0x15a>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	699a      	ldr	r2, [r3, #24]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f7c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699a      	ldr	r2, [r3, #24]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005fa2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	691a      	ldr	r2, [r3, #16]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 0210 	bic.w	r2, r2, #16
 8005fb2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d108      	bne.n	8005fce <HAL_FDCAN_Init+0x1aa>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699a      	ldr	r2, [r3, #24]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 0204 	orr.w	r2, r2, #4
 8005fca:	619a      	str	r2, [r3, #24]
 8005fcc:	e02c      	b.n	8006028 <HAL_FDCAN_Init+0x204>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d028      	beq.n	8006028 <HAL_FDCAN_Init+0x204>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d01c      	beq.n	8006018 <HAL_FDCAN_Init+0x1f4>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	699a      	ldr	r2, [r3, #24]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005fec:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	691a      	ldr	r2, [r3, #16]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f042 0210 	orr.w	r2, r2, #16
 8005ffc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	2b03      	cmp	r3, #3
 8006004:	d110      	bne.n	8006028 <HAL_FDCAN_Init+0x204>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	699a      	ldr	r2, [r3, #24]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f042 0220 	orr.w	r2, r2, #32
 8006014:	619a      	str	r2, [r3, #24]
 8006016:	e007      	b.n	8006028 <HAL_FDCAN_Init+0x204>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699a      	ldr	r2, [r3, #24]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0220 	orr.w	r2, r2, #32
 8006026:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	3b01      	subs	r3, #1
 800602e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	69db      	ldr	r3, [r3, #28]
 8006034:	3b01      	subs	r3, #1
 8006036:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006038:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006040:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	3b01      	subs	r3, #1
 800604a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006050:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006052:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800605c:	d115      	bne.n	800608a <HAL_FDCAN_Init+0x266>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006062:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006068:	3b01      	subs	r3, #1
 800606a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800606c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006072:	3b01      	subs	r3, #1
 8006074:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006076:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607e:	3b01      	subs	r3, #1
 8006080:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006086:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006088:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fc53 	bl	800694c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	4000a500 	.word	0x4000a500

080060c8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80060d8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80060da:	7dfb      	ldrb	r3, [r7, #23]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d002      	beq.n	80060e6 <HAL_FDCAN_ConfigFilter+0x1e>
 80060e0:	7dfb      	ldrb	r3, [r7, #23]
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d13d      	bne.n	8006162 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d119      	bne.n	8006122 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80060fa:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8006102:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006108:	4313      	orrs	r3, r2
 800610a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	e01d      	b.n	800615e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	075a      	lsls	r2, r3, #29
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	4313      	orrs	r3, r2
 800612e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	079a      	lsls	r2, r3, #30
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	4413      	add	r3, r2
 800614a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	3304      	adds	r3, #4
 8006156:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	e006      	b.n	8006170 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006166:	f043 0202 	orr.w	r2, r3, #2
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
  }
}
 8006170:	4618      	mov	r0, r3
 8006172:	371c      	adds	r7, #28
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b01      	cmp	r3, #1
 800618e:	d110      	bne.n	80061b2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2202      	movs	r2, #2
 8006194:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	699a      	ldr	r2, [r3, #24]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 0201 	bic.w	r2, r2, #1
 80061a6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	e006      	b.n	80061c0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061b6:	f043 0204 	orr.w	r2, r3, #4
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
  }
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d12c      	bne.n	800623e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80061ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d007      	beq.n	8006204 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061f8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e023      	b.n	800624c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800620c:	0c1b      	lsrs	r3, r3, #16
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	68b9      	ldr	r1, [r7, #8]
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 fbec 	bl	80069f8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2101      	movs	r1, #1
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	fa01 f202 	lsl.w	r2, r1, r2
 800622c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006230:	2201      	movs	r2, #1
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	409a      	lsls	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	e006      	b.n	800624c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006242:	f043 0208 	orr.w	r2, r3, #8
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
  }
}
 800624c:	4618      	mov	r0, r3
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006254:	b480      	push	{r7}
 8006256:	b08b      	sub	sp, #44	@ 0x2c
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8006262:	2300      	movs	r3, #0
 8006264:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800626c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800626e:	7efb      	ldrb	r3, [r7, #27]
 8006270:	2b02      	cmp	r3, #2
 8006272:	f040 80e8 	bne.w	8006446 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	2b40      	cmp	r3, #64	@ 0x40
 800627a:	d137      	bne.n	80062ec <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006284:	f003 030f 	and.w	r3, r3, #15
 8006288:	2b00      	cmp	r3, #0
 800628a:	d107      	bne.n	800629c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006290:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e0db      	b.n	8006454 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062a4:	0e1b      	lsrs	r3, r3, #24
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d10a      	bne.n	80062c4 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062b6:	0a5b      	lsrs	r3, r3, #9
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d101      	bne.n	80062c4 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80062c0:	2301      	movs	r3, #1
 80062c2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062cc:	0a1b      	lsrs	r3, r3, #8
 80062ce:	f003 0303 	and.w	r3, r3, #3
 80062d2:	69fa      	ldr	r2, [r7, #28]
 80062d4:	4413      	add	r3, r2
 80062d6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80062dc:	69fa      	ldr	r2, [r7, #28]
 80062de:	4613      	mov	r3, r2
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	4413      	add	r3, r2
 80062e4:	00db      	lsls	r3, r3, #3
 80062e6:	440b      	add	r3, r1
 80062e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80062ea:	e036      	b.n	800635a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062f4:	f003 030f 	and.w	r3, r3, #15
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d107      	bne.n	800630c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006300:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e0a3      	b.n	8006454 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006314:	0e1b      	lsrs	r3, r3, #24
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b01      	cmp	r3, #1
 800631c:	d10a      	bne.n	8006334 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006326:	0a1b      	lsrs	r3, r3, #8
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b01      	cmp	r3, #1
 800632e:	d101      	bne.n	8006334 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006330:	2301      	movs	r3, #1
 8006332:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800633c:	0a1b      	lsrs	r3, r3, #8
 800633e:	f003 0303 	and.w	r3, r3, #3
 8006342:	69fa      	ldr	r2, [r7, #28]
 8006344:	4413      	add	r3, r2
 8006346:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800634c:	69fa      	ldr	r2, [r7, #28]
 800634e:	4613      	mov	r3, r2
 8006350:	00db      	lsls	r3, r3, #3
 8006352:	4413      	add	r3, r2
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	440b      	add	r3, r1
 8006358:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800635a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d107      	bne.n	800637e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800636e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	0c9b      	lsrs	r3, r3, #18
 8006374:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	e005      	b.n	800638a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800637e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80063a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a4:	3304      	adds	r3, #4
 80063a6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80063a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80063b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	0c1b      	lsrs	r3, r3, #16
 80063b8:	f003 020f 	and.w	r2, r3, #15
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80063c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80063cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80063d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	0e1b      	lsrs	r3, r3, #24
 80063de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80063e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	0fda      	lsrs	r2, r3, #31
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80063f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f2:	3304      	adds	r3, #4
 80063f4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80063f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80063fa:	2300      	movs	r3, #0
 80063fc:	623b      	str	r3, [r7, #32]
 80063fe:	e00a      	b.n	8006416 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	441a      	add	r2, r3
 8006406:	6839      	ldr	r1, [r7, #0]
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	440b      	add	r3, r1
 800640c:	7812      	ldrb	r2, [r2, #0]
 800640e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006410:	6a3b      	ldr	r3, [r7, #32]
 8006412:	3301      	adds	r3, #1
 8006414:	623b      	str	r3, [r7, #32]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	4a11      	ldr	r2, [pc, #68]	@ (8006460 <HAL_FDCAN_GetRxMessage+0x20c>)
 800641c:	5cd3      	ldrb	r3, [r2, r3]
 800641e:	461a      	mov	r2, r3
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	4293      	cmp	r3, r2
 8006424:	d3ec      	bcc.n	8006400 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2b40      	cmp	r3, #64	@ 0x40
 800642a:	d105      	bne.n	8006438 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	69fa      	ldr	r2, [r7, #28]
 8006432:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8006436:	e004      	b.n	8006442 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69fa      	ldr	r2, [r7, #28]
 800643e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	e006      	b.n	8006454 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800644a:	f043 0208 	orr.w	r2, r3, #8
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
  }
}
 8006454:	4618      	mov	r0, r3
 8006456:	372c      	adds	r7, #44	@ 0x2c
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	0800cb34 	.word	0x0800cb34

08006464 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8006464:	b480      	push	{r7}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006476:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006478:	7dfb      	ldrb	r3, [r7, #23]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d003      	beq.n	8006486 <HAL_FDCAN_ActivateNotification+0x22>
 800647e:	7dfb      	ldrb	r3, [r7, #23]
 8006480:	2b02      	cmp	r3, #2
 8006482:	f040 80c8 	bne.w	8006616 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800648c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	f003 0307 	and.w	r3, r3, #7
 8006494:	2b00      	cmp	r3, #0
 8006496:	d004      	beq.n	80064a2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d03b      	beq.n	800651a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d004      	beq.n	80064b6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d031      	beq.n	800651a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d004      	beq.n	80064ca <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	f003 0304 	and.w	r3, r3, #4
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d027      	beq.n	800651a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d004      	beq.n	80064de <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f003 0308 	and.w	r3, r3, #8
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d01d      	beq.n	800651a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d004      	beq.n	80064f2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f003 0310 	and.w	r3, r3, #16
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d013      	beq.n	800651a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d004      	beq.n	8006506 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	f003 0320 	and.w	r3, r3, #32
 8006502:	2b00      	cmp	r3, #0
 8006504:	d009      	beq.n	800651a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00c      	beq.n	800652a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006516:	2b00      	cmp	r3, #0
 8006518:	d107      	bne.n	800652a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f042 0201 	orr.w	r2, r2, #1
 8006528:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f003 0307 	and.w	r3, r3, #7
 8006530:	2b00      	cmp	r3, #0
 8006532:	d004      	beq.n	800653e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d13b      	bne.n	80065b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006544:	2b00      	cmp	r3, #0
 8006546:	d004      	beq.n	8006552 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d131      	bne.n	80065b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006558:	2b00      	cmp	r3, #0
 800655a:	d004      	beq.n	8006566 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f003 0304 	and.w	r3, r3, #4
 8006562:	2b00      	cmp	r3, #0
 8006564:	d127      	bne.n	80065b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800656c:	2b00      	cmp	r3, #0
 800656e:	d004      	beq.n	800657a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	f003 0308 	and.w	r3, r3, #8
 8006576:	2b00      	cmp	r3, #0
 8006578:	d11d      	bne.n	80065b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006580:	2b00      	cmp	r3, #0
 8006582:	d004      	beq.n	800658e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f003 0310 	and.w	r3, r3, #16
 800658a:	2b00      	cmp	r3, #0
 800658c:	d113      	bne.n	80065b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006594:	2b00      	cmp	r3, #0
 8006596:	d004      	beq.n	80065a2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	f003 0320 	and.w	r3, r3, #32
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d109      	bne.n	80065b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00c      	beq.n	80065c6 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d007      	beq.n	80065c6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f042 0202 	orr.w	r2, r2, #2
 80065c4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d009      	beq.n	80065e4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	430a      	orrs	r2, r1
 80065e0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d009      	beq.n	8006602 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	430a      	orrs	r2, r1
 80065fe:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	430a      	orrs	r2, r1
 8006610:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	e006      	b.n	8006624 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800661a:	f043 0202 	orr.w	r2, r3, #2
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
  }
}
 8006624:	4618      	mov	r0, r3
 8006626:	371c      	adds	r7, #28
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b08c      	sub	sp, #48	@ 0x30
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800663e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8006642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800664a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800664c:	4013      	ands	r3, r2
 800664e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006662:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006664:	4013      	ands	r3, r2
 8006666:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800666e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006672:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800667a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800667c:	4013      	ands	r3, r2
 800667e:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006686:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800668a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006692:	6a3a      	ldr	r2, [r7, #32]
 8006694:	4013      	ands	r3, r2
 8006696:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800669e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80066a2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066aa:	69fa      	ldr	r2, [r7, #28]
 80066ac:	4013      	ands	r3, r2
 80066ae:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b6:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066be:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00b      	beq.n	80066e2 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d006      	beq.n	80066e2 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2240      	movs	r2, #64	@ 0x40
 80066da:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 f916 	bl	800690e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d019      	beq.n	8006720 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d014      	beq.n	8006720 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80066fe:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	4013      	ands	r3, r2
 800670c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006716:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006718:	6939      	ldr	r1, [r7, #16]
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f8d8 	bl	80068d0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006722:	2b00      	cmp	r3, #0
 8006724:	d007      	beq.n	8006736 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800672c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800672e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f8a2 	bl	800687a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006738:	2b00      	cmp	r3, #0
 800673a:	d007      	beq.n	800674c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006742:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006744:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7fc fc1e 	bl	8002f88 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800674c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674e:	2b00      	cmp	r3, #0
 8006750:	d007      	beq.n	8006762 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006758:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800675a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f897 	bl	8006890 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00c      	beq.n	8006786 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006772:	2b00      	cmp	r3, #0
 8006774:	d007      	beq.n	8006786 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800677e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 f890 	bl	80068a6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800678c:	2b00      	cmp	r3, #0
 800678e:	d018      	beq.n	80067c2 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006796:	2b00      	cmp	r3, #0
 8006798:	d013      	beq.n	80067c2 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80067a2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	4013      	ands	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2280      	movs	r2, #128	@ 0x80
 80067b8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80067ba:	68f9      	ldr	r1, [r7, #12]
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f87c 	bl	80068ba <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00c      	beq.n	80067e6 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d007      	beq.n	80067e6 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80067de:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f880 	bl	80068e6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00c      	beq.n	800680a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d007      	beq.n	800680a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006802:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f878 	bl	80068fa <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00f      	beq.n	8006834 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00a      	beq.n	8006834 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006826:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800682c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d007      	beq.n	800684a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	69fa      	ldr	r2, [r7, #28]
 8006840:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006842:	69f9      	ldr	r1, [r7, #28]
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f876 	bl	8006936 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d009      	beq.n	8006864 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6a3a      	ldr	r2, [r7, #32]
 8006856:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	431a      	orrs	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006868:	2b00      	cmp	r3, #0
 800686a:	d002      	beq.n	8006872 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 f858 	bl	8006922 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006872:	bf00      	nop
 8006874:	3730      	adds	r7, #48	@ 0x30
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800687a:	b480      	push	{r7}
 800687c:	b083      	sub	sp, #12
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800689a:	bf00      	nop
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80068ae:	bf00      	nop
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80068da:	bf00      	nop
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80068ee:	bf00      	nop
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b083      	sub	sp, #12
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006902:	bf00      	nop
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006916:	bf00      	nop
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006922:	b480      	push	{r7}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800692a:	bf00      	nop
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006936:	b480      	push	{r7}
 8006938:	b083      	sub	sp, #12
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006954:	4b27      	ldr	r3, [pc, #156]	@ (80069f4 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8006956:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006966:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800696e:	041a      	lsls	r2, r3, #16
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800698c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006994:	061a      	lsls	r2, r3, #24
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	60fb      	str	r3, [r7, #12]
 80069cc:	e005      	b.n	80069da <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	3304      	adds	r3, #4
 80069d8:	60fb      	str	r3, [r7, #12]
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d3f3      	bcc.n	80069ce <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80069e6:	bf00      	nop
 80069e8:	bf00      	nop
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr
 80069f4:	4000ac00 	.word	0x4000ac00

080069f8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b089      	sub	sp, #36	@ 0x24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
 8006a04:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10a      	bne.n	8006a24 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006a16:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	61fb      	str	r3, [r7, #28]
 8006a22:	e00a      	b.n	8006a3a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006a2c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006a32:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006a34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a38:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006a44:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006a4a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006a50:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006a60:	683a      	ldr	r2, [r7, #0]
 8006a62:	4613      	mov	r3, r2
 8006a64:	00db      	lsls	r3, r3, #3
 8006a66:	4413      	add	r3, r2
 8006a68:	00db      	lsls	r3, r3, #3
 8006a6a:	440b      	add	r3, r1
 8006a6c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	69fa      	ldr	r2, [r7, #28]
 8006a72:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	3304      	adds	r3, #4
 8006a78:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	3304      	adds	r3, #4
 8006a84:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006a86:	2300      	movs	r3, #0
 8006a88:	617b      	str	r3, [r7, #20]
 8006a8a:	e020      	b.n	8006ace <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	3303      	adds	r3, #3
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	4413      	add	r3, r2
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	3302      	adds	r3, #2
 8006a9c:	6879      	ldr	r1, [r7, #4]
 8006a9e:	440b      	add	r3, r1
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006aa4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	6879      	ldr	r1, [r7, #4]
 8006aac:	440b      	add	r3, r1
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006ab2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006ab4:	6879      	ldr	r1, [r7, #4]
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	440a      	add	r2, r1
 8006aba:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006abc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	3304      	adds	r3, #4
 8006acc:	617b      	str	r3, [r7, #20]
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	4a06      	ldr	r2, [pc, #24]	@ (8006aec <FDCAN_CopyMessageToRAM+0xf4>)
 8006ad4:	5cd3      	ldrb	r3, [r2, r3]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d3d6      	bcc.n	8006a8c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8006ade:	bf00      	nop
 8006ae0:	bf00      	nop
 8006ae2:	3724      	adds	r7, #36	@ 0x24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	0800cb34 	.word	0x0800cb34

08006af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006afe:	e158      	b.n	8006db2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	2101      	movs	r1, #1
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	fa01 f303 	lsl.w	r3, r1, r3
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 814a 	beq.w	8006dac <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f003 0303 	and.w	r3, r3, #3
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d005      	beq.n	8006b30 <HAL_GPIO_Init+0x40>
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f003 0303 	and.w	r3, r3, #3
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d130      	bne.n	8006b92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	2203      	movs	r2, #3
 8006b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b40:	43db      	mvns	r3, r3
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	4013      	ands	r3, r2
 8006b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	68da      	ldr	r2, [r3, #12]
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	005b      	lsls	r3, r3, #1
 8006b50:	fa02 f303 	lsl.w	r3, r2, r3
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b66:	2201      	movs	r2, #1
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6e:	43db      	mvns	r3, r3
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	4013      	ands	r3, r2
 8006b74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	091b      	lsrs	r3, r3, #4
 8006b7c:	f003 0201 	and.w	r2, r3, #1
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	fa02 f303 	lsl.w	r3, r2, r3
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f003 0303 	and.w	r3, r3, #3
 8006b9a:	2b03      	cmp	r3, #3
 8006b9c:	d017      	beq.n	8006bce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	005b      	lsls	r3, r3, #1
 8006ba8:	2203      	movs	r2, #3
 8006baa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bae:	43db      	mvns	r3, r3
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	689a      	ldr	r2, [r3, #8]
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	005b      	lsls	r3, r3, #1
 8006bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f003 0303 	and.w	r3, r3, #3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d123      	bne.n	8006c22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	08da      	lsrs	r2, r3, #3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	3208      	adds	r2, #8
 8006be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f003 0307 	and.w	r3, r3, #7
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	220f      	movs	r2, #15
 8006bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf6:	43db      	mvns	r3, r3
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	691a      	ldr	r2, [r3, #16]
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f003 0307 	and.w	r3, r3, #7
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	08da      	lsrs	r2, r3, #3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	3208      	adds	r2, #8
 8006c1c:	6939      	ldr	r1, [r7, #16]
 8006c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	2203      	movs	r2, #3
 8006c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c32:	43db      	mvns	r3, r3
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	4013      	ands	r3, r2
 8006c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f003 0203 	and.w	r2, r3, #3
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 80a4 	beq.w	8006dac <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8006c64:	4a5a      	ldr	r2, [pc, #360]	@ (8006dd0 <HAL_GPIO_Init+0x2e0>)
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	089b      	lsrs	r3, r3, #2
 8006c6a:	3318      	adds	r3, #24
 8006c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c70:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f003 0303 	and.w	r3, r3, #3
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	220f      	movs	r2, #15
 8006c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c80:	43db      	mvns	r3, r3
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	4013      	ands	r3, r2
 8006c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a52      	ldr	r2, [pc, #328]	@ (8006dd4 <HAL_GPIO_Init+0x2e4>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d025      	beq.n	8006cdc <HAL_GPIO_Init+0x1ec>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a51      	ldr	r2, [pc, #324]	@ (8006dd8 <HAL_GPIO_Init+0x2e8>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d01f      	beq.n	8006cd8 <HAL_GPIO_Init+0x1e8>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a50      	ldr	r2, [pc, #320]	@ (8006ddc <HAL_GPIO_Init+0x2ec>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d019      	beq.n	8006cd4 <HAL_GPIO_Init+0x1e4>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a4f      	ldr	r2, [pc, #316]	@ (8006de0 <HAL_GPIO_Init+0x2f0>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d013      	beq.n	8006cd0 <HAL_GPIO_Init+0x1e0>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a4e      	ldr	r2, [pc, #312]	@ (8006de4 <HAL_GPIO_Init+0x2f4>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d00d      	beq.n	8006ccc <HAL_GPIO_Init+0x1dc>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a4d      	ldr	r2, [pc, #308]	@ (8006de8 <HAL_GPIO_Init+0x2f8>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d007      	beq.n	8006cc8 <HAL_GPIO_Init+0x1d8>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a4c      	ldr	r2, [pc, #304]	@ (8006dec <HAL_GPIO_Init+0x2fc>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d101      	bne.n	8006cc4 <HAL_GPIO_Init+0x1d4>
 8006cc0:	2306      	movs	r3, #6
 8006cc2:	e00c      	b.n	8006cde <HAL_GPIO_Init+0x1ee>
 8006cc4:	2307      	movs	r3, #7
 8006cc6:	e00a      	b.n	8006cde <HAL_GPIO_Init+0x1ee>
 8006cc8:	2305      	movs	r3, #5
 8006cca:	e008      	b.n	8006cde <HAL_GPIO_Init+0x1ee>
 8006ccc:	2304      	movs	r3, #4
 8006cce:	e006      	b.n	8006cde <HAL_GPIO_Init+0x1ee>
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e004      	b.n	8006cde <HAL_GPIO_Init+0x1ee>
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e002      	b.n	8006cde <HAL_GPIO_Init+0x1ee>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e000      	b.n	8006cde <HAL_GPIO_Init+0x1ee>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	f002 0203 	and.w	r2, r2, #3
 8006ce4:	00d2      	lsls	r2, r2, #3
 8006ce6:	4093      	lsls	r3, r2
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8006cee:	4938      	ldr	r1, [pc, #224]	@ (8006dd0 <HAL_GPIO_Init+0x2e0>)
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	089b      	lsrs	r3, r3, #2
 8006cf4:	3318      	adds	r3, #24
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006cfc:	4b34      	ldr	r3, [pc, #208]	@ (8006dd0 <HAL_GPIO_Init+0x2e0>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	43db      	mvns	r3, r3
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	4013      	ands	r3, r2
 8006d0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d003      	beq.n	8006d20 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006d20:	4a2b      	ldr	r2, [pc, #172]	@ (8006dd0 <HAL_GPIO_Init+0x2e0>)
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006d26:	4b2a      	ldr	r3, [pc, #168]	@ (8006dd0 <HAL_GPIO_Init+0x2e0>)
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	43db      	mvns	r3, r3
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	4013      	ands	r3, r2
 8006d34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d003      	beq.n	8006d4a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006d4a:	4a21      	ldr	r2, [pc, #132]	@ (8006dd0 <HAL_GPIO_Init+0x2e0>)
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006d50:	4b1f      	ldr	r3, [pc, #124]	@ (8006dd0 <HAL_GPIO_Init+0x2e0>)
 8006d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	43db      	mvns	r3, r3
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	4013      	ands	r3, r2
 8006d60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d003      	beq.n	8006d76 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006d76:	4a16      	ldr	r2, [pc, #88]	@ (8006dd0 <HAL_GPIO_Init+0x2e0>)
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8006d7e:	4b14      	ldr	r3, [pc, #80]	@ (8006dd0 <HAL_GPIO_Init+0x2e0>)
 8006d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	43db      	mvns	r3, r3
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d003      	beq.n	8006da4 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006da4:	4a0a      	ldr	r2, [pc, #40]	@ (8006dd0 <HAL_GPIO_Init+0x2e0>)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	3301      	adds	r3, #1
 8006db0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f47f ae9f 	bne.w	8006b00 <HAL_GPIO_Init+0x10>
  }
}
 8006dc2:	bf00      	nop
 8006dc4:	bf00      	nop
 8006dc6:	371c      	adds	r7, #28
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	4002f400 	.word	0x4002f400
 8006dd4:	42020000 	.word	0x42020000
 8006dd8:	42020400 	.word	0x42020400
 8006ddc:	42020800 	.word	0x42020800
 8006de0:	42020c00 	.word	0x42020c00
 8006de4:	42021000 	.word	0x42021000
 8006de8:	42021400 	.word	0x42021400
 8006dec:	42021800 	.word	0x42021800

08006df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	460b      	mov	r3, r1
 8006dfa:	807b      	strh	r3, [r7, #2]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006e00:	787b      	ldrb	r3, [r7, #1]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006e06:	887a      	ldrh	r2, [r7, #2]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006e0c:	e002      	b.n	8006e14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006e0e:	887a      	ldrh	r2, [r7, #2]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8006e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8006e5c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	73fb      	strb	r3, [r7, #15]
 8006e3c:	e007      	b.n	8006e4e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8006e3e:	4b07      	ldr	r3, [pc, #28]	@ (8006e5c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f023 0204 	bic.w	r2, r3, #4
 8006e46:	4905      	ldr	r1, [pc, #20]	@ (8006e5c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	40030400 	.word	0x40030400

08006e60 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8006e60:	b480      	push	{r7}
 8006e62:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8006e64:	4b05      	ldr	r3, [pc, #20]	@ (8006e7c <HAL_ICACHE_Enable+0x1c>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a04      	ldr	r2, [pc, #16]	@ (8006e7c <HAL_ICACHE_Enable+0x1c>)
 8006e6a:	f043 0301 	orr.w	r3, r3, #1
 8006e6e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	40030400 	.word	0x40030400

08006e80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e0c0      	b.n	8007014 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d106      	bne.n	8006eac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7fd f8c6 	bl	8004038 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2203      	movs	r2, #3
 8006eb0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f002 ffbb 	bl	8009e34 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	73fb      	strb	r3, [r7, #15]
 8006ec2:	e03e      	b.n	8006f42 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006ec4:	7bfa      	ldrb	r2, [r7, #15]
 8006ec6:	6879      	ldr	r1, [r7, #4]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	440b      	add	r3, r1
 8006ed2:	3311      	adds	r3, #17
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006ed8:	7bfa      	ldrb	r2, [r7, #15]
 8006eda:	6879      	ldr	r1, [r7, #4]
 8006edc:	4613      	mov	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4413      	add	r3, r2
 8006ee2:	00db      	lsls	r3, r3, #3
 8006ee4:	440b      	add	r3, r1
 8006ee6:	3310      	adds	r3, #16
 8006ee8:	7bfa      	ldrb	r2, [r7, #15]
 8006eea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006eec:	7bfa      	ldrb	r2, [r7, #15]
 8006eee:	6879      	ldr	r1, [r7, #4]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	00db      	lsls	r3, r3, #3
 8006ef8:	440b      	add	r3, r1
 8006efa:	3313      	adds	r3, #19
 8006efc:	2200      	movs	r2, #0
 8006efe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006f00:	7bfa      	ldrb	r2, [r7, #15]
 8006f02:	6879      	ldr	r1, [r7, #4]
 8006f04:	4613      	mov	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	00db      	lsls	r3, r3, #3
 8006f0c:	440b      	add	r3, r1
 8006f0e:	3320      	adds	r3, #32
 8006f10:	2200      	movs	r2, #0
 8006f12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006f14:	7bfa      	ldrb	r2, [r7, #15]
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4413      	add	r3, r2
 8006f1e:	00db      	lsls	r3, r3, #3
 8006f20:	440b      	add	r3, r1
 8006f22:	3324      	adds	r3, #36	@ 0x24
 8006f24:	2200      	movs	r2, #0
 8006f26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	6879      	ldr	r1, [r7, #4]
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	4613      	mov	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	00db      	lsls	r3, r3, #3
 8006f36:	440b      	add	r3, r1
 8006f38:	2200      	movs	r2, #0
 8006f3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	73fb      	strb	r3, [r7, #15]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	791b      	ldrb	r3, [r3, #4]
 8006f46:	7bfa      	ldrb	r2, [r7, #15]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d3bb      	bcc.n	8006ec4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	73fb      	strb	r3, [r7, #15]
 8006f50:	e044      	b.n	8006fdc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006f52:	7bfa      	ldrb	r2, [r7, #15]
 8006f54:	6879      	ldr	r1, [r7, #4]
 8006f56:	4613      	mov	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	00db      	lsls	r3, r3, #3
 8006f5e:	440b      	add	r3, r1
 8006f60:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8006f64:	2200      	movs	r2, #0
 8006f66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006f68:	7bfa      	ldrb	r2, [r7, #15]
 8006f6a:	6879      	ldr	r1, [r7, #4]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	00db      	lsls	r3, r3, #3
 8006f74:	440b      	add	r3, r1
 8006f76:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006f7a:	7bfa      	ldrb	r2, [r7, #15]
 8006f7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006f7e:	7bfa      	ldrb	r2, [r7, #15]
 8006f80:	6879      	ldr	r1, [r7, #4]
 8006f82:	4613      	mov	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	00db      	lsls	r3, r3, #3
 8006f8a:	440b      	add	r3, r1
 8006f8c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8006f90:	2200      	movs	r2, #0
 8006f92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006f94:	7bfa      	ldrb	r2, [r7, #15]
 8006f96:	6879      	ldr	r1, [r7, #4]
 8006f98:	4613      	mov	r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4413      	add	r3, r2
 8006f9e:	00db      	lsls	r3, r3, #3
 8006fa0:	440b      	add	r3, r1
 8006fa2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006faa:	7bfa      	ldrb	r2, [r7, #15]
 8006fac:	6879      	ldr	r1, [r7, #4]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	00db      	lsls	r3, r3, #3
 8006fb6:	440b      	add	r3, r1
 8006fb8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006fc0:	7bfa      	ldrb	r2, [r7, #15]
 8006fc2:	6879      	ldr	r1, [r7, #4]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	00db      	lsls	r3, r3, #3
 8006fcc:	440b      	add	r3, r1
 8006fce:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	73fb      	strb	r3, [r7, #15]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	791b      	ldrb	r3, [r3, #4]
 8006fe0:	7bfa      	ldrb	r2, [r7, #15]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d3b5      	bcc.n	8006f52 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3304      	adds	r3, #4
 8006fee:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006ff2:	f002 ff3a 	bl	8009e6a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	7a9b      	ldrb	r3, [r3, #10]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d102      	bne.n	8007012 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f805 	bl	800701c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007040:	b29b      	uxth	r3, r3
 8007042:	f043 0301 	orr.w	r3, r3, #1
 8007046:	b29a      	uxth	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007054:	b29b      	uxth	r3, r3
 8007056:	f043 0302 	orr.w	r3, r3, #2
 800705a:	b29a      	uxth	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3714      	adds	r7, #20
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007070:	b480      	push	{r7}
 8007072:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007074:	4b05      	ldr	r3, [pc, #20]	@ (800708c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a04      	ldr	r2, [pc, #16]	@ (800708c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800707a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800707e:	6013      	str	r3, [r2, #0]
}
 8007080:	bf00      	nop
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	40007000 	.word	0x40007000

08007090 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007090:	b480      	push	{r7}
 8007092:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8007094:	4b04      	ldr	r3, [pc, #16]	@ (80070a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800709c:	4618      	mov	r0, r3
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	40007000 	.word	0x40007000

080070ac <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80070b4:	4b27      	ldr	r3, [pc, #156]	@ (8007154 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80070bc:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80070be:	f000 f861 	bl	8007184 <HAL_PWREx_SMPS_GetEffectiveMode>
 80070c2:	4603      	mov	r3, r0
 80070c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070c8:	d101      	bne.n	80070ce <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e03e      	b.n	800714c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80070ce:	4b21      	ldr	r3, [pc, #132]	@ (8007154 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070da:	d101      	bne.n	80070e0 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e035      	b.n	800714c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d101      	bne.n	80070ec <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80070e8:	2300      	movs	r3, #0
 80070ea:	e02f      	b.n	800714c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80070ec:	4b19      	ldr	r3, [pc, #100]	@ (8007154 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80070f4:	4917      	ldr	r1, [pc, #92]	@ (8007154 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80070fc:	4b16      	ldr	r3, [pc, #88]	@ (8007158 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	095b      	lsrs	r3, r3, #5
 8007102:	4a16      	ldr	r2, [pc, #88]	@ (800715c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8007104:	fba2 2303 	umull	r2, r3, r2, r3
 8007108:	09db      	lsrs	r3, r3, #7
 800710a:	2232      	movs	r2, #50	@ 0x32
 800710c:	fb02 f303 	mul.w	r3, r2, r3
 8007110:	4a13      	ldr	r2, [pc, #76]	@ (8007160 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8007112:	fba2 2303 	umull	r2, r3, r2, r3
 8007116:	08db      	lsrs	r3, r3, #3
 8007118:	3301      	adds	r3, #1
 800711a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800711c:	e002      	b.n	8007124 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3b01      	subs	r3, #1
 8007122:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007124:	4b0b      	ldr	r3, [pc, #44]	@ (8007154 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800712c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007130:	d102      	bne.n	8007138 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1f2      	bne.n	800711e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007138:	4b06      	ldr	r3, [pc, #24]	@ (8007154 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007140:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007144:	d101      	bne.n	800714a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e000      	b.n	800714c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	40007000 	.word	0x40007000
 8007158:	20000000 	.word	0x20000000
 800715c:	0a7c5ac5 	.word	0x0a7c5ac5
 8007160:	cccccccd 	.word	0xcccccccd

08007164 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8007164:	b480      	push	{r7}
 8007166:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8007168:	4b05      	ldr	r3, [pc, #20]	@ (8007180 <HAL_PWREx_EnableVddIO2+0x1c>)
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	4a04      	ldr	r2, [pc, #16]	@ (8007180 <HAL_PWREx_EnableVddIO2+0x1c>)
 800716e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007172:	6053      	str	r3, [r2, #4]
}
 8007174:	bf00      	nop
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	40007000 	.word	0x40007000

08007184 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800718a:	4b0f      	ldr	r3, [pc, #60]	@ (80071c8 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d003      	beq.n	80071a2 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800719a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800719e:	607b      	str	r3, [r7, #4]
 80071a0:	e00a      	b.n	80071b8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d103      	bne.n	80071b4 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80071ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071b0:	607b      	str	r3, [r7, #4]
 80071b2:	e001      	b.n	80071b8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80071b4:	2300      	movs	r3, #0
 80071b6:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80071b8:	687b      	ldr	r3, [r7, #4]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	40007000 	.word	0x40007000

080071cc <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d102      	bne.n	80071e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	f000 bcc2 	b.w	8007b64 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071e0:	4b99      	ldr	r3, [pc, #612]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	f003 030c 	and.w	r3, r3, #12
 80071e8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071ea:	4b97      	ldr	r3, [pc, #604]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	f003 0303 	and.w	r3, r3, #3
 80071f2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0310 	and.w	r3, r3, #16
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 80e9 	beq.w	80073d4 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d006      	beq.n	8007216 <HAL_RCC_OscConfig+0x4a>
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	2b0c      	cmp	r3, #12
 800720c:	f040 8083 	bne.w	8007316 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d17f      	bne.n	8007316 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007216:	4b8c      	ldr	r3, [pc, #560]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b00      	cmp	r3, #0
 8007220:	d006      	beq.n	8007230 <HAL_RCC_OscConfig+0x64>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d102      	bne.n	8007230 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	f000 bc9a 	b.w	8007b64 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007234:	4b84      	ldr	r3, [pc, #528]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0308 	and.w	r3, r3, #8
 800723c:	2b00      	cmp	r3, #0
 800723e:	d004      	beq.n	800724a <HAL_RCC_OscConfig+0x7e>
 8007240:	4b81      	ldr	r3, [pc, #516]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007248:	e005      	b.n	8007256 <HAL_RCC_OscConfig+0x8a>
 800724a:	4b7f      	ldr	r3, [pc, #508]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 800724c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007250:	091b      	lsrs	r3, r3, #4
 8007252:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007256:	4293      	cmp	r3, r2
 8007258:	d224      	bcs.n	80072a4 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725e:	4618      	mov	r0, r3
 8007260:	f000 fe9c 	bl	8007f9c <RCC_SetFlashLatencyFromMSIRange>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d002      	beq.n	8007270 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	f000 bc7a 	b.w	8007b64 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007270:	4b75      	ldr	r3, [pc, #468]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a74      	ldr	r2, [pc, #464]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 8007276:	f043 0308 	orr.w	r3, r3, #8
 800727a:	6013      	str	r3, [r2, #0]
 800727c:	4b72      	ldr	r3, [pc, #456]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007288:	496f      	ldr	r1, [pc, #444]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 800728a:	4313      	orrs	r3, r2
 800728c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800728e:	4b6e      	ldr	r3, [pc, #440]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	021b      	lsls	r3, r3, #8
 800729c:	496a      	ldr	r1, [pc, #424]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	604b      	str	r3, [r1, #4]
 80072a2:	e026      	b.n	80072f2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80072a4:	4b68      	ldr	r3, [pc, #416]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a67      	ldr	r2, [pc, #412]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 80072aa:	f043 0308 	orr.w	r3, r3, #8
 80072ae:	6013      	str	r3, [r2, #0]
 80072b0:	4b65      	ldr	r3, [pc, #404]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072bc:	4962      	ldr	r1, [pc, #392]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80072c2:	4b61      	ldr	r3, [pc, #388]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	021b      	lsls	r3, r3, #8
 80072d0:	495d      	ldr	r1, [pc, #372]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10a      	bne.n	80072f2 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 fe5b 	bl	8007f9c <RCC_SetFlashLatencyFromMSIRange>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d002      	beq.n	80072f2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	f000 bc39 	b.w	8007b64 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80072f2:	f000 fe17 	bl	8007f24 <HAL_RCC_GetHCLKFreq>
 80072f6:	4603      	mov	r3, r0
 80072f8:	4a54      	ldr	r2, [pc, #336]	@ (800744c <HAL_RCC_OscConfig+0x280>)
 80072fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80072fc:	4b54      	ldr	r3, [pc, #336]	@ (8007450 <HAL_RCC_OscConfig+0x284>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4618      	mov	r0, r3
 8007302:	f7fd fc5f 	bl	8004bc4 <HAL_InitTick>
 8007306:	4603      	mov	r3, r0
 8007308:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800730a:	7bfb      	ldrb	r3, [r7, #15]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d060      	beq.n	80073d2 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8007310:	7bfb      	ldrb	r3, [r7, #15]
 8007312:	f000 bc27 	b.w	8007b64 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d039      	beq.n	8007392 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800731e:	4b4a      	ldr	r3, [pc, #296]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a49      	ldr	r2, [pc, #292]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 8007324:	f043 0301 	orr.w	r3, r3, #1
 8007328:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800732a:	f7fd fc9b 	bl	8004c64 <HAL_GetTick>
 800732e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007330:	e00f      	b.n	8007352 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007332:	f7fd fc97 	bl	8004c64 <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	2b02      	cmp	r3, #2
 800733e:	d908      	bls.n	8007352 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007340:	4b41      	ldr	r3, [pc, #260]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0302 	and.w	r3, r3, #2
 8007348:	2b00      	cmp	r3, #0
 800734a:	d102      	bne.n	8007352 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	f000 bc09 	b.w	8007b64 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007352:	4b3d      	ldr	r3, [pc, #244]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d0e9      	beq.n	8007332 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800735e:	4b3a      	ldr	r3, [pc, #232]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a39      	ldr	r2, [pc, #228]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 8007364:	f043 0308 	orr.w	r3, r3, #8
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	4b37      	ldr	r3, [pc, #220]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007376:	4934      	ldr	r1, [pc, #208]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 8007378:	4313      	orrs	r3, r2
 800737a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800737c:	4b32      	ldr	r3, [pc, #200]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a1b      	ldr	r3, [r3, #32]
 8007388:	021b      	lsls	r3, r3, #8
 800738a:	492f      	ldr	r1, [pc, #188]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 800738c:	4313      	orrs	r3, r2
 800738e:	604b      	str	r3, [r1, #4]
 8007390:	e020      	b.n	80073d4 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007392:	4b2d      	ldr	r3, [pc, #180]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a2c      	ldr	r2, [pc, #176]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 8007398:	f023 0301 	bic.w	r3, r3, #1
 800739c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800739e:	f7fd fc61 	bl	8004c64 <HAL_GetTick>
 80073a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80073a4:	e00e      	b.n	80073c4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80073a6:	f7fd fc5d 	bl	8004c64 <HAL_GetTick>
 80073aa:	4602      	mov	r2, r0
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d907      	bls.n	80073c4 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80073b4:	4b24      	ldr	r3, [pc, #144]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0302 	and.w	r3, r3, #2
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d001      	beq.n	80073c4 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e3cf      	b.n	8007b64 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80073c4:	4b20      	ldr	r3, [pc, #128]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1ea      	bne.n	80073a6 <HAL_RCC_OscConfig+0x1da>
 80073d0:	e000      	b.n	80073d4 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80073d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d07e      	beq.n	80074de <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	2b08      	cmp	r3, #8
 80073e4:	d005      	beq.n	80073f2 <HAL_RCC_OscConfig+0x226>
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	2b0c      	cmp	r3, #12
 80073ea:	d10e      	bne.n	800740a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	d10b      	bne.n	800740a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073f2:	4b15      	ldr	r3, [pc, #84]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d06e      	beq.n	80074dc <HAL_RCC_OscConfig+0x310>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d16a      	bne.n	80074dc <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e3ac      	b.n	8007b64 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007412:	d106      	bne.n	8007422 <HAL_RCC_OscConfig+0x256>
 8007414:	4b0c      	ldr	r3, [pc, #48]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a0b      	ldr	r2, [pc, #44]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 800741a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800741e:	6013      	str	r3, [r2, #0]
 8007420:	e024      	b.n	800746c <HAL_RCC_OscConfig+0x2a0>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800742a:	d113      	bne.n	8007454 <HAL_RCC_OscConfig+0x288>
 800742c:	4b06      	ldr	r3, [pc, #24]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a05      	ldr	r2, [pc, #20]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 8007432:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007436:	6013      	str	r3, [r2, #0]
 8007438:	4b03      	ldr	r3, [pc, #12]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a02      	ldr	r2, [pc, #8]	@ (8007448 <HAL_RCC_OscConfig+0x27c>)
 800743e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007442:	6013      	str	r3, [r2, #0]
 8007444:	e012      	b.n	800746c <HAL_RCC_OscConfig+0x2a0>
 8007446:	bf00      	nop
 8007448:	40021000 	.word	0x40021000
 800744c:	20000000 	.word	0x20000000
 8007450:	20000004 	.word	0x20000004
 8007454:	4b8b      	ldr	r3, [pc, #556]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a8a      	ldr	r2, [pc, #552]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 800745a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800745e:	6013      	str	r3, [r2, #0]
 8007460:	4b88      	ldr	r3, [pc, #544]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a87      	ldr	r2, [pc, #540]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 8007466:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800746a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d019      	beq.n	80074a8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007474:	f7fd fbf6 	bl	8004c64 <HAL_GetTick>
 8007478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800747a:	e00e      	b.n	800749a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800747c:	f7fd fbf2 	bl	8004c64 <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	2b64      	cmp	r3, #100	@ 0x64
 8007488:	d907      	bls.n	800749a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800748a:	4b7e      	ldr	r3, [pc, #504]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e364      	b.n	8007b64 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800749a:	4b7a      	ldr	r3, [pc, #488]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d0ea      	beq.n	800747c <HAL_RCC_OscConfig+0x2b0>
 80074a6:	e01a      	b.n	80074de <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a8:	f7fd fbdc 	bl	8004c64 <HAL_GetTick>
 80074ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80074ae:	e00e      	b.n	80074ce <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074b0:	f7fd fbd8 	bl	8004c64 <HAL_GetTick>
 80074b4:	4602      	mov	r2, r0
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	2b64      	cmp	r3, #100	@ 0x64
 80074bc:	d907      	bls.n	80074ce <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80074be:	4b71      	ldr	r3, [pc, #452]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e34a      	b.n	8007b64 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80074ce:	4b6d      	ldr	r3, [pc, #436]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1ea      	bne.n	80074b0 <HAL_RCC_OscConfig+0x2e4>
 80074da:	e000      	b.n	80074de <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d06c      	beq.n	80075c4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	d005      	beq.n	80074fc <HAL_RCC_OscConfig+0x330>
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	2b0c      	cmp	r3, #12
 80074f4:	d119      	bne.n	800752a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d116      	bne.n	800752a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80074fc:	4b61      	ldr	r3, [pc, #388]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007504:	2b00      	cmp	r3, #0
 8007506:	d005      	beq.n	8007514 <HAL_RCC_OscConfig+0x348>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e327      	b.n	8007b64 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007514:	4b5b      	ldr	r3, [pc, #364]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	061b      	lsls	r3, r3, #24
 8007522:	4958      	ldr	r1, [pc, #352]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 8007524:	4313      	orrs	r3, r2
 8007526:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007528:	e04c      	b.n	80075c4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d029      	beq.n	8007586 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007532:	4b54      	ldr	r3, [pc, #336]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a53      	ldr	r2, [pc, #332]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 8007538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800753c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800753e:	f7fd fb91 	bl	8004c64 <HAL_GetTick>
 8007542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007544:	e00e      	b.n	8007564 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007546:	f7fd fb8d 	bl	8004c64 <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	2b02      	cmp	r3, #2
 8007552:	d907      	bls.n	8007564 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007554:	4b4b      	ldr	r3, [pc, #300]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800755c:	2b00      	cmp	r3, #0
 800755e:	d101      	bne.n	8007564 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e2ff      	b.n	8007b64 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007564:	4b47      	ldr	r3, [pc, #284]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800756c:	2b00      	cmp	r3, #0
 800756e:	d0ea      	beq.n	8007546 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007570:	4b44      	ldr	r3, [pc, #272]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	061b      	lsls	r3, r3, #24
 800757e:	4941      	ldr	r1, [pc, #260]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 8007580:	4313      	orrs	r3, r2
 8007582:	604b      	str	r3, [r1, #4]
 8007584:	e01e      	b.n	80075c4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007586:	4b3f      	ldr	r3, [pc, #252]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a3e      	ldr	r2, [pc, #248]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 800758c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007592:	f7fd fb67 	bl	8004c64 <HAL_GetTick>
 8007596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007598:	e00e      	b.n	80075b8 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800759a:	f7fd fb63 	bl	8004c64 <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d907      	bls.n	80075b8 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80075a8:	4b36      	ldr	r3, [pc, #216]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e2d5      	b.n	8007b64 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80075b8:	4b32      	ldr	r3, [pc, #200]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1ea      	bne.n	800759a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0308 	and.w	r3, r3, #8
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d062      	beq.n	8007696 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d038      	beq.n	800764a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d108      	bne.n	80075f2 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80075e0:	4b28      	ldr	r3, [pc, #160]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 80075e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075e6:	4a27      	ldr	r2, [pc, #156]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 80075e8:	f023 0310 	bic.w	r3, r3, #16
 80075ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80075f0:	e007      	b.n	8007602 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80075f2:	4b24      	ldr	r3, [pc, #144]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 80075f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075f8:	4a22      	ldr	r2, [pc, #136]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 80075fa:	f043 0310 	orr.w	r3, r3, #16
 80075fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007602:	4b20      	ldr	r3, [pc, #128]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 8007604:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007608:	4a1e      	ldr	r2, [pc, #120]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 800760a:	f043 0301 	orr.w	r3, r3, #1
 800760e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007612:	f7fd fb27 	bl	8004c64 <HAL_GetTick>
 8007616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007618:	e00f      	b.n	800763a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800761a:	f7fd fb23 	bl	8004c64 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	2b07      	cmp	r3, #7
 8007626:	d908      	bls.n	800763a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007628:	4b16      	ldr	r3, [pc, #88]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 800762a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800762e:	f003 0302 	and.w	r3, r3, #2
 8007632:	2b00      	cmp	r3, #0
 8007634:	d101      	bne.n	800763a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e294      	b.n	8007b64 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800763a:	4b12      	ldr	r3, [pc, #72]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 800763c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007640:	f003 0302 	and.w	r3, r3, #2
 8007644:	2b00      	cmp	r3, #0
 8007646:	d0e8      	beq.n	800761a <HAL_RCC_OscConfig+0x44e>
 8007648:	e025      	b.n	8007696 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800764a:	4b0e      	ldr	r3, [pc, #56]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 800764c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007650:	4a0c      	ldr	r2, [pc, #48]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 8007652:	f023 0301 	bic.w	r3, r3, #1
 8007656:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800765a:	f7fd fb03 	bl	8004c64 <HAL_GetTick>
 800765e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007660:	e012      	b.n	8007688 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007662:	f7fd faff 	bl	8004c64 <HAL_GetTick>
 8007666:	4602      	mov	r2, r0
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	2b07      	cmp	r3, #7
 800766e:	d90b      	bls.n	8007688 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007670:	4b04      	ldr	r3, [pc, #16]	@ (8007684 <HAL_RCC_OscConfig+0x4b8>)
 8007672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007676:	f003 0302 	and.w	r3, r3, #2
 800767a:	2b00      	cmp	r3, #0
 800767c:	d004      	beq.n	8007688 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e270      	b.n	8007b64 <HAL_RCC_OscConfig+0x998>
 8007682:	bf00      	nop
 8007684:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007688:	4ba8      	ldr	r3, [pc, #672]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 800768a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800768e:	f003 0302 	and.w	r3, r3, #2
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1e5      	bne.n	8007662 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0304 	and.w	r3, r3, #4
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f000 812d 	beq.w	80078fe <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076a4:	2300      	movs	r3, #0
 80076a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80076a8:	4ba0      	ldr	r3, [pc, #640]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 80076aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10d      	bne.n	80076d0 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076b4:	4b9d      	ldr	r3, [pc, #628]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 80076b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076b8:	4a9c      	ldr	r2, [pc, #624]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 80076ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076be:	6593      	str	r3, [r2, #88]	@ 0x58
 80076c0:	4b9a      	ldr	r3, [pc, #616]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 80076c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076c8:	60bb      	str	r3, [r7, #8]
 80076ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076cc:	2301      	movs	r3, #1
 80076ce:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80076d0:	4b97      	ldr	r3, [pc, #604]	@ (8007930 <HAL_RCC_OscConfig+0x764>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d11e      	bne.n	800771a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076dc:	4b94      	ldr	r3, [pc, #592]	@ (8007930 <HAL_RCC_OscConfig+0x764>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a93      	ldr	r2, [pc, #588]	@ (8007930 <HAL_RCC_OscConfig+0x764>)
 80076e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076e8:	f7fd fabc 	bl	8004c64 <HAL_GetTick>
 80076ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80076ee:	e00e      	b.n	800770e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076f0:	f7fd fab8 	bl	8004c64 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d907      	bls.n	800770e <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80076fe:	4b8c      	ldr	r3, [pc, #560]	@ (8007930 <HAL_RCC_OscConfig+0x764>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e22a      	b.n	8007b64 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800770e:	4b88      	ldr	r3, [pc, #544]	@ (8007930 <HAL_RCC_OscConfig+0x764>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007716:	2b00      	cmp	r3, #0
 8007718:	d0ea      	beq.n	80076f0 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	2b00      	cmp	r3, #0
 8007724:	d01f      	beq.n	8007766 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f003 0304 	and.w	r3, r3, #4
 800772e:	2b00      	cmp	r3, #0
 8007730:	d010      	beq.n	8007754 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007732:	4b7e      	ldr	r3, [pc, #504]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 8007734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007738:	4a7c      	ldr	r2, [pc, #496]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 800773a:	f043 0304 	orr.w	r3, r3, #4
 800773e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007742:	4b7a      	ldr	r3, [pc, #488]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 8007744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007748:	4a78      	ldr	r2, [pc, #480]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 800774a:	f043 0301 	orr.w	r3, r3, #1
 800774e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007752:	e018      	b.n	8007786 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007754:	4b75      	ldr	r3, [pc, #468]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 8007756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800775a:	4a74      	ldr	r2, [pc, #464]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 800775c:	f043 0301 	orr.w	r3, r3, #1
 8007760:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007764:	e00f      	b.n	8007786 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007766:	4b71      	ldr	r3, [pc, #452]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 8007768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800776c:	4a6f      	ldr	r2, [pc, #444]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 800776e:	f023 0301 	bic.w	r3, r3, #1
 8007772:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007776:	4b6d      	ldr	r3, [pc, #436]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 8007778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800777c:	4a6b      	ldr	r2, [pc, #428]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 800777e:	f023 0304 	bic.w	r3, r3, #4
 8007782:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d068      	beq.n	8007860 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800778e:	f7fd fa69 	bl	8004c64 <HAL_GetTick>
 8007792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007794:	e011      	b.n	80077ba <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007796:	f7fd fa65 	bl	8004c64 <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d908      	bls.n	80077ba <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077a8:	4b60      	ldr	r3, [pc, #384]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 80077aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ae:	f003 0302 	and.w	r3, r3, #2
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e1d4      	b.n	8007b64 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077ba:	4b5c      	ldr	r3, [pc, #368]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 80077bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077c0:	f003 0302 	and.w	r3, r3, #2
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d0e6      	beq.n	8007796 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d022      	beq.n	800781a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80077d4:	4b55      	ldr	r3, [pc, #340]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 80077d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077da:	4a54      	ldr	r2, [pc, #336]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 80077dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80077e4:	e011      	b.n	800780a <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077e6:	f7fd fa3d 	bl	8004c64 <HAL_GetTick>
 80077ea:	4602      	mov	r2, r0
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d908      	bls.n	800780a <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80077f8:	4b4c      	ldr	r3, [pc, #304]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 80077fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007802:	2b00      	cmp	r3, #0
 8007804:	d101      	bne.n	800780a <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e1ac      	b.n	8007b64 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800780a:	4b48      	ldr	r3, [pc, #288]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 800780c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007810:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007814:	2b00      	cmp	r3, #0
 8007816:	d0e6      	beq.n	80077e6 <HAL_RCC_OscConfig+0x61a>
 8007818:	e068      	b.n	80078ec <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800781a:	4b44      	ldr	r3, [pc, #272]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 800781c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007820:	4a42      	ldr	r2, [pc, #264]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 8007822:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007826:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800782a:	e011      	b.n	8007850 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800782c:	f7fd fa1a 	bl	8004c64 <HAL_GetTick>
 8007830:	4602      	mov	r2, r0
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	1ad3      	subs	r3, r2, r3
 8007836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800783a:	4293      	cmp	r3, r2
 800783c:	d908      	bls.n	8007850 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800783e:	4b3b      	ldr	r3, [pc, #236]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 8007840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007844:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007848:	2b00      	cmp	r3, #0
 800784a:	d001      	beq.n	8007850 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 800784c:	2303      	movs	r3, #3
 800784e:	e189      	b.n	8007b64 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007850:	4b36      	ldr	r3, [pc, #216]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 8007852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007856:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1e6      	bne.n	800782c <HAL_RCC_OscConfig+0x660>
 800785e:	e045      	b.n	80078ec <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007860:	f7fd fa00 	bl	8004c64 <HAL_GetTick>
 8007864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007866:	e011      	b.n	800788c <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007868:	f7fd f9fc 	bl	8004c64 <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007876:	4293      	cmp	r3, r2
 8007878:	d908      	bls.n	800788c <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800787a:	4b2c      	ldr	r3, [pc, #176]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 800787c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007880:	f003 0302 	and.w	r3, r3, #2
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	e16b      	b.n	8007b64 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800788c:	4b27      	ldr	r3, [pc, #156]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 800788e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007892:	f003 0302 	and.w	r3, r3, #2
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1e6      	bne.n	8007868 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800789a:	4b24      	ldr	r3, [pc, #144]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 800789c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d021      	beq.n	80078ec <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80078a8:	4b20      	ldr	r3, [pc, #128]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 80078aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078ae:	4a1f      	ldr	r2, [pc, #124]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 80078b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80078b8:	e011      	b.n	80078de <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078ba:	f7fd f9d3 	bl	8004c64 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d908      	bls.n	80078de <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80078cc:	4b17      	ldr	r3, [pc, #92]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 80078ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d001      	beq.n	80078de <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e142      	b.n	8007b64 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80078de:	4b13      	ldr	r3, [pc, #76]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 80078e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1e6      	bne.n	80078ba <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80078ec:	7ffb      	ldrb	r3, [r7, #31]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d105      	bne.n	80078fe <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078f2:	4b0e      	ldr	r3, [pc, #56]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 80078f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078f6:	4a0d      	ldr	r2, [pc, #52]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 80078f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078fc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0320 	and.w	r3, r3, #32
 8007906:	2b00      	cmp	r3, #0
 8007908:	d04f      	beq.n	80079aa <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800790e:	2b00      	cmp	r3, #0
 8007910:	d028      	beq.n	8007964 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007912:	4b06      	ldr	r3, [pc, #24]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 8007914:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007918:	4a04      	ldr	r2, [pc, #16]	@ (800792c <HAL_RCC_OscConfig+0x760>)
 800791a:	f043 0301 	orr.w	r3, r3, #1
 800791e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007922:	f7fd f99f 	bl	8004c64 <HAL_GetTick>
 8007926:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007928:	e014      	b.n	8007954 <HAL_RCC_OscConfig+0x788>
 800792a:	bf00      	nop
 800792c:	40021000 	.word	0x40021000
 8007930:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007934:	f7fd f996 	bl	8004c64 <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	2b02      	cmp	r3, #2
 8007940:	d908      	bls.n	8007954 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007942:	4b8a      	ldr	r3, [pc, #552]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 8007944:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007948:	f003 0302 	and.w	r3, r3, #2
 800794c:	2b00      	cmp	r3, #0
 800794e:	d101      	bne.n	8007954 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e107      	b.n	8007b64 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007954:	4b85      	ldr	r3, [pc, #532]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 8007956:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800795a:	f003 0302 	and.w	r3, r3, #2
 800795e:	2b00      	cmp	r3, #0
 8007960:	d0e8      	beq.n	8007934 <HAL_RCC_OscConfig+0x768>
 8007962:	e022      	b.n	80079aa <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007964:	4b81      	ldr	r3, [pc, #516]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 8007966:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800796a:	4a80      	ldr	r2, [pc, #512]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 800796c:	f023 0301 	bic.w	r3, r3, #1
 8007970:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007974:	f7fd f976 	bl	8004c64 <HAL_GetTick>
 8007978:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800797a:	e00f      	b.n	800799c <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800797c:	f7fd f972 	bl	8004c64 <HAL_GetTick>
 8007980:	4602      	mov	r2, r0
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	2b02      	cmp	r3, #2
 8007988:	d908      	bls.n	800799c <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800798a:	4b78      	ldr	r3, [pc, #480]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 800798c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007990:	f003 0302 	and.w	r3, r3, #2
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8007998:	2303      	movs	r3, #3
 800799a:	e0e3      	b.n	8007b64 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800799c:	4b73      	ldr	r3, [pc, #460]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 800799e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80079a2:	f003 0302 	and.w	r3, r3, #2
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1e8      	bne.n	800797c <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 80d7 	beq.w	8007b62 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80079b4:	4b6d      	ldr	r3, [pc, #436]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f003 030c 	and.w	r3, r3, #12
 80079bc:	2b0c      	cmp	r3, #12
 80079be:	f000 8091 	beq.w	8007ae4 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d166      	bne.n	8007a98 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079ca:	4b68      	ldr	r3, [pc, #416]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a67      	ldr	r2, [pc, #412]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 80079d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d6:	f7fd f945 	bl	8004c64 <HAL_GetTick>
 80079da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079dc:	e00e      	b.n	80079fc <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079de:	f7fd f941 	bl	8004c64 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d907      	bls.n	80079fc <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079ec:	4b5f      	ldr	r3, [pc, #380]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80079f8:	2303      	movs	r3, #3
 80079fa:	e0b3      	b.n	8007b64 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079fc:	4b5b      	ldr	r3, [pc, #364]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1ea      	bne.n	80079de <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a08:	4b58      	ldr	r3, [pc, #352]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 8007a0a:	68da      	ldr	r2, [r3, #12]
 8007a0c:	4b58      	ldr	r3, [pc, #352]	@ (8007b70 <HAL_RCC_OscConfig+0x9a4>)
 8007a0e:	4013      	ands	r3, r2
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007a18:	3a01      	subs	r2, #1
 8007a1a:	0112      	lsls	r2, r2, #4
 8007a1c:	4311      	orrs	r1, r2
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007a22:	0212      	lsls	r2, r2, #8
 8007a24:	4311      	orrs	r1, r2
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007a2a:	0852      	lsrs	r2, r2, #1
 8007a2c:	3a01      	subs	r2, #1
 8007a2e:	0552      	lsls	r2, r2, #21
 8007a30:	4311      	orrs	r1, r2
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007a36:	0852      	lsrs	r2, r2, #1
 8007a38:	3a01      	subs	r2, #1
 8007a3a:	0652      	lsls	r2, r2, #25
 8007a3c:	4311      	orrs	r1, r2
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007a42:	06d2      	lsls	r2, r2, #27
 8007a44:	430a      	orrs	r2, r1
 8007a46:	4949      	ldr	r1, [pc, #292]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a4c:	4b47      	ldr	r3, [pc, #284]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a46      	ldr	r2, [pc, #280]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 8007a52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a56:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007a58:	4b44      	ldr	r3, [pc, #272]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	4a43      	ldr	r2, [pc, #268]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 8007a5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a62:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a64:	f7fd f8fe 	bl	8004c64 <HAL_GetTick>
 8007a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a6a:	e00e      	b.n	8007a8a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a6c:	f7fd f8fa 	bl	8004c64 <HAL_GetTick>
 8007a70:	4602      	mov	r2, r0
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d907      	bls.n	8007a8a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a7a:	4b3c      	ldr	r3, [pc, #240]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e06c      	b.n	8007b64 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a8a:	4b38      	ldr	r3, [pc, #224]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d0ea      	beq.n	8007a6c <HAL_RCC_OscConfig+0x8a0>
 8007a96:	e064      	b.n	8007b62 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a98:	4b34      	ldr	r3, [pc, #208]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a33      	ldr	r2, [pc, #204]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 8007a9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa4:	f7fd f8de 	bl	8004c64 <HAL_GetTick>
 8007aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007aaa:	e00e      	b.n	8007aca <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007aac:	f7fd f8da 	bl	8004c64 <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d907      	bls.n	8007aca <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007aba:	4b2c      	ldr	r3, [pc, #176]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d001      	beq.n	8007aca <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e04c      	b.n	8007b64 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007aca:	4b28      	ldr	r3, [pc, #160]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1ea      	bne.n	8007aac <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007ad6:	4b25      	ldr	r3, [pc, #148]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 8007ad8:	68da      	ldr	r2, [r3, #12]
 8007ada:	4924      	ldr	r1, [pc, #144]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 8007adc:	4b25      	ldr	r3, [pc, #148]	@ (8007b74 <HAL_RCC_OscConfig+0x9a8>)
 8007ade:	4013      	ands	r3, r2
 8007ae0:	60cb      	str	r3, [r1, #12]
 8007ae2:	e03e      	b.n	8007b62 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d101      	bne.n	8007af0 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e039      	b.n	8007b64 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8007af0:	4b1e      	ldr	r3, [pc, #120]	@ (8007b6c <HAL_RCC_OscConfig+0x9a0>)
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	f003 0203 	and.w	r2, r3, #3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d12c      	bne.n	8007b5e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d123      	bne.n	8007b5e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b20:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d11b      	bne.n	8007b5e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b30:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d113      	bne.n	8007b5e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b40:	085b      	lsrs	r3, r3, #1
 8007b42:	3b01      	subs	r3, #1
 8007b44:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d109      	bne.n	8007b5e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b54:	085b      	lsrs	r3, r3, #1
 8007b56:	3b01      	subs	r3, #1
 8007b58:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d001      	beq.n	8007b62 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e000      	b.n	8007b64 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3720      	adds	r7, #32
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	40021000 	.word	0x40021000
 8007b70:	019f800c 	.word	0x019f800c
 8007b74:	feeefffc 	.word	0xfeeefffc

08007b78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007b82:	2300      	movs	r3, #0
 8007b84:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d101      	bne.n	8007b90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e11c      	b.n	8007dca <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b90:	4b90      	ldr	r3, [pc, #576]	@ (8007dd4 <HAL_RCC_ClockConfig+0x25c>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 030f 	and.w	r3, r3, #15
 8007b98:	683a      	ldr	r2, [r7, #0]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d910      	bls.n	8007bc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b9e:	4b8d      	ldr	r3, [pc, #564]	@ (8007dd4 <HAL_RCC_ClockConfig+0x25c>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f023 020f 	bic.w	r2, r3, #15
 8007ba6:	498b      	ldr	r1, [pc, #556]	@ (8007dd4 <HAL_RCC_ClockConfig+0x25c>)
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bae:	4b89      	ldr	r3, [pc, #548]	@ (8007dd4 <HAL_RCC_ClockConfig+0x25c>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 030f 	and.w	r3, r3, #15
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d001      	beq.n	8007bc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e104      	b.n	8007dca <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d010      	beq.n	8007bee <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	689a      	ldr	r2, [r3, #8]
 8007bd0:	4b81      	ldr	r3, [pc, #516]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d908      	bls.n	8007bee <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bdc:	4b7e      	ldr	r3, [pc, #504]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	497b      	ldr	r1, [pc, #492]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f000 8085 	beq.w	8007d06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	2b03      	cmp	r3, #3
 8007c02:	d11f      	bne.n	8007c44 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c04:	4b74      	ldr	r3, [pc, #464]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d101      	bne.n	8007c14 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	e0da      	b.n	8007dca <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007c14:	f000 fa26 	bl	8008064 <RCC_GetSysClockFreqFromPLLSource>
 8007c18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	4a6f      	ldr	r2, [pc, #444]	@ (8007ddc <HAL_RCC_ClockConfig+0x264>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d947      	bls.n	8007cb2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007c22:	4b6d      	ldr	r3, [pc, #436]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d141      	bne.n	8007cb2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007c2e:	4b6a      	ldr	r3, [pc, #424]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c36:	4a68      	ldr	r2, [pc, #416]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007c38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c3c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007c3e:	2380      	movs	r3, #128	@ 0x80
 8007c40:	617b      	str	r3, [r7, #20]
 8007c42:	e036      	b.n	8007cb2 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d107      	bne.n	8007c5c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c4c:	4b62      	ldr	r3, [pc, #392]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d115      	bne.n	8007c84 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e0b6      	b.n	8007dca <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d107      	bne.n	8007c74 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007c64:	4b5c      	ldr	r3, [pc, #368]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0302 	and.w	r3, r3, #2
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d109      	bne.n	8007c84 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e0aa      	b.n	8007dca <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c74:	4b58      	ldr	r3, [pc, #352]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d101      	bne.n	8007c84 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e0a2      	b.n	8007dca <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007c84:	f000 f8b0 	bl	8007de8 <HAL_RCC_GetSysClockFreq>
 8007c88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	4a53      	ldr	r2, [pc, #332]	@ (8007ddc <HAL_RCC_ClockConfig+0x264>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d90f      	bls.n	8007cb2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007c92:	4b51      	ldr	r3, [pc, #324]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d109      	bne.n	8007cb2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007c9e:	4b4e      	ldr	r3, [pc, #312]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ca6:	4a4c      	ldr	r2, [pc, #304]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007ca8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007cae:	2380      	movs	r3, #128	@ 0x80
 8007cb0:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007cb2:	4b49      	ldr	r3, [pc, #292]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f023 0203 	bic.w	r2, r3, #3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	4946      	ldr	r1, [pc, #280]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cc4:	f7fc ffce 	bl	8004c64 <HAL_GetTick>
 8007cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cca:	e013      	b.n	8007cf4 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ccc:	f7fc ffca 	bl	8004c64 <HAL_GetTick>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d90a      	bls.n	8007cf4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cde:	4b3e      	ldr	r3, [pc, #248]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f003 020c 	and.w	r2, r3, #12
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d001      	beq.n	8007cf4 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e06a      	b.n	8007dca <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cf4:	4b38      	ldr	r3, [pc, #224]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	f003 020c 	and.w	r2, r3, #12
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d1e2      	bne.n	8007ccc <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	2b80      	cmp	r3, #128	@ 0x80
 8007d0a:	d105      	bne.n	8007d18 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007d0c:	4b32      	ldr	r3, [pc, #200]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	4a31      	ldr	r2, [pc, #196]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007d12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d16:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 0302 	and.w	r3, r3, #2
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d010      	beq.n	8007d46 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	689a      	ldr	r2, [r3, #8]
 8007d28:	4b2b      	ldr	r3, [pc, #172]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d208      	bcs.n	8007d46 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d34:	4b28      	ldr	r3, [pc, #160]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	4925      	ldr	r1, [pc, #148]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d46:	4b23      	ldr	r3, [pc, #140]	@ (8007dd4 <HAL_RCC_ClockConfig+0x25c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 030f 	and.w	r3, r3, #15
 8007d4e:	683a      	ldr	r2, [r7, #0]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d210      	bcs.n	8007d76 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d54:	4b1f      	ldr	r3, [pc, #124]	@ (8007dd4 <HAL_RCC_ClockConfig+0x25c>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f023 020f 	bic.w	r2, r3, #15
 8007d5c:	491d      	ldr	r1, [pc, #116]	@ (8007dd4 <HAL_RCC_ClockConfig+0x25c>)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d64:	4b1b      	ldr	r3, [pc, #108]	@ (8007dd4 <HAL_RCC_ClockConfig+0x25c>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 030f 	and.w	r3, r3, #15
 8007d6c:	683a      	ldr	r2, [r7, #0]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d001      	beq.n	8007d76 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e029      	b.n	8007dca <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0304 	and.w	r3, r3, #4
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d008      	beq.n	8007d94 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d82:	4b15      	ldr	r3, [pc, #84]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	4912      	ldr	r1, [pc, #72]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007d90:	4313      	orrs	r3, r2
 8007d92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 0308 	and.w	r3, r3, #8
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d009      	beq.n	8007db4 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007da0:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	00db      	lsls	r3, r3, #3
 8007dae:	490a      	ldr	r1, [pc, #40]	@ (8007dd8 <HAL_RCC_ClockConfig+0x260>)
 8007db0:	4313      	orrs	r3, r2
 8007db2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007db4:	f000 f8b6 	bl	8007f24 <HAL_RCC_GetHCLKFreq>
 8007db8:	4603      	mov	r3, r0
 8007dba:	4a09      	ldr	r2, [pc, #36]	@ (8007de0 <HAL_RCC_ClockConfig+0x268>)
 8007dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007dbe:	4b09      	ldr	r3, [pc, #36]	@ (8007de4 <HAL_RCC_ClockConfig+0x26c>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fc fefe 	bl	8004bc4 <HAL_InitTick>
 8007dc8:	4603      	mov	r3, r0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3718      	adds	r7, #24
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	40022000 	.word	0x40022000
 8007dd8:	40021000 	.word	0x40021000
 8007ddc:	04c4b400 	.word	0x04c4b400
 8007de0:	20000000 	.word	0x20000000
 8007de4:	20000004 	.word	0x20000004

08007de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b089      	sub	sp, #36	@ 0x24
 8007dec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007dee:	2300      	movs	r3, #0
 8007df0:	61fb      	str	r3, [r7, #28]
 8007df2:	2300      	movs	r3, #0
 8007df4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007df6:	4b47      	ldr	r3, [pc, #284]	@ (8007f14 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	f003 030c 	and.w	r3, r3, #12
 8007dfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e00:	4b44      	ldr	r3, [pc, #272]	@ (8007f14 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	f003 0303 	and.w	r3, r3, #3
 8007e08:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d005      	beq.n	8007e1c <HAL_RCC_GetSysClockFreq+0x34>
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	2b0c      	cmp	r3, #12
 8007e14:	d121      	bne.n	8007e5a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d11e      	bne.n	8007e5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007e1c:	4b3d      	ldr	r3, [pc, #244]	@ (8007f14 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0308 	and.w	r3, r3, #8
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d107      	bne.n	8007e38 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007e28:	4b3a      	ldr	r3, [pc, #232]	@ (8007f14 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e2e:	0a1b      	lsrs	r3, r3, #8
 8007e30:	f003 030f 	and.w	r3, r3, #15
 8007e34:	61fb      	str	r3, [r7, #28]
 8007e36:	e005      	b.n	8007e44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007e38:	4b36      	ldr	r3, [pc, #216]	@ (8007f14 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	091b      	lsrs	r3, r3, #4
 8007e3e:	f003 030f 	and.w	r3, r3, #15
 8007e42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8007e44:	4a34      	ldr	r2, [pc, #208]	@ (8007f18 <HAL_RCC_GetSysClockFreq+0x130>)
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e4c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d10d      	bne.n	8007e70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007e58:	e00a      	b.n	8007e70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	2b04      	cmp	r3, #4
 8007e5e:	d102      	bne.n	8007e66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007e60:	4b2e      	ldr	r3, [pc, #184]	@ (8007f1c <HAL_RCC_GetSysClockFreq+0x134>)
 8007e62:	61bb      	str	r3, [r7, #24]
 8007e64:	e004      	b.n	8007e70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	2b08      	cmp	r3, #8
 8007e6a:	d101      	bne.n	8007e70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8007f20 <HAL_RCC_GetSysClockFreq+0x138>)
 8007e6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	2b0c      	cmp	r3, #12
 8007e74:	d146      	bne.n	8007f04 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8007e76:	4b27      	ldr	r3, [pc, #156]	@ (8007f14 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	f003 0303 	and.w	r3, r3, #3
 8007e7e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007e80:	4b24      	ldr	r3, [pc, #144]	@ (8007f14 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	091b      	lsrs	r3, r3, #4
 8007e86:	f003 030f 	and.w	r3, r3, #15
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d003      	beq.n	8007e9c <HAL_RCC_GetSysClockFreq+0xb4>
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2b03      	cmp	r3, #3
 8007e98:	d00d      	beq.n	8007eb6 <HAL_RCC_GetSysClockFreq+0xce>
 8007e9a:	e019      	b.n	8007ed0 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8007f1c <HAL_RCC_GetSysClockFreq+0x134>)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8007f14 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007ea6:	68d2      	ldr	r2, [r2, #12]
 8007ea8:	0a12      	lsrs	r2, r2, #8
 8007eaa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007eae:	fb02 f303 	mul.w	r3, r2, r3
 8007eb2:	617b      	str	r3, [r7, #20]
        break;
 8007eb4:	e019      	b.n	8007eea <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007eb6:	4a1a      	ldr	r2, [pc, #104]	@ (8007f20 <HAL_RCC_GetSysClockFreq+0x138>)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ebe:	4a15      	ldr	r2, [pc, #84]	@ (8007f14 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007ec0:	68d2      	ldr	r2, [r2, #12]
 8007ec2:	0a12      	lsrs	r2, r2, #8
 8007ec4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007ec8:	fb02 f303 	mul.w	r3, r2, r3
 8007ecc:	617b      	str	r3, [r7, #20]
        break;
 8007ece:	e00c      	b.n	8007eea <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ed0:	69fa      	ldr	r2, [r7, #28]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8007f14 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007eda:	68d2      	ldr	r2, [r2, #12]
 8007edc:	0a12      	lsrs	r2, r2, #8
 8007ede:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007ee2:	fb02 f303 	mul.w	r3, r2, r3
 8007ee6:	617b      	str	r3, [r7, #20]
        break;
 8007ee8:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8007eea:	4b0a      	ldr	r3, [pc, #40]	@ (8007f14 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	0e5b      	lsrs	r3, r3, #25
 8007ef0:	f003 0303 	and.w	r3, r3, #3
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	005b      	lsls	r3, r3, #1
 8007ef8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007f04:	69bb      	ldr	r3, [r7, #24]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3724      	adds	r7, #36	@ 0x24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	40021000 	.word	0x40021000
 8007f18:	0800caf4 	.word	0x0800caf4
 8007f1c:	00f42400 	.word	0x00f42400
 8007f20:	007a1200 	.word	0x007a1200

08007f24 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8007f28:	f7ff ff5e 	bl	8007de8 <HAL_RCC_GetSysClockFreq>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	4b05      	ldr	r3, [pc, #20]	@ (8007f44 <HAL_RCC_GetHCLKFreq+0x20>)
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	091b      	lsrs	r3, r3, #4
 8007f34:	f003 030f 	and.w	r3, r3, #15
 8007f38:	4903      	ldr	r1, [pc, #12]	@ (8007f48 <HAL_RCC_GetHCLKFreq+0x24>)
 8007f3a:	5ccb      	ldrb	r3, [r1, r3]
 8007f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	40021000 	.word	0x40021000
 8007f48:	0800cadc 	.word	0x0800cadc

08007f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007f50:	f7ff ffe8 	bl	8007f24 <HAL_RCC_GetHCLKFreq>
 8007f54:	4602      	mov	r2, r0
 8007f56:	4b05      	ldr	r3, [pc, #20]	@ (8007f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	0a1b      	lsrs	r3, r3, #8
 8007f5c:	f003 0307 	and.w	r3, r3, #7
 8007f60:	4903      	ldr	r1, [pc, #12]	@ (8007f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f62:	5ccb      	ldrb	r3, [r1, r3]
 8007f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	40021000 	.word	0x40021000
 8007f70:	0800caec 	.word	0x0800caec

08007f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007f78:	f7ff ffd4 	bl	8007f24 <HAL_RCC_GetHCLKFreq>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	4b05      	ldr	r3, [pc, #20]	@ (8007f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	0adb      	lsrs	r3, r3, #11
 8007f84:	f003 0307 	and.w	r3, r3, #7
 8007f88:	4903      	ldr	r1, [pc, #12]	@ (8007f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f8a:	5ccb      	ldrb	r3, [r1, r3]
 8007f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	40021000 	.word	0x40021000
 8007f98:	0800caec 	.word	0x0800caec

08007f9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007fa8:	4b2c      	ldr	r3, [pc, #176]	@ (800805c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8007faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007fb4:	f7ff f86c 	bl	8007090 <HAL_PWREx_GetVoltageRange>
 8007fb8:	6138      	str	r0, [r7, #16]
 8007fba:	e014      	b.n	8007fe6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007fbc:	4b27      	ldr	r3, [pc, #156]	@ (800805c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8007fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fc0:	4a26      	ldr	r2, [pc, #152]	@ (800805c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8007fc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fc8:	4b24      	ldr	r3, [pc, #144]	@ (800805c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8007fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fd0:	60fb      	str	r3, [r7, #12]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007fd4:	f7ff f85c 	bl	8007090 <HAL_PWREx_GetVoltageRange>
 8007fd8:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007fda:	4b20      	ldr	r3, [pc, #128]	@ (800805c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8007fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fde:	4a1f      	ldr	r2, [pc, #124]	@ (800805c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8007fe0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fe4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d003      	beq.n	8007ff4 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ff2:	d10b      	bne.n	800800c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b80      	cmp	r3, #128	@ 0x80
 8007ff8:	d919      	bls.n	800802e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2ba0      	cmp	r3, #160	@ 0xa0
 8007ffe:	d902      	bls.n	8008006 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008000:	2302      	movs	r3, #2
 8008002:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8008004:	e013      	b.n	800802e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008006:	2301      	movs	r3, #1
 8008008:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800800a:	e010      	b.n	800802e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2b80      	cmp	r3, #128	@ 0x80
 8008010:	d902      	bls.n	8008018 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008012:	2303      	movs	r3, #3
 8008014:	617b      	str	r3, [r7, #20]
 8008016:	e00a      	b.n	800802e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b80      	cmp	r3, #128	@ 0x80
 800801c:	d102      	bne.n	8008024 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800801e:	2302      	movs	r3, #2
 8008020:	617b      	str	r3, [r7, #20]
 8008022:	e004      	b.n	800802e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b70      	cmp	r3, #112	@ 0x70
 8008028:	d101      	bne.n	800802e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800802a:	2301      	movs	r3, #1
 800802c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800802e:	4b0c      	ldr	r3, [pc, #48]	@ (8008060 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f023 020f 	bic.w	r2, r3, #15
 8008036:	490a      	ldr	r1, [pc, #40]	@ (8008060 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	4313      	orrs	r3, r2
 800803c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800803e:	4b08      	ldr	r3, [pc, #32]	@ (8008060 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 030f 	and.w	r3, r3, #15
 8008046:	697a      	ldr	r2, [r7, #20]
 8008048:	429a      	cmp	r2, r3
 800804a:	d001      	beq.n	8008050 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e000      	b.n	8008052 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3718      	adds	r7, #24
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	40021000 	.word	0x40021000
 8008060:	40022000 	.word	0x40022000

08008064 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008064:	b480      	push	{r7}
 8008066:	b087      	sub	sp, #28
 8008068:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800806a:	4b31      	ldr	r3, [pc, #196]	@ (8008130 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	f003 0303 	and.w	r3, r3, #3
 8008072:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008074:	4b2e      	ldr	r3, [pc, #184]	@ (8008130 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	091b      	lsrs	r3, r3, #4
 800807a:	f003 030f 	and.w	r3, r3, #15
 800807e:	3301      	adds	r3, #1
 8008080:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2b03      	cmp	r3, #3
 8008086:	d015      	beq.n	80080b4 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2b03      	cmp	r3, #3
 800808c:	d839      	bhi.n	8008102 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d01c      	beq.n	80080ce <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2b02      	cmp	r3, #2
 8008098:	d133      	bne.n	8008102 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800809a:	4a26      	ldr	r2, [pc, #152]	@ (8008134 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a2:	4a23      	ldr	r2, [pc, #140]	@ (8008130 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80080a4:	68d2      	ldr	r2, [r2, #12]
 80080a6:	0a12      	lsrs	r2, r2, #8
 80080a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80080ac:	fb02 f303 	mul.w	r3, r2, r3
 80080b0:	613b      	str	r3, [r7, #16]
      break;
 80080b2:	e029      	b.n	8008108 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80080b4:	4a20      	ldr	r2, [pc, #128]	@ (8008138 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080bc:	4a1c      	ldr	r2, [pc, #112]	@ (8008130 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80080be:	68d2      	ldr	r2, [r2, #12]
 80080c0:	0a12      	lsrs	r2, r2, #8
 80080c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80080c6:	fb02 f303 	mul.w	r3, r2, r3
 80080ca:	613b      	str	r3, [r7, #16]
      break;
 80080cc:	e01c      	b.n	8008108 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80080ce:	4b18      	ldr	r3, [pc, #96]	@ (8008130 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 0308 	and.w	r3, r3, #8
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d107      	bne.n	80080ea <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80080da:	4b15      	ldr	r3, [pc, #84]	@ (8008130 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80080dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080e0:	0a1b      	lsrs	r3, r3, #8
 80080e2:	f003 030f 	and.w	r3, r3, #15
 80080e6:	617b      	str	r3, [r7, #20]
 80080e8:	e005      	b.n	80080f6 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80080ea:	4b11      	ldr	r3, [pc, #68]	@ (8008130 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	091b      	lsrs	r3, r3, #4
 80080f0:	f003 030f 	and.w	r3, r3, #15
 80080f4:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 80080f6:	4a11      	ldr	r2, [pc, #68]	@ (800813c <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080fe:	613b      	str	r3, [r7, #16]
        break;
 8008100:	e002      	b.n	8008108 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8008102:	2300      	movs	r3, #0
 8008104:	613b      	str	r3, [r7, #16]
      break;
 8008106:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8008108:	4b09      	ldr	r3, [pc, #36]	@ (8008130 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	0e5b      	lsrs	r3, r3, #25
 800810e:	f003 0303 	and.w	r3, r3, #3
 8008112:	3301      	adds	r3, #1
 8008114:	005b      	lsls	r3, r3, #1
 8008116:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8008118:	693a      	ldr	r2, [r7, #16]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008120:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8008122:	683b      	ldr	r3, [r7, #0]
}
 8008124:	4618      	mov	r0, r3
 8008126:	371c      	adds	r7, #28
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	40021000 	.word	0x40021000
 8008134:	00f42400 	.word	0x00f42400
 8008138:	007a1200 	.word	0x007a1200
 800813c:	0800caf4 	.word	0x0800caf4

08008140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b088      	sub	sp, #32
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008148:	2300      	movs	r3, #0
 800814a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800814c:	2300      	movs	r3, #0
 800814e:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008158:	2b00      	cmp	r3, #0
 800815a:	d040      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008160:	2b80      	cmp	r3, #128	@ 0x80
 8008162:	d02a      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008164:	2b80      	cmp	r3, #128	@ 0x80
 8008166:	d825      	bhi.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008168:	2b60      	cmp	r3, #96	@ 0x60
 800816a:	d026      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800816c:	2b60      	cmp	r3, #96	@ 0x60
 800816e:	d821      	bhi.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008170:	2b40      	cmp	r3, #64	@ 0x40
 8008172:	d006      	beq.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8008174:	2b40      	cmp	r3, #64	@ 0x40
 8008176:	d81d      	bhi.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008178:	2b00      	cmp	r3, #0
 800817a:	d009      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800817c:	2b20      	cmp	r3, #32
 800817e:	d010      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008180:	e018      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008182:	4b8f      	ldr	r3, [pc, #572]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	4a8e      	ldr	r2, [pc, #568]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800818c:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800818e:	e015      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	3304      	adds	r3, #4
 8008194:	2100      	movs	r1, #0
 8008196:	4618      	mov	r0, r3
 8008198:	f000 fb56 	bl	8008848 <RCCEx_PLLSAI1_Config>
 800819c:	4603      	mov	r3, r0
 800819e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80081a0:	e00c      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	3320      	adds	r3, #32
 80081a6:	2100      	movs	r1, #0
 80081a8:	4618      	mov	r0, r3
 80081aa:	f000 fc33 	bl	8008a14 <RCCEx_PLLSAI2_Config>
 80081ae:	4603      	mov	r3, r0
 80081b0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80081b2:	e003      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	77fb      	strb	r3, [r7, #31]
        break;
 80081b8:	e000      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80081ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081bc:	7ffb      	ldrb	r3, [r7, #31]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10b      	bne.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80081c2:	4b7f      	ldr	r3, [pc, #508]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80081c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80081c8:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081d0:	497b      	ldr	r1, [pc, #492]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80081d8:	e001      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081da:	7ffb      	ldrb	r3, [r7, #31]
 80081dc:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d047      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081f2:	d030      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80081f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081f8:	d82a      	bhi.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80081fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081fe:	d02a      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8008200:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008204:	d824      	bhi.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008206:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800820a:	d008      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800820c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008210:	d81e      	bhi.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00a      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8008216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800821a:	d010      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800821c:	e018      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800821e:	4b68      	ldr	r3, [pc, #416]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	4a67      	ldr	r2, [pc, #412]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008228:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800822a:	e015      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	3304      	adds	r3, #4
 8008230:	2100      	movs	r1, #0
 8008232:	4618      	mov	r0, r3
 8008234:	f000 fb08 	bl	8008848 <RCCEx_PLLSAI1_Config>
 8008238:	4603      	mov	r3, r0
 800823a:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800823c:	e00c      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	3320      	adds	r3, #32
 8008242:	2100      	movs	r1, #0
 8008244:	4618      	mov	r0, r3
 8008246:	f000 fbe5 	bl	8008a14 <RCCEx_PLLSAI2_Config>
 800824a:	4603      	mov	r3, r0
 800824c:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800824e:	e003      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	77fb      	strb	r3, [r7, #31]
        break;
 8008254:	e000      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8008256:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008258:	7ffb      	ldrb	r3, [r7, #31]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d10b      	bne.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800825e:	4b58      	ldr	r3, [pc, #352]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008260:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008264:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800826c:	4954      	ldr	r1, [pc, #336]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800826e:	4313      	orrs	r3, r2
 8008270:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8008274:	e001      	b.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008276:	7ffb      	ldrb	r3, [r7, #31]
 8008278:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008282:	2b00      	cmp	r3, #0
 8008284:	f000 80ab 	beq.w	80083de <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008288:	2300      	movs	r3, #0
 800828a:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800828c:	4b4c      	ldr	r3, [pc, #304]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800828e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10d      	bne.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008298:	4b49      	ldr	r3, [pc, #292]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800829a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800829c:	4a48      	ldr	r2, [pc, #288]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800829e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80082a4:	4b46      	ldr	r3, [pc, #280]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082ac:	60fb      	str	r3, [r7, #12]
 80082ae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80082b0:	2301      	movs	r3, #1
 80082b2:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80082b4:	4b43      	ldr	r3, [pc, #268]	@ (80083c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a42      	ldr	r2, [pc, #264]	@ (80083c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80082ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80082c0:	f7fc fcd0 	bl	8004c64 <HAL_GetTick>
 80082c4:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082c6:	e00f      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082c8:	f7fc fccc 	bl	8004c64 <HAL_GetTick>
 80082cc:	4602      	mov	r2, r0
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d908      	bls.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082d6:	4b3b      	ldr	r3, [pc, #236]	@ (80083c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d109      	bne.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	77fb      	strb	r3, [r7, #31]
        }
        break;
 80082e6:	e006      	b.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082e8:	4b36      	ldr	r3, [pc, #216]	@ (80083c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d0e9      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80082f4:	e000      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 80082f6:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 80082f8:	7ffb      	ldrb	r3, [r7, #31]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d164      	bne.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80082fe:	4b30      	ldr	r3, [pc, #192]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008304:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008308:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d01f      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008316:	69ba      	ldr	r2, [r7, #24]
 8008318:	429a      	cmp	r2, r3
 800831a:	d019      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800831c:	4b28      	ldr	r3, [pc, #160]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800831e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008326:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008328:	4b25      	ldr	r3, [pc, #148]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800832a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800832e:	4a24      	ldr	r2, [pc, #144]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008334:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008338:	4b21      	ldr	r3, [pc, #132]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800833a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800833e:	4a20      	ldr	r2, [pc, #128]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008340:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008348:	4a1d      	ldr	r2, [pc, #116]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	2b00      	cmp	r3, #0
 8008358:	d01f      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800835a:	f7fc fc83 	bl	8004c64 <HAL_GetTick>
 800835e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008360:	e012      	b.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008362:	f7fc fc7f 	bl	8004c64 <HAL_GetTick>
 8008366:	4602      	mov	r2, r0
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008370:	4293      	cmp	r3, r2
 8008372:	d909      	bls.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008374:	4b12      	ldr	r3, [pc, #72]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800837a:	f003 0302 	and.w	r3, r3, #2
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10a      	bne.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8008386:	e007      	b.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008388:	4b0d      	ldr	r3, [pc, #52]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800838a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800838e:	f003 0302 	and.w	r3, r3, #2
 8008392:	2b00      	cmp	r3, #0
 8008394:	d0e5      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8008396:	e000      	b.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8008398:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 800839a:	7ffb      	ldrb	r3, [r7, #31]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10c      	bne.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083a0:	4b07      	ldr	r3, [pc, #28]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083b0:	4903      	ldr	r1, [pc, #12]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083b2:	4313      	orrs	r3, r2
 80083b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80083b8:	e008      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80083ba:	7ffb      	ldrb	r3, [r7, #31]
 80083bc:	77bb      	strb	r3, [r7, #30]
 80083be:	e005      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80083c0:	40021000 	.word	0x40021000
 80083c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083c8:	7ffb      	ldrb	r3, [r7, #31]
 80083ca:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80083cc:	7dfb      	ldrb	r3, [r7, #23]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d105      	bne.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083d2:	4b9c      	ldr	r3, [pc, #624]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80083d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083d6:	4a9b      	ldr	r2, [pc, #620]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80083d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80083dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00a      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80083ea:	4b96      	ldr	r3, [pc, #600]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80083ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083f0:	f023 0203 	bic.w	r2, r3, #3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083f8:	4992      	ldr	r1, [pc, #584]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0302 	and.w	r3, r3, #2
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00a      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800840c:	4b8d      	ldr	r3, [pc, #564]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800840e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008412:	f023 020c 	bic.w	r2, r3, #12
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800841a:	498a      	ldr	r1, [pc, #552]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800841c:	4313      	orrs	r3, r2
 800841e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0304 	and.w	r3, r3, #4
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00a      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800842e:	4b85      	ldr	r3, [pc, #532]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008434:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800843c:	4981      	ldr	r1, [pc, #516]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800843e:	4313      	orrs	r3, r2
 8008440:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 0308 	and.w	r3, r3, #8
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00a      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008450:	4b7c      	ldr	r3, [pc, #496]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008456:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800845e:	4979      	ldr	r1, [pc, #484]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008460:	4313      	orrs	r3, r2
 8008462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 0310 	and.w	r3, r3, #16
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00a      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008472:	4b74      	ldr	r3, [pc, #464]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008478:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008480:	4970      	ldr	r1, [pc, #448]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008482:	4313      	orrs	r3, r2
 8008484:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0320 	and.w	r3, r3, #32
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00a      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008494:	4b6b      	ldr	r3, [pc, #428]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800849a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084a2:	4968      	ldr	r1, [pc, #416]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00a      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084b6:	4b63      	ldr	r3, [pc, #396]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80084b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084c4:	495f      	ldr	r1, [pc, #380]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80084c6:	4313      	orrs	r3, r2
 80084c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00a      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80084d8:	4b5a      	ldr	r3, [pc, #360]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80084da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084e6:	4957      	ldr	r1, [pc, #348]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00a      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80084fa:	4b52      	ldr	r3, [pc, #328]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80084fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008500:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008508:	494e      	ldr	r1, [pc, #312]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800850a:	4313      	orrs	r3, r2
 800850c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008518:	2b00      	cmp	r3, #0
 800851a:	d031      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008520:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008524:	d00e      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8008526:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800852a:	d814      	bhi.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800852c:	2b00      	cmp	r3, #0
 800852e:	d015      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008530:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008534:	d10f      	bne.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008536:	4b43      	ldr	r3, [pc, #268]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	4a42      	ldr	r2, [pc, #264]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800853c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008540:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8008542:	e00c      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	3304      	adds	r3, #4
 8008548:	2100      	movs	r1, #0
 800854a:	4618      	mov	r0, r3
 800854c:	f000 f97c 	bl	8008848 <RCCEx_PLLSAI1_Config>
 8008550:	4603      	mov	r3, r0
 8008552:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8008554:	e003      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	77fb      	strb	r3, [r7, #31]
        break;
 800855a:	e000      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 800855c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800855e:	7ffb      	ldrb	r3, [r7, #31]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10b      	bne.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008564:	4b37      	ldr	r3, [pc, #220]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800856a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008572:	4934      	ldr	r1, [pc, #208]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008574:	4313      	orrs	r3, r2
 8008576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800857a:	e001      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800857c:	7ffb      	ldrb	r3, [r7, #31]
 800857e:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00a      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800858c:	4b2d      	ldr	r3, [pc, #180]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800858e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008592:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800859a:	492a      	ldr	r1, [pc, #168]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800859c:	4313      	orrs	r3, r2
 800859e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00a      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80085ae:	4b25      	ldr	r3, [pc, #148]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80085b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085b4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085bc:	4921      	ldr	r1, [pc, #132]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00a      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80085d0:	4b1c      	ldr	r3, [pc, #112]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80085d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085d6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085de:	4919      	ldr	r1, [pc, #100]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80085e0:	4313      	orrs	r3, r2
 80085e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00a      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80085f2:	4b14      	ldr	r3, [pc, #80]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80085f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80085f8:	f023 0203 	bic.w	r2, r3, #3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008600:	4910      	ldr	r1, [pc, #64]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008602:	4313      	orrs	r3, r2
 8008604:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d02b      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008614:	4b0b      	ldr	r3, [pc, #44]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800861a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008622:	4908      	ldr	r1, [pc, #32]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008624:	4313      	orrs	r3, r2
 8008626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800862e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008632:	d109      	bne.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008634:	4b03      	ldr	r3, [pc, #12]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	4a02      	ldr	r2, [pc, #8]	@ (8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800863a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800863e:	60d3      	str	r3, [r2, #12]
 8008640:	e014      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008642:	bf00      	nop
 8008644:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800864c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008650:	d10c      	bne.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	3304      	adds	r3, #4
 8008656:	2101      	movs	r1, #1
 8008658:	4618      	mov	r0, r3
 800865a:	f000 f8f5 	bl	8008848 <RCCEx_PLLSAI1_Config>
 800865e:	4603      	mov	r3, r0
 8008660:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8008662:	7ffb      	ldrb	r3, [r7, #31]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d001      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8008668:	7ffb      	ldrb	r3, [r7, #31]
 800866a:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008674:	2b00      	cmp	r3, #0
 8008676:	d04a      	beq.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800867c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008680:	d108      	bne.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8008682:	4b70      	ldr	r3, [pc, #448]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008684:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008688:	4a6e      	ldr	r2, [pc, #440]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800868a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800868e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8008692:	e012      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8008694:	4b6b      	ldr	r3, [pc, #428]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800869a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086a2:	4968      	ldr	r1, [pc, #416]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80086a4:	4313      	orrs	r3, r2
 80086a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80086aa:	4b66      	ldr	r3, [pc, #408]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80086ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80086b0:	4a64      	ldr	r2, [pc, #400]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80086b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086b6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80086c2:	d10d      	bne.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	3304      	adds	r3, #4
 80086c8:	2101      	movs	r1, #1
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 f8bc 	bl	8008848 <RCCEx_PLLSAI1_Config>
 80086d0:	4603      	mov	r3, r0
 80086d2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80086d4:	7ffb      	ldrb	r3, [r7, #31]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d019      	beq.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80086da:	7ffb      	ldrb	r3, [r7, #31]
 80086dc:	77bb      	strb	r3, [r7, #30]
 80086de:	e016      	b.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086e8:	d106      	bne.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80086ea:	4b56      	ldr	r3, [pc, #344]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	4a55      	ldr	r2, [pc, #340]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80086f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086f4:	60d3      	str	r3, [r2, #12]
 80086f6:	e00a      	b.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008700:	d105      	bne.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008702:	4b50      	ldr	r3, [pc, #320]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	4a4f      	ldr	r2, [pc, #316]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800870c:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008716:	2b00      	cmp	r3, #0
 8008718:	d028      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800871a:	4b4a      	ldr	r3, [pc, #296]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800871c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008720:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008728:	4946      	ldr	r1, [pc, #280]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800872a:	4313      	orrs	r3, r2
 800872c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008734:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008738:	d106      	bne.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800873a:	4b42      	ldr	r3, [pc, #264]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	4a41      	ldr	r2, [pc, #260]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008740:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008744:	60d3      	str	r3, [r2, #12]
 8008746:	e011      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800874c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008750:	d10c      	bne.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	3304      	adds	r3, #4
 8008756:	2101      	movs	r1, #1
 8008758:	4618      	mov	r0, r3
 800875a:	f000 f875 	bl	8008848 <RCCEx_PLLSAI1_Config>
 800875e:	4603      	mov	r3, r0
 8008760:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008762:	7ffb      	ldrb	r3, [r7, #31]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d001      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8008768:	7ffb      	ldrb	r3, [r7, #31]
 800876a:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008774:	2b00      	cmp	r3, #0
 8008776:	d01e      	beq.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008778:	4b32      	ldr	r3, [pc, #200]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800877a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800877e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008788:	492e      	ldr	r1, [pc, #184]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800878a:	4313      	orrs	r3, r2
 800878c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008796:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800879a:	d10c      	bne.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	3304      	adds	r3, #4
 80087a0:	2102      	movs	r1, #2
 80087a2:	4618      	mov	r0, r3
 80087a4:	f000 f850 	bl	8008848 <RCCEx_PLLSAI1_Config>
 80087a8:	4603      	mov	r3, r0
 80087aa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80087ac:	7ffb      	ldrb	r3, [r7, #31]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d001      	beq.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80087b2:	7ffb      	ldrb	r3, [r7, #31]
 80087b4:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00b      	beq.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80087c2:	4b20      	ldr	r3, [pc, #128]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80087c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087c8:	f023 0204 	bic.w	r2, r3, #4
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087d2:	491c      	ldr	r1, [pc, #112]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80087d4:	4313      	orrs	r3, r2
 80087d6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00b      	beq.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80087e6:	4b17      	ldr	r3, [pc, #92]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80087e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087ec:	f023 0218 	bic.w	r2, r3, #24
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087f6:	4913      	ldr	r1, [pc, #76]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80087f8:	4313      	orrs	r3, r2
 80087fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008806:	2b00      	cmp	r3, #0
 8008808:	d017      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800880a:	4b0e      	ldr	r3, [pc, #56]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800880c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008810:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800881a:	490a      	ldr	r1, [pc, #40]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800881c:	4313      	orrs	r3, r2
 800881e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008828:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800882c:	d105      	bne.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800882e:	4b05      	ldr	r3, [pc, #20]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	4a04      	ldr	r2, [pc, #16]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008834:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008838:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800883a:	7fbb      	ldrb	r3, [r7, #30]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3720      	adds	r7, #32
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	40021000 	.word	0x40021000

08008848 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b03      	cmp	r3, #3
 800885c:	d018      	beq.n	8008890 <RCCEx_PLLSAI1_Config+0x48>
 800885e:	2b03      	cmp	r3, #3
 8008860:	d81f      	bhi.n	80088a2 <RCCEx_PLLSAI1_Config+0x5a>
 8008862:	2b01      	cmp	r3, #1
 8008864:	d002      	beq.n	800886c <RCCEx_PLLSAI1_Config+0x24>
 8008866:	2b02      	cmp	r3, #2
 8008868:	d009      	beq.n	800887e <RCCEx_PLLSAI1_Config+0x36>
 800886a:	e01a      	b.n	80088a2 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800886c:	4b65      	ldr	r3, [pc, #404]	@ (8008a04 <RCCEx_PLLSAI1_Config+0x1bc>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 0302 	and.w	r3, r3, #2
 8008874:	2b00      	cmp	r3, #0
 8008876:	d117      	bne.n	80088a8 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800887c:	e014      	b.n	80088a8 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800887e:	4b61      	ldr	r3, [pc, #388]	@ (8008a04 <RCCEx_PLLSAI1_Config+0x1bc>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008886:	2b00      	cmp	r3, #0
 8008888:	d110      	bne.n	80088ac <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800888e:	e00d      	b.n	80088ac <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8008890:	4b5c      	ldr	r3, [pc, #368]	@ (8008a04 <RCCEx_PLLSAI1_Config+0x1bc>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8008898:	2b00      	cmp	r3, #0
 800889a:	d109      	bne.n	80088b0 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80088a0:	e006      	b.n	80088b0 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	73fb      	strb	r3, [r7, #15]
      break;
 80088a6:	e004      	b.n	80088b2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80088a8:	bf00      	nop
 80088aa:	e002      	b.n	80088b2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80088ac:	bf00      	nop
 80088ae:	e000      	b.n	80088b2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80088b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80088b2:	7bfb      	ldrb	r3, [r7, #15]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f040 809f 	bne.w	80089f8 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80088ba:	4b52      	ldr	r3, [pc, #328]	@ (8008a04 <RCCEx_PLLSAI1_Config+0x1bc>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a51      	ldr	r2, [pc, #324]	@ (8008a04 <RCCEx_PLLSAI1_Config+0x1bc>)
 80088c0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80088c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088c6:	f7fc f9cd 	bl	8004c64 <HAL_GetTick>
 80088ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80088cc:	e00f      	b.n	80088ee <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80088ce:	f7fc f9c9 	bl	8004c64 <HAL_GetTick>
 80088d2:	4602      	mov	r2, r0
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d908      	bls.n	80088ee <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80088dc:	4b49      	ldr	r3, [pc, #292]	@ (8008a04 <RCCEx_PLLSAI1_Config+0x1bc>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d009      	beq.n	80088fc <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80088e8:	2303      	movs	r3, #3
 80088ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80088ec:	e006      	b.n	80088fc <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80088ee:	4b45      	ldr	r3, [pc, #276]	@ (8008a04 <RCCEx_PLLSAI1_Config+0x1bc>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1e9      	bne.n	80088ce <RCCEx_PLLSAI1_Config+0x86>
 80088fa:	e000      	b.n	80088fe <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80088fc:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80088fe:	7bfb      	ldrb	r3, [r7, #15]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d179      	bne.n	80089f8 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d116      	bne.n	8008938 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800890a:	4b3e      	ldr	r3, [pc, #248]	@ (8008a04 <RCCEx_PLLSAI1_Config+0x1bc>)
 800890c:	691a      	ldr	r2, [r3, #16]
 800890e:	4b3e      	ldr	r3, [pc, #248]	@ (8008a08 <RCCEx_PLLSAI1_Config+0x1c0>)
 8008910:	4013      	ands	r3, r2
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	6892      	ldr	r2, [r2, #8]
 8008916:	0211      	lsls	r1, r2, #8
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	68d2      	ldr	r2, [r2, #12]
 800891c:	06d2      	lsls	r2, r2, #27
 800891e:	4311      	orrs	r1, r2
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	6852      	ldr	r2, [r2, #4]
 8008924:	3a01      	subs	r2, #1
 8008926:	0112      	lsls	r2, r2, #4
 8008928:	4311      	orrs	r1, r2
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	6812      	ldr	r2, [r2, #0]
 800892e:	430a      	orrs	r2, r1
 8008930:	4934      	ldr	r1, [pc, #208]	@ (8008a04 <RCCEx_PLLSAI1_Config+0x1bc>)
 8008932:	4313      	orrs	r3, r2
 8008934:	610b      	str	r3, [r1, #16]
 8008936:	e033      	b.n	80089a0 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d118      	bne.n	8008970 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800893e:	4b31      	ldr	r3, [pc, #196]	@ (8008a04 <RCCEx_PLLSAI1_Config+0x1bc>)
 8008940:	691a      	ldr	r2, [r3, #16]
 8008942:	4b32      	ldr	r3, [pc, #200]	@ (8008a0c <RCCEx_PLLSAI1_Config+0x1c4>)
 8008944:	4013      	ands	r3, r2
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	6892      	ldr	r2, [r2, #8]
 800894a:	0211      	lsls	r1, r2, #8
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	6912      	ldr	r2, [r2, #16]
 8008950:	0852      	lsrs	r2, r2, #1
 8008952:	3a01      	subs	r2, #1
 8008954:	0552      	lsls	r2, r2, #21
 8008956:	4311      	orrs	r1, r2
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	6852      	ldr	r2, [r2, #4]
 800895c:	3a01      	subs	r2, #1
 800895e:	0112      	lsls	r2, r2, #4
 8008960:	4311      	orrs	r1, r2
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	6812      	ldr	r2, [r2, #0]
 8008966:	430a      	orrs	r2, r1
 8008968:	4926      	ldr	r1, [pc, #152]	@ (8008a04 <RCCEx_PLLSAI1_Config+0x1bc>)
 800896a:	4313      	orrs	r3, r2
 800896c:	610b      	str	r3, [r1, #16]
 800896e:	e017      	b.n	80089a0 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008970:	4b24      	ldr	r3, [pc, #144]	@ (8008a04 <RCCEx_PLLSAI1_Config+0x1bc>)
 8008972:	691a      	ldr	r2, [r3, #16]
 8008974:	4b26      	ldr	r3, [pc, #152]	@ (8008a10 <RCCEx_PLLSAI1_Config+0x1c8>)
 8008976:	4013      	ands	r3, r2
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	6892      	ldr	r2, [r2, #8]
 800897c:	0211      	lsls	r1, r2, #8
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	6952      	ldr	r2, [r2, #20]
 8008982:	0852      	lsrs	r2, r2, #1
 8008984:	3a01      	subs	r2, #1
 8008986:	0652      	lsls	r2, r2, #25
 8008988:	4311      	orrs	r1, r2
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	6852      	ldr	r2, [r2, #4]
 800898e:	3a01      	subs	r2, #1
 8008990:	0112      	lsls	r2, r2, #4
 8008992:	4311      	orrs	r1, r2
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	6812      	ldr	r2, [r2, #0]
 8008998:	430a      	orrs	r2, r1
 800899a:	491a      	ldr	r1, [pc, #104]	@ (8008a04 <RCCEx_PLLSAI1_Config+0x1bc>)
 800899c:	4313      	orrs	r3, r2
 800899e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80089a0:	4b18      	ldr	r3, [pc, #96]	@ (8008a04 <RCCEx_PLLSAI1_Config+0x1bc>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a17      	ldr	r2, [pc, #92]	@ (8008a04 <RCCEx_PLLSAI1_Config+0x1bc>)
 80089a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80089aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089ac:	f7fc f95a 	bl	8004c64 <HAL_GetTick>
 80089b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80089b2:	e00f      	b.n	80089d4 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80089b4:	f7fc f956 	bl	8004c64 <HAL_GetTick>
 80089b8:	4602      	mov	r2, r0
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d908      	bls.n	80089d4 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80089c2:	4b10      	ldr	r3, [pc, #64]	@ (8008a04 <RCCEx_PLLSAI1_Config+0x1bc>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d109      	bne.n	80089e2 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80089ce:	2303      	movs	r3, #3
 80089d0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80089d2:	e006      	b.n	80089e2 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80089d4:	4b0b      	ldr	r3, [pc, #44]	@ (8008a04 <RCCEx_PLLSAI1_Config+0x1bc>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d0e9      	beq.n	80089b4 <RCCEx_PLLSAI1_Config+0x16c>
 80089e0:	e000      	b.n	80089e4 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80089e2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d106      	bne.n	80089f8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80089ea:	4b06      	ldr	r3, [pc, #24]	@ (8008a04 <RCCEx_PLLSAI1_Config+0x1bc>)
 80089ec:	691a      	ldr	r2, [r3, #16]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	4904      	ldr	r1, [pc, #16]	@ (8008a04 <RCCEx_PLLSAI1_Config+0x1bc>)
 80089f4:	4313      	orrs	r3, r2
 80089f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	40021000 	.word	0x40021000
 8008a08:	07ff800c 	.word	0x07ff800c
 8008a0c:	ff9f800c 	.word	0xff9f800c
 8008a10:	f9ff800c 	.word	0xf9ff800c

08008a14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2b03      	cmp	r3, #3
 8008a28:	d018      	beq.n	8008a5c <RCCEx_PLLSAI2_Config+0x48>
 8008a2a:	2b03      	cmp	r3, #3
 8008a2c:	d81f      	bhi.n	8008a6e <RCCEx_PLLSAI2_Config+0x5a>
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d002      	beq.n	8008a38 <RCCEx_PLLSAI2_Config+0x24>
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d009      	beq.n	8008a4a <RCCEx_PLLSAI2_Config+0x36>
 8008a36:	e01a      	b.n	8008a6e <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008a38:	4b4a      	ldr	r3, [pc, #296]	@ (8008b64 <RCCEx_PLLSAI2_Config+0x150>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 0302 	and.w	r3, r3, #2
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d117      	bne.n	8008a74 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a48:	e014      	b.n	8008a74 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008a4a:	4b46      	ldr	r3, [pc, #280]	@ (8008b64 <RCCEx_PLLSAI2_Config+0x150>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d110      	bne.n	8008a78 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a5a:	e00d      	b.n	8008a78 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8008a5c:	4b41      	ldr	r3, [pc, #260]	@ (8008b64 <RCCEx_PLLSAI2_Config+0x150>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d109      	bne.n	8008a7c <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a6c:	e006      	b.n	8008a7c <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	73fb      	strb	r3, [r7, #15]
      break;
 8008a72:	e004      	b.n	8008a7e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8008a74:	bf00      	nop
 8008a76:	e002      	b.n	8008a7e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8008a78:	bf00      	nop
 8008a7a:	e000      	b.n	8008a7e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8008a7c:	bf00      	nop
  }

  if (status == HAL_OK)
 8008a7e:	7bfb      	ldrb	r3, [r7, #15]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d169      	bne.n	8008b58 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008a84:	4b37      	ldr	r3, [pc, #220]	@ (8008b64 <RCCEx_PLLSAI2_Config+0x150>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a36      	ldr	r2, [pc, #216]	@ (8008b64 <RCCEx_PLLSAI2_Config+0x150>)
 8008a8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a90:	f7fc f8e8 	bl	8004c64 <HAL_GetTick>
 8008a94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008a96:	e00f      	b.n	8008ab8 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008a98:	f7fc f8e4 	bl	8004c64 <HAL_GetTick>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	d908      	bls.n	8008ab8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8008b64 <RCCEx_PLLSAI2_Config+0x150>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d009      	beq.n	8008ac6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ab6:	e006      	b.n	8008ac6 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8008b64 <RCCEx_PLLSAI2_Config+0x150>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1e9      	bne.n	8008a98 <RCCEx_PLLSAI2_Config+0x84>
 8008ac4:	e000      	b.n	8008ac8 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8008ac6:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d144      	bne.n	8008b58 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d115      	bne.n	8008b00 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008ad4:	4b23      	ldr	r3, [pc, #140]	@ (8008b64 <RCCEx_PLLSAI2_Config+0x150>)
 8008ad6:	695a      	ldr	r2, [r3, #20]
 8008ad8:	4b23      	ldr	r3, [pc, #140]	@ (8008b68 <RCCEx_PLLSAI2_Config+0x154>)
 8008ada:	4013      	ands	r3, r2
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	6892      	ldr	r2, [r2, #8]
 8008ae0:	0211      	lsls	r1, r2, #8
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	68d2      	ldr	r2, [r2, #12]
 8008ae6:	06d2      	lsls	r2, r2, #27
 8008ae8:	4311      	orrs	r1, r2
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	6852      	ldr	r2, [r2, #4]
 8008aee:	3a01      	subs	r2, #1
 8008af0:	0112      	lsls	r2, r2, #4
 8008af2:	4311      	orrs	r1, r2
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	6812      	ldr	r2, [r2, #0]
 8008af8:	430a      	orrs	r2, r1
 8008afa:	491a      	ldr	r1, [pc, #104]	@ (8008b64 <RCCEx_PLLSAI2_Config+0x150>)
 8008afc:	4313      	orrs	r3, r2
 8008afe:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008b00:	4b18      	ldr	r3, [pc, #96]	@ (8008b64 <RCCEx_PLLSAI2_Config+0x150>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a17      	ldr	r2, [pc, #92]	@ (8008b64 <RCCEx_PLLSAI2_Config+0x150>)
 8008b06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b0c:	f7fc f8aa 	bl	8004c64 <HAL_GetTick>
 8008b10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008b12:	e00f      	b.n	8008b34 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008b14:	f7fc f8a6 	bl	8004c64 <HAL_GetTick>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d908      	bls.n	8008b34 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008b22:	4b10      	ldr	r3, [pc, #64]	@ (8008b64 <RCCEx_PLLSAI2_Config+0x150>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d109      	bne.n	8008b42 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8008b32:	e006      	b.n	8008b42 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008b34:	4b0b      	ldr	r3, [pc, #44]	@ (8008b64 <RCCEx_PLLSAI2_Config+0x150>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d0e9      	beq.n	8008b14 <RCCEx_PLLSAI2_Config+0x100>
 8008b40:	e000      	b.n	8008b44 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8008b42:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d106      	bne.n	8008b58 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8008b4a:	4b06      	ldr	r3, [pc, #24]	@ (8008b64 <RCCEx_PLLSAI2_Config+0x150>)
 8008b4c:	695a      	ldr	r2, [r3, #20]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	4904      	ldr	r1, [pc, #16]	@ (8008b64 <RCCEx_PLLSAI2_Config+0x150>)
 8008b54:	4313      	orrs	r3, r2
 8008b56:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	40021000 	.word	0x40021000
 8008b68:	07ff800c 	.word	0x07ff800c

08008b6c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d066      	beq.n	8008c4c <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d106      	bne.n	8008b98 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7fb fa12 	bl	8003fbc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2202      	movs	r2, #2
 8008b9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	f003 0310 	and.w	r3, r3, #16
 8008baa:	2b10      	cmp	r3, #16
 8008bac:	d045      	beq.n	8008c3a <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008bae:	4b2a      	ldr	r3, [pc, #168]	@ (8008c58 <HAL_RTC_Init+0xec>)
 8008bb0:	22ca      	movs	r2, #202	@ 0xca
 8008bb2:	625a      	str	r2, [r3, #36]	@ 0x24
 8008bb4:	4b28      	ldr	r3, [pc, #160]	@ (8008c58 <HAL_RTC_Init+0xec>)
 8008bb6:	2253      	movs	r2, #83	@ 0x53
 8008bb8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f872 	bl	8008ca4 <RTC_EnterInitMode>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d121      	bne.n	8008c0e <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008bca:	4b23      	ldr	r3, [pc, #140]	@ (8008c58 <HAL_RTC_Init+0xec>)
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	4a22      	ldr	r2, [pc, #136]	@ (8008c58 <HAL_RTC_Init+0xec>)
 8008bd0:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8008bd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bd8:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008bda:	4b1f      	ldr	r3, [pc, #124]	@ (8008c58 <HAL_RTC_Init+0xec>)
 8008bdc:	699a      	ldr	r2, [r3, #24]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6859      	ldr	r1, [r3, #4]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	4319      	orrs	r1, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	430b      	orrs	r3, r1
 8008bee:	491a      	ldr	r1, [pc, #104]	@ (8008c58 <HAL_RTC_Init+0xec>)
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	68da      	ldr	r2, [r3, #12]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	041b      	lsls	r3, r3, #16
 8008bfe:	4916      	ldr	r1, [pc, #88]	@ (8008c58 <HAL_RTC_Init+0xec>)
 8008c00:	4313      	orrs	r3, r2
 8008c02:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 f881 	bl	8008d0c <RTC_ExitInitMode>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10e      	bne.n	8008c32 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8008c14:	4b10      	ldr	r3, [pc, #64]	@ (8008c58 <HAL_RTC_Init+0xec>)
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a19      	ldr	r1, [r3, #32]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	69db      	ldr	r3, [r3, #28]
 8008c24:	4319      	orrs	r1, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	695b      	ldr	r3, [r3, #20]
 8008c2a:	430b      	orrs	r3, r1
 8008c2c:	490a      	ldr	r1, [pc, #40]	@ (8008c58 <HAL_RTC_Init+0xec>)
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c32:	4b09      	ldr	r3, [pc, #36]	@ (8008c58 <HAL_RTC_Init+0xec>)
 8008c34:	22ff      	movs	r2, #255	@ 0xff
 8008c36:	625a      	str	r2, [r3, #36]	@ 0x24
 8008c38:	e001      	b.n	8008c3e <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d103      	bne.n	8008c4c <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	40002800 	.word	0x40002800

08008c5c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8008c64:	4b0d      	ldr	r3, [pc, #52]	@ (8008c9c <HAL_RTC_WaitForSynchro+0x40>)
 8008c66:	4a0e      	ldr	r2, [pc, #56]	@ (8008ca0 <HAL_RTC_WaitForSynchro+0x44>)
 8008c68:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008c6a:	f7fb fffb 	bl	8004c64 <HAL_GetTick>
 8008c6e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008c70:	e009      	b.n	8008c86 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c72:	f7fb fff7 	bl	8004c64 <HAL_GetTick>
 8008c76:	4602      	mov	r2, r0
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	1ad3      	subs	r3, r2, r3
 8008c7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008c80:	d901      	bls.n	8008c86 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	e006      	b.n	8008c94 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008c86:	4b05      	ldr	r3, [pc, #20]	@ (8008c9c <HAL_RTC_WaitForSynchro+0x40>)
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	f003 0320 	and.w	r3, r3, #32
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d0ef      	beq.n	8008c72 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	40002800 	.word	0x40002800
 8008ca0:	0001005c 	.word	0x0001005c

08008ca4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008cac:	2300      	movs	r3, #0
 8008cae:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008cb0:	4b15      	ldr	r3, [pc, #84]	@ (8008d08 <RTC_EnterInitMode+0x64>)
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d120      	bne.n	8008cfe <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008cbc:	4b12      	ldr	r3, [pc, #72]	@ (8008d08 <RTC_EnterInitMode+0x64>)
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	4a11      	ldr	r2, [pc, #68]	@ (8008d08 <RTC_EnterInitMode+0x64>)
 8008cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cc6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8008cc8:	f7fb ffcc 	bl	8004c64 <HAL_GetTick>
 8008ccc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008cce:	e00d      	b.n	8008cec <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008cd0:	f7fb ffc8 	bl	8004c64 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008cde:	d905      	bls.n	8008cec <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2203      	movs	r2, #3
 8008ce8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008cec:	4b06      	ldr	r3, [pc, #24]	@ (8008d08 <RTC_EnterInitMode+0x64>)
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d102      	bne.n	8008cfe <RTC_EnterInitMode+0x5a>
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
 8008cfa:	2b03      	cmp	r3, #3
 8008cfc:	d1e8      	bne.n	8008cd0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8008cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	40002800 	.word	0x40002800

08008d0c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008d18:	4b1a      	ldr	r3, [pc, #104]	@ (8008d84 <RTC_ExitInitMode+0x78>)
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	4a19      	ldr	r2, [pc, #100]	@ (8008d84 <RTC_ExitInitMode+0x78>)
 8008d1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d22:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008d24:	4b17      	ldr	r3, [pc, #92]	@ (8008d84 <RTC_ExitInitMode+0x78>)
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	f003 0320 	and.w	r3, r3, #32
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d10c      	bne.n	8008d4a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f7ff ff93 	bl	8008c5c <HAL_RTC_WaitForSynchro>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d01e      	beq.n	8008d7a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2203      	movs	r2, #3
 8008d40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8008d44:	2303      	movs	r3, #3
 8008d46:	73fb      	strb	r3, [r7, #15]
 8008d48:	e017      	b.n	8008d7a <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8008d84 <RTC_ExitInitMode+0x78>)
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	4a0d      	ldr	r2, [pc, #52]	@ (8008d84 <RTC_ExitInitMode+0x78>)
 8008d50:	f023 0320 	bic.w	r3, r3, #32
 8008d54:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7ff ff80 	bl	8008c5c <HAL_RTC_WaitForSynchro>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d005      	beq.n	8008d6e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2203      	movs	r2, #3
 8008d66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008d6e:	4b05      	ldr	r3, [pc, #20]	@ (8008d84 <RTC_ExitInitMode+0x78>)
 8008d70:	699b      	ldr	r3, [r3, #24]
 8008d72:	4a04      	ldr	r2, [pc, #16]	@ (8008d84 <RTC_ExitInitMode+0x78>)
 8008d74:	f043 0320 	orr.w	r3, r3, #32
 8008d78:	6193      	str	r3, [r2, #24]
  }

  return status;
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3710      	adds	r7, #16
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	40002800 	.word	0x40002800

08008d88 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	490f      	ldr	r1, [pc, #60]	@ (8008dd8 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	689a      	ldr	r2, [r3, #8]
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	490c      	ldr	r1, [pc, #48]	@ (8008ddc <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8008daa:	4313      	orrs	r3, r2
 8008dac:	624b      	str	r3, [r1, #36]	@ 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8008dae:	4b0b      	ldr	r3, [pc, #44]	@ (8008ddc <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8008db0:	6a1b      	ldr	r3, [r3, #32]
 8008db2:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	6919      	ldr	r1, [r3, #16]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	041b      	lsls	r3, r3, #16
 8008dc0:	430b      	orrs	r3, r1
 8008dc2:	4906      	ldr	r1, [pc, #24]	@ (8008ddc <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	370c      	adds	r7, #12
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	40002800 	.word	0x40002800
 8008ddc:	40003400 	.word	0x40003400

08008de0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e042      	b.n	8008e78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d106      	bne.n	8008e0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f7fb f879 	bl	8003efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2224      	movs	r2, #36	@ 0x24
 8008e0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f022 0201 	bic.w	r2, r2, #1
 8008e20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d002      	beq.n	8008e30 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fb28 	bl	8009480 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 f825 	bl	8008e80 <UART_SetConfig>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d101      	bne.n	8008e40 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e01b      	b.n	8008e78 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008e4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	689a      	ldr	r2, [r3, #8]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008e5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f042 0201 	orr.w	r2, r2, #1
 8008e6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fba7 	bl	80095c4 <UART_CheckIdleState>
 8008e76:	4603      	mov	r3, r0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e84:	b08c      	sub	sp, #48	@ 0x30
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	689a      	ldr	r2, [r3, #8]
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	431a      	orrs	r2, r3
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	695b      	ldr	r3, [r3, #20]
 8008e9e:	431a      	orrs	r2, r3
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	69db      	ldr	r3, [r3, #28]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	4baa      	ldr	r3, [pc, #680]	@ (8009158 <UART_SetConfig+0x2d8>)
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	6812      	ldr	r2, [r2, #0]
 8008eb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008eb8:	430b      	orrs	r3, r1
 8008eba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	68da      	ldr	r2, [r3, #12]
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	430a      	orrs	r2, r1
 8008ed0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	699b      	ldr	r3, [r3, #24]
 8008ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a9f      	ldr	r2, [pc, #636]	@ (800915c <UART_SetConfig+0x2dc>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d004      	beq.n	8008eec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	6a1b      	ldr	r3, [r3, #32]
 8008ee6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008ef6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008efa:	697a      	ldr	r2, [r7, #20]
 8008efc:	6812      	ldr	r2, [r2, #0]
 8008efe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f00:	430b      	orrs	r3, r1
 8008f02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f0a:	f023 010f 	bic.w	r1, r3, #15
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	430a      	orrs	r2, r1
 8008f18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a90      	ldr	r2, [pc, #576]	@ (8009160 <UART_SetConfig+0x2e0>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d125      	bne.n	8008f70 <UART_SetConfig+0xf0>
 8008f24:	4b8f      	ldr	r3, [pc, #572]	@ (8009164 <UART_SetConfig+0x2e4>)
 8008f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f2a:	f003 0303 	and.w	r3, r3, #3
 8008f2e:	2b03      	cmp	r3, #3
 8008f30:	d81a      	bhi.n	8008f68 <UART_SetConfig+0xe8>
 8008f32:	a201      	add	r2, pc, #4	@ (adr r2, 8008f38 <UART_SetConfig+0xb8>)
 8008f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f38:	08008f49 	.word	0x08008f49
 8008f3c:	08008f59 	.word	0x08008f59
 8008f40:	08008f51 	.word	0x08008f51
 8008f44:	08008f61 	.word	0x08008f61
 8008f48:	2301      	movs	r3, #1
 8008f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f4e:	e116      	b.n	800917e <UART_SetConfig+0x2fe>
 8008f50:	2302      	movs	r3, #2
 8008f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f56:	e112      	b.n	800917e <UART_SetConfig+0x2fe>
 8008f58:	2304      	movs	r3, #4
 8008f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f5e:	e10e      	b.n	800917e <UART_SetConfig+0x2fe>
 8008f60:	2308      	movs	r3, #8
 8008f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f66:	e10a      	b.n	800917e <UART_SetConfig+0x2fe>
 8008f68:	2310      	movs	r3, #16
 8008f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f6e:	e106      	b.n	800917e <UART_SetConfig+0x2fe>
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a7c      	ldr	r2, [pc, #496]	@ (8009168 <UART_SetConfig+0x2e8>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d138      	bne.n	8008fec <UART_SetConfig+0x16c>
 8008f7a:	4b7a      	ldr	r3, [pc, #488]	@ (8009164 <UART_SetConfig+0x2e4>)
 8008f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f80:	f003 030c 	and.w	r3, r3, #12
 8008f84:	2b0c      	cmp	r3, #12
 8008f86:	d82d      	bhi.n	8008fe4 <UART_SetConfig+0x164>
 8008f88:	a201      	add	r2, pc, #4	@ (adr r2, 8008f90 <UART_SetConfig+0x110>)
 8008f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8e:	bf00      	nop
 8008f90:	08008fc5 	.word	0x08008fc5
 8008f94:	08008fe5 	.word	0x08008fe5
 8008f98:	08008fe5 	.word	0x08008fe5
 8008f9c:	08008fe5 	.word	0x08008fe5
 8008fa0:	08008fd5 	.word	0x08008fd5
 8008fa4:	08008fe5 	.word	0x08008fe5
 8008fa8:	08008fe5 	.word	0x08008fe5
 8008fac:	08008fe5 	.word	0x08008fe5
 8008fb0:	08008fcd 	.word	0x08008fcd
 8008fb4:	08008fe5 	.word	0x08008fe5
 8008fb8:	08008fe5 	.word	0x08008fe5
 8008fbc:	08008fe5 	.word	0x08008fe5
 8008fc0:	08008fdd 	.word	0x08008fdd
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fca:	e0d8      	b.n	800917e <UART_SetConfig+0x2fe>
 8008fcc:	2302      	movs	r3, #2
 8008fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fd2:	e0d4      	b.n	800917e <UART_SetConfig+0x2fe>
 8008fd4:	2304      	movs	r3, #4
 8008fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fda:	e0d0      	b.n	800917e <UART_SetConfig+0x2fe>
 8008fdc:	2308      	movs	r3, #8
 8008fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fe2:	e0cc      	b.n	800917e <UART_SetConfig+0x2fe>
 8008fe4:	2310      	movs	r3, #16
 8008fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fea:	e0c8      	b.n	800917e <UART_SetConfig+0x2fe>
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a5e      	ldr	r2, [pc, #376]	@ (800916c <UART_SetConfig+0x2ec>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d125      	bne.n	8009042 <UART_SetConfig+0x1c2>
 8008ff6:	4b5b      	ldr	r3, [pc, #364]	@ (8009164 <UART_SetConfig+0x2e4>)
 8008ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ffc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009000:	2b30      	cmp	r3, #48	@ 0x30
 8009002:	d016      	beq.n	8009032 <UART_SetConfig+0x1b2>
 8009004:	2b30      	cmp	r3, #48	@ 0x30
 8009006:	d818      	bhi.n	800903a <UART_SetConfig+0x1ba>
 8009008:	2b20      	cmp	r3, #32
 800900a:	d00a      	beq.n	8009022 <UART_SetConfig+0x1a2>
 800900c:	2b20      	cmp	r3, #32
 800900e:	d814      	bhi.n	800903a <UART_SetConfig+0x1ba>
 8009010:	2b00      	cmp	r3, #0
 8009012:	d002      	beq.n	800901a <UART_SetConfig+0x19a>
 8009014:	2b10      	cmp	r3, #16
 8009016:	d008      	beq.n	800902a <UART_SetConfig+0x1aa>
 8009018:	e00f      	b.n	800903a <UART_SetConfig+0x1ba>
 800901a:	2300      	movs	r3, #0
 800901c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009020:	e0ad      	b.n	800917e <UART_SetConfig+0x2fe>
 8009022:	2302      	movs	r3, #2
 8009024:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009028:	e0a9      	b.n	800917e <UART_SetConfig+0x2fe>
 800902a:	2304      	movs	r3, #4
 800902c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009030:	e0a5      	b.n	800917e <UART_SetConfig+0x2fe>
 8009032:	2308      	movs	r3, #8
 8009034:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009038:	e0a1      	b.n	800917e <UART_SetConfig+0x2fe>
 800903a:	2310      	movs	r3, #16
 800903c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009040:	e09d      	b.n	800917e <UART_SetConfig+0x2fe>
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a4a      	ldr	r2, [pc, #296]	@ (8009170 <UART_SetConfig+0x2f0>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d125      	bne.n	8009098 <UART_SetConfig+0x218>
 800904c:	4b45      	ldr	r3, [pc, #276]	@ (8009164 <UART_SetConfig+0x2e4>)
 800904e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009052:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009056:	2bc0      	cmp	r3, #192	@ 0xc0
 8009058:	d016      	beq.n	8009088 <UART_SetConfig+0x208>
 800905a:	2bc0      	cmp	r3, #192	@ 0xc0
 800905c:	d818      	bhi.n	8009090 <UART_SetConfig+0x210>
 800905e:	2b80      	cmp	r3, #128	@ 0x80
 8009060:	d00a      	beq.n	8009078 <UART_SetConfig+0x1f8>
 8009062:	2b80      	cmp	r3, #128	@ 0x80
 8009064:	d814      	bhi.n	8009090 <UART_SetConfig+0x210>
 8009066:	2b00      	cmp	r3, #0
 8009068:	d002      	beq.n	8009070 <UART_SetConfig+0x1f0>
 800906a:	2b40      	cmp	r3, #64	@ 0x40
 800906c:	d008      	beq.n	8009080 <UART_SetConfig+0x200>
 800906e:	e00f      	b.n	8009090 <UART_SetConfig+0x210>
 8009070:	2300      	movs	r3, #0
 8009072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009076:	e082      	b.n	800917e <UART_SetConfig+0x2fe>
 8009078:	2302      	movs	r3, #2
 800907a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800907e:	e07e      	b.n	800917e <UART_SetConfig+0x2fe>
 8009080:	2304      	movs	r3, #4
 8009082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009086:	e07a      	b.n	800917e <UART_SetConfig+0x2fe>
 8009088:	2308      	movs	r3, #8
 800908a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800908e:	e076      	b.n	800917e <UART_SetConfig+0x2fe>
 8009090:	2310      	movs	r3, #16
 8009092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009096:	e072      	b.n	800917e <UART_SetConfig+0x2fe>
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a35      	ldr	r2, [pc, #212]	@ (8009174 <UART_SetConfig+0x2f4>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d12a      	bne.n	80090f8 <UART_SetConfig+0x278>
 80090a2:	4b30      	ldr	r3, [pc, #192]	@ (8009164 <UART_SetConfig+0x2e4>)
 80090a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090b0:	d01a      	beq.n	80090e8 <UART_SetConfig+0x268>
 80090b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090b6:	d81b      	bhi.n	80090f0 <UART_SetConfig+0x270>
 80090b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090bc:	d00c      	beq.n	80090d8 <UART_SetConfig+0x258>
 80090be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090c2:	d815      	bhi.n	80090f0 <UART_SetConfig+0x270>
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d003      	beq.n	80090d0 <UART_SetConfig+0x250>
 80090c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090cc:	d008      	beq.n	80090e0 <UART_SetConfig+0x260>
 80090ce:	e00f      	b.n	80090f0 <UART_SetConfig+0x270>
 80090d0:	2300      	movs	r3, #0
 80090d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090d6:	e052      	b.n	800917e <UART_SetConfig+0x2fe>
 80090d8:	2302      	movs	r3, #2
 80090da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090de:	e04e      	b.n	800917e <UART_SetConfig+0x2fe>
 80090e0:	2304      	movs	r3, #4
 80090e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090e6:	e04a      	b.n	800917e <UART_SetConfig+0x2fe>
 80090e8:	2308      	movs	r3, #8
 80090ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090ee:	e046      	b.n	800917e <UART_SetConfig+0x2fe>
 80090f0:	2310      	movs	r3, #16
 80090f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090f6:	e042      	b.n	800917e <UART_SetConfig+0x2fe>
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a17      	ldr	r2, [pc, #92]	@ (800915c <UART_SetConfig+0x2dc>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d13a      	bne.n	8009178 <UART_SetConfig+0x2f8>
 8009102:	4b18      	ldr	r3, [pc, #96]	@ (8009164 <UART_SetConfig+0x2e4>)
 8009104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009108:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800910c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009110:	d01a      	beq.n	8009148 <UART_SetConfig+0x2c8>
 8009112:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009116:	d81b      	bhi.n	8009150 <UART_SetConfig+0x2d0>
 8009118:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800911c:	d00c      	beq.n	8009138 <UART_SetConfig+0x2b8>
 800911e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009122:	d815      	bhi.n	8009150 <UART_SetConfig+0x2d0>
 8009124:	2b00      	cmp	r3, #0
 8009126:	d003      	beq.n	8009130 <UART_SetConfig+0x2b0>
 8009128:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800912c:	d008      	beq.n	8009140 <UART_SetConfig+0x2c0>
 800912e:	e00f      	b.n	8009150 <UART_SetConfig+0x2d0>
 8009130:	2300      	movs	r3, #0
 8009132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009136:	e022      	b.n	800917e <UART_SetConfig+0x2fe>
 8009138:	2302      	movs	r3, #2
 800913a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800913e:	e01e      	b.n	800917e <UART_SetConfig+0x2fe>
 8009140:	2304      	movs	r3, #4
 8009142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009146:	e01a      	b.n	800917e <UART_SetConfig+0x2fe>
 8009148:	2308      	movs	r3, #8
 800914a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800914e:	e016      	b.n	800917e <UART_SetConfig+0x2fe>
 8009150:	2310      	movs	r3, #16
 8009152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009156:	e012      	b.n	800917e <UART_SetConfig+0x2fe>
 8009158:	cfff69f3 	.word	0xcfff69f3
 800915c:	40008000 	.word	0x40008000
 8009160:	40013800 	.word	0x40013800
 8009164:	40021000 	.word	0x40021000
 8009168:	40004400 	.word	0x40004400
 800916c:	40004800 	.word	0x40004800
 8009170:	40004c00 	.word	0x40004c00
 8009174:	40005000 	.word	0x40005000
 8009178:	2310      	movs	r3, #16
 800917a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4ab0      	ldr	r2, [pc, #704]	@ (8009444 <UART_SetConfig+0x5c4>)
 8009184:	4293      	cmp	r3, r2
 8009186:	f040 809b 	bne.w	80092c0 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800918a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800918e:	2b08      	cmp	r3, #8
 8009190:	d827      	bhi.n	80091e2 <UART_SetConfig+0x362>
 8009192:	a201      	add	r2, pc, #4	@ (adr r2, 8009198 <UART_SetConfig+0x318>)
 8009194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009198:	080091bd 	.word	0x080091bd
 800919c:	080091c5 	.word	0x080091c5
 80091a0:	080091cd 	.word	0x080091cd
 80091a4:	080091e3 	.word	0x080091e3
 80091a8:	080091d3 	.word	0x080091d3
 80091ac:	080091e3 	.word	0x080091e3
 80091b0:	080091e3 	.word	0x080091e3
 80091b4:	080091e3 	.word	0x080091e3
 80091b8:	080091db 	.word	0x080091db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091bc:	f7fe fec6 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 80091c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091c2:	e014      	b.n	80091ee <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091c4:	f7fe fed6 	bl	8007f74 <HAL_RCC_GetPCLK2Freq>
 80091c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091ca:	e010      	b.n	80091ee <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091cc:	4b9e      	ldr	r3, [pc, #632]	@ (8009448 <UART_SetConfig+0x5c8>)
 80091ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091d0:	e00d      	b.n	80091ee <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091d2:	f7fe fe09 	bl	8007de8 <HAL_RCC_GetSysClockFreq>
 80091d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091d8:	e009      	b.n	80091ee <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091e0:	e005      	b.n	80091ee <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 80091e2:	2300      	movs	r3, #0
 80091e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80091ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80091ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f000 8130 	beq.w	8009456 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091fa:	4a94      	ldr	r2, [pc, #592]	@ (800944c <UART_SetConfig+0x5cc>)
 80091fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009200:	461a      	mov	r2, r3
 8009202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009204:	fbb3 f3f2 	udiv	r3, r3, r2
 8009208:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	685a      	ldr	r2, [r3, #4]
 800920e:	4613      	mov	r3, r2
 8009210:	005b      	lsls	r3, r3, #1
 8009212:	4413      	add	r3, r2
 8009214:	69ba      	ldr	r2, [r7, #24]
 8009216:	429a      	cmp	r2, r3
 8009218:	d305      	bcc.n	8009226 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009220:	69ba      	ldr	r2, [r7, #24]
 8009222:	429a      	cmp	r2, r3
 8009224:	d903      	bls.n	800922e <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800922c:	e113      	b.n	8009456 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800922e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009230:	2200      	movs	r2, #0
 8009232:	60bb      	str	r3, [r7, #8]
 8009234:	60fa      	str	r2, [r7, #12]
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800923a:	4a84      	ldr	r2, [pc, #528]	@ (800944c <UART_SetConfig+0x5cc>)
 800923c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009240:	b29b      	uxth	r3, r3
 8009242:	2200      	movs	r2, #0
 8009244:	603b      	str	r3, [r7, #0]
 8009246:	607a      	str	r2, [r7, #4]
 8009248:	e9d7 2300 	ldrd	r2, r3, [r7]
 800924c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009250:	f7f7 fc8e 	bl	8000b70 <__aeabi_uldivmod>
 8009254:	4602      	mov	r2, r0
 8009256:	460b      	mov	r3, r1
 8009258:	4610      	mov	r0, r2
 800925a:	4619      	mov	r1, r3
 800925c:	f04f 0200 	mov.w	r2, #0
 8009260:	f04f 0300 	mov.w	r3, #0
 8009264:	020b      	lsls	r3, r1, #8
 8009266:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800926a:	0202      	lsls	r2, r0, #8
 800926c:	6979      	ldr	r1, [r7, #20]
 800926e:	6849      	ldr	r1, [r1, #4]
 8009270:	0849      	lsrs	r1, r1, #1
 8009272:	2000      	movs	r0, #0
 8009274:	460c      	mov	r4, r1
 8009276:	4605      	mov	r5, r0
 8009278:	eb12 0804 	adds.w	r8, r2, r4
 800927c:	eb43 0905 	adc.w	r9, r3, r5
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	469a      	mov	sl, r3
 8009288:	4693      	mov	fp, r2
 800928a:	4652      	mov	r2, sl
 800928c:	465b      	mov	r3, fp
 800928e:	4640      	mov	r0, r8
 8009290:	4649      	mov	r1, r9
 8009292:	f7f7 fc6d 	bl	8000b70 <__aeabi_uldivmod>
 8009296:	4602      	mov	r2, r0
 8009298:	460b      	mov	r3, r1
 800929a:	4613      	mov	r3, r2
 800929c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800929e:	6a3b      	ldr	r3, [r7, #32]
 80092a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092a4:	d308      	bcc.n	80092b8 <UART_SetConfig+0x438>
 80092a6:	6a3b      	ldr	r3, [r7, #32]
 80092a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092ac:	d204      	bcs.n	80092b8 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	6a3a      	ldr	r2, [r7, #32]
 80092b4:	60da      	str	r2, [r3, #12]
 80092b6:	e0ce      	b.n	8009456 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80092be:	e0ca      	b.n	8009456 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	69db      	ldr	r3, [r3, #28]
 80092c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092c8:	d166      	bne.n	8009398 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 80092ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80092ce:	2b08      	cmp	r3, #8
 80092d0:	d827      	bhi.n	8009322 <UART_SetConfig+0x4a2>
 80092d2:	a201      	add	r2, pc, #4	@ (adr r2, 80092d8 <UART_SetConfig+0x458>)
 80092d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d8:	080092fd 	.word	0x080092fd
 80092dc:	08009305 	.word	0x08009305
 80092e0:	0800930d 	.word	0x0800930d
 80092e4:	08009323 	.word	0x08009323
 80092e8:	08009313 	.word	0x08009313
 80092ec:	08009323 	.word	0x08009323
 80092f0:	08009323 	.word	0x08009323
 80092f4:	08009323 	.word	0x08009323
 80092f8:	0800931b 	.word	0x0800931b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092fc:	f7fe fe26 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 8009300:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009302:	e014      	b.n	800932e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009304:	f7fe fe36 	bl	8007f74 <HAL_RCC_GetPCLK2Freq>
 8009308:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800930a:	e010      	b.n	800932e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800930c:	4b4e      	ldr	r3, [pc, #312]	@ (8009448 <UART_SetConfig+0x5c8>)
 800930e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009310:	e00d      	b.n	800932e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009312:	f7fe fd69 	bl	8007de8 <HAL_RCC_GetSysClockFreq>
 8009316:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009318:	e009      	b.n	800932e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800931a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800931e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009320:	e005      	b.n	800932e <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8009322:	2300      	movs	r3, #0
 8009324:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800932c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800932e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 8090 	beq.w	8009456 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800933a:	4a44      	ldr	r2, [pc, #272]	@ (800944c <UART_SetConfig+0x5cc>)
 800933c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009340:	461a      	mov	r2, r3
 8009342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009344:	fbb3 f3f2 	udiv	r3, r3, r2
 8009348:	005a      	lsls	r2, r3, #1
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	085b      	lsrs	r3, r3, #1
 8009350:	441a      	add	r2, r3
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	fbb2 f3f3 	udiv	r3, r2, r3
 800935a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800935c:	6a3b      	ldr	r3, [r7, #32]
 800935e:	2b0f      	cmp	r3, #15
 8009360:	d916      	bls.n	8009390 <UART_SetConfig+0x510>
 8009362:	6a3b      	ldr	r3, [r7, #32]
 8009364:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009368:	d212      	bcs.n	8009390 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800936a:	6a3b      	ldr	r3, [r7, #32]
 800936c:	b29b      	uxth	r3, r3
 800936e:	f023 030f 	bic.w	r3, r3, #15
 8009372:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009374:	6a3b      	ldr	r3, [r7, #32]
 8009376:	085b      	lsrs	r3, r3, #1
 8009378:	b29b      	uxth	r3, r3
 800937a:	f003 0307 	and.w	r3, r3, #7
 800937e:	b29a      	uxth	r2, r3
 8009380:	8bfb      	ldrh	r3, [r7, #30]
 8009382:	4313      	orrs	r3, r2
 8009384:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	8bfa      	ldrh	r2, [r7, #30]
 800938c:	60da      	str	r2, [r3, #12]
 800938e:	e062      	b.n	8009456 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009396:	e05e      	b.n	8009456 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009398:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800939c:	2b08      	cmp	r3, #8
 800939e:	d828      	bhi.n	80093f2 <UART_SetConfig+0x572>
 80093a0:	a201      	add	r2, pc, #4	@ (adr r2, 80093a8 <UART_SetConfig+0x528>)
 80093a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a6:	bf00      	nop
 80093a8:	080093cd 	.word	0x080093cd
 80093ac:	080093d5 	.word	0x080093d5
 80093b0:	080093dd 	.word	0x080093dd
 80093b4:	080093f3 	.word	0x080093f3
 80093b8:	080093e3 	.word	0x080093e3
 80093bc:	080093f3 	.word	0x080093f3
 80093c0:	080093f3 	.word	0x080093f3
 80093c4:	080093f3 	.word	0x080093f3
 80093c8:	080093eb 	.word	0x080093eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093cc:	f7fe fdbe 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 80093d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093d2:	e014      	b.n	80093fe <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093d4:	f7fe fdce 	bl	8007f74 <HAL_RCC_GetPCLK2Freq>
 80093d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093da:	e010      	b.n	80093fe <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093dc:	4b1a      	ldr	r3, [pc, #104]	@ (8009448 <UART_SetConfig+0x5c8>)
 80093de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80093e0:	e00d      	b.n	80093fe <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093e2:	f7fe fd01 	bl	8007de8 <HAL_RCC_GetSysClockFreq>
 80093e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093e8:	e009      	b.n	80093fe <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80093f0:	e005      	b.n	80093fe <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 80093f2:	2300      	movs	r3, #0
 80093f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80093fc:	bf00      	nop
    }

    if (pclk != 0U)
 80093fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009400:	2b00      	cmp	r3, #0
 8009402:	d028      	beq.n	8009456 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009408:	4a10      	ldr	r2, [pc, #64]	@ (800944c <UART_SetConfig+0x5cc>)
 800940a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800940e:	461a      	mov	r2, r3
 8009410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009412:	fbb3 f2f2 	udiv	r2, r3, r2
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	085b      	lsrs	r3, r3, #1
 800941c:	441a      	add	r2, r3
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	fbb2 f3f3 	udiv	r3, r2, r3
 8009426:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009428:	6a3b      	ldr	r3, [r7, #32]
 800942a:	2b0f      	cmp	r3, #15
 800942c:	d910      	bls.n	8009450 <UART_SetConfig+0x5d0>
 800942e:	6a3b      	ldr	r3, [r7, #32]
 8009430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009434:	d20c      	bcs.n	8009450 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009436:	6a3b      	ldr	r3, [r7, #32]
 8009438:	b29a      	uxth	r2, r3
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	60da      	str	r2, [r3, #12]
 8009440:	e009      	b.n	8009456 <UART_SetConfig+0x5d6>
 8009442:	bf00      	nop
 8009444:	40008000 	.word	0x40008000
 8009448:	00f42400 	.word	0x00f42400
 800944c:	0800cb44 	.word	0x0800cb44
      }
      else
      {
        ret = HAL_ERROR;
 8009450:	2301      	movs	r3, #1
 8009452:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	2201      	movs	r2, #1
 800945a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	2201      	movs	r2, #1
 8009462:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	2200      	movs	r2, #0
 800946a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	2200      	movs	r2, #0
 8009470:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009472:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009476:	4618      	mov	r0, r3
 8009478:	3730      	adds	r7, #48	@ 0x30
 800947a:	46bd      	mov	sp, r7
 800947c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009480 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800948c:	f003 0308 	and.w	r3, r3, #8
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00a      	beq.n	80094aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	430a      	orrs	r2, r1
 80094a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ae:	f003 0301 	and.w	r3, r3, #1
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00a      	beq.n	80094cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	430a      	orrs	r2, r1
 80094ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094d0:	f003 0302 	and.w	r3, r3, #2
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00a      	beq.n	80094ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	430a      	orrs	r2, r1
 80094ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f2:	f003 0304 	and.w	r3, r3, #4
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00a      	beq.n	8009510 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	430a      	orrs	r2, r1
 800950e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009514:	f003 0310 	and.w	r3, r3, #16
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00a      	beq.n	8009532 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	430a      	orrs	r2, r1
 8009530:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009536:	f003 0320 	and.w	r3, r3, #32
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00a      	beq.n	8009554 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	430a      	orrs	r2, r1
 8009552:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800955c:	2b00      	cmp	r3, #0
 800955e:	d01a      	beq.n	8009596 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	430a      	orrs	r2, r1
 8009574:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800957a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800957e:	d10a      	bne.n	8009596 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	430a      	orrs	r2, r1
 8009594:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800959a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00a      	beq.n	80095b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	430a      	orrs	r2, r1
 80095b6:	605a      	str	r2, [r3, #4]
  }
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b098      	sub	sp, #96	@ 0x60
 80095c8:	af02      	add	r7, sp, #8
 80095ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80095d4:	f7fb fb46 	bl	8004c64 <HAL_GetTick>
 80095d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f003 0308 	and.w	r3, r3, #8
 80095e4:	2b08      	cmp	r3, #8
 80095e6:	d12f      	bne.n	8009648 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095f0:	2200      	movs	r2, #0
 80095f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f88e 	bl	8009718 <UART_WaitOnFlagUntilTimeout>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d022      	beq.n	8009648 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800960a:	e853 3f00 	ldrex	r3, [r3]
 800960e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009612:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009616:	653b      	str	r3, [r7, #80]	@ 0x50
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	461a      	mov	r2, r3
 800961e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009620:	647b      	str	r3, [r7, #68]	@ 0x44
 8009622:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009624:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009626:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009628:	e841 2300 	strex	r3, r2, [r1]
 800962c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800962e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1e6      	bne.n	8009602 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2220      	movs	r2, #32
 8009638:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009644:	2303      	movs	r3, #3
 8009646:	e063      	b.n	8009710 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 0304 	and.w	r3, r3, #4
 8009652:	2b04      	cmp	r3, #4
 8009654:	d149      	bne.n	80096ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009656:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800965a:	9300      	str	r3, [sp, #0]
 800965c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800965e:	2200      	movs	r2, #0
 8009660:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 f857 	bl	8009718 <UART_WaitOnFlagUntilTimeout>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d03c      	beq.n	80096ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009678:	e853 3f00 	ldrex	r3, [r3]
 800967c:	623b      	str	r3, [r7, #32]
   return(result);
 800967e:	6a3b      	ldr	r3, [r7, #32]
 8009680:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009684:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	461a      	mov	r2, r3
 800968c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800968e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009690:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009692:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009696:	e841 2300 	strex	r3, r2, [r1]
 800969a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800969c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1e6      	bne.n	8009670 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	3308      	adds	r3, #8
 80096a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	e853 3f00 	ldrex	r3, [r3]
 80096b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f023 0301 	bic.w	r3, r3, #1
 80096b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	3308      	adds	r3, #8
 80096c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096c2:	61fa      	str	r2, [r7, #28]
 80096c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c6:	69b9      	ldr	r1, [r7, #24]
 80096c8:	69fa      	ldr	r2, [r7, #28]
 80096ca:	e841 2300 	strex	r3, r2, [r1]
 80096ce:	617b      	str	r3, [r7, #20]
   return(result);
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1e5      	bne.n	80096a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2220      	movs	r2, #32
 80096da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2200      	movs	r2, #0
 80096e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096e6:	2303      	movs	r3, #3
 80096e8:	e012      	b.n	8009710 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2220      	movs	r2, #32
 80096ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2220      	movs	r2, #32
 80096f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	3758      	adds	r7, #88	@ 0x58
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	603b      	str	r3, [r7, #0]
 8009724:	4613      	mov	r3, r2
 8009726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009728:	e04f      	b.n	80097ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009730:	d04b      	beq.n	80097ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009732:	f7fb fa97 	bl	8004c64 <HAL_GetTick>
 8009736:	4602      	mov	r2, r0
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	69ba      	ldr	r2, [r7, #24]
 800973e:	429a      	cmp	r2, r3
 8009740:	d302      	bcc.n	8009748 <UART_WaitOnFlagUntilTimeout+0x30>
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009748:	2303      	movs	r3, #3
 800974a:	e04e      	b.n	80097ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f003 0304 	and.w	r3, r3, #4
 8009756:	2b00      	cmp	r3, #0
 8009758:	d037      	beq.n	80097ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	2b80      	cmp	r3, #128	@ 0x80
 800975e:	d034      	beq.n	80097ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	2b40      	cmp	r3, #64	@ 0x40
 8009764:	d031      	beq.n	80097ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	69db      	ldr	r3, [r3, #28]
 800976c:	f003 0308 	and.w	r3, r3, #8
 8009770:	2b08      	cmp	r3, #8
 8009772:	d110      	bne.n	8009796 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2208      	movs	r2, #8
 800977a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f000 f838 	bl	80097f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2208      	movs	r2, #8
 8009786:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2200      	movs	r2, #0
 800978e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e029      	b.n	80097ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	69db      	ldr	r3, [r3, #28]
 800979c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097a4:	d111      	bne.n	80097ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80097ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f000 f81e 	bl	80097f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2220      	movs	r2, #32
 80097ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80097c6:	2303      	movs	r3, #3
 80097c8:	e00f      	b.n	80097ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	69da      	ldr	r2, [r3, #28]
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	4013      	ands	r3, r2
 80097d4:	68ba      	ldr	r2, [r7, #8]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	bf0c      	ite	eq
 80097da:	2301      	moveq	r3, #1
 80097dc:	2300      	movne	r3, #0
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	461a      	mov	r2, r3
 80097e2:	79fb      	ldrb	r3, [r7, #7]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d0a0      	beq.n	800972a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097f2:	b480      	push	{r7}
 80097f4:	b095      	sub	sp, #84	@ 0x54
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009802:	e853 3f00 	ldrex	r3, [r3]
 8009806:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800980a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800980e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	461a      	mov	r2, r3
 8009816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009818:	643b      	str	r3, [r7, #64]	@ 0x40
 800981a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800981e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009820:	e841 2300 	strex	r3, r2, [r1]
 8009824:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009828:	2b00      	cmp	r3, #0
 800982a:	d1e6      	bne.n	80097fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	3308      	adds	r3, #8
 8009832:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009834:	6a3b      	ldr	r3, [r7, #32]
 8009836:	e853 3f00 	ldrex	r3, [r3]
 800983a:	61fb      	str	r3, [r7, #28]
   return(result);
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009842:	f023 0301 	bic.w	r3, r3, #1
 8009846:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	3308      	adds	r3, #8
 800984e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009850:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009852:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009854:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009856:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009858:	e841 2300 	strex	r3, r2, [r1]
 800985c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800985e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009860:	2b00      	cmp	r3, #0
 8009862:	d1e3      	bne.n	800982c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009868:	2b01      	cmp	r3, #1
 800986a:	d118      	bne.n	800989e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	e853 3f00 	ldrex	r3, [r3]
 8009878:	60bb      	str	r3, [r7, #8]
   return(result);
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	f023 0310 	bic.w	r3, r3, #16
 8009880:	647b      	str	r3, [r7, #68]	@ 0x44
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	461a      	mov	r2, r3
 8009888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800988a:	61bb      	str	r3, [r7, #24]
 800988c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988e:	6979      	ldr	r1, [r7, #20]
 8009890:	69ba      	ldr	r2, [r7, #24]
 8009892:	e841 2300 	strex	r3, r2, [r1]
 8009896:	613b      	str	r3, [r7, #16]
   return(result);
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d1e6      	bne.n	800986c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2220      	movs	r2, #32
 80098a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80098b2:	bf00      	nop
 80098b4:	3754      	adds	r7, #84	@ 0x54
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80098be:	b480      	push	{r7}
 80098c0:	b085      	sub	sp, #20
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d101      	bne.n	80098d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80098d0:	2302      	movs	r3, #2
 80098d2:	e027      	b.n	8009924 <HAL_UARTEx_DisableFifoMode+0x66>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2224      	movs	r2, #36	@ 0x24
 80098e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f022 0201 	bic.w	r2, r2, #1
 80098fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009902:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2220      	movs	r2, #32
 8009916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3714      	adds	r7, #20
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009940:	2b01      	cmp	r3, #1
 8009942:	d101      	bne.n	8009948 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009944:	2302      	movs	r3, #2
 8009946:	e02d      	b.n	80099a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2224      	movs	r2, #36	@ 0x24
 8009954:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f022 0201 	bic.w	r2, r2, #1
 800996e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	683a      	ldr	r2, [r7, #0]
 8009980:	430a      	orrs	r2, r1
 8009982:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 f84f 	bl	8009a28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2220      	movs	r2, #32
 8009996:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d101      	bne.n	80099c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80099c0:	2302      	movs	r3, #2
 80099c2:	e02d      	b.n	8009a20 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2224      	movs	r2, #36	@ 0x24
 80099d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f022 0201 	bic.w	r2, r2, #1
 80099ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	683a      	ldr	r2, [r7, #0]
 80099fc:	430a      	orrs	r2, r1
 80099fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 f811 	bl	8009a28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2220      	movs	r2, #32
 8009a12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3710      	adds	r7, #16
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d108      	bne.n	8009a4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2201      	movs	r2, #1
 8009a44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a48:	e031      	b.n	8009aae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a4a:	2308      	movs	r3, #8
 8009a4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a4e:	2308      	movs	r3, #8
 8009a50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	0e5b      	lsrs	r3, r3, #25
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	f003 0307 	and.w	r3, r3, #7
 8009a60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	0f5b      	lsrs	r3, r3, #29
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	f003 0307 	and.w	r3, r3, #7
 8009a70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a72:	7bbb      	ldrb	r3, [r7, #14]
 8009a74:	7b3a      	ldrb	r2, [r7, #12]
 8009a76:	4911      	ldr	r1, [pc, #68]	@ (8009abc <UARTEx_SetNbDataToProcess+0x94>)
 8009a78:	5c8a      	ldrb	r2, [r1, r2]
 8009a7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a7e:	7b3a      	ldrb	r2, [r7, #12]
 8009a80:	490f      	ldr	r1, [pc, #60]	@ (8009ac0 <UARTEx_SetNbDataToProcess+0x98>)
 8009a82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a84:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a88:	b29a      	uxth	r2, r3
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a90:	7bfb      	ldrb	r3, [r7, #15]
 8009a92:	7b7a      	ldrb	r2, [r7, #13]
 8009a94:	4909      	ldr	r1, [pc, #36]	@ (8009abc <UARTEx_SetNbDataToProcess+0x94>)
 8009a96:	5c8a      	ldrb	r2, [r1, r2]
 8009a98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a9c:	7b7a      	ldrb	r2, [r7, #13]
 8009a9e:	4908      	ldr	r1, [pc, #32]	@ (8009ac0 <UARTEx_SetNbDataToProcess+0x98>)
 8009aa0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009aa2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009aae:	bf00      	nop
 8009ab0:	3714      	adds	r7, #20
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	0800cb5c 	.word	0x0800cb5c
 8009ac0:	0800cb64 	.word	0x0800cb64

08009ac4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b08b      	sub	sp, #44	@ 0x2c
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	fa93 f3a3 	rbit	r3, r3
 8009ade:	613b      	str	r3, [r7, #16]
  return result;
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009ae4:	69bb      	ldr	r3, [r7, #24]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d101      	bne.n	8009aee <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8009aea:	2320      	movs	r3, #32
 8009aec:	e003      	b.n	8009af6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	fab3 f383 	clz	r3, r3
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	005b      	lsls	r3, r3, #1
 8009af8:	2103      	movs	r1, #3
 8009afa:	fa01 f303 	lsl.w	r3, r1, r3
 8009afe:	43db      	mvns	r3, r3
 8009b00:	401a      	ands	r2, r3
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b06:	6a3b      	ldr	r3, [r7, #32]
 8009b08:	fa93 f3a3 	rbit	r3, r3
 8009b0c:	61fb      	str	r3, [r7, #28]
  return result;
 8009b0e:	69fb      	ldr	r3, [r7, #28]
 8009b10:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d101      	bne.n	8009b1c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8009b18:	2320      	movs	r3, #32
 8009b1a:	e003      	b.n	8009b24 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b1e:	fab3 f383 	clz	r3, r3
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	005b      	lsls	r3, r3, #1
 8009b26:	6879      	ldr	r1, [r7, #4]
 8009b28:	fa01 f303 	lsl.w	r3, r1, r3
 8009b2c:	431a      	orrs	r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	601a      	str	r2, [r3, #0]
}
 8009b32:	bf00      	nop
 8009b34:	372c      	adds	r7, #44	@ 0x2c
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr

08009b3e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8009b3e:	b480      	push	{r7}
 8009b40:	b085      	sub	sp, #20
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	60f8      	str	r0, [r7, #12]
 8009b46:	60b9      	str	r1, [r7, #8]
 8009b48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	685a      	ldr	r2, [r3, #4]
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	43db      	mvns	r3, r3
 8009b52:	401a      	ands	r2, r3
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	6879      	ldr	r1, [r7, #4]
 8009b58:	fb01 f303 	mul.w	r3, r1, r3
 8009b5c:	431a      	orrs	r2, r3
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	605a      	str	r2, [r3, #4]
}
 8009b62:	bf00      	nop
 8009b64:	3714      	adds	r7, #20
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8009b6e:	b480      	push	{r7}
 8009b70:	b08b      	sub	sp, #44	@ 0x2c
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	60f8      	str	r0, [r7, #12]
 8009b76:	60b9      	str	r1, [r7, #8]
 8009b78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	689a      	ldr	r2, [r3, #8]
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	fa93 f3a3 	rbit	r3, r3
 8009b88:	613b      	str	r3, [r7, #16]
  return result;
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d101      	bne.n	8009b98 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009b94:	2320      	movs	r3, #32
 8009b96:	e003      	b.n	8009ba0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	fab3 f383 	clz	r3, r3
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	005b      	lsls	r3, r3, #1
 8009ba2:	2103      	movs	r1, #3
 8009ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ba8:	43db      	mvns	r3, r3
 8009baa:	401a      	ands	r2, r3
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bb0:	6a3b      	ldr	r3, [r7, #32]
 8009bb2:	fa93 f3a3 	rbit	r3, r3
 8009bb6:	61fb      	str	r3, [r7, #28]
  return result;
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d101      	bne.n	8009bc6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8009bc2:	2320      	movs	r3, #32
 8009bc4:	e003      	b.n	8009bce <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc8:	fab3 f383 	clz	r3, r3
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	005b      	lsls	r3, r3, #1
 8009bd0:	6879      	ldr	r1, [r7, #4]
 8009bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd6:	431a      	orrs	r2, r3
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8009bdc:	bf00      	nop
 8009bde:	372c      	adds	r7, #44	@ 0x2c
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b08b      	sub	sp, #44	@ 0x2c
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	68da      	ldr	r2, [r3, #12]
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	fa93 f3a3 	rbit	r3, r3
 8009c02:	613b      	str	r3, [r7, #16]
  return result;
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d101      	bne.n	8009c12 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8009c0e:	2320      	movs	r3, #32
 8009c10:	e003      	b.n	8009c1a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	fab3 f383 	clz	r3, r3
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	005b      	lsls	r3, r3, #1
 8009c1c:	2103      	movs	r1, #3
 8009c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8009c22:	43db      	mvns	r3, r3
 8009c24:	401a      	ands	r2, r3
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c2a:	6a3b      	ldr	r3, [r7, #32]
 8009c2c:	fa93 f3a3 	rbit	r3, r3
 8009c30:	61fb      	str	r3, [r7, #28]
  return result;
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d101      	bne.n	8009c40 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8009c3c:	2320      	movs	r3, #32
 8009c3e:	e003      	b.n	8009c48 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8009c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c42:	fab3 f383 	clz	r3, r3
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	005b      	lsls	r3, r3, #1
 8009c4a:	6879      	ldr	r1, [r7, #4]
 8009c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8009c50:	431a      	orrs	r2, r3
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	60da      	str	r2, [r3, #12]
}
 8009c56:	bf00      	nop
 8009c58:	372c      	adds	r7, #44	@ 0x2c
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr

08009c62 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009c62:	b480      	push	{r7}
 8009c64:	b08b      	sub	sp, #44	@ 0x2c
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	60f8      	str	r0, [r7, #12]
 8009c6a:	60b9      	str	r1, [r7, #8]
 8009c6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6a1a      	ldr	r2, [r3, #32]
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	fa93 f3a3 	rbit	r3, r3
 8009c7c:	613b      	str	r3, [r7, #16]
  return result;
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d101      	bne.n	8009c8c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009c88:	2320      	movs	r3, #32
 8009c8a:	e003      	b.n	8009c94 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	fab3 f383 	clz	r3, r3
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	210f      	movs	r1, #15
 8009c98:	fa01 f303 	lsl.w	r3, r1, r3
 8009c9c:	43db      	mvns	r3, r3
 8009c9e:	401a      	ands	r2, r3
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ca4:	6a3b      	ldr	r3, [r7, #32]
 8009ca6:	fa93 f3a3 	rbit	r3, r3
 8009caa:	61fb      	str	r3, [r7, #28]
  return result;
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d101      	bne.n	8009cba <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009cb6:	2320      	movs	r3, #32
 8009cb8:	e003      	b.n	8009cc2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8009cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cbc:	fab3 f383 	clz	r3, r3
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	6879      	ldr	r1, [r7, #4]
 8009cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8009cca:	431a      	orrs	r2, r3
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8009cd0:	bf00      	nop
 8009cd2:	372c      	adds	r7, #44	@ 0x2c
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b08b      	sub	sp, #44	@ 0x2c
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	0a1b      	lsrs	r3, r3, #8
 8009cf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	fa93 f3a3 	rbit	r3, r3
 8009cf8:	613b      	str	r3, [r7, #16]
  return result;
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d101      	bne.n	8009d08 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8009d04:	2320      	movs	r3, #32
 8009d06:	e003      	b.n	8009d10 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	fab3 f383 	clz	r3, r3
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	210f      	movs	r1, #15
 8009d14:	fa01 f303 	lsl.w	r3, r1, r3
 8009d18:	43db      	mvns	r3, r3
 8009d1a:	401a      	ands	r2, r3
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	0a1b      	lsrs	r3, r3, #8
 8009d20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d22:	6a3b      	ldr	r3, [r7, #32]
 8009d24:	fa93 f3a3 	rbit	r3, r3
 8009d28:	61fb      	str	r3, [r7, #28]
  return result;
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d101      	bne.n	8009d38 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009d34:	2320      	movs	r3, #32
 8009d36:	e003      	b.n	8009d40 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8009d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d3a:	fab3 f383 	clz	r3, r3
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	6879      	ldr	r1, [r7, #4]
 8009d44:	fa01 f303 	lsl.w	r3, r1, r3
 8009d48:	431a      	orrs	r2, r3
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8009d4e:	bf00      	nop
 8009d50:	372c      	adds	r7, #44	@ 0x2c
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr

08009d5a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b088      	sub	sp, #32
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
 8009d62:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	fa93 f3a3 	rbit	r3, r3
 8009d70:	60fb      	str	r3, [r7, #12]
  return result;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d101      	bne.n	8009d80 <LL_GPIO_Init+0x26>
    return 32U;
 8009d7c:	2320      	movs	r3, #32
 8009d7e:	e003      	b.n	8009d88 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	fab3 f383 	clz	r3, r3
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009d8a:	e047      	b.n	8009e1c <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	2101      	movs	r1, #1
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	fa01 f303 	lsl.w	r3, r1, r3
 8009d98:	4013      	ands	r3, r2
 8009d9a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d039      	beq.n	8009e16 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d003      	beq.n	8009db2 <LL_GPIO_Init+0x58>
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	d10d      	bne.n	8009dce <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	461a      	mov	r2, r3
 8009db8:	69b9      	ldr	r1, [r7, #24]
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f7ff fed7 	bl	8009b6e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	69b9      	ldr	r1, [r7, #24]
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f7ff feb8 	bl	8009b3e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	691b      	ldr	r3, [r3, #16]
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	69b9      	ldr	r1, [r7, #24]
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f7ff ff06 	bl	8009be8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	2b02      	cmp	r3, #2
 8009de2:	d111      	bne.n	8009e08 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8009de4:	69bb      	ldr	r3, [r7, #24]
 8009de6:	2bff      	cmp	r3, #255	@ 0xff
 8009de8:	d807      	bhi.n	8009dfa <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	695b      	ldr	r3, [r3, #20]
 8009dee:	461a      	mov	r2, r3
 8009df0:	69b9      	ldr	r1, [r7, #24]
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f7ff ff35 	bl	8009c62 <LL_GPIO_SetAFPin_0_7>
 8009df8:	e006      	b.n	8009e08 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	695b      	ldr	r3, [r3, #20]
 8009dfe:	461a      	mov	r2, r3
 8009e00:	69b9      	ldr	r1, [r7, #24]
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7ff ff6a 	bl	8009cdc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	69b9      	ldr	r1, [r7, #24]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f7ff fe57 	bl	8009ac4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	fa22 f303 	lsr.w	r3, r2, r3
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1b0      	bne.n	8009d8c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3720      	adds	r7, #32
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009e3c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8009e40:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009e48:	b29a      	uxth	r2, r3
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	43db      	mvns	r3, r3
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	4013      	ands	r3, r2
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009e5c:	2300      	movs	r3, #0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3714      	adds	r7, #20
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr

08009e6a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b085      	sub	sp, #20
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	60f8      	str	r0, [r7, #12]
 8009e72:	1d3b      	adds	r3, r7, #4
 8009e74:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8009e98:	2300      	movs	r3, #0
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3714      	adds	r7, #20
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr

08009ea6 <__cvt>:
 8009ea6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009eaa:	ec57 6b10 	vmov	r6, r7, d0
 8009eae:	2f00      	cmp	r7, #0
 8009eb0:	460c      	mov	r4, r1
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	463b      	mov	r3, r7
 8009eb6:	bfb4      	ite	lt
 8009eb8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009ebc:	2300      	movge	r3, #0
 8009ebe:	4691      	mov	r9, r2
 8009ec0:	bfbf      	itttt	lt
 8009ec2:	4632      	movlt	r2, r6
 8009ec4:	461f      	movlt	r7, r3
 8009ec6:	232d      	movlt	r3, #45	@ 0x2d
 8009ec8:	4616      	movlt	r6, r2
 8009eca:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009ece:	700b      	strb	r3, [r1, #0]
 8009ed0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ed2:	f023 0820 	bic.w	r8, r3, #32
 8009ed6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009eda:	d005      	beq.n	8009ee8 <__cvt+0x42>
 8009edc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009ee0:	d100      	bne.n	8009ee4 <__cvt+0x3e>
 8009ee2:	3401      	adds	r4, #1
 8009ee4:	2102      	movs	r1, #2
 8009ee6:	e000      	b.n	8009eea <__cvt+0x44>
 8009ee8:	2103      	movs	r1, #3
 8009eea:	ab03      	add	r3, sp, #12
 8009eec:	4622      	mov	r2, r4
 8009eee:	9301      	str	r3, [sp, #4]
 8009ef0:	ab02      	add	r3, sp, #8
 8009ef2:	ec47 6b10 	vmov	d0, r6, r7
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	4653      	mov	r3, sl
 8009efa:	f000 ff89 	bl	800ae10 <_dtoa_r>
 8009efe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009f02:	4605      	mov	r5, r0
 8009f04:	d119      	bne.n	8009f3a <__cvt+0x94>
 8009f06:	f019 0f01 	tst.w	r9, #1
 8009f0a:	d00e      	beq.n	8009f2a <__cvt+0x84>
 8009f0c:	eb00 0904 	add.w	r9, r0, r4
 8009f10:	2200      	movs	r2, #0
 8009f12:	2300      	movs	r3, #0
 8009f14:	4630      	mov	r0, r6
 8009f16:	4639      	mov	r1, r7
 8009f18:	f7f6 fdba 	bl	8000a90 <__aeabi_dcmpeq>
 8009f1c:	b108      	cbz	r0, 8009f22 <__cvt+0x7c>
 8009f1e:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f22:	2230      	movs	r2, #48	@ 0x30
 8009f24:	9b03      	ldr	r3, [sp, #12]
 8009f26:	454b      	cmp	r3, r9
 8009f28:	d31e      	bcc.n	8009f68 <__cvt+0xc2>
 8009f2a:	9b03      	ldr	r3, [sp, #12]
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f30:	1b5b      	subs	r3, r3, r5
 8009f32:	6013      	str	r3, [r2, #0]
 8009f34:	b004      	add	sp, #16
 8009f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f3a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f3e:	eb00 0904 	add.w	r9, r0, r4
 8009f42:	d1e5      	bne.n	8009f10 <__cvt+0x6a>
 8009f44:	7803      	ldrb	r3, [r0, #0]
 8009f46:	2b30      	cmp	r3, #48	@ 0x30
 8009f48:	d10a      	bne.n	8009f60 <__cvt+0xba>
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	4630      	mov	r0, r6
 8009f50:	4639      	mov	r1, r7
 8009f52:	f7f6 fd9d 	bl	8000a90 <__aeabi_dcmpeq>
 8009f56:	b918      	cbnz	r0, 8009f60 <__cvt+0xba>
 8009f58:	f1c4 0401 	rsb	r4, r4, #1
 8009f5c:	f8ca 4000 	str.w	r4, [sl]
 8009f60:	f8da 3000 	ldr.w	r3, [sl]
 8009f64:	4499      	add	r9, r3
 8009f66:	e7d3      	b.n	8009f10 <__cvt+0x6a>
 8009f68:	1c59      	adds	r1, r3, #1
 8009f6a:	9103      	str	r1, [sp, #12]
 8009f6c:	701a      	strb	r2, [r3, #0]
 8009f6e:	e7d9      	b.n	8009f24 <__cvt+0x7e>

08009f70 <__exponent>:
 8009f70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f72:	2900      	cmp	r1, #0
 8009f74:	7002      	strb	r2, [r0, #0]
 8009f76:	bfba      	itte	lt
 8009f78:	4249      	neglt	r1, r1
 8009f7a:	232d      	movlt	r3, #45	@ 0x2d
 8009f7c:	232b      	movge	r3, #43	@ 0x2b
 8009f7e:	2909      	cmp	r1, #9
 8009f80:	7043      	strb	r3, [r0, #1]
 8009f82:	dd28      	ble.n	8009fd6 <__exponent+0x66>
 8009f84:	f10d 0307 	add.w	r3, sp, #7
 8009f88:	270a      	movs	r7, #10
 8009f8a:	461d      	mov	r5, r3
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	fbb1 f6f7 	udiv	r6, r1, r7
 8009f94:	fb07 1416 	mls	r4, r7, r6, r1
 8009f98:	3430      	adds	r4, #48	@ 0x30
 8009f9a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009f9e:	460c      	mov	r4, r1
 8009fa0:	4631      	mov	r1, r6
 8009fa2:	2c63      	cmp	r4, #99	@ 0x63
 8009fa4:	dcf2      	bgt.n	8009f8c <__exponent+0x1c>
 8009fa6:	3130      	adds	r1, #48	@ 0x30
 8009fa8:	1e94      	subs	r4, r2, #2
 8009faa:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009fae:	1c41      	adds	r1, r0, #1
 8009fb0:	4623      	mov	r3, r4
 8009fb2:	42ab      	cmp	r3, r5
 8009fb4:	d30a      	bcc.n	8009fcc <__exponent+0x5c>
 8009fb6:	f10d 0309 	add.w	r3, sp, #9
 8009fba:	1a9b      	subs	r3, r3, r2
 8009fbc:	42ac      	cmp	r4, r5
 8009fbe:	bf88      	it	hi
 8009fc0:	2300      	movhi	r3, #0
 8009fc2:	3302      	adds	r3, #2
 8009fc4:	4403      	add	r3, r0
 8009fc6:	1a18      	subs	r0, r3, r0
 8009fc8:	b003      	add	sp, #12
 8009fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fcc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009fd0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009fd4:	e7ed      	b.n	8009fb2 <__exponent+0x42>
 8009fd6:	2330      	movs	r3, #48	@ 0x30
 8009fd8:	3130      	adds	r1, #48	@ 0x30
 8009fda:	7083      	strb	r3, [r0, #2]
 8009fdc:	1d03      	adds	r3, r0, #4
 8009fde:	70c1      	strb	r1, [r0, #3]
 8009fe0:	e7f1      	b.n	8009fc6 <__exponent+0x56>
	...

08009fe4 <_printf_float>:
 8009fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe8:	b08d      	sub	sp, #52	@ 0x34
 8009fea:	460c      	mov	r4, r1
 8009fec:	4616      	mov	r6, r2
 8009fee:	461f      	mov	r7, r3
 8009ff0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009ff4:	4605      	mov	r5, r0
 8009ff6:	f000 fdeb 	bl	800abd0 <_localeconv_r>
 8009ffa:	6803      	ldr	r3, [r0, #0]
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	9304      	str	r3, [sp, #16]
 800a000:	f7f6 f91a 	bl	8000238 <strlen>
 800a004:	2300      	movs	r3, #0
 800a006:	9005      	str	r0, [sp, #20]
 800a008:	930a      	str	r3, [sp, #40]	@ 0x28
 800a00a:	f8d8 3000 	ldr.w	r3, [r8]
 800a00e:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a012:	3307      	adds	r3, #7
 800a014:	f8d4 b000 	ldr.w	fp, [r4]
 800a018:	f023 0307 	bic.w	r3, r3, #7
 800a01c:	f103 0208 	add.w	r2, r3, #8
 800a020:	f8c8 2000 	str.w	r2, [r8]
 800a024:	f04f 32ff 	mov.w	r2, #4294967295
 800a028:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a02c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a030:	f8cd 8018 	str.w	r8, [sp, #24]
 800a034:	9307      	str	r3, [sp, #28]
 800a036:	4b9d      	ldr	r3, [pc, #628]	@ (800a2ac <_printf_float+0x2c8>)
 800a038:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a03c:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a040:	f7f6 fd58 	bl	8000af4 <__aeabi_dcmpun>
 800a044:	bb70      	cbnz	r0, 800a0a4 <_printf_float+0xc0>
 800a046:	f04f 32ff 	mov.w	r2, #4294967295
 800a04a:	4b98      	ldr	r3, [pc, #608]	@ (800a2ac <_printf_float+0x2c8>)
 800a04c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a050:	f7f6 fd32 	bl	8000ab8 <__aeabi_dcmple>
 800a054:	bb30      	cbnz	r0, 800a0a4 <_printf_float+0xc0>
 800a056:	2200      	movs	r2, #0
 800a058:	2300      	movs	r3, #0
 800a05a:	4640      	mov	r0, r8
 800a05c:	4649      	mov	r1, r9
 800a05e:	f7f6 fd21 	bl	8000aa4 <__aeabi_dcmplt>
 800a062:	b110      	cbz	r0, 800a06a <_printf_float+0x86>
 800a064:	232d      	movs	r3, #45	@ 0x2d
 800a066:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a06a:	4a91      	ldr	r2, [pc, #580]	@ (800a2b0 <_printf_float+0x2cc>)
 800a06c:	4b91      	ldr	r3, [pc, #580]	@ (800a2b4 <_printf_float+0x2d0>)
 800a06e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a072:	bf94      	ite	ls
 800a074:	4690      	movls	r8, r2
 800a076:	4698      	movhi	r8, r3
 800a078:	2303      	movs	r3, #3
 800a07a:	f04f 0900 	mov.w	r9, #0
 800a07e:	6123      	str	r3, [r4, #16]
 800a080:	f02b 0304 	bic.w	r3, fp, #4
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	4633      	mov	r3, r6
 800a088:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a08a:	4621      	mov	r1, r4
 800a08c:	4628      	mov	r0, r5
 800a08e:	9700      	str	r7, [sp, #0]
 800a090:	f000 f9d2 	bl	800a438 <_printf_common>
 800a094:	3001      	adds	r0, #1
 800a096:	f040 808d 	bne.w	800a1b4 <_printf_float+0x1d0>
 800a09a:	f04f 30ff 	mov.w	r0, #4294967295
 800a09e:	b00d      	add	sp, #52	@ 0x34
 800a0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a4:	4642      	mov	r2, r8
 800a0a6:	464b      	mov	r3, r9
 800a0a8:	4640      	mov	r0, r8
 800a0aa:	4649      	mov	r1, r9
 800a0ac:	f7f6 fd22 	bl	8000af4 <__aeabi_dcmpun>
 800a0b0:	b140      	cbz	r0, 800a0c4 <_printf_float+0xe0>
 800a0b2:	464b      	mov	r3, r9
 800a0b4:	4a80      	ldr	r2, [pc, #512]	@ (800a2b8 <_printf_float+0x2d4>)
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	bfbc      	itt	lt
 800a0ba:	232d      	movlt	r3, #45	@ 0x2d
 800a0bc:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a0c0:	4b7e      	ldr	r3, [pc, #504]	@ (800a2bc <_printf_float+0x2d8>)
 800a0c2:	e7d4      	b.n	800a06e <_printf_float+0x8a>
 800a0c4:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a0c8:	6863      	ldr	r3, [r4, #4]
 800a0ca:	9206      	str	r2, [sp, #24]
 800a0cc:	1c5a      	adds	r2, r3, #1
 800a0ce:	d13b      	bne.n	800a148 <_printf_float+0x164>
 800a0d0:	2306      	movs	r3, #6
 800a0d2:	6063      	str	r3, [r4, #4]
 800a0d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a0d8:	2300      	movs	r3, #0
 800a0da:	4628      	mov	r0, r5
 800a0dc:	6022      	str	r2, [r4, #0]
 800a0de:	9303      	str	r3, [sp, #12]
 800a0e0:	ab0a      	add	r3, sp, #40	@ 0x28
 800a0e2:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a0e6:	ab09      	add	r3, sp, #36	@ 0x24
 800a0e8:	ec49 8b10 	vmov	d0, r8, r9
 800a0ec:	9300      	str	r3, [sp, #0]
 800a0ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a0f2:	6861      	ldr	r1, [r4, #4]
 800a0f4:	f7ff fed7 	bl	8009ea6 <__cvt>
 800a0f8:	9b06      	ldr	r3, [sp, #24]
 800a0fa:	4680      	mov	r8, r0
 800a0fc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0fe:	2b47      	cmp	r3, #71	@ 0x47
 800a100:	d129      	bne.n	800a156 <_printf_float+0x172>
 800a102:	1cc8      	adds	r0, r1, #3
 800a104:	db02      	blt.n	800a10c <_printf_float+0x128>
 800a106:	6863      	ldr	r3, [r4, #4]
 800a108:	4299      	cmp	r1, r3
 800a10a:	dd41      	ble.n	800a190 <_printf_float+0x1ac>
 800a10c:	f1aa 0a02 	sub.w	sl, sl, #2
 800a110:	fa5f fa8a 	uxtb.w	sl, sl
 800a114:	3901      	subs	r1, #1
 800a116:	4652      	mov	r2, sl
 800a118:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a11c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a11e:	f7ff ff27 	bl	8009f70 <__exponent>
 800a122:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a124:	4681      	mov	r9, r0
 800a126:	1813      	adds	r3, r2, r0
 800a128:	2a01      	cmp	r2, #1
 800a12a:	6123      	str	r3, [r4, #16]
 800a12c:	dc02      	bgt.n	800a134 <_printf_float+0x150>
 800a12e:	6822      	ldr	r2, [r4, #0]
 800a130:	07d2      	lsls	r2, r2, #31
 800a132:	d501      	bpl.n	800a138 <_printf_float+0x154>
 800a134:	3301      	adds	r3, #1
 800a136:	6123      	str	r3, [r4, #16]
 800a138:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d0a2      	beq.n	800a086 <_printf_float+0xa2>
 800a140:	232d      	movs	r3, #45	@ 0x2d
 800a142:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a146:	e79e      	b.n	800a086 <_printf_float+0xa2>
 800a148:	9a06      	ldr	r2, [sp, #24]
 800a14a:	2a47      	cmp	r2, #71	@ 0x47
 800a14c:	d1c2      	bne.n	800a0d4 <_printf_float+0xf0>
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1c0      	bne.n	800a0d4 <_printf_float+0xf0>
 800a152:	2301      	movs	r3, #1
 800a154:	e7bd      	b.n	800a0d2 <_printf_float+0xee>
 800a156:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a15a:	d9db      	bls.n	800a114 <_printf_float+0x130>
 800a15c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a160:	d118      	bne.n	800a194 <_printf_float+0x1b0>
 800a162:	2900      	cmp	r1, #0
 800a164:	6863      	ldr	r3, [r4, #4]
 800a166:	dd0b      	ble.n	800a180 <_printf_float+0x19c>
 800a168:	6121      	str	r1, [r4, #16]
 800a16a:	b913      	cbnz	r3, 800a172 <_printf_float+0x18e>
 800a16c:	6822      	ldr	r2, [r4, #0]
 800a16e:	07d0      	lsls	r0, r2, #31
 800a170:	d502      	bpl.n	800a178 <_printf_float+0x194>
 800a172:	3301      	adds	r3, #1
 800a174:	440b      	add	r3, r1
 800a176:	6123      	str	r3, [r4, #16]
 800a178:	f04f 0900 	mov.w	r9, #0
 800a17c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a17e:	e7db      	b.n	800a138 <_printf_float+0x154>
 800a180:	b913      	cbnz	r3, 800a188 <_printf_float+0x1a4>
 800a182:	6822      	ldr	r2, [r4, #0]
 800a184:	07d2      	lsls	r2, r2, #31
 800a186:	d501      	bpl.n	800a18c <_printf_float+0x1a8>
 800a188:	3302      	adds	r3, #2
 800a18a:	e7f4      	b.n	800a176 <_printf_float+0x192>
 800a18c:	2301      	movs	r3, #1
 800a18e:	e7f2      	b.n	800a176 <_printf_float+0x192>
 800a190:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a196:	4299      	cmp	r1, r3
 800a198:	db05      	blt.n	800a1a6 <_printf_float+0x1c2>
 800a19a:	6823      	ldr	r3, [r4, #0]
 800a19c:	6121      	str	r1, [r4, #16]
 800a19e:	07d8      	lsls	r0, r3, #31
 800a1a0:	d5ea      	bpl.n	800a178 <_printf_float+0x194>
 800a1a2:	1c4b      	adds	r3, r1, #1
 800a1a4:	e7e7      	b.n	800a176 <_printf_float+0x192>
 800a1a6:	2900      	cmp	r1, #0
 800a1a8:	bfd4      	ite	le
 800a1aa:	f1c1 0202 	rsble	r2, r1, #2
 800a1ae:	2201      	movgt	r2, #1
 800a1b0:	4413      	add	r3, r2
 800a1b2:	e7e0      	b.n	800a176 <_printf_float+0x192>
 800a1b4:	6823      	ldr	r3, [r4, #0]
 800a1b6:	055a      	lsls	r2, r3, #21
 800a1b8:	d407      	bmi.n	800a1ca <_printf_float+0x1e6>
 800a1ba:	6923      	ldr	r3, [r4, #16]
 800a1bc:	4642      	mov	r2, r8
 800a1be:	4631      	mov	r1, r6
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	47b8      	blx	r7
 800a1c4:	3001      	adds	r0, #1
 800a1c6:	d12b      	bne.n	800a220 <_printf_float+0x23c>
 800a1c8:	e767      	b.n	800a09a <_printf_float+0xb6>
 800a1ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a1ce:	f240 80dd 	bls.w	800a38c <_printf_float+0x3a8>
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a1da:	f7f6 fc59 	bl	8000a90 <__aeabi_dcmpeq>
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	d033      	beq.n	800a24a <_printf_float+0x266>
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	4a36      	ldr	r2, [pc, #216]	@ (800a2c0 <_printf_float+0x2dc>)
 800a1e6:	4631      	mov	r1, r6
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	47b8      	blx	r7
 800a1ec:	3001      	adds	r0, #1
 800a1ee:	f43f af54 	beq.w	800a09a <_printf_float+0xb6>
 800a1f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a1f6:	4543      	cmp	r3, r8
 800a1f8:	db02      	blt.n	800a200 <_printf_float+0x21c>
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	07d8      	lsls	r0, r3, #31
 800a1fe:	d50f      	bpl.n	800a220 <_printf_float+0x23c>
 800a200:	4631      	mov	r1, r6
 800a202:	4628      	mov	r0, r5
 800a204:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a208:	47b8      	blx	r7
 800a20a:	3001      	adds	r0, #1
 800a20c:	f43f af45 	beq.w	800a09a <_printf_float+0xb6>
 800a210:	f04f 0900 	mov.w	r9, #0
 800a214:	f108 38ff 	add.w	r8, r8, #4294967295
 800a218:	f104 0a1a 	add.w	sl, r4, #26
 800a21c:	45c8      	cmp	r8, r9
 800a21e:	dc09      	bgt.n	800a234 <_printf_float+0x250>
 800a220:	6823      	ldr	r3, [r4, #0]
 800a222:	079b      	lsls	r3, r3, #30
 800a224:	f100 8103 	bmi.w	800a42e <_printf_float+0x44a>
 800a228:	68e0      	ldr	r0, [r4, #12]
 800a22a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a22c:	4298      	cmp	r0, r3
 800a22e:	bfb8      	it	lt
 800a230:	4618      	movlt	r0, r3
 800a232:	e734      	b.n	800a09e <_printf_float+0xba>
 800a234:	2301      	movs	r3, #1
 800a236:	4652      	mov	r2, sl
 800a238:	4631      	mov	r1, r6
 800a23a:	4628      	mov	r0, r5
 800a23c:	47b8      	blx	r7
 800a23e:	3001      	adds	r0, #1
 800a240:	f43f af2b 	beq.w	800a09a <_printf_float+0xb6>
 800a244:	f109 0901 	add.w	r9, r9, #1
 800a248:	e7e8      	b.n	800a21c <_printf_float+0x238>
 800a24a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	dc39      	bgt.n	800a2c4 <_printf_float+0x2e0>
 800a250:	2301      	movs	r3, #1
 800a252:	4a1b      	ldr	r2, [pc, #108]	@ (800a2c0 <_printf_float+0x2dc>)
 800a254:	4631      	mov	r1, r6
 800a256:	4628      	mov	r0, r5
 800a258:	47b8      	blx	r7
 800a25a:	3001      	adds	r0, #1
 800a25c:	f43f af1d 	beq.w	800a09a <_printf_float+0xb6>
 800a260:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a264:	ea59 0303 	orrs.w	r3, r9, r3
 800a268:	d102      	bne.n	800a270 <_printf_float+0x28c>
 800a26a:	6823      	ldr	r3, [r4, #0]
 800a26c:	07d9      	lsls	r1, r3, #31
 800a26e:	d5d7      	bpl.n	800a220 <_printf_float+0x23c>
 800a270:	4631      	mov	r1, r6
 800a272:	4628      	mov	r0, r5
 800a274:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a278:	47b8      	blx	r7
 800a27a:	3001      	adds	r0, #1
 800a27c:	f43f af0d 	beq.w	800a09a <_printf_float+0xb6>
 800a280:	f04f 0a00 	mov.w	sl, #0
 800a284:	f104 0b1a 	add.w	fp, r4, #26
 800a288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a28a:	425b      	negs	r3, r3
 800a28c:	4553      	cmp	r3, sl
 800a28e:	dc01      	bgt.n	800a294 <_printf_float+0x2b0>
 800a290:	464b      	mov	r3, r9
 800a292:	e793      	b.n	800a1bc <_printf_float+0x1d8>
 800a294:	2301      	movs	r3, #1
 800a296:	465a      	mov	r2, fp
 800a298:	4631      	mov	r1, r6
 800a29a:	4628      	mov	r0, r5
 800a29c:	47b8      	blx	r7
 800a29e:	3001      	adds	r0, #1
 800a2a0:	f43f aefb 	beq.w	800a09a <_printf_float+0xb6>
 800a2a4:	f10a 0a01 	add.w	sl, sl, #1
 800a2a8:	e7ee      	b.n	800a288 <_printf_float+0x2a4>
 800a2aa:	bf00      	nop
 800a2ac:	7fefffff 	.word	0x7fefffff
 800a2b0:	0800cb6c 	.word	0x0800cb6c
 800a2b4:	0800cb70 	.word	0x0800cb70
 800a2b8:	0800cb74 	.word	0x0800cb74
 800a2bc:	0800cb78 	.word	0x0800cb78
 800a2c0:	0800cb7c 	.word	0x0800cb7c
 800a2c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a2c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a2ca:	4553      	cmp	r3, sl
 800a2cc:	bfa8      	it	ge
 800a2ce:	4653      	movge	r3, sl
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	4699      	mov	r9, r3
 800a2d4:	dc36      	bgt.n	800a344 <_printf_float+0x360>
 800a2d6:	f04f 0b00 	mov.w	fp, #0
 800a2da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2de:	f104 021a 	add.w	r2, r4, #26
 800a2e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a2e4:	9306      	str	r3, [sp, #24]
 800a2e6:	eba3 0309 	sub.w	r3, r3, r9
 800a2ea:	455b      	cmp	r3, fp
 800a2ec:	dc31      	bgt.n	800a352 <_printf_float+0x36e>
 800a2ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2f0:	459a      	cmp	sl, r3
 800a2f2:	dc3a      	bgt.n	800a36a <_printf_float+0x386>
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	07da      	lsls	r2, r3, #31
 800a2f8:	d437      	bmi.n	800a36a <_printf_float+0x386>
 800a2fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2fc:	ebaa 0903 	sub.w	r9, sl, r3
 800a300:	9b06      	ldr	r3, [sp, #24]
 800a302:	ebaa 0303 	sub.w	r3, sl, r3
 800a306:	4599      	cmp	r9, r3
 800a308:	bfa8      	it	ge
 800a30a:	4699      	movge	r9, r3
 800a30c:	f1b9 0f00 	cmp.w	r9, #0
 800a310:	dc33      	bgt.n	800a37a <_printf_float+0x396>
 800a312:	f04f 0800 	mov.w	r8, #0
 800a316:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a31a:	f104 0b1a 	add.w	fp, r4, #26
 800a31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a320:	ebaa 0303 	sub.w	r3, sl, r3
 800a324:	eba3 0309 	sub.w	r3, r3, r9
 800a328:	4543      	cmp	r3, r8
 800a32a:	f77f af79 	ble.w	800a220 <_printf_float+0x23c>
 800a32e:	2301      	movs	r3, #1
 800a330:	465a      	mov	r2, fp
 800a332:	4631      	mov	r1, r6
 800a334:	4628      	mov	r0, r5
 800a336:	47b8      	blx	r7
 800a338:	3001      	adds	r0, #1
 800a33a:	f43f aeae 	beq.w	800a09a <_printf_float+0xb6>
 800a33e:	f108 0801 	add.w	r8, r8, #1
 800a342:	e7ec      	b.n	800a31e <_printf_float+0x33a>
 800a344:	4642      	mov	r2, r8
 800a346:	4631      	mov	r1, r6
 800a348:	4628      	mov	r0, r5
 800a34a:	47b8      	blx	r7
 800a34c:	3001      	adds	r0, #1
 800a34e:	d1c2      	bne.n	800a2d6 <_printf_float+0x2f2>
 800a350:	e6a3      	b.n	800a09a <_printf_float+0xb6>
 800a352:	2301      	movs	r3, #1
 800a354:	4631      	mov	r1, r6
 800a356:	4628      	mov	r0, r5
 800a358:	9206      	str	r2, [sp, #24]
 800a35a:	47b8      	blx	r7
 800a35c:	3001      	adds	r0, #1
 800a35e:	f43f ae9c 	beq.w	800a09a <_printf_float+0xb6>
 800a362:	f10b 0b01 	add.w	fp, fp, #1
 800a366:	9a06      	ldr	r2, [sp, #24]
 800a368:	e7bb      	b.n	800a2e2 <_printf_float+0x2fe>
 800a36a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a36e:	4631      	mov	r1, r6
 800a370:	4628      	mov	r0, r5
 800a372:	47b8      	blx	r7
 800a374:	3001      	adds	r0, #1
 800a376:	d1c0      	bne.n	800a2fa <_printf_float+0x316>
 800a378:	e68f      	b.n	800a09a <_printf_float+0xb6>
 800a37a:	9a06      	ldr	r2, [sp, #24]
 800a37c:	464b      	mov	r3, r9
 800a37e:	4631      	mov	r1, r6
 800a380:	4628      	mov	r0, r5
 800a382:	4442      	add	r2, r8
 800a384:	47b8      	blx	r7
 800a386:	3001      	adds	r0, #1
 800a388:	d1c3      	bne.n	800a312 <_printf_float+0x32e>
 800a38a:	e686      	b.n	800a09a <_printf_float+0xb6>
 800a38c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a390:	f1ba 0f01 	cmp.w	sl, #1
 800a394:	dc01      	bgt.n	800a39a <_printf_float+0x3b6>
 800a396:	07db      	lsls	r3, r3, #31
 800a398:	d536      	bpl.n	800a408 <_printf_float+0x424>
 800a39a:	2301      	movs	r3, #1
 800a39c:	4642      	mov	r2, r8
 800a39e:	4631      	mov	r1, r6
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	47b8      	blx	r7
 800a3a4:	3001      	adds	r0, #1
 800a3a6:	f43f ae78 	beq.w	800a09a <_printf_float+0xb6>
 800a3aa:	4631      	mov	r1, r6
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3b2:	47b8      	blx	r7
 800a3b4:	3001      	adds	r0, #1
 800a3b6:	f43f ae70 	beq.w	800a09a <_printf_float+0xb6>
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	2300      	movs	r3, #0
 800a3be:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a3c6:	f7f6 fb63 	bl	8000a90 <__aeabi_dcmpeq>
 800a3ca:	b9c0      	cbnz	r0, 800a3fe <_printf_float+0x41a>
 800a3cc:	4653      	mov	r3, sl
 800a3ce:	f108 0201 	add.w	r2, r8, #1
 800a3d2:	4631      	mov	r1, r6
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	47b8      	blx	r7
 800a3d8:	3001      	adds	r0, #1
 800a3da:	d10c      	bne.n	800a3f6 <_printf_float+0x412>
 800a3dc:	e65d      	b.n	800a09a <_printf_float+0xb6>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	465a      	mov	r2, fp
 800a3e2:	4631      	mov	r1, r6
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	47b8      	blx	r7
 800a3e8:	3001      	adds	r0, #1
 800a3ea:	f43f ae56 	beq.w	800a09a <_printf_float+0xb6>
 800a3ee:	f108 0801 	add.w	r8, r8, #1
 800a3f2:	45d0      	cmp	r8, sl
 800a3f4:	dbf3      	blt.n	800a3de <_printf_float+0x3fa>
 800a3f6:	464b      	mov	r3, r9
 800a3f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a3fc:	e6df      	b.n	800a1be <_printf_float+0x1da>
 800a3fe:	f04f 0800 	mov.w	r8, #0
 800a402:	f104 0b1a 	add.w	fp, r4, #26
 800a406:	e7f4      	b.n	800a3f2 <_printf_float+0x40e>
 800a408:	2301      	movs	r3, #1
 800a40a:	4642      	mov	r2, r8
 800a40c:	e7e1      	b.n	800a3d2 <_printf_float+0x3ee>
 800a40e:	2301      	movs	r3, #1
 800a410:	464a      	mov	r2, r9
 800a412:	4631      	mov	r1, r6
 800a414:	4628      	mov	r0, r5
 800a416:	47b8      	blx	r7
 800a418:	3001      	adds	r0, #1
 800a41a:	f43f ae3e 	beq.w	800a09a <_printf_float+0xb6>
 800a41e:	f108 0801 	add.w	r8, r8, #1
 800a422:	68e3      	ldr	r3, [r4, #12]
 800a424:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a426:	1a5b      	subs	r3, r3, r1
 800a428:	4543      	cmp	r3, r8
 800a42a:	dcf0      	bgt.n	800a40e <_printf_float+0x42a>
 800a42c:	e6fc      	b.n	800a228 <_printf_float+0x244>
 800a42e:	f04f 0800 	mov.w	r8, #0
 800a432:	f104 0919 	add.w	r9, r4, #25
 800a436:	e7f4      	b.n	800a422 <_printf_float+0x43e>

0800a438 <_printf_common>:
 800a438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a43c:	4616      	mov	r6, r2
 800a43e:	4698      	mov	r8, r3
 800a440:	688a      	ldr	r2, [r1, #8]
 800a442:	4607      	mov	r7, r0
 800a444:	690b      	ldr	r3, [r1, #16]
 800a446:	460c      	mov	r4, r1
 800a448:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a44c:	4293      	cmp	r3, r2
 800a44e:	bfb8      	it	lt
 800a450:	4613      	movlt	r3, r2
 800a452:	6033      	str	r3, [r6, #0]
 800a454:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a458:	b10a      	cbz	r2, 800a45e <_printf_common+0x26>
 800a45a:	3301      	adds	r3, #1
 800a45c:	6033      	str	r3, [r6, #0]
 800a45e:	6823      	ldr	r3, [r4, #0]
 800a460:	0699      	lsls	r1, r3, #26
 800a462:	bf42      	ittt	mi
 800a464:	6833      	ldrmi	r3, [r6, #0]
 800a466:	3302      	addmi	r3, #2
 800a468:	6033      	strmi	r3, [r6, #0]
 800a46a:	6825      	ldr	r5, [r4, #0]
 800a46c:	f015 0506 	ands.w	r5, r5, #6
 800a470:	d106      	bne.n	800a480 <_printf_common+0x48>
 800a472:	f104 0a19 	add.w	sl, r4, #25
 800a476:	68e3      	ldr	r3, [r4, #12]
 800a478:	6832      	ldr	r2, [r6, #0]
 800a47a:	1a9b      	subs	r3, r3, r2
 800a47c:	42ab      	cmp	r3, r5
 800a47e:	dc2b      	bgt.n	800a4d8 <_printf_common+0xa0>
 800a480:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a484:	6822      	ldr	r2, [r4, #0]
 800a486:	3b00      	subs	r3, #0
 800a488:	bf18      	it	ne
 800a48a:	2301      	movne	r3, #1
 800a48c:	0692      	lsls	r2, r2, #26
 800a48e:	d430      	bmi.n	800a4f2 <_printf_common+0xba>
 800a490:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a494:	4641      	mov	r1, r8
 800a496:	4638      	mov	r0, r7
 800a498:	47c8      	blx	r9
 800a49a:	3001      	adds	r0, #1
 800a49c:	d023      	beq.n	800a4e6 <_printf_common+0xae>
 800a49e:	6823      	ldr	r3, [r4, #0]
 800a4a0:	341a      	adds	r4, #26
 800a4a2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a4a6:	f003 0306 	and.w	r3, r3, #6
 800a4aa:	2b04      	cmp	r3, #4
 800a4ac:	bf0a      	itet	eq
 800a4ae:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800a4b2:	2500      	movne	r5, #0
 800a4b4:	6833      	ldreq	r3, [r6, #0]
 800a4b6:	f04f 0600 	mov.w	r6, #0
 800a4ba:	bf08      	it	eq
 800a4bc:	1aed      	subeq	r5, r5, r3
 800a4be:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a4c2:	bf08      	it	eq
 800a4c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	bfc4      	itt	gt
 800a4cc:	1a9b      	subgt	r3, r3, r2
 800a4ce:	18ed      	addgt	r5, r5, r3
 800a4d0:	42b5      	cmp	r5, r6
 800a4d2:	d11a      	bne.n	800a50a <_printf_common+0xd2>
 800a4d4:	2000      	movs	r0, #0
 800a4d6:	e008      	b.n	800a4ea <_printf_common+0xb2>
 800a4d8:	2301      	movs	r3, #1
 800a4da:	4652      	mov	r2, sl
 800a4dc:	4641      	mov	r1, r8
 800a4de:	4638      	mov	r0, r7
 800a4e0:	47c8      	blx	r9
 800a4e2:	3001      	adds	r0, #1
 800a4e4:	d103      	bne.n	800a4ee <_printf_common+0xb6>
 800a4e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4ee:	3501      	adds	r5, #1
 800a4f0:	e7c1      	b.n	800a476 <_printf_common+0x3e>
 800a4f2:	18e1      	adds	r1, r4, r3
 800a4f4:	1c5a      	adds	r2, r3, #1
 800a4f6:	2030      	movs	r0, #48	@ 0x30
 800a4f8:	3302      	adds	r3, #2
 800a4fa:	4422      	add	r2, r4
 800a4fc:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a500:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a504:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a508:	e7c2      	b.n	800a490 <_printf_common+0x58>
 800a50a:	2301      	movs	r3, #1
 800a50c:	4622      	mov	r2, r4
 800a50e:	4641      	mov	r1, r8
 800a510:	4638      	mov	r0, r7
 800a512:	47c8      	blx	r9
 800a514:	3001      	adds	r0, #1
 800a516:	d0e6      	beq.n	800a4e6 <_printf_common+0xae>
 800a518:	3601      	adds	r6, #1
 800a51a:	e7d9      	b.n	800a4d0 <_printf_common+0x98>

0800a51c <_printf_i>:
 800a51c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a520:	7e0f      	ldrb	r7, [r1, #24]
 800a522:	4691      	mov	r9, r2
 800a524:	4680      	mov	r8, r0
 800a526:	460c      	mov	r4, r1
 800a528:	2f78      	cmp	r7, #120	@ 0x78
 800a52a:	469a      	mov	sl, r3
 800a52c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a52e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a532:	d807      	bhi.n	800a544 <_printf_i+0x28>
 800a534:	2f62      	cmp	r7, #98	@ 0x62
 800a536:	d80a      	bhi.n	800a54e <_printf_i+0x32>
 800a538:	2f00      	cmp	r7, #0
 800a53a:	f000 80d2 	beq.w	800a6e2 <_printf_i+0x1c6>
 800a53e:	2f58      	cmp	r7, #88	@ 0x58
 800a540:	f000 80b9 	beq.w	800a6b6 <_printf_i+0x19a>
 800a544:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a548:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a54c:	e03a      	b.n	800a5c4 <_printf_i+0xa8>
 800a54e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a552:	2b15      	cmp	r3, #21
 800a554:	d8f6      	bhi.n	800a544 <_printf_i+0x28>
 800a556:	a101      	add	r1, pc, #4	@ (adr r1, 800a55c <_printf_i+0x40>)
 800a558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a55c:	0800a5b5 	.word	0x0800a5b5
 800a560:	0800a5c9 	.word	0x0800a5c9
 800a564:	0800a545 	.word	0x0800a545
 800a568:	0800a545 	.word	0x0800a545
 800a56c:	0800a545 	.word	0x0800a545
 800a570:	0800a545 	.word	0x0800a545
 800a574:	0800a5c9 	.word	0x0800a5c9
 800a578:	0800a545 	.word	0x0800a545
 800a57c:	0800a545 	.word	0x0800a545
 800a580:	0800a545 	.word	0x0800a545
 800a584:	0800a545 	.word	0x0800a545
 800a588:	0800a6c9 	.word	0x0800a6c9
 800a58c:	0800a5f3 	.word	0x0800a5f3
 800a590:	0800a683 	.word	0x0800a683
 800a594:	0800a545 	.word	0x0800a545
 800a598:	0800a545 	.word	0x0800a545
 800a59c:	0800a6eb 	.word	0x0800a6eb
 800a5a0:	0800a545 	.word	0x0800a545
 800a5a4:	0800a5f3 	.word	0x0800a5f3
 800a5a8:	0800a545 	.word	0x0800a545
 800a5ac:	0800a545 	.word	0x0800a545
 800a5b0:	0800a68b 	.word	0x0800a68b
 800a5b4:	6833      	ldr	r3, [r6, #0]
 800a5b6:	1d1a      	adds	r2, r3, #4
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	6032      	str	r2, [r6, #0]
 800a5bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e09d      	b.n	800a704 <_printf_i+0x1e8>
 800a5c8:	6833      	ldr	r3, [r6, #0]
 800a5ca:	6820      	ldr	r0, [r4, #0]
 800a5cc:	1d19      	adds	r1, r3, #4
 800a5ce:	6031      	str	r1, [r6, #0]
 800a5d0:	0606      	lsls	r6, r0, #24
 800a5d2:	d501      	bpl.n	800a5d8 <_printf_i+0xbc>
 800a5d4:	681d      	ldr	r5, [r3, #0]
 800a5d6:	e003      	b.n	800a5e0 <_printf_i+0xc4>
 800a5d8:	0645      	lsls	r5, r0, #25
 800a5da:	d5fb      	bpl.n	800a5d4 <_printf_i+0xb8>
 800a5dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a5e0:	2d00      	cmp	r5, #0
 800a5e2:	da03      	bge.n	800a5ec <_printf_i+0xd0>
 800a5e4:	232d      	movs	r3, #45	@ 0x2d
 800a5e6:	426d      	negs	r5, r5
 800a5e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5ec:	4859      	ldr	r0, [pc, #356]	@ (800a754 <_printf_i+0x238>)
 800a5ee:	230a      	movs	r3, #10
 800a5f0:	e011      	b.n	800a616 <_printf_i+0xfa>
 800a5f2:	6821      	ldr	r1, [r4, #0]
 800a5f4:	6833      	ldr	r3, [r6, #0]
 800a5f6:	0608      	lsls	r0, r1, #24
 800a5f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a5fc:	d402      	bmi.n	800a604 <_printf_i+0xe8>
 800a5fe:	0649      	lsls	r1, r1, #25
 800a600:	bf48      	it	mi
 800a602:	b2ad      	uxthmi	r5, r5
 800a604:	2f6f      	cmp	r7, #111	@ 0x6f
 800a606:	6033      	str	r3, [r6, #0]
 800a608:	4852      	ldr	r0, [pc, #328]	@ (800a754 <_printf_i+0x238>)
 800a60a:	bf14      	ite	ne
 800a60c:	230a      	movne	r3, #10
 800a60e:	2308      	moveq	r3, #8
 800a610:	2100      	movs	r1, #0
 800a612:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a616:	6866      	ldr	r6, [r4, #4]
 800a618:	2e00      	cmp	r6, #0
 800a61a:	60a6      	str	r6, [r4, #8]
 800a61c:	bfa2      	ittt	ge
 800a61e:	6821      	ldrge	r1, [r4, #0]
 800a620:	f021 0104 	bicge.w	r1, r1, #4
 800a624:	6021      	strge	r1, [r4, #0]
 800a626:	b90d      	cbnz	r5, 800a62c <_printf_i+0x110>
 800a628:	2e00      	cmp	r6, #0
 800a62a:	d04b      	beq.n	800a6c4 <_printf_i+0x1a8>
 800a62c:	4616      	mov	r6, r2
 800a62e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a632:	fb03 5711 	mls	r7, r3, r1, r5
 800a636:	5dc7      	ldrb	r7, [r0, r7]
 800a638:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a63c:	462f      	mov	r7, r5
 800a63e:	460d      	mov	r5, r1
 800a640:	42bb      	cmp	r3, r7
 800a642:	d9f4      	bls.n	800a62e <_printf_i+0x112>
 800a644:	2b08      	cmp	r3, #8
 800a646:	d10b      	bne.n	800a660 <_printf_i+0x144>
 800a648:	6823      	ldr	r3, [r4, #0]
 800a64a:	07df      	lsls	r7, r3, #31
 800a64c:	d508      	bpl.n	800a660 <_printf_i+0x144>
 800a64e:	6923      	ldr	r3, [r4, #16]
 800a650:	6861      	ldr	r1, [r4, #4]
 800a652:	4299      	cmp	r1, r3
 800a654:	bfde      	ittt	le
 800a656:	2330      	movle	r3, #48	@ 0x30
 800a658:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a65c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a660:	1b92      	subs	r2, r2, r6
 800a662:	6122      	str	r2, [r4, #16]
 800a664:	464b      	mov	r3, r9
 800a666:	aa03      	add	r2, sp, #12
 800a668:	4621      	mov	r1, r4
 800a66a:	4640      	mov	r0, r8
 800a66c:	f8cd a000 	str.w	sl, [sp]
 800a670:	f7ff fee2 	bl	800a438 <_printf_common>
 800a674:	3001      	adds	r0, #1
 800a676:	d14a      	bne.n	800a70e <_printf_i+0x1f2>
 800a678:	f04f 30ff 	mov.w	r0, #4294967295
 800a67c:	b004      	add	sp, #16
 800a67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a682:	6823      	ldr	r3, [r4, #0]
 800a684:	f043 0320 	orr.w	r3, r3, #32
 800a688:	6023      	str	r3, [r4, #0]
 800a68a:	2778      	movs	r7, #120	@ 0x78
 800a68c:	4832      	ldr	r0, [pc, #200]	@ (800a758 <_printf_i+0x23c>)
 800a68e:	6823      	ldr	r3, [r4, #0]
 800a690:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a694:	061f      	lsls	r7, r3, #24
 800a696:	6831      	ldr	r1, [r6, #0]
 800a698:	f851 5b04 	ldr.w	r5, [r1], #4
 800a69c:	d402      	bmi.n	800a6a4 <_printf_i+0x188>
 800a69e:	065f      	lsls	r7, r3, #25
 800a6a0:	bf48      	it	mi
 800a6a2:	b2ad      	uxthmi	r5, r5
 800a6a4:	6031      	str	r1, [r6, #0]
 800a6a6:	07d9      	lsls	r1, r3, #31
 800a6a8:	bf44      	itt	mi
 800a6aa:	f043 0320 	orrmi.w	r3, r3, #32
 800a6ae:	6023      	strmi	r3, [r4, #0]
 800a6b0:	b11d      	cbz	r5, 800a6ba <_printf_i+0x19e>
 800a6b2:	2310      	movs	r3, #16
 800a6b4:	e7ac      	b.n	800a610 <_printf_i+0xf4>
 800a6b6:	4827      	ldr	r0, [pc, #156]	@ (800a754 <_printf_i+0x238>)
 800a6b8:	e7e9      	b.n	800a68e <_printf_i+0x172>
 800a6ba:	6823      	ldr	r3, [r4, #0]
 800a6bc:	f023 0320 	bic.w	r3, r3, #32
 800a6c0:	6023      	str	r3, [r4, #0]
 800a6c2:	e7f6      	b.n	800a6b2 <_printf_i+0x196>
 800a6c4:	4616      	mov	r6, r2
 800a6c6:	e7bd      	b.n	800a644 <_printf_i+0x128>
 800a6c8:	6833      	ldr	r3, [r6, #0]
 800a6ca:	6825      	ldr	r5, [r4, #0]
 800a6cc:	1d18      	adds	r0, r3, #4
 800a6ce:	6961      	ldr	r1, [r4, #20]
 800a6d0:	6030      	str	r0, [r6, #0]
 800a6d2:	062e      	lsls	r6, r5, #24
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	d501      	bpl.n	800a6dc <_printf_i+0x1c0>
 800a6d8:	6019      	str	r1, [r3, #0]
 800a6da:	e002      	b.n	800a6e2 <_printf_i+0x1c6>
 800a6dc:	0668      	lsls	r0, r5, #25
 800a6de:	d5fb      	bpl.n	800a6d8 <_printf_i+0x1bc>
 800a6e0:	8019      	strh	r1, [r3, #0]
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	4616      	mov	r6, r2
 800a6e6:	6123      	str	r3, [r4, #16]
 800a6e8:	e7bc      	b.n	800a664 <_printf_i+0x148>
 800a6ea:	6833      	ldr	r3, [r6, #0]
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	1d1a      	adds	r2, r3, #4
 800a6f0:	6032      	str	r2, [r6, #0]
 800a6f2:	681e      	ldr	r6, [r3, #0]
 800a6f4:	6862      	ldr	r2, [r4, #4]
 800a6f6:	4630      	mov	r0, r6
 800a6f8:	f000 fae1 	bl	800acbe <memchr>
 800a6fc:	b108      	cbz	r0, 800a702 <_printf_i+0x1e6>
 800a6fe:	1b80      	subs	r0, r0, r6
 800a700:	6060      	str	r0, [r4, #4]
 800a702:	6863      	ldr	r3, [r4, #4]
 800a704:	6123      	str	r3, [r4, #16]
 800a706:	2300      	movs	r3, #0
 800a708:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a70c:	e7aa      	b.n	800a664 <_printf_i+0x148>
 800a70e:	6923      	ldr	r3, [r4, #16]
 800a710:	4632      	mov	r2, r6
 800a712:	4649      	mov	r1, r9
 800a714:	4640      	mov	r0, r8
 800a716:	47d0      	blx	sl
 800a718:	3001      	adds	r0, #1
 800a71a:	d0ad      	beq.n	800a678 <_printf_i+0x15c>
 800a71c:	6823      	ldr	r3, [r4, #0]
 800a71e:	079b      	lsls	r3, r3, #30
 800a720:	d413      	bmi.n	800a74a <_printf_i+0x22e>
 800a722:	68e0      	ldr	r0, [r4, #12]
 800a724:	9b03      	ldr	r3, [sp, #12]
 800a726:	4298      	cmp	r0, r3
 800a728:	bfb8      	it	lt
 800a72a:	4618      	movlt	r0, r3
 800a72c:	e7a6      	b.n	800a67c <_printf_i+0x160>
 800a72e:	2301      	movs	r3, #1
 800a730:	4632      	mov	r2, r6
 800a732:	4649      	mov	r1, r9
 800a734:	4640      	mov	r0, r8
 800a736:	47d0      	blx	sl
 800a738:	3001      	adds	r0, #1
 800a73a:	d09d      	beq.n	800a678 <_printf_i+0x15c>
 800a73c:	3501      	adds	r5, #1
 800a73e:	68e3      	ldr	r3, [r4, #12]
 800a740:	9903      	ldr	r1, [sp, #12]
 800a742:	1a5b      	subs	r3, r3, r1
 800a744:	42ab      	cmp	r3, r5
 800a746:	dcf2      	bgt.n	800a72e <_printf_i+0x212>
 800a748:	e7eb      	b.n	800a722 <_printf_i+0x206>
 800a74a:	2500      	movs	r5, #0
 800a74c:	f104 0619 	add.w	r6, r4, #25
 800a750:	e7f5      	b.n	800a73e <_printf_i+0x222>
 800a752:	bf00      	nop
 800a754:	0800cb7e 	.word	0x0800cb7e
 800a758:	0800cb8f 	.word	0x0800cb8f

0800a75c <std>:
 800a75c:	2300      	movs	r3, #0
 800a75e:	b510      	push	{r4, lr}
 800a760:	4604      	mov	r4, r0
 800a762:	6083      	str	r3, [r0, #8]
 800a764:	8181      	strh	r1, [r0, #12]
 800a766:	4619      	mov	r1, r3
 800a768:	6643      	str	r3, [r0, #100]	@ 0x64
 800a76a:	81c2      	strh	r2, [r0, #14]
 800a76c:	2208      	movs	r2, #8
 800a76e:	6183      	str	r3, [r0, #24]
 800a770:	e9c0 3300 	strd	r3, r3, [r0]
 800a774:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a778:	305c      	adds	r0, #92	@ 0x5c
 800a77a:	f000 fa01 	bl	800ab80 <memset>
 800a77e:	4b0d      	ldr	r3, [pc, #52]	@ (800a7b4 <std+0x58>)
 800a780:	6224      	str	r4, [r4, #32]
 800a782:	6263      	str	r3, [r4, #36]	@ 0x24
 800a784:	4b0c      	ldr	r3, [pc, #48]	@ (800a7b8 <std+0x5c>)
 800a786:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a788:	4b0c      	ldr	r3, [pc, #48]	@ (800a7bc <std+0x60>)
 800a78a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a78c:	4b0c      	ldr	r3, [pc, #48]	@ (800a7c0 <std+0x64>)
 800a78e:	6323      	str	r3, [r4, #48]	@ 0x30
 800a790:	4b0c      	ldr	r3, [pc, #48]	@ (800a7c4 <std+0x68>)
 800a792:	429c      	cmp	r4, r3
 800a794:	d006      	beq.n	800a7a4 <std+0x48>
 800a796:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a79a:	4294      	cmp	r4, r2
 800a79c:	d002      	beq.n	800a7a4 <std+0x48>
 800a79e:	33d0      	adds	r3, #208	@ 0xd0
 800a7a0:	429c      	cmp	r4, r3
 800a7a2:	d105      	bne.n	800a7b0 <std+0x54>
 800a7a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a7a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7ac:	f000 ba84 	b.w	800acb8 <__retarget_lock_init_recursive>
 800a7b0:	bd10      	pop	{r4, pc}
 800a7b2:	bf00      	nop
 800a7b4:	0800a9d1 	.word	0x0800a9d1
 800a7b8:	0800a9f3 	.word	0x0800a9f3
 800a7bc:	0800aa2b 	.word	0x0800aa2b
 800a7c0:	0800aa4f 	.word	0x0800aa4f
 800a7c4:	20000a98 	.word	0x20000a98

0800a7c8 <stdio_exit_handler>:
 800a7c8:	4a02      	ldr	r2, [pc, #8]	@ (800a7d4 <stdio_exit_handler+0xc>)
 800a7ca:	4903      	ldr	r1, [pc, #12]	@ (800a7d8 <stdio_exit_handler+0x10>)
 800a7cc:	4803      	ldr	r0, [pc, #12]	@ (800a7dc <stdio_exit_handler+0x14>)
 800a7ce:	f000 b869 	b.w	800a8a4 <_fwalk_sglue>
 800a7d2:	bf00      	nop
 800a7d4:	2000000c 	.word	0x2000000c
 800a7d8:	0800c635 	.word	0x0800c635
 800a7dc:	2000001c 	.word	0x2000001c

0800a7e0 <cleanup_stdio>:
 800a7e0:	6841      	ldr	r1, [r0, #4]
 800a7e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a814 <cleanup_stdio+0x34>)
 800a7e4:	4299      	cmp	r1, r3
 800a7e6:	b510      	push	{r4, lr}
 800a7e8:	4604      	mov	r4, r0
 800a7ea:	d001      	beq.n	800a7f0 <cleanup_stdio+0x10>
 800a7ec:	f001 ff22 	bl	800c634 <_fflush_r>
 800a7f0:	68a1      	ldr	r1, [r4, #8]
 800a7f2:	4b09      	ldr	r3, [pc, #36]	@ (800a818 <cleanup_stdio+0x38>)
 800a7f4:	4299      	cmp	r1, r3
 800a7f6:	d002      	beq.n	800a7fe <cleanup_stdio+0x1e>
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	f001 ff1b 	bl	800c634 <_fflush_r>
 800a7fe:	68e1      	ldr	r1, [r4, #12]
 800a800:	4b06      	ldr	r3, [pc, #24]	@ (800a81c <cleanup_stdio+0x3c>)
 800a802:	4299      	cmp	r1, r3
 800a804:	d004      	beq.n	800a810 <cleanup_stdio+0x30>
 800a806:	4620      	mov	r0, r4
 800a808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a80c:	f001 bf12 	b.w	800c634 <_fflush_r>
 800a810:	bd10      	pop	{r4, pc}
 800a812:	bf00      	nop
 800a814:	20000a98 	.word	0x20000a98
 800a818:	20000b00 	.word	0x20000b00
 800a81c:	20000b68 	.word	0x20000b68

0800a820 <global_stdio_init.part.0>:
 800a820:	b510      	push	{r4, lr}
 800a822:	4b0b      	ldr	r3, [pc, #44]	@ (800a850 <global_stdio_init.part.0+0x30>)
 800a824:	2104      	movs	r1, #4
 800a826:	4c0b      	ldr	r4, [pc, #44]	@ (800a854 <global_stdio_init.part.0+0x34>)
 800a828:	4a0b      	ldr	r2, [pc, #44]	@ (800a858 <global_stdio_init.part.0+0x38>)
 800a82a:	4620      	mov	r0, r4
 800a82c:	601a      	str	r2, [r3, #0]
 800a82e:	2200      	movs	r2, #0
 800a830:	f7ff ff94 	bl	800a75c <std>
 800a834:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a838:	2201      	movs	r2, #1
 800a83a:	2109      	movs	r1, #9
 800a83c:	f7ff ff8e 	bl	800a75c <std>
 800a840:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a844:	2202      	movs	r2, #2
 800a846:	2112      	movs	r1, #18
 800a848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a84c:	f7ff bf86 	b.w	800a75c <std>
 800a850:	20000bd0 	.word	0x20000bd0
 800a854:	20000a98 	.word	0x20000a98
 800a858:	0800a7c9 	.word	0x0800a7c9

0800a85c <__sfp_lock_acquire>:
 800a85c:	4801      	ldr	r0, [pc, #4]	@ (800a864 <__sfp_lock_acquire+0x8>)
 800a85e:	f000 ba2c 	b.w	800acba <__retarget_lock_acquire_recursive>
 800a862:	bf00      	nop
 800a864:	20000bd9 	.word	0x20000bd9

0800a868 <__sfp_lock_release>:
 800a868:	4801      	ldr	r0, [pc, #4]	@ (800a870 <__sfp_lock_release+0x8>)
 800a86a:	f000 ba27 	b.w	800acbc <__retarget_lock_release_recursive>
 800a86e:	bf00      	nop
 800a870:	20000bd9 	.word	0x20000bd9

0800a874 <__sinit>:
 800a874:	b510      	push	{r4, lr}
 800a876:	4604      	mov	r4, r0
 800a878:	f7ff fff0 	bl	800a85c <__sfp_lock_acquire>
 800a87c:	6a23      	ldr	r3, [r4, #32]
 800a87e:	b11b      	cbz	r3, 800a888 <__sinit+0x14>
 800a880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a884:	f7ff bff0 	b.w	800a868 <__sfp_lock_release>
 800a888:	4b04      	ldr	r3, [pc, #16]	@ (800a89c <__sinit+0x28>)
 800a88a:	6223      	str	r3, [r4, #32]
 800a88c:	4b04      	ldr	r3, [pc, #16]	@ (800a8a0 <__sinit+0x2c>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d1f5      	bne.n	800a880 <__sinit+0xc>
 800a894:	f7ff ffc4 	bl	800a820 <global_stdio_init.part.0>
 800a898:	e7f2      	b.n	800a880 <__sinit+0xc>
 800a89a:	bf00      	nop
 800a89c:	0800a7e1 	.word	0x0800a7e1
 800a8a0:	20000bd0 	.word	0x20000bd0

0800a8a4 <_fwalk_sglue>:
 800a8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8a8:	4607      	mov	r7, r0
 800a8aa:	4688      	mov	r8, r1
 800a8ac:	4614      	mov	r4, r2
 800a8ae:	2600      	movs	r6, #0
 800a8b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8b4:	f1b9 0901 	subs.w	r9, r9, #1
 800a8b8:	d505      	bpl.n	800a8c6 <_fwalk_sglue+0x22>
 800a8ba:	6824      	ldr	r4, [r4, #0]
 800a8bc:	2c00      	cmp	r4, #0
 800a8be:	d1f7      	bne.n	800a8b0 <_fwalk_sglue+0xc>
 800a8c0:	4630      	mov	r0, r6
 800a8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8c6:	89ab      	ldrh	r3, [r5, #12]
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d907      	bls.n	800a8dc <_fwalk_sglue+0x38>
 800a8cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	d003      	beq.n	800a8dc <_fwalk_sglue+0x38>
 800a8d4:	4629      	mov	r1, r5
 800a8d6:	4638      	mov	r0, r7
 800a8d8:	47c0      	blx	r8
 800a8da:	4306      	orrs	r6, r0
 800a8dc:	3568      	adds	r5, #104	@ 0x68
 800a8de:	e7e9      	b.n	800a8b4 <_fwalk_sglue+0x10>

0800a8e0 <iprintf>:
 800a8e0:	b40f      	push	{r0, r1, r2, r3}
 800a8e2:	b507      	push	{r0, r1, r2, lr}
 800a8e4:	4906      	ldr	r1, [pc, #24]	@ (800a900 <iprintf+0x20>)
 800a8e6:	ab04      	add	r3, sp, #16
 800a8e8:	6808      	ldr	r0, [r1, #0]
 800a8ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8ee:	6881      	ldr	r1, [r0, #8]
 800a8f0:	9301      	str	r3, [sp, #4]
 800a8f2:	f001 fd03 	bl	800c2fc <_vfiprintf_r>
 800a8f6:	b003      	add	sp, #12
 800a8f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8fc:	b004      	add	sp, #16
 800a8fe:	4770      	bx	lr
 800a900:	20000018 	.word	0x20000018

0800a904 <putchar>:
 800a904:	4b02      	ldr	r3, [pc, #8]	@ (800a910 <putchar+0xc>)
 800a906:	4601      	mov	r1, r0
 800a908:	6818      	ldr	r0, [r3, #0]
 800a90a:	6882      	ldr	r2, [r0, #8]
 800a90c:	f001 bf1b 	b.w	800c746 <_putc_r>
 800a910:	20000018 	.word	0x20000018

0800a914 <_puts_r>:
 800a914:	6a03      	ldr	r3, [r0, #32]
 800a916:	b570      	push	{r4, r5, r6, lr}
 800a918:	4605      	mov	r5, r0
 800a91a:	460e      	mov	r6, r1
 800a91c:	6884      	ldr	r4, [r0, #8]
 800a91e:	b90b      	cbnz	r3, 800a924 <_puts_r+0x10>
 800a920:	f7ff ffa8 	bl	800a874 <__sinit>
 800a924:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a926:	07db      	lsls	r3, r3, #31
 800a928:	d405      	bmi.n	800a936 <_puts_r+0x22>
 800a92a:	89a3      	ldrh	r3, [r4, #12]
 800a92c:	0598      	lsls	r0, r3, #22
 800a92e:	d402      	bmi.n	800a936 <_puts_r+0x22>
 800a930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a932:	f000 f9c2 	bl	800acba <__retarget_lock_acquire_recursive>
 800a936:	89a3      	ldrh	r3, [r4, #12]
 800a938:	0719      	lsls	r1, r3, #28
 800a93a:	d502      	bpl.n	800a942 <_puts_r+0x2e>
 800a93c:	6923      	ldr	r3, [r4, #16]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d135      	bne.n	800a9ae <_puts_r+0x9a>
 800a942:	4621      	mov	r1, r4
 800a944:	4628      	mov	r0, r5
 800a946:	f000 f8c5 	bl	800aad4 <__swsetup_r>
 800a94a:	b380      	cbz	r0, 800a9ae <_puts_r+0x9a>
 800a94c:	f04f 35ff 	mov.w	r5, #4294967295
 800a950:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a952:	07da      	lsls	r2, r3, #31
 800a954:	d405      	bmi.n	800a962 <_puts_r+0x4e>
 800a956:	89a3      	ldrh	r3, [r4, #12]
 800a958:	059b      	lsls	r3, r3, #22
 800a95a:	d402      	bmi.n	800a962 <_puts_r+0x4e>
 800a95c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a95e:	f000 f9ad 	bl	800acbc <__retarget_lock_release_recursive>
 800a962:	4628      	mov	r0, r5
 800a964:	bd70      	pop	{r4, r5, r6, pc}
 800a966:	2b00      	cmp	r3, #0
 800a968:	da04      	bge.n	800a974 <_puts_r+0x60>
 800a96a:	69a2      	ldr	r2, [r4, #24]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	dc17      	bgt.n	800a9a0 <_puts_r+0x8c>
 800a970:	290a      	cmp	r1, #10
 800a972:	d015      	beq.n	800a9a0 <_puts_r+0x8c>
 800a974:	6823      	ldr	r3, [r4, #0]
 800a976:	1c5a      	adds	r2, r3, #1
 800a978:	6022      	str	r2, [r4, #0]
 800a97a:	7019      	strb	r1, [r3, #0]
 800a97c:	68a3      	ldr	r3, [r4, #8]
 800a97e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a982:	3b01      	subs	r3, #1
 800a984:	60a3      	str	r3, [r4, #8]
 800a986:	2900      	cmp	r1, #0
 800a988:	d1ed      	bne.n	800a966 <_puts_r+0x52>
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	da11      	bge.n	800a9b2 <_puts_r+0x9e>
 800a98e:	4622      	mov	r2, r4
 800a990:	210a      	movs	r1, #10
 800a992:	4628      	mov	r0, r5
 800a994:	f000 f85f 	bl	800aa56 <__swbuf_r>
 800a998:	3001      	adds	r0, #1
 800a99a:	d0d7      	beq.n	800a94c <_puts_r+0x38>
 800a99c:	250a      	movs	r5, #10
 800a99e:	e7d7      	b.n	800a950 <_puts_r+0x3c>
 800a9a0:	4622      	mov	r2, r4
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	f000 f857 	bl	800aa56 <__swbuf_r>
 800a9a8:	3001      	adds	r0, #1
 800a9aa:	d1e7      	bne.n	800a97c <_puts_r+0x68>
 800a9ac:	e7ce      	b.n	800a94c <_puts_r+0x38>
 800a9ae:	3e01      	subs	r6, #1
 800a9b0:	e7e4      	b.n	800a97c <_puts_r+0x68>
 800a9b2:	6823      	ldr	r3, [r4, #0]
 800a9b4:	1c5a      	adds	r2, r3, #1
 800a9b6:	6022      	str	r2, [r4, #0]
 800a9b8:	220a      	movs	r2, #10
 800a9ba:	701a      	strb	r2, [r3, #0]
 800a9bc:	e7ee      	b.n	800a99c <_puts_r+0x88>
	...

0800a9c0 <puts>:
 800a9c0:	4b02      	ldr	r3, [pc, #8]	@ (800a9cc <puts+0xc>)
 800a9c2:	4601      	mov	r1, r0
 800a9c4:	6818      	ldr	r0, [r3, #0]
 800a9c6:	f7ff bfa5 	b.w	800a914 <_puts_r>
 800a9ca:	bf00      	nop
 800a9cc:	20000018 	.word	0x20000018

0800a9d0 <__sread>:
 800a9d0:	b510      	push	{r4, lr}
 800a9d2:	460c      	mov	r4, r1
 800a9d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9d8:	f000 f920 	bl	800ac1c <_read_r>
 800a9dc:	2800      	cmp	r0, #0
 800a9de:	bfab      	itete	ge
 800a9e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a9e2:	89a3      	ldrhlt	r3, [r4, #12]
 800a9e4:	181b      	addge	r3, r3, r0
 800a9e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a9ea:	bfac      	ite	ge
 800a9ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a9ee:	81a3      	strhlt	r3, [r4, #12]
 800a9f0:	bd10      	pop	{r4, pc}

0800a9f2 <__swrite>:
 800a9f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f6:	461f      	mov	r7, r3
 800a9f8:	898b      	ldrh	r3, [r1, #12]
 800a9fa:	4605      	mov	r5, r0
 800a9fc:	460c      	mov	r4, r1
 800a9fe:	05db      	lsls	r3, r3, #23
 800aa00:	4616      	mov	r6, r2
 800aa02:	d505      	bpl.n	800aa10 <__swrite+0x1e>
 800aa04:	2302      	movs	r3, #2
 800aa06:	2200      	movs	r2, #0
 800aa08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa0c:	f000 f8f4 	bl	800abf8 <_lseek_r>
 800aa10:	89a3      	ldrh	r3, [r4, #12]
 800aa12:	4632      	mov	r2, r6
 800aa14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa18:	4628      	mov	r0, r5
 800aa1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aa1e:	81a3      	strh	r3, [r4, #12]
 800aa20:	463b      	mov	r3, r7
 800aa22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa26:	f000 b90b 	b.w	800ac40 <_write_r>

0800aa2a <__sseek>:
 800aa2a:	b510      	push	{r4, lr}
 800aa2c:	460c      	mov	r4, r1
 800aa2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa32:	f000 f8e1 	bl	800abf8 <_lseek_r>
 800aa36:	1c43      	adds	r3, r0, #1
 800aa38:	89a3      	ldrh	r3, [r4, #12]
 800aa3a:	bf15      	itete	ne
 800aa3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aa3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aa42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aa46:	81a3      	strheq	r3, [r4, #12]
 800aa48:	bf18      	it	ne
 800aa4a:	81a3      	strhne	r3, [r4, #12]
 800aa4c:	bd10      	pop	{r4, pc}

0800aa4e <__sclose>:
 800aa4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa52:	f000 b8c1 	b.w	800abd8 <_close_r>

0800aa56 <__swbuf_r>:
 800aa56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa58:	460e      	mov	r6, r1
 800aa5a:	4614      	mov	r4, r2
 800aa5c:	4605      	mov	r5, r0
 800aa5e:	b118      	cbz	r0, 800aa68 <__swbuf_r+0x12>
 800aa60:	6a03      	ldr	r3, [r0, #32]
 800aa62:	b90b      	cbnz	r3, 800aa68 <__swbuf_r+0x12>
 800aa64:	f7ff ff06 	bl	800a874 <__sinit>
 800aa68:	69a3      	ldr	r3, [r4, #24]
 800aa6a:	60a3      	str	r3, [r4, #8]
 800aa6c:	89a3      	ldrh	r3, [r4, #12]
 800aa6e:	071a      	lsls	r2, r3, #28
 800aa70:	d501      	bpl.n	800aa76 <__swbuf_r+0x20>
 800aa72:	6923      	ldr	r3, [r4, #16]
 800aa74:	b943      	cbnz	r3, 800aa88 <__swbuf_r+0x32>
 800aa76:	4621      	mov	r1, r4
 800aa78:	4628      	mov	r0, r5
 800aa7a:	f000 f82b 	bl	800aad4 <__swsetup_r>
 800aa7e:	b118      	cbz	r0, 800aa88 <__swbuf_r+0x32>
 800aa80:	f04f 37ff 	mov.w	r7, #4294967295
 800aa84:	4638      	mov	r0, r7
 800aa86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa88:	6823      	ldr	r3, [r4, #0]
 800aa8a:	b2f6      	uxtb	r6, r6
 800aa8c:	6922      	ldr	r2, [r4, #16]
 800aa8e:	4637      	mov	r7, r6
 800aa90:	1a98      	subs	r0, r3, r2
 800aa92:	6963      	ldr	r3, [r4, #20]
 800aa94:	4283      	cmp	r3, r0
 800aa96:	dc05      	bgt.n	800aaa4 <__swbuf_r+0x4e>
 800aa98:	4621      	mov	r1, r4
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	f001 fdca 	bl	800c634 <_fflush_r>
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	d1ed      	bne.n	800aa80 <__swbuf_r+0x2a>
 800aaa4:	68a3      	ldr	r3, [r4, #8]
 800aaa6:	3b01      	subs	r3, #1
 800aaa8:	60a3      	str	r3, [r4, #8]
 800aaaa:	6823      	ldr	r3, [r4, #0]
 800aaac:	1c5a      	adds	r2, r3, #1
 800aaae:	6022      	str	r2, [r4, #0]
 800aab0:	701e      	strb	r6, [r3, #0]
 800aab2:	1c43      	adds	r3, r0, #1
 800aab4:	6962      	ldr	r2, [r4, #20]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d004      	beq.n	800aac4 <__swbuf_r+0x6e>
 800aaba:	89a3      	ldrh	r3, [r4, #12]
 800aabc:	07db      	lsls	r3, r3, #31
 800aabe:	d5e1      	bpl.n	800aa84 <__swbuf_r+0x2e>
 800aac0:	2e0a      	cmp	r6, #10
 800aac2:	d1df      	bne.n	800aa84 <__swbuf_r+0x2e>
 800aac4:	4621      	mov	r1, r4
 800aac6:	4628      	mov	r0, r5
 800aac8:	f001 fdb4 	bl	800c634 <_fflush_r>
 800aacc:	2800      	cmp	r0, #0
 800aace:	d0d9      	beq.n	800aa84 <__swbuf_r+0x2e>
 800aad0:	e7d6      	b.n	800aa80 <__swbuf_r+0x2a>
	...

0800aad4 <__swsetup_r>:
 800aad4:	b538      	push	{r3, r4, r5, lr}
 800aad6:	4b29      	ldr	r3, [pc, #164]	@ (800ab7c <__swsetup_r+0xa8>)
 800aad8:	4605      	mov	r5, r0
 800aada:	460c      	mov	r4, r1
 800aadc:	6818      	ldr	r0, [r3, #0]
 800aade:	b118      	cbz	r0, 800aae8 <__swsetup_r+0x14>
 800aae0:	6a03      	ldr	r3, [r0, #32]
 800aae2:	b90b      	cbnz	r3, 800aae8 <__swsetup_r+0x14>
 800aae4:	f7ff fec6 	bl	800a874 <__sinit>
 800aae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaec:	0719      	lsls	r1, r3, #28
 800aaee:	d422      	bmi.n	800ab36 <__swsetup_r+0x62>
 800aaf0:	06da      	lsls	r2, r3, #27
 800aaf2:	d407      	bmi.n	800ab04 <__swsetup_r+0x30>
 800aaf4:	2209      	movs	r2, #9
 800aaf6:	602a      	str	r2, [r5, #0]
 800aaf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aafc:	f04f 30ff 	mov.w	r0, #4294967295
 800ab00:	81a3      	strh	r3, [r4, #12]
 800ab02:	e033      	b.n	800ab6c <__swsetup_r+0x98>
 800ab04:	0758      	lsls	r0, r3, #29
 800ab06:	d512      	bpl.n	800ab2e <__swsetup_r+0x5a>
 800ab08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab0a:	b141      	cbz	r1, 800ab1e <__swsetup_r+0x4a>
 800ab0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab10:	4299      	cmp	r1, r3
 800ab12:	d002      	beq.n	800ab1a <__swsetup_r+0x46>
 800ab14:	4628      	mov	r0, r5
 800ab16:	f000 ff3f 	bl	800b998 <_free_r>
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab1e:	89a3      	ldrh	r3, [r4, #12]
 800ab20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ab24:	81a3      	strh	r3, [r4, #12]
 800ab26:	2300      	movs	r3, #0
 800ab28:	6063      	str	r3, [r4, #4]
 800ab2a:	6923      	ldr	r3, [r4, #16]
 800ab2c:	6023      	str	r3, [r4, #0]
 800ab2e:	89a3      	ldrh	r3, [r4, #12]
 800ab30:	f043 0308 	orr.w	r3, r3, #8
 800ab34:	81a3      	strh	r3, [r4, #12]
 800ab36:	6923      	ldr	r3, [r4, #16]
 800ab38:	b94b      	cbnz	r3, 800ab4e <__swsetup_r+0x7a>
 800ab3a:	89a3      	ldrh	r3, [r4, #12]
 800ab3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ab40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab44:	d003      	beq.n	800ab4e <__swsetup_r+0x7a>
 800ab46:	4621      	mov	r1, r4
 800ab48:	4628      	mov	r0, r5
 800ab4a:	f001 fdc0 	bl	800c6ce <__smakebuf_r>
 800ab4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab52:	f013 0201 	ands.w	r2, r3, #1
 800ab56:	d00a      	beq.n	800ab6e <__swsetup_r+0x9a>
 800ab58:	2200      	movs	r2, #0
 800ab5a:	60a2      	str	r2, [r4, #8]
 800ab5c:	6962      	ldr	r2, [r4, #20]
 800ab5e:	4252      	negs	r2, r2
 800ab60:	61a2      	str	r2, [r4, #24]
 800ab62:	6922      	ldr	r2, [r4, #16]
 800ab64:	b942      	cbnz	r2, 800ab78 <__swsetup_r+0xa4>
 800ab66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ab6a:	d1c5      	bne.n	800aaf8 <__swsetup_r+0x24>
 800ab6c:	bd38      	pop	{r3, r4, r5, pc}
 800ab6e:	0799      	lsls	r1, r3, #30
 800ab70:	bf58      	it	pl
 800ab72:	6962      	ldrpl	r2, [r4, #20]
 800ab74:	60a2      	str	r2, [r4, #8]
 800ab76:	e7f4      	b.n	800ab62 <__swsetup_r+0x8e>
 800ab78:	2000      	movs	r0, #0
 800ab7a:	e7f7      	b.n	800ab6c <__swsetup_r+0x98>
 800ab7c:	20000018 	.word	0x20000018

0800ab80 <memset>:
 800ab80:	4402      	add	r2, r0
 800ab82:	4603      	mov	r3, r0
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d100      	bne.n	800ab8a <memset+0xa>
 800ab88:	4770      	bx	lr
 800ab8a:	f803 1b01 	strb.w	r1, [r3], #1
 800ab8e:	e7f9      	b.n	800ab84 <memset+0x4>

0800ab90 <strncpy>:
 800ab90:	3901      	subs	r1, #1
 800ab92:	4603      	mov	r3, r0
 800ab94:	b510      	push	{r4, lr}
 800ab96:	b132      	cbz	r2, 800aba6 <strncpy+0x16>
 800ab98:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ab9c:	3a01      	subs	r2, #1
 800ab9e:	f803 4b01 	strb.w	r4, [r3], #1
 800aba2:	2c00      	cmp	r4, #0
 800aba4:	d1f7      	bne.n	800ab96 <strncpy+0x6>
 800aba6:	441a      	add	r2, r3
 800aba8:	2100      	movs	r1, #0
 800abaa:	4293      	cmp	r3, r2
 800abac:	d100      	bne.n	800abb0 <strncpy+0x20>
 800abae:	bd10      	pop	{r4, pc}
 800abb0:	f803 1b01 	strb.w	r1, [r3], #1
 800abb4:	e7f9      	b.n	800abaa <strncpy+0x1a>

0800abb6 <strnlen>:
 800abb6:	4602      	mov	r2, r0
 800abb8:	4401      	add	r1, r0
 800abba:	b510      	push	{r4, lr}
 800abbc:	428a      	cmp	r2, r1
 800abbe:	4613      	mov	r3, r2
 800abc0:	d003      	beq.n	800abca <strnlen+0x14>
 800abc2:	781c      	ldrb	r4, [r3, #0]
 800abc4:	3201      	adds	r2, #1
 800abc6:	2c00      	cmp	r4, #0
 800abc8:	d1f8      	bne.n	800abbc <strnlen+0x6>
 800abca:	1a18      	subs	r0, r3, r0
 800abcc:	bd10      	pop	{r4, pc}
	...

0800abd0 <_localeconv_r>:
 800abd0:	4800      	ldr	r0, [pc, #0]	@ (800abd4 <_localeconv_r+0x4>)
 800abd2:	4770      	bx	lr
 800abd4:	20000158 	.word	0x20000158

0800abd8 <_close_r>:
 800abd8:	b538      	push	{r3, r4, r5, lr}
 800abda:	2300      	movs	r3, #0
 800abdc:	4d05      	ldr	r5, [pc, #20]	@ (800abf4 <_close_r+0x1c>)
 800abde:	4604      	mov	r4, r0
 800abe0:	4608      	mov	r0, r1
 800abe2:	602b      	str	r3, [r5, #0]
 800abe4:	f7f9 fb1e 	bl	8004224 <_close>
 800abe8:	1c43      	adds	r3, r0, #1
 800abea:	d102      	bne.n	800abf2 <_close_r+0x1a>
 800abec:	682b      	ldr	r3, [r5, #0]
 800abee:	b103      	cbz	r3, 800abf2 <_close_r+0x1a>
 800abf0:	6023      	str	r3, [r4, #0]
 800abf2:	bd38      	pop	{r3, r4, r5, pc}
 800abf4:	20000bd4 	.word	0x20000bd4

0800abf8 <_lseek_r>:
 800abf8:	b538      	push	{r3, r4, r5, lr}
 800abfa:	4604      	mov	r4, r0
 800abfc:	4d06      	ldr	r5, [pc, #24]	@ (800ac18 <_lseek_r+0x20>)
 800abfe:	4608      	mov	r0, r1
 800ac00:	4611      	mov	r1, r2
 800ac02:	2200      	movs	r2, #0
 800ac04:	602a      	str	r2, [r5, #0]
 800ac06:	461a      	mov	r2, r3
 800ac08:	f7f9 fb33 	bl	8004272 <_lseek>
 800ac0c:	1c43      	adds	r3, r0, #1
 800ac0e:	d102      	bne.n	800ac16 <_lseek_r+0x1e>
 800ac10:	682b      	ldr	r3, [r5, #0]
 800ac12:	b103      	cbz	r3, 800ac16 <_lseek_r+0x1e>
 800ac14:	6023      	str	r3, [r4, #0]
 800ac16:	bd38      	pop	{r3, r4, r5, pc}
 800ac18:	20000bd4 	.word	0x20000bd4

0800ac1c <_read_r>:
 800ac1c:	b538      	push	{r3, r4, r5, lr}
 800ac1e:	4604      	mov	r4, r0
 800ac20:	4d06      	ldr	r5, [pc, #24]	@ (800ac3c <_read_r+0x20>)
 800ac22:	4608      	mov	r0, r1
 800ac24:	4611      	mov	r1, r2
 800ac26:	2200      	movs	r2, #0
 800ac28:	602a      	str	r2, [r5, #0]
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	f7f9 fac1 	bl	80041b2 <_read>
 800ac30:	1c43      	adds	r3, r0, #1
 800ac32:	d102      	bne.n	800ac3a <_read_r+0x1e>
 800ac34:	682b      	ldr	r3, [r5, #0]
 800ac36:	b103      	cbz	r3, 800ac3a <_read_r+0x1e>
 800ac38:	6023      	str	r3, [r4, #0]
 800ac3a:	bd38      	pop	{r3, r4, r5, pc}
 800ac3c:	20000bd4 	.word	0x20000bd4

0800ac40 <_write_r>:
 800ac40:	b538      	push	{r3, r4, r5, lr}
 800ac42:	4604      	mov	r4, r0
 800ac44:	4d06      	ldr	r5, [pc, #24]	@ (800ac60 <_write_r+0x20>)
 800ac46:	4608      	mov	r0, r1
 800ac48:	4611      	mov	r1, r2
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	602a      	str	r2, [r5, #0]
 800ac4e:	461a      	mov	r2, r3
 800ac50:	f7f9 facc 	bl	80041ec <_write>
 800ac54:	1c43      	adds	r3, r0, #1
 800ac56:	d102      	bne.n	800ac5e <_write_r+0x1e>
 800ac58:	682b      	ldr	r3, [r5, #0]
 800ac5a:	b103      	cbz	r3, 800ac5e <_write_r+0x1e>
 800ac5c:	6023      	str	r3, [r4, #0]
 800ac5e:	bd38      	pop	{r3, r4, r5, pc}
 800ac60:	20000bd4 	.word	0x20000bd4

0800ac64 <__errno>:
 800ac64:	4b01      	ldr	r3, [pc, #4]	@ (800ac6c <__errno+0x8>)
 800ac66:	6818      	ldr	r0, [r3, #0]
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	20000018 	.word	0x20000018

0800ac70 <__libc_init_array>:
 800ac70:	b570      	push	{r4, r5, r6, lr}
 800ac72:	4d0d      	ldr	r5, [pc, #52]	@ (800aca8 <__libc_init_array+0x38>)
 800ac74:	2600      	movs	r6, #0
 800ac76:	4c0d      	ldr	r4, [pc, #52]	@ (800acac <__libc_init_array+0x3c>)
 800ac78:	1b64      	subs	r4, r4, r5
 800ac7a:	10a4      	asrs	r4, r4, #2
 800ac7c:	42a6      	cmp	r6, r4
 800ac7e:	d109      	bne.n	800ac94 <__libc_init_array+0x24>
 800ac80:	4d0b      	ldr	r5, [pc, #44]	@ (800acb0 <__libc_init_array+0x40>)
 800ac82:	2600      	movs	r6, #0
 800ac84:	4c0b      	ldr	r4, [pc, #44]	@ (800acb4 <__libc_init_array+0x44>)
 800ac86:	f001 fe75 	bl	800c974 <_init>
 800ac8a:	1b64      	subs	r4, r4, r5
 800ac8c:	10a4      	asrs	r4, r4, #2
 800ac8e:	42a6      	cmp	r6, r4
 800ac90:	d105      	bne.n	800ac9e <__libc_init_array+0x2e>
 800ac92:	bd70      	pop	{r4, r5, r6, pc}
 800ac94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac98:	3601      	adds	r6, #1
 800ac9a:	4798      	blx	r3
 800ac9c:	e7ee      	b.n	800ac7c <__libc_init_array+0xc>
 800ac9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aca2:	3601      	adds	r6, #1
 800aca4:	4798      	blx	r3
 800aca6:	e7f2      	b.n	800ac8e <__libc_init_array+0x1e>
 800aca8:	0800cee8 	.word	0x0800cee8
 800acac:	0800cee8 	.word	0x0800cee8
 800acb0:	0800cee8 	.word	0x0800cee8
 800acb4:	0800ceec 	.word	0x0800ceec

0800acb8 <__retarget_lock_init_recursive>:
 800acb8:	4770      	bx	lr

0800acba <__retarget_lock_acquire_recursive>:
 800acba:	4770      	bx	lr

0800acbc <__retarget_lock_release_recursive>:
 800acbc:	4770      	bx	lr

0800acbe <memchr>:
 800acbe:	b2c9      	uxtb	r1, r1
 800acc0:	4603      	mov	r3, r0
 800acc2:	4402      	add	r2, r0
 800acc4:	b510      	push	{r4, lr}
 800acc6:	4293      	cmp	r3, r2
 800acc8:	4618      	mov	r0, r3
 800acca:	d101      	bne.n	800acd0 <memchr+0x12>
 800accc:	2000      	movs	r0, #0
 800acce:	e003      	b.n	800acd8 <memchr+0x1a>
 800acd0:	7804      	ldrb	r4, [r0, #0]
 800acd2:	3301      	adds	r3, #1
 800acd4:	428c      	cmp	r4, r1
 800acd6:	d1f6      	bne.n	800acc6 <memchr+0x8>
 800acd8:	bd10      	pop	{r4, pc}

0800acda <memcpy>:
 800acda:	440a      	add	r2, r1
 800acdc:	1e43      	subs	r3, r0, #1
 800acde:	4291      	cmp	r1, r2
 800ace0:	d100      	bne.n	800ace4 <memcpy+0xa>
 800ace2:	4770      	bx	lr
 800ace4:	b510      	push	{r4, lr}
 800ace6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acea:	4291      	cmp	r1, r2
 800acec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acf0:	d1f9      	bne.n	800ace6 <memcpy+0xc>
 800acf2:	bd10      	pop	{r4, pc}

0800acf4 <quorem>:
 800acf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf8:	6903      	ldr	r3, [r0, #16]
 800acfa:	4607      	mov	r7, r0
 800acfc:	690c      	ldr	r4, [r1, #16]
 800acfe:	42a3      	cmp	r3, r4
 800ad00:	f2c0 8083 	blt.w	800ae0a <quorem+0x116>
 800ad04:	3c01      	subs	r4, #1
 800ad06:	f100 0514 	add.w	r5, r0, #20
 800ad0a:	f101 0814 	add.w	r8, r1, #20
 800ad0e:	00a3      	lsls	r3, r4, #2
 800ad10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad18:	9300      	str	r3, [sp, #0]
 800ad1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad1e:	9301      	str	r3, [sp, #4]
 800ad20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad24:	3301      	adds	r3, #1
 800ad26:	429a      	cmp	r2, r3
 800ad28:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad2c:	d331      	bcc.n	800ad92 <quorem+0x9e>
 800ad2e:	f04f 0a00 	mov.w	sl, #0
 800ad32:	46c4      	mov	ip, r8
 800ad34:	46ae      	mov	lr, r5
 800ad36:	46d3      	mov	fp, sl
 800ad38:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ad3c:	b298      	uxth	r0, r3
 800ad3e:	45e1      	cmp	r9, ip
 800ad40:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800ad44:	fb06 a000 	mla	r0, r6, r0, sl
 800ad48:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800ad4c:	b280      	uxth	r0, r0
 800ad4e:	fb06 2303 	mla	r3, r6, r3, r2
 800ad52:	f8de 2000 	ldr.w	r2, [lr]
 800ad56:	b292      	uxth	r2, r2
 800ad58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad5c:	eba2 0200 	sub.w	r2, r2, r0
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	f8de 0000 	ldr.w	r0, [lr]
 800ad66:	445a      	add	r2, fp
 800ad68:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ad6c:	b292      	uxth	r2, r2
 800ad6e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ad72:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ad76:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ad7a:	f84e 2b04 	str.w	r2, [lr], #4
 800ad7e:	d2db      	bcs.n	800ad38 <quorem+0x44>
 800ad80:	9b00      	ldr	r3, [sp, #0]
 800ad82:	58eb      	ldr	r3, [r5, r3]
 800ad84:	b92b      	cbnz	r3, 800ad92 <quorem+0x9e>
 800ad86:	9b01      	ldr	r3, [sp, #4]
 800ad88:	3b04      	subs	r3, #4
 800ad8a:	429d      	cmp	r5, r3
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	d330      	bcc.n	800adf2 <quorem+0xfe>
 800ad90:	613c      	str	r4, [r7, #16]
 800ad92:	4638      	mov	r0, r7
 800ad94:	f001 f97c 	bl	800c090 <__mcmp>
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	db26      	blt.n	800adea <quorem+0xf6>
 800ad9c:	4629      	mov	r1, r5
 800ad9e:	2000      	movs	r0, #0
 800ada0:	f858 2b04 	ldr.w	r2, [r8], #4
 800ada4:	f8d1 c000 	ldr.w	ip, [r1]
 800ada8:	fa1f fe82 	uxth.w	lr, r2
 800adac:	45c1      	cmp	r9, r8
 800adae:	fa1f f38c 	uxth.w	r3, ip
 800adb2:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800adb6:	eba3 030e 	sub.w	r3, r3, lr
 800adba:	4403      	add	r3, r0
 800adbc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800adc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adca:	ea4f 4022 	mov.w	r0, r2, asr #16
 800adce:	f841 3b04 	str.w	r3, [r1], #4
 800add2:	d2e5      	bcs.n	800ada0 <quorem+0xac>
 800add4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800add8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800addc:	b922      	cbnz	r2, 800ade8 <quorem+0xf4>
 800adde:	3b04      	subs	r3, #4
 800ade0:	429d      	cmp	r5, r3
 800ade2:	461a      	mov	r2, r3
 800ade4:	d30b      	bcc.n	800adfe <quorem+0x10a>
 800ade6:	613c      	str	r4, [r7, #16]
 800ade8:	3601      	adds	r6, #1
 800adea:	4630      	mov	r0, r6
 800adec:	b003      	add	sp, #12
 800adee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf2:	6812      	ldr	r2, [r2, #0]
 800adf4:	3b04      	subs	r3, #4
 800adf6:	2a00      	cmp	r2, #0
 800adf8:	d1ca      	bne.n	800ad90 <quorem+0x9c>
 800adfa:	3c01      	subs	r4, #1
 800adfc:	e7c5      	b.n	800ad8a <quorem+0x96>
 800adfe:	6812      	ldr	r2, [r2, #0]
 800ae00:	3b04      	subs	r3, #4
 800ae02:	2a00      	cmp	r2, #0
 800ae04:	d1ef      	bne.n	800ade6 <quorem+0xf2>
 800ae06:	3c01      	subs	r4, #1
 800ae08:	e7ea      	b.n	800ade0 <quorem+0xec>
 800ae0a:	2000      	movs	r0, #0
 800ae0c:	e7ee      	b.n	800adec <quorem+0xf8>
	...

0800ae10 <_dtoa_r>:
 800ae10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae14:	69c7      	ldr	r7, [r0, #28]
 800ae16:	b099      	sub	sp, #100	@ 0x64
 800ae18:	4683      	mov	fp, r0
 800ae1a:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ae1c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ae1e:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae20:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ae22:	ec55 4b10 	vmov	r4, r5, d0
 800ae26:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ae2a:	b97f      	cbnz	r7, 800ae4c <_dtoa_r+0x3c>
 800ae2c:	2010      	movs	r0, #16
 800ae2e:	f000 fdfd 	bl	800ba2c <malloc>
 800ae32:	4602      	mov	r2, r0
 800ae34:	f8cb 001c 	str.w	r0, [fp, #28]
 800ae38:	b920      	cbnz	r0, 800ae44 <_dtoa_r+0x34>
 800ae3a:	4ba7      	ldr	r3, [pc, #668]	@ (800b0d8 <_dtoa_r+0x2c8>)
 800ae3c:	21ef      	movs	r1, #239	@ 0xef
 800ae3e:	48a7      	ldr	r0, [pc, #668]	@ (800b0dc <_dtoa_r+0x2cc>)
 800ae40:	f001 fce8 	bl	800c814 <__assert_func>
 800ae44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ae48:	6007      	str	r7, [r0, #0]
 800ae4a:	60c7      	str	r7, [r0, #12]
 800ae4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ae50:	6819      	ldr	r1, [r3, #0]
 800ae52:	b159      	cbz	r1, 800ae6c <_dtoa_r+0x5c>
 800ae54:	685a      	ldr	r2, [r3, #4]
 800ae56:	2301      	movs	r3, #1
 800ae58:	4658      	mov	r0, fp
 800ae5a:	4093      	lsls	r3, r2
 800ae5c:	604a      	str	r2, [r1, #4]
 800ae5e:	608b      	str	r3, [r1, #8]
 800ae60:	f000 feda 	bl	800bc18 <_Bfree>
 800ae64:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	601a      	str	r2, [r3, #0]
 800ae6c:	1e2b      	subs	r3, r5, #0
 800ae6e:	bfb7      	itett	lt
 800ae70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ae74:	2300      	movge	r3, #0
 800ae76:	2201      	movlt	r2, #1
 800ae78:	9303      	strlt	r3, [sp, #12]
 800ae7a:	bfa8      	it	ge
 800ae7c:	6033      	strge	r3, [r6, #0]
 800ae7e:	9f03      	ldr	r7, [sp, #12]
 800ae80:	4b97      	ldr	r3, [pc, #604]	@ (800b0e0 <_dtoa_r+0x2d0>)
 800ae82:	bfb8      	it	lt
 800ae84:	6032      	strlt	r2, [r6, #0]
 800ae86:	43bb      	bics	r3, r7
 800ae88:	d112      	bne.n	800aeb0 <_dtoa_r+0xa0>
 800ae8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ae8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ae90:	6013      	str	r3, [r2, #0]
 800ae92:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ae96:	4323      	orrs	r3, r4
 800ae98:	f000 854c 	beq.w	800b934 <_dtoa_r+0xb24>
 800ae9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ae9e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b0f4 <_dtoa_r+0x2e4>
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f000 854e 	beq.w	800b944 <_dtoa_r+0xb34>
 800aea8:	f10a 0303 	add.w	r3, sl, #3
 800aeac:	f000 bd48 	b.w	800b940 <_dtoa_r+0xb30>
 800aeb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	ec51 0b17 	vmov	r0, r1, d7
 800aebc:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800aec0:	f7f5 fde6 	bl	8000a90 <__aeabi_dcmpeq>
 800aec4:	4680      	mov	r8, r0
 800aec6:	b158      	cbz	r0, 800aee0 <_dtoa_r+0xd0>
 800aec8:	2301      	movs	r3, #1
 800aeca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aecc:	6013      	str	r3, [r2, #0]
 800aece:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aed0:	b113      	cbz	r3, 800aed8 <_dtoa_r+0xc8>
 800aed2:	4b84      	ldr	r3, [pc, #528]	@ (800b0e4 <_dtoa_r+0x2d4>)
 800aed4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aed6:	6013      	str	r3, [r2, #0]
 800aed8:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800b0f8 <_dtoa_r+0x2e8>
 800aedc:	f000 bd32 	b.w	800b944 <_dtoa_r+0xb34>
 800aee0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800aee4:	aa16      	add	r2, sp, #88	@ 0x58
 800aee6:	a917      	add	r1, sp, #92	@ 0x5c
 800aee8:	4658      	mov	r0, fp
 800aeea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aeee:	f001 f983 	bl	800c1f8 <__d2b>
 800aef2:	4681      	mov	r9, r0
 800aef4:	2e00      	cmp	r6, #0
 800aef6:	d075      	beq.n	800afe4 <_dtoa_r+0x1d4>
 800aef8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aefa:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800aefe:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800af02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af06:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800af0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af0e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800af12:	4619      	mov	r1, r3
 800af14:	2200      	movs	r2, #0
 800af16:	4b74      	ldr	r3, [pc, #464]	@ (800b0e8 <_dtoa_r+0x2d8>)
 800af18:	f7f5 f99a 	bl	8000250 <__aeabi_dsub>
 800af1c:	a368      	add	r3, pc, #416	@ (adr r3, 800b0c0 <_dtoa_r+0x2b0>)
 800af1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af22:	f7f5 fb4d 	bl	80005c0 <__aeabi_dmul>
 800af26:	a368      	add	r3, pc, #416	@ (adr r3, 800b0c8 <_dtoa_r+0x2b8>)
 800af28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2c:	f7f5 f992 	bl	8000254 <__adddf3>
 800af30:	4604      	mov	r4, r0
 800af32:	460d      	mov	r5, r1
 800af34:	4630      	mov	r0, r6
 800af36:	f7f5 fad9 	bl	80004ec <__aeabi_i2d>
 800af3a:	a365      	add	r3, pc, #404	@ (adr r3, 800b0d0 <_dtoa_r+0x2c0>)
 800af3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af40:	f7f5 fb3e 	bl	80005c0 <__aeabi_dmul>
 800af44:	4602      	mov	r2, r0
 800af46:	460b      	mov	r3, r1
 800af48:	4620      	mov	r0, r4
 800af4a:	4629      	mov	r1, r5
 800af4c:	f7f5 f982 	bl	8000254 <__adddf3>
 800af50:	4604      	mov	r4, r0
 800af52:	460d      	mov	r5, r1
 800af54:	f7f5 fde4 	bl	8000b20 <__aeabi_d2iz>
 800af58:	2200      	movs	r2, #0
 800af5a:	4607      	mov	r7, r0
 800af5c:	2300      	movs	r3, #0
 800af5e:	4620      	mov	r0, r4
 800af60:	4629      	mov	r1, r5
 800af62:	f7f5 fd9f 	bl	8000aa4 <__aeabi_dcmplt>
 800af66:	b140      	cbz	r0, 800af7a <_dtoa_r+0x16a>
 800af68:	4638      	mov	r0, r7
 800af6a:	f7f5 fabf 	bl	80004ec <__aeabi_i2d>
 800af6e:	4622      	mov	r2, r4
 800af70:	462b      	mov	r3, r5
 800af72:	f7f5 fd8d 	bl	8000a90 <__aeabi_dcmpeq>
 800af76:	b900      	cbnz	r0, 800af7a <_dtoa_r+0x16a>
 800af78:	3f01      	subs	r7, #1
 800af7a:	2f16      	cmp	r7, #22
 800af7c:	d851      	bhi.n	800b022 <_dtoa_r+0x212>
 800af7e:	4b5b      	ldr	r3, [pc, #364]	@ (800b0ec <_dtoa_r+0x2dc>)
 800af80:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800af84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8c:	f7f5 fd8a 	bl	8000aa4 <__aeabi_dcmplt>
 800af90:	2800      	cmp	r0, #0
 800af92:	d048      	beq.n	800b026 <_dtoa_r+0x216>
 800af94:	3f01      	subs	r7, #1
 800af96:	2300      	movs	r3, #0
 800af98:	9312      	str	r3, [sp, #72]	@ 0x48
 800af9a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800af9c:	1b9b      	subs	r3, r3, r6
 800af9e:	1e5a      	subs	r2, r3, #1
 800afa0:	bf46      	itte	mi
 800afa2:	f1c3 0801 	rsbmi	r8, r3, #1
 800afa6:	2300      	movmi	r3, #0
 800afa8:	f04f 0800 	movpl.w	r8, #0
 800afac:	9208      	str	r2, [sp, #32]
 800afae:	bf48      	it	mi
 800afb0:	9308      	strmi	r3, [sp, #32]
 800afb2:	2f00      	cmp	r7, #0
 800afb4:	db39      	blt.n	800b02a <_dtoa_r+0x21a>
 800afb6:	9b08      	ldr	r3, [sp, #32]
 800afb8:	970f      	str	r7, [sp, #60]	@ 0x3c
 800afba:	443b      	add	r3, r7
 800afbc:	9308      	str	r3, [sp, #32]
 800afbe:	2300      	movs	r3, #0
 800afc0:	930a      	str	r3, [sp, #40]	@ 0x28
 800afc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afc4:	2b09      	cmp	r3, #9
 800afc6:	d864      	bhi.n	800b092 <_dtoa_r+0x282>
 800afc8:	2b05      	cmp	r3, #5
 800afca:	bfc5      	ittet	gt
 800afcc:	3b04      	subgt	r3, #4
 800afce:	2400      	movgt	r4, #0
 800afd0:	2401      	movle	r4, #1
 800afd2:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800afd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afd6:	3b02      	subs	r3, #2
 800afd8:	2b03      	cmp	r3, #3
 800afda:	d865      	bhi.n	800b0a8 <_dtoa_r+0x298>
 800afdc:	e8df f003 	tbb	[pc, r3]
 800afe0:	5737392c 	.word	0x5737392c
 800afe4:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800afe8:	441e      	add	r6, r3
 800afea:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800afee:	2b20      	cmp	r3, #32
 800aff0:	bfc9      	itett	gt
 800aff2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800aff6:	f1c3 0320 	rsble	r3, r3, #32
 800affa:	409f      	lslgt	r7, r3
 800affc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b000:	bfd8      	it	le
 800b002:	fa04 f003 	lslle.w	r0, r4, r3
 800b006:	f106 36ff 	add.w	r6, r6, #4294967295
 800b00a:	bfc4      	itt	gt
 800b00c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b010:	ea47 0003 	orrgt.w	r0, r7, r3
 800b014:	f7f5 fa5a 	bl	80004cc <__aeabi_ui2d>
 800b018:	2201      	movs	r2, #1
 800b01a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b01e:	9214      	str	r2, [sp, #80]	@ 0x50
 800b020:	e777      	b.n	800af12 <_dtoa_r+0x102>
 800b022:	2301      	movs	r3, #1
 800b024:	e7b8      	b.n	800af98 <_dtoa_r+0x188>
 800b026:	9012      	str	r0, [sp, #72]	@ 0x48
 800b028:	e7b7      	b.n	800af9a <_dtoa_r+0x18a>
 800b02a:	427b      	negs	r3, r7
 800b02c:	eba8 0807 	sub.w	r8, r8, r7
 800b030:	930a      	str	r3, [sp, #40]	@ 0x28
 800b032:	2300      	movs	r3, #0
 800b034:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b036:	e7c4      	b.n	800afc2 <_dtoa_r+0x1b2>
 800b038:	2300      	movs	r3, #0
 800b03a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b03c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b03e:	2b00      	cmp	r3, #0
 800b040:	dc35      	bgt.n	800b0ae <_dtoa_r+0x29e>
 800b042:	2301      	movs	r3, #1
 800b044:	461a      	mov	r2, r3
 800b046:	9300      	str	r3, [sp, #0]
 800b048:	9307      	str	r3, [sp, #28]
 800b04a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b04c:	e00b      	b.n	800b066 <_dtoa_r+0x256>
 800b04e:	2301      	movs	r3, #1
 800b050:	e7f3      	b.n	800b03a <_dtoa_r+0x22a>
 800b052:	2300      	movs	r3, #0
 800b054:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b056:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b058:	18fb      	adds	r3, r7, r3
 800b05a:	9300      	str	r3, [sp, #0]
 800b05c:	3301      	adds	r3, #1
 800b05e:	2b01      	cmp	r3, #1
 800b060:	9307      	str	r3, [sp, #28]
 800b062:	bfb8      	it	lt
 800b064:	2301      	movlt	r3, #1
 800b066:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b06a:	2100      	movs	r1, #0
 800b06c:	2204      	movs	r2, #4
 800b06e:	f102 0514 	add.w	r5, r2, #20
 800b072:	429d      	cmp	r5, r3
 800b074:	d91f      	bls.n	800b0b6 <_dtoa_r+0x2a6>
 800b076:	6041      	str	r1, [r0, #4]
 800b078:	4658      	mov	r0, fp
 800b07a:	f000 fd8d 	bl	800bb98 <_Balloc>
 800b07e:	4682      	mov	sl, r0
 800b080:	2800      	cmp	r0, #0
 800b082:	d13b      	bne.n	800b0fc <_dtoa_r+0x2ec>
 800b084:	4b1a      	ldr	r3, [pc, #104]	@ (800b0f0 <_dtoa_r+0x2e0>)
 800b086:	4602      	mov	r2, r0
 800b088:	f240 11af 	movw	r1, #431	@ 0x1af
 800b08c:	e6d7      	b.n	800ae3e <_dtoa_r+0x2e>
 800b08e:	2301      	movs	r3, #1
 800b090:	e7e0      	b.n	800b054 <_dtoa_r+0x244>
 800b092:	2401      	movs	r4, #1
 800b094:	2300      	movs	r3, #0
 800b096:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b098:	9309      	str	r3, [sp, #36]	@ 0x24
 800b09a:	f04f 33ff 	mov.w	r3, #4294967295
 800b09e:	2200      	movs	r2, #0
 800b0a0:	9300      	str	r3, [sp, #0]
 800b0a2:	9307      	str	r3, [sp, #28]
 800b0a4:	2312      	movs	r3, #18
 800b0a6:	e7d0      	b.n	800b04a <_dtoa_r+0x23a>
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0ac:	e7f5      	b.n	800b09a <_dtoa_r+0x28a>
 800b0ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0b0:	9300      	str	r3, [sp, #0]
 800b0b2:	9307      	str	r3, [sp, #28]
 800b0b4:	e7d7      	b.n	800b066 <_dtoa_r+0x256>
 800b0b6:	3101      	adds	r1, #1
 800b0b8:	0052      	lsls	r2, r2, #1
 800b0ba:	e7d8      	b.n	800b06e <_dtoa_r+0x25e>
 800b0bc:	f3af 8000 	nop.w
 800b0c0:	636f4361 	.word	0x636f4361
 800b0c4:	3fd287a7 	.word	0x3fd287a7
 800b0c8:	8b60c8b3 	.word	0x8b60c8b3
 800b0cc:	3fc68a28 	.word	0x3fc68a28
 800b0d0:	509f79fb 	.word	0x509f79fb
 800b0d4:	3fd34413 	.word	0x3fd34413
 800b0d8:	0800cbad 	.word	0x0800cbad
 800b0dc:	0800cbc4 	.word	0x0800cbc4
 800b0e0:	7ff00000 	.word	0x7ff00000
 800b0e4:	0800cb7d 	.word	0x0800cb7d
 800b0e8:	3ff80000 	.word	0x3ff80000
 800b0ec:	0800ccc0 	.word	0x0800ccc0
 800b0f0:	0800cc1c 	.word	0x0800cc1c
 800b0f4:	0800cba9 	.word	0x0800cba9
 800b0f8:	0800cb7c 	.word	0x0800cb7c
 800b0fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b100:	6018      	str	r0, [r3, #0]
 800b102:	9b07      	ldr	r3, [sp, #28]
 800b104:	2b0e      	cmp	r3, #14
 800b106:	f200 80a4 	bhi.w	800b252 <_dtoa_r+0x442>
 800b10a:	2c00      	cmp	r4, #0
 800b10c:	f000 80a1 	beq.w	800b252 <_dtoa_r+0x442>
 800b110:	2f00      	cmp	r7, #0
 800b112:	dd33      	ble.n	800b17c <_dtoa_r+0x36c>
 800b114:	f007 020f 	and.w	r2, r7, #15
 800b118:	4bac      	ldr	r3, [pc, #688]	@ (800b3cc <_dtoa_r+0x5bc>)
 800b11a:	05f8      	lsls	r0, r7, #23
 800b11c:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b120:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b124:	ed93 7b00 	vldr	d7, [r3]
 800b128:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b12c:	d516      	bpl.n	800b15c <_dtoa_r+0x34c>
 800b12e:	4ba8      	ldr	r3, [pc, #672]	@ (800b3d0 <_dtoa_r+0x5c0>)
 800b130:	f004 040f 	and.w	r4, r4, #15
 800b134:	2603      	movs	r6, #3
 800b136:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b13a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b13e:	f7f5 fb69 	bl	8000814 <__aeabi_ddiv>
 800b142:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b146:	4da2      	ldr	r5, [pc, #648]	@ (800b3d0 <_dtoa_r+0x5c0>)
 800b148:	b954      	cbnz	r4, 800b160 <_dtoa_r+0x350>
 800b14a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b14e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b152:	f7f5 fb5f 	bl	8000814 <__aeabi_ddiv>
 800b156:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b15a:	e028      	b.n	800b1ae <_dtoa_r+0x39e>
 800b15c:	2602      	movs	r6, #2
 800b15e:	e7f2      	b.n	800b146 <_dtoa_r+0x336>
 800b160:	07e1      	lsls	r1, r4, #31
 800b162:	d508      	bpl.n	800b176 <_dtoa_r+0x366>
 800b164:	3601      	adds	r6, #1
 800b166:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b16a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b16e:	f7f5 fa27 	bl	80005c0 <__aeabi_dmul>
 800b172:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b176:	1064      	asrs	r4, r4, #1
 800b178:	3508      	adds	r5, #8
 800b17a:	e7e5      	b.n	800b148 <_dtoa_r+0x338>
 800b17c:	f000 80d2 	beq.w	800b324 <_dtoa_r+0x514>
 800b180:	427c      	negs	r4, r7
 800b182:	4b92      	ldr	r3, [pc, #584]	@ (800b3cc <_dtoa_r+0x5bc>)
 800b184:	4d92      	ldr	r5, [pc, #584]	@ (800b3d0 <_dtoa_r+0x5c0>)
 800b186:	2602      	movs	r6, #2
 800b188:	f004 020f 	and.w	r2, r4, #15
 800b18c:	1124      	asrs	r4, r4, #4
 800b18e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b192:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19a:	f7f5 fa11 	bl	80005c0 <__aeabi_dmul>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1a4:	2c00      	cmp	r4, #0
 800b1a6:	f040 80b2 	bne.w	800b30e <_dtoa_r+0x4fe>
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1d3      	bne.n	800b156 <_dtoa_r+0x346>
 800b1ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b1b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f000 80b7 	beq.w	800b328 <_dtoa_r+0x518>
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	4b85      	ldr	r3, [pc, #532]	@ (800b3d4 <_dtoa_r+0x5c4>)
 800b1be:	4620      	mov	r0, r4
 800b1c0:	4629      	mov	r1, r5
 800b1c2:	f7f5 fc6f 	bl	8000aa4 <__aeabi_dcmplt>
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	f000 80ae 	beq.w	800b328 <_dtoa_r+0x518>
 800b1cc:	9b07      	ldr	r3, [sp, #28]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	f000 80aa 	beq.w	800b328 <_dtoa_r+0x518>
 800b1d4:	9b00      	ldr	r3, [sp, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	dd37      	ble.n	800b24a <_dtoa_r+0x43a>
 800b1da:	1e7b      	subs	r3, r7, #1
 800b1dc:	4620      	mov	r0, r4
 800b1de:	2200      	movs	r2, #0
 800b1e0:	4629      	mov	r1, r5
 800b1e2:	9304      	str	r3, [sp, #16]
 800b1e4:	3601      	adds	r6, #1
 800b1e6:	4b7c      	ldr	r3, [pc, #496]	@ (800b3d8 <_dtoa_r+0x5c8>)
 800b1e8:	f7f5 f9ea 	bl	80005c0 <__aeabi_dmul>
 800b1ec:	9c00      	ldr	r4, [sp, #0]
 800b1ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1f2:	4630      	mov	r0, r6
 800b1f4:	f7f5 f97a 	bl	80004ec <__aeabi_i2d>
 800b1f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1fc:	f7f5 f9e0 	bl	80005c0 <__aeabi_dmul>
 800b200:	2200      	movs	r2, #0
 800b202:	4b76      	ldr	r3, [pc, #472]	@ (800b3dc <_dtoa_r+0x5cc>)
 800b204:	f7f5 f826 	bl	8000254 <__adddf3>
 800b208:	4605      	mov	r5, r0
 800b20a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b20e:	2c00      	cmp	r4, #0
 800b210:	f040 808d 	bne.w	800b32e <_dtoa_r+0x51e>
 800b214:	2200      	movs	r2, #0
 800b216:	4b72      	ldr	r3, [pc, #456]	@ (800b3e0 <_dtoa_r+0x5d0>)
 800b218:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b21c:	f7f5 f818 	bl	8000250 <__aeabi_dsub>
 800b220:	4602      	mov	r2, r0
 800b222:	460b      	mov	r3, r1
 800b224:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b228:	462a      	mov	r2, r5
 800b22a:	4633      	mov	r3, r6
 800b22c:	f7f5 fc58 	bl	8000ae0 <__aeabi_dcmpgt>
 800b230:	2800      	cmp	r0, #0
 800b232:	f040 828b 	bne.w	800b74c <_dtoa_r+0x93c>
 800b236:	462a      	mov	r2, r5
 800b238:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b23c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b240:	f7f5 fc30 	bl	8000aa4 <__aeabi_dcmplt>
 800b244:	2800      	cmp	r0, #0
 800b246:	f040 8128 	bne.w	800b49a <_dtoa_r+0x68a>
 800b24a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b24e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b252:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b254:	2b00      	cmp	r3, #0
 800b256:	f2c0 815a 	blt.w	800b50e <_dtoa_r+0x6fe>
 800b25a:	2f0e      	cmp	r7, #14
 800b25c:	f300 8157 	bgt.w	800b50e <_dtoa_r+0x6fe>
 800b260:	4b5a      	ldr	r3, [pc, #360]	@ (800b3cc <_dtoa_r+0x5bc>)
 800b262:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b266:	ed93 7b00 	vldr	d7, [r3]
 800b26a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	ed8d 7b00 	vstr	d7, [sp]
 800b272:	da03      	bge.n	800b27c <_dtoa_r+0x46c>
 800b274:	9b07      	ldr	r3, [sp, #28]
 800b276:	2b00      	cmp	r3, #0
 800b278:	f340 8101 	ble.w	800b47e <_dtoa_r+0x66e>
 800b27c:	4656      	mov	r6, sl
 800b27e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b282:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b286:	4620      	mov	r0, r4
 800b288:	4629      	mov	r1, r5
 800b28a:	f7f5 fac3 	bl	8000814 <__aeabi_ddiv>
 800b28e:	f7f5 fc47 	bl	8000b20 <__aeabi_d2iz>
 800b292:	4680      	mov	r8, r0
 800b294:	f7f5 f92a 	bl	80004ec <__aeabi_i2d>
 800b298:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b29c:	f7f5 f990 	bl	80005c0 <__aeabi_dmul>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	4629      	mov	r1, r5
 800b2ac:	f7f4 ffd0 	bl	8000250 <__aeabi_dsub>
 800b2b0:	9d07      	ldr	r5, [sp, #28]
 800b2b2:	f806 4b01 	strb.w	r4, [r6], #1
 800b2b6:	eba6 040a 	sub.w	r4, r6, sl
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	460b      	mov	r3, r1
 800b2be:	42a5      	cmp	r5, r4
 800b2c0:	f040 8117 	bne.w	800b4f2 <_dtoa_r+0x6e2>
 800b2c4:	f7f4 ffc6 	bl	8000254 <__adddf3>
 800b2c8:	4604      	mov	r4, r0
 800b2ca:	460d      	mov	r5, r1
 800b2cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2d0:	f7f5 fc06 	bl	8000ae0 <__aeabi_dcmpgt>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	f040 80f9 	bne.w	800b4cc <_dtoa_r+0x6bc>
 800b2da:	4620      	mov	r0, r4
 800b2dc:	4629      	mov	r1, r5
 800b2de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2e2:	f7f5 fbd5 	bl	8000a90 <__aeabi_dcmpeq>
 800b2e6:	b118      	cbz	r0, 800b2f0 <_dtoa_r+0x4e0>
 800b2e8:	f018 0f01 	tst.w	r8, #1
 800b2ec:	f040 80ee 	bne.w	800b4cc <_dtoa_r+0x6bc>
 800b2f0:	4649      	mov	r1, r9
 800b2f2:	4658      	mov	r0, fp
 800b2f4:	f000 fc90 	bl	800bc18 <_Bfree>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	3701      	adds	r7, #1
 800b2fc:	7033      	strb	r3, [r6, #0]
 800b2fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b300:	601f      	str	r7, [r3, #0]
 800b302:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b304:	2b00      	cmp	r3, #0
 800b306:	f000 831d 	beq.w	800b944 <_dtoa_r+0xb34>
 800b30a:	601e      	str	r6, [r3, #0]
 800b30c:	e31a      	b.n	800b944 <_dtoa_r+0xb34>
 800b30e:	07e2      	lsls	r2, r4, #31
 800b310:	d505      	bpl.n	800b31e <_dtoa_r+0x50e>
 800b312:	3601      	adds	r6, #1
 800b314:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b318:	f7f5 f952 	bl	80005c0 <__aeabi_dmul>
 800b31c:	2301      	movs	r3, #1
 800b31e:	1064      	asrs	r4, r4, #1
 800b320:	3508      	adds	r5, #8
 800b322:	e73f      	b.n	800b1a4 <_dtoa_r+0x394>
 800b324:	2602      	movs	r6, #2
 800b326:	e742      	b.n	800b1ae <_dtoa_r+0x39e>
 800b328:	9c07      	ldr	r4, [sp, #28]
 800b32a:	9704      	str	r7, [sp, #16]
 800b32c:	e761      	b.n	800b1f2 <_dtoa_r+0x3e2>
 800b32e:	4b27      	ldr	r3, [pc, #156]	@ (800b3cc <_dtoa_r+0x5bc>)
 800b330:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b332:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b336:	4454      	add	r4, sl
 800b338:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b33c:	2900      	cmp	r1, #0
 800b33e:	d053      	beq.n	800b3e8 <_dtoa_r+0x5d8>
 800b340:	2000      	movs	r0, #0
 800b342:	4928      	ldr	r1, [pc, #160]	@ (800b3e4 <_dtoa_r+0x5d4>)
 800b344:	f7f5 fa66 	bl	8000814 <__aeabi_ddiv>
 800b348:	4633      	mov	r3, r6
 800b34a:	4656      	mov	r6, sl
 800b34c:	462a      	mov	r2, r5
 800b34e:	f7f4 ff7f 	bl	8000250 <__aeabi_dsub>
 800b352:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b35a:	f7f5 fbe1 	bl	8000b20 <__aeabi_d2iz>
 800b35e:	4605      	mov	r5, r0
 800b360:	f7f5 f8c4 	bl	80004ec <__aeabi_i2d>
 800b364:	4602      	mov	r2, r0
 800b366:	460b      	mov	r3, r1
 800b368:	3530      	adds	r5, #48	@ 0x30
 800b36a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b36e:	f7f4 ff6f 	bl	8000250 <__aeabi_dsub>
 800b372:	4602      	mov	r2, r0
 800b374:	460b      	mov	r3, r1
 800b376:	f806 5b01 	strb.w	r5, [r6], #1
 800b37a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b37e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b382:	f7f5 fb8f 	bl	8000aa4 <__aeabi_dcmplt>
 800b386:	2800      	cmp	r0, #0
 800b388:	d171      	bne.n	800b46e <_dtoa_r+0x65e>
 800b38a:	2000      	movs	r0, #0
 800b38c:	4911      	ldr	r1, [pc, #68]	@ (800b3d4 <_dtoa_r+0x5c4>)
 800b38e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b392:	f7f4 ff5d 	bl	8000250 <__aeabi_dsub>
 800b396:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b39a:	f7f5 fb83 	bl	8000aa4 <__aeabi_dcmplt>
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	f040 8095 	bne.w	800b4ce <_dtoa_r+0x6be>
 800b3a4:	42a6      	cmp	r6, r4
 800b3a6:	f43f af50 	beq.w	800b24a <_dtoa_r+0x43a>
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	4b0a      	ldr	r3, [pc, #40]	@ (800b3d8 <_dtoa_r+0x5c8>)
 800b3ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b3b2:	f7f5 f905 	bl	80005c0 <__aeabi_dmul>
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	4b07      	ldr	r3, [pc, #28]	@ (800b3d8 <_dtoa_r+0x5c8>)
 800b3ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b3be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3c2:	f7f5 f8fd 	bl	80005c0 <__aeabi_dmul>
 800b3c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3ca:	e7c4      	b.n	800b356 <_dtoa_r+0x546>
 800b3cc:	0800ccc0 	.word	0x0800ccc0
 800b3d0:	0800cc98 	.word	0x0800cc98
 800b3d4:	3ff00000 	.word	0x3ff00000
 800b3d8:	40240000 	.word	0x40240000
 800b3dc:	401c0000 	.word	0x401c0000
 800b3e0:	40140000 	.word	0x40140000
 800b3e4:	3fe00000 	.word	0x3fe00000
 800b3e8:	4631      	mov	r1, r6
 800b3ea:	4656      	mov	r6, sl
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	f7f5 f8e7 	bl	80005c0 <__aeabi_dmul>
 800b3f2:	9415      	str	r4, [sp, #84]	@ 0x54
 800b3f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b3f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3fc:	f7f5 fb90 	bl	8000b20 <__aeabi_d2iz>
 800b400:	4605      	mov	r5, r0
 800b402:	f7f5 f873 	bl	80004ec <__aeabi_i2d>
 800b406:	4602      	mov	r2, r0
 800b408:	3530      	adds	r5, #48	@ 0x30
 800b40a:	460b      	mov	r3, r1
 800b40c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b410:	f7f4 ff1e 	bl	8000250 <__aeabi_dsub>
 800b414:	f806 5b01 	strb.w	r5, [r6], #1
 800b418:	4602      	mov	r2, r0
 800b41a:	460b      	mov	r3, r1
 800b41c:	42a6      	cmp	r6, r4
 800b41e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b422:	f04f 0200 	mov.w	r2, #0
 800b426:	d124      	bne.n	800b472 <_dtoa_r+0x662>
 800b428:	4bac      	ldr	r3, [pc, #688]	@ (800b6dc <_dtoa_r+0x8cc>)
 800b42a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b42e:	f7f4 ff11 	bl	8000254 <__adddf3>
 800b432:	4602      	mov	r2, r0
 800b434:	460b      	mov	r3, r1
 800b436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b43a:	f7f5 fb51 	bl	8000ae0 <__aeabi_dcmpgt>
 800b43e:	2800      	cmp	r0, #0
 800b440:	d145      	bne.n	800b4ce <_dtoa_r+0x6be>
 800b442:	2000      	movs	r0, #0
 800b444:	49a5      	ldr	r1, [pc, #660]	@ (800b6dc <_dtoa_r+0x8cc>)
 800b446:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b44a:	f7f4 ff01 	bl	8000250 <__aeabi_dsub>
 800b44e:	4602      	mov	r2, r0
 800b450:	460b      	mov	r3, r1
 800b452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b456:	f7f5 fb25 	bl	8000aa4 <__aeabi_dcmplt>
 800b45a:	2800      	cmp	r0, #0
 800b45c:	f43f aef5 	beq.w	800b24a <_dtoa_r+0x43a>
 800b460:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b462:	1e73      	subs	r3, r6, #1
 800b464:	9315      	str	r3, [sp, #84]	@ 0x54
 800b466:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b46a:	2b30      	cmp	r3, #48	@ 0x30
 800b46c:	d0f8      	beq.n	800b460 <_dtoa_r+0x650>
 800b46e:	9f04      	ldr	r7, [sp, #16]
 800b470:	e73e      	b.n	800b2f0 <_dtoa_r+0x4e0>
 800b472:	4b9b      	ldr	r3, [pc, #620]	@ (800b6e0 <_dtoa_r+0x8d0>)
 800b474:	f7f5 f8a4 	bl	80005c0 <__aeabi_dmul>
 800b478:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b47c:	e7bc      	b.n	800b3f8 <_dtoa_r+0x5e8>
 800b47e:	d10c      	bne.n	800b49a <_dtoa_r+0x68a>
 800b480:	2200      	movs	r2, #0
 800b482:	4b98      	ldr	r3, [pc, #608]	@ (800b6e4 <_dtoa_r+0x8d4>)
 800b484:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b488:	f7f5 f89a 	bl	80005c0 <__aeabi_dmul>
 800b48c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b490:	f7f5 fb1c 	bl	8000acc <__aeabi_dcmpge>
 800b494:	2800      	cmp	r0, #0
 800b496:	f000 8157 	beq.w	800b748 <_dtoa_r+0x938>
 800b49a:	2400      	movs	r4, #0
 800b49c:	4625      	mov	r5, r4
 800b49e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4a0:	4656      	mov	r6, sl
 800b4a2:	43db      	mvns	r3, r3
 800b4a4:	9304      	str	r3, [sp, #16]
 800b4a6:	2700      	movs	r7, #0
 800b4a8:	4621      	mov	r1, r4
 800b4aa:	4658      	mov	r0, fp
 800b4ac:	f000 fbb4 	bl	800bc18 <_Bfree>
 800b4b0:	2d00      	cmp	r5, #0
 800b4b2:	d0dc      	beq.n	800b46e <_dtoa_r+0x65e>
 800b4b4:	b12f      	cbz	r7, 800b4c2 <_dtoa_r+0x6b2>
 800b4b6:	42af      	cmp	r7, r5
 800b4b8:	d003      	beq.n	800b4c2 <_dtoa_r+0x6b2>
 800b4ba:	4639      	mov	r1, r7
 800b4bc:	4658      	mov	r0, fp
 800b4be:	f000 fbab 	bl	800bc18 <_Bfree>
 800b4c2:	4629      	mov	r1, r5
 800b4c4:	4658      	mov	r0, fp
 800b4c6:	f000 fba7 	bl	800bc18 <_Bfree>
 800b4ca:	e7d0      	b.n	800b46e <_dtoa_r+0x65e>
 800b4cc:	9704      	str	r7, [sp, #16]
 800b4ce:	4633      	mov	r3, r6
 800b4d0:	461e      	mov	r6, r3
 800b4d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4d6:	2a39      	cmp	r2, #57	@ 0x39
 800b4d8:	d107      	bne.n	800b4ea <_dtoa_r+0x6da>
 800b4da:	459a      	cmp	sl, r3
 800b4dc:	d1f8      	bne.n	800b4d0 <_dtoa_r+0x6c0>
 800b4de:	9a04      	ldr	r2, [sp, #16]
 800b4e0:	3201      	adds	r2, #1
 800b4e2:	9204      	str	r2, [sp, #16]
 800b4e4:	2230      	movs	r2, #48	@ 0x30
 800b4e6:	f88a 2000 	strb.w	r2, [sl]
 800b4ea:	781a      	ldrb	r2, [r3, #0]
 800b4ec:	3201      	adds	r2, #1
 800b4ee:	701a      	strb	r2, [r3, #0]
 800b4f0:	e7bd      	b.n	800b46e <_dtoa_r+0x65e>
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	4b7a      	ldr	r3, [pc, #488]	@ (800b6e0 <_dtoa_r+0x8d0>)
 800b4f6:	f7f5 f863 	bl	80005c0 <__aeabi_dmul>
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	4604      	mov	r4, r0
 800b500:	460d      	mov	r5, r1
 800b502:	f7f5 fac5 	bl	8000a90 <__aeabi_dcmpeq>
 800b506:	2800      	cmp	r0, #0
 800b508:	f43f aebb 	beq.w	800b282 <_dtoa_r+0x472>
 800b50c:	e6f0      	b.n	800b2f0 <_dtoa_r+0x4e0>
 800b50e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b510:	2a00      	cmp	r2, #0
 800b512:	f000 80db 	beq.w	800b6cc <_dtoa_r+0x8bc>
 800b516:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b518:	2a01      	cmp	r2, #1
 800b51a:	f300 80bf 	bgt.w	800b69c <_dtoa_r+0x88c>
 800b51e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b520:	2a00      	cmp	r2, #0
 800b522:	f000 80b7 	beq.w	800b694 <_dtoa_r+0x884>
 800b526:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b52a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b52c:	4646      	mov	r6, r8
 800b52e:	9a08      	ldr	r2, [sp, #32]
 800b530:	2101      	movs	r1, #1
 800b532:	4658      	mov	r0, fp
 800b534:	4498      	add	r8, r3
 800b536:	441a      	add	r2, r3
 800b538:	9208      	str	r2, [sp, #32]
 800b53a:	f000 fc23 	bl	800bd84 <__i2b>
 800b53e:	4605      	mov	r5, r0
 800b540:	b15e      	cbz	r6, 800b55a <_dtoa_r+0x74a>
 800b542:	9b08      	ldr	r3, [sp, #32]
 800b544:	2b00      	cmp	r3, #0
 800b546:	dd08      	ble.n	800b55a <_dtoa_r+0x74a>
 800b548:	42b3      	cmp	r3, r6
 800b54a:	9a08      	ldr	r2, [sp, #32]
 800b54c:	bfa8      	it	ge
 800b54e:	4633      	movge	r3, r6
 800b550:	eba8 0803 	sub.w	r8, r8, r3
 800b554:	1af6      	subs	r6, r6, r3
 800b556:	1ad3      	subs	r3, r2, r3
 800b558:	9308      	str	r3, [sp, #32]
 800b55a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b55c:	b1f3      	cbz	r3, 800b59c <_dtoa_r+0x78c>
 800b55e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b560:	2b00      	cmp	r3, #0
 800b562:	f000 80b7 	beq.w	800b6d4 <_dtoa_r+0x8c4>
 800b566:	b18c      	cbz	r4, 800b58c <_dtoa_r+0x77c>
 800b568:	4629      	mov	r1, r5
 800b56a:	4622      	mov	r2, r4
 800b56c:	4658      	mov	r0, fp
 800b56e:	f000 fcc9 	bl	800bf04 <__pow5mult>
 800b572:	464a      	mov	r2, r9
 800b574:	4601      	mov	r1, r0
 800b576:	4605      	mov	r5, r0
 800b578:	4658      	mov	r0, fp
 800b57a:	f000 fc19 	bl	800bdb0 <__multiply>
 800b57e:	4649      	mov	r1, r9
 800b580:	9004      	str	r0, [sp, #16]
 800b582:	4658      	mov	r0, fp
 800b584:	f000 fb48 	bl	800bc18 <_Bfree>
 800b588:	9b04      	ldr	r3, [sp, #16]
 800b58a:	4699      	mov	r9, r3
 800b58c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b58e:	1b1a      	subs	r2, r3, r4
 800b590:	d004      	beq.n	800b59c <_dtoa_r+0x78c>
 800b592:	4649      	mov	r1, r9
 800b594:	4658      	mov	r0, fp
 800b596:	f000 fcb5 	bl	800bf04 <__pow5mult>
 800b59a:	4681      	mov	r9, r0
 800b59c:	2101      	movs	r1, #1
 800b59e:	4658      	mov	r0, fp
 800b5a0:	f000 fbf0 	bl	800bd84 <__i2b>
 800b5a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5a6:	4604      	mov	r4, r0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	f000 81cf 	beq.w	800b94c <_dtoa_r+0xb3c>
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	4601      	mov	r1, r0
 800b5b2:	4658      	mov	r0, fp
 800b5b4:	f000 fca6 	bl	800bf04 <__pow5mult>
 800b5b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5ba:	4604      	mov	r4, r0
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	f300 8095 	bgt.w	800b6ec <_dtoa_r+0x8dc>
 800b5c2:	9b02      	ldr	r3, [sp, #8]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	f040 8087 	bne.w	800b6d8 <_dtoa_r+0x8c8>
 800b5ca:	9b03      	ldr	r3, [sp, #12]
 800b5cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	f040 8089 	bne.w	800b6e8 <_dtoa_r+0x8d8>
 800b5d6:	9b03      	ldr	r3, [sp, #12]
 800b5d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b5dc:	0d1b      	lsrs	r3, r3, #20
 800b5de:	051b      	lsls	r3, r3, #20
 800b5e0:	b12b      	cbz	r3, 800b5ee <_dtoa_r+0x7de>
 800b5e2:	9b08      	ldr	r3, [sp, #32]
 800b5e4:	f108 0801 	add.w	r8, r8, #1
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	9308      	str	r3, [sp, #32]
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	f000 81b0 	beq.w	800b958 <_dtoa_r+0xb48>
 800b5f8:	6923      	ldr	r3, [r4, #16]
 800b5fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b5fe:	6918      	ldr	r0, [r3, #16]
 800b600:	f000 fb74 	bl	800bcec <__hi0bits>
 800b604:	f1c0 0020 	rsb	r0, r0, #32
 800b608:	9b08      	ldr	r3, [sp, #32]
 800b60a:	4418      	add	r0, r3
 800b60c:	f010 001f 	ands.w	r0, r0, #31
 800b610:	d077      	beq.n	800b702 <_dtoa_r+0x8f2>
 800b612:	f1c0 0320 	rsb	r3, r0, #32
 800b616:	2b04      	cmp	r3, #4
 800b618:	dd6b      	ble.n	800b6f2 <_dtoa_r+0x8e2>
 800b61a:	f1c0 001c 	rsb	r0, r0, #28
 800b61e:	9b08      	ldr	r3, [sp, #32]
 800b620:	4480      	add	r8, r0
 800b622:	4403      	add	r3, r0
 800b624:	4406      	add	r6, r0
 800b626:	9308      	str	r3, [sp, #32]
 800b628:	f1b8 0f00 	cmp.w	r8, #0
 800b62c:	dd05      	ble.n	800b63a <_dtoa_r+0x82a>
 800b62e:	4649      	mov	r1, r9
 800b630:	4642      	mov	r2, r8
 800b632:	4658      	mov	r0, fp
 800b634:	f000 fcc0 	bl	800bfb8 <__lshift>
 800b638:	4681      	mov	r9, r0
 800b63a:	9b08      	ldr	r3, [sp, #32]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	dd05      	ble.n	800b64c <_dtoa_r+0x83c>
 800b640:	4621      	mov	r1, r4
 800b642:	461a      	mov	r2, r3
 800b644:	4658      	mov	r0, fp
 800b646:	f000 fcb7 	bl	800bfb8 <__lshift>
 800b64a:	4604      	mov	r4, r0
 800b64c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d059      	beq.n	800b706 <_dtoa_r+0x8f6>
 800b652:	4621      	mov	r1, r4
 800b654:	4648      	mov	r0, r9
 800b656:	f000 fd1b 	bl	800c090 <__mcmp>
 800b65a:	2800      	cmp	r0, #0
 800b65c:	da53      	bge.n	800b706 <_dtoa_r+0x8f6>
 800b65e:	1e7b      	subs	r3, r7, #1
 800b660:	4649      	mov	r1, r9
 800b662:	220a      	movs	r2, #10
 800b664:	4658      	mov	r0, fp
 800b666:	9304      	str	r3, [sp, #16]
 800b668:	2300      	movs	r3, #0
 800b66a:	f000 faf7 	bl	800bc5c <__multadd>
 800b66e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b670:	4681      	mov	r9, r0
 800b672:	2b00      	cmp	r3, #0
 800b674:	f000 8172 	beq.w	800b95c <_dtoa_r+0xb4c>
 800b678:	2300      	movs	r3, #0
 800b67a:	4629      	mov	r1, r5
 800b67c:	220a      	movs	r2, #10
 800b67e:	4658      	mov	r0, fp
 800b680:	f000 faec 	bl	800bc5c <__multadd>
 800b684:	9b00      	ldr	r3, [sp, #0]
 800b686:	4605      	mov	r5, r0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	dc67      	bgt.n	800b75c <_dtoa_r+0x94c>
 800b68c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b68e:	2b02      	cmp	r3, #2
 800b690:	dc41      	bgt.n	800b716 <_dtoa_r+0x906>
 800b692:	e063      	b.n	800b75c <_dtoa_r+0x94c>
 800b694:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b696:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b69a:	e746      	b.n	800b52a <_dtoa_r+0x71a>
 800b69c:	9b07      	ldr	r3, [sp, #28]
 800b69e:	1e5c      	subs	r4, r3, #1
 800b6a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6a2:	42a3      	cmp	r3, r4
 800b6a4:	bfb7      	itett	lt
 800b6a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b6a8:	1b1c      	subge	r4, r3, r4
 800b6aa:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b6ac:	1ae3      	sublt	r3, r4, r3
 800b6ae:	bfbe      	ittt	lt
 800b6b0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b6b2:	2400      	movlt	r4, #0
 800b6b4:	18d2      	addlt	r2, r2, r3
 800b6b6:	9b07      	ldr	r3, [sp, #28]
 800b6b8:	bfb8      	it	lt
 800b6ba:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	bfb5      	itete	lt
 800b6c0:	eba8 0603 	sublt.w	r6, r8, r3
 800b6c4:	4646      	movge	r6, r8
 800b6c6:	2300      	movlt	r3, #0
 800b6c8:	9b07      	ldrge	r3, [sp, #28]
 800b6ca:	e730      	b.n	800b52e <_dtoa_r+0x71e>
 800b6cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b6ce:	4646      	mov	r6, r8
 800b6d0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b6d2:	e735      	b.n	800b540 <_dtoa_r+0x730>
 800b6d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b6d6:	e75c      	b.n	800b592 <_dtoa_r+0x782>
 800b6d8:	2300      	movs	r3, #0
 800b6da:	e788      	b.n	800b5ee <_dtoa_r+0x7de>
 800b6dc:	3fe00000 	.word	0x3fe00000
 800b6e0:	40240000 	.word	0x40240000
 800b6e4:	40140000 	.word	0x40140000
 800b6e8:	9b02      	ldr	r3, [sp, #8]
 800b6ea:	e780      	b.n	800b5ee <_dtoa_r+0x7de>
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6f0:	e782      	b.n	800b5f8 <_dtoa_r+0x7e8>
 800b6f2:	d099      	beq.n	800b628 <_dtoa_r+0x818>
 800b6f4:	331c      	adds	r3, #28
 800b6f6:	9a08      	ldr	r2, [sp, #32]
 800b6f8:	441a      	add	r2, r3
 800b6fa:	4498      	add	r8, r3
 800b6fc:	441e      	add	r6, r3
 800b6fe:	9208      	str	r2, [sp, #32]
 800b700:	e792      	b.n	800b628 <_dtoa_r+0x818>
 800b702:	4603      	mov	r3, r0
 800b704:	e7f6      	b.n	800b6f4 <_dtoa_r+0x8e4>
 800b706:	9b07      	ldr	r3, [sp, #28]
 800b708:	9704      	str	r7, [sp, #16]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	dc20      	bgt.n	800b750 <_dtoa_r+0x940>
 800b70e:	9300      	str	r3, [sp, #0]
 800b710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b712:	2b02      	cmp	r3, #2
 800b714:	dd1e      	ble.n	800b754 <_dtoa_r+0x944>
 800b716:	9b00      	ldr	r3, [sp, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	f47f aec0 	bne.w	800b49e <_dtoa_r+0x68e>
 800b71e:	4621      	mov	r1, r4
 800b720:	2205      	movs	r2, #5
 800b722:	4658      	mov	r0, fp
 800b724:	f000 fa9a 	bl	800bc5c <__multadd>
 800b728:	4601      	mov	r1, r0
 800b72a:	4604      	mov	r4, r0
 800b72c:	4648      	mov	r0, r9
 800b72e:	f000 fcaf 	bl	800c090 <__mcmp>
 800b732:	2800      	cmp	r0, #0
 800b734:	f77f aeb3 	ble.w	800b49e <_dtoa_r+0x68e>
 800b738:	2331      	movs	r3, #49	@ 0x31
 800b73a:	4656      	mov	r6, sl
 800b73c:	f806 3b01 	strb.w	r3, [r6], #1
 800b740:	9b04      	ldr	r3, [sp, #16]
 800b742:	3301      	adds	r3, #1
 800b744:	9304      	str	r3, [sp, #16]
 800b746:	e6ae      	b.n	800b4a6 <_dtoa_r+0x696>
 800b748:	9c07      	ldr	r4, [sp, #28]
 800b74a:	9704      	str	r7, [sp, #16]
 800b74c:	4625      	mov	r5, r4
 800b74e:	e7f3      	b.n	800b738 <_dtoa_r+0x928>
 800b750:	9b07      	ldr	r3, [sp, #28]
 800b752:	9300      	str	r3, [sp, #0]
 800b754:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b756:	2b00      	cmp	r3, #0
 800b758:	f000 8104 	beq.w	800b964 <_dtoa_r+0xb54>
 800b75c:	2e00      	cmp	r6, #0
 800b75e:	dd05      	ble.n	800b76c <_dtoa_r+0x95c>
 800b760:	4629      	mov	r1, r5
 800b762:	4632      	mov	r2, r6
 800b764:	4658      	mov	r0, fp
 800b766:	f000 fc27 	bl	800bfb8 <__lshift>
 800b76a:	4605      	mov	r5, r0
 800b76c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d05a      	beq.n	800b828 <_dtoa_r+0xa18>
 800b772:	6869      	ldr	r1, [r5, #4]
 800b774:	4658      	mov	r0, fp
 800b776:	f000 fa0f 	bl	800bb98 <_Balloc>
 800b77a:	4606      	mov	r6, r0
 800b77c:	b928      	cbnz	r0, 800b78a <_dtoa_r+0x97a>
 800b77e:	4b84      	ldr	r3, [pc, #528]	@ (800b990 <_dtoa_r+0xb80>)
 800b780:	4602      	mov	r2, r0
 800b782:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b786:	f7ff bb5a 	b.w	800ae3e <_dtoa_r+0x2e>
 800b78a:	692a      	ldr	r2, [r5, #16]
 800b78c:	f105 010c 	add.w	r1, r5, #12
 800b790:	300c      	adds	r0, #12
 800b792:	3202      	adds	r2, #2
 800b794:	0092      	lsls	r2, r2, #2
 800b796:	f7ff faa0 	bl	800acda <memcpy>
 800b79a:	2201      	movs	r2, #1
 800b79c:	4631      	mov	r1, r6
 800b79e:	4658      	mov	r0, fp
 800b7a0:	f000 fc0a 	bl	800bfb8 <__lshift>
 800b7a4:	f10a 0301 	add.w	r3, sl, #1
 800b7a8:	462f      	mov	r7, r5
 800b7aa:	4605      	mov	r5, r0
 800b7ac:	9307      	str	r3, [sp, #28]
 800b7ae:	9b00      	ldr	r3, [sp, #0]
 800b7b0:	4453      	add	r3, sl
 800b7b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7b4:	9b02      	ldr	r3, [sp, #8]
 800b7b6:	f003 0301 	and.w	r3, r3, #1
 800b7ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7bc:	9b07      	ldr	r3, [sp, #28]
 800b7be:	4621      	mov	r1, r4
 800b7c0:	4648      	mov	r0, r9
 800b7c2:	3b01      	subs	r3, #1
 800b7c4:	9300      	str	r3, [sp, #0]
 800b7c6:	f7ff fa95 	bl	800acf4 <quorem>
 800b7ca:	4639      	mov	r1, r7
 800b7cc:	9002      	str	r0, [sp, #8]
 800b7ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b7d2:	4648      	mov	r0, r9
 800b7d4:	f000 fc5c 	bl	800c090 <__mcmp>
 800b7d8:	462a      	mov	r2, r5
 800b7da:	9008      	str	r0, [sp, #32]
 800b7dc:	4621      	mov	r1, r4
 800b7de:	4658      	mov	r0, fp
 800b7e0:	f000 fc72 	bl	800c0c8 <__mdiff>
 800b7e4:	68c2      	ldr	r2, [r0, #12]
 800b7e6:	4606      	mov	r6, r0
 800b7e8:	bb02      	cbnz	r2, 800b82c <_dtoa_r+0xa1c>
 800b7ea:	4601      	mov	r1, r0
 800b7ec:	4648      	mov	r0, r9
 800b7ee:	f000 fc4f 	bl	800c090 <__mcmp>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	4631      	mov	r1, r6
 800b7f6:	4658      	mov	r0, fp
 800b7f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b7fa:	f000 fa0d 	bl	800bc18 <_Bfree>
 800b7fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b800:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b802:	9e07      	ldr	r6, [sp, #28]
 800b804:	ea43 0102 	orr.w	r1, r3, r2
 800b808:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b80a:	4319      	orrs	r1, r3
 800b80c:	d110      	bne.n	800b830 <_dtoa_r+0xa20>
 800b80e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b812:	d029      	beq.n	800b868 <_dtoa_r+0xa58>
 800b814:	9b08      	ldr	r3, [sp, #32]
 800b816:	2b00      	cmp	r3, #0
 800b818:	dd02      	ble.n	800b820 <_dtoa_r+0xa10>
 800b81a:	9b02      	ldr	r3, [sp, #8]
 800b81c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b820:	9b00      	ldr	r3, [sp, #0]
 800b822:	f883 8000 	strb.w	r8, [r3]
 800b826:	e63f      	b.n	800b4a8 <_dtoa_r+0x698>
 800b828:	4628      	mov	r0, r5
 800b82a:	e7bb      	b.n	800b7a4 <_dtoa_r+0x994>
 800b82c:	2201      	movs	r2, #1
 800b82e:	e7e1      	b.n	800b7f4 <_dtoa_r+0x9e4>
 800b830:	9b08      	ldr	r3, [sp, #32]
 800b832:	2b00      	cmp	r3, #0
 800b834:	db04      	blt.n	800b840 <_dtoa_r+0xa30>
 800b836:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b838:	430b      	orrs	r3, r1
 800b83a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b83c:	430b      	orrs	r3, r1
 800b83e:	d120      	bne.n	800b882 <_dtoa_r+0xa72>
 800b840:	2a00      	cmp	r2, #0
 800b842:	dded      	ble.n	800b820 <_dtoa_r+0xa10>
 800b844:	4649      	mov	r1, r9
 800b846:	2201      	movs	r2, #1
 800b848:	4658      	mov	r0, fp
 800b84a:	f000 fbb5 	bl	800bfb8 <__lshift>
 800b84e:	4621      	mov	r1, r4
 800b850:	4681      	mov	r9, r0
 800b852:	f000 fc1d 	bl	800c090 <__mcmp>
 800b856:	2800      	cmp	r0, #0
 800b858:	dc03      	bgt.n	800b862 <_dtoa_r+0xa52>
 800b85a:	d1e1      	bne.n	800b820 <_dtoa_r+0xa10>
 800b85c:	f018 0f01 	tst.w	r8, #1
 800b860:	d0de      	beq.n	800b820 <_dtoa_r+0xa10>
 800b862:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b866:	d1d8      	bne.n	800b81a <_dtoa_r+0xa0a>
 800b868:	2339      	movs	r3, #57	@ 0x39
 800b86a:	9a00      	ldr	r2, [sp, #0]
 800b86c:	7013      	strb	r3, [r2, #0]
 800b86e:	4633      	mov	r3, r6
 800b870:	461e      	mov	r6, r3
 800b872:	3b01      	subs	r3, #1
 800b874:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b878:	2a39      	cmp	r2, #57	@ 0x39
 800b87a:	d052      	beq.n	800b922 <_dtoa_r+0xb12>
 800b87c:	3201      	adds	r2, #1
 800b87e:	701a      	strb	r2, [r3, #0]
 800b880:	e612      	b.n	800b4a8 <_dtoa_r+0x698>
 800b882:	2a00      	cmp	r2, #0
 800b884:	dd07      	ble.n	800b896 <_dtoa_r+0xa86>
 800b886:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b88a:	d0ed      	beq.n	800b868 <_dtoa_r+0xa58>
 800b88c:	f108 0301 	add.w	r3, r8, #1
 800b890:	9a00      	ldr	r2, [sp, #0]
 800b892:	7013      	strb	r3, [r2, #0]
 800b894:	e608      	b.n	800b4a8 <_dtoa_r+0x698>
 800b896:	9b07      	ldr	r3, [sp, #28]
 800b898:	9a07      	ldr	r2, [sp, #28]
 800b89a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b89e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d028      	beq.n	800b8f6 <_dtoa_r+0xae6>
 800b8a4:	4649      	mov	r1, r9
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	220a      	movs	r2, #10
 800b8aa:	4658      	mov	r0, fp
 800b8ac:	f000 f9d6 	bl	800bc5c <__multadd>
 800b8b0:	42af      	cmp	r7, r5
 800b8b2:	4681      	mov	r9, r0
 800b8b4:	f04f 0300 	mov.w	r3, #0
 800b8b8:	f04f 020a 	mov.w	r2, #10
 800b8bc:	4639      	mov	r1, r7
 800b8be:	4658      	mov	r0, fp
 800b8c0:	d107      	bne.n	800b8d2 <_dtoa_r+0xac2>
 800b8c2:	f000 f9cb 	bl	800bc5c <__multadd>
 800b8c6:	4607      	mov	r7, r0
 800b8c8:	4605      	mov	r5, r0
 800b8ca:	9b07      	ldr	r3, [sp, #28]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	9307      	str	r3, [sp, #28]
 800b8d0:	e774      	b.n	800b7bc <_dtoa_r+0x9ac>
 800b8d2:	f000 f9c3 	bl	800bc5c <__multadd>
 800b8d6:	4629      	mov	r1, r5
 800b8d8:	4607      	mov	r7, r0
 800b8da:	2300      	movs	r3, #0
 800b8dc:	220a      	movs	r2, #10
 800b8de:	4658      	mov	r0, fp
 800b8e0:	f000 f9bc 	bl	800bc5c <__multadd>
 800b8e4:	4605      	mov	r5, r0
 800b8e6:	e7f0      	b.n	800b8ca <_dtoa_r+0xaba>
 800b8e8:	9b00      	ldr	r3, [sp, #0]
 800b8ea:	2700      	movs	r7, #0
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	bfcc      	ite	gt
 800b8f0:	461e      	movgt	r6, r3
 800b8f2:	2601      	movle	r6, #1
 800b8f4:	4456      	add	r6, sl
 800b8f6:	4649      	mov	r1, r9
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	4658      	mov	r0, fp
 800b8fc:	f000 fb5c 	bl	800bfb8 <__lshift>
 800b900:	4621      	mov	r1, r4
 800b902:	4681      	mov	r9, r0
 800b904:	f000 fbc4 	bl	800c090 <__mcmp>
 800b908:	2800      	cmp	r0, #0
 800b90a:	dcb0      	bgt.n	800b86e <_dtoa_r+0xa5e>
 800b90c:	d102      	bne.n	800b914 <_dtoa_r+0xb04>
 800b90e:	f018 0f01 	tst.w	r8, #1
 800b912:	d1ac      	bne.n	800b86e <_dtoa_r+0xa5e>
 800b914:	4633      	mov	r3, r6
 800b916:	461e      	mov	r6, r3
 800b918:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b91c:	2a30      	cmp	r2, #48	@ 0x30
 800b91e:	d0fa      	beq.n	800b916 <_dtoa_r+0xb06>
 800b920:	e5c2      	b.n	800b4a8 <_dtoa_r+0x698>
 800b922:	459a      	cmp	sl, r3
 800b924:	d1a4      	bne.n	800b870 <_dtoa_r+0xa60>
 800b926:	9b04      	ldr	r3, [sp, #16]
 800b928:	3301      	adds	r3, #1
 800b92a:	9304      	str	r3, [sp, #16]
 800b92c:	2331      	movs	r3, #49	@ 0x31
 800b92e:	f88a 3000 	strb.w	r3, [sl]
 800b932:	e5b9      	b.n	800b4a8 <_dtoa_r+0x698>
 800b934:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b936:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b994 <_dtoa_r+0xb84>
 800b93a:	b11b      	cbz	r3, 800b944 <_dtoa_r+0xb34>
 800b93c:	f10a 0308 	add.w	r3, sl, #8
 800b940:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b942:	6013      	str	r3, [r2, #0]
 800b944:	4650      	mov	r0, sl
 800b946:	b019      	add	sp, #100	@ 0x64
 800b948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b94c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b94e:	2b01      	cmp	r3, #1
 800b950:	f77f ae37 	ble.w	800b5c2 <_dtoa_r+0x7b2>
 800b954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b956:	930a      	str	r3, [sp, #40]	@ 0x28
 800b958:	2001      	movs	r0, #1
 800b95a:	e655      	b.n	800b608 <_dtoa_r+0x7f8>
 800b95c:	9b00      	ldr	r3, [sp, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	f77f aed6 	ble.w	800b710 <_dtoa_r+0x900>
 800b964:	4656      	mov	r6, sl
 800b966:	4621      	mov	r1, r4
 800b968:	4648      	mov	r0, r9
 800b96a:	f7ff f9c3 	bl	800acf4 <quorem>
 800b96e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b972:	9b00      	ldr	r3, [sp, #0]
 800b974:	f806 8b01 	strb.w	r8, [r6], #1
 800b978:	eba6 020a 	sub.w	r2, r6, sl
 800b97c:	4293      	cmp	r3, r2
 800b97e:	ddb3      	ble.n	800b8e8 <_dtoa_r+0xad8>
 800b980:	4649      	mov	r1, r9
 800b982:	2300      	movs	r3, #0
 800b984:	220a      	movs	r2, #10
 800b986:	4658      	mov	r0, fp
 800b988:	f000 f968 	bl	800bc5c <__multadd>
 800b98c:	4681      	mov	r9, r0
 800b98e:	e7ea      	b.n	800b966 <_dtoa_r+0xb56>
 800b990:	0800cc1c 	.word	0x0800cc1c
 800b994:	0800cba0 	.word	0x0800cba0

0800b998 <_free_r>:
 800b998:	b538      	push	{r3, r4, r5, lr}
 800b99a:	4605      	mov	r5, r0
 800b99c:	2900      	cmp	r1, #0
 800b99e:	d041      	beq.n	800ba24 <_free_r+0x8c>
 800b9a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9a4:	1f0c      	subs	r4, r1, #4
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	bfb8      	it	lt
 800b9aa:	18e4      	addlt	r4, r4, r3
 800b9ac:	f000 f8e8 	bl	800bb80 <__malloc_lock>
 800b9b0:	4a1d      	ldr	r2, [pc, #116]	@ (800ba28 <_free_r+0x90>)
 800b9b2:	6813      	ldr	r3, [r2, #0]
 800b9b4:	b933      	cbnz	r3, 800b9c4 <_free_r+0x2c>
 800b9b6:	6063      	str	r3, [r4, #4]
 800b9b8:	6014      	str	r4, [r2, #0]
 800b9ba:	4628      	mov	r0, r5
 800b9bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9c0:	f000 b8e4 	b.w	800bb8c <__malloc_unlock>
 800b9c4:	42a3      	cmp	r3, r4
 800b9c6:	d908      	bls.n	800b9da <_free_r+0x42>
 800b9c8:	6820      	ldr	r0, [r4, #0]
 800b9ca:	1821      	adds	r1, r4, r0
 800b9cc:	428b      	cmp	r3, r1
 800b9ce:	bf01      	itttt	eq
 800b9d0:	6819      	ldreq	r1, [r3, #0]
 800b9d2:	685b      	ldreq	r3, [r3, #4]
 800b9d4:	1809      	addeq	r1, r1, r0
 800b9d6:	6021      	streq	r1, [r4, #0]
 800b9d8:	e7ed      	b.n	800b9b6 <_free_r+0x1e>
 800b9da:	461a      	mov	r2, r3
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	b10b      	cbz	r3, 800b9e4 <_free_r+0x4c>
 800b9e0:	42a3      	cmp	r3, r4
 800b9e2:	d9fa      	bls.n	800b9da <_free_r+0x42>
 800b9e4:	6811      	ldr	r1, [r2, #0]
 800b9e6:	1850      	adds	r0, r2, r1
 800b9e8:	42a0      	cmp	r0, r4
 800b9ea:	d10b      	bne.n	800ba04 <_free_r+0x6c>
 800b9ec:	6820      	ldr	r0, [r4, #0]
 800b9ee:	4401      	add	r1, r0
 800b9f0:	1850      	adds	r0, r2, r1
 800b9f2:	6011      	str	r1, [r2, #0]
 800b9f4:	4283      	cmp	r3, r0
 800b9f6:	d1e0      	bne.n	800b9ba <_free_r+0x22>
 800b9f8:	6818      	ldr	r0, [r3, #0]
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	4408      	add	r0, r1
 800b9fe:	6053      	str	r3, [r2, #4]
 800ba00:	6010      	str	r0, [r2, #0]
 800ba02:	e7da      	b.n	800b9ba <_free_r+0x22>
 800ba04:	d902      	bls.n	800ba0c <_free_r+0x74>
 800ba06:	230c      	movs	r3, #12
 800ba08:	602b      	str	r3, [r5, #0]
 800ba0a:	e7d6      	b.n	800b9ba <_free_r+0x22>
 800ba0c:	6820      	ldr	r0, [r4, #0]
 800ba0e:	1821      	adds	r1, r4, r0
 800ba10:	428b      	cmp	r3, r1
 800ba12:	bf02      	ittt	eq
 800ba14:	6819      	ldreq	r1, [r3, #0]
 800ba16:	685b      	ldreq	r3, [r3, #4]
 800ba18:	1809      	addeq	r1, r1, r0
 800ba1a:	6063      	str	r3, [r4, #4]
 800ba1c:	bf08      	it	eq
 800ba1e:	6021      	streq	r1, [r4, #0]
 800ba20:	6054      	str	r4, [r2, #4]
 800ba22:	e7ca      	b.n	800b9ba <_free_r+0x22>
 800ba24:	bd38      	pop	{r3, r4, r5, pc}
 800ba26:	bf00      	nop
 800ba28:	20000be0 	.word	0x20000be0

0800ba2c <malloc>:
 800ba2c:	4b02      	ldr	r3, [pc, #8]	@ (800ba38 <malloc+0xc>)
 800ba2e:	4601      	mov	r1, r0
 800ba30:	6818      	ldr	r0, [r3, #0]
 800ba32:	f000 b825 	b.w	800ba80 <_malloc_r>
 800ba36:	bf00      	nop
 800ba38:	20000018 	.word	0x20000018

0800ba3c <sbrk_aligned>:
 800ba3c:	b570      	push	{r4, r5, r6, lr}
 800ba3e:	4e0f      	ldr	r6, [pc, #60]	@ (800ba7c <sbrk_aligned+0x40>)
 800ba40:	460c      	mov	r4, r1
 800ba42:	4605      	mov	r5, r0
 800ba44:	6831      	ldr	r1, [r6, #0]
 800ba46:	b911      	cbnz	r1, 800ba4e <sbrk_aligned+0x12>
 800ba48:	f000 fed4 	bl	800c7f4 <_sbrk_r>
 800ba4c:	6030      	str	r0, [r6, #0]
 800ba4e:	4621      	mov	r1, r4
 800ba50:	4628      	mov	r0, r5
 800ba52:	f000 fecf 	bl	800c7f4 <_sbrk_r>
 800ba56:	1c43      	adds	r3, r0, #1
 800ba58:	d103      	bne.n	800ba62 <sbrk_aligned+0x26>
 800ba5a:	f04f 34ff 	mov.w	r4, #4294967295
 800ba5e:	4620      	mov	r0, r4
 800ba60:	bd70      	pop	{r4, r5, r6, pc}
 800ba62:	1cc4      	adds	r4, r0, #3
 800ba64:	f024 0403 	bic.w	r4, r4, #3
 800ba68:	42a0      	cmp	r0, r4
 800ba6a:	d0f8      	beq.n	800ba5e <sbrk_aligned+0x22>
 800ba6c:	1a21      	subs	r1, r4, r0
 800ba6e:	4628      	mov	r0, r5
 800ba70:	f000 fec0 	bl	800c7f4 <_sbrk_r>
 800ba74:	3001      	adds	r0, #1
 800ba76:	d1f2      	bne.n	800ba5e <sbrk_aligned+0x22>
 800ba78:	e7ef      	b.n	800ba5a <sbrk_aligned+0x1e>
 800ba7a:	bf00      	nop
 800ba7c:	20000bdc 	.word	0x20000bdc

0800ba80 <_malloc_r>:
 800ba80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba84:	1ccd      	adds	r5, r1, #3
 800ba86:	4606      	mov	r6, r0
 800ba88:	f025 0503 	bic.w	r5, r5, #3
 800ba8c:	3508      	adds	r5, #8
 800ba8e:	2d0c      	cmp	r5, #12
 800ba90:	bf38      	it	cc
 800ba92:	250c      	movcc	r5, #12
 800ba94:	2d00      	cmp	r5, #0
 800ba96:	db01      	blt.n	800ba9c <_malloc_r+0x1c>
 800ba98:	42a9      	cmp	r1, r5
 800ba9a:	d904      	bls.n	800baa6 <_malloc_r+0x26>
 800ba9c:	230c      	movs	r3, #12
 800ba9e:	6033      	str	r3, [r6, #0]
 800baa0:	2000      	movs	r0, #0
 800baa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bb7c <_malloc_r+0xfc>
 800baaa:	f000 f869 	bl	800bb80 <__malloc_lock>
 800baae:	f8d8 3000 	ldr.w	r3, [r8]
 800bab2:	461c      	mov	r4, r3
 800bab4:	bb44      	cbnz	r4, 800bb08 <_malloc_r+0x88>
 800bab6:	4629      	mov	r1, r5
 800bab8:	4630      	mov	r0, r6
 800baba:	f7ff ffbf 	bl	800ba3c <sbrk_aligned>
 800babe:	1c43      	adds	r3, r0, #1
 800bac0:	4604      	mov	r4, r0
 800bac2:	d158      	bne.n	800bb76 <_malloc_r+0xf6>
 800bac4:	f8d8 4000 	ldr.w	r4, [r8]
 800bac8:	4627      	mov	r7, r4
 800baca:	2f00      	cmp	r7, #0
 800bacc:	d143      	bne.n	800bb56 <_malloc_r+0xd6>
 800bace:	2c00      	cmp	r4, #0
 800bad0:	d04b      	beq.n	800bb6a <_malloc_r+0xea>
 800bad2:	6823      	ldr	r3, [r4, #0]
 800bad4:	4639      	mov	r1, r7
 800bad6:	4630      	mov	r0, r6
 800bad8:	eb04 0903 	add.w	r9, r4, r3
 800badc:	f000 fe8a 	bl	800c7f4 <_sbrk_r>
 800bae0:	4581      	cmp	r9, r0
 800bae2:	d142      	bne.n	800bb6a <_malloc_r+0xea>
 800bae4:	6821      	ldr	r1, [r4, #0]
 800bae6:	4630      	mov	r0, r6
 800bae8:	1a6d      	subs	r5, r5, r1
 800baea:	4629      	mov	r1, r5
 800baec:	f7ff ffa6 	bl	800ba3c <sbrk_aligned>
 800baf0:	3001      	adds	r0, #1
 800baf2:	d03a      	beq.n	800bb6a <_malloc_r+0xea>
 800baf4:	6823      	ldr	r3, [r4, #0]
 800baf6:	442b      	add	r3, r5
 800baf8:	6023      	str	r3, [r4, #0]
 800bafa:	f8d8 3000 	ldr.w	r3, [r8]
 800bafe:	685a      	ldr	r2, [r3, #4]
 800bb00:	bb62      	cbnz	r2, 800bb5c <_malloc_r+0xdc>
 800bb02:	f8c8 7000 	str.w	r7, [r8]
 800bb06:	e00f      	b.n	800bb28 <_malloc_r+0xa8>
 800bb08:	6822      	ldr	r2, [r4, #0]
 800bb0a:	1b52      	subs	r2, r2, r5
 800bb0c:	d420      	bmi.n	800bb50 <_malloc_r+0xd0>
 800bb0e:	2a0b      	cmp	r2, #11
 800bb10:	d917      	bls.n	800bb42 <_malloc_r+0xc2>
 800bb12:	1961      	adds	r1, r4, r5
 800bb14:	42a3      	cmp	r3, r4
 800bb16:	6025      	str	r5, [r4, #0]
 800bb18:	bf18      	it	ne
 800bb1a:	6059      	strne	r1, [r3, #4]
 800bb1c:	6863      	ldr	r3, [r4, #4]
 800bb1e:	bf08      	it	eq
 800bb20:	f8c8 1000 	streq.w	r1, [r8]
 800bb24:	5162      	str	r2, [r4, r5]
 800bb26:	604b      	str	r3, [r1, #4]
 800bb28:	4630      	mov	r0, r6
 800bb2a:	f000 f82f 	bl	800bb8c <__malloc_unlock>
 800bb2e:	f104 000b 	add.w	r0, r4, #11
 800bb32:	1d23      	adds	r3, r4, #4
 800bb34:	f020 0007 	bic.w	r0, r0, #7
 800bb38:	1ac2      	subs	r2, r0, r3
 800bb3a:	bf1c      	itt	ne
 800bb3c:	1a1b      	subne	r3, r3, r0
 800bb3e:	50a3      	strne	r3, [r4, r2]
 800bb40:	e7af      	b.n	800baa2 <_malloc_r+0x22>
 800bb42:	6862      	ldr	r2, [r4, #4]
 800bb44:	42a3      	cmp	r3, r4
 800bb46:	bf0c      	ite	eq
 800bb48:	f8c8 2000 	streq.w	r2, [r8]
 800bb4c:	605a      	strne	r2, [r3, #4]
 800bb4e:	e7eb      	b.n	800bb28 <_malloc_r+0xa8>
 800bb50:	4623      	mov	r3, r4
 800bb52:	6864      	ldr	r4, [r4, #4]
 800bb54:	e7ae      	b.n	800bab4 <_malloc_r+0x34>
 800bb56:	463c      	mov	r4, r7
 800bb58:	687f      	ldr	r7, [r7, #4]
 800bb5a:	e7b6      	b.n	800baca <_malloc_r+0x4a>
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	42a3      	cmp	r3, r4
 800bb62:	d1fb      	bne.n	800bb5c <_malloc_r+0xdc>
 800bb64:	2300      	movs	r3, #0
 800bb66:	6053      	str	r3, [r2, #4]
 800bb68:	e7de      	b.n	800bb28 <_malloc_r+0xa8>
 800bb6a:	230c      	movs	r3, #12
 800bb6c:	4630      	mov	r0, r6
 800bb6e:	6033      	str	r3, [r6, #0]
 800bb70:	f000 f80c 	bl	800bb8c <__malloc_unlock>
 800bb74:	e794      	b.n	800baa0 <_malloc_r+0x20>
 800bb76:	6005      	str	r5, [r0, #0]
 800bb78:	e7d6      	b.n	800bb28 <_malloc_r+0xa8>
 800bb7a:	bf00      	nop
 800bb7c:	20000be0 	.word	0x20000be0

0800bb80 <__malloc_lock>:
 800bb80:	4801      	ldr	r0, [pc, #4]	@ (800bb88 <__malloc_lock+0x8>)
 800bb82:	f7ff b89a 	b.w	800acba <__retarget_lock_acquire_recursive>
 800bb86:	bf00      	nop
 800bb88:	20000bd8 	.word	0x20000bd8

0800bb8c <__malloc_unlock>:
 800bb8c:	4801      	ldr	r0, [pc, #4]	@ (800bb94 <__malloc_unlock+0x8>)
 800bb8e:	f7ff b895 	b.w	800acbc <__retarget_lock_release_recursive>
 800bb92:	bf00      	nop
 800bb94:	20000bd8 	.word	0x20000bd8

0800bb98 <_Balloc>:
 800bb98:	b570      	push	{r4, r5, r6, lr}
 800bb9a:	69c6      	ldr	r6, [r0, #28]
 800bb9c:	4604      	mov	r4, r0
 800bb9e:	460d      	mov	r5, r1
 800bba0:	b976      	cbnz	r6, 800bbc0 <_Balloc+0x28>
 800bba2:	2010      	movs	r0, #16
 800bba4:	f7ff ff42 	bl	800ba2c <malloc>
 800bba8:	4602      	mov	r2, r0
 800bbaa:	61e0      	str	r0, [r4, #28]
 800bbac:	b920      	cbnz	r0, 800bbb8 <_Balloc+0x20>
 800bbae:	4b18      	ldr	r3, [pc, #96]	@ (800bc10 <_Balloc+0x78>)
 800bbb0:	216b      	movs	r1, #107	@ 0x6b
 800bbb2:	4818      	ldr	r0, [pc, #96]	@ (800bc14 <_Balloc+0x7c>)
 800bbb4:	f000 fe2e 	bl	800c814 <__assert_func>
 800bbb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbbc:	6006      	str	r6, [r0, #0]
 800bbbe:	60c6      	str	r6, [r0, #12]
 800bbc0:	69e6      	ldr	r6, [r4, #28]
 800bbc2:	68f3      	ldr	r3, [r6, #12]
 800bbc4:	b183      	cbz	r3, 800bbe8 <_Balloc+0x50>
 800bbc6:	69e3      	ldr	r3, [r4, #28]
 800bbc8:	68db      	ldr	r3, [r3, #12]
 800bbca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bbce:	b9b8      	cbnz	r0, 800bc00 <_Balloc+0x68>
 800bbd0:	2101      	movs	r1, #1
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	fa01 f605 	lsl.w	r6, r1, r5
 800bbd8:	1d72      	adds	r2, r6, #5
 800bbda:	0092      	lsls	r2, r2, #2
 800bbdc:	f000 fe38 	bl	800c850 <_calloc_r>
 800bbe0:	b160      	cbz	r0, 800bbfc <_Balloc+0x64>
 800bbe2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bbe6:	e00e      	b.n	800bc06 <_Balloc+0x6e>
 800bbe8:	2221      	movs	r2, #33	@ 0x21
 800bbea:	2104      	movs	r1, #4
 800bbec:	4620      	mov	r0, r4
 800bbee:	f000 fe2f 	bl	800c850 <_calloc_r>
 800bbf2:	69e3      	ldr	r3, [r4, #28]
 800bbf4:	60f0      	str	r0, [r6, #12]
 800bbf6:	68db      	ldr	r3, [r3, #12]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d1e4      	bne.n	800bbc6 <_Balloc+0x2e>
 800bbfc:	2000      	movs	r0, #0
 800bbfe:	bd70      	pop	{r4, r5, r6, pc}
 800bc00:	6802      	ldr	r2, [r0, #0]
 800bc02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc06:	2300      	movs	r3, #0
 800bc08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc0c:	e7f7      	b.n	800bbfe <_Balloc+0x66>
 800bc0e:	bf00      	nop
 800bc10:	0800cbad 	.word	0x0800cbad
 800bc14:	0800cc2d 	.word	0x0800cc2d

0800bc18 <_Bfree>:
 800bc18:	b570      	push	{r4, r5, r6, lr}
 800bc1a:	69c6      	ldr	r6, [r0, #28]
 800bc1c:	4605      	mov	r5, r0
 800bc1e:	460c      	mov	r4, r1
 800bc20:	b976      	cbnz	r6, 800bc40 <_Bfree+0x28>
 800bc22:	2010      	movs	r0, #16
 800bc24:	f7ff ff02 	bl	800ba2c <malloc>
 800bc28:	4602      	mov	r2, r0
 800bc2a:	61e8      	str	r0, [r5, #28]
 800bc2c:	b920      	cbnz	r0, 800bc38 <_Bfree+0x20>
 800bc2e:	4b09      	ldr	r3, [pc, #36]	@ (800bc54 <_Bfree+0x3c>)
 800bc30:	218f      	movs	r1, #143	@ 0x8f
 800bc32:	4809      	ldr	r0, [pc, #36]	@ (800bc58 <_Bfree+0x40>)
 800bc34:	f000 fdee 	bl	800c814 <__assert_func>
 800bc38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc3c:	6006      	str	r6, [r0, #0]
 800bc3e:	60c6      	str	r6, [r0, #12]
 800bc40:	b13c      	cbz	r4, 800bc52 <_Bfree+0x3a>
 800bc42:	69eb      	ldr	r3, [r5, #28]
 800bc44:	6862      	ldr	r2, [r4, #4]
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc4c:	6021      	str	r1, [r4, #0]
 800bc4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc52:	bd70      	pop	{r4, r5, r6, pc}
 800bc54:	0800cbad 	.word	0x0800cbad
 800bc58:	0800cc2d 	.word	0x0800cc2d

0800bc5c <__multadd>:
 800bc5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc60:	f101 0c14 	add.w	ip, r1, #20
 800bc64:	4607      	mov	r7, r0
 800bc66:	460c      	mov	r4, r1
 800bc68:	461e      	mov	r6, r3
 800bc6a:	690d      	ldr	r5, [r1, #16]
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	f8dc 3000 	ldr.w	r3, [ip]
 800bc72:	3001      	adds	r0, #1
 800bc74:	b299      	uxth	r1, r3
 800bc76:	4285      	cmp	r5, r0
 800bc78:	fb02 6101 	mla	r1, r2, r1, r6
 800bc7c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bc80:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800bc84:	b289      	uxth	r1, r1
 800bc86:	fb02 3306 	mla	r3, r2, r6, r3
 800bc8a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bc92:	f84c 1b04 	str.w	r1, [ip], #4
 800bc96:	dcea      	bgt.n	800bc6e <__multadd+0x12>
 800bc98:	b30e      	cbz	r6, 800bcde <__multadd+0x82>
 800bc9a:	68a3      	ldr	r3, [r4, #8]
 800bc9c:	42ab      	cmp	r3, r5
 800bc9e:	dc19      	bgt.n	800bcd4 <__multadd+0x78>
 800bca0:	6861      	ldr	r1, [r4, #4]
 800bca2:	4638      	mov	r0, r7
 800bca4:	3101      	adds	r1, #1
 800bca6:	f7ff ff77 	bl	800bb98 <_Balloc>
 800bcaa:	4680      	mov	r8, r0
 800bcac:	b928      	cbnz	r0, 800bcba <__multadd+0x5e>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	4b0c      	ldr	r3, [pc, #48]	@ (800bce4 <__multadd+0x88>)
 800bcb2:	21ba      	movs	r1, #186	@ 0xba
 800bcb4:	480c      	ldr	r0, [pc, #48]	@ (800bce8 <__multadd+0x8c>)
 800bcb6:	f000 fdad 	bl	800c814 <__assert_func>
 800bcba:	6922      	ldr	r2, [r4, #16]
 800bcbc:	f104 010c 	add.w	r1, r4, #12
 800bcc0:	300c      	adds	r0, #12
 800bcc2:	3202      	adds	r2, #2
 800bcc4:	0092      	lsls	r2, r2, #2
 800bcc6:	f7ff f808 	bl	800acda <memcpy>
 800bcca:	4621      	mov	r1, r4
 800bccc:	4644      	mov	r4, r8
 800bcce:	4638      	mov	r0, r7
 800bcd0:	f7ff ffa2 	bl	800bc18 <_Bfree>
 800bcd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bcd8:	3501      	adds	r5, #1
 800bcda:	615e      	str	r6, [r3, #20]
 800bcdc:	6125      	str	r5, [r4, #16]
 800bcde:	4620      	mov	r0, r4
 800bce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bce4:	0800cc1c 	.word	0x0800cc1c
 800bce8:	0800cc2d 	.word	0x0800cc2d

0800bcec <__hi0bits>:
 800bcec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	bf36      	itet	cc
 800bcf4:	0403      	lslcc	r3, r0, #16
 800bcf6:	2000      	movcs	r0, #0
 800bcf8:	2010      	movcc	r0, #16
 800bcfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bcfe:	bf3c      	itt	cc
 800bd00:	021b      	lslcc	r3, r3, #8
 800bd02:	3008      	addcc	r0, #8
 800bd04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd08:	bf3c      	itt	cc
 800bd0a:	011b      	lslcc	r3, r3, #4
 800bd0c:	3004      	addcc	r0, #4
 800bd0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd12:	bf3c      	itt	cc
 800bd14:	009b      	lslcc	r3, r3, #2
 800bd16:	3002      	addcc	r0, #2
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	db05      	blt.n	800bd28 <__hi0bits+0x3c>
 800bd1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bd20:	f100 0001 	add.w	r0, r0, #1
 800bd24:	bf08      	it	eq
 800bd26:	2020      	moveq	r0, #32
 800bd28:	4770      	bx	lr

0800bd2a <__lo0bits>:
 800bd2a:	6803      	ldr	r3, [r0, #0]
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	f013 0007 	ands.w	r0, r3, #7
 800bd32:	d00b      	beq.n	800bd4c <__lo0bits+0x22>
 800bd34:	07d9      	lsls	r1, r3, #31
 800bd36:	d421      	bmi.n	800bd7c <__lo0bits+0x52>
 800bd38:	0798      	lsls	r0, r3, #30
 800bd3a:	bf47      	ittee	mi
 800bd3c:	085b      	lsrmi	r3, r3, #1
 800bd3e:	2001      	movmi	r0, #1
 800bd40:	089b      	lsrpl	r3, r3, #2
 800bd42:	2002      	movpl	r0, #2
 800bd44:	bf4c      	ite	mi
 800bd46:	6013      	strmi	r3, [r2, #0]
 800bd48:	6013      	strpl	r3, [r2, #0]
 800bd4a:	4770      	bx	lr
 800bd4c:	b299      	uxth	r1, r3
 800bd4e:	b909      	cbnz	r1, 800bd54 <__lo0bits+0x2a>
 800bd50:	0c1b      	lsrs	r3, r3, #16
 800bd52:	2010      	movs	r0, #16
 800bd54:	b2d9      	uxtb	r1, r3
 800bd56:	b909      	cbnz	r1, 800bd5c <__lo0bits+0x32>
 800bd58:	3008      	adds	r0, #8
 800bd5a:	0a1b      	lsrs	r3, r3, #8
 800bd5c:	0719      	lsls	r1, r3, #28
 800bd5e:	bf04      	itt	eq
 800bd60:	091b      	lsreq	r3, r3, #4
 800bd62:	3004      	addeq	r0, #4
 800bd64:	0799      	lsls	r1, r3, #30
 800bd66:	bf04      	itt	eq
 800bd68:	089b      	lsreq	r3, r3, #2
 800bd6a:	3002      	addeq	r0, #2
 800bd6c:	07d9      	lsls	r1, r3, #31
 800bd6e:	d403      	bmi.n	800bd78 <__lo0bits+0x4e>
 800bd70:	085b      	lsrs	r3, r3, #1
 800bd72:	f100 0001 	add.w	r0, r0, #1
 800bd76:	d003      	beq.n	800bd80 <__lo0bits+0x56>
 800bd78:	6013      	str	r3, [r2, #0]
 800bd7a:	4770      	bx	lr
 800bd7c:	2000      	movs	r0, #0
 800bd7e:	4770      	bx	lr
 800bd80:	2020      	movs	r0, #32
 800bd82:	4770      	bx	lr

0800bd84 <__i2b>:
 800bd84:	b510      	push	{r4, lr}
 800bd86:	460c      	mov	r4, r1
 800bd88:	2101      	movs	r1, #1
 800bd8a:	f7ff ff05 	bl	800bb98 <_Balloc>
 800bd8e:	4602      	mov	r2, r0
 800bd90:	b928      	cbnz	r0, 800bd9e <__i2b+0x1a>
 800bd92:	4b05      	ldr	r3, [pc, #20]	@ (800bda8 <__i2b+0x24>)
 800bd94:	f240 1145 	movw	r1, #325	@ 0x145
 800bd98:	4804      	ldr	r0, [pc, #16]	@ (800bdac <__i2b+0x28>)
 800bd9a:	f000 fd3b 	bl	800c814 <__assert_func>
 800bd9e:	2301      	movs	r3, #1
 800bda0:	6144      	str	r4, [r0, #20]
 800bda2:	6103      	str	r3, [r0, #16]
 800bda4:	bd10      	pop	{r4, pc}
 800bda6:	bf00      	nop
 800bda8:	0800cc1c 	.word	0x0800cc1c
 800bdac:	0800cc2d 	.word	0x0800cc2d

0800bdb0 <__multiply>:
 800bdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb4:	4614      	mov	r4, r2
 800bdb6:	690a      	ldr	r2, [r1, #16]
 800bdb8:	460f      	mov	r7, r1
 800bdba:	b085      	sub	sp, #20
 800bdbc:	6923      	ldr	r3, [r4, #16]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	bfa2      	ittt	ge
 800bdc2:	4623      	movge	r3, r4
 800bdc4:	460c      	movge	r4, r1
 800bdc6:	461f      	movge	r7, r3
 800bdc8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bdcc:	68a3      	ldr	r3, [r4, #8]
 800bdce:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bdd2:	6861      	ldr	r1, [r4, #4]
 800bdd4:	eb0a 0609 	add.w	r6, sl, r9
 800bdd8:	42b3      	cmp	r3, r6
 800bdda:	bfb8      	it	lt
 800bddc:	3101      	addlt	r1, #1
 800bdde:	f7ff fedb 	bl	800bb98 <_Balloc>
 800bde2:	b930      	cbnz	r0, 800bdf2 <__multiply+0x42>
 800bde4:	4602      	mov	r2, r0
 800bde6:	4b45      	ldr	r3, [pc, #276]	@ (800befc <__multiply+0x14c>)
 800bde8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bdec:	4844      	ldr	r0, [pc, #272]	@ (800bf00 <__multiply+0x150>)
 800bdee:	f000 fd11 	bl	800c814 <__assert_func>
 800bdf2:	f100 0514 	add.w	r5, r0, #20
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bdfc:	462b      	mov	r3, r5
 800bdfe:	4543      	cmp	r3, r8
 800be00:	d321      	bcc.n	800be46 <__multiply+0x96>
 800be02:	f107 0114 	add.w	r1, r7, #20
 800be06:	f104 0214 	add.w	r2, r4, #20
 800be0a:	f104 0715 	add.w	r7, r4, #21
 800be0e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800be12:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800be16:	9302      	str	r3, [sp, #8]
 800be18:	1b13      	subs	r3, r2, r4
 800be1a:	3b15      	subs	r3, #21
 800be1c:	f023 0303 	bic.w	r3, r3, #3
 800be20:	3304      	adds	r3, #4
 800be22:	42ba      	cmp	r2, r7
 800be24:	bf38      	it	cc
 800be26:	2304      	movcc	r3, #4
 800be28:	9301      	str	r3, [sp, #4]
 800be2a:	9b02      	ldr	r3, [sp, #8]
 800be2c:	9103      	str	r1, [sp, #12]
 800be2e:	428b      	cmp	r3, r1
 800be30:	d80c      	bhi.n	800be4c <__multiply+0x9c>
 800be32:	2e00      	cmp	r6, #0
 800be34:	dd03      	ble.n	800be3e <__multiply+0x8e>
 800be36:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d05b      	beq.n	800bef6 <__multiply+0x146>
 800be3e:	6106      	str	r6, [r0, #16]
 800be40:	b005      	add	sp, #20
 800be42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be46:	f843 2b04 	str.w	r2, [r3], #4
 800be4a:	e7d8      	b.n	800bdfe <__multiply+0x4e>
 800be4c:	f8b1 a000 	ldrh.w	sl, [r1]
 800be50:	f1ba 0f00 	cmp.w	sl, #0
 800be54:	d024      	beq.n	800bea0 <__multiply+0xf0>
 800be56:	f104 0e14 	add.w	lr, r4, #20
 800be5a:	46a9      	mov	r9, r5
 800be5c:	f04f 0c00 	mov.w	ip, #0
 800be60:	f85e 7b04 	ldr.w	r7, [lr], #4
 800be64:	f8d9 3000 	ldr.w	r3, [r9]
 800be68:	fa1f fb87 	uxth.w	fp, r7
 800be6c:	4572      	cmp	r2, lr
 800be6e:	b29b      	uxth	r3, r3
 800be70:	fb0a 330b 	mla	r3, sl, fp, r3
 800be74:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800be78:	f8d9 7000 	ldr.w	r7, [r9]
 800be7c:	4463      	add	r3, ip
 800be7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800be82:	fb0a c70b 	mla	r7, sl, fp, ip
 800be86:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800be90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800be94:	f849 3b04 	str.w	r3, [r9], #4
 800be98:	d8e2      	bhi.n	800be60 <__multiply+0xb0>
 800be9a:	9b01      	ldr	r3, [sp, #4]
 800be9c:	f845 c003 	str.w	ip, [r5, r3]
 800bea0:	9b03      	ldr	r3, [sp, #12]
 800bea2:	3104      	adds	r1, #4
 800bea4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bea8:	f1b9 0f00 	cmp.w	r9, #0
 800beac:	d021      	beq.n	800bef2 <__multiply+0x142>
 800beae:	682b      	ldr	r3, [r5, #0]
 800beb0:	f104 0c14 	add.w	ip, r4, #20
 800beb4:	46ae      	mov	lr, r5
 800beb6:	f04f 0a00 	mov.w	sl, #0
 800beba:	f8bc b000 	ldrh.w	fp, [ip]
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bec4:	fb09 770b 	mla	r7, r9, fp, r7
 800bec8:	4457      	add	r7, sl
 800beca:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bece:	f84e 3b04 	str.w	r3, [lr], #4
 800bed2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bed6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800beda:	f8be 3000 	ldrh.w	r3, [lr]
 800bede:	4562      	cmp	r2, ip
 800bee0:	fb09 330a 	mla	r3, r9, sl, r3
 800bee4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bee8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800beec:	d8e5      	bhi.n	800beba <__multiply+0x10a>
 800beee:	9f01      	ldr	r7, [sp, #4]
 800bef0:	51eb      	str	r3, [r5, r7]
 800bef2:	3504      	adds	r5, #4
 800bef4:	e799      	b.n	800be2a <__multiply+0x7a>
 800bef6:	3e01      	subs	r6, #1
 800bef8:	e79b      	b.n	800be32 <__multiply+0x82>
 800befa:	bf00      	nop
 800befc:	0800cc1c 	.word	0x0800cc1c
 800bf00:	0800cc2d 	.word	0x0800cc2d

0800bf04 <__pow5mult>:
 800bf04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf08:	4615      	mov	r5, r2
 800bf0a:	f012 0203 	ands.w	r2, r2, #3
 800bf0e:	4607      	mov	r7, r0
 800bf10:	460e      	mov	r6, r1
 800bf12:	d007      	beq.n	800bf24 <__pow5mult+0x20>
 800bf14:	3a01      	subs	r2, #1
 800bf16:	4c25      	ldr	r4, [pc, #148]	@ (800bfac <__pow5mult+0xa8>)
 800bf18:	2300      	movs	r3, #0
 800bf1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf1e:	f7ff fe9d 	bl	800bc5c <__multadd>
 800bf22:	4606      	mov	r6, r0
 800bf24:	10ad      	asrs	r5, r5, #2
 800bf26:	d03d      	beq.n	800bfa4 <__pow5mult+0xa0>
 800bf28:	69fc      	ldr	r4, [r7, #28]
 800bf2a:	b97c      	cbnz	r4, 800bf4c <__pow5mult+0x48>
 800bf2c:	2010      	movs	r0, #16
 800bf2e:	f7ff fd7d 	bl	800ba2c <malloc>
 800bf32:	4602      	mov	r2, r0
 800bf34:	61f8      	str	r0, [r7, #28]
 800bf36:	b928      	cbnz	r0, 800bf44 <__pow5mult+0x40>
 800bf38:	4b1d      	ldr	r3, [pc, #116]	@ (800bfb0 <__pow5mult+0xac>)
 800bf3a:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bf3e:	481d      	ldr	r0, [pc, #116]	@ (800bfb4 <__pow5mult+0xb0>)
 800bf40:	f000 fc68 	bl	800c814 <__assert_func>
 800bf44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bf48:	6004      	str	r4, [r0, #0]
 800bf4a:	60c4      	str	r4, [r0, #12]
 800bf4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bf50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bf54:	b94c      	cbnz	r4, 800bf6a <__pow5mult+0x66>
 800bf56:	f240 2171 	movw	r1, #625	@ 0x271
 800bf5a:	4638      	mov	r0, r7
 800bf5c:	f7ff ff12 	bl	800bd84 <__i2b>
 800bf60:	2300      	movs	r3, #0
 800bf62:	4604      	mov	r4, r0
 800bf64:	f8c8 0008 	str.w	r0, [r8, #8]
 800bf68:	6003      	str	r3, [r0, #0]
 800bf6a:	f04f 0900 	mov.w	r9, #0
 800bf6e:	07eb      	lsls	r3, r5, #31
 800bf70:	d50a      	bpl.n	800bf88 <__pow5mult+0x84>
 800bf72:	4631      	mov	r1, r6
 800bf74:	4622      	mov	r2, r4
 800bf76:	4638      	mov	r0, r7
 800bf78:	f7ff ff1a 	bl	800bdb0 <__multiply>
 800bf7c:	4680      	mov	r8, r0
 800bf7e:	4631      	mov	r1, r6
 800bf80:	4638      	mov	r0, r7
 800bf82:	4646      	mov	r6, r8
 800bf84:	f7ff fe48 	bl	800bc18 <_Bfree>
 800bf88:	106d      	asrs	r5, r5, #1
 800bf8a:	d00b      	beq.n	800bfa4 <__pow5mult+0xa0>
 800bf8c:	6820      	ldr	r0, [r4, #0]
 800bf8e:	b938      	cbnz	r0, 800bfa0 <__pow5mult+0x9c>
 800bf90:	4622      	mov	r2, r4
 800bf92:	4621      	mov	r1, r4
 800bf94:	4638      	mov	r0, r7
 800bf96:	f7ff ff0b 	bl	800bdb0 <__multiply>
 800bf9a:	6020      	str	r0, [r4, #0]
 800bf9c:	f8c0 9000 	str.w	r9, [r0]
 800bfa0:	4604      	mov	r4, r0
 800bfa2:	e7e4      	b.n	800bf6e <__pow5mult+0x6a>
 800bfa4:	4630      	mov	r0, r6
 800bfa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfaa:	bf00      	nop
 800bfac:	0800cc88 	.word	0x0800cc88
 800bfb0:	0800cbad 	.word	0x0800cbad
 800bfb4:	0800cc2d 	.word	0x0800cc2d

0800bfb8 <__lshift>:
 800bfb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfbc:	460c      	mov	r4, r1
 800bfbe:	4607      	mov	r7, r0
 800bfc0:	4691      	mov	r9, r2
 800bfc2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bfc6:	6923      	ldr	r3, [r4, #16]
 800bfc8:	6849      	ldr	r1, [r1, #4]
 800bfca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bfce:	68a3      	ldr	r3, [r4, #8]
 800bfd0:	f108 0601 	add.w	r6, r8, #1
 800bfd4:	42b3      	cmp	r3, r6
 800bfd6:	db0b      	blt.n	800bff0 <__lshift+0x38>
 800bfd8:	4638      	mov	r0, r7
 800bfda:	f7ff fddd 	bl	800bb98 <_Balloc>
 800bfde:	4605      	mov	r5, r0
 800bfe0:	b948      	cbnz	r0, 800bff6 <__lshift+0x3e>
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	4b28      	ldr	r3, [pc, #160]	@ (800c088 <__lshift+0xd0>)
 800bfe6:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bfea:	4828      	ldr	r0, [pc, #160]	@ (800c08c <__lshift+0xd4>)
 800bfec:	f000 fc12 	bl	800c814 <__assert_func>
 800bff0:	3101      	adds	r1, #1
 800bff2:	005b      	lsls	r3, r3, #1
 800bff4:	e7ee      	b.n	800bfd4 <__lshift+0x1c>
 800bff6:	2300      	movs	r3, #0
 800bff8:	f100 0114 	add.w	r1, r0, #20
 800bffc:	f100 0210 	add.w	r2, r0, #16
 800c000:	4618      	mov	r0, r3
 800c002:	4553      	cmp	r3, sl
 800c004:	db33      	blt.n	800c06e <__lshift+0xb6>
 800c006:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c00a:	f104 0314 	add.w	r3, r4, #20
 800c00e:	6920      	ldr	r0, [r4, #16]
 800c010:	f019 091f 	ands.w	r9, r9, #31
 800c014:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c018:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c01c:	d02b      	beq.n	800c076 <__lshift+0xbe>
 800c01e:	f1c9 0e20 	rsb	lr, r9, #32
 800c022:	468a      	mov	sl, r1
 800c024:	2200      	movs	r2, #0
 800c026:	6818      	ldr	r0, [r3, #0]
 800c028:	fa00 f009 	lsl.w	r0, r0, r9
 800c02c:	4310      	orrs	r0, r2
 800c02e:	f84a 0b04 	str.w	r0, [sl], #4
 800c032:	f853 2b04 	ldr.w	r2, [r3], #4
 800c036:	459c      	cmp	ip, r3
 800c038:	fa22 f20e 	lsr.w	r2, r2, lr
 800c03c:	d8f3      	bhi.n	800c026 <__lshift+0x6e>
 800c03e:	ebac 0304 	sub.w	r3, ip, r4
 800c042:	f104 0015 	add.w	r0, r4, #21
 800c046:	3b15      	subs	r3, #21
 800c048:	f023 0303 	bic.w	r3, r3, #3
 800c04c:	3304      	adds	r3, #4
 800c04e:	4584      	cmp	ip, r0
 800c050:	bf38      	it	cc
 800c052:	2304      	movcc	r3, #4
 800c054:	50ca      	str	r2, [r1, r3]
 800c056:	b10a      	cbz	r2, 800c05c <__lshift+0xa4>
 800c058:	f108 0602 	add.w	r6, r8, #2
 800c05c:	3e01      	subs	r6, #1
 800c05e:	4638      	mov	r0, r7
 800c060:	4621      	mov	r1, r4
 800c062:	612e      	str	r6, [r5, #16]
 800c064:	f7ff fdd8 	bl	800bc18 <_Bfree>
 800c068:	4628      	mov	r0, r5
 800c06a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c06e:	3301      	adds	r3, #1
 800c070:	f842 0f04 	str.w	r0, [r2, #4]!
 800c074:	e7c5      	b.n	800c002 <__lshift+0x4a>
 800c076:	3904      	subs	r1, #4
 800c078:	f853 2b04 	ldr.w	r2, [r3], #4
 800c07c:	459c      	cmp	ip, r3
 800c07e:	f841 2f04 	str.w	r2, [r1, #4]!
 800c082:	d8f9      	bhi.n	800c078 <__lshift+0xc0>
 800c084:	e7ea      	b.n	800c05c <__lshift+0xa4>
 800c086:	bf00      	nop
 800c088:	0800cc1c 	.word	0x0800cc1c
 800c08c:	0800cc2d 	.word	0x0800cc2d

0800c090 <__mcmp>:
 800c090:	4603      	mov	r3, r0
 800c092:	690a      	ldr	r2, [r1, #16]
 800c094:	6900      	ldr	r0, [r0, #16]
 800c096:	1a80      	subs	r0, r0, r2
 800c098:	b530      	push	{r4, r5, lr}
 800c09a:	d10e      	bne.n	800c0ba <__mcmp+0x2a>
 800c09c:	3314      	adds	r3, #20
 800c09e:	3114      	adds	r1, #20
 800c0a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c0a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c0a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c0ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c0b0:	4295      	cmp	r5, r2
 800c0b2:	d003      	beq.n	800c0bc <__mcmp+0x2c>
 800c0b4:	d205      	bcs.n	800c0c2 <__mcmp+0x32>
 800c0b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ba:	bd30      	pop	{r4, r5, pc}
 800c0bc:	42a3      	cmp	r3, r4
 800c0be:	d3f3      	bcc.n	800c0a8 <__mcmp+0x18>
 800c0c0:	e7fb      	b.n	800c0ba <__mcmp+0x2a>
 800c0c2:	2001      	movs	r0, #1
 800c0c4:	e7f9      	b.n	800c0ba <__mcmp+0x2a>
	...

0800c0c8 <__mdiff>:
 800c0c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0cc:	4689      	mov	r9, r1
 800c0ce:	4606      	mov	r6, r0
 800c0d0:	4611      	mov	r1, r2
 800c0d2:	4614      	mov	r4, r2
 800c0d4:	4648      	mov	r0, r9
 800c0d6:	f7ff ffdb 	bl	800c090 <__mcmp>
 800c0da:	1e05      	subs	r5, r0, #0
 800c0dc:	d112      	bne.n	800c104 <__mdiff+0x3c>
 800c0de:	4629      	mov	r1, r5
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	f7ff fd59 	bl	800bb98 <_Balloc>
 800c0e6:	4602      	mov	r2, r0
 800c0e8:	b928      	cbnz	r0, 800c0f6 <__mdiff+0x2e>
 800c0ea:	4b41      	ldr	r3, [pc, #260]	@ (800c1f0 <__mdiff+0x128>)
 800c0ec:	f240 2137 	movw	r1, #567	@ 0x237
 800c0f0:	4840      	ldr	r0, [pc, #256]	@ (800c1f4 <__mdiff+0x12c>)
 800c0f2:	f000 fb8f 	bl	800c814 <__assert_func>
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c0fc:	4610      	mov	r0, r2
 800c0fe:	b003      	add	sp, #12
 800c100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c104:	bfbc      	itt	lt
 800c106:	464b      	movlt	r3, r9
 800c108:	46a1      	movlt	r9, r4
 800c10a:	4630      	mov	r0, r6
 800c10c:	bfb8      	it	lt
 800c10e:	2501      	movlt	r5, #1
 800c110:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c114:	bfb4      	ite	lt
 800c116:	461c      	movlt	r4, r3
 800c118:	2500      	movge	r5, #0
 800c11a:	f7ff fd3d 	bl	800bb98 <_Balloc>
 800c11e:	4602      	mov	r2, r0
 800c120:	b918      	cbnz	r0, 800c12a <__mdiff+0x62>
 800c122:	4b33      	ldr	r3, [pc, #204]	@ (800c1f0 <__mdiff+0x128>)
 800c124:	f240 2145 	movw	r1, #581	@ 0x245
 800c128:	e7e2      	b.n	800c0f0 <__mdiff+0x28>
 800c12a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c12e:	f104 0e14 	add.w	lr, r4, #20
 800c132:	6926      	ldr	r6, [r4, #16]
 800c134:	f100 0b14 	add.w	fp, r0, #20
 800c138:	60c5      	str	r5, [r0, #12]
 800c13a:	f109 0514 	add.w	r5, r9, #20
 800c13e:	f109 0310 	add.w	r3, r9, #16
 800c142:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c146:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c14a:	46d9      	mov	r9, fp
 800c14c:	f04f 0c00 	mov.w	ip, #0
 800c150:	9301      	str	r3, [sp, #4]
 800c152:	9b01      	ldr	r3, [sp, #4]
 800c154:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c158:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c15c:	4576      	cmp	r6, lr
 800c15e:	9301      	str	r3, [sp, #4]
 800c160:	fa1f f38a 	uxth.w	r3, sl
 800c164:	4619      	mov	r1, r3
 800c166:	b283      	uxth	r3, r0
 800c168:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800c16c:	eba1 0303 	sub.w	r3, r1, r3
 800c170:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c174:	4463      	add	r3, ip
 800c176:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c17a:	b29b      	uxth	r3, r3
 800c17c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c180:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c184:	f849 3b04 	str.w	r3, [r9], #4
 800c188:	d8e3      	bhi.n	800c152 <__mdiff+0x8a>
 800c18a:	1b33      	subs	r3, r6, r4
 800c18c:	3415      	adds	r4, #21
 800c18e:	3b15      	subs	r3, #21
 800c190:	f023 0303 	bic.w	r3, r3, #3
 800c194:	3304      	adds	r3, #4
 800c196:	42a6      	cmp	r6, r4
 800c198:	bf38      	it	cc
 800c19a:	2304      	movcc	r3, #4
 800c19c:	441d      	add	r5, r3
 800c19e:	445b      	add	r3, fp
 800c1a0:	462c      	mov	r4, r5
 800c1a2:	461e      	mov	r6, r3
 800c1a4:	4544      	cmp	r4, r8
 800c1a6:	d30e      	bcc.n	800c1c6 <__mdiff+0xfe>
 800c1a8:	f108 0103 	add.w	r1, r8, #3
 800c1ac:	1b49      	subs	r1, r1, r5
 800c1ae:	3d03      	subs	r5, #3
 800c1b0:	f021 0103 	bic.w	r1, r1, #3
 800c1b4:	45a8      	cmp	r8, r5
 800c1b6:	bf38      	it	cc
 800c1b8:	2100      	movcc	r1, #0
 800c1ba:	440b      	add	r3, r1
 800c1bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c1c0:	b199      	cbz	r1, 800c1ea <__mdiff+0x122>
 800c1c2:	6117      	str	r7, [r2, #16]
 800c1c4:	e79a      	b.n	800c0fc <__mdiff+0x34>
 800c1c6:	f854 1b04 	ldr.w	r1, [r4], #4
 800c1ca:	46e6      	mov	lr, ip
 800c1cc:	fa1f fc81 	uxth.w	ip, r1
 800c1d0:	0c08      	lsrs	r0, r1, #16
 800c1d2:	4471      	add	r1, lr
 800c1d4:	44f4      	add	ip, lr
 800c1d6:	b289      	uxth	r1, r1
 800c1d8:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c1dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c1e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c1e4:	f846 1b04 	str.w	r1, [r6], #4
 800c1e8:	e7dc      	b.n	800c1a4 <__mdiff+0xdc>
 800c1ea:	3f01      	subs	r7, #1
 800c1ec:	e7e6      	b.n	800c1bc <__mdiff+0xf4>
 800c1ee:	bf00      	nop
 800c1f0:	0800cc1c 	.word	0x0800cc1c
 800c1f4:	0800cc2d 	.word	0x0800cc2d

0800c1f8 <__d2b>:
 800c1f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c1fc:	460f      	mov	r7, r1
 800c1fe:	2101      	movs	r1, #1
 800c200:	4616      	mov	r6, r2
 800c202:	ec59 8b10 	vmov	r8, r9, d0
 800c206:	f7ff fcc7 	bl	800bb98 <_Balloc>
 800c20a:	4604      	mov	r4, r0
 800c20c:	b930      	cbnz	r0, 800c21c <__d2b+0x24>
 800c20e:	4602      	mov	r2, r0
 800c210:	4b23      	ldr	r3, [pc, #140]	@ (800c2a0 <__d2b+0xa8>)
 800c212:	f240 310f 	movw	r1, #783	@ 0x30f
 800c216:	4823      	ldr	r0, [pc, #140]	@ (800c2a4 <__d2b+0xac>)
 800c218:	f000 fafc 	bl	800c814 <__assert_func>
 800c21c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c220:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c224:	b10d      	cbz	r5, 800c22a <__d2b+0x32>
 800c226:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c22a:	9301      	str	r3, [sp, #4]
 800c22c:	f1b8 0300 	subs.w	r3, r8, #0
 800c230:	d023      	beq.n	800c27a <__d2b+0x82>
 800c232:	4668      	mov	r0, sp
 800c234:	9300      	str	r3, [sp, #0]
 800c236:	f7ff fd78 	bl	800bd2a <__lo0bits>
 800c23a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c23e:	b1d0      	cbz	r0, 800c276 <__d2b+0x7e>
 800c240:	f1c0 0320 	rsb	r3, r0, #32
 800c244:	fa02 f303 	lsl.w	r3, r2, r3
 800c248:	40c2      	lsrs	r2, r0
 800c24a:	430b      	orrs	r3, r1
 800c24c:	9201      	str	r2, [sp, #4]
 800c24e:	6163      	str	r3, [r4, #20]
 800c250:	9b01      	ldr	r3, [sp, #4]
 800c252:	2b00      	cmp	r3, #0
 800c254:	61a3      	str	r3, [r4, #24]
 800c256:	bf0c      	ite	eq
 800c258:	2201      	moveq	r2, #1
 800c25a:	2202      	movne	r2, #2
 800c25c:	6122      	str	r2, [r4, #16]
 800c25e:	b1a5      	cbz	r5, 800c28a <__d2b+0x92>
 800c260:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c264:	4405      	add	r5, r0
 800c266:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c26a:	603d      	str	r5, [r7, #0]
 800c26c:	6030      	str	r0, [r6, #0]
 800c26e:	4620      	mov	r0, r4
 800c270:	b003      	add	sp, #12
 800c272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c276:	6161      	str	r1, [r4, #20]
 800c278:	e7ea      	b.n	800c250 <__d2b+0x58>
 800c27a:	a801      	add	r0, sp, #4
 800c27c:	f7ff fd55 	bl	800bd2a <__lo0bits>
 800c280:	9b01      	ldr	r3, [sp, #4]
 800c282:	3020      	adds	r0, #32
 800c284:	2201      	movs	r2, #1
 800c286:	6163      	str	r3, [r4, #20]
 800c288:	e7e8      	b.n	800c25c <__d2b+0x64>
 800c28a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c28e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c292:	6038      	str	r0, [r7, #0]
 800c294:	6918      	ldr	r0, [r3, #16]
 800c296:	f7ff fd29 	bl	800bcec <__hi0bits>
 800c29a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c29e:	e7e5      	b.n	800c26c <__d2b+0x74>
 800c2a0:	0800cc1c 	.word	0x0800cc1c
 800c2a4:	0800cc2d 	.word	0x0800cc2d

0800c2a8 <__sfputc_r>:
 800c2a8:	6893      	ldr	r3, [r2, #8]
 800c2aa:	3b01      	subs	r3, #1
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	6093      	str	r3, [r2, #8]
 800c2b0:	b410      	push	{r4}
 800c2b2:	da08      	bge.n	800c2c6 <__sfputc_r+0x1e>
 800c2b4:	6994      	ldr	r4, [r2, #24]
 800c2b6:	42a3      	cmp	r3, r4
 800c2b8:	db01      	blt.n	800c2be <__sfputc_r+0x16>
 800c2ba:	290a      	cmp	r1, #10
 800c2bc:	d103      	bne.n	800c2c6 <__sfputc_r+0x1e>
 800c2be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2c2:	f7fe bbc8 	b.w	800aa56 <__swbuf_r>
 800c2c6:	6813      	ldr	r3, [r2, #0]
 800c2c8:	1c58      	adds	r0, r3, #1
 800c2ca:	6010      	str	r0, [r2, #0]
 800c2cc:	4608      	mov	r0, r1
 800c2ce:	7019      	strb	r1, [r3, #0]
 800c2d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2d4:	4770      	bx	lr

0800c2d6 <__sfputs_r>:
 800c2d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2d8:	4606      	mov	r6, r0
 800c2da:	460f      	mov	r7, r1
 800c2dc:	4614      	mov	r4, r2
 800c2de:	18d5      	adds	r5, r2, r3
 800c2e0:	42ac      	cmp	r4, r5
 800c2e2:	d101      	bne.n	800c2e8 <__sfputs_r+0x12>
 800c2e4:	2000      	movs	r0, #0
 800c2e6:	e007      	b.n	800c2f8 <__sfputs_r+0x22>
 800c2e8:	463a      	mov	r2, r7
 800c2ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ee:	4630      	mov	r0, r6
 800c2f0:	f7ff ffda 	bl	800c2a8 <__sfputc_r>
 800c2f4:	1c43      	adds	r3, r0, #1
 800c2f6:	d1f3      	bne.n	800c2e0 <__sfputs_r+0xa>
 800c2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c2fc <_vfiprintf_r>:
 800c2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c300:	460d      	mov	r5, r1
 800c302:	b09d      	sub	sp, #116	@ 0x74
 800c304:	4614      	mov	r4, r2
 800c306:	4698      	mov	r8, r3
 800c308:	4606      	mov	r6, r0
 800c30a:	b118      	cbz	r0, 800c314 <_vfiprintf_r+0x18>
 800c30c:	6a03      	ldr	r3, [r0, #32]
 800c30e:	b90b      	cbnz	r3, 800c314 <_vfiprintf_r+0x18>
 800c310:	f7fe fab0 	bl	800a874 <__sinit>
 800c314:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c316:	07d9      	lsls	r1, r3, #31
 800c318:	d405      	bmi.n	800c326 <_vfiprintf_r+0x2a>
 800c31a:	89ab      	ldrh	r3, [r5, #12]
 800c31c:	059a      	lsls	r2, r3, #22
 800c31e:	d402      	bmi.n	800c326 <_vfiprintf_r+0x2a>
 800c320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c322:	f7fe fcca 	bl	800acba <__retarget_lock_acquire_recursive>
 800c326:	89ab      	ldrh	r3, [r5, #12]
 800c328:	071b      	lsls	r3, r3, #28
 800c32a:	d501      	bpl.n	800c330 <_vfiprintf_r+0x34>
 800c32c:	692b      	ldr	r3, [r5, #16]
 800c32e:	b99b      	cbnz	r3, 800c358 <_vfiprintf_r+0x5c>
 800c330:	4629      	mov	r1, r5
 800c332:	4630      	mov	r0, r6
 800c334:	f7fe fbce 	bl	800aad4 <__swsetup_r>
 800c338:	b170      	cbz	r0, 800c358 <_vfiprintf_r+0x5c>
 800c33a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c33c:	07dc      	lsls	r4, r3, #31
 800c33e:	d504      	bpl.n	800c34a <_vfiprintf_r+0x4e>
 800c340:	f04f 30ff 	mov.w	r0, #4294967295
 800c344:	b01d      	add	sp, #116	@ 0x74
 800c346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c34a:	89ab      	ldrh	r3, [r5, #12]
 800c34c:	0598      	lsls	r0, r3, #22
 800c34e:	d4f7      	bmi.n	800c340 <_vfiprintf_r+0x44>
 800c350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c352:	f7fe fcb3 	bl	800acbc <__retarget_lock_release_recursive>
 800c356:	e7f3      	b.n	800c340 <_vfiprintf_r+0x44>
 800c358:	2300      	movs	r3, #0
 800c35a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c35e:	f04f 0901 	mov.w	r9, #1
 800c362:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800c518 <_vfiprintf_r+0x21c>
 800c366:	9309      	str	r3, [sp, #36]	@ 0x24
 800c368:	2320      	movs	r3, #32
 800c36a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c36e:	2330      	movs	r3, #48	@ 0x30
 800c370:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c374:	4623      	mov	r3, r4
 800c376:	469a      	mov	sl, r3
 800c378:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c37c:	b10a      	cbz	r2, 800c382 <_vfiprintf_r+0x86>
 800c37e:	2a25      	cmp	r2, #37	@ 0x25
 800c380:	d1f9      	bne.n	800c376 <_vfiprintf_r+0x7a>
 800c382:	ebba 0b04 	subs.w	fp, sl, r4
 800c386:	d00b      	beq.n	800c3a0 <_vfiprintf_r+0xa4>
 800c388:	465b      	mov	r3, fp
 800c38a:	4622      	mov	r2, r4
 800c38c:	4629      	mov	r1, r5
 800c38e:	4630      	mov	r0, r6
 800c390:	f7ff ffa1 	bl	800c2d6 <__sfputs_r>
 800c394:	3001      	adds	r0, #1
 800c396:	f000 80a7 	beq.w	800c4e8 <_vfiprintf_r+0x1ec>
 800c39a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c39c:	445a      	add	r2, fp
 800c39e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c3a0:	f89a 3000 	ldrb.w	r3, [sl]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	f000 809f 	beq.w	800c4e8 <_vfiprintf_r+0x1ec>
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c3b0:	f10a 0a01 	add.w	sl, sl, #1
 800c3b4:	9304      	str	r3, [sp, #16]
 800c3b6:	9307      	str	r3, [sp, #28]
 800c3b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c3bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800c3be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3c2:	4654      	mov	r4, sl
 800c3c4:	2205      	movs	r2, #5
 800c3c6:	4854      	ldr	r0, [pc, #336]	@ (800c518 <_vfiprintf_r+0x21c>)
 800c3c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3cc:	f7fe fc77 	bl	800acbe <memchr>
 800c3d0:	9a04      	ldr	r2, [sp, #16]
 800c3d2:	b9d8      	cbnz	r0, 800c40c <_vfiprintf_r+0x110>
 800c3d4:	06d1      	lsls	r1, r2, #27
 800c3d6:	bf44      	itt	mi
 800c3d8:	2320      	movmi	r3, #32
 800c3da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3de:	0713      	lsls	r3, r2, #28
 800c3e0:	bf44      	itt	mi
 800c3e2:	232b      	movmi	r3, #43	@ 0x2b
 800c3e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3e8:	f89a 3000 	ldrb.w	r3, [sl]
 800c3ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3ee:	d015      	beq.n	800c41c <_vfiprintf_r+0x120>
 800c3f0:	9a07      	ldr	r2, [sp, #28]
 800c3f2:	4654      	mov	r4, sl
 800c3f4:	2000      	movs	r0, #0
 800c3f6:	f04f 0c0a 	mov.w	ip, #10
 800c3fa:	4621      	mov	r1, r4
 800c3fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c400:	3b30      	subs	r3, #48	@ 0x30
 800c402:	2b09      	cmp	r3, #9
 800c404:	d94b      	bls.n	800c49e <_vfiprintf_r+0x1a2>
 800c406:	b1b0      	cbz	r0, 800c436 <_vfiprintf_r+0x13a>
 800c408:	9207      	str	r2, [sp, #28]
 800c40a:	e014      	b.n	800c436 <_vfiprintf_r+0x13a>
 800c40c:	eba0 0308 	sub.w	r3, r0, r8
 800c410:	46a2      	mov	sl, r4
 800c412:	fa09 f303 	lsl.w	r3, r9, r3
 800c416:	4313      	orrs	r3, r2
 800c418:	9304      	str	r3, [sp, #16]
 800c41a:	e7d2      	b.n	800c3c2 <_vfiprintf_r+0xc6>
 800c41c:	9b03      	ldr	r3, [sp, #12]
 800c41e:	1d19      	adds	r1, r3, #4
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	9103      	str	r1, [sp, #12]
 800c426:	bfbb      	ittet	lt
 800c428:	425b      	neglt	r3, r3
 800c42a:	f042 0202 	orrlt.w	r2, r2, #2
 800c42e:	9307      	strge	r3, [sp, #28]
 800c430:	9307      	strlt	r3, [sp, #28]
 800c432:	bfb8      	it	lt
 800c434:	9204      	strlt	r2, [sp, #16]
 800c436:	7823      	ldrb	r3, [r4, #0]
 800c438:	2b2e      	cmp	r3, #46	@ 0x2e
 800c43a:	d10a      	bne.n	800c452 <_vfiprintf_r+0x156>
 800c43c:	7863      	ldrb	r3, [r4, #1]
 800c43e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c440:	d132      	bne.n	800c4a8 <_vfiprintf_r+0x1ac>
 800c442:	9b03      	ldr	r3, [sp, #12]
 800c444:	3402      	adds	r4, #2
 800c446:	1d1a      	adds	r2, r3, #4
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c44e:	9203      	str	r2, [sp, #12]
 800c450:	9305      	str	r3, [sp, #20]
 800c452:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c528 <_vfiprintf_r+0x22c>
 800c456:	2203      	movs	r2, #3
 800c458:	7821      	ldrb	r1, [r4, #0]
 800c45a:	4650      	mov	r0, sl
 800c45c:	f7fe fc2f 	bl	800acbe <memchr>
 800c460:	b138      	cbz	r0, 800c472 <_vfiprintf_r+0x176>
 800c462:	eba0 000a 	sub.w	r0, r0, sl
 800c466:	2240      	movs	r2, #64	@ 0x40
 800c468:	9b04      	ldr	r3, [sp, #16]
 800c46a:	3401      	adds	r4, #1
 800c46c:	4082      	lsls	r2, r0
 800c46e:	4313      	orrs	r3, r2
 800c470:	9304      	str	r3, [sp, #16]
 800c472:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c476:	2206      	movs	r2, #6
 800c478:	4828      	ldr	r0, [pc, #160]	@ (800c51c <_vfiprintf_r+0x220>)
 800c47a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c47e:	f7fe fc1e 	bl	800acbe <memchr>
 800c482:	2800      	cmp	r0, #0
 800c484:	d03f      	beq.n	800c506 <_vfiprintf_r+0x20a>
 800c486:	4b26      	ldr	r3, [pc, #152]	@ (800c520 <_vfiprintf_r+0x224>)
 800c488:	bb1b      	cbnz	r3, 800c4d2 <_vfiprintf_r+0x1d6>
 800c48a:	9b03      	ldr	r3, [sp, #12]
 800c48c:	3307      	adds	r3, #7
 800c48e:	f023 0307 	bic.w	r3, r3, #7
 800c492:	3308      	adds	r3, #8
 800c494:	9303      	str	r3, [sp, #12]
 800c496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c498:	443b      	add	r3, r7
 800c49a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c49c:	e76a      	b.n	800c374 <_vfiprintf_r+0x78>
 800c49e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4a2:	460c      	mov	r4, r1
 800c4a4:	2001      	movs	r0, #1
 800c4a6:	e7a8      	b.n	800c3fa <_vfiprintf_r+0xfe>
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	3401      	adds	r4, #1
 800c4ac:	f04f 0c0a 	mov.w	ip, #10
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	9305      	str	r3, [sp, #20]
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4ba:	3a30      	subs	r2, #48	@ 0x30
 800c4bc:	2a09      	cmp	r2, #9
 800c4be:	d903      	bls.n	800c4c8 <_vfiprintf_r+0x1cc>
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d0c6      	beq.n	800c452 <_vfiprintf_r+0x156>
 800c4c4:	9105      	str	r1, [sp, #20]
 800c4c6:	e7c4      	b.n	800c452 <_vfiprintf_r+0x156>
 800c4c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4cc:	4604      	mov	r4, r0
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	e7f0      	b.n	800c4b4 <_vfiprintf_r+0x1b8>
 800c4d2:	ab03      	add	r3, sp, #12
 800c4d4:	462a      	mov	r2, r5
 800c4d6:	a904      	add	r1, sp, #16
 800c4d8:	4630      	mov	r0, r6
 800c4da:	9300      	str	r3, [sp, #0]
 800c4dc:	4b11      	ldr	r3, [pc, #68]	@ (800c524 <_vfiprintf_r+0x228>)
 800c4de:	f7fd fd81 	bl	8009fe4 <_printf_float>
 800c4e2:	4607      	mov	r7, r0
 800c4e4:	1c78      	adds	r0, r7, #1
 800c4e6:	d1d6      	bne.n	800c496 <_vfiprintf_r+0x19a>
 800c4e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4ea:	07d9      	lsls	r1, r3, #31
 800c4ec:	d405      	bmi.n	800c4fa <_vfiprintf_r+0x1fe>
 800c4ee:	89ab      	ldrh	r3, [r5, #12]
 800c4f0:	059a      	lsls	r2, r3, #22
 800c4f2:	d402      	bmi.n	800c4fa <_vfiprintf_r+0x1fe>
 800c4f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4f6:	f7fe fbe1 	bl	800acbc <__retarget_lock_release_recursive>
 800c4fa:	89ab      	ldrh	r3, [r5, #12]
 800c4fc:	065b      	lsls	r3, r3, #25
 800c4fe:	f53f af1f 	bmi.w	800c340 <_vfiprintf_r+0x44>
 800c502:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c504:	e71e      	b.n	800c344 <_vfiprintf_r+0x48>
 800c506:	ab03      	add	r3, sp, #12
 800c508:	462a      	mov	r2, r5
 800c50a:	a904      	add	r1, sp, #16
 800c50c:	4630      	mov	r0, r6
 800c50e:	9300      	str	r3, [sp, #0]
 800c510:	4b04      	ldr	r3, [pc, #16]	@ (800c524 <_vfiprintf_r+0x228>)
 800c512:	f7fe f803 	bl	800a51c <_printf_i>
 800c516:	e7e4      	b.n	800c4e2 <_vfiprintf_r+0x1e6>
 800c518:	0800cd88 	.word	0x0800cd88
 800c51c:	0800cd92 	.word	0x0800cd92
 800c520:	08009fe5 	.word	0x08009fe5
 800c524:	0800c2d7 	.word	0x0800c2d7
 800c528:	0800cd8e 	.word	0x0800cd8e

0800c52c <__sflush_r>:
 800c52c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c534:	0716      	lsls	r6, r2, #28
 800c536:	4605      	mov	r5, r0
 800c538:	460c      	mov	r4, r1
 800c53a:	d454      	bmi.n	800c5e6 <__sflush_r+0xba>
 800c53c:	684b      	ldr	r3, [r1, #4]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	dc02      	bgt.n	800c548 <__sflush_r+0x1c>
 800c542:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c544:	2b00      	cmp	r3, #0
 800c546:	dd48      	ble.n	800c5da <__sflush_r+0xae>
 800c548:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c54a:	2e00      	cmp	r6, #0
 800c54c:	d045      	beq.n	800c5da <__sflush_r+0xae>
 800c54e:	2300      	movs	r3, #0
 800c550:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c554:	682f      	ldr	r7, [r5, #0]
 800c556:	6a21      	ldr	r1, [r4, #32]
 800c558:	602b      	str	r3, [r5, #0]
 800c55a:	d030      	beq.n	800c5be <__sflush_r+0x92>
 800c55c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c55e:	89a3      	ldrh	r3, [r4, #12]
 800c560:	0759      	lsls	r1, r3, #29
 800c562:	d505      	bpl.n	800c570 <__sflush_r+0x44>
 800c564:	6863      	ldr	r3, [r4, #4]
 800c566:	1ad2      	subs	r2, r2, r3
 800c568:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c56a:	b10b      	cbz	r3, 800c570 <__sflush_r+0x44>
 800c56c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c56e:	1ad2      	subs	r2, r2, r3
 800c570:	2300      	movs	r3, #0
 800c572:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c574:	6a21      	ldr	r1, [r4, #32]
 800c576:	4628      	mov	r0, r5
 800c578:	47b0      	blx	r6
 800c57a:	1c43      	adds	r3, r0, #1
 800c57c:	89a3      	ldrh	r3, [r4, #12]
 800c57e:	d106      	bne.n	800c58e <__sflush_r+0x62>
 800c580:	6829      	ldr	r1, [r5, #0]
 800c582:	291d      	cmp	r1, #29
 800c584:	d82b      	bhi.n	800c5de <__sflush_r+0xb2>
 800c586:	4a2a      	ldr	r2, [pc, #168]	@ (800c630 <__sflush_r+0x104>)
 800c588:	410a      	asrs	r2, r1
 800c58a:	07d6      	lsls	r6, r2, #31
 800c58c:	d427      	bmi.n	800c5de <__sflush_r+0xb2>
 800c58e:	2200      	movs	r2, #0
 800c590:	04d9      	lsls	r1, r3, #19
 800c592:	6062      	str	r2, [r4, #4]
 800c594:	6922      	ldr	r2, [r4, #16]
 800c596:	6022      	str	r2, [r4, #0]
 800c598:	d504      	bpl.n	800c5a4 <__sflush_r+0x78>
 800c59a:	1c42      	adds	r2, r0, #1
 800c59c:	d101      	bne.n	800c5a2 <__sflush_r+0x76>
 800c59e:	682b      	ldr	r3, [r5, #0]
 800c5a0:	b903      	cbnz	r3, 800c5a4 <__sflush_r+0x78>
 800c5a2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c5a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c5a6:	602f      	str	r7, [r5, #0]
 800c5a8:	b1b9      	cbz	r1, 800c5da <__sflush_r+0xae>
 800c5aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c5ae:	4299      	cmp	r1, r3
 800c5b0:	d002      	beq.n	800c5b8 <__sflush_r+0x8c>
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	f7ff f9f0 	bl	800b998 <_free_r>
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	6363      	str	r3, [r4, #52]	@ 0x34
 800c5bc:	e00d      	b.n	800c5da <__sflush_r+0xae>
 800c5be:	2301      	movs	r3, #1
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	47b0      	blx	r6
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	1c50      	adds	r0, r2, #1
 800c5c8:	d1c9      	bne.n	800c55e <__sflush_r+0x32>
 800c5ca:	682b      	ldr	r3, [r5, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d0c6      	beq.n	800c55e <__sflush_r+0x32>
 800c5d0:	2b1d      	cmp	r3, #29
 800c5d2:	d001      	beq.n	800c5d8 <__sflush_r+0xac>
 800c5d4:	2b16      	cmp	r3, #22
 800c5d6:	d11d      	bne.n	800c614 <__sflush_r+0xe8>
 800c5d8:	602f      	str	r7, [r5, #0]
 800c5da:	2000      	movs	r0, #0
 800c5dc:	e021      	b.n	800c622 <__sflush_r+0xf6>
 800c5de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5e2:	b21b      	sxth	r3, r3
 800c5e4:	e01a      	b.n	800c61c <__sflush_r+0xf0>
 800c5e6:	690f      	ldr	r7, [r1, #16]
 800c5e8:	2f00      	cmp	r7, #0
 800c5ea:	d0f6      	beq.n	800c5da <__sflush_r+0xae>
 800c5ec:	0793      	lsls	r3, r2, #30
 800c5ee:	680e      	ldr	r6, [r1, #0]
 800c5f0:	600f      	str	r7, [r1, #0]
 800c5f2:	bf0c      	ite	eq
 800c5f4:	694b      	ldreq	r3, [r1, #20]
 800c5f6:	2300      	movne	r3, #0
 800c5f8:	eba6 0807 	sub.w	r8, r6, r7
 800c5fc:	608b      	str	r3, [r1, #8]
 800c5fe:	f1b8 0f00 	cmp.w	r8, #0
 800c602:	ddea      	ble.n	800c5da <__sflush_r+0xae>
 800c604:	4643      	mov	r3, r8
 800c606:	463a      	mov	r2, r7
 800c608:	6a21      	ldr	r1, [r4, #32]
 800c60a:	4628      	mov	r0, r5
 800c60c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c60e:	47b0      	blx	r6
 800c610:	2800      	cmp	r0, #0
 800c612:	dc08      	bgt.n	800c626 <__sflush_r+0xfa>
 800c614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c618:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c61c:	f04f 30ff 	mov.w	r0, #4294967295
 800c620:	81a3      	strh	r3, [r4, #12]
 800c622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c626:	4407      	add	r7, r0
 800c628:	eba8 0800 	sub.w	r8, r8, r0
 800c62c:	e7e7      	b.n	800c5fe <__sflush_r+0xd2>
 800c62e:	bf00      	nop
 800c630:	dfbffffe 	.word	0xdfbffffe

0800c634 <_fflush_r>:
 800c634:	b538      	push	{r3, r4, r5, lr}
 800c636:	690b      	ldr	r3, [r1, #16]
 800c638:	4605      	mov	r5, r0
 800c63a:	460c      	mov	r4, r1
 800c63c:	b913      	cbnz	r3, 800c644 <_fflush_r+0x10>
 800c63e:	2500      	movs	r5, #0
 800c640:	4628      	mov	r0, r5
 800c642:	bd38      	pop	{r3, r4, r5, pc}
 800c644:	b118      	cbz	r0, 800c64e <_fflush_r+0x1a>
 800c646:	6a03      	ldr	r3, [r0, #32]
 800c648:	b90b      	cbnz	r3, 800c64e <_fflush_r+0x1a>
 800c64a:	f7fe f913 	bl	800a874 <__sinit>
 800c64e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d0f3      	beq.n	800c63e <_fflush_r+0xa>
 800c656:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c658:	07d0      	lsls	r0, r2, #31
 800c65a:	d404      	bmi.n	800c666 <_fflush_r+0x32>
 800c65c:	0599      	lsls	r1, r3, #22
 800c65e:	d402      	bmi.n	800c666 <_fflush_r+0x32>
 800c660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c662:	f7fe fb2a 	bl	800acba <__retarget_lock_acquire_recursive>
 800c666:	4628      	mov	r0, r5
 800c668:	4621      	mov	r1, r4
 800c66a:	f7ff ff5f 	bl	800c52c <__sflush_r>
 800c66e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c670:	4605      	mov	r5, r0
 800c672:	07da      	lsls	r2, r3, #31
 800c674:	d4e4      	bmi.n	800c640 <_fflush_r+0xc>
 800c676:	89a3      	ldrh	r3, [r4, #12]
 800c678:	059b      	lsls	r3, r3, #22
 800c67a:	d4e1      	bmi.n	800c640 <_fflush_r+0xc>
 800c67c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c67e:	f7fe fb1d 	bl	800acbc <__retarget_lock_release_recursive>
 800c682:	e7dd      	b.n	800c640 <_fflush_r+0xc>

0800c684 <__swhatbuf_r>:
 800c684:	b570      	push	{r4, r5, r6, lr}
 800c686:	460c      	mov	r4, r1
 800c688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c68c:	b096      	sub	sp, #88	@ 0x58
 800c68e:	4615      	mov	r5, r2
 800c690:	2900      	cmp	r1, #0
 800c692:	461e      	mov	r6, r3
 800c694:	da0c      	bge.n	800c6b0 <__swhatbuf_r+0x2c>
 800c696:	89a3      	ldrh	r3, [r4, #12]
 800c698:	2100      	movs	r1, #0
 800c69a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c69e:	bf14      	ite	ne
 800c6a0:	2340      	movne	r3, #64	@ 0x40
 800c6a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c6a6:	2000      	movs	r0, #0
 800c6a8:	6031      	str	r1, [r6, #0]
 800c6aa:	602b      	str	r3, [r5, #0]
 800c6ac:	b016      	add	sp, #88	@ 0x58
 800c6ae:	bd70      	pop	{r4, r5, r6, pc}
 800c6b0:	466a      	mov	r2, sp
 800c6b2:	f000 f87d 	bl	800c7b0 <_fstat_r>
 800c6b6:	2800      	cmp	r0, #0
 800c6b8:	dbed      	blt.n	800c696 <__swhatbuf_r+0x12>
 800c6ba:	9901      	ldr	r1, [sp, #4]
 800c6bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c6c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c6c4:	4259      	negs	r1, r3
 800c6c6:	4159      	adcs	r1, r3
 800c6c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6cc:	e7eb      	b.n	800c6a6 <__swhatbuf_r+0x22>

0800c6ce <__smakebuf_r>:
 800c6ce:	898b      	ldrh	r3, [r1, #12]
 800c6d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6d2:	079d      	lsls	r5, r3, #30
 800c6d4:	4606      	mov	r6, r0
 800c6d6:	460c      	mov	r4, r1
 800c6d8:	d507      	bpl.n	800c6ea <__smakebuf_r+0x1c>
 800c6da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c6de:	6023      	str	r3, [r4, #0]
 800c6e0:	6123      	str	r3, [r4, #16]
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	6163      	str	r3, [r4, #20]
 800c6e6:	b003      	add	sp, #12
 800c6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6ea:	ab01      	add	r3, sp, #4
 800c6ec:	466a      	mov	r2, sp
 800c6ee:	f7ff ffc9 	bl	800c684 <__swhatbuf_r>
 800c6f2:	9f00      	ldr	r7, [sp, #0]
 800c6f4:	4605      	mov	r5, r0
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	4639      	mov	r1, r7
 800c6fa:	f7ff f9c1 	bl	800ba80 <_malloc_r>
 800c6fe:	b948      	cbnz	r0, 800c714 <__smakebuf_r+0x46>
 800c700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c704:	059a      	lsls	r2, r3, #22
 800c706:	d4ee      	bmi.n	800c6e6 <__smakebuf_r+0x18>
 800c708:	f023 0303 	bic.w	r3, r3, #3
 800c70c:	f043 0302 	orr.w	r3, r3, #2
 800c710:	81a3      	strh	r3, [r4, #12]
 800c712:	e7e2      	b.n	800c6da <__smakebuf_r+0xc>
 800c714:	89a3      	ldrh	r3, [r4, #12]
 800c716:	6020      	str	r0, [r4, #0]
 800c718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c71c:	81a3      	strh	r3, [r4, #12]
 800c71e:	9b01      	ldr	r3, [sp, #4]
 800c720:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c724:	b15b      	cbz	r3, 800c73e <__smakebuf_r+0x70>
 800c726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c72a:	4630      	mov	r0, r6
 800c72c:	f000 f852 	bl	800c7d4 <_isatty_r>
 800c730:	b128      	cbz	r0, 800c73e <__smakebuf_r+0x70>
 800c732:	89a3      	ldrh	r3, [r4, #12]
 800c734:	f023 0303 	bic.w	r3, r3, #3
 800c738:	f043 0301 	orr.w	r3, r3, #1
 800c73c:	81a3      	strh	r3, [r4, #12]
 800c73e:	89a3      	ldrh	r3, [r4, #12]
 800c740:	431d      	orrs	r5, r3
 800c742:	81a5      	strh	r5, [r4, #12]
 800c744:	e7cf      	b.n	800c6e6 <__smakebuf_r+0x18>

0800c746 <_putc_r>:
 800c746:	b570      	push	{r4, r5, r6, lr}
 800c748:	460d      	mov	r5, r1
 800c74a:	4614      	mov	r4, r2
 800c74c:	4606      	mov	r6, r0
 800c74e:	b118      	cbz	r0, 800c758 <_putc_r+0x12>
 800c750:	6a03      	ldr	r3, [r0, #32]
 800c752:	b90b      	cbnz	r3, 800c758 <_putc_r+0x12>
 800c754:	f7fe f88e 	bl	800a874 <__sinit>
 800c758:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c75a:	07d8      	lsls	r0, r3, #31
 800c75c:	d405      	bmi.n	800c76a <_putc_r+0x24>
 800c75e:	89a3      	ldrh	r3, [r4, #12]
 800c760:	0599      	lsls	r1, r3, #22
 800c762:	d402      	bmi.n	800c76a <_putc_r+0x24>
 800c764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c766:	f7fe faa8 	bl	800acba <__retarget_lock_acquire_recursive>
 800c76a:	68a3      	ldr	r3, [r4, #8]
 800c76c:	3b01      	subs	r3, #1
 800c76e:	2b00      	cmp	r3, #0
 800c770:	60a3      	str	r3, [r4, #8]
 800c772:	da05      	bge.n	800c780 <_putc_r+0x3a>
 800c774:	69a2      	ldr	r2, [r4, #24]
 800c776:	4293      	cmp	r3, r2
 800c778:	db12      	blt.n	800c7a0 <_putc_r+0x5a>
 800c77a:	b2eb      	uxtb	r3, r5
 800c77c:	2b0a      	cmp	r3, #10
 800c77e:	d00f      	beq.n	800c7a0 <_putc_r+0x5a>
 800c780:	6823      	ldr	r3, [r4, #0]
 800c782:	1c5a      	adds	r2, r3, #1
 800c784:	6022      	str	r2, [r4, #0]
 800c786:	701d      	strb	r5, [r3, #0]
 800c788:	b2ed      	uxtb	r5, r5
 800c78a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c78c:	07da      	lsls	r2, r3, #31
 800c78e:	d405      	bmi.n	800c79c <_putc_r+0x56>
 800c790:	89a3      	ldrh	r3, [r4, #12]
 800c792:	059b      	lsls	r3, r3, #22
 800c794:	d402      	bmi.n	800c79c <_putc_r+0x56>
 800c796:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c798:	f7fe fa90 	bl	800acbc <__retarget_lock_release_recursive>
 800c79c:	4628      	mov	r0, r5
 800c79e:	bd70      	pop	{r4, r5, r6, pc}
 800c7a0:	4629      	mov	r1, r5
 800c7a2:	4622      	mov	r2, r4
 800c7a4:	4630      	mov	r0, r6
 800c7a6:	f7fe f956 	bl	800aa56 <__swbuf_r>
 800c7aa:	4605      	mov	r5, r0
 800c7ac:	e7ed      	b.n	800c78a <_putc_r+0x44>
	...

0800c7b0 <_fstat_r>:
 800c7b0:	b538      	push	{r3, r4, r5, lr}
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	4d06      	ldr	r5, [pc, #24]	@ (800c7d0 <_fstat_r+0x20>)
 800c7b6:	4604      	mov	r4, r0
 800c7b8:	4608      	mov	r0, r1
 800c7ba:	4611      	mov	r1, r2
 800c7bc:	602b      	str	r3, [r5, #0]
 800c7be:	f7f7 fd3d 	bl	800423c <_fstat>
 800c7c2:	1c43      	adds	r3, r0, #1
 800c7c4:	d102      	bne.n	800c7cc <_fstat_r+0x1c>
 800c7c6:	682b      	ldr	r3, [r5, #0]
 800c7c8:	b103      	cbz	r3, 800c7cc <_fstat_r+0x1c>
 800c7ca:	6023      	str	r3, [r4, #0]
 800c7cc:	bd38      	pop	{r3, r4, r5, pc}
 800c7ce:	bf00      	nop
 800c7d0:	20000bd4 	.word	0x20000bd4

0800c7d4 <_isatty_r>:
 800c7d4:	b538      	push	{r3, r4, r5, lr}
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	4d05      	ldr	r5, [pc, #20]	@ (800c7f0 <_isatty_r+0x1c>)
 800c7da:	4604      	mov	r4, r0
 800c7dc:	4608      	mov	r0, r1
 800c7de:	602b      	str	r3, [r5, #0]
 800c7e0:	f7f7 fd3c 	bl	800425c <_isatty>
 800c7e4:	1c43      	adds	r3, r0, #1
 800c7e6:	d102      	bne.n	800c7ee <_isatty_r+0x1a>
 800c7e8:	682b      	ldr	r3, [r5, #0]
 800c7ea:	b103      	cbz	r3, 800c7ee <_isatty_r+0x1a>
 800c7ec:	6023      	str	r3, [r4, #0]
 800c7ee:	bd38      	pop	{r3, r4, r5, pc}
 800c7f0:	20000bd4 	.word	0x20000bd4

0800c7f4 <_sbrk_r>:
 800c7f4:	b538      	push	{r3, r4, r5, lr}
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	4d05      	ldr	r5, [pc, #20]	@ (800c810 <_sbrk_r+0x1c>)
 800c7fa:	4604      	mov	r4, r0
 800c7fc:	4608      	mov	r0, r1
 800c7fe:	602b      	str	r3, [r5, #0]
 800c800:	f7f7 fd44 	bl	800428c <_sbrk>
 800c804:	1c43      	adds	r3, r0, #1
 800c806:	d102      	bne.n	800c80e <_sbrk_r+0x1a>
 800c808:	682b      	ldr	r3, [r5, #0]
 800c80a:	b103      	cbz	r3, 800c80e <_sbrk_r+0x1a>
 800c80c:	6023      	str	r3, [r4, #0]
 800c80e:	bd38      	pop	{r3, r4, r5, pc}
 800c810:	20000bd4 	.word	0x20000bd4

0800c814 <__assert_func>:
 800c814:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c816:	4614      	mov	r4, r2
 800c818:	461a      	mov	r2, r3
 800c81a:	4b09      	ldr	r3, [pc, #36]	@ (800c840 <__assert_func+0x2c>)
 800c81c:	4605      	mov	r5, r0
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	68d8      	ldr	r0, [r3, #12]
 800c822:	b954      	cbnz	r4, 800c83a <__assert_func+0x26>
 800c824:	4b07      	ldr	r3, [pc, #28]	@ (800c844 <__assert_func+0x30>)
 800c826:	461c      	mov	r4, r3
 800c828:	9100      	str	r1, [sp, #0]
 800c82a:	4907      	ldr	r1, [pc, #28]	@ (800c848 <__assert_func+0x34>)
 800c82c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c830:	462b      	mov	r3, r5
 800c832:	f000 f841 	bl	800c8b8 <fiprintf>
 800c836:	f000 f851 	bl	800c8dc <abort>
 800c83a:	4b04      	ldr	r3, [pc, #16]	@ (800c84c <__assert_func+0x38>)
 800c83c:	e7f4      	b.n	800c828 <__assert_func+0x14>
 800c83e:	bf00      	nop
 800c840:	20000018 	.word	0x20000018
 800c844:	0800cdde 	.word	0x0800cdde
 800c848:	0800cdb0 	.word	0x0800cdb0
 800c84c:	0800cda3 	.word	0x0800cda3

0800c850 <_calloc_r>:
 800c850:	b570      	push	{r4, r5, r6, lr}
 800c852:	fba1 5402 	umull	r5, r4, r1, r2
 800c856:	b93c      	cbnz	r4, 800c868 <_calloc_r+0x18>
 800c858:	4629      	mov	r1, r5
 800c85a:	f7ff f911 	bl	800ba80 <_malloc_r>
 800c85e:	4606      	mov	r6, r0
 800c860:	b928      	cbnz	r0, 800c86e <_calloc_r+0x1e>
 800c862:	2600      	movs	r6, #0
 800c864:	4630      	mov	r0, r6
 800c866:	bd70      	pop	{r4, r5, r6, pc}
 800c868:	220c      	movs	r2, #12
 800c86a:	6002      	str	r2, [r0, #0]
 800c86c:	e7f9      	b.n	800c862 <_calloc_r+0x12>
 800c86e:	462a      	mov	r2, r5
 800c870:	4621      	mov	r1, r4
 800c872:	f7fe f985 	bl	800ab80 <memset>
 800c876:	e7f5      	b.n	800c864 <_calloc_r+0x14>

0800c878 <__ascii_mbtowc>:
 800c878:	b082      	sub	sp, #8
 800c87a:	b901      	cbnz	r1, 800c87e <__ascii_mbtowc+0x6>
 800c87c:	a901      	add	r1, sp, #4
 800c87e:	b142      	cbz	r2, 800c892 <__ascii_mbtowc+0x1a>
 800c880:	b14b      	cbz	r3, 800c896 <__ascii_mbtowc+0x1e>
 800c882:	7813      	ldrb	r3, [r2, #0]
 800c884:	600b      	str	r3, [r1, #0]
 800c886:	7812      	ldrb	r2, [r2, #0]
 800c888:	1e10      	subs	r0, r2, #0
 800c88a:	bf18      	it	ne
 800c88c:	2001      	movne	r0, #1
 800c88e:	b002      	add	sp, #8
 800c890:	4770      	bx	lr
 800c892:	4610      	mov	r0, r2
 800c894:	e7fb      	b.n	800c88e <__ascii_mbtowc+0x16>
 800c896:	f06f 0001 	mvn.w	r0, #1
 800c89a:	e7f8      	b.n	800c88e <__ascii_mbtowc+0x16>

0800c89c <__ascii_wctomb>:
 800c89c:	4603      	mov	r3, r0
 800c89e:	4608      	mov	r0, r1
 800c8a0:	b141      	cbz	r1, 800c8b4 <__ascii_wctomb+0x18>
 800c8a2:	2aff      	cmp	r2, #255	@ 0xff
 800c8a4:	d904      	bls.n	800c8b0 <__ascii_wctomb+0x14>
 800c8a6:	228a      	movs	r2, #138	@ 0x8a
 800c8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ac:	601a      	str	r2, [r3, #0]
 800c8ae:	4770      	bx	lr
 800c8b0:	2001      	movs	r0, #1
 800c8b2:	700a      	strb	r2, [r1, #0]
 800c8b4:	4770      	bx	lr
	...

0800c8b8 <fiprintf>:
 800c8b8:	b40e      	push	{r1, r2, r3}
 800c8ba:	b503      	push	{r0, r1, lr}
 800c8bc:	ab03      	add	r3, sp, #12
 800c8be:	4601      	mov	r1, r0
 800c8c0:	4805      	ldr	r0, [pc, #20]	@ (800c8d8 <fiprintf+0x20>)
 800c8c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8c6:	6800      	ldr	r0, [r0, #0]
 800c8c8:	9301      	str	r3, [sp, #4]
 800c8ca:	f7ff fd17 	bl	800c2fc <_vfiprintf_r>
 800c8ce:	b002      	add	sp, #8
 800c8d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8d4:	b003      	add	sp, #12
 800c8d6:	4770      	bx	lr
 800c8d8:	20000018 	.word	0x20000018

0800c8dc <abort>:
 800c8dc:	2006      	movs	r0, #6
 800c8de:	b508      	push	{r3, lr}
 800c8e0:	f000 f82c 	bl	800c93c <raise>
 800c8e4:	2001      	movs	r0, #1
 800c8e6:	f7f7 fc59 	bl	800419c <_exit>

0800c8ea <_raise_r>:
 800c8ea:	291f      	cmp	r1, #31
 800c8ec:	b538      	push	{r3, r4, r5, lr}
 800c8ee:	4605      	mov	r5, r0
 800c8f0:	460c      	mov	r4, r1
 800c8f2:	d904      	bls.n	800c8fe <_raise_r+0x14>
 800c8f4:	2316      	movs	r3, #22
 800c8f6:	6003      	str	r3, [r0, #0]
 800c8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8fc:	bd38      	pop	{r3, r4, r5, pc}
 800c8fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c900:	b112      	cbz	r2, 800c908 <_raise_r+0x1e>
 800c902:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c906:	b94b      	cbnz	r3, 800c91c <_raise_r+0x32>
 800c908:	4628      	mov	r0, r5
 800c90a:	f000 f831 	bl	800c970 <_getpid_r>
 800c90e:	4622      	mov	r2, r4
 800c910:	4601      	mov	r1, r0
 800c912:	4628      	mov	r0, r5
 800c914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c918:	f000 b818 	b.w	800c94c <_kill_r>
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d00a      	beq.n	800c936 <_raise_r+0x4c>
 800c920:	1c59      	adds	r1, r3, #1
 800c922:	d103      	bne.n	800c92c <_raise_r+0x42>
 800c924:	2316      	movs	r3, #22
 800c926:	6003      	str	r3, [r0, #0]
 800c928:	2001      	movs	r0, #1
 800c92a:	e7e7      	b.n	800c8fc <_raise_r+0x12>
 800c92c:	2100      	movs	r1, #0
 800c92e:	4620      	mov	r0, r4
 800c930:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c934:	4798      	blx	r3
 800c936:	2000      	movs	r0, #0
 800c938:	e7e0      	b.n	800c8fc <_raise_r+0x12>
	...

0800c93c <raise>:
 800c93c:	4b02      	ldr	r3, [pc, #8]	@ (800c948 <raise+0xc>)
 800c93e:	4601      	mov	r1, r0
 800c940:	6818      	ldr	r0, [r3, #0]
 800c942:	f7ff bfd2 	b.w	800c8ea <_raise_r>
 800c946:	bf00      	nop
 800c948:	20000018 	.word	0x20000018

0800c94c <_kill_r>:
 800c94c:	b538      	push	{r3, r4, r5, lr}
 800c94e:	2300      	movs	r3, #0
 800c950:	4d06      	ldr	r5, [pc, #24]	@ (800c96c <_kill_r+0x20>)
 800c952:	4604      	mov	r4, r0
 800c954:	4608      	mov	r0, r1
 800c956:	4611      	mov	r1, r2
 800c958:	602b      	str	r3, [r5, #0]
 800c95a:	f7f7 fc0f 	bl	800417c <_kill>
 800c95e:	1c43      	adds	r3, r0, #1
 800c960:	d102      	bne.n	800c968 <_kill_r+0x1c>
 800c962:	682b      	ldr	r3, [r5, #0]
 800c964:	b103      	cbz	r3, 800c968 <_kill_r+0x1c>
 800c966:	6023      	str	r3, [r4, #0]
 800c968:	bd38      	pop	{r3, r4, r5, pc}
 800c96a:	bf00      	nop
 800c96c:	20000bd4 	.word	0x20000bd4

0800c970 <_getpid_r>:
 800c970:	f7f7 bbfc 	b.w	800416c <_getpid>

0800c974 <_init>:
 800c974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c976:	bf00      	nop
 800c978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c97a:	bc08      	pop	{r3}
 800c97c:	469e      	mov	lr, r3
 800c97e:	4770      	bx	lr

0800c980 <_fini>:
 800c980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c982:	bf00      	nop
 800c984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c986:	bc08      	pop	{r3}
 800c988:	469e      	mov	lr, r3
 800c98a:	4770      	bx	lr
