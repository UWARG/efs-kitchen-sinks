
NVM Flash Drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054d4  080001f4  080001f4  000011f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  080056c8  080056c8  000066c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005970  08005970  00007090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005970  08005970  00006970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005978  08005978  00007090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005978  08005978  00006978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800597c  0800597c  0000697c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08005980  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  20000090  08005a10  00007090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  08005a10  000073ac  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb72  00000000  00000000  000070c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c5  00000000  00000000  00016c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00019000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a8c  00000000  00000000  00019dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002969a  00000000  00000000  0001a854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fec5  00000000  00000000  00043eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001028dc  00000000  00000000  00053db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015668f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a0  00000000  00000000  001566d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0015a774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	@ (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000090 	.word	0x20000090
 8000210:	00000000 	.word	0x00000000
 8000214:	080056b0 	.word	0x080056b0

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	@ (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	@ (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	@ (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000094 	.word	0x20000094
 8000230:	080056b0 	.word	0x080056b0

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b9b0 	b.w	80005ac <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800026a:	4688      	mov	r8, r1
 800026c:	4604      	mov	r4, r0
 800026e:	468e      	mov	lr, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14a      	bne.n	800030a <__udivmoddi4+0xa6>
 8000274:	428a      	cmp	r2, r1
 8000276:	4617      	mov	r7, r2
 8000278:	d95f      	bls.n	800033a <__udivmoddi4+0xd6>
 800027a:	fab2 f682 	clz	r6, r2
 800027e:	b14e      	cbz	r6, 8000294 <__udivmoddi4+0x30>
 8000280:	f1c6 0320 	rsb	r3, r6, #32
 8000284:	fa01 fe06 	lsl.w	lr, r1, r6
 8000288:	40b7      	lsls	r7, r6
 800028a:	40b4      	lsls	r4, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	ea43 0e0e 	orr.w	lr, r3, lr
 8000294:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000298:	fa1f fc87 	uxth.w	ip, r7
 800029c:	0c23      	lsrs	r3, r4, #16
 800029e:	fbbe f1f8 	udiv	r1, lr, r8
 80002a2:	fb08 ee11 	mls	lr, r8, r1, lr
 80002a6:	fb01 f20c 	mul.w	r2, r1, ip
 80002aa:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d907      	bls.n	80002c2 <__udivmoddi4+0x5e>
 80002b2:	18fb      	adds	r3, r7, r3
 80002b4:	f101 30ff 	add.w	r0, r1, #4294967295
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x5c>
 80002ba:	429a      	cmp	r2, r3
 80002bc:	f200 8154 	bhi.w	8000568 <__udivmoddi4+0x304>
 80002c0:	4601      	mov	r1, r0
 80002c2:	1a9b      	subs	r3, r3, r2
 80002c4:	b2a2      	uxth	r2, r4
 80002c6:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ca:	fb08 3310 	mls	r3, r8, r0, r3
 80002ce:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80002d6:	4594      	cmp	ip, r2
 80002d8:	d90b      	bls.n	80002f2 <__udivmoddi4+0x8e>
 80002da:	18ba      	adds	r2, r7, r2
 80002dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e0:	bf2c      	ite	cs
 80002e2:	2401      	movcs	r4, #1
 80002e4:	2400      	movcc	r4, #0
 80002e6:	4594      	cmp	ip, r2
 80002e8:	d902      	bls.n	80002f0 <__udivmoddi4+0x8c>
 80002ea:	2c00      	cmp	r4, #0
 80002ec:	f000 813f 	beq.w	800056e <__udivmoddi4+0x30a>
 80002f0:	4618      	mov	r0, r3
 80002f2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f6:	eba2 020c 	sub.w	r2, r2, ip
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa2>
 80002fe:	40f2      	lsrs	r2, r6
 8000300:	2300      	movs	r3, #0
 8000302:	e9c5 2300 	strd	r2, r3, [r5]
 8000306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xb6>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb0>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa2>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d14e      	bne.n	80003c0 <__udivmoddi4+0x15c>
 8000322:	4543      	cmp	r3, r8
 8000324:	f0c0 8112 	bcc.w	800054c <__udivmoddi4+0x2e8>
 8000328:	4282      	cmp	r2, r0
 800032a:	f240 810f 	bls.w	800054c <__udivmoddi4+0x2e8>
 800032e:	4608      	mov	r0, r1
 8000330:	2d00      	cmp	r5, #0
 8000332:	d0e8      	beq.n	8000306 <__udivmoddi4+0xa2>
 8000334:	e9c5 4e00 	strd	r4, lr, [r5]
 8000338:	e7e5      	b.n	8000306 <__udivmoddi4+0xa2>
 800033a:	2a00      	cmp	r2, #0
 800033c:	f000 80ac 	beq.w	8000498 <__udivmoddi4+0x234>
 8000340:	fab2 f682 	clz	r6, r2
 8000344:	2e00      	cmp	r6, #0
 8000346:	f040 80bb 	bne.w	80004c0 <__udivmoddi4+0x25c>
 800034a:	1a8b      	subs	r3, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b2bc      	uxth	r4, r7
 8000352:	2101      	movs	r1, #1
 8000354:	0c02      	lsrs	r2, r0, #16
 8000356:	b280      	uxth	r0, r0
 8000358:	fbb3 fcfe 	udiv	ip, r3, lr
 800035c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000360:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000364:	fb04 f20c 	mul.w	r2, r4, ip
 8000368:	429a      	cmp	r2, r3
 800036a:	d90e      	bls.n	800038a <__udivmoddi4+0x126>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	429a      	cmp	r2, r3
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80ec 	beq.w	8000560 <__udivmoddi4+0x2fc>
 8000388:	46c4      	mov	ip, r8
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	fbb3 f8fe 	udiv	r8, r3, lr
 8000390:	fb0e 3318 	mls	r3, lr, r8, r3
 8000394:	fb04 f408 	mul.w	r4, r4, r8
 8000398:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800039c:	4294      	cmp	r4, r2
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x154>
 80003a0:	18ba      	adds	r2, r7, r2
 80003a2:	f108 33ff 	add.w	r3, r8, #4294967295
 80003a6:	bf2c      	ite	cs
 80003a8:	2001      	movcs	r0, #1
 80003aa:	2000      	movcc	r0, #0
 80003ac:	4294      	cmp	r4, r2
 80003ae:	d902      	bls.n	80003b6 <__udivmoddi4+0x152>
 80003b0:	2800      	cmp	r0, #0
 80003b2:	f000 80d1 	beq.w	8000558 <__udivmoddi4+0x2f4>
 80003b6:	4698      	mov	r8, r3
 80003b8:	1b12      	subs	r2, r2, r4
 80003ba:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 80003be:	e79d      	b.n	80002fc <__udivmoddi4+0x98>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa08 f401 	lsl.w	r4, r8, r1
 80003ca:	fa00 f901 	lsl.w	r9, r0, r1
 80003ce:	fa22 f706 	lsr.w	r7, r2, r6
 80003d2:	fa28 f806 	lsr.w	r8, r8, r6
 80003d6:	408a      	lsls	r2, r1
 80003d8:	431f      	orrs	r7, r3
 80003da:	fa20 f306 	lsr.w	r3, r0, r6
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	4323      	orrs	r3, r4
 80003e2:	fa1f fc87 	uxth.w	ip, r7
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	fbb8 fef0 	udiv	lr, r8, r0
 80003ec:	fb00 881e 	mls	r8, r0, lr, r8
 80003f0:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80003f4:	fb0e f80c 	mul.w	r8, lr, ip
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d90e      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	45a0      	cmp	r8, r4
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 80b8 	beq.w	8000588 <__udivmoddi4+0x324>
 8000418:	46d6      	mov	lr, sl
 800041a:	eba4 0408 	sub.w	r4, r4, r8
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	fbb4 f3f0 	udiv	r3, r4, r0
 8000426:	fb00 4413 	mls	r4, r0, r3, r4
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000432:	45a4      	cmp	ip, r4
 8000434:	d90e      	bls.n	8000454 <__udivmoddi4+0x1f0>
 8000436:	193c      	adds	r4, r7, r4
 8000438:	f103 30ff 	add.w	r0, r3, #4294967295
 800043c:	bf2c      	ite	cs
 800043e:	f04f 0801 	movcs.w	r8, #1
 8000442:	f04f 0800 	movcc.w	r8, #0
 8000446:	45a4      	cmp	ip, r4
 8000448:	d903      	bls.n	8000452 <__udivmoddi4+0x1ee>
 800044a:	f1b8 0f00 	cmp.w	r8, #0
 800044e:	f000 809f 	beq.w	8000590 <__udivmoddi4+0x32c>
 8000452:	4603      	mov	r3, r0
 8000454:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000458:	eba4 040c 	sub.w	r4, r4, ip
 800045c:	fba0 ec02 	umull	lr, ip, r0, r2
 8000460:	4564      	cmp	r4, ip
 8000462:	4673      	mov	r3, lr
 8000464:	46e0      	mov	r8, ip
 8000466:	d302      	bcc.n	800046e <__udivmoddi4+0x20a>
 8000468:	d107      	bne.n	800047a <__udivmoddi4+0x216>
 800046a:	45f1      	cmp	r9, lr
 800046c:	d205      	bcs.n	800047a <__udivmoddi4+0x216>
 800046e:	ebbe 0302 	subs.w	r3, lr, r2
 8000472:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000476:	3801      	subs	r0, #1
 8000478:	46e0      	mov	r8, ip
 800047a:	b15d      	cbz	r5, 8000494 <__udivmoddi4+0x230>
 800047c:	ebb9 0203 	subs.w	r2, r9, r3
 8000480:	eb64 0408 	sbc.w	r4, r4, r8
 8000484:	fa04 f606 	lsl.w	r6, r4, r6
 8000488:	fa22 f301 	lsr.w	r3, r2, r1
 800048c:	40cc      	lsrs	r4, r1
 800048e:	431e      	orrs	r6, r3
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e736      	b.n	8000306 <__udivmoddi4+0xa2>
 8000498:	fbb1 fcf2 	udiv	ip, r1, r2
 800049c:	0c01      	lsrs	r1, r0, #16
 800049e:	4614      	mov	r4, r2
 80004a0:	b280      	uxth	r0, r0
 80004a2:	4696      	mov	lr, r2
 80004a4:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004a8:	2620      	movs	r6, #32
 80004aa:	4690      	mov	r8, r2
 80004ac:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004b0:	4610      	mov	r0, r2
 80004b2:	fbb1 f1f2 	udiv	r1, r1, r2
 80004b6:	eba3 0308 	sub.w	r3, r3, r8
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	e74b      	b.n	8000358 <__udivmoddi4+0xf4>
 80004c0:	40b7      	lsls	r7, r6
 80004c2:	f1c6 0320 	rsb	r3, r6, #32
 80004c6:	fa01 f206 	lsl.w	r2, r1, r6
 80004ca:	fa21 f803 	lsr.w	r8, r1, r3
 80004ce:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d2:	fa20 f303 	lsr.w	r3, r0, r3
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	40b0      	lsls	r0, r6
 80004da:	4313      	orrs	r3, r2
 80004dc:	0c02      	lsrs	r2, r0, #16
 80004de:	0c19      	lsrs	r1, r3, #16
 80004e0:	b280      	uxth	r0, r0
 80004e2:	fbb8 f9fe 	udiv	r9, r8, lr
 80004e6:	fb0e 8819 	mls	r8, lr, r9, r8
 80004ea:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	4588      	cmp	r8, r1
 80004f4:	d951      	bls.n	800059a <__udivmoddi4+0x336>
 80004f6:	1879      	adds	r1, r7, r1
 80004f8:	f109 3cff 	add.w	ip, r9, #4294967295
 80004fc:	bf2c      	ite	cs
 80004fe:	f04f 0a01 	movcs.w	sl, #1
 8000502:	f04f 0a00 	movcc.w	sl, #0
 8000506:	4588      	cmp	r8, r1
 8000508:	d902      	bls.n	8000510 <__udivmoddi4+0x2ac>
 800050a:	f1ba 0f00 	cmp.w	sl, #0
 800050e:	d031      	beq.n	8000574 <__udivmoddi4+0x310>
 8000510:	eba1 0108 	sub.w	r1, r1, r8
 8000514:	fbb1 f9fe 	udiv	r9, r1, lr
 8000518:	fb09 f804 	mul.w	r8, r9, r4
 800051c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000520:	b29b      	uxth	r3, r3
 8000522:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000526:	4543      	cmp	r3, r8
 8000528:	d235      	bcs.n	8000596 <__udivmoddi4+0x332>
 800052a:	18fb      	adds	r3, r7, r3
 800052c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000530:	bf2c      	ite	cs
 8000532:	f04f 0a01 	movcs.w	sl, #1
 8000536:	f04f 0a00 	movcc.w	sl, #0
 800053a:	4543      	cmp	r3, r8
 800053c:	d2bb      	bcs.n	80004b6 <__udivmoddi4+0x252>
 800053e:	f1ba 0f00 	cmp.w	sl, #0
 8000542:	d1b8      	bne.n	80004b6 <__udivmoddi4+0x252>
 8000544:	f1a9 0102 	sub.w	r1, r9, #2
 8000548:	443b      	add	r3, r7
 800054a:	e7b4      	b.n	80004b6 <__udivmoddi4+0x252>
 800054c:	1a84      	subs	r4, r0, r2
 800054e:	eb68 0203 	sbc.w	r2, r8, r3
 8000552:	2001      	movs	r0, #1
 8000554:	4696      	mov	lr, r2
 8000556:	e6eb      	b.n	8000330 <__udivmoddi4+0xcc>
 8000558:	443a      	add	r2, r7
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	e72b      	b.n	80003b8 <__udivmoddi4+0x154>
 8000560:	f1ac 0c02 	sub.w	ip, ip, #2
 8000564:	443b      	add	r3, r7
 8000566:	e710      	b.n	800038a <__udivmoddi4+0x126>
 8000568:	3902      	subs	r1, #2
 800056a:	443b      	add	r3, r7
 800056c:	e6a9      	b.n	80002c2 <__udivmoddi4+0x5e>
 800056e:	443a      	add	r2, r7
 8000570:	3802      	subs	r0, #2
 8000572:	e6be      	b.n	80002f2 <__udivmoddi4+0x8e>
 8000574:	eba7 0808 	sub.w	r8, r7, r8
 8000578:	f1a9 0c02 	sub.w	ip, r9, #2
 800057c:	4441      	add	r1, r8
 800057e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000582:	fb09 f804 	mul.w	r8, r9, r4
 8000586:	e7c9      	b.n	800051c <__udivmoddi4+0x2b8>
 8000588:	f1ae 0e02 	sub.w	lr, lr, #2
 800058c:	443c      	add	r4, r7
 800058e:	e744      	b.n	800041a <__udivmoddi4+0x1b6>
 8000590:	3b02      	subs	r3, #2
 8000592:	443c      	add	r4, r7
 8000594:	e75e      	b.n	8000454 <__udivmoddi4+0x1f0>
 8000596:	4649      	mov	r1, r9
 8000598:	e78d      	b.n	80004b6 <__udivmoddi4+0x252>
 800059a:	eba1 0108 	sub.w	r1, r1, r8
 800059e:	46cc      	mov	ip, r9
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7b8      	b.n	800051c <__udivmoddi4+0x2b8>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <CS_LOW>:


// Chip Select helpers
#define FLASH_CS_PORT GPIOA
#define FLASH_CS_PIN  GPIO_PIN_4
static inline void CS_LOW(void)  { HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET); }
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	2200      	movs	r2, #0
 80005b6:	2110      	movs	r1, #16
 80005b8:	4802      	ldr	r0, [pc, #8]	@ (80005c4 <CS_LOW+0x14>)
 80005ba:	f001 facb 	bl	8001b54 <HAL_GPIO_WritePin>
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	42020000 	.word	0x42020000

080005c8 <CS_HIGH>:
static inline void CS_HIGH(void) { HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);   }
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	2201      	movs	r2, #1
 80005ce:	2110      	movs	r1, #16
 80005d0:	4802      	ldr	r0, [pc, #8]	@ (80005dc <CS_HIGH+0x14>)
 80005d2:	f001 fabf 	bl	8001b54 <HAL_GPIO_WritePin>
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	42020000 	.word	0x42020000

080005e0 <spi_tx>:


// low-level helper functions
static inline void spi_tx1(uint8_t v) { HAL_SPI_Transmit(&hspi1, &v, 1, 1000);}
static inline void spi_tx(const uint8_t *buf, uint16_t n) { HAL_SPI_Transmit(&hspi1, (uint8_t*)buf, n, 1000);}
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	807b      	strh	r3, [r7, #2]
 80005ec:	887a      	ldrh	r2, [r7, #2]
 80005ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005f2:	6879      	ldr	r1, [r7, #4]
 80005f4:	4803      	ldr	r0, [pc, #12]	@ (8000604 <spi_tx+0x24>)
 80005f6:	f002 fc1a 	bl	8002e2e <HAL_SPI_Transmit>
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200000bc 	.word	0x200000bc

08000608 <spi_rx>:
static void spi_rx(uint8_t *buf, uint16_t n) { HAL_SPI_Receive(&hspi1, buf, n, 1000);}
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	807b      	strh	r3, [r7, #2]
 8000614:	887a      	ldrh	r2, [r7, #2]
 8000616:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	4803      	ldr	r0, [pc, #12]	@ (800062c <spi_rx+0x24>)
 800061e:	f002 fd7b 	bl	8003118 <HAL_SPI_Receive>
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	200000bc 	.word	0x200000bc

08000630 <read_data>:

/*
 * function to read data
 * addr24 is where the data will start from, and increment
 */
static void read_data(uint32_t addr24, uint8_t *out, uint16_t len) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	4613      	mov	r3, r2
 800063c:	80fb      	strh	r3, [r7, #6]
    uint8_t hdr[4] = { READ,
 800063e:	2303      	movs	r3, #3
 8000640:	753b      	strb	r3, [r7, #20]
                       (uint8_t)(addr24 >> 16),
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	0c1b      	lsrs	r3, r3, #16
 8000646:	b2db      	uxtb	r3, r3
    uint8_t hdr[4] = { READ,
 8000648:	757b      	strb	r3, [r7, #21]
                       (uint8_t)(addr24 >> 8),
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	0a1b      	lsrs	r3, r3, #8
 800064e:	b2db      	uxtb	r3, r3
    uint8_t hdr[4] = { READ,
 8000650:	75bb      	strb	r3, [r7, #22]
                       (uint8_t)(addr24) };
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	b2db      	uxtb	r3, r3
    uint8_t hdr[4] = { READ,
 8000656:	75fb      	strb	r3, [r7, #23]
    CS_LOW();
 8000658:	f7ff ffaa 	bl	80005b0 <CS_LOW>
    spi_tx(hdr, sizeof(hdr));   // send cmd+addr
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2104      	movs	r1, #4
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ffbc 	bl	80005e0 <spi_tx>
    spi_rx(out, len);           // then clock out data
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	4619      	mov	r1, r3
 800066c:	68b8      	ldr	r0, [r7, #8]
 800066e:	f7ff ffcb 	bl	8000608 <spi_rx>
    CS_HIGH();
 8000672:	f7ff ffa9 	bl	80005c8 <CS_HIGH>
}
 8000676:	bf00      	nop
 8000678:	3718      	adds	r7, #24
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <ReadTest>:

void ReadTest(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b0e8      	sub	sp, #416	@ 0x1a0
 8000684:	af00      	add	r7, sp, #0
    const uint32_t addr = 0x00000008; // 3B address
 8000686:	2308      	movs	r3, #8
 8000688:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
    const uint8_t tx[200] = {0xAA};
 800068c:	23aa      	movs	r3, #170	@ 0xaa
 800068e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000692:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000696:	22c4      	movs	r2, #196	@ 0xc4
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f004 fb22 	bl	8004ce4 <memset>

    uint8_t rx[200] = {0};
 80006a0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80006a4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80006a8:	4618      	mov	r0, r3
 80006aa:	23c8      	movs	r3, #200	@ 0xc8
 80006ac:	461a      	mov	r2, r3
 80006ae:	2100      	movs	r1, #0
 80006b0:	f004 fb18 	bl	8004ce4 <memset>
    uint32_t base4k = addr & ~0x0FFFU;
 80006b4:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80006b8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80006bc:	f023 030f 	bic.w	r3, r3, #15
 80006c0:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194

    // ---- READ BACK ----
    read_data(addr, rx, sizeof(rx));
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	22c8      	movs	r2, #200	@ 0xc8
 80006c8:	4619      	mov	r1, r3
 80006ca:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 80006ce:	f7ff ffaf 	bl	8000630 <read_data>
    printf("data is ===================================== \r\n");
 80006d2:	481d      	ldr	r0, [pc, #116]	@ (8000748 <ReadTest+0xc8>)
 80006d4:	f004 fa16 	bl	8004b04 <puts>
    for (int i = 0; i < 200; i++){
 80006d8:	2300      	movs	r3, #0
 80006da:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80006de:	e00e      	b.n	80006fe <ReadTest+0x7e>
    	printf("%2X\r\n", tx[i]);
 80006e0:	f107 02cc 	add.w	r2, r7, #204	@ 0xcc
 80006e4:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80006e8:	4413      	add	r3, r2
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	4619      	mov	r1, r3
 80006ee:	4817      	ldr	r0, [pc, #92]	@ (800074c <ReadTest+0xcc>)
 80006f0:	f004 f9a0 	bl	8004a34 <iprintf>
    for (int i = 0; i < 200; i++){
 80006f4:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80006f8:	3301      	adds	r3, #1
 80006fa:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80006fe:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8000702:	2bc7      	cmp	r3, #199	@ 0xc7
 8000704:	ddec      	ble.n	80006e0 <ReadTest+0x60>
    }
    printf("doe printing data ===================================== \r\n");
 8000706:	4812      	ldr	r0, [pc, #72]	@ (8000750 <ReadTest+0xd0>)
 8000708:	f004 f9fc 	bl	8004b04 <puts>

    // ---- VERIFY ----
    if (memcmp(tx, rx, sizeof(tx)) == 0) {
 800070c:	1d39      	adds	r1, r7, #4
 800070e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000712:	22c8      	movs	r2, #200	@ 0xc8
 8000714:	4618      	mov	r0, r3
 8000716:	f004 fad5 	bl	8004cc4 <memcmp>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d105      	bne.n	800072c <ReadTest+0xac>
        printf("PASS: data verified at 0x%06lX\n", (unsigned long)addr);
 8000720:	f8d7 1198 	ldr.w	r1, [r7, #408]	@ 0x198
 8000724:	480b      	ldr	r0, [pc, #44]	@ (8000754 <ReadTest+0xd4>)
 8000726:	f004 f985 	bl	8004a34 <iprintf>
 800072a:	e004      	b.n	8000736 <ReadTest+0xb6>
    } else {
        printf("FAIL: mismatch at 0x%06lX\n", (unsigned long)addr);
 800072c:	f8d7 1198 	ldr.w	r1, [r7, #408]	@ 0x198
 8000730:	4809      	ldr	r0, [pc, #36]	@ (8000758 <ReadTest+0xd8>)
 8000732:	f004 f97f 	bl	8004a34 <iprintf>
    }

    printf("END OF TEST FUNCTION\r\n");
 8000736:	4809      	ldr	r0, [pc, #36]	@ (800075c <ReadTest+0xdc>)
 8000738:	f004 f9e4 	bl	8004b04 <puts>
    return;
 800073c:	bf00      	nop
}
 800073e:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	080056f8 	.word	0x080056f8
 800074c:	08005728 	.word	0x08005728
 8000750:	08005730 	.word	0x08005730
 8000754:	0800576c 	.word	0x0800576c
 8000758:	0800578c 	.word	0x0800578c
 800075c:	080057a8 	.word	0x080057a8

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000764:	f000 fe44 	bl	80013f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000768:	f000 f846 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076c:	f000 f8e6 	bl	800093c <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000770:	f000 f893 	bl	800089a <MX_ICACHE_Init>
  MX_SPI1_Init();
 8000774:	f000 f8a4 	bl	80008c0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000778:	2000      	movs	r0, #0
 800077a:	f000 fb5b 	bl	8000e34 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 800077e:	2001      	movs	r0, #1
 8000780:	f000 fb58 	bl	8000e34 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000784:	2002      	movs	r0, #2
 8000786:	f000 fb55 	bl	8000e34 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800078a:	2101      	movs	r1, #1
 800078c:	2000      	movs	r0, #0
 800078e:	f000 fbc9 	bl	8000f24 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000792:	4b17      	ldr	r3, [pc, #92]	@ (80007f0 <main+0x90>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000798:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800079a:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <main+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80007a0:	4b13      	ldr	r3, [pc, #76]	@ (80007f0 <main+0x90>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <main+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80007ac:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <main+0x90>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80007b2:	490f      	ldr	r1, [pc, #60]	@ (80007f0 <main+0x90>)
 80007b4:	2000      	movs	r0, #0
 80007b6:	f000 fc71 	bl	800109c <BSP_COM_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <main+0x64>
  {
    Error_Handler();
 80007c0:	f000 f906 	bl	80009d0 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(5000);
 80007c4:	f241 3088 	movw	r0, #5000	@ 0x1388
 80007c8:	f000 fe88 	bl	80014dc <HAL_Delay>
  }
  ReceiveTransmitTest();
*/
  //WriteTest();

  ReadTest();
 80007cc:	f7ff ff58 	bl	8000680 <ReadTest>


  while (1)
  {
	  //printf("hello world\r\n");
	  HAL_Delay(1000);
 80007d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007d4:	f000 fe82 	bl	80014dc <HAL_Delay>
	  // currently any rx is failing
	  // make sure to wait 1 ms for power up time befoe using the chip
	  printf("in while loop, done test \r\n");
 80007d8:	4806      	ldr	r0, [pc, #24]	@ (80007f4 <main+0x94>)
 80007da:	f004 f993 	bl	8004b04 <puts>
	  BSP_LED_Toggle(LED_GREEN);
 80007de:	2000      	movs	r0, #0
 80007e0:	f000 fb86 	bl	8000ef0 <BSP_LED_Toggle>
	  HAL_Delay(300);
 80007e4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80007e8:	f000 fe78 	bl	80014dc <HAL_Delay>
	  HAL_Delay(1000);
 80007ec:	bf00      	nop
 80007ee:	e7ef      	b.n	80007d0 <main+0x70>
 80007f0:	200000ac 	.word	0x200000ac
 80007f4:	08005884 	.word	0x08005884

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b098      	sub	sp, #96	@ 0x60
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 0318 	add.w	r3, r7, #24
 8000802:	2248      	movs	r2, #72	@ 0x48
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f004 fa6c 	bl	8004ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800081a:	2000      	movs	r0, #0
 800081c:	f001 fa0a 	bl	8001c34 <HAL_PWREx_ControlVoltageScaling>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000826:	f000 f8d3 	bl	80009d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800082a:	2310      	movs	r3, #16
 800082c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800082e:	2301      	movs	r3, #1
 8000830:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000832:	2300      	movs	r3, #0
 8000834:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000836:	2360      	movs	r3, #96	@ 0x60
 8000838:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800083e:	2301      	movs	r3, #1
 8000840:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000842:	2301      	movs	r3, #1
 8000844:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000846:	2337      	movs	r3, #55	@ 0x37
 8000848:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800084a:	2307      	movs	r3, #7
 800084c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800084e:	2302      	movs	r3, #2
 8000850:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000852:	2302      	movs	r3, #2
 8000854:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000856:	f107 0318 	add.w	r3, r7, #24
 800085a:	4618      	mov	r0, r3
 800085c:	f001 fa8a 	bl	8001d74 <HAL_RCC_OscConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000866:	f000 f8b3 	bl	80009d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086a:	230f      	movs	r3, #15
 800086c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086e:	2303      	movs	r3, #3
 8000870:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2105      	movs	r1, #5
 8000882:	4618      	mov	r0, r3
 8000884:	f001 ff4c 	bl	8002720 <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800088e:	f000 f89f 	bl	80009d0 <Error_Handler>
  }
}
 8000892:	bf00      	nop
 8000894:	3760      	adds	r7, #96	@ 0x60
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800089e:	2000      	movs	r0, #0
 80008a0:	f001 f98a 	bl	8001bb8 <HAL_ICACHE_ConfigAssociativityMode>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80008aa:	f000 f891 	bl	80009d0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80008ae:	f001 f9a3 	bl	8001bf8 <HAL_ICACHE_Enable>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80008b8:	f000 f88a 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}

080008c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000934 <MX_SPI1_Init+0x74>)
 80008c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000938 <MX_SPI1_Init+0x78>)
 80008c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <MX_SPI1_Init+0x74>)
 80008cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008d2:	4b18      	ldr	r3, [pc, #96]	@ (8000934 <MX_SPI1_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d8:	4b16      	ldr	r3, [pc, #88]	@ (8000934 <MX_SPI1_Init+0x74>)
 80008da:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80008de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e0:	4b14      	ldr	r3, [pc, #80]	@ (8000934 <MX_SPI1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e6:	4b13      	ldr	r3, [pc, #76]	@ (8000934 <MX_SPI1_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ec:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <MX_SPI1_Init+0x74>)
 80008ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <MX_SPI1_Init+0x74>)
 80008f6:	2220      	movs	r2, #32
 80008f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <MX_SPI1_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000900:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <MX_SPI1_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	@ (8000934 <MX_SPI1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800090c:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <MX_SPI1_Init+0x74>)
 800090e:	2207      	movs	r2, #7
 8000910:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000912:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <MX_SPI1_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000918:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <MX_SPI1_Init+0x74>)
 800091a:	2208      	movs	r2, #8
 800091c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800091e:	4805      	ldr	r0, [pc, #20]	@ (8000934 <MX_SPI1_Init+0x74>)
 8000920:	f002 f9e2 	bl	8002ce8 <HAL_SPI_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800092a:	f000 f851 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200000bc 	.word	0x200000bc
 8000938:	40013000 	.word	0x40013000

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <MX_GPIO_Init+0x8c>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000956:	4a1c      	ldr	r2, [pc, #112]	@ (80009c8 <MX_GPIO_Init+0x8c>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800095e:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <MX_GPIO_Init+0x8c>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <MX_GPIO_Init+0x8c>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096e:	4a16      	ldr	r2, [pc, #88]	@ (80009c8 <MX_GPIO_Init+0x8c>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000976:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <MX_GPIO_Init+0x8c>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <MX_GPIO_Init+0x8c>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000986:	4a10      	ldr	r2, [pc, #64]	@ (80009c8 <MX_GPIO_Init+0x8c>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <MX_GPIO_Init+0x8c>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2110      	movs	r1, #16
 800099e:	480b      	ldr	r0, [pc, #44]	@ (80009cc <MX_GPIO_Init+0x90>)
 80009a0:	f001 f8d8 	bl	8001b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009a4:	2310      	movs	r3, #16
 80009a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	4619      	mov	r1, r3
 80009ba:	4804      	ldr	r0, [pc, #16]	@ (80009cc <MX_GPIO_Init+0x90>)
 80009bc:	f000 ff4a 	bl	8001854 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009c0:	bf00      	nop
 80009c2:	3720      	adds	r7, #32
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40021000 	.word	0x40021000
 80009cc:	42020000 	.word	0x42020000

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <Error_Handler+0x8>

080009dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <HAL_MspInit+0x44>)
 80009e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000a20 <HAL_MspInit+0x44>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80009ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <HAL_MspInit+0x44>)
 80009f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <HAL_MspInit+0x44>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009fe:	4a08      	ldr	r2, [pc, #32]	@ (8000a20 <HAL_MspInit+0x44>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a04:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a06:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <HAL_MspInit+0x44>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a12:	f001 f97b 	bl	8001d0c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40021000 	.word	0x40021000

08000a24 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	@ 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a17      	ldr	r2, [pc, #92]	@ (8000aa0 <HAL_SPI_MspInit+0x7c>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d127      	bne.n	8000a96 <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a46:	4b17      	ldr	r3, [pc, #92]	@ (8000aa4 <HAL_SPI_MspInit+0x80>)
 8000a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a4a:	4a16      	ldr	r2, [pc, #88]	@ (8000aa4 <HAL_SPI_MspInit+0x80>)
 8000a4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a50:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a52:	4b14      	ldr	r3, [pc, #80]	@ (8000aa4 <HAL_SPI_MspInit+0x80>)
 8000a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <HAL_SPI_MspInit+0x80>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	4a10      	ldr	r2, [pc, #64]	@ (8000aa4 <HAL_SPI_MspInit+0x80>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <HAL_SPI_MspInit+0x80>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000a76:	2338      	movs	r3, #56	@ 0x38
 8000a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a86:	2305      	movs	r3, #5
 8000a88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	@ (8000aa8 <HAL_SPI_MspInit+0x84>)
 8000a92:	f000 fedf 	bl	8001854 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000a96:	bf00      	nop
 8000a98:	3728      	adds	r7, #40	@ 0x28
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40013000 	.word	0x40013000
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	42020400 	.word	0x42020400

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <HardFault_Handler+0x4>

08000abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <MemManage_Handler+0x4>

08000ac4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b02:	f000 fccb 	bl	800149c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f000 faae 	bl	8001070 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	e00a      	b.n	8000b40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b2a:	f3af 8000 	nop.w
 8000b2e:	4601      	mov	r1, r0
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	1c5a      	adds	r2, r3, #1
 8000b34:	60ba      	str	r2, [r7, #8]
 8000b36:	b2ca      	uxtb	r2, r1
 8000b38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	dbf0      	blt.n	8000b2a <_read+0x12>
  }

  return len;
 8000b48:	687b      	ldr	r3, [r7, #4]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	60f8      	str	r0, [r7, #12]
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	e009      	b.n	8000b78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	60ba      	str	r2, [r7, #8]
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 fae9 	bl	8001144 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	3301      	adds	r3, #1
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697a      	ldr	r2, [r7, #20]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	dbf1      	blt.n	8000b64 <_write+0x12>
  }
  return len;
 8000b80:	687b      	ldr	r3, [r7, #4]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <_close>:

int _close(int file)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bb2:	605a      	str	r2, [r3, #4]
  return 0;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <_isatty>:

int _isatty(int file)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bfc:	4a14      	ldr	r2, [pc, #80]	@ (8000c50 <_sbrk+0x5c>)
 8000bfe:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <_sbrk+0x60>)
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c08:	4b13      	ldr	r3, [pc, #76]	@ (8000c58 <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d102      	bne.n	8000c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c10:	4b11      	ldr	r3, [pc, #68]	@ (8000c58 <_sbrk+0x64>)
 8000c12:	4a12      	ldr	r2, [pc, #72]	@ (8000c5c <_sbrk+0x68>)
 8000c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c16:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d207      	bcs.n	8000c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c24:	f004 f8bc 	bl	8004da0 <__errno>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	e009      	b.n	8000c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c34:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	@ (8000c58 <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	4a05      	ldr	r2, [pc, #20]	@ (8000c58 <_sbrk+0x64>)
 8000c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c46:	68fb      	ldr	r3, [r7, #12]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20030000 	.word	0x20030000
 8000c54:	00000400 	.word	0x00000400
 8000c58:	20000120 	.word	0x20000120
 8000c5c:	200003b0 	.word	0x200003b0

08000c60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <SystemInit+0x20>)
 8000c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c6a:	4a05      	ldr	r2, [pc, #20]	@ (8000c80 <SystemInit+0x20>)
 8000c6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b087      	sub	sp, #28
 8000c88:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000c8a:	4b4f      	ldr	r3, [pc, #316]	@ (8000dc8 <SystemCoreClockUpdate+0x144>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 0308 	and.w	r3, r3, #8
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d107      	bne.n	8000ca6 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000c96:	4b4c      	ldr	r3, [pc, #304]	@ (8000dc8 <SystemCoreClockUpdate+0x144>)
 8000c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	e005      	b.n	8000cb2 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000ca6:	4b48      	ldr	r3, [pc, #288]	@ (8000dc8 <SystemCoreClockUpdate+0x144>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	091b      	lsrs	r3, r3, #4
 8000cac:	f003 030f 	and.w	r3, r3, #15
 8000cb0:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000cb2:	4a46      	ldr	r2, [pc, #280]	@ (8000dcc <SystemCoreClockUpdate+0x148>)
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cba:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000cbc:	4b42      	ldr	r3, [pc, #264]	@ (8000dc8 <SystemCoreClockUpdate+0x144>)
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	f003 030c 	and.w	r3, r3, #12
 8000cc4:	2b0c      	cmp	r3, #12
 8000cc6:	d866      	bhi.n	8000d96 <SystemCoreClockUpdate+0x112>
 8000cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8000cd0 <SystemCoreClockUpdate+0x4c>)
 8000cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cce:	bf00      	nop
 8000cd0:	08000d05 	.word	0x08000d05
 8000cd4:	08000d97 	.word	0x08000d97
 8000cd8:	08000d97 	.word	0x08000d97
 8000cdc:	08000d97 	.word	0x08000d97
 8000ce0:	08000d0d 	.word	0x08000d0d
 8000ce4:	08000d97 	.word	0x08000d97
 8000ce8:	08000d97 	.word	0x08000d97
 8000cec:	08000d97 	.word	0x08000d97
 8000cf0:	08000d15 	.word	0x08000d15
 8000cf4:	08000d97 	.word	0x08000d97
 8000cf8:	08000d97 	.word	0x08000d97
 8000cfc:	08000d97 	.word	0x08000d97
 8000d00:	08000d1d 	.word	0x08000d1d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000d04:	4a32      	ldr	r2, [pc, #200]	@ (8000dd0 <SystemCoreClockUpdate+0x14c>)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	6013      	str	r3, [r2, #0]
      break;
 8000d0a:	e048      	b.n	8000d9e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000d0c:	4b30      	ldr	r3, [pc, #192]	@ (8000dd0 <SystemCoreClockUpdate+0x14c>)
 8000d0e:	4a31      	ldr	r2, [pc, #196]	@ (8000dd4 <SystemCoreClockUpdate+0x150>)
 8000d10:	601a      	str	r2, [r3, #0]
      break;
 8000d12:	e044      	b.n	8000d9e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000d14:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd0 <SystemCoreClockUpdate+0x14c>)
 8000d16:	4a30      	ldr	r2, [pc, #192]	@ (8000dd8 <SystemCoreClockUpdate+0x154>)
 8000d18:	601a      	str	r2, [r3, #0]
      break;
 8000d1a:	e040      	b.n	8000d9e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000dc8 <SystemCoreClockUpdate+0x144>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000d26:	4b28      	ldr	r3, [pc, #160]	@ (8000dc8 <SystemCoreClockUpdate+0x144>)
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	091b      	lsrs	r3, r3, #4
 8000d2c:	f003 030f 	and.w	r3, r3, #15
 8000d30:	3301      	adds	r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d003      	beq.n	8000d42 <SystemCoreClockUpdate+0xbe>
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	2b03      	cmp	r3, #3
 8000d3e:	d006      	beq.n	8000d4e <SystemCoreClockUpdate+0xca>
 8000d40:	e00b      	b.n	8000d5a <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000d42:	4a24      	ldr	r2, [pc, #144]	@ (8000dd4 <SystemCoreClockUpdate+0x150>)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4a:	613b      	str	r3, [r7, #16]
          break;
 8000d4c:	e00b      	b.n	8000d66 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000d4e:	4a22      	ldr	r2, [pc, #136]	@ (8000dd8 <SystemCoreClockUpdate+0x154>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d56:	613b      	str	r3, [r7, #16]
          break;
 8000d58:	e005      	b.n	8000d66 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d62:	613b      	str	r3, [r7, #16]
          break;
 8000d64:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000d66:	4b18      	ldr	r3, [pc, #96]	@ (8000dc8 <SystemCoreClockUpdate+0x144>)
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	0a1b      	lsrs	r3, r3, #8
 8000d6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	fb02 f303 	mul.w	r3, r2, r3
 8000d76:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000d78:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <SystemCoreClockUpdate+0x144>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0e5b      	lsrs	r3, r3, #25
 8000d7e:	f003 0303 	and.w	r3, r3, #3
 8000d82:	3301      	adds	r3, #1
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d90:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd0 <SystemCoreClockUpdate+0x14c>)
 8000d92:	6013      	str	r3, [r2, #0]
      break;
 8000d94:	e003      	b.n	8000d9e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000d96:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd0 <SystemCoreClockUpdate+0x14c>)
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	6013      	str	r3, [r2, #0]
      break;
 8000d9c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <SystemCoreClockUpdate+0x144>)
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	091b      	lsrs	r3, r3, #4
 8000da4:	f003 030f 	and.w	r3, r3, #15
 8000da8:	4a0c      	ldr	r2, [pc, #48]	@ (8000ddc <SystemCoreClockUpdate+0x158>)
 8000daa:	5cd3      	ldrb	r3, [r2, r3]
 8000dac:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000dae:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <SystemCoreClockUpdate+0x14c>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	fa22 f303 	lsr.w	r3, r2, r3
 8000db8:	4a05      	ldr	r2, [pc, #20]	@ (8000dd0 <SystemCoreClockUpdate+0x14c>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	371c      	adds	r7, #28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	080058e4 	.word	0x080058e4
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	00f42400 	.word	0x00f42400
 8000dd8:	007a1200 	.word	0x007a1200
 8000ddc:	080058cc 	.word	0x080058cc

08000de0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000de0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000de4:	f7ff ff3c 	bl	8000c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000de8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000dea:	e003      	b.n	8000df4 <LoopCopyDataInit>

08000dec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000dec:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000dee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000df0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000df2:	3104      	adds	r1, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000df4:	480a      	ldr	r0, [pc, #40]	@ (8000e20 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000df6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e24 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000df8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000dfa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000dfc:	d3f6      	bcc.n	8000dec <CopyDataInit>
	ldr	r2, =_sbss
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000e28 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e00:	e002      	b.n	8000e08 <LoopFillZerobss>

08000e02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e02:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e04:	f842 3b04 	str.w	r3, [r2], #4

08000e08 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e08:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <LoopForever+0x16>)
	cmp	r2, r3
 8000e0a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e0c:	d3f9      	bcc.n	8000e02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e0e:	f003 ffcd 	bl	8004dac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e12:	f7ff fca5 	bl	8000760 <main>

08000e16 <LoopForever>:

LoopForever:
    b LoopForever
 8000e16:	e7fe      	b.n	8000e16 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000e18:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8000e1c:	08005980 	.word	0x08005980
	ldr	r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e24:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 8000e28:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 8000e2c:	200003ac 	.word	0x200003ac

08000e30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC1_2_IRQHandler>
	...

08000e34 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	@ 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LED1)
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d10c      	bne.n	8000e5e <BSP_LED_Init+0x2a>
  {
    LED1_GPIO_CLK_ENABLE();
 8000e44:	4b27      	ldr	r3, [pc, #156]	@ (8000ee4 <BSP_LED_Init+0xb0>)
 8000e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e48:	4a26      	ldr	r2, [pc, #152]	@ (8000ee4 <BSP_LED_Init+0xb0>)
 8000e4a:	f043 0304 	orr.w	r3, r3, #4
 8000e4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e50:	4b24      	ldr	r3, [pc, #144]	@ (8000ee4 <BSP_LED_Init+0xb0>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	e01b      	b.n	8000e96 <BSP_LED_Init+0x62>
  }
  else if (Led == LED2)
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d10c      	bne.n	8000e7e <BSP_LED_Init+0x4a>
  {
    LED2_GPIO_CLK_ENABLE();
 8000e64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee4 <BSP_LED_Init+0xb0>)
 8000e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e68:	4a1e      	ldr	r2, [pc, #120]	@ (8000ee4 <BSP_LED_Init+0xb0>)
 8000e6a:	f043 0302 	orr.w	r3, r3, #2
 8000e6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e70:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee4 <BSP_LED_Init+0xb0>)
 8000e72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	e00b      	b.n	8000e96 <BSP_LED_Init+0x62>
  }
  else /* Led = LED3 */
  {
    LED3_GPIO_CLK_ENABLE();
 8000e7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ee4 <BSP_LED_Init+0xb0>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e82:	4a18      	ldr	r2, [pc, #96]	@ (8000ee4 <BSP_LED_Init+0xb0>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <BSP_LED_Init+0xb0>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	4a13      	ldr	r2, [pc, #76]	@ (8000ee8 <BSP_LED_Init+0xb4>)
 8000e9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e9e:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_PULLUP;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	4a0f      	ldr	r2, [pc, #60]	@ (8000eec <BSP_LED_Init+0xb8>)
 8000eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb4:	f107 0214 	add.w	r2, r7, #20
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 fcca 	bl	8001854 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <BSP_LED_Init+0xb8>)
 8000ec4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	4a07      	ldr	r2, [pc, #28]	@ (8000ee8 <BSP_LED_Init+0xb4>)
 8000ecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f000 fe3e 	bl	8001b54 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3728      	adds	r7, #40	@ 0x28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	20000004 	.word	0x20000004
 8000eec:	2000000c 	.word	0x2000000c

08000ef0 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	4a07      	ldr	r2, [pc, #28]	@ (8000f1c <BSP_LED_Toggle+0x2c>)
 8000efe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	4906      	ldr	r1, [pc, #24]	@ (8000f20 <BSP_LED_Toggle+0x30>)
 8000f06:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	f000 fe39 	bl	8001b84 <HAL_GPIO_TogglePin>
  return BSP_ERROR_NONE;
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	2000000c 	.word	0x2000000c
 8000f20:	20000004 	.word	0x20000004

08000f24 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08c      	sub	sp, #48	@ 0x30
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	460a      	mov	r2, r1
 8000f2e:	71fb      	strb	r3, [r7, #7]
 8000f30:	4613      	mov	r3, r2
 8000f32:	71bb      	strb	r3, [r7, #6]
  int32_t               status = BSP_ERROR_NONE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef      GPIO_Init;
  uint32_t              BSP_BUTTON_IT_PRIO[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
 8000f38:	230f      	movs	r3, #15
 8000f3a:	617b      	str	r3, [r7, #20]
  uint32_t              BUTTON_EXTI_LINE[BUTTONn]   = {BUTTON_USER_EXTI_LINE};
 8000f3c:	4b3f      	ldr	r3, [pc, #252]	@ (800103c <BSP_PB_Init+0x118>)
 8000f3e:	613b      	str	r3, [r7, #16]
  BSP_EXTI_LineCallback ButtonCallback[BUTTONn]     = {BUTTON_USER_EXTI_Callback};
 8000f40:	4b3f      	ldr	r3, [pc, #252]	@ (8001040 <BSP_PB_Init+0x11c>)
 8000f42:	60fb      	str	r3, [r7, #12]

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000f44:	4b3f      	ldr	r3, [pc, #252]	@ (8001044 <BSP_PB_Init+0x120>)
 8000f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f48:	4a3e      	ldr	r2, [pc, #248]	@ (8001044 <BSP_PB_Init+0x120>)
 8000f4a:	f043 0304 	orr.w	r3, r3, #4
 8000f4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f50:	4b3c      	ldr	r3, [pc, #240]	@ (8001044 <BSP_PB_Init+0x120>)
 8000f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]

  GPIO_Init.Pin   = BUTTON_PIN[Button];
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	4a3a      	ldr	r2, [pc, #232]	@ (8001048 <BSP_PB_Init+0x124>)
 8000f60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f64:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000f6e:	79bb      	ldrb	r3, [r7, #6]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10b      	bne.n	8000f8c <BSP_PB_Init+0x68>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	4a34      	ldr	r2, [pc, #208]	@ (800104c <BSP_PB_Init+0x128>)
 8000f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f80:	f107 0218 	add.w	r2, r7, #24
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 fc64 	bl	8001854 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8000f8c:	79bb      	ldrb	r3, [r7, #6]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d14f      	bne.n	8001032 <BSP_PB_Init+0x10e>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_RISING;
 8000f92:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	4a2c      	ldr	r2, [pc, #176]	@ (800104c <BSP_PB_Init+0x128>)
 8000f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa0:	f107 0218 	add.w	r2, r7, #24
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fc54 	bl	8001854 <HAL_GPIO_Init>

    if (HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) == HAL_OK)
 8000fac:	79fa      	ldrb	r2, [r7, #7]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	4413      	add	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4a26      	ldr	r2, [pc, #152]	@ (8001050 <BSP_PB_Init+0x12c>)
 8000fb8:	441a      	add	r2, r3
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	3330      	adds	r3, #48	@ 0x30
 8000fc0:	443b      	add	r3, r7
 8000fc2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4610      	mov	r0, r2
 8000fca:	f000 fbe6 	bl	800179a <HAL_EXTI_GetHandle>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d12b      	bne.n	800102c <BSP_PB_Init+0x108>
    {
      if (HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_RISING_CB_ID, ButtonCallback[Button]) == HAL_OK)
 8000fd4:	79fa      	ldrb	r2, [r7, #7]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	4413      	add	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4a1c      	ldr	r2, [pc, #112]	@ (8001050 <BSP_PB_Init+0x12c>)
 8000fe0:	1898      	adds	r0, r3, r2
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	3330      	adds	r3, #48	@ 0x30
 8000fe8:	443b      	add	r3, r7
 8000fea:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	f000 fba6 	bl	8001742 <HAL_EXTI_RegisterCallback>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d113      	bne.n	8001024 <BSP_PB_Init+0x100>
      {
        /* Enable and set Button EXTI Interrupt to the lowest priority */
        HAL_NVIC_SetPriority(BUTTON_IRQn[Button], BSP_BUTTON_IT_PRIO[Button], 0x00);
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	4a15      	ldr	r2, [pc, #84]	@ (8001054 <BSP_PB_Init+0x130>)
 8001000:	56d0      	ldrsb	r0, [r2, r3]
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	3330      	adds	r3, #48	@ 0x30
 8001008:	443b      	add	r3, r7
 800100a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800100e:	2200      	movs	r2, #0
 8001010:	4619      	mov	r1, r3
 8001012:	f000 fb62 	bl	80016da <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4a0e      	ldr	r2, [pc, #56]	@ (8001054 <BSP_PB_Init+0x130>)
 800101a:	56d3      	ldrsb	r3, [r2, r3]
 800101c:	4618      	mov	r0, r3
 800101e:	f000 fb76 	bl	800170e <HAL_NVIC_EnableIRQ>
 8001022:	e006      	b.n	8001032 <BSP_PB_Init+0x10e>
      }
      else
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8001024:	f06f 0303 	mvn.w	r3, #3
 8001028:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800102a:	e002      	b.n	8001032 <BSP_PB_Init+0x10e>
      }
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 800102c:	f06f 0303 	mvn.w	r3, #3
 8001030:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }

  return status;
 8001032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001034:	4618      	mov	r0, r3
 8001036:	3730      	adds	r7, #48	@ 0x30
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	0600000d 	.word	0x0600000d
 8001040:	08001241 	.word	0x08001241
 8001044:	40021000 	.word	0x40021000
 8001048:	20000018 	.word	0x20000018
 800104c:	2000001c 	.word	0x2000001c
 8001050:	2000024c 	.word	0x2000024c
 8001054:	20000020 	.word	0x20000020

08001058 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <BSP_PB_IRQHandler>:
  *   This parameter should be:
  *     @arg BUTTON_USER
  * @retval None.
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800107a:	79fa      	ldrb	r2, [r7, #7]
 800107c:	4613      	mov	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4a04      	ldr	r2, [pc, #16]	@ (8001098 <BSP_PB_IRQHandler+0x28>)
 8001086:	4413      	add	r3, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f000 fb9b 	bl	80017c4 <HAL_EXTI_IRQHandler>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000024c 	.word	0x2000024c

0800109c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                configuration information for the specified COM peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	6039      	str	r1, [r7, #0]
 80010a6:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d103      	bne.n	80010ba <BSP_COM_Init+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80010b2:	f06f 0301 	mvn.w	r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	e03a      	b.n	8001130 <BSP_COM_Init+0x94>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
 80010ba:	79fa      	ldrb	r2, [r7, #7]
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	491f      	ldr	r1, [pc, #124]	@ (800113c <BSP_COM_Init+0xa0>)
 80010c0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010c4:	491e      	ldr	r1, [pc, #120]	@ (8001140 <BSP_COM_Init+0xa4>)
 80010c6:	2094      	movs	r0, #148	@ 0x94
 80010c8:	fb00 f303 	mul.w	r3, r0, r3
 80010cc:	440b      	add	r3, r1
 80010ce:	601a      	str	r2, [r3, #0]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	2294      	movs	r2, #148	@ 0x94
 80010d4:	fb02 f303 	mul.w	r3, r2, r3
 80010d8:	4a19      	ldr	r2, [pc, #100]	@ (8001140 <BSP_COM_Init+0xa4>)
 80010da:	4413      	add	r3, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 f8b7 	bl	8001250 <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d123      	bne.n	8001130 <BSP_COM_Init+0x94>
    {
      if (COM == COM1)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d110      	bne.n	8001110 <BSP_COM_Init+0x74>
      {
        if (MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2294      	movs	r2, #148	@ 0x94
 80010f2:	fb02 f303 	mul.w	r3, r2, r3
 80010f6:	4a12      	ldr	r2, [pc, #72]	@ (8001140 <BSP_COM_Init+0xa4>)
 80010f8:	4413      	add	r3, r2
 80010fa:	6839      	ldr	r1, [r7, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 f83d 	bl	800117c <MX_LPUART1_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d013      	beq.n	8001130 <BSP_COM_Init+0x94>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 8001108:	f06f 0303 	mvn.w	r3, #3
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	e00f      	b.n	8001130 <BSP_COM_Init+0x94>
        }
      }
      else /* COM = COM2 */
      {
        if (MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	2294      	movs	r2, #148	@ 0x94
 8001114:	fb02 f303 	mul.w	r3, r2, r3
 8001118:	4a09      	ldr	r2, [pc, #36]	@ (8001140 <BSP_COM_Init+0xa4>)
 800111a:	4413      	add	r3, r2
 800111c:	6839      	ldr	r1, [r7, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f85d 	bl	80011de <MX_USART3_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d002      	beq.n	8001130 <BSP_COM_Init+0x94>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 800112a:	f06f 0303 	mvn.w	r3, #3
 800112e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return status;
 8001130:	68fb      	ldr	r3, [r7, #12]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000024 	.word	0x20000024
 8001140:	20000124 	.word	0x20000124

08001144 <__io_putchar>:
#if defined(__ARMCC_VERSION) || defined(__ICCARM__)
int fputc(int ch, __attribute__((unused))FILE *f)
#elif __GNUC__
int __io_putchar(int ch)
#endif
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 800114c:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <__io_putchar+0x30>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	2394      	movs	r3, #148	@ 0x94
 8001154:	fb02 f303 	mul.w	r3, r2, r3
 8001158:	4a07      	ldr	r2, [pc, #28]	@ (8001178 <__io_putchar+0x34>)
 800115a:	1898      	adds	r0, r3, r2
 800115c:	1d39      	adds	r1, r7, #4
 800115e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001162:	2201      	movs	r2, #1
 8001164:	f002 fd48 	bl	8003bf8 <HAL_UART_Transmit>
  return ch;
 8001168:	687b      	ldr	r3, [r7, #4]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000258 	.word	0x20000258
 8001178:	20000124 	.word	0x20000124

0800117c <MX_LPUART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	891b      	ldrh	r3, [r3, #8]
 800119a:	461a      	mov	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	895b      	ldrh	r3, [r3, #10]
 80011a4:	461a      	mov	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	220c      	movs	r2, #12
 80011ae:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	899b      	ldrh	r3, [r3, #12]
 80011b4:	461a      	mov	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011c0:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f002 fcb8 	bl	8003b44 <HAL_UART_Init>
 80011d4:	4603      	mov	r3, r0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <MX_USART3_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	891b      	ldrh	r3, [r3, #8]
 80011fc:	461a      	mov	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	895b      	ldrh	r3, [r3, #10]
 8001206:	461a      	mov	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	220c      	movs	r2, #12
 8001210:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	899b      	ldrh	r3, [r3, #12]
 8001216:	461a      	mov	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001222:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f002 fc87 	bl	8003b44 <HAL_UART_Init>
 8001236:	4603      	mov	r3, r0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff ff07 	bl	8001058 <BSP_PB_Callback>
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b098      	sub	sp, #96	@ 0x60
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init;
  GPIO_TypeDef    *COM_TX_PORT[COMn] = {COM1_TX_GPIO_PORT, COM2_TX_GPIO_PORT};
 8001258:	4a60      	ldr	r2, [pc, #384]	@ (80013dc <UART_MspInit+0x18c>)
 800125a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800125e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001262:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIO_TypeDef    *COM_RX_PORT[COMn] = {COM1_RX_GPIO_PORT, COM2_RX_GPIO_PORT};
 8001266:	4a5d      	ldr	r2, [pc, #372]	@ (80013dc <UART_MspInit+0x18c>)
 8001268:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800126c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001270:	e883 0003 	stmia.w	r3, {r0, r1}
  uint16_t         COM_TX_PIN[COMn]  = {COM1_TX_PIN, COM2_TX_PIN};
 8001274:	4b5a      	ldr	r3, [pc, #360]	@ (80013e0 <UART_MspInit+0x190>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	637b      	str	r3, [r7, #52]	@ 0x34
  uint16_t         COM_RX_PIN[COMn]  = {COM1_RX_PIN, COM2_RX_PIN};
 800127a:	4b5a      	ldr	r3, [pc, #360]	@ (80013e4 <UART_MspInit+0x194>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t          COM_TX_AF[COMn]   = {COM1_TX_AF, COM2_TX_AF};
 8001280:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001284:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint8_t          COM_RX_AF[COMn]   = {COM1_RX_AF, COM2_RX_AF};
 8001286:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 800128a:	853b      	strh	r3, [r7, #40]	@ 0x28
  COM_TypeDef      COM;

  /* Get COM according instance */
  COM = (huart->Instance == COM1_UART) ? COM1 : COM2;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a55      	ldr	r2, [pc, #340]	@ (80013e8 <UART_MspInit+0x198>)
 8001292:	4293      	cmp	r3, r2
 8001294:	bf14      	ite	ne
 8001296:	2301      	movne	r3, #1
 8001298:	2300      	moveq	r3, #0
 800129a:	b2db      	uxtb	r3, r3
 800129c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  /* Enable COM and GPIO clocks */
  if (COM == COM1)
 80012a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d132      	bne.n	800130e <UART_MspInit+0xbe>
  {
    /* Enable VddIO2 for GPIOG */
    __HAL_RCC_PWR_CLK_ENABLE();
 80012a8:	4b50      	ldr	r3, [pc, #320]	@ (80013ec <UART_MspInit+0x19c>)
 80012aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ac:	4a4f      	ldr	r2, [pc, #316]	@ (80013ec <UART_MspInit+0x19c>)
 80012ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80012b4:	4b4d      	ldr	r3, [pc, #308]	@ (80013ec <UART_MspInit+0x19c>)
 80012b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80012be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_PWREx_EnableVddIO2();
 80012c0:	f000 fd14 	bl	8001cec <HAL_PWREx_EnableVddIO2>
    COM1_TX_GPIO_CLK_ENABLE();
 80012c4:	4b49      	ldr	r3, [pc, #292]	@ (80013ec <UART_MspInit+0x19c>)
 80012c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c8:	4a48      	ldr	r2, [pc, #288]	@ (80013ec <UART_MspInit+0x19c>)
 80012ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d0:	4b46      	ldr	r3, [pc, #280]	@ (80013ec <UART_MspInit+0x19c>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012d8:	623b      	str	r3, [r7, #32]
 80012da:	6a3b      	ldr	r3, [r7, #32]
    COM1_RX_GPIO_CLK_ENABLE();
 80012dc:	4b43      	ldr	r3, [pc, #268]	@ (80013ec <UART_MspInit+0x19c>)
 80012de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e0:	4a42      	ldr	r2, [pc, #264]	@ (80013ec <UART_MspInit+0x19c>)
 80012e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e8:	4b40      	ldr	r3, [pc, #256]	@ (80013ec <UART_MspInit+0x19c>)
 80012ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012f0:	61fb      	str	r3, [r7, #28]
 80012f2:	69fb      	ldr	r3, [r7, #28]
    COM1_CLK_ENABLE();
 80012f4:	4b3d      	ldr	r3, [pc, #244]	@ (80013ec <UART_MspInit+0x19c>)
 80012f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012f8:	4a3c      	ldr	r2, [pc, #240]	@ (80013ec <UART_MspInit+0x19c>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001300:	4b3a      	ldr	r3, [pc, #232]	@ (80013ec <UART_MspInit+0x19c>)
 8001302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	61bb      	str	r3, [r7, #24]
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	e023      	b.n	8001356 <UART_MspInit+0x106>
  }
  else /* COM = COM2 */
  {
    COM2_TX_GPIO_CLK_ENABLE();
 800130e:	4b37      	ldr	r3, [pc, #220]	@ (80013ec <UART_MspInit+0x19c>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001312:	4a36      	ldr	r2, [pc, #216]	@ (80013ec <UART_MspInit+0x19c>)
 8001314:	f043 0308 	orr.w	r3, r3, #8
 8001318:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131a:	4b34      	ldr	r3, [pc, #208]	@ (80013ec <UART_MspInit+0x19c>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697b      	ldr	r3, [r7, #20]
    COM2_RX_GPIO_CLK_ENABLE();
 8001326:	4b31      	ldr	r3, [pc, #196]	@ (80013ec <UART_MspInit+0x19c>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	4a30      	ldr	r2, [pc, #192]	@ (80013ec <UART_MspInit+0x19c>)
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001332:	4b2e      	ldr	r3, [pc, #184]	@ (80013ec <UART_MspInit+0x19c>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
    COM2_CLK_ENABLE();
 800133e:	4b2b      	ldr	r3, [pc, #172]	@ (80013ec <UART_MspInit+0x19c>)
 8001340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001342:	4a2a      	ldr	r2, [pc, #168]	@ (80013ec <UART_MspInit+0x19c>)
 8001344:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001348:	6593      	str	r3, [r2, #88]	@ 0x58
 800134a:	4b28      	ldr	r3, [pc, #160]	@ (80013ec <UART_MspInit+0x19c>)
 800134c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
  }

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
 8001356:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	3360      	adds	r3, #96	@ 0x60
 800135e:	443b      	add	r3, r7
 8001360:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8001364:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	64fb      	str	r3, [r7, #76]	@ 0x4c
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
 800136a:	2302      	movs	r3, #2
 800136c:	657b      	str	r3, [r7, #84]	@ 0x54
  GPIO_Init.Pull      = GPIO_PULLUP;
 800136e:	2301      	movs	r3, #1
 8001370:	653b      	str	r3, [r7, #80]	@ 0x50
  GPIO_Init.Alternate = COM_TX_AF[COM];
 8001372:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001376:	3360      	adds	r3, #96	@ 0x60
 8001378:	443b      	add	r3, r7
 800137a:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 800137e:	65bb      	str	r3, [r7, #88]	@ 0x58
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
 8001380:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	3360      	adds	r3, #96	@ 0x60
 8001388:	443b      	add	r3, r7
 800138a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800138e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f000 fa5d 	bl	8001854 <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
 800139a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	3360      	adds	r3, #96	@ 0x60
 80013a2:	443b      	add	r3, r7
 80013a4:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80013a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_Init.Alternate = COM_RX_AF[COM];
 80013aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80013ae:	3360      	adds	r3, #96	@ 0x60
 80013b0:	443b      	add	r3, r7
 80013b2:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80013b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
 80013b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	3360      	adds	r3, #96	@ 0x60
 80013c0:	443b      	add	r3, r7
 80013c2:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80013c6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 fa41 	bl	8001854 <HAL_GPIO_Init>
}
 80013d2:	bf00      	nop
 80013d4:	3760      	adds	r7, #96	@ 0x60
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	080058bc 	.word	0x080058bc
 80013e0:	080058c4 	.word	0x080058c4
 80013e4:	080058c8 	.word	0x080058c8
 80013e8:	40008000 	.word	0x40008000
 80013ec:	40021000 	.word	0x40021000

080013f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80013fa:	2004      	movs	r0, #4
 80013fc:	f000 f962 	bl	80016c4 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001400:	f7ff fc40 	bl	8000c84 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001404:	2000      	movs	r0, #0
 8001406:	f000 f80d 	bl	8001424 <HAL_InitTick>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d002      	beq.n	8001416 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	71fb      	strb	r3, [r7, #7]
 8001414:	e001      	b.n	800141a <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001416:	f7ff fae1 	bl	80009dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800141a:	79fb      	ldrb	r3, [r7, #7]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001430:	4b17      	ldr	r3, [pc, #92]	@ (8001490 <HAL_InitTick+0x6c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d023      	beq.n	8001480 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001438:	4b16      	ldr	r3, [pc, #88]	@ (8001494 <HAL_InitTick+0x70>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <HAL_InitTick+0x6c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001446:	fbb3 f3f1 	udiv	r3, r3, r1
 800144a:	fbb2 f3f3 	udiv	r3, r2, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f96b 	bl	800172a <HAL_SYSTICK_Config>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10f      	bne.n	800147a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b07      	cmp	r3, #7
 800145e:	d809      	bhi.n	8001474 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001460:	2200      	movs	r2, #0
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	f000 f937 	bl	80016da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800146c:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <HAL_InitTick+0x74>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	e007      	b.n	8001484 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
 8001478:	e004      	b.n	8001484 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	73fb      	strb	r3, [r7, #15]
 800147e:	e001      	b.n	8001484 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001484:	7bfb      	ldrb	r3, [r7, #15]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000030 	.word	0x20000030
 8001494:	20000000 	.word	0x20000000
 8001498:	2000002c 	.word	0x2000002c

0800149c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_IncTick+0x20>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <HAL_IncTick+0x24>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a04      	ldr	r2, [pc, #16]	@ (80014c0 <HAL_IncTick+0x24>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000030 	.word	0x20000030
 80014c0:	2000025c 	.word	0x2000025c

080014c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;
 80014c8:	4b03      	ldr	r3, [pc, #12]	@ (80014d8 <HAL_GetTick+0x14>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	2000025c 	.word	0x2000025c

080014dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e4:	f7ff ffee 	bl	80014c4 <HAL_GetTick>
 80014e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f4:	d005      	beq.n	8001502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <HAL_Delay+0x44>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4413      	add	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001502:	bf00      	nop
 8001504:	f7ff ffde 	bl	80014c4 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	429a      	cmp	r2, r3
 8001512:	d8f7      	bhi.n	8001504 <HAL_Delay+0x28>
  {
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000030 	.word	0x20000030

08001524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001534:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001540:	4013      	ands	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800154c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001556:	4a04      	ldr	r2, [pc, #16]	@ (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	60d3      	str	r3, [r2, #12]
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001570:	4b04      	ldr	r3, [pc, #16]	@ (8001584 <__NVIC_GetPriorityGrouping+0x18>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	f003 0307 	and.w	r3, r3, #7
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	2b00      	cmp	r3, #0
 8001598:	db0b      	blt.n	80015b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	f003 021f 	and.w	r2, r3, #31
 80015a0:	4907      	ldr	r1, [pc, #28]	@ (80015c0 <__NVIC_EnableIRQ+0x38>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	2001      	movs	r0, #1
 80015aa:	fa00 f202 	lsl.w	r2, r0, r2
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000e100 	.word	0xe000e100

080015c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	6039      	str	r1, [r7, #0]
 80015ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	db0a      	blt.n	80015ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	490c      	ldr	r1, [pc, #48]	@ (8001610 <__NVIC_SetPriority+0x4c>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	0152      	lsls	r2, r2, #5
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	440b      	add	r3, r1
 80015e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ec:	e00a      	b.n	8001604 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4908      	ldr	r1, [pc, #32]	@ (8001614 <__NVIC_SetPriority+0x50>)
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	3b04      	subs	r3, #4
 80015fc:	0152      	lsls	r2, r2, #5
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	440b      	add	r3, r1
 8001602:	761a      	strb	r2, [r3, #24]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000e100 	.word	0xe000e100
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	@ 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f1c3 0307 	rsb	r3, r3, #7
 8001632:	2b03      	cmp	r3, #3
 8001634:	bf28      	it	cs
 8001636:	2303      	movcs	r3, #3
 8001638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3303      	adds	r3, #3
 800163e:	2b06      	cmp	r3, #6
 8001640:	d902      	bls.n	8001648 <NVIC_EncodePriority+0x30>
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3b04      	subs	r3, #4
 8001646:	e000      	b.n	800164a <NVIC_EncodePriority+0x32>
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	f04f 32ff 	mov.w	r2, #4294967295
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43da      	mvns	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	401a      	ands	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001660:	f04f 31ff 	mov.w	r1, #4294967295
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	43d9      	mvns	r1, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	4313      	orrs	r3, r2
         );
}
 8001672:	4618      	mov	r0, r3
 8001674:	3724      	adds	r7, #36	@ 0x24
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001690:	d301      	bcc.n	8001696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001692:	2301      	movs	r3, #1
 8001694:	e00f      	b.n	80016b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001696:	4a0a      	ldr	r2, [pc, #40]	@ (80016c0 <SysTick_Config+0x40>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169e:	2107      	movs	r1, #7
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f7ff ff8e 	bl	80015c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a8:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <SysTick_Config+0x40>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ae:	4b04      	ldr	r3, [pc, #16]	@ (80016c0 <SysTick_Config+0x40>)
 80016b0:	2207      	movs	r2, #7
 80016b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	e000e010 	.word	0xe000e010

080016c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ff29 	bl	8001524 <__NVIC_SetPriorityGrouping>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016e8:	f7ff ff40 	bl	800156c <__NVIC_GetPriorityGrouping>
 80016ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	6978      	ldr	r0, [r7, #20]
 80016f4:	f7ff ff90 	bl	8001618 <NVIC_EncodePriority>
 80016f8:	4602      	mov	r2, r0
 80016fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fe:	4611      	mov	r1, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff5f 	bl	80015c4 <__NVIC_SetPriority>
}
 8001706:	bf00      	nop
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff33 	bl	8001588 <__NVIC_EnableIRQ>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ffa4 	bl	8001680 <SysTick_Config>
 8001738:	4603      	mov	r3, r0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001742:	b480      	push	{r7}
 8001744:	b087      	sub	sp, #28
 8001746:	af00      	add	r7, sp, #0
 8001748:	60f8      	str	r0, [r7, #12]
 800174a:	460b      	mov	r3, r1
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001754:	7afb      	ldrb	r3, [r7, #11]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d011      	beq.n	800177e <HAL_EXTI_RegisterCallback+0x3c>
 800175a:	2b02      	cmp	r3, #2
 800175c:	dc13      	bgt.n	8001786 <HAL_EXTI_RegisterCallback+0x44>
 800175e:	2b00      	cmp	r3, #0
 8001760:	d002      	beq.n	8001768 <HAL_EXTI_RegisterCallback+0x26>
 8001762:	2b01      	cmp	r3, #1
 8001764:	d007      	beq.n	8001776 <HAL_EXTI_RegisterCallback+0x34>
 8001766:	e00e      	b.n	8001786 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	609a      	str	r2, [r3, #8]
      break;
 8001774:	e00a      	b.n	800178c <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	605a      	str	r2, [r3, #4]
      break;
 800177c:	e006      	b.n	800178c <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	609a      	str	r2, [r3, #8]
      break;
 8001784:	e002      	b.n	800178c <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	75fb      	strb	r3, [r7, #23]
      break;
 800178a:	bf00      	nop
  }

  return status;
 800178c:	7dfb      	ldrb	r3, [r7, #23]
}
 800178e:	4618      	mov	r0, r3
 8001790:	371c      	adds	r7, #28
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	6039      	str	r1, [r7, #0]
  /* Check null pointer */
  if(hexti == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e003      	b.n	80017b6 <HAL_EXTI_GetHandle+0x1c>

  /* Check parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Store line number as handle private field */
  hexti->Line = ExtiLine;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	0c1b      	lsrs	r3, r3, #16
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 031f 	and.w	r3, r3, #31
 80017e0:	2201      	movs	r2, #1
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	015a      	lsls	r2, r3, #5
 80017ec:	4b17      	ldr	r3, [pc, #92]	@ (800184c <HAL_EXTI_IRQHandler+0x88>)
 80017ee:	4413      	add	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d009      	beq.n	8001816 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->RisingCallback != NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d002      	beq.n	8001816 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	015a      	lsls	r2, r3, #5
 800181a:	4b0d      	ldr	r3, [pc, #52]	@ (8001850 <HAL_EXTI_IRQHandler+0x8c>)
 800181c:	4413      	add	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d009      	beq.n	8001844 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->FallingCallback != NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d002      	beq.n	8001844 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	4798      	blx	r3
    }
  }
}
 8001844:	bf00      	nop
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	4002f40c 	.word	0x4002f40c
 8001850:	4002f410 	.word	0x4002f410

08001854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001854:	b480      	push	{r7}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001862:	e158      	b.n	8001b16 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	2101      	movs	r1, #1
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	fa01 f303 	lsl.w	r3, r1, r3
 8001870:	4013      	ands	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 814a 	beq.w	8001b10 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	2b01      	cmp	r3, #1
 8001886:	d005      	beq.n	8001894 <HAL_GPIO_Init+0x40>
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d130      	bne.n	80018f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4013      	ands	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ca:	2201      	movs	r2, #1
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	091b      	lsrs	r3, r3, #4
 80018e0:	f003 0201 	and.w	r2, r3, #1
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d017      	beq.n	8001932 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	2203      	movs	r2, #3
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d123      	bne.n	8001986 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	08da      	lsrs	r2, r3, #3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3208      	adds	r2, #8
 8001946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800194a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	220f      	movs	r2, #15
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	691a      	ldr	r2, [r3, #16]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	08da      	lsrs	r2, r3, #3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3208      	adds	r2, #8
 8001980:	6939      	ldr	r1, [r7, #16]
 8001982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	2203      	movs	r2, #3
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 0203 	and.w	r2, r3, #3
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 80a4 	beq.w	8001b10 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80019c8:	4a5a      	ldr	r2, [pc, #360]	@ (8001b34 <HAL_GPIO_Init+0x2e0>)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	089b      	lsrs	r3, r3, #2
 80019ce:	3318      	adds	r3, #24
 80019d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f003 0303 	and.w	r3, r3, #3
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	220f      	movs	r2, #15
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a52      	ldr	r2, [pc, #328]	@ (8001b38 <HAL_GPIO_Init+0x2e4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d025      	beq.n	8001a40 <HAL_GPIO_Init+0x1ec>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a51      	ldr	r2, [pc, #324]	@ (8001b3c <HAL_GPIO_Init+0x2e8>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d01f      	beq.n	8001a3c <HAL_GPIO_Init+0x1e8>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a50      	ldr	r2, [pc, #320]	@ (8001b40 <HAL_GPIO_Init+0x2ec>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d019      	beq.n	8001a38 <HAL_GPIO_Init+0x1e4>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a4f      	ldr	r2, [pc, #316]	@ (8001b44 <HAL_GPIO_Init+0x2f0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d013      	beq.n	8001a34 <HAL_GPIO_Init+0x1e0>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a4e      	ldr	r2, [pc, #312]	@ (8001b48 <HAL_GPIO_Init+0x2f4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d00d      	beq.n	8001a30 <HAL_GPIO_Init+0x1dc>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a4d      	ldr	r2, [pc, #308]	@ (8001b4c <HAL_GPIO_Init+0x2f8>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d007      	beq.n	8001a2c <HAL_GPIO_Init+0x1d8>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a4c      	ldr	r2, [pc, #304]	@ (8001b50 <HAL_GPIO_Init+0x2fc>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d101      	bne.n	8001a28 <HAL_GPIO_Init+0x1d4>
 8001a24:	2306      	movs	r3, #6
 8001a26:	e00c      	b.n	8001a42 <HAL_GPIO_Init+0x1ee>
 8001a28:	2307      	movs	r3, #7
 8001a2a:	e00a      	b.n	8001a42 <HAL_GPIO_Init+0x1ee>
 8001a2c:	2305      	movs	r3, #5
 8001a2e:	e008      	b.n	8001a42 <HAL_GPIO_Init+0x1ee>
 8001a30:	2304      	movs	r3, #4
 8001a32:	e006      	b.n	8001a42 <HAL_GPIO_Init+0x1ee>
 8001a34:	2303      	movs	r3, #3
 8001a36:	e004      	b.n	8001a42 <HAL_GPIO_Init+0x1ee>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e002      	b.n	8001a42 <HAL_GPIO_Init+0x1ee>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <HAL_GPIO_Init+0x1ee>
 8001a40:	2300      	movs	r3, #0
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	f002 0203 	and.w	r2, r2, #3
 8001a48:	00d2      	lsls	r2, r2, #3
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8001a52:	4938      	ldr	r1, [pc, #224]	@ (8001b34 <HAL_GPIO_Init+0x2e0>)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3318      	adds	r3, #24
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a60:	4b34      	ldr	r3, [pc, #208]	@ (8001b34 <HAL_GPIO_Init+0x2e0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a84:	4a2b      	ldr	r2, [pc, #172]	@ (8001b34 <HAL_GPIO_Init+0x2e0>)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b34 <HAL_GPIO_Init+0x2e0>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aae:	4a21      	ldr	r2, [pc, #132]	@ (8001b34 <HAL_GPIO_Init+0x2e0>)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b34 <HAL_GPIO_Init+0x2e0>)
 8001ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ada:	4a16      	ldr	r2, [pc, #88]	@ (8001b34 <HAL_GPIO_Init+0x2e0>)
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8001ae2:	4b14      	ldr	r3, [pc, #80]	@ (8001b34 <HAL_GPIO_Init+0x2e0>)
 8001ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b08:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <HAL_GPIO_Init+0x2e0>)
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	3301      	adds	r3, #1
 8001b14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f47f ae9f 	bne.w	8001864 <HAL_GPIO_Init+0x10>
  }
}
 8001b26:	bf00      	nop
 8001b28:	bf00      	nop
 8001b2a:	371c      	adds	r7, #28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	4002f400 	.word	0x4002f400
 8001b38:	42020000 	.word	0x42020000
 8001b3c:	42020400 	.word	0x42020400
 8001b40:	42020800 	.word	0x42020800
 8001b44:	42020c00 	.word	0x42020c00
 8001b48:	42021000 	.word	0x42021000
 8001b4c:	42021400 	.word	0x42021400
 8001b50:	42021800 	.word	0x42021800

08001b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	807b      	strh	r3, [r7, #2]
 8001b60:	4613      	mov	r3, r2
 8001b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b64:	787b      	ldrb	r3, [r7, #1]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b6a:	887a      	ldrh	r2, [r7, #2]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b70:	e002      	b.n	8001b78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b72:	887a      	ldrh	r2, [r7, #2]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b96:	887a      	ldrh	r2, [r7, #2]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	041a      	lsls	r2, r3, #16
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	43d9      	mvns	r1, r3
 8001ba2:	887b      	ldrh	r3, [r7, #2]
 8001ba4:	400b      	ands	r3, r1
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	619a      	str	r2, [r3, #24]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
 8001bd4:	e007      	b.n	8001be6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001bd6:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 0204 	bic.w	r2, r3, #4
 8001bde:	4905      	ldr	r1, [pc, #20]	@ (8001bf4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	40030400 	.word	0x40030400

08001bf8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001bfc:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <HAL_ICACHE_Enable+0x1c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a04      	ldr	r2, [pc, #16]	@ (8001c14 <HAL_ICACHE_Enable+0x1c>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	40030400 	.word	0x40030400

08001c18 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001c1c:	4b04      	ldr	r3, [pc, #16]	@ (8001c30 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40007000 	.word	0x40007000

08001c34 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8001c3c:	4b27      	ldr	r3, [pc, #156]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c44:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8001c46:	f000 f871 	bl	8001d2c <HAL_PWREx_SMPS_GetEffectiveMode>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c50:	d101      	bne.n	8001c56 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e03e      	b.n	8001cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8001c56:	4b21      	ldr	r3, [pc, #132]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c62:	d101      	bne.n	8001c68 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e035      	b.n	8001cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d101      	bne.n	8001c74 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	e02f      	b.n	8001cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001c74:	4b19      	ldr	r3, [pc, #100]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8001c7c:	4917      	ldr	r1, [pc, #92]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8001c84:	4b16      	ldr	r3, [pc, #88]	@ (8001ce0 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	095b      	lsrs	r3, r3, #5
 8001c8a:	4a16      	ldr	r2, [pc, #88]	@ (8001ce4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c90:	09db      	lsrs	r3, r3, #7
 8001c92:	2232      	movs	r2, #50	@ 0x32
 8001c94:	fb02 f303 	mul.w	r3, r2, r3
 8001c98:	4a13      	ldr	r2, [pc, #76]	@ (8001ce8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9e:	08db      	lsrs	r3, r3, #3
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ca4:	e002      	b.n	8001cac <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cac:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cb8:	d102      	bne.n	8001cc0 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1f2      	bne.n	8001ca6 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cc0:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ccc:	d101      	bne.n	8001cd2 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e000      	b.n	8001cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40007000 	.word	0x40007000
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	0a7c5ac5 	.word	0x0a7c5ac5
 8001ce8:	cccccccd 	.word	0xcccccccd

08001cec <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001cf0:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	4a04      	ldr	r2, [pc, #16]	@ (8001d08 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001cf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cfa:	6053      	str	r3, [r2, #4]
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40007000 	.word	0x40007000

08001d0c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d10:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	4a04      	ldr	r2, [pc, #16]	@ (8001d28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d1a:	6093      	str	r3, [r2, #8]
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40007000 	.word	0x40007000

08001d2c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8001d32:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8001d42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	e00a      	b.n	8001d60 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d103      	bne.n	8001d5c <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8001d54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	e001      	b.n	8001d60 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8001d60:	687b      	ldr	r3, [r7, #4]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40007000 	.word	0x40007000

08001d74 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d102      	bne.n	8001d88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	f000 bcc2 	b.w	800270c <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d88:	4b99      	ldr	r3, [pc, #612]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 030c 	and.w	r3, r3, #12
 8001d90:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d92:	4b97      	ldr	r3, [pc, #604]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0310 	and.w	r3, r3, #16
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80e9 	beq.w	8001f7c <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d006      	beq.n	8001dbe <HAL_RCC_OscConfig+0x4a>
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	2b0c      	cmp	r3, #12
 8001db4:	f040 8083 	bne.w	8001ebe <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d17f      	bne.n	8001ebe <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dbe:	4b8c      	ldr	r3, [pc, #560]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d006      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x64>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d102      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	f000 bc9a 	b.w	800270c <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ddc:	4b84      	ldr	r3, [pc, #528]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d004      	beq.n	8001df2 <HAL_RCC_OscConfig+0x7e>
 8001de8:	4b81      	ldr	r3, [pc, #516]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001df0:	e005      	b.n	8001dfe <HAL_RCC_OscConfig+0x8a>
 8001df2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001df8:	091b      	lsrs	r3, r3, #4
 8001dfa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d224      	bcs.n	8001e4c <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 fe9c 	bl	8002b44 <RCC_SetFlashLatencyFromMSIRange>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	f000 bc7a 	b.w	800270c <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e18:	4b75      	ldr	r3, [pc, #468]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a74      	ldr	r2, [pc, #464]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001e1e:	f043 0308 	orr.w	r3, r3, #8
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	4b72      	ldr	r3, [pc, #456]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e30:	496f      	ldr	r1, [pc, #444]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e36:	4b6e      	ldr	r3, [pc, #440]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	021b      	lsls	r3, r3, #8
 8001e44:	496a      	ldr	r1, [pc, #424]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	604b      	str	r3, [r1, #4]
 8001e4a:	e026      	b.n	8001e9a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e4c:	4b68      	ldr	r3, [pc, #416]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a67      	ldr	r2, [pc, #412]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001e52:	f043 0308 	orr.w	r3, r3, #8
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	4b65      	ldr	r3, [pc, #404]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e64:	4962      	ldr	r1, [pc, #392]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e6a:	4b61      	ldr	r3, [pc, #388]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	021b      	lsls	r3, r3, #8
 8001e78:	495d      	ldr	r1, [pc, #372]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10a      	bne.n	8001e9a <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 fe5b 	bl	8002b44 <RCC_SetFlashLatencyFromMSIRange>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	f000 bc39 	b.w	800270c <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001e9a:	f000 fe17 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4a54      	ldr	r2, [pc, #336]	@ (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001ea2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ea4:	4b54      	ldr	r3, [pc, #336]	@ (8001ff8 <HAL_RCC_OscConfig+0x284>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fabb 	bl	8001424 <HAL_InitTick>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d060      	beq.n	8001f7a <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
 8001eba:	f000 bc27 	b.w	800270c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d039      	beq.n	8001f3a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a49      	ldr	r2, [pc, #292]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ed2:	f7ff faf7 	bl	80014c4 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ed8:	e00f      	b.n	8001efa <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001eda:	f7ff faf3 	bl	80014c4 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d908      	bls.n	8001efa <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ee8:	4b41      	ldr	r3, [pc, #260]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d102      	bne.n	8001efa <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	f000 bc09 	b.w	800270c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001efa:	4b3d      	ldr	r3, [pc, #244]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0e9      	beq.n	8001eda <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f06:	4b3a      	ldr	r3, [pc, #232]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a39      	ldr	r2, [pc, #228]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001f0c:	f043 0308 	orr.w	r3, r3, #8
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	4b37      	ldr	r3, [pc, #220]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1e:	4934      	ldr	r1, [pc, #208]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f24:	4b32      	ldr	r3, [pc, #200]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	492f      	ldr	r1, [pc, #188]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
 8001f38:	e020      	b.n	8001f7c <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a2c      	ldr	r2, [pc, #176]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001f40:	f023 0301 	bic.w	r3, r3, #1
 8001f44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f46:	f7ff fabd 	bl	80014c4 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f4c:	e00e      	b.n	8001f6c <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f4e:	f7ff fab9 	bl	80014c4 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d907      	bls.n	8001f6c <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f5c:	4b24      	ldr	r3, [pc, #144]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e3cf      	b.n	800270c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f6c:	4b20      	ldr	r3, [pc, #128]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1ea      	bne.n	8001f4e <HAL_RCC_OscConfig+0x1da>
 8001f78:	e000      	b.n	8001f7c <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f7a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d07e      	beq.n	8002086 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d005      	beq.n	8001f9a <HAL_RCC_OscConfig+0x226>
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	2b0c      	cmp	r3, #12
 8001f92:	d10e      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	d10b      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d06e      	beq.n	8002084 <HAL_RCC_OscConfig+0x310>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d16a      	bne.n	8002084 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e3ac      	b.n	800270c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fba:	d106      	bne.n	8001fca <HAL_RCC_OscConfig+0x256>
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001fc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	e024      	b.n	8002014 <HAL_RCC_OscConfig+0x2a0>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fd2:	d113      	bne.n	8001ffc <HAL_RCC_OscConfig+0x288>
 8001fd4:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a05      	ldr	r2, [pc, #20]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001fda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	4b03      	ldr	r3, [pc, #12]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a02      	ldr	r2, [pc, #8]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001fe6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	e012      	b.n	8002014 <HAL_RCC_OscConfig+0x2a0>
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	2000002c 	.word	0x2000002c
 8001ffc:	4b8b      	ldr	r3, [pc, #556]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a8a      	ldr	r2, [pc, #552]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 8002002:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	4b88      	ldr	r3, [pc, #544]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a87      	ldr	r2, [pc, #540]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 800200e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d019      	beq.n	8002050 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7ff fa52 	bl	80014c4 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002022:	e00e      	b.n	8002042 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002024:	f7ff fa4e 	bl	80014c4 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	@ 0x64
 8002030:	d907      	bls.n	8002042 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002032:	4b7e      	ldr	r3, [pc, #504]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e364      	b.n	800270c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002042:	4b7a      	ldr	r3, [pc, #488]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0ea      	beq.n	8002024 <HAL_RCC_OscConfig+0x2b0>
 800204e:	e01a      	b.n	8002086 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7ff fa38 	bl	80014c4 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002056:	e00e      	b.n	8002076 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002058:	f7ff fa34 	bl	80014c4 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	@ 0x64
 8002064:	d907      	bls.n	8002076 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002066:	4b71      	ldr	r3, [pc, #452]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e34a      	b.n	800270c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002076:	4b6d      	ldr	r3, [pc, #436]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1ea      	bne.n	8002058 <HAL_RCC_OscConfig+0x2e4>
 8002082:	e000      	b.n	8002086 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d06c      	beq.n	800216c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	2b04      	cmp	r3, #4
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_OscConfig+0x330>
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	2b0c      	cmp	r3, #12
 800209c:	d119      	bne.n	80020d2 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d116      	bne.n	80020d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020a4:	4b61      	ldr	r3, [pc, #388]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_OscConfig+0x348>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e327      	b.n	800270c <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020bc:	4b5b      	ldr	r3, [pc, #364]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	061b      	lsls	r3, r3, #24
 80020ca:	4958      	ldr	r1, [pc, #352]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020d0:	e04c      	b.n	800216c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d029      	beq.n	800212e <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020da:	4b54      	ldr	r3, [pc, #336]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a53      	ldr	r2, [pc, #332]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 80020e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e6:	f7ff f9ed 	bl	80014c4 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ec:	e00e      	b.n	800210c <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ee:	f7ff f9e9 	bl	80014c4 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d907      	bls.n	800210c <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020fc:	4b4b      	ldr	r3, [pc, #300]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e2ff      	b.n	800270c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800210c:	4b47      	ldr	r3, [pc, #284]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0ea      	beq.n	80020ee <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002118:	4b44      	ldr	r3, [pc, #272]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	061b      	lsls	r3, r3, #24
 8002126:	4941      	ldr	r1, [pc, #260]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 8002128:	4313      	orrs	r3, r2
 800212a:	604b      	str	r3, [r1, #4]
 800212c:	e01e      	b.n	800216c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800212e:	4b3f      	ldr	r3, [pc, #252]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a3e      	ldr	r2, [pc, #248]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 8002134:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213a:	f7ff f9c3 	bl	80014c4 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002140:	e00e      	b.n	8002160 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002142:	f7ff f9bf 	bl	80014c4 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d907      	bls.n	8002160 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002150:	4b36      	ldr	r3, [pc, #216]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e2d5      	b.n	800270c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002160:	4b32      	ldr	r3, [pc, #200]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1ea      	bne.n	8002142 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d062      	beq.n	800223e <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d038      	beq.n	80021f2 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d108      	bne.n	800219a <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002188:	4b28      	ldr	r3, [pc, #160]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 800218a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800218e:	4a27      	ldr	r2, [pc, #156]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 8002190:	f023 0310 	bic.w	r3, r3, #16
 8002194:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002198:	e007      	b.n	80021aa <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800219a:	4b24      	ldr	r3, [pc, #144]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 800219c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021a0:	4a22      	ldr	r2, [pc, #136]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 80021a2:	f043 0310 	orr.w	r3, r3, #16
 80021a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021aa:	4b20      	ldr	r3, [pc, #128]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 80021ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021b0:	4a1e      	ldr	r2, [pc, #120]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ba:	f7ff f983 	bl	80014c4 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021c0:	e00f      	b.n	80021e2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c2:	f7ff f97f 	bl	80014c4 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b07      	cmp	r3, #7
 80021ce:	d908      	bls.n	80021e2 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021d0:	4b16      	ldr	r3, [pc, #88]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 80021d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e294      	b.n	800270c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021e2:	4b12      	ldr	r3, [pc, #72]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 80021e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0e8      	beq.n	80021c2 <HAL_RCC_OscConfig+0x44e>
 80021f0:	e025      	b.n	800223e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f2:	4b0e      	ldr	r3, [pc, #56]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 80021f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021f8:	4a0c      	ldr	r2, [pc, #48]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 80021fa:	f023 0301 	bic.w	r3, r3, #1
 80021fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002202:	f7ff f95f 	bl	80014c4 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002208:	e012      	b.n	8002230 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800220a:	f7ff f95b 	bl	80014c4 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b07      	cmp	r3, #7
 8002216:	d90b      	bls.n	8002230 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002218:	4b04      	ldr	r3, [pc, #16]	@ (800222c <HAL_RCC_OscConfig+0x4b8>)
 800221a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d004      	beq.n	8002230 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e270      	b.n	800270c <HAL_RCC_OscConfig+0x998>
 800222a:	bf00      	nop
 800222c:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002230:	4ba8      	ldr	r3, [pc, #672]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 8002232:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1e5      	bne.n	800220a <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 812d 	beq.w	80024a6 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 800224c:	2300      	movs	r3, #0
 800224e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002250:	4ba0      	ldr	r3, [pc, #640]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002254:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10d      	bne.n	8002278 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800225c:	4b9d      	ldr	r3, [pc, #628]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 800225e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002260:	4a9c      	ldr	r2, [pc, #624]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 8002262:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002266:	6593      	str	r3, [r2, #88]	@ 0x58
 8002268:	4b9a      	ldr	r3, [pc, #616]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002274:	2301      	movs	r3, #1
 8002276:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002278:	4b97      	ldr	r3, [pc, #604]	@ (80024d8 <HAL_RCC_OscConfig+0x764>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d11e      	bne.n	80022c2 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002284:	4b94      	ldr	r3, [pc, #592]	@ (80024d8 <HAL_RCC_OscConfig+0x764>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a93      	ldr	r2, [pc, #588]	@ (80024d8 <HAL_RCC_OscConfig+0x764>)
 800228a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800228e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002290:	f7ff f918 	bl	80014c4 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002296:	e00e      	b.n	80022b6 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002298:	f7ff f914 	bl	80014c4 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d907      	bls.n	80022b6 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a6:	4b8c      	ldr	r3, [pc, #560]	@ (80024d8 <HAL_RCC_OscConfig+0x764>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e22a      	b.n	800270c <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b6:	4b88      	ldr	r3, [pc, #544]	@ (80024d8 <HAL_RCC_OscConfig+0x764>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0ea      	beq.n	8002298 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d01f      	beq.n	800230e <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d010      	beq.n	80022fc <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80022da:	4b7e      	ldr	r3, [pc, #504]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e0:	4a7c      	ldr	r2, [pc, #496]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 80022e2:	f043 0304 	orr.w	r3, r3, #4
 80022e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80022ea:	4b7a      	ldr	r3, [pc, #488]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 80022ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022f0:	4a78      	ldr	r2, [pc, #480]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022fa:	e018      	b.n	800232e <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80022fc:	4b75      	ldr	r3, [pc, #468]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 80022fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002302:	4a74      	ldr	r2, [pc, #464]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800230c:	e00f      	b.n	800232e <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800230e:	4b71      	ldr	r3, [pc, #452]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 8002310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002314:	4a6f      	ldr	r2, [pc, #444]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 8002316:	f023 0301 	bic.w	r3, r3, #1
 800231a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800231e:	4b6d      	ldr	r3, [pc, #436]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002324:	4a6b      	ldr	r2, [pc, #428]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 8002326:	f023 0304 	bic.w	r3, r3, #4
 800232a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d068      	beq.n	8002408 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002336:	f7ff f8c5 	bl	80014c4 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800233c:	e011      	b.n	8002362 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233e:	f7ff f8c1 	bl	80014c4 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	f241 3288 	movw	r2, #5000	@ 0x1388
 800234c:	4293      	cmp	r3, r2
 800234e:	d908      	bls.n	8002362 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002350:	4b60      	ldr	r3, [pc, #384]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 8002352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e1d4      	b.n	800270c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002362:	4b5c      	ldr	r3, [pc, #368]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 8002364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0e6      	beq.n	800233e <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002378:	2b00      	cmp	r3, #0
 800237a:	d022      	beq.n	80023c2 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800237c:	4b55      	ldr	r3, [pc, #340]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002382:	4a54      	ldr	r2, [pc, #336]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 8002384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002388:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800238c:	e011      	b.n	80023b2 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238e:	f7ff f899 	bl	80014c4 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	f241 3288 	movw	r2, #5000	@ 0x1388
 800239c:	4293      	cmp	r3, r2
 800239e:	d908      	bls.n	80023b2 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80023a0:	4b4c      	ldr	r3, [pc, #304]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 80023a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e1ac      	b.n	800270c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80023b2:	4b48      	ldr	r3, [pc, #288]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 80023b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0e6      	beq.n	800238e <HAL_RCC_OscConfig+0x61a>
 80023c0:	e068      	b.n	8002494 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80023c2:	4b44      	ldr	r3, [pc, #272]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 80023c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c8:	4a42      	ldr	r2, [pc, #264]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 80023ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80023d2:	e011      	b.n	80023f8 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d4:	f7ff f876 	bl	80014c4 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d908      	bls.n	80023f8 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80023e6:	4b3b      	ldr	r3, [pc, #236]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 80023e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e189      	b.n	800270c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80023f8:	4b36      	ldr	r3, [pc, #216]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 80023fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1e6      	bne.n	80023d4 <HAL_RCC_OscConfig+0x660>
 8002406:	e045      	b.n	8002494 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002408:	f7ff f85c 	bl	80014c4 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800240e:	e011      	b.n	8002434 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002410:	f7ff f858 	bl	80014c4 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d908      	bls.n	8002434 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002422:	4b2c      	ldr	r3, [pc, #176]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 8002424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e16b      	b.n	800270c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002434:	4b27      	ldr	r3, [pc, #156]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 8002436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1e6      	bne.n	8002410 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002442:	4b24      	ldr	r3, [pc, #144]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 8002444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800244c:	2b00      	cmp	r3, #0
 800244e:	d021      	beq.n	8002494 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002450:	4b20      	ldr	r3, [pc, #128]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 8002452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002456:	4a1f      	ldr	r2, [pc, #124]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 8002458:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800245c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002460:	e011      	b.n	8002486 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7ff f82f 	bl	80014c4 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d908      	bls.n	8002486 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002474:	4b17      	ldr	r3, [pc, #92]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800247a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e142      	b.n	800270c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002486:	4b13      	ldr	r3, [pc, #76]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 8002488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800248c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1e6      	bne.n	8002462 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002494:	7ffb      	ldrb	r3, [r7, #31]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d105      	bne.n	80024a6 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800249a:	4b0e      	ldr	r3, [pc, #56]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249e:	4a0d      	ldr	r2, [pc, #52]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 80024a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0320 	and.w	r3, r3, #32
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d04f      	beq.n	8002552 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d028      	beq.n	800250c <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024ba:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 80024bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024c0:	4a04      	ldr	r2, [pc, #16]	@ (80024d4 <HAL_RCC_OscConfig+0x760>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ca:	f7fe fffb 	bl	80014c4 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024d0:	e014      	b.n	80024fc <HAL_RCC_OscConfig+0x788>
 80024d2:	bf00      	nop
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024dc:	f7fe fff2 	bl	80014c4 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d908      	bls.n	80024fc <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024ea:	4b8a      	ldr	r3, [pc, #552]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 80024ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e107      	b.n	800270c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024fc:	4b85      	ldr	r3, [pc, #532]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 80024fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0e8      	beq.n	80024dc <HAL_RCC_OscConfig+0x768>
 800250a:	e022      	b.n	8002552 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800250c:	4b81      	ldr	r3, [pc, #516]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 800250e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002512:	4a80      	ldr	r2, [pc, #512]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251c:	f7fe ffd2 	bl	80014c4 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002522:	e00f      	b.n	8002544 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002524:	f7fe ffce 	bl	80014c4 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d908      	bls.n	8002544 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002532:	4b78      	ldr	r3, [pc, #480]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 8002534:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e0e3      	b.n	800270c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002544:	4b73      	ldr	r3, [pc, #460]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 8002546:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1e8      	bne.n	8002524 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 80d7 	beq.w	800270a <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800255c:	4b6d      	ldr	r3, [pc, #436]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 030c 	and.w	r3, r3, #12
 8002564:	2b0c      	cmp	r3, #12
 8002566:	f000 8091 	beq.w	800268c <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256e:	2b02      	cmp	r3, #2
 8002570:	d166      	bne.n	8002640 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002572:	4b68      	ldr	r3, [pc, #416]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a67      	ldr	r2, [pc, #412]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 8002578:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800257c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257e:	f7fe ffa1 	bl	80014c4 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002584:	e00e      	b.n	80025a4 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002586:	f7fe ff9d 	bl	80014c4 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d907      	bls.n	80025a4 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002594:	4b5f      	ldr	r3, [pc, #380]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0b3      	b.n	800270c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a4:	4b5b      	ldr	r3, [pc, #364]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1ea      	bne.n	8002586 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025b0:	4b58      	ldr	r3, [pc, #352]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	4b58      	ldr	r3, [pc, #352]	@ (8002718 <HAL_RCC_OscConfig+0x9a4>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80025c0:	3a01      	subs	r2, #1
 80025c2:	0112      	lsls	r2, r2, #4
 80025c4:	4311      	orrs	r1, r2
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80025ca:	0212      	lsls	r2, r2, #8
 80025cc:	4311      	orrs	r1, r2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80025d2:	0852      	lsrs	r2, r2, #1
 80025d4:	3a01      	subs	r2, #1
 80025d6:	0552      	lsls	r2, r2, #21
 80025d8:	4311      	orrs	r1, r2
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80025de:	0852      	lsrs	r2, r2, #1
 80025e0:	3a01      	subs	r2, #1
 80025e2:	0652      	lsls	r2, r2, #25
 80025e4:	4311      	orrs	r1, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025ea:	06d2      	lsls	r2, r2, #27
 80025ec:	430a      	orrs	r2, r1
 80025ee:	4949      	ldr	r1, [pc, #292]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f4:	4b47      	ldr	r3, [pc, #284]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a46      	ldr	r2, [pc, #280]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 80025fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002600:	4b44      	ldr	r3, [pc, #272]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4a43      	ldr	r2, [pc, #268]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 8002606:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800260a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7fe ff5a 	bl	80014c4 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002612:	e00e      	b.n	8002632 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002614:	f7fe ff56 	bl	80014c4 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d907      	bls.n	8002632 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002622:	4b3c      	ldr	r3, [pc, #240]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e06c      	b.n	800270c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002632:	4b38      	ldr	r3, [pc, #224]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0ea      	beq.n	8002614 <HAL_RCC_OscConfig+0x8a0>
 800263e:	e064      	b.n	800270a <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002640:	4b34      	ldr	r3, [pc, #208]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a33      	ldr	r2, [pc, #204]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 8002646:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800264a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fe ff3a 	bl	80014c4 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002652:	e00e      	b.n	8002672 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002654:	f7fe ff36 	bl	80014c4 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d907      	bls.n	8002672 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002662:	4b2c      	ldr	r3, [pc, #176]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e04c      	b.n	800270c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002672:	4b28      	ldr	r3, [pc, #160]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1ea      	bne.n	8002654 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800267e:	4b25      	ldr	r3, [pc, #148]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	4924      	ldr	r1, [pc, #144]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 8002684:	4b25      	ldr	r3, [pc, #148]	@ (800271c <HAL_RCC_OscConfig+0x9a8>)
 8002686:	4013      	ands	r3, r2
 8002688:	60cb      	str	r3, [r1, #12]
 800268a:	e03e      	b.n	800270a <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e039      	b.n	800270c <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002698:	4b1e      	ldr	r3, [pc, #120]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f003 0203 	and.w	r2, r3, #3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d12c      	bne.n	8002706 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026b6:	3b01      	subs	r3, #1
 80026b8:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d123      	bne.n	8002706 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c8:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d11b      	bne.n	8002706 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d8:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d113      	bne.n	8002706 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e8:	085b      	lsrs	r3, r3, #1
 80026ea:	3b01      	subs	r3, #1
 80026ec:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d109      	bne.n	8002706 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fc:	085b      	lsrs	r3, r3, #1
 80026fe:	3b01      	subs	r3, #1
 8002700:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002702:	429a      	cmp	r2, r3
 8002704:	d001      	beq.n	800270a <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3720      	adds	r7, #32
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000
 8002718:	019f800c 	.word	0x019f800c
 800271c:	feeefffc 	.word	0xfeeefffc

08002720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e11c      	b.n	8002972 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002738:	4b90      	ldr	r3, [pc, #576]	@ (800297c <HAL_RCC_ClockConfig+0x25c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 030f 	and.w	r3, r3, #15
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d910      	bls.n	8002768 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002746:	4b8d      	ldr	r3, [pc, #564]	@ (800297c <HAL_RCC_ClockConfig+0x25c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 020f 	bic.w	r2, r3, #15
 800274e:	498b      	ldr	r1, [pc, #556]	@ (800297c <HAL_RCC_ClockConfig+0x25c>)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b89      	ldr	r3, [pc, #548]	@ (800297c <HAL_RCC_ClockConfig+0x25c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e104      	b.n	8002972 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d010      	beq.n	8002796 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	4b81      	ldr	r3, [pc, #516]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002780:	429a      	cmp	r2, r3
 8002782:	d908      	bls.n	8002796 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002784:	4b7e      	ldr	r3, [pc, #504]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	497b      	ldr	r1, [pc, #492]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8085 	beq.w	80028ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d11f      	bne.n	80027ec <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ac:	4b74      	ldr	r3, [pc, #464]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0da      	b.n	8002972 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80027bc:	f000 fa26 	bl	8002c0c <RCC_GetSysClockFreqFromPLLSource>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4a6f      	ldr	r2, [pc, #444]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d947      	bls.n	800285a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80027ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d141      	bne.n	800285a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027d6:	4b6a      	ldr	r3, [pc, #424]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027de:	4a68      	ldr	r2, [pc, #416]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 80027e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80027e6:	2380      	movs	r3, #128	@ 0x80
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	e036      	b.n	800285a <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d107      	bne.n	8002804 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027f4:	4b62      	ldr	r3, [pc, #392]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d115      	bne.n	800282c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0b6      	b.n	8002972 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d107      	bne.n	800281c <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800280c:	4b5c      	ldr	r3, [pc, #368]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d109      	bne.n	800282c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0aa      	b.n	8002972 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800281c:	4b58      	ldr	r3, [pc, #352]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0a2      	b.n	8002972 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800282c:	f000 f8b0 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 8002830:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4a53      	ldr	r2, [pc, #332]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d90f      	bls.n	800285a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800283a:	4b51      	ldr	r3, [pc, #324]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d109      	bne.n	800285a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002846:	4b4e      	ldr	r3, [pc, #312]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800284e:	4a4c      	ldr	r2, [pc, #304]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 8002850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002854:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002856:	2380      	movs	r3, #128	@ 0x80
 8002858:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800285a:	4b49      	ldr	r3, [pc, #292]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f023 0203 	bic.w	r2, r3, #3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	4946      	ldr	r1, [pc, #280]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 8002868:	4313      	orrs	r3, r2
 800286a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800286c:	f7fe fe2a 	bl	80014c4 <HAL_GetTick>
 8002870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002872:	e013      	b.n	800289c <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002874:	f7fe fe26 	bl	80014c4 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002882:	4293      	cmp	r3, r2
 8002884:	d90a      	bls.n	800289c <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002886:	4b3e      	ldr	r3, [pc, #248]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 020c 	and.w	r2, r3, #12
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e06a      	b.n	8002972 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289c:	4b38      	ldr	r3, [pc, #224]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 020c 	and.w	r2, r3, #12
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d1e2      	bne.n	8002874 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2b80      	cmp	r3, #128	@ 0x80
 80028b2:	d105      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80028b4:	4b32      	ldr	r3, [pc, #200]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	4a31      	ldr	r2, [pc, #196]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 80028ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028be:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d010      	beq.n	80028ee <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028d8:	429a      	cmp	r2, r3
 80028da:	d208      	bcs.n	80028ee <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028dc:	4b28      	ldr	r3, [pc, #160]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	4925      	ldr	r1, [pc, #148]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028ee:	4b23      	ldr	r3, [pc, #140]	@ (800297c <HAL_RCC_ClockConfig+0x25c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d210      	bcs.n	800291e <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fc:	4b1f      	ldr	r3, [pc, #124]	@ (800297c <HAL_RCC_ClockConfig+0x25c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f023 020f 	bic.w	r2, r3, #15
 8002904:	491d      	ldr	r1, [pc, #116]	@ (800297c <HAL_RCC_ClockConfig+0x25c>)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	4313      	orrs	r3, r2
 800290a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800290c:	4b1b      	ldr	r3, [pc, #108]	@ (800297c <HAL_RCC_ClockConfig+0x25c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d001      	beq.n	800291e <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e029      	b.n	8002972 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b00      	cmp	r3, #0
 8002928:	d008      	beq.n	800293c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800292a:	4b15      	ldr	r3, [pc, #84]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	4912      	ldr	r1, [pc, #72]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 8002938:	4313      	orrs	r3, r2
 800293a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d009      	beq.n	800295c <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002948:	4b0d      	ldr	r3, [pc, #52]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	490a      	ldr	r1, [pc, #40]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 8002958:	4313      	orrs	r3, r2
 800295a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800295c:	f000 f8b6 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 8002960:	4603      	mov	r3, r0
 8002962:	4a09      	ldr	r2, [pc, #36]	@ (8002988 <HAL_RCC_ClockConfig+0x268>)
 8002964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002966:	4b09      	ldr	r3, [pc, #36]	@ (800298c <HAL_RCC_ClockConfig+0x26c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe fd5a 	bl	8001424 <HAL_InitTick>
 8002970:	4603      	mov	r3, r0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40022000 	.word	0x40022000
 8002980:	40021000 	.word	0x40021000
 8002984:	04c4b400 	.word	0x04c4b400
 8002988:	20000000 	.word	0x20000000
 800298c:	2000002c 	.word	0x2000002c

08002990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002990:	b480      	push	{r7}
 8002992:	b089      	sub	sp, #36	@ 0x24
 8002994:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	2300      	movs	r3, #0
 800299c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800299e:	4b47      	ldr	r3, [pc, #284]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x12c>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029a8:	4b44      	ldr	r3, [pc, #272]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x12c>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x34>
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	2b0c      	cmp	r3, #12
 80029bc:	d121      	bne.n	8002a02 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d11e      	bne.n	8002a02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029c4:	4b3d      	ldr	r3, [pc, #244]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x12c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d107      	bne.n	80029e0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029d0:	4b3a      	ldr	r3, [pc, #232]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x12c>)
 80029d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029d6:	0a1b      	lsrs	r3, r3, #8
 80029d8:	f003 030f 	and.w	r3, r3, #15
 80029dc:	61fb      	str	r3, [r7, #28]
 80029de:	e005      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029e0:	4b36      	ldr	r3, [pc, #216]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x12c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80029ec:	4a34      	ldr	r2, [pc, #208]	@ (8002ac0 <HAL_RCC_GetSysClockFreq+0x130>)
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f4:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10d      	bne.n	8002a18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a00:	e00a      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d102      	bne.n	8002a0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a08:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac4 <HAL_RCC_GetSysClockFreq+0x134>)
 8002a0a:	61bb      	str	r3, [r7, #24]
 8002a0c:	e004      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a14:	4b2c      	ldr	r3, [pc, #176]	@ (8002ac8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	2b0c      	cmp	r3, #12
 8002a1c:	d146      	bne.n	8002aac <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002a1e:	4b27      	ldr	r3, [pc, #156]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x12c>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a28:	4b24      	ldr	r3, [pc, #144]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x12c>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	3301      	adds	r3, #1
 8002a34:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d003      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0xb4>
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d00d      	beq.n	8002a5e <HAL_RCC_GetSysClockFreq+0xce>
 8002a42:	e019      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a44:	4a1f      	ldr	r2, [pc, #124]	@ (8002ac4 <HAL_RCC_GetSysClockFreq+0x134>)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x12c>)
 8002a4e:	68d2      	ldr	r2, [r2, #12]
 8002a50:	0a12      	lsrs	r2, r2, #8
 8002a52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a56:	fb02 f303 	mul.w	r3, r2, r3
 8002a5a:	617b      	str	r3, [r7, #20]
        break;
 8002a5c:	e019      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a5e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ac8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a66:	4a15      	ldr	r2, [pc, #84]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x12c>)
 8002a68:	68d2      	ldr	r2, [r2, #12]
 8002a6a:	0a12      	lsrs	r2, r2, #8
 8002a6c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a70:	fb02 f303 	mul.w	r3, r2, r3
 8002a74:	617b      	str	r3, [r7, #20]
        break;
 8002a76:	e00c      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a78:	69fa      	ldr	r2, [r7, #28]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a80:	4a0e      	ldr	r2, [pc, #56]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x12c>)
 8002a82:	68d2      	ldr	r2, [r2, #12]
 8002a84:	0a12      	lsrs	r2, r2, #8
 8002a86:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a8a:	fb02 f303 	mul.w	r3, r2, r3
 8002a8e:	617b      	str	r3, [r7, #20]
        break;
 8002a90:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002a92:	4b0a      	ldr	r3, [pc, #40]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x12c>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	0e5b      	lsrs	r3, r3, #25
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aaa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002aac:	69bb      	ldr	r3, [r7, #24]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3724      	adds	r7, #36	@ 0x24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	080058e4 	.word	0x080058e4
 8002ac4:	00f42400 	.word	0x00f42400
 8002ac8:	007a1200 	.word	0x007a1200

08002acc <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8002ad0:	f7ff ff5e 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	4b05      	ldr	r3, [pc, #20]	@ (8002aec <HAL_RCC_GetHCLKFreq+0x20>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	091b      	lsrs	r3, r3, #4
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	4903      	ldr	r1, [pc, #12]	@ (8002af0 <HAL_RCC_GetHCLKFreq+0x24>)
 8002ae2:	5ccb      	ldrb	r3, [r1, r3]
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40021000 	.word	0x40021000
 8002af0:	080058cc 	.word	0x080058cc

08002af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002af8:	f7ff ffe8 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 8002afc:	4602      	mov	r2, r0
 8002afe:	4b05      	ldr	r3, [pc, #20]	@ (8002b14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	0a1b      	lsrs	r3, r3, #8
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	4903      	ldr	r1, [pc, #12]	@ (8002b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b0a:	5ccb      	ldrb	r3, [r1, r3]
 8002b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40021000 	.word	0x40021000
 8002b18:	080058dc 	.word	0x080058dc

08002b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b20:	f7ff ffd4 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 8002b24:	4602      	mov	r2, r0
 8002b26:	4b05      	ldr	r3, [pc, #20]	@ (8002b3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	0adb      	lsrs	r3, r3, #11
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	4903      	ldr	r1, [pc, #12]	@ (8002b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b32:	5ccb      	ldrb	r3, [r1, r3]
 8002b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	080058dc 	.word	0x080058dc

08002b44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b50:	4b2c      	ldr	r3, [pc, #176]	@ (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b5c:	f7ff f85c 	bl	8001c18 <HAL_PWREx_GetVoltageRange>
 8002b60:	6138      	str	r0, [r7, #16]
 8002b62:	e014      	b.n	8002b8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b64:	4b27      	ldr	r3, [pc, #156]	@ (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b68:	4a26      	ldr	r2, [pc, #152]	@ (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002b6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b70:	4b24      	ldr	r3, [pc, #144]	@ (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b7c:	f7ff f84c 	bl	8001c18 <HAL_PWREx_GetVoltageRange>
 8002b80:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b82:	4b20      	ldr	r3, [pc, #128]	@ (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b86:	4a1f      	ldr	r2, [pc, #124]	@ (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002b88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b9a:	d10b      	bne.n	8002bb4 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b80      	cmp	r3, #128	@ 0x80
 8002ba0:	d919      	bls.n	8002bd6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ba6:	d902      	bls.n	8002bae <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ba8:	2302      	movs	r3, #2
 8002baa:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002bac:	e013      	b.n	8002bd6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bae:	2301      	movs	r3, #1
 8002bb0:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002bb2:	e010      	b.n	8002bd6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b80      	cmp	r3, #128	@ 0x80
 8002bb8:	d902      	bls.n	8002bc0 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bba:	2303      	movs	r3, #3
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	e00a      	b.n	8002bd6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b80      	cmp	r3, #128	@ 0x80
 8002bc4:	d102      	bne.n	8002bcc <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	e004      	b.n	8002bd6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b70      	cmp	r3, #112	@ 0x70
 8002bd0:	d101      	bne.n	8002bd6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002c08 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 020f 	bic.w	r2, r3, #15
 8002bde:	490a      	ldr	r1, [pc, #40]	@ (8002c08 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002be6:	4b08      	ldr	r3, [pc, #32]	@ (8002c08 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40022000 	.word	0x40022000

08002c0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c12:	4b31      	ldr	r3, [pc, #196]	@ (8002cd8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8002cd8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	3301      	adds	r3, #1
 8002c28:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d015      	beq.n	8002c5c <RCC_GetSysClockFreqFromPLLSource+0x50>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d839      	bhi.n	8002caa <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d01c      	beq.n	8002c76 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d133      	bne.n	8002caa <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c42:	4a26      	ldr	r2, [pc, #152]	@ (8002cdc <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4a:	4a23      	ldr	r2, [pc, #140]	@ (8002cd8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002c4c:	68d2      	ldr	r2, [r2, #12]
 8002c4e:	0a12      	lsrs	r2, r2, #8
 8002c50:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c54:	fb02 f303 	mul.w	r3, r2, r3
 8002c58:	613b      	str	r3, [r7, #16]
      break;
 8002c5a:	e029      	b.n	8002cb0 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c5c:	4a20      	ldr	r2, [pc, #128]	@ (8002ce0 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c64:	4a1c      	ldr	r2, [pc, #112]	@ (8002cd8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002c66:	68d2      	ldr	r2, [r2, #12]
 8002c68:	0a12      	lsrs	r2, r2, #8
 8002c6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	613b      	str	r3, [r7, #16]
      break;
 8002c74:	e01c      	b.n	8002cb0 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c76:	4b18      	ldr	r3, [pc, #96]	@ (8002cd8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d107      	bne.n	8002c92 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c82:	4b15      	ldr	r3, [pc, #84]	@ (8002cd8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c88:	0a1b      	lsrs	r3, r3, #8
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	e005      	b.n	8002c9e <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c92:	4b11      	ldr	r3, [pc, #68]	@ (8002cd8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	091b      	lsrs	r3, r3, #4
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8002c9e:	4a11      	ldr	r2, [pc, #68]	@ (8002ce4 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca6:	613b      	str	r3, [r7, #16]
        break;
 8002ca8:	e002      	b.n	8002cb0 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	613b      	str	r3, [r7, #16]
      break;
 8002cae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002cb0:	4b09      	ldr	r3, [pc, #36]	@ (8002cd8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	0e5b      	lsrs	r3, r3, #25
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	3301      	adds	r3, #1
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002cca:	683b      	ldr	r3, [r7, #0]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	00f42400 	.word	0x00f42400
 8002ce0:	007a1200 	.word	0x007a1200
 8002ce4:	080058e4 	.word	0x080058e4

08002ce8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e095      	b.n	8002e26 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d108      	bne.n	8002d14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d0a:	d009      	beq.n	8002d20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	61da      	str	r2, [r3, #28]
 8002d12:	e005      	b.n	8002d20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d106      	bne.n	8002d40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fd fe72 	bl	8000a24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d60:	d902      	bls.n	8002d68 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	e002      	b.n	8002d6e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002d76:	d007      	beq.n	8002d88 <HAL_SPI_Init+0xa0>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d80:	d002      	beq.n	8002d88 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dca:	ea42 0103 	orr.w	r1, r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	0c1b      	lsrs	r3, r3, #16
 8002de4:	f003 0204 	and.w	r2, r3, #4
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002e04:	ea42 0103 	orr.w	r1, r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b088      	sub	sp, #32
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_SPI_Transmit+0x22>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e15f      	b.n	8003110 <HAL_SPI_Transmit+0x2e2>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e58:	f7fe fb34 	bl	80014c4 <HAL_GetTick>
 8002e5c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d002      	beq.n	8002e74 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e72:	e148      	b.n	8003106 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <HAL_SPI_Transmit+0x52>
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d102      	bne.n	8002e86 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e84:	e13f      	b.n	8003106 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2203      	movs	r2, #3
 8002e8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	88fa      	ldrh	r2, [r7, #6]
 8002e9e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	88fa      	ldrh	r2, [r7, #6]
 8002ea4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ed0:	d10f      	bne.n	8002ef2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ee0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ef0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002efc:	2b40      	cmp	r3, #64	@ 0x40
 8002efe:	d007      	beq.n	8002f10 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f18:	d94f      	bls.n	8002fba <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <HAL_SPI_Transmit+0xfa>
 8002f22:	8afb      	ldrh	r3, [r7, #22]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d142      	bne.n	8002fae <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f2c:	881a      	ldrh	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f38:	1c9a      	adds	r2, r3, #2
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f4c:	e02f      	b.n	8002fae <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d112      	bne.n	8002f82 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f60:	881a      	ldrh	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6c:	1c9a      	adds	r2, r3, #2
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f80:	e015      	b.n	8002fae <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f82:	f7fe fa9f 	bl	80014c4 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d803      	bhi.n	8002f9a <HAL_SPI_Transmit+0x16c>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f98:	d102      	bne.n	8002fa0 <HAL_SPI_Transmit+0x172>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d106      	bne.n	8002fae <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002fac:	e0ab      	b.n	8003106 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1ca      	bne.n	8002f4e <HAL_SPI_Transmit+0x120>
 8002fb8:	e080      	b.n	80030bc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <HAL_SPI_Transmit+0x19a>
 8002fc2:	8afb      	ldrh	r3, [r7, #22]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d174      	bne.n	80030b2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d912      	bls.n	8002ff8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd6:	881a      	ldrh	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe2:	1c9a      	adds	r2, r3, #2
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	3b02      	subs	r3, #2
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ff6:	e05c      	b.n	80030b2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	330c      	adds	r3, #12
 8003002:	7812      	ldrb	r2, [r2, #0]
 8003004:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800301e:	e048      	b.n	80030b2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b02      	cmp	r3, #2
 800302c:	d12b      	bne.n	8003086 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003032:	b29b      	uxth	r3, r3
 8003034:	2b01      	cmp	r3, #1
 8003036:	d912      	bls.n	800305e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303c:	881a      	ldrh	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003048:	1c9a      	adds	r2, r3, #2
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003052:	b29b      	uxth	r3, r3
 8003054:	3b02      	subs	r3, #2
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800305c:	e029      	b.n	80030b2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	330c      	adds	r3, #12
 8003068:	7812      	ldrb	r2, [r2, #0]
 800306a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800307a:	b29b      	uxth	r3, r3
 800307c:	3b01      	subs	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003084:	e015      	b.n	80030b2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003086:	f7fe fa1d 	bl	80014c4 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d803      	bhi.n	800309e <HAL_SPI_Transmit+0x270>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309c:	d102      	bne.n	80030a4 <HAL_SPI_Transmit+0x276>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d106      	bne.n	80030b2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80030b0:	e029      	b.n	8003106 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1b1      	bne.n	8003020 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	6839      	ldr	r1, [r7, #0]
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 fcf9 	bl	8003ab8 <SPI_EndRxTxTransaction>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10a      	bne.n	80030f0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d002      	beq.n	80030fe <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	77fb      	strb	r3, [r7, #31]
 80030fc:	e003      	b.n	8003106 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800310e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3720      	adds	r7, #32
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af02      	add	r7, sp, #8
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	4613      	mov	r3, r2
 8003126:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b01      	cmp	r3, #1
 8003136:	d002      	beq.n	800313e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003138:	2302      	movs	r3, #2
 800313a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800313c:	e11a      	b.n	8003374 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003146:	d112      	bne.n	800316e <HAL_SPI_Receive+0x56>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10e      	bne.n	800316e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2204      	movs	r2, #4
 8003154:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003158:	88fa      	ldrh	r2, [r7, #6]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	4613      	mov	r3, r2
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	68b9      	ldr	r1, [r7, #8]
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f90e 	bl	8003386 <HAL_SPI_TransmitReceive>
 800316a:	4603      	mov	r3, r0
 800316c:	e107      	b.n	800337e <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_SPI_Receive+0x64>
 8003178:	2302      	movs	r3, #2
 800317a:	e100      	b.n	800337e <HAL_SPI_Receive+0x266>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003184:	f7fe f99e 	bl	80014c4 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <HAL_SPI_Receive+0x7e>
 8003190:	88fb      	ldrh	r3, [r7, #6]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d102      	bne.n	800319c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	75fb      	strb	r3, [r7, #23]
    goto error;
 800319a:	e0eb      	b.n	8003374 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2204      	movs	r2, #4
 80031a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	88fa      	ldrh	r2, [r7, #6]
 80031b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	88fa      	ldrh	r2, [r7, #6]
 80031bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031e6:	d908      	bls.n	80031fa <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031f6:	605a      	str	r2, [r3, #4]
 80031f8:	e007      	b.n	800320a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003208:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003212:	d10f      	bne.n	8003234 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003222:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003232:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800323e:	2b40      	cmp	r3, #64	@ 0x40
 8003240:	d007      	beq.n	8003252 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003250:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800325a:	d86f      	bhi.n	800333c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800325c:	e034      	b.n	80032c8 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b01      	cmp	r3, #1
 800326a:	d117      	bne.n	800329c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f103 020c 	add.w	r2, r3, #12
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003278:	7812      	ldrb	r2, [r2, #0]
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800328e:	b29b      	uxth	r3, r3
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800329a:	e015      	b.n	80032c8 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800329c:	f7fe f912 	bl	80014c4 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d803      	bhi.n	80032b4 <HAL_SPI_Receive+0x19c>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b2:	d102      	bne.n	80032ba <HAL_SPI_Receive+0x1a2>
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80032c6:	e055      	b.n	8003374 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1c4      	bne.n	800325e <HAL_SPI_Receive+0x146>
 80032d4:	e038      	b.n	8003348 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d115      	bne.n	8003310 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	b292      	uxth	r2, r2
 80032f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	1c9a      	adds	r2, r3, #2
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800330e:	e015      	b.n	800333c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003310:	f7fe f8d8 	bl	80014c4 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d803      	bhi.n	8003328 <HAL_SPI_Receive+0x210>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003326:	d102      	bne.n	800332e <HAL_SPI_Receive+0x216>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800333a:	e01b      	b.n	8003374 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003342:	b29b      	uxth	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1c6      	bne.n	80032d6 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	6839      	ldr	r1, [r7, #0]
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 fb5b 	bl	8003a08 <SPI_EndRxTransaction>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	75fb      	strb	r3, [r7, #23]
 800336a:	e003      	b.n	8003374 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800337c:	7dfb      	ldrb	r3, [r7, #23]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b08a      	sub	sp, #40	@ 0x28
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003394:	2301      	movs	r3, #1
 8003396:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003398:	2300      	movs	r3, #0
 800339a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_SPI_TransmitReceive+0x26>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e20a      	b.n	80037c2 <HAL_SPI_TransmitReceive+0x43c>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033b4:	f7fe f886 	bl	80014c4 <HAL_GetTick>
 80033b8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80033c0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80033c8:	887b      	ldrh	r3, [r7, #2]
 80033ca:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80033cc:	887b      	ldrh	r3, [r7, #2]
 80033ce:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033d0:	7efb      	ldrb	r3, [r7, #27]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d00e      	beq.n	80033f4 <HAL_SPI_TransmitReceive+0x6e>
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033dc:	d106      	bne.n	80033ec <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d102      	bne.n	80033ec <HAL_SPI_TransmitReceive+0x66>
 80033e6:	7efb      	ldrb	r3, [r7, #27]
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d003      	beq.n	80033f4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80033ec:	2302      	movs	r3, #2
 80033ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80033f2:	e1e0      	b.n	80037b6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d005      	beq.n	8003406 <HAL_SPI_TransmitReceive+0x80>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <HAL_SPI_TransmitReceive+0x80>
 8003400:	887b      	ldrh	r3, [r7, #2]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d103      	bne.n	800340e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800340c:	e1d3      	b.n	80037b6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b04      	cmp	r3, #4
 8003418:	d003      	beq.n	8003422 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2205      	movs	r2, #5
 800341e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	887a      	ldrh	r2, [r7, #2]
 8003432:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	887a      	ldrh	r2, [r7, #2]
 800343a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	887a      	ldrh	r2, [r7, #2]
 8003448:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	887a      	ldrh	r2, [r7, #2]
 800344e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003464:	d802      	bhi.n	800346c <HAL_SPI_TransmitReceive+0xe6>
 8003466:	8a3b      	ldrh	r3, [r7, #16]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d908      	bls.n	800347e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800347a:	605a      	str	r2, [r3, #4]
 800347c:	e007      	b.n	800348e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800348c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003498:	2b40      	cmp	r3, #64	@ 0x40
 800349a:	d007      	beq.n	80034ac <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034b4:	f240 8081 	bls.w	80035ba <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <HAL_SPI_TransmitReceive+0x140>
 80034c0:	8a7b      	ldrh	r3, [r7, #18]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d16d      	bne.n	80035a2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ca:	881a      	ldrh	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d6:	1c9a      	adds	r2, r3, #2
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034ea:	e05a      	b.n	80035a2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d11b      	bne.n	8003532 <HAL_SPI_TransmitReceive+0x1ac>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034fe:	b29b      	uxth	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d016      	beq.n	8003532 <HAL_SPI_TransmitReceive+0x1ac>
 8003504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003506:	2b01      	cmp	r3, #1
 8003508:	d113      	bne.n	8003532 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350e:	881a      	ldrh	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351a:	1c9a      	adds	r2, r3, #2
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003524:	b29b      	uxth	r3, r3
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b01      	cmp	r3, #1
 800353e:	d11c      	bne.n	800357a <HAL_SPI_TransmitReceive+0x1f4>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003546:	b29b      	uxth	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d016      	beq.n	800357a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003556:	b292      	uxth	r2, r2
 8003558:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355e:	1c9a      	adds	r2, r3, #2
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003576:	2301      	movs	r3, #1
 8003578:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800357a:	f7fd ffa3 	bl	80014c4 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003586:	429a      	cmp	r2, r3
 8003588:	d80b      	bhi.n	80035a2 <HAL_SPI_TransmitReceive+0x21c>
 800358a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d007      	beq.n	80035a2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80035a0:	e109      	b.n	80037b6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d19f      	bne.n	80034ec <HAL_SPI_TransmitReceive+0x166>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d199      	bne.n	80034ec <HAL_SPI_TransmitReceive+0x166>
 80035b8:	e0e3      	b.n	8003782 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_SPI_TransmitReceive+0x244>
 80035c2:	8a7b      	ldrh	r3, [r7, #18]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	f040 80cf 	bne.w	8003768 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d912      	bls.n	80035fa <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d8:	881a      	ldrh	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e4:	1c9a      	adds	r2, r3, #2
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b02      	subs	r3, #2
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035f8:	e0b6      	b.n	8003768 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	330c      	adds	r3, #12
 8003604:	7812      	ldrb	r2, [r2, #0]
 8003606:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003620:	e0a2      	b.n	8003768 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b02      	cmp	r3, #2
 800362e:	d134      	bne.n	800369a <HAL_SPI_TransmitReceive+0x314>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d02f      	beq.n	800369a <HAL_SPI_TransmitReceive+0x314>
 800363a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363c:	2b01      	cmp	r3, #1
 800363e:	d12c      	bne.n	800369a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003644:	b29b      	uxth	r3, r3
 8003646:	2b01      	cmp	r3, #1
 8003648:	d912      	bls.n	8003670 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800364e:	881a      	ldrh	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800365a:	1c9a      	adds	r2, r3, #2
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003664:	b29b      	uxth	r3, r3
 8003666:	3b02      	subs	r3, #2
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800366e:	e012      	b.n	8003696 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	330c      	adds	r3, #12
 800367a:	7812      	ldrb	r2, [r2, #0]
 800367c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800368c:	b29b      	uxth	r3, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d148      	bne.n	800373a <HAL_SPI_TransmitReceive+0x3b4>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d042      	beq.n	800373a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d923      	bls.n	8003708 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ca:	b292      	uxth	r2, r2
 80036cc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d2:	1c9a      	adds	r2, r3, #2
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b02      	subs	r3, #2
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d81f      	bhi.n	8003736 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003704:	605a      	str	r2, [r3, #4]
 8003706:	e016      	b.n	8003736 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f103 020c 	add.w	r2, r3, #12
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003714:	7812      	ldrb	r2, [r2, #0]
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003736:	2301      	movs	r3, #1
 8003738:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800373a:	f7fd fec3 	bl	80014c4 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003746:	429a      	cmp	r2, r3
 8003748:	d803      	bhi.n	8003752 <HAL_SPI_TransmitReceive+0x3cc>
 800374a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d102      	bne.n	8003758 <HAL_SPI_TransmitReceive+0x3d2>
 8003752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003754:	2b00      	cmp	r3, #0
 8003756:	d107      	bne.n	8003768 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003766:	e026      	b.n	80037b6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	f47f af57 	bne.w	8003622 <HAL_SPI_TransmitReceive+0x29c>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800377a:	b29b      	uxth	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	f47f af50 	bne.w	8003622 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f996 	bl	8003ab8 <SPI_EndRxTxTransaction>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2220      	movs	r2, #32
 800379c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ac:	e003      	b.n	80037b6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80037be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3728      	adds	r7, #40	@ 0x28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	4613      	mov	r3, r2
 80037da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037dc:	f7fd fe72 	bl	80014c4 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	4413      	add	r3, r2
 80037ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037ec:	f7fd fe6a 	bl	80014c4 <HAL_GetTick>
 80037f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037f2:	4b39      	ldr	r3, [pc, #228]	@ (80038d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	015b      	lsls	r3, r3, #5
 80037f8:	0d1b      	lsrs	r3, r3, #20
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	fb02 f303 	mul.w	r3, r2, r3
 8003800:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003802:	e054      	b.n	80038ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380a:	d050      	beq.n	80038ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800380c:	f7fd fe5a 	bl	80014c4 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	69fa      	ldr	r2, [r7, #28]
 8003818:	429a      	cmp	r2, r3
 800381a:	d902      	bls.n	8003822 <SPI_WaitFlagStateUntilTimeout+0x56>
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d13d      	bne.n	800389e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003830:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800383a:	d111      	bne.n	8003860 <SPI_WaitFlagStateUntilTimeout+0x94>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003844:	d004      	beq.n	8003850 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800384e:	d107      	bne.n	8003860 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800385e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003864:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003868:	d10f      	bne.n	800388a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003888:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e017      	b.n	80038ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4013      	ands	r3, r2
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	bf0c      	ite	eq
 80038be:	2301      	moveq	r3, #1
 80038c0:	2300      	movne	r3, #0
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	461a      	mov	r2, r3
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d19b      	bne.n	8003804 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3720      	adds	r7, #32
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000000 	.word	0x20000000

080038dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08a      	sub	sp, #40	@ 0x28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80038ee:	f7fd fde9 	bl	80014c4 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	4413      	add	r3, r2
 80038fc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80038fe:	f7fd fde1 	bl	80014c4 <HAL_GetTick>
 8003902:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	330c      	adds	r3, #12
 800390a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800390c:	4b3d      	ldr	r3, [pc, #244]	@ (8003a04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	00da      	lsls	r2, r3, #3
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	0d1b      	lsrs	r3, r3, #20
 800391c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800391e:	fb02 f303 	mul.w	r3, r2, r3
 8003922:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003924:	e060      	b.n	80039e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800392c:	d107      	bne.n	800393e <SPI_WaitFifoStateUntilTimeout+0x62>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d104      	bne.n	800393e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	b2db      	uxtb	r3, r3
 800393a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800393c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003944:	d050      	beq.n	80039e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003946:	f7fd fdbd 	bl	80014c4 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003952:	429a      	cmp	r2, r3
 8003954:	d902      	bls.n	800395c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003958:	2b00      	cmp	r3, #0
 800395a:	d13d      	bne.n	80039d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800396a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003974:	d111      	bne.n	800399a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800397e:	d004      	beq.n	800398a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003988:	d107      	bne.n	800399a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003998:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039a2:	d10f      	bne.n	80039c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e010      	b.n	80039fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80039de:	2300      	movs	r3, #0
 80039e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	3b01      	subs	r3, #1
 80039e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	4013      	ands	r3, r2
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d196      	bne.n	8003926 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3728      	adds	r7, #40	@ 0x28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20000000 	.word	0x20000000

08003a08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a1c:	d111      	bne.n	8003a42 <SPI_EndRxTransaction+0x3a>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a26:	d004      	beq.n	8003a32 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a30:	d107      	bne.n	8003a42 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a40:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2180      	movs	r1, #128	@ 0x80
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f7ff febd 	bl	80037cc <SPI_WaitFlagStateUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d007      	beq.n	8003a68 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a5c:	f043 0220 	orr.w	r2, r3, #32
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e023      	b.n	8003ab0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a70:	d11d      	bne.n	8003aae <SPI_EndRxTransaction+0xa6>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a7a:	d004      	beq.n	8003a86 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a84:	d113      	bne.n	8003aae <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f7ff ff22 	bl	80038dc <SPI_WaitFifoStateUntilTimeout>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d007      	beq.n	8003aae <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aa2:	f043 0220 	orr.w	r2, r3, #32
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e000      	b.n	8003ab0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f7ff ff03 	bl	80038dc <SPI_WaitFifoStateUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d007      	beq.n	8003aec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae0:	f043 0220 	orr.w	r2, r3, #32
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e027      	b.n	8003b3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2200      	movs	r2, #0
 8003af4:	2180      	movs	r1, #128	@ 0x80
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f7ff fe68 	bl	80037cc <SPI_WaitFlagStateUntilTimeout>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d007      	beq.n	8003b12 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b06:	f043 0220 	orr.w	r2, r3, #32
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e014      	b.n	8003b3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f7ff fedc 	bl	80038dc <SPI_WaitFifoStateUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d007      	beq.n	8003b3a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b2e:	f043 0220 	orr.w	r2, r3, #32
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e000      	b.n	8003b3c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e042      	b.n	8003bdc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d106      	bne.n	8003b6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f83b 	bl	8003be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2224      	movs	r2, #36	@ 0x24
 8003b72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0201 	bic.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 fbc0 	bl	8004314 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f8bd 	bl	8003d14 <UART_SetConfig>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e01b      	b.n	8003bdc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fc3f 	bl	8004458 <UART_CheckIdleState>
 8003bda:	4603      	mov	r3, r0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08a      	sub	sp, #40	@ 0x28
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	4613      	mov	r3, r2
 8003c06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c0e:	2b20      	cmp	r3, #32
 8003c10:	d17b      	bne.n	8003d0a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <HAL_UART_Transmit+0x26>
 8003c18:	88fb      	ldrh	r3, [r7, #6]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e074      	b.n	8003d0c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2221      	movs	r2, #33	@ 0x21
 8003c2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c32:	f7fd fc47 	bl	80014c4 <HAL_GetTick>
 8003c36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	88fa      	ldrh	r2, [r7, #6]
 8003c3c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	88fa      	ldrh	r2, [r7, #6]
 8003c44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c50:	d108      	bne.n	8003c64 <HAL_UART_Transmit+0x6c>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d104      	bne.n	8003c64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	e003      	b.n	8003c6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c6c:	e030      	b.n	8003cd0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2200      	movs	r2, #0
 8003c76:	2180      	movs	r1, #128	@ 0x80
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 fc97 	bl	80045ac <UART_WaitOnFlagUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e03d      	b.n	8003d0c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10b      	bne.n	8003cae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ca4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	3302      	adds	r3, #2
 8003caa:	61bb      	str	r3, [r7, #24]
 8003cac:	e007      	b.n	8003cbe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	781a      	ldrb	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1c8      	bne.n	8003c6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	2140      	movs	r1, #64	@ 0x40
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fc60 	bl	80045ac <UART_WaitOnFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e006      	b.n	8003d0c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	e000      	b.n	8003d0c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003d0a:	2302      	movs	r3, #2
  }
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3720      	adds	r7, #32
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d18:	b08c      	sub	sp, #48	@ 0x30
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	4baa      	ldr	r3, [pc, #680]	@ (8003fec <UART_SetConfig+0x2d8>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	6812      	ldr	r2, [r2, #0]
 8003d4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a9f      	ldr	r2, [pc, #636]	@ (8003ff0 <UART_SetConfig+0x2dc>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d004      	beq.n	8003d80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003d8a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	6812      	ldr	r2, [r2, #0]
 8003d92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d94:	430b      	orrs	r3, r1
 8003d96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9e:	f023 010f 	bic.w	r1, r3, #15
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a90      	ldr	r2, [pc, #576]	@ (8003ff4 <UART_SetConfig+0x2e0>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d125      	bne.n	8003e04 <UART_SetConfig+0xf0>
 8003db8:	4b8f      	ldr	r3, [pc, #572]	@ (8003ff8 <UART_SetConfig+0x2e4>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d81a      	bhi.n	8003dfc <UART_SetConfig+0xe8>
 8003dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dcc <UART_SetConfig+0xb8>)
 8003dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dcc:	08003ddd 	.word	0x08003ddd
 8003dd0:	08003ded 	.word	0x08003ded
 8003dd4:	08003de5 	.word	0x08003de5
 8003dd8:	08003df5 	.word	0x08003df5
 8003ddc:	2301      	movs	r3, #1
 8003dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003de2:	e116      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003de4:	2302      	movs	r3, #2
 8003de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dea:	e112      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003dec:	2304      	movs	r3, #4
 8003dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003df2:	e10e      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003df4:	2308      	movs	r3, #8
 8003df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dfa:	e10a      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003dfc:	2310      	movs	r3, #16
 8003dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e02:	e106      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a7c      	ldr	r2, [pc, #496]	@ (8003ffc <UART_SetConfig+0x2e8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d138      	bne.n	8003e80 <UART_SetConfig+0x16c>
 8003e0e:	4b7a      	ldr	r3, [pc, #488]	@ (8003ff8 <UART_SetConfig+0x2e4>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e14:	f003 030c 	and.w	r3, r3, #12
 8003e18:	2b0c      	cmp	r3, #12
 8003e1a:	d82d      	bhi.n	8003e78 <UART_SetConfig+0x164>
 8003e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e24 <UART_SetConfig+0x110>)
 8003e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e22:	bf00      	nop
 8003e24:	08003e59 	.word	0x08003e59
 8003e28:	08003e79 	.word	0x08003e79
 8003e2c:	08003e79 	.word	0x08003e79
 8003e30:	08003e79 	.word	0x08003e79
 8003e34:	08003e69 	.word	0x08003e69
 8003e38:	08003e79 	.word	0x08003e79
 8003e3c:	08003e79 	.word	0x08003e79
 8003e40:	08003e79 	.word	0x08003e79
 8003e44:	08003e61 	.word	0x08003e61
 8003e48:	08003e79 	.word	0x08003e79
 8003e4c:	08003e79 	.word	0x08003e79
 8003e50:	08003e79 	.word	0x08003e79
 8003e54:	08003e71 	.word	0x08003e71
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e5e:	e0d8      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003e60:	2302      	movs	r3, #2
 8003e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e66:	e0d4      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003e68:	2304      	movs	r3, #4
 8003e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e6e:	e0d0      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003e70:	2308      	movs	r3, #8
 8003e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e76:	e0cc      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003e78:	2310      	movs	r3, #16
 8003e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e7e:	e0c8      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a5e      	ldr	r2, [pc, #376]	@ (8004000 <UART_SetConfig+0x2ec>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d125      	bne.n	8003ed6 <UART_SetConfig+0x1c2>
 8003e8a:	4b5b      	ldr	r3, [pc, #364]	@ (8003ff8 <UART_SetConfig+0x2e4>)
 8003e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e90:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e94:	2b30      	cmp	r3, #48	@ 0x30
 8003e96:	d016      	beq.n	8003ec6 <UART_SetConfig+0x1b2>
 8003e98:	2b30      	cmp	r3, #48	@ 0x30
 8003e9a:	d818      	bhi.n	8003ece <UART_SetConfig+0x1ba>
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	d00a      	beq.n	8003eb6 <UART_SetConfig+0x1a2>
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	d814      	bhi.n	8003ece <UART_SetConfig+0x1ba>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <UART_SetConfig+0x19a>
 8003ea8:	2b10      	cmp	r3, #16
 8003eaa:	d008      	beq.n	8003ebe <UART_SetConfig+0x1aa>
 8003eac:	e00f      	b.n	8003ece <UART_SetConfig+0x1ba>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eb4:	e0ad      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ebc:	e0a9      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003ebe:	2304      	movs	r3, #4
 8003ec0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ec4:	e0a5      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003ec6:	2308      	movs	r3, #8
 8003ec8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ecc:	e0a1      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003ece:	2310      	movs	r3, #16
 8003ed0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ed4:	e09d      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a4a      	ldr	r2, [pc, #296]	@ (8004004 <UART_SetConfig+0x2f0>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d125      	bne.n	8003f2c <UART_SetConfig+0x218>
 8003ee0:	4b45      	ldr	r3, [pc, #276]	@ (8003ff8 <UART_SetConfig+0x2e4>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003eea:	2bc0      	cmp	r3, #192	@ 0xc0
 8003eec:	d016      	beq.n	8003f1c <UART_SetConfig+0x208>
 8003eee:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ef0:	d818      	bhi.n	8003f24 <UART_SetConfig+0x210>
 8003ef2:	2b80      	cmp	r3, #128	@ 0x80
 8003ef4:	d00a      	beq.n	8003f0c <UART_SetConfig+0x1f8>
 8003ef6:	2b80      	cmp	r3, #128	@ 0x80
 8003ef8:	d814      	bhi.n	8003f24 <UART_SetConfig+0x210>
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <UART_SetConfig+0x1f0>
 8003efe:	2b40      	cmp	r3, #64	@ 0x40
 8003f00:	d008      	beq.n	8003f14 <UART_SetConfig+0x200>
 8003f02:	e00f      	b.n	8003f24 <UART_SetConfig+0x210>
 8003f04:	2300      	movs	r3, #0
 8003f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f0a:	e082      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f12:	e07e      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003f14:	2304      	movs	r3, #4
 8003f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f1a:	e07a      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003f1c:	2308      	movs	r3, #8
 8003f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f22:	e076      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003f24:	2310      	movs	r3, #16
 8003f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f2a:	e072      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a35      	ldr	r2, [pc, #212]	@ (8004008 <UART_SetConfig+0x2f4>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d12a      	bne.n	8003f8c <UART_SetConfig+0x278>
 8003f36:	4b30      	ldr	r3, [pc, #192]	@ (8003ff8 <UART_SetConfig+0x2e4>)
 8003f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f44:	d01a      	beq.n	8003f7c <UART_SetConfig+0x268>
 8003f46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f4a:	d81b      	bhi.n	8003f84 <UART_SetConfig+0x270>
 8003f4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f50:	d00c      	beq.n	8003f6c <UART_SetConfig+0x258>
 8003f52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f56:	d815      	bhi.n	8003f84 <UART_SetConfig+0x270>
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <UART_SetConfig+0x250>
 8003f5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f60:	d008      	beq.n	8003f74 <UART_SetConfig+0x260>
 8003f62:	e00f      	b.n	8003f84 <UART_SetConfig+0x270>
 8003f64:	2300      	movs	r3, #0
 8003f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f6a:	e052      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f72:	e04e      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003f74:	2304      	movs	r3, #4
 8003f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f7a:	e04a      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003f7c:	2308      	movs	r3, #8
 8003f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f82:	e046      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003f84:	2310      	movs	r3, #16
 8003f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f8a:	e042      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a17      	ldr	r2, [pc, #92]	@ (8003ff0 <UART_SetConfig+0x2dc>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d13a      	bne.n	800400c <UART_SetConfig+0x2f8>
 8003f96:	4b18      	ldr	r3, [pc, #96]	@ (8003ff8 <UART_SetConfig+0x2e4>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003fa0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fa4:	d01a      	beq.n	8003fdc <UART_SetConfig+0x2c8>
 8003fa6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003faa:	d81b      	bhi.n	8003fe4 <UART_SetConfig+0x2d0>
 8003fac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fb0:	d00c      	beq.n	8003fcc <UART_SetConfig+0x2b8>
 8003fb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fb6:	d815      	bhi.n	8003fe4 <UART_SetConfig+0x2d0>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <UART_SetConfig+0x2b0>
 8003fbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fc0:	d008      	beq.n	8003fd4 <UART_SetConfig+0x2c0>
 8003fc2:	e00f      	b.n	8003fe4 <UART_SetConfig+0x2d0>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fca:	e022      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fd2:	e01e      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fda:	e01a      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003fdc:	2308      	movs	r3, #8
 8003fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fe2:	e016      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003fe4:	2310      	movs	r3, #16
 8003fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fea:	e012      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003fec:	cfff69f3 	.word	0xcfff69f3
 8003ff0:	40008000 	.word	0x40008000
 8003ff4:	40013800 	.word	0x40013800
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	40004400 	.word	0x40004400
 8004000:	40004800 	.word	0x40004800
 8004004:	40004c00 	.word	0x40004c00
 8004008:	40005000 	.word	0x40005000
 800400c:	2310      	movs	r3, #16
 800400e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4ab0      	ldr	r2, [pc, #704]	@ (80042d8 <UART_SetConfig+0x5c4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	f040 809b 	bne.w	8004154 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800401e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004022:	2b08      	cmp	r3, #8
 8004024:	d827      	bhi.n	8004076 <UART_SetConfig+0x362>
 8004026:	a201      	add	r2, pc, #4	@ (adr r2, 800402c <UART_SetConfig+0x318>)
 8004028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402c:	08004051 	.word	0x08004051
 8004030:	08004059 	.word	0x08004059
 8004034:	08004061 	.word	0x08004061
 8004038:	08004077 	.word	0x08004077
 800403c:	08004067 	.word	0x08004067
 8004040:	08004077 	.word	0x08004077
 8004044:	08004077 	.word	0x08004077
 8004048:	08004077 	.word	0x08004077
 800404c:	0800406f 	.word	0x0800406f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004050:	f7fe fd50 	bl	8002af4 <HAL_RCC_GetPCLK1Freq>
 8004054:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004056:	e014      	b.n	8004082 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004058:	f7fe fd60 	bl	8002b1c <HAL_RCC_GetPCLK2Freq>
 800405c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800405e:	e010      	b.n	8004082 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004060:	4b9e      	ldr	r3, [pc, #632]	@ (80042dc <UART_SetConfig+0x5c8>)
 8004062:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004064:	e00d      	b.n	8004082 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004066:	f7fe fc93 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 800406a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800406c:	e009      	b.n	8004082 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800406e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004072:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004074:	e005      	b.n	8004082 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8004076:	2300      	movs	r3, #0
 8004078:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004080:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 8130 	beq.w	80042ea <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408e:	4a94      	ldr	r2, [pc, #592]	@ (80042e0 <UART_SetConfig+0x5cc>)
 8004090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004094:	461a      	mov	r2, r3
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	fbb3 f3f2 	udiv	r3, r3, r2
 800409c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	4413      	add	r3, r2
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d305      	bcc.n	80040ba <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d903      	bls.n	80040c2 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80040c0:	e113      	b.n	80042ea <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c4:	2200      	movs	r2, #0
 80040c6:	60bb      	str	r3, [r7, #8]
 80040c8:	60fa      	str	r2, [r7, #12]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ce:	4a84      	ldr	r2, [pc, #528]	@ (80042e0 <UART_SetConfig+0x5cc>)
 80040d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2200      	movs	r2, #0
 80040d8:	603b      	str	r3, [r7, #0]
 80040da:	607a      	str	r2, [r7, #4]
 80040dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040e4:	f7fc f8a6 	bl	8000234 <__aeabi_uldivmod>
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	4610      	mov	r0, r2
 80040ee:	4619      	mov	r1, r3
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	020b      	lsls	r3, r1, #8
 80040fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80040fe:	0202      	lsls	r2, r0, #8
 8004100:	6979      	ldr	r1, [r7, #20]
 8004102:	6849      	ldr	r1, [r1, #4]
 8004104:	0849      	lsrs	r1, r1, #1
 8004106:	2000      	movs	r0, #0
 8004108:	460c      	mov	r4, r1
 800410a:	4605      	mov	r5, r0
 800410c:	eb12 0804 	adds.w	r8, r2, r4
 8004110:	eb43 0905 	adc.w	r9, r3, r5
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	469a      	mov	sl, r3
 800411c:	4693      	mov	fp, r2
 800411e:	4652      	mov	r2, sl
 8004120:	465b      	mov	r3, fp
 8004122:	4640      	mov	r0, r8
 8004124:	4649      	mov	r1, r9
 8004126:	f7fc f885 	bl	8000234 <__aeabi_uldivmod>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	4613      	mov	r3, r2
 8004130:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004138:	d308      	bcc.n	800414c <UART_SetConfig+0x438>
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004140:	d204      	bcs.n	800414c <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6a3a      	ldr	r2, [r7, #32]
 8004148:	60da      	str	r2, [r3, #12]
 800414a:	e0ce      	b.n	80042ea <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004152:	e0ca      	b.n	80042ea <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800415c:	d166      	bne.n	800422c <UART_SetConfig+0x518>
  {
    switch (clocksource)
 800415e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004162:	2b08      	cmp	r3, #8
 8004164:	d827      	bhi.n	80041b6 <UART_SetConfig+0x4a2>
 8004166:	a201      	add	r2, pc, #4	@ (adr r2, 800416c <UART_SetConfig+0x458>)
 8004168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416c:	08004191 	.word	0x08004191
 8004170:	08004199 	.word	0x08004199
 8004174:	080041a1 	.word	0x080041a1
 8004178:	080041b7 	.word	0x080041b7
 800417c:	080041a7 	.word	0x080041a7
 8004180:	080041b7 	.word	0x080041b7
 8004184:	080041b7 	.word	0x080041b7
 8004188:	080041b7 	.word	0x080041b7
 800418c:	080041af 	.word	0x080041af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004190:	f7fe fcb0 	bl	8002af4 <HAL_RCC_GetPCLK1Freq>
 8004194:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004196:	e014      	b.n	80041c2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004198:	f7fe fcc0 	bl	8002b1c <HAL_RCC_GetPCLK2Freq>
 800419c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800419e:	e010      	b.n	80041c2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041a0:	4b4e      	ldr	r3, [pc, #312]	@ (80042dc <UART_SetConfig+0x5c8>)
 80041a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041a4:	e00d      	b.n	80041c2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041a6:	f7fe fbf3 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 80041aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041ac:	e009      	b.n	80041c2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041b4:	e005      	b.n	80041c2 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80041c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 8090 	beq.w	80042ea <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ce:	4a44      	ldr	r2, [pc, #272]	@ (80042e0 <UART_SetConfig+0x5cc>)
 80041d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041d4:	461a      	mov	r2, r3
 80041d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80041dc:	005a      	lsls	r2, r3, #1
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	085b      	lsrs	r3, r3, #1
 80041e4:	441a      	add	r2, r3
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	2b0f      	cmp	r3, #15
 80041f4:	d916      	bls.n	8004224 <UART_SetConfig+0x510>
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041fc:	d212      	bcs.n	8004224 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	b29b      	uxth	r3, r3
 8004202:	f023 030f 	bic.w	r3, r3, #15
 8004206:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	085b      	lsrs	r3, r3, #1
 800420c:	b29b      	uxth	r3, r3
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	b29a      	uxth	r2, r3
 8004214:	8bfb      	ldrh	r3, [r7, #30]
 8004216:	4313      	orrs	r3, r2
 8004218:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	8bfa      	ldrh	r2, [r7, #30]
 8004220:	60da      	str	r2, [r3, #12]
 8004222:	e062      	b.n	80042ea <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800422a:	e05e      	b.n	80042ea <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800422c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004230:	2b08      	cmp	r3, #8
 8004232:	d828      	bhi.n	8004286 <UART_SetConfig+0x572>
 8004234:	a201      	add	r2, pc, #4	@ (adr r2, 800423c <UART_SetConfig+0x528>)
 8004236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423a:	bf00      	nop
 800423c:	08004261 	.word	0x08004261
 8004240:	08004269 	.word	0x08004269
 8004244:	08004271 	.word	0x08004271
 8004248:	08004287 	.word	0x08004287
 800424c:	08004277 	.word	0x08004277
 8004250:	08004287 	.word	0x08004287
 8004254:	08004287 	.word	0x08004287
 8004258:	08004287 	.word	0x08004287
 800425c:	0800427f 	.word	0x0800427f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004260:	f7fe fc48 	bl	8002af4 <HAL_RCC_GetPCLK1Freq>
 8004264:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004266:	e014      	b.n	8004292 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004268:	f7fe fc58 	bl	8002b1c <HAL_RCC_GetPCLK2Freq>
 800426c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800426e:	e010      	b.n	8004292 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004270:	4b1a      	ldr	r3, [pc, #104]	@ (80042dc <UART_SetConfig+0x5c8>)
 8004272:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004274:	e00d      	b.n	8004292 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004276:	f7fe fb8b 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 800427a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800427c:	e009      	b.n	8004292 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800427e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004282:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004284:	e005      	b.n	8004292 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8004286:	2300      	movs	r3, #0
 8004288:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004290:	bf00      	nop
    }

    if (pclk != 0U)
 8004292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004294:	2b00      	cmp	r3, #0
 8004296:	d028      	beq.n	80042ea <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	4a10      	ldr	r2, [pc, #64]	@ (80042e0 <UART_SetConfig+0x5cc>)
 800429e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042a2:	461a      	mov	r2, r3
 80042a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	085b      	lsrs	r3, r3, #1
 80042b0:	441a      	add	r2, r3
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	2b0f      	cmp	r3, #15
 80042c0:	d910      	bls.n	80042e4 <UART_SetConfig+0x5d0>
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042c8:	d20c      	bcs.n	80042e4 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	60da      	str	r2, [r3, #12]
 80042d4:	e009      	b.n	80042ea <UART_SetConfig+0x5d6>
 80042d6:	bf00      	nop
 80042d8:	40008000 	.word	0x40008000
 80042dc:	00f42400 	.word	0x00f42400
 80042e0:	08005924 	.word	0x08005924
      }
      else
      {
        ret = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2200      	movs	r2, #0
 80042fe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	2200      	movs	r2, #0
 8004304:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004306:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800430a:	4618      	mov	r0, r3
 800430c:	3730      	adds	r7, #48	@ 0x30
 800430e:	46bd      	mov	sp, r7
 8004310:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004314 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00a      	beq.n	800433e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a8:	f003 0310 	and.w	r3, r3, #16
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d01a      	beq.n	800442a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004412:	d10a      	bne.n	800442a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	605a      	str	r2, [r3, #4]
  }
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b098      	sub	sp, #96	@ 0x60
 800445c:	af02      	add	r7, sp, #8
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004468:	f7fd f82c 	bl	80014c4 <HAL_GetTick>
 800446c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b08      	cmp	r3, #8
 800447a:	d12f      	bne.n	80044dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800447c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004484:	2200      	movs	r2, #0
 8004486:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f88e 	bl	80045ac <UART_WaitOnFlagUntilTimeout>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d022      	beq.n	80044dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	461a      	mov	r2, r3
 80044b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80044b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044bc:	e841 2300 	strex	r3, r2, [r1]
 80044c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e6      	bne.n	8004496 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e063      	b.n	80045a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d149      	bne.n	800457e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044f2:	2200      	movs	r2, #0
 80044f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f857 	bl	80045ac <UART_WaitOnFlagUntilTimeout>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d03c      	beq.n	800457e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450c:	e853 3f00 	ldrex	r3, [r3]
 8004510:	623b      	str	r3, [r7, #32]
   return(result);
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004518:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004522:	633b      	str	r3, [r7, #48]	@ 0x30
 8004524:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004526:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004528:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800452a:	e841 2300 	strex	r3, r2, [r1]
 800452e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1e6      	bne.n	8004504 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3308      	adds	r3, #8
 800453c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	e853 3f00 	ldrex	r3, [r3]
 8004544:	60fb      	str	r3, [r7, #12]
   return(result);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f023 0301 	bic.w	r3, r3, #1
 800454c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3308      	adds	r3, #8
 8004554:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004556:	61fa      	str	r2, [r7, #28]
 8004558:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455a:	69b9      	ldr	r1, [r7, #24]
 800455c:	69fa      	ldr	r2, [r7, #28]
 800455e:	e841 2300 	strex	r3, r2, [r1]
 8004562:	617b      	str	r3, [r7, #20]
   return(result);
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1e5      	bne.n	8004536 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e012      	b.n	80045a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2220      	movs	r2, #32
 8004582:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2220      	movs	r2, #32
 800458a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3758      	adds	r7, #88	@ 0x58
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	4613      	mov	r3, r2
 80045ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045bc:	e04f      	b.n	800465e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c4:	d04b      	beq.n	800465e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c6:	f7fc ff7d 	bl	80014c4 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d302      	bcc.n	80045dc <UART_WaitOnFlagUntilTimeout+0x30>
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e04e      	b.n	800467e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0304 	and.w	r3, r3, #4
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d037      	beq.n	800465e <UART_WaitOnFlagUntilTimeout+0xb2>
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b80      	cmp	r3, #128	@ 0x80
 80045f2:	d034      	beq.n	800465e <UART_WaitOnFlagUntilTimeout+0xb2>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b40      	cmp	r3, #64	@ 0x40
 80045f8:	d031      	beq.n	800465e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b08      	cmp	r3, #8
 8004606:	d110      	bne.n	800462a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2208      	movs	r2, #8
 800460e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 f838 	bl	8004686 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2208      	movs	r2, #8
 800461a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e029      	b.n	800467e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004634:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004638:	d111      	bne.n	800465e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004642:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 f81e 	bl	8004686 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2220      	movs	r2, #32
 800464e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e00f      	b.n	800467e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69da      	ldr	r2, [r3, #28]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	4013      	ands	r3, r2
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	429a      	cmp	r2, r3
 800466c:	bf0c      	ite	eq
 800466e:	2301      	moveq	r3, #1
 8004670:	2300      	movne	r3, #0
 8004672:	b2db      	uxtb	r3, r3
 8004674:	461a      	mov	r2, r3
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	429a      	cmp	r2, r3
 800467a:	d0a0      	beq.n	80045be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004686:	b480      	push	{r7}
 8004688:	b095      	sub	sp, #84	@ 0x54
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004696:	e853 3f00 	ldrex	r3, [r3]
 800469a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800469c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	461a      	mov	r2, r3
 80046aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80046ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046b4:	e841 2300 	strex	r3, r2, [r1]
 80046b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1e6      	bne.n	800468e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3308      	adds	r3, #8
 80046c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	e853 3f00 	ldrex	r3, [r3]
 80046ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046d6:	f023 0301 	bic.w	r3, r3, #1
 80046da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3308      	adds	r3, #8
 80046e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046ec:	e841 2300 	strex	r3, r2, [r1]
 80046f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e3      	bne.n	80046c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d118      	bne.n	8004732 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	e853 3f00 	ldrex	r3, [r3]
 800470c:	60bb      	str	r3, [r7, #8]
   return(result);
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	f023 0310 	bic.w	r3, r3, #16
 8004714:	647b      	str	r3, [r7, #68]	@ 0x44
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800471e:	61bb      	str	r3, [r7, #24]
 8004720:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004722:	6979      	ldr	r1, [r7, #20]
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	e841 2300 	strex	r3, r2, [r1]
 800472a:	613b      	str	r3, [r7, #16]
   return(result);
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1e6      	bne.n	8004700 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004746:	bf00      	nop
 8004748:	3754      	adds	r7, #84	@ 0x54
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
	...

08004754 <sbrk_aligned>:
 8004754:	b570      	push	{r4, r5, r6, lr}
 8004756:	4e0f      	ldr	r6, [pc, #60]	@ (8004794 <sbrk_aligned+0x40>)
 8004758:	460c      	mov	r4, r1
 800475a:	4605      	mov	r5, r0
 800475c:	6831      	ldr	r1, [r6, #0]
 800475e:	b911      	cbnz	r1, 8004766 <sbrk_aligned+0x12>
 8004760:	f000 fafc 	bl	8004d5c <_sbrk_r>
 8004764:	6030      	str	r0, [r6, #0]
 8004766:	4621      	mov	r1, r4
 8004768:	4628      	mov	r0, r5
 800476a:	f000 faf7 	bl	8004d5c <_sbrk_r>
 800476e:	1c43      	adds	r3, r0, #1
 8004770:	d103      	bne.n	800477a <sbrk_aligned+0x26>
 8004772:	f04f 34ff 	mov.w	r4, #4294967295
 8004776:	4620      	mov	r0, r4
 8004778:	bd70      	pop	{r4, r5, r6, pc}
 800477a:	1cc4      	adds	r4, r0, #3
 800477c:	f024 0403 	bic.w	r4, r4, #3
 8004780:	42a0      	cmp	r0, r4
 8004782:	d0f8      	beq.n	8004776 <sbrk_aligned+0x22>
 8004784:	1a21      	subs	r1, r4, r0
 8004786:	4628      	mov	r0, r5
 8004788:	f000 fae8 	bl	8004d5c <_sbrk_r>
 800478c:	3001      	adds	r0, #1
 800478e:	d1f2      	bne.n	8004776 <sbrk_aligned+0x22>
 8004790:	e7ef      	b.n	8004772 <sbrk_aligned+0x1e>
 8004792:	bf00      	nop
 8004794:	20000260 	.word	0x20000260

08004798 <_malloc_r>:
 8004798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800479c:	1ccd      	adds	r5, r1, #3
 800479e:	4606      	mov	r6, r0
 80047a0:	f025 0503 	bic.w	r5, r5, #3
 80047a4:	3508      	adds	r5, #8
 80047a6:	2d0c      	cmp	r5, #12
 80047a8:	bf38      	it	cc
 80047aa:	250c      	movcc	r5, #12
 80047ac:	2d00      	cmp	r5, #0
 80047ae:	db01      	blt.n	80047b4 <_malloc_r+0x1c>
 80047b0:	42a9      	cmp	r1, r5
 80047b2:	d904      	bls.n	80047be <_malloc_r+0x26>
 80047b4:	230c      	movs	r3, #12
 80047b6:	6033      	str	r3, [r6, #0]
 80047b8:	2000      	movs	r0, #0
 80047ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004894 <_malloc_r+0xfc>
 80047c2:	f000 f869 	bl	8004898 <__malloc_lock>
 80047c6:	f8d8 3000 	ldr.w	r3, [r8]
 80047ca:	461c      	mov	r4, r3
 80047cc:	bb44      	cbnz	r4, 8004820 <_malloc_r+0x88>
 80047ce:	4629      	mov	r1, r5
 80047d0:	4630      	mov	r0, r6
 80047d2:	f7ff ffbf 	bl	8004754 <sbrk_aligned>
 80047d6:	1c43      	adds	r3, r0, #1
 80047d8:	4604      	mov	r4, r0
 80047da:	d158      	bne.n	800488e <_malloc_r+0xf6>
 80047dc:	f8d8 4000 	ldr.w	r4, [r8]
 80047e0:	4627      	mov	r7, r4
 80047e2:	2f00      	cmp	r7, #0
 80047e4:	d143      	bne.n	800486e <_malloc_r+0xd6>
 80047e6:	2c00      	cmp	r4, #0
 80047e8:	d04b      	beq.n	8004882 <_malloc_r+0xea>
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	4639      	mov	r1, r7
 80047ee:	4630      	mov	r0, r6
 80047f0:	eb04 0903 	add.w	r9, r4, r3
 80047f4:	f000 fab2 	bl	8004d5c <_sbrk_r>
 80047f8:	4581      	cmp	r9, r0
 80047fa:	d142      	bne.n	8004882 <_malloc_r+0xea>
 80047fc:	6821      	ldr	r1, [r4, #0]
 80047fe:	4630      	mov	r0, r6
 8004800:	1a6d      	subs	r5, r5, r1
 8004802:	4629      	mov	r1, r5
 8004804:	f7ff ffa6 	bl	8004754 <sbrk_aligned>
 8004808:	3001      	adds	r0, #1
 800480a:	d03a      	beq.n	8004882 <_malloc_r+0xea>
 800480c:	6823      	ldr	r3, [r4, #0]
 800480e:	442b      	add	r3, r5
 8004810:	6023      	str	r3, [r4, #0]
 8004812:	f8d8 3000 	ldr.w	r3, [r8]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	bb62      	cbnz	r2, 8004874 <_malloc_r+0xdc>
 800481a:	f8c8 7000 	str.w	r7, [r8]
 800481e:	e00f      	b.n	8004840 <_malloc_r+0xa8>
 8004820:	6822      	ldr	r2, [r4, #0]
 8004822:	1b52      	subs	r2, r2, r5
 8004824:	d420      	bmi.n	8004868 <_malloc_r+0xd0>
 8004826:	2a0b      	cmp	r2, #11
 8004828:	d917      	bls.n	800485a <_malloc_r+0xc2>
 800482a:	1961      	adds	r1, r4, r5
 800482c:	42a3      	cmp	r3, r4
 800482e:	6025      	str	r5, [r4, #0]
 8004830:	bf18      	it	ne
 8004832:	6059      	strne	r1, [r3, #4]
 8004834:	6863      	ldr	r3, [r4, #4]
 8004836:	bf08      	it	eq
 8004838:	f8c8 1000 	streq.w	r1, [r8]
 800483c:	5162      	str	r2, [r4, r5]
 800483e:	604b      	str	r3, [r1, #4]
 8004840:	4630      	mov	r0, r6
 8004842:	f000 f82f 	bl	80048a4 <__malloc_unlock>
 8004846:	f104 000b 	add.w	r0, r4, #11
 800484a:	1d23      	adds	r3, r4, #4
 800484c:	f020 0007 	bic.w	r0, r0, #7
 8004850:	1ac2      	subs	r2, r0, r3
 8004852:	bf1c      	itt	ne
 8004854:	1a1b      	subne	r3, r3, r0
 8004856:	50a3      	strne	r3, [r4, r2]
 8004858:	e7af      	b.n	80047ba <_malloc_r+0x22>
 800485a:	6862      	ldr	r2, [r4, #4]
 800485c:	42a3      	cmp	r3, r4
 800485e:	bf0c      	ite	eq
 8004860:	f8c8 2000 	streq.w	r2, [r8]
 8004864:	605a      	strne	r2, [r3, #4]
 8004866:	e7eb      	b.n	8004840 <_malloc_r+0xa8>
 8004868:	4623      	mov	r3, r4
 800486a:	6864      	ldr	r4, [r4, #4]
 800486c:	e7ae      	b.n	80047cc <_malloc_r+0x34>
 800486e:	463c      	mov	r4, r7
 8004870:	687f      	ldr	r7, [r7, #4]
 8004872:	e7b6      	b.n	80047e2 <_malloc_r+0x4a>
 8004874:	461a      	mov	r2, r3
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	42a3      	cmp	r3, r4
 800487a:	d1fb      	bne.n	8004874 <_malloc_r+0xdc>
 800487c:	2300      	movs	r3, #0
 800487e:	6053      	str	r3, [r2, #4]
 8004880:	e7de      	b.n	8004840 <_malloc_r+0xa8>
 8004882:	230c      	movs	r3, #12
 8004884:	4630      	mov	r0, r6
 8004886:	6033      	str	r3, [r6, #0]
 8004888:	f000 f80c 	bl	80048a4 <__malloc_unlock>
 800488c:	e794      	b.n	80047b8 <_malloc_r+0x20>
 800488e:	6005      	str	r5, [r0, #0]
 8004890:	e7d6      	b.n	8004840 <_malloc_r+0xa8>
 8004892:	bf00      	nop
 8004894:	20000264 	.word	0x20000264

08004898 <__malloc_lock>:
 8004898:	4801      	ldr	r0, [pc, #4]	@ (80048a0 <__malloc_lock+0x8>)
 800489a:	f000 baac 	b.w	8004df6 <__retarget_lock_acquire_recursive>
 800489e:	bf00      	nop
 80048a0:	200003a8 	.word	0x200003a8

080048a4 <__malloc_unlock>:
 80048a4:	4801      	ldr	r0, [pc, #4]	@ (80048ac <__malloc_unlock+0x8>)
 80048a6:	f000 baa7 	b.w	8004df8 <__retarget_lock_release_recursive>
 80048aa:	bf00      	nop
 80048ac:	200003a8 	.word	0x200003a8

080048b0 <std>:
 80048b0:	2300      	movs	r3, #0
 80048b2:	b510      	push	{r4, lr}
 80048b4:	4604      	mov	r4, r0
 80048b6:	6083      	str	r3, [r0, #8]
 80048b8:	8181      	strh	r1, [r0, #12]
 80048ba:	4619      	mov	r1, r3
 80048bc:	6643      	str	r3, [r0, #100]	@ 0x64
 80048be:	81c2      	strh	r2, [r0, #14]
 80048c0:	2208      	movs	r2, #8
 80048c2:	6183      	str	r3, [r0, #24]
 80048c4:	e9c0 3300 	strd	r3, r3, [r0]
 80048c8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048cc:	305c      	adds	r0, #92	@ 0x5c
 80048ce:	f000 fa09 	bl	8004ce4 <memset>
 80048d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004908 <std+0x58>)
 80048d4:	6224      	str	r4, [r4, #32]
 80048d6:	6263      	str	r3, [r4, #36]	@ 0x24
 80048d8:	4b0c      	ldr	r3, [pc, #48]	@ (800490c <std+0x5c>)
 80048da:	62a3      	str	r3, [r4, #40]	@ 0x28
 80048dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004910 <std+0x60>)
 80048de:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80048e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004914 <std+0x64>)
 80048e2:	6323      	str	r3, [r4, #48]	@ 0x30
 80048e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004918 <std+0x68>)
 80048e6:	429c      	cmp	r4, r3
 80048e8:	d006      	beq.n	80048f8 <std+0x48>
 80048ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80048ee:	4294      	cmp	r4, r2
 80048f0:	d002      	beq.n	80048f8 <std+0x48>
 80048f2:	33d0      	adds	r3, #208	@ 0xd0
 80048f4:	429c      	cmp	r4, r3
 80048f6:	d105      	bne.n	8004904 <std+0x54>
 80048f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80048fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004900:	f000 ba78 	b.w	8004df4 <__retarget_lock_init_recursive>
 8004904:	bd10      	pop	{r4, pc}
 8004906:	bf00      	nop
 8004908:	08004b15 	.word	0x08004b15
 800490c:	08004b37 	.word	0x08004b37
 8004910:	08004b6f 	.word	0x08004b6f
 8004914:	08004b93 	.word	0x08004b93
 8004918:	20000268 	.word	0x20000268

0800491c <stdio_exit_handler>:
 800491c:	4a02      	ldr	r2, [pc, #8]	@ (8004928 <stdio_exit_handler+0xc>)
 800491e:	4903      	ldr	r1, [pc, #12]	@ (800492c <stdio_exit_handler+0x10>)
 8004920:	4803      	ldr	r0, [pc, #12]	@ (8004930 <stdio_exit_handler+0x14>)
 8004922:	f000 b869 	b.w	80049f8 <_fwalk_sglue>
 8004926:	bf00      	nop
 8004928:	20000034 	.word	0x20000034
 800492c:	0800553d 	.word	0x0800553d
 8004930:	20000044 	.word	0x20000044

08004934 <cleanup_stdio>:
 8004934:	6841      	ldr	r1, [r0, #4]
 8004936:	4b0c      	ldr	r3, [pc, #48]	@ (8004968 <cleanup_stdio+0x34>)
 8004938:	4299      	cmp	r1, r3
 800493a:	b510      	push	{r4, lr}
 800493c:	4604      	mov	r4, r0
 800493e:	d001      	beq.n	8004944 <cleanup_stdio+0x10>
 8004940:	f000 fdfc 	bl	800553c <_fflush_r>
 8004944:	68a1      	ldr	r1, [r4, #8]
 8004946:	4b09      	ldr	r3, [pc, #36]	@ (800496c <cleanup_stdio+0x38>)
 8004948:	4299      	cmp	r1, r3
 800494a:	d002      	beq.n	8004952 <cleanup_stdio+0x1e>
 800494c:	4620      	mov	r0, r4
 800494e:	f000 fdf5 	bl	800553c <_fflush_r>
 8004952:	68e1      	ldr	r1, [r4, #12]
 8004954:	4b06      	ldr	r3, [pc, #24]	@ (8004970 <cleanup_stdio+0x3c>)
 8004956:	4299      	cmp	r1, r3
 8004958:	d004      	beq.n	8004964 <cleanup_stdio+0x30>
 800495a:	4620      	mov	r0, r4
 800495c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004960:	f000 bdec 	b.w	800553c <_fflush_r>
 8004964:	bd10      	pop	{r4, pc}
 8004966:	bf00      	nop
 8004968:	20000268 	.word	0x20000268
 800496c:	200002d0 	.word	0x200002d0
 8004970:	20000338 	.word	0x20000338

08004974 <global_stdio_init.part.0>:
 8004974:	b510      	push	{r4, lr}
 8004976:	4b0b      	ldr	r3, [pc, #44]	@ (80049a4 <global_stdio_init.part.0+0x30>)
 8004978:	2104      	movs	r1, #4
 800497a:	4c0b      	ldr	r4, [pc, #44]	@ (80049a8 <global_stdio_init.part.0+0x34>)
 800497c:	4a0b      	ldr	r2, [pc, #44]	@ (80049ac <global_stdio_init.part.0+0x38>)
 800497e:	4620      	mov	r0, r4
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	2200      	movs	r2, #0
 8004984:	f7ff ff94 	bl	80048b0 <std>
 8004988:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800498c:	2201      	movs	r2, #1
 800498e:	2109      	movs	r1, #9
 8004990:	f7ff ff8e 	bl	80048b0 <std>
 8004994:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004998:	2202      	movs	r2, #2
 800499a:	2112      	movs	r1, #18
 800499c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049a0:	f7ff bf86 	b.w	80048b0 <std>
 80049a4:	200003a0 	.word	0x200003a0
 80049a8:	20000268 	.word	0x20000268
 80049ac:	0800491d 	.word	0x0800491d

080049b0 <__sfp_lock_acquire>:
 80049b0:	4801      	ldr	r0, [pc, #4]	@ (80049b8 <__sfp_lock_acquire+0x8>)
 80049b2:	f000 ba20 	b.w	8004df6 <__retarget_lock_acquire_recursive>
 80049b6:	bf00      	nop
 80049b8:	200003a9 	.word	0x200003a9

080049bc <__sfp_lock_release>:
 80049bc:	4801      	ldr	r0, [pc, #4]	@ (80049c4 <__sfp_lock_release+0x8>)
 80049be:	f000 ba1b 	b.w	8004df8 <__retarget_lock_release_recursive>
 80049c2:	bf00      	nop
 80049c4:	200003a9 	.word	0x200003a9

080049c8 <__sinit>:
 80049c8:	b510      	push	{r4, lr}
 80049ca:	4604      	mov	r4, r0
 80049cc:	f7ff fff0 	bl	80049b0 <__sfp_lock_acquire>
 80049d0:	6a23      	ldr	r3, [r4, #32]
 80049d2:	b11b      	cbz	r3, 80049dc <__sinit+0x14>
 80049d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049d8:	f7ff bff0 	b.w	80049bc <__sfp_lock_release>
 80049dc:	4b04      	ldr	r3, [pc, #16]	@ (80049f0 <__sinit+0x28>)
 80049de:	6223      	str	r3, [r4, #32]
 80049e0:	4b04      	ldr	r3, [pc, #16]	@ (80049f4 <__sinit+0x2c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1f5      	bne.n	80049d4 <__sinit+0xc>
 80049e8:	f7ff ffc4 	bl	8004974 <global_stdio_init.part.0>
 80049ec:	e7f2      	b.n	80049d4 <__sinit+0xc>
 80049ee:	bf00      	nop
 80049f0:	08004935 	.word	0x08004935
 80049f4:	200003a0 	.word	0x200003a0

080049f8 <_fwalk_sglue>:
 80049f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049fc:	4607      	mov	r7, r0
 80049fe:	4688      	mov	r8, r1
 8004a00:	4614      	mov	r4, r2
 8004a02:	2600      	movs	r6, #0
 8004a04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a08:	f1b9 0901 	subs.w	r9, r9, #1
 8004a0c:	d505      	bpl.n	8004a1a <_fwalk_sglue+0x22>
 8004a0e:	6824      	ldr	r4, [r4, #0]
 8004a10:	2c00      	cmp	r4, #0
 8004a12:	d1f7      	bne.n	8004a04 <_fwalk_sglue+0xc>
 8004a14:	4630      	mov	r0, r6
 8004a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a1a:	89ab      	ldrh	r3, [r5, #12]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d907      	bls.n	8004a30 <_fwalk_sglue+0x38>
 8004a20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a24:	3301      	adds	r3, #1
 8004a26:	d003      	beq.n	8004a30 <_fwalk_sglue+0x38>
 8004a28:	4629      	mov	r1, r5
 8004a2a:	4638      	mov	r0, r7
 8004a2c:	47c0      	blx	r8
 8004a2e:	4306      	orrs	r6, r0
 8004a30:	3568      	adds	r5, #104	@ 0x68
 8004a32:	e7e9      	b.n	8004a08 <_fwalk_sglue+0x10>

08004a34 <iprintf>:
 8004a34:	b40f      	push	{r0, r1, r2, r3}
 8004a36:	b507      	push	{r0, r1, r2, lr}
 8004a38:	4906      	ldr	r1, [pc, #24]	@ (8004a54 <iprintf+0x20>)
 8004a3a:	ab04      	add	r3, sp, #16
 8004a3c:	6808      	ldr	r0, [r1, #0]
 8004a3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a42:	6881      	ldr	r1, [r0, #8]
 8004a44:	9301      	str	r3, [sp, #4]
 8004a46:	f000 fa4d 	bl	8004ee4 <_vfiprintf_r>
 8004a4a:	b003      	add	sp, #12
 8004a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a50:	b004      	add	sp, #16
 8004a52:	4770      	bx	lr
 8004a54:	20000040 	.word	0x20000040

08004a58 <_puts_r>:
 8004a58:	6a03      	ldr	r3, [r0, #32]
 8004a5a:	b570      	push	{r4, r5, r6, lr}
 8004a5c:	4605      	mov	r5, r0
 8004a5e:	460e      	mov	r6, r1
 8004a60:	6884      	ldr	r4, [r0, #8]
 8004a62:	b90b      	cbnz	r3, 8004a68 <_puts_r+0x10>
 8004a64:	f7ff ffb0 	bl	80049c8 <__sinit>
 8004a68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a6a:	07db      	lsls	r3, r3, #31
 8004a6c:	d405      	bmi.n	8004a7a <_puts_r+0x22>
 8004a6e:	89a3      	ldrh	r3, [r4, #12]
 8004a70:	0598      	lsls	r0, r3, #22
 8004a72:	d402      	bmi.n	8004a7a <_puts_r+0x22>
 8004a74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a76:	f000 f9be 	bl	8004df6 <__retarget_lock_acquire_recursive>
 8004a7a:	89a3      	ldrh	r3, [r4, #12]
 8004a7c:	0719      	lsls	r1, r3, #28
 8004a7e:	d502      	bpl.n	8004a86 <_puts_r+0x2e>
 8004a80:	6923      	ldr	r3, [r4, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d135      	bne.n	8004af2 <_puts_r+0x9a>
 8004a86:	4621      	mov	r1, r4
 8004a88:	4628      	mov	r0, r5
 8004a8a:	f000 f8c5 	bl	8004c18 <__swsetup_r>
 8004a8e:	b380      	cbz	r0, 8004af2 <_puts_r+0x9a>
 8004a90:	f04f 35ff 	mov.w	r5, #4294967295
 8004a94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a96:	07da      	lsls	r2, r3, #31
 8004a98:	d405      	bmi.n	8004aa6 <_puts_r+0x4e>
 8004a9a:	89a3      	ldrh	r3, [r4, #12]
 8004a9c:	059b      	lsls	r3, r3, #22
 8004a9e:	d402      	bmi.n	8004aa6 <_puts_r+0x4e>
 8004aa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004aa2:	f000 f9a9 	bl	8004df8 <__retarget_lock_release_recursive>
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	bd70      	pop	{r4, r5, r6, pc}
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	da04      	bge.n	8004ab8 <_puts_r+0x60>
 8004aae:	69a2      	ldr	r2, [r4, #24]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	dc17      	bgt.n	8004ae4 <_puts_r+0x8c>
 8004ab4:	290a      	cmp	r1, #10
 8004ab6:	d015      	beq.n	8004ae4 <_puts_r+0x8c>
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	6022      	str	r2, [r4, #0]
 8004abe:	7019      	strb	r1, [r3, #0]
 8004ac0:	68a3      	ldr	r3, [r4, #8]
 8004ac2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	60a3      	str	r3, [r4, #8]
 8004aca:	2900      	cmp	r1, #0
 8004acc:	d1ed      	bne.n	8004aaa <_puts_r+0x52>
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	da11      	bge.n	8004af6 <_puts_r+0x9e>
 8004ad2:	4622      	mov	r2, r4
 8004ad4:	210a      	movs	r1, #10
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	f000 f85f 	bl	8004b9a <__swbuf_r>
 8004adc:	3001      	adds	r0, #1
 8004ade:	d0d7      	beq.n	8004a90 <_puts_r+0x38>
 8004ae0:	250a      	movs	r5, #10
 8004ae2:	e7d7      	b.n	8004a94 <_puts_r+0x3c>
 8004ae4:	4622      	mov	r2, r4
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	f000 f857 	bl	8004b9a <__swbuf_r>
 8004aec:	3001      	adds	r0, #1
 8004aee:	d1e7      	bne.n	8004ac0 <_puts_r+0x68>
 8004af0:	e7ce      	b.n	8004a90 <_puts_r+0x38>
 8004af2:	3e01      	subs	r6, #1
 8004af4:	e7e4      	b.n	8004ac0 <_puts_r+0x68>
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	6022      	str	r2, [r4, #0]
 8004afc:	220a      	movs	r2, #10
 8004afe:	701a      	strb	r2, [r3, #0]
 8004b00:	e7ee      	b.n	8004ae0 <_puts_r+0x88>
	...

08004b04 <puts>:
 8004b04:	4b02      	ldr	r3, [pc, #8]	@ (8004b10 <puts+0xc>)
 8004b06:	4601      	mov	r1, r0
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	f7ff bfa5 	b.w	8004a58 <_puts_r>
 8004b0e:	bf00      	nop
 8004b10:	20000040 	.word	0x20000040

08004b14 <__sread>:
 8004b14:	b510      	push	{r4, lr}
 8004b16:	460c      	mov	r4, r1
 8004b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b1c:	f000 f90c 	bl	8004d38 <_read_r>
 8004b20:	2800      	cmp	r0, #0
 8004b22:	bfab      	itete	ge
 8004b24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004b26:	89a3      	ldrhlt	r3, [r4, #12]
 8004b28:	181b      	addge	r3, r3, r0
 8004b2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004b2e:	bfac      	ite	ge
 8004b30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004b32:	81a3      	strhlt	r3, [r4, #12]
 8004b34:	bd10      	pop	{r4, pc}

08004b36 <__swrite>:
 8004b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b3a:	461f      	mov	r7, r3
 8004b3c:	898b      	ldrh	r3, [r1, #12]
 8004b3e:	4605      	mov	r5, r0
 8004b40:	460c      	mov	r4, r1
 8004b42:	05db      	lsls	r3, r3, #23
 8004b44:	4616      	mov	r6, r2
 8004b46:	d505      	bpl.n	8004b54 <__swrite+0x1e>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b50:	f000 f8e0 	bl	8004d14 <_lseek_r>
 8004b54:	89a3      	ldrh	r3, [r4, #12]
 8004b56:	4632      	mov	r2, r6
 8004b58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b62:	81a3      	strh	r3, [r4, #12]
 8004b64:	463b      	mov	r3, r7
 8004b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b6a:	f000 b907 	b.w	8004d7c <_write_r>

08004b6e <__sseek>:
 8004b6e:	b510      	push	{r4, lr}
 8004b70:	460c      	mov	r4, r1
 8004b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b76:	f000 f8cd 	bl	8004d14 <_lseek_r>
 8004b7a:	1c43      	adds	r3, r0, #1
 8004b7c:	89a3      	ldrh	r3, [r4, #12]
 8004b7e:	bf15      	itete	ne
 8004b80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b8a:	81a3      	strheq	r3, [r4, #12]
 8004b8c:	bf18      	it	ne
 8004b8e:	81a3      	strhne	r3, [r4, #12]
 8004b90:	bd10      	pop	{r4, pc}

08004b92 <__sclose>:
 8004b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b96:	f000 b8ad 	b.w	8004cf4 <_close_r>

08004b9a <__swbuf_r>:
 8004b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9c:	460e      	mov	r6, r1
 8004b9e:	4614      	mov	r4, r2
 8004ba0:	4605      	mov	r5, r0
 8004ba2:	b118      	cbz	r0, 8004bac <__swbuf_r+0x12>
 8004ba4:	6a03      	ldr	r3, [r0, #32]
 8004ba6:	b90b      	cbnz	r3, 8004bac <__swbuf_r+0x12>
 8004ba8:	f7ff ff0e 	bl	80049c8 <__sinit>
 8004bac:	69a3      	ldr	r3, [r4, #24]
 8004bae:	60a3      	str	r3, [r4, #8]
 8004bb0:	89a3      	ldrh	r3, [r4, #12]
 8004bb2:	071a      	lsls	r2, r3, #28
 8004bb4:	d501      	bpl.n	8004bba <__swbuf_r+0x20>
 8004bb6:	6923      	ldr	r3, [r4, #16]
 8004bb8:	b943      	cbnz	r3, 8004bcc <__swbuf_r+0x32>
 8004bba:	4621      	mov	r1, r4
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	f000 f82b 	bl	8004c18 <__swsetup_r>
 8004bc2:	b118      	cbz	r0, 8004bcc <__swbuf_r+0x32>
 8004bc4:	f04f 37ff 	mov.w	r7, #4294967295
 8004bc8:	4638      	mov	r0, r7
 8004bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	b2f6      	uxtb	r6, r6
 8004bd0:	6922      	ldr	r2, [r4, #16]
 8004bd2:	4637      	mov	r7, r6
 8004bd4:	1a98      	subs	r0, r3, r2
 8004bd6:	6963      	ldr	r3, [r4, #20]
 8004bd8:	4283      	cmp	r3, r0
 8004bda:	dc05      	bgt.n	8004be8 <__swbuf_r+0x4e>
 8004bdc:	4621      	mov	r1, r4
 8004bde:	4628      	mov	r0, r5
 8004be0:	f000 fcac 	bl	800553c <_fflush_r>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	d1ed      	bne.n	8004bc4 <__swbuf_r+0x2a>
 8004be8:	68a3      	ldr	r3, [r4, #8]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	60a3      	str	r3, [r4, #8]
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	6022      	str	r2, [r4, #0]
 8004bf4:	701e      	strb	r6, [r3, #0]
 8004bf6:	1c43      	adds	r3, r0, #1
 8004bf8:	6962      	ldr	r2, [r4, #20]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d004      	beq.n	8004c08 <__swbuf_r+0x6e>
 8004bfe:	89a3      	ldrh	r3, [r4, #12]
 8004c00:	07db      	lsls	r3, r3, #31
 8004c02:	d5e1      	bpl.n	8004bc8 <__swbuf_r+0x2e>
 8004c04:	2e0a      	cmp	r6, #10
 8004c06:	d1df      	bne.n	8004bc8 <__swbuf_r+0x2e>
 8004c08:	4621      	mov	r1, r4
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	f000 fc96 	bl	800553c <_fflush_r>
 8004c10:	2800      	cmp	r0, #0
 8004c12:	d0d9      	beq.n	8004bc8 <__swbuf_r+0x2e>
 8004c14:	e7d6      	b.n	8004bc4 <__swbuf_r+0x2a>
	...

08004c18 <__swsetup_r>:
 8004c18:	b538      	push	{r3, r4, r5, lr}
 8004c1a:	4b29      	ldr	r3, [pc, #164]	@ (8004cc0 <__swsetup_r+0xa8>)
 8004c1c:	4605      	mov	r5, r0
 8004c1e:	460c      	mov	r4, r1
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	b118      	cbz	r0, 8004c2c <__swsetup_r+0x14>
 8004c24:	6a03      	ldr	r3, [r0, #32]
 8004c26:	b90b      	cbnz	r3, 8004c2c <__swsetup_r+0x14>
 8004c28:	f7ff fece 	bl	80049c8 <__sinit>
 8004c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c30:	0719      	lsls	r1, r3, #28
 8004c32:	d422      	bmi.n	8004c7a <__swsetup_r+0x62>
 8004c34:	06da      	lsls	r2, r3, #27
 8004c36:	d407      	bmi.n	8004c48 <__swsetup_r+0x30>
 8004c38:	2209      	movs	r2, #9
 8004c3a:	602a      	str	r2, [r5, #0]
 8004c3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c40:	f04f 30ff 	mov.w	r0, #4294967295
 8004c44:	81a3      	strh	r3, [r4, #12]
 8004c46:	e033      	b.n	8004cb0 <__swsetup_r+0x98>
 8004c48:	0758      	lsls	r0, r3, #29
 8004c4a:	d512      	bpl.n	8004c72 <__swsetup_r+0x5a>
 8004c4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c4e:	b141      	cbz	r1, 8004c62 <__swsetup_r+0x4a>
 8004c50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c54:	4299      	cmp	r1, r3
 8004c56:	d002      	beq.n	8004c5e <__swsetup_r+0x46>
 8004c58:	4628      	mov	r0, r5
 8004c5a:	f000 f8cf 	bl	8004dfc <_free_r>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c62:	89a3      	ldrh	r3, [r4, #12]
 8004c64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c68:	81a3      	strh	r3, [r4, #12]
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	6063      	str	r3, [r4, #4]
 8004c6e:	6923      	ldr	r3, [r4, #16]
 8004c70:	6023      	str	r3, [r4, #0]
 8004c72:	89a3      	ldrh	r3, [r4, #12]
 8004c74:	f043 0308 	orr.w	r3, r3, #8
 8004c78:	81a3      	strh	r3, [r4, #12]
 8004c7a:	6923      	ldr	r3, [r4, #16]
 8004c7c:	b94b      	cbnz	r3, 8004c92 <__swsetup_r+0x7a>
 8004c7e:	89a3      	ldrh	r3, [r4, #12]
 8004c80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c88:	d003      	beq.n	8004c92 <__swsetup_r+0x7a>
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	f000 fca2 	bl	80055d6 <__smakebuf_r>
 8004c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c96:	f013 0201 	ands.w	r2, r3, #1
 8004c9a:	d00a      	beq.n	8004cb2 <__swsetup_r+0x9a>
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	60a2      	str	r2, [r4, #8]
 8004ca0:	6962      	ldr	r2, [r4, #20]
 8004ca2:	4252      	negs	r2, r2
 8004ca4:	61a2      	str	r2, [r4, #24]
 8004ca6:	6922      	ldr	r2, [r4, #16]
 8004ca8:	b942      	cbnz	r2, 8004cbc <__swsetup_r+0xa4>
 8004caa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004cae:	d1c5      	bne.n	8004c3c <__swsetup_r+0x24>
 8004cb0:	bd38      	pop	{r3, r4, r5, pc}
 8004cb2:	0799      	lsls	r1, r3, #30
 8004cb4:	bf58      	it	pl
 8004cb6:	6962      	ldrpl	r2, [r4, #20]
 8004cb8:	60a2      	str	r2, [r4, #8]
 8004cba:	e7f4      	b.n	8004ca6 <__swsetup_r+0x8e>
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	e7f7      	b.n	8004cb0 <__swsetup_r+0x98>
 8004cc0:	20000040 	.word	0x20000040

08004cc4 <memcmp>:
 8004cc4:	3901      	subs	r1, #1
 8004cc6:	4402      	add	r2, r0
 8004cc8:	b510      	push	{r4, lr}
 8004cca:	4290      	cmp	r0, r2
 8004ccc:	d101      	bne.n	8004cd2 <memcmp+0xe>
 8004cce:	2000      	movs	r0, #0
 8004cd0:	e005      	b.n	8004cde <memcmp+0x1a>
 8004cd2:	7803      	ldrb	r3, [r0, #0]
 8004cd4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004cd8:	42a3      	cmp	r3, r4
 8004cda:	d001      	beq.n	8004ce0 <memcmp+0x1c>
 8004cdc:	1b18      	subs	r0, r3, r4
 8004cde:	bd10      	pop	{r4, pc}
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	e7f2      	b.n	8004cca <memcmp+0x6>

08004ce4 <memset>:
 8004ce4:	4402      	add	r2, r0
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d100      	bne.n	8004cee <memset+0xa>
 8004cec:	4770      	bx	lr
 8004cee:	f803 1b01 	strb.w	r1, [r3], #1
 8004cf2:	e7f9      	b.n	8004ce8 <memset+0x4>

08004cf4 <_close_r>:
 8004cf4:	b538      	push	{r3, r4, r5, lr}
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	4d05      	ldr	r5, [pc, #20]	@ (8004d10 <_close_r+0x1c>)
 8004cfa:	4604      	mov	r4, r0
 8004cfc:	4608      	mov	r0, r1
 8004cfe:	602b      	str	r3, [r5, #0]
 8004d00:	f7fb ff43 	bl	8000b8a <_close>
 8004d04:	1c43      	adds	r3, r0, #1
 8004d06:	d102      	bne.n	8004d0e <_close_r+0x1a>
 8004d08:	682b      	ldr	r3, [r5, #0]
 8004d0a:	b103      	cbz	r3, 8004d0e <_close_r+0x1a>
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	bd38      	pop	{r3, r4, r5, pc}
 8004d10:	200003a4 	.word	0x200003a4

08004d14 <_lseek_r>:
 8004d14:	b538      	push	{r3, r4, r5, lr}
 8004d16:	4604      	mov	r4, r0
 8004d18:	4d06      	ldr	r5, [pc, #24]	@ (8004d34 <_lseek_r+0x20>)
 8004d1a:	4608      	mov	r0, r1
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	2200      	movs	r2, #0
 8004d20:	602a      	str	r2, [r5, #0]
 8004d22:	461a      	mov	r2, r3
 8004d24:	f7fb ff58 	bl	8000bd8 <_lseek>
 8004d28:	1c43      	adds	r3, r0, #1
 8004d2a:	d102      	bne.n	8004d32 <_lseek_r+0x1e>
 8004d2c:	682b      	ldr	r3, [r5, #0]
 8004d2e:	b103      	cbz	r3, 8004d32 <_lseek_r+0x1e>
 8004d30:	6023      	str	r3, [r4, #0]
 8004d32:	bd38      	pop	{r3, r4, r5, pc}
 8004d34:	200003a4 	.word	0x200003a4

08004d38 <_read_r>:
 8004d38:	b538      	push	{r3, r4, r5, lr}
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	4d06      	ldr	r5, [pc, #24]	@ (8004d58 <_read_r+0x20>)
 8004d3e:	4608      	mov	r0, r1
 8004d40:	4611      	mov	r1, r2
 8004d42:	2200      	movs	r2, #0
 8004d44:	602a      	str	r2, [r5, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	f7fb fee6 	bl	8000b18 <_read>
 8004d4c:	1c43      	adds	r3, r0, #1
 8004d4e:	d102      	bne.n	8004d56 <_read_r+0x1e>
 8004d50:	682b      	ldr	r3, [r5, #0]
 8004d52:	b103      	cbz	r3, 8004d56 <_read_r+0x1e>
 8004d54:	6023      	str	r3, [r4, #0]
 8004d56:	bd38      	pop	{r3, r4, r5, pc}
 8004d58:	200003a4 	.word	0x200003a4

08004d5c <_sbrk_r>:
 8004d5c:	b538      	push	{r3, r4, r5, lr}
 8004d5e:	2300      	movs	r3, #0
 8004d60:	4d05      	ldr	r5, [pc, #20]	@ (8004d78 <_sbrk_r+0x1c>)
 8004d62:	4604      	mov	r4, r0
 8004d64:	4608      	mov	r0, r1
 8004d66:	602b      	str	r3, [r5, #0]
 8004d68:	f7fb ff44 	bl	8000bf4 <_sbrk>
 8004d6c:	1c43      	adds	r3, r0, #1
 8004d6e:	d102      	bne.n	8004d76 <_sbrk_r+0x1a>
 8004d70:	682b      	ldr	r3, [r5, #0]
 8004d72:	b103      	cbz	r3, 8004d76 <_sbrk_r+0x1a>
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	bd38      	pop	{r3, r4, r5, pc}
 8004d78:	200003a4 	.word	0x200003a4

08004d7c <_write_r>:
 8004d7c:	b538      	push	{r3, r4, r5, lr}
 8004d7e:	4604      	mov	r4, r0
 8004d80:	4d06      	ldr	r5, [pc, #24]	@ (8004d9c <_write_r+0x20>)
 8004d82:	4608      	mov	r0, r1
 8004d84:	4611      	mov	r1, r2
 8004d86:	2200      	movs	r2, #0
 8004d88:	602a      	str	r2, [r5, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f7fb fee1 	bl	8000b52 <_write>
 8004d90:	1c43      	adds	r3, r0, #1
 8004d92:	d102      	bne.n	8004d9a <_write_r+0x1e>
 8004d94:	682b      	ldr	r3, [r5, #0]
 8004d96:	b103      	cbz	r3, 8004d9a <_write_r+0x1e>
 8004d98:	6023      	str	r3, [r4, #0]
 8004d9a:	bd38      	pop	{r3, r4, r5, pc}
 8004d9c:	200003a4 	.word	0x200003a4

08004da0 <__errno>:
 8004da0:	4b01      	ldr	r3, [pc, #4]	@ (8004da8 <__errno+0x8>)
 8004da2:	6818      	ldr	r0, [r3, #0]
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	20000040 	.word	0x20000040

08004dac <__libc_init_array>:
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	4d0d      	ldr	r5, [pc, #52]	@ (8004de4 <__libc_init_array+0x38>)
 8004db0:	2600      	movs	r6, #0
 8004db2:	4c0d      	ldr	r4, [pc, #52]	@ (8004de8 <__libc_init_array+0x3c>)
 8004db4:	1b64      	subs	r4, r4, r5
 8004db6:	10a4      	asrs	r4, r4, #2
 8004db8:	42a6      	cmp	r6, r4
 8004dba:	d109      	bne.n	8004dd0 <__libc_init_array+0x24>
 8004dbc:	4d0b      	ldr	r5, [pc, #44]	@ (8004dec <__libc_init_array+0x40>)
 8004dbe:	2600      	movs	r6, #0
 8004dc0:	4c0b      	ldr	r4, [pc, #44]	@ (8004df0 <__libc_init_array+0x44>)
 8004dc2:	f000 fc75 	bl	80056b0 <_init>
 8004dc6:	1b64      	subs	r4, r4, r5
 8004dc8:	10a4      	asrs	r4, r4, #2
 8004dca:	42a6      	cmp	r6, r4
 8004dcc:	d105      	bne.n	8004dda <__libc_init_array+0x2e>
 8004dce:	bd70      	pop	{r4, r5, r6, pc}
 8004dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd4:	3601      	adds	r6, #1
 8004dd6:	4798      	blx	r3
 8004dd8:	e7ee      	b.n	8004db8 <__libc_init_array+0xc>
 8004dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dde:	3601      	adds	r6, #1
 8004de0:	4798      	blx	r3
 8004de2:	e7f2      	b.n	8004dca <__libc_init_array+0x1e>
 8004de4:	08005978 	.word	0x08005978
 8004de8:	08005978 	.word	0x08005978
 8004dec:	08005978 	.word	0x08005978
 8004df0:	0800597c 	.word	0x0800597c

08004df4 <__retarget_lock_init_recursive>:
 8004df4:	4770      	bx	lr

08004df6 <__retarget_lock_acquire_recursive>:
 8004df6:	4770      	bx	lr

08004df8 <__retarget_lock_release_recursive>:
 8004df8:	4770      	bx	lr
	...

08004dfc <_free_r>:
 8004dfc:	b538      	push	{r3, r4, r5, lr}
 8004dfe:	4605      	mov	r5, r0
 8004e00:	2900      	cmp	r1, #0
 8004e02:	d041      	beq.n	8004e88 <_free_r+0x8c>
 8004e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e08:	1f0c      	subs	r4, r1, #4
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	bfb8      	it	lt
 8004e0e:	18e4      	addlt	r4, r4, r3
 8004e10:	f7ff fd42 	bl	8004898 <__malloc_lock>
 8004e14:	4a1d      	ldr	r2, [pc, #116]	@ (8004e8c <_free_r+0x90>)
 8004e16:	6813      	ldr	r3, [r2, #0]
 8004e18:	b933      	cbnz	r3, 8004e28 <_free_r+0x2c>
 8004e1a:	6063      	str	r3, [r4, #4]
 8004e1c:	6014      	str	r4, [r2, #0]
 8004e1e:	4628      	mov	r0, r5
 8004e20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e24:	f7ff bd3e 	b.w	80048a4 <__malloc_unlock>
 8004e28:	42a3      	cmp	r3, r4
 8004e2a:	d908      	bls.n	8004e3e <_free_r+0x42>
 8004e2c:	6820      	ldr	r0, [r4, #0]
 8004e2e:	1821      	adds	r1, r4, r0
 8004e30:	428b      	cmp	r3, r1
 8004e32:	bf01      	itttt	eq
 8004e34:	6819      	ldreq	r1, [r3, #0]
 8004e36:	685b      	ldreq	r3, [r3, #4]
 8004e38:	1809      	addeq	r1, r1, r0
 8004e3a:	6021      	streq	r1, [r4, #0]
 8004e3c:	e7ed      	b.n	8004e1a <_free_r+0x1e>
 8004e3e:	461a      	mov	r2, r3
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	b10b      	cbz	r3, 8004e48 <_free_r+0x4c>
 8004e44:	42a3      	cmp	r3, r4
 8004e46:	d9fa      	bls.n	8004e3e <_free_r+0x42>
 8004e48:	6811      	ldr	r1, [r2, #0]
 8004e4a:	1850      	adds	r0, r2, r1
 8004e4c:	42a0      	cmp	r0, r4
 8004e4e:	d10b      	bne.n	8004e68 <_free_r+0x6c>
 8004e50:	6820      	ldr	r0, [r4, #0]
 8004e52:	4401      	add	r1, r0
 8004e54:	1850      	adds	r0, r2, r1
 8004e56:	6011      	str	r1, [r2, #0]
 8004e58:	4283      	cmp	r3, r0
 8004e5a:	d1e0      	bne.n	8004e1e <_free_r+0x22>
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	4408      	add	r0, r1
 8004e62:	6053      	str	r3, [r2, #4]
 8004e64:	6010      	str	r0, [r2, #0]
 8004e66:	e7da      	b.n	8004e1e <_free_r+0x22>
 8004e68:	d902      	bls.n	8004e70 <_free_r+0x74>
 8004e6a:	230c      	movs	r3, #12
 8004e6c:	602b      	str	r3, [r5, #0]
 8004e6e:	e7d6      	b.n	8004e1e <_free_r+0x22>
 8004e70:	6820      	ldr	r0, [r4, #0]
 8004e72:	1821      	adds	r1, r4, r0
 8004e74:	428b      	cmp	r3, r1
 8004e76:	bf02      	ittt	eq
 8004e78:	6819      	ldreq	r1, [r3, #0]
 8004e7a:	685b      	ldreq	r3, [r3, #4]
 8004e7c:	1809      	addeq	r1, r1, r0
 8004e7e:	6063      	str	r3, [r4, #4]
 8004e80:	bf08      	it	eq
 8004e82:	6021      	streq	r1, [r4, #0]
 8004e84:	6054      	str	r4, [r2, #4]
 8004e86:	e7ca      	b.n	8004e1e <_free_r+0x22>
 8004e88:	bd38      	pop	{r3, r4, r5, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20000264 	.word	0x20000264

08004e90 <__sfputc_r>:
 8004e90:	6893      	ldr	r3, [r2, #8]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	b410      	push	{r4}
 8004e98:	6093      	str	r3, [r2, #8]
 8004e9a:	da08      	bge.n	8004eae <__sfputc_r+0x1e>
 8004e9c:	6994      	ldr	r4, [r2, #24]
 8004e9e:	42a3      	cmp	r3, r4
 8004ea0:	db01      	blt.n	8004ea6 <__sfputc_r+0x16>
 8004ea2:	290a      	cmp	r1, #10
 8004ea4:	d103      	bne.n	8004eae <__sfputc_r+0x1e>
 8004ea6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eaa:	f7ff be76 	b.w	8004b9a <__swbuf_r>
 8004eae:	6813      	ldr	r3, [r2, #0]
 8004eb0:	1c58      	adds	r0, r3, #1
 8004eb2:	6010      	str	r0, [r2, #0]
 8004eb4:	4608      	mov	r0, r1
 8004eb6:	7019      	strb	r1, [r3, #0]
 8004eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <__sfputs_r>:
 8004ebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec0:	4606      	mov	r6, r0
 8004ec2:	460f      	mov	r7, r1
 8004ec4:	4614      	mov	r4, r2
 8004ec6:	18d5      	adds	r5, r2, r3
 8004ec8:	42ac      	cmp	r4, r5
 8004eca:	d101      	bne.n	8004ed0 <__sfputs_r+0x12>
 8004ecc:	2000      	movs	r0, #0
 8004ece:	e007      	b.n	8004ee0 <__sfputs_r+0x22>
 8004ed0:	463a      	mov	r2, r7
 8004ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	f7ff ffda 	bl	8004e90 <__sfputc_r>
 8004edc:	1c43      	adds	r3, r0, #1
 8004ede:	d1f3      	bne.n	8004ec8 <__sfputs_r+0xa>
 8004ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ee4 <_vfiprintf_r>:
 8004ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee8:	460d      	mov	r5, r1
 8004eea:	b09d      	sub	sp, #116	@ 0x74
 8004eec:	4614      	mov	r4, r2
 8004eee:	4698      	mov	r8, r3
 8004ef0:	4606      	mov	r6, r0
 8004ef2:	b118      	cbz	r0, 8004efc <_vfiprintf_r+0x18>
 8004ef4:	6a03      	ldr	r3, [r0, #32]
 8004ef6:	b90b      	cbnz	r3, 8004efc <_vfiprintf_r+0x18>
 8004ef8:	f7ff fd66 	bl	80049c8 <__sinit>
 8004efc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004efe:	07d9      	lsls	r1, r3, #31
 8004f00:	d405      	bmi.n	8004f0e <_vfiprintf_r+0x2a>
 8004f02:	89ab      	ldrh	r3, [r5, #12]
 8004f04:	059a      	lsls	r2, r3, #22
 8004f06:	d402      	bmi.n	8004f0e <_vfiprintf_r+0x2a>
 8004f08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f0a:	f7ff ff74 	bl	8004df6 <__retarget_lock_acquire_recursive>
 8004f0e:	89ab      	ldrh	r3, [r5, #12]
 8004f10:	071b      	lsls	r3, r3, #28
 8004f12:	d501      	bpl.n	8004f18 <_vfiprintf_r+0x34>
 8004f14:	692b      	ldr	r3, [r5, #16]
 8004f16:	b99b      	cbnz	r3, 8004f40 <_vfiprintf_r+0x5c>
 8004f18:	4629      	mov	r1, r5
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	f7ff fe7c 	bl	8004c18 <__swsetup_r>
 8004f20:	b170      	cbz	r0, 8004f40 <_vfiprintf_r+0x5c>
 8004f22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f24:	07dc      	lsls	r4, r3, #31
 8004f26:	d504      	bpl.n	8004f32 <_vfiprintf_r+0x4e>
 8004f28:	f04f 30ff 	mov.w	r0, #4294967295
 8004f2c:	b01d      	add	sp, #116	@ 0x74
 8004f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f32:	89ab      	ldrh	r3, [r5, #12]
 8004f34:	0598      	lsls	r0, r3, #22
 8004f36:	d4f7      	bmi.n	8004f28 <_vfiprintf_r+0x44>
 8004f38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f3a:	f7ff ff5d 	bl	8004df8 <__retarget_lock_release_recursive>
 8004f3e:	e7f3      	b.n	8004f28 <_vfiprintf_r+0x44>
 8004f40:	2300      	movs	r3, #0
 8004f42:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f46:	f04f 0901 	mov.w	r9, #1
 8004f4a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8005100 <_vfiprintf_r+0x21c>
 8004f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f50:	2320      	movs	r3, #32
 8004f52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f56:	2330      	movs	r3, #48	@ 0x30
 8004f58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f5c:	4623      	mov	r3, r4
 8004f5e:	469a      	mov	sl, r3
 8004f60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f64:	b10a      	cbz	r2, 8004f6a <_vfiprintf_r+0x86>
 8004f66:	2a25      	cmp	r2, #37	@ 0x25
 8004f68:	d1f9      	bne.n	8004f5e <_vfiprintf_r+0x7a>
 8004f6a:	ebba 0b04 	subs.w	fp, sl, r4
 8004f6e:	d00b      	beq.n	8004f88 <_vfiprintf_r+0xa4>
 8004f70:	465b      	mov	r3, fp
 8004f72:	4622      	mov	r2, r4
 8004f74:	4629      	mov	r1, r5
 8004f76:	4630      	mov	r0, r6
 8004f78:	f7ff ffa1 	bl	8004ebe <__sfputs_r>
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	f000 80a7 	beq.w	80050d0 <_vfiprintf_r+0x1ec>
 8004f82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f84:	445a      	add	r2, fp
 8004f86:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f88:	f89a 3000 	ldrb.w	r3, [sl]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 809f 	beq.w	80050d0 <_vfiprintf_r+0x1ec>
 8004f92:	2300      	movs	r3, #0
 8004f94:	f04f 32ff 	mov.w	r2, #4294967295
 8004f98:	f10a 0a01 	add.w	sl, sl, #1
 8004f9c:	9304      	str	r3, [sp, #16]
 8004f9e:	9307      	str	r3, [sp, #28]
 8004fa0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004fa4:	931a      	str	r3, [sp, #104]	@ 0x68
 8004fa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004faa:	4654      	mov	r4, sl
 8004fac:	2205      	movs	r2, #5
 8004fae:	4854      	ldr	r0, [pc, #336]	@ (8005100 <_vfiprintf_r+0x21c>)
 8004fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fb4:	f000 fb6e 	bl	8005694 <memchr>
 8004fb8:	9a04      	ldr	r2, [sp, #16]
 8004fba:	b9d8      	cbnz	r0, 8004ff4 <_vfiprintf_r+0x110>
 8004fbc:	06d1      	lsls	r1, r2, #27
 8004fbe:	bf44      	itt	mi
 8004fc0:	2320      	movmi	r3, #32
 8004fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fc6:	0713      	lsls	r3, r2, #28
 8004fc8:	bf44      	itt	mi
 8004fca:	232b      	movmi	r3, #43	@ 0x2b
 8004fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8004fd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fd6:	d015      	beq.n	8005004 <_vfiprintf_r+0x120>
 8004fd8:	9a07      	ldr	r2, [sp, #28]
 8004fda:	4654      	mov	r4, sl
 8004fdc:	2000      	movs	r0, #0
 8004fde:	f04f 0c0a 	mov.w	ip, #10
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fe8:	3b30      	subs	r3, #48	@ 0x30
 8004fea:	2b09      	cmp	r3, #9
 8004fec:	d94b      	bls.n	8005086 <_vfiprintf_r+0x1a2>
 8004fee:	b1b0      	cbz	r0, 800501e <_vfiprintf_r+0x13a>
 8004ff0:	9207      	str	r2, [sp, #28]
 8004ff2:	e014      	b.n	800501e <_vfiprintf_r+0x13a>
 8004ff4:	eba0 0308 	sub.w	r3, r0, r8
 8004ff8:	46a2      	mov	sl, r4
 8004ffa:	fa09 f303 	lsl.w	r3, r9, r3
 8004ffe:	4313      	orrs	r3, r2
 8005000:	9304      	str	r3, [sp, #16]
 8005002:	e7d2      	b.n	8004faa <_vfiprintf_r+0xc6>
 8005004:	9b03      	ldr	r3, [sp, #12]
 8005006:	1d19      	adds	r1, r3, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	9103      	str	r1, [sp, #12]
 800500e:	bfbb      	ittet	lt
 8005010:	425b      	neglt	r3, r3
 8005012:	f042 0202 	orrlt.w	r2, r2, #2
 8005016:	9307      	strge	r3, [sp, #28]
 8005018:	9307      	strlt	r3, [sp, #28]
 800501a:	bfb8      	it	lt
 800501c:	9204      	strlt	r2, [sp, #16]
 800501e:	7823      	ldrb	r3, [r4, #0]
 8005020:	2b2e      	cmp	r3, #46	@ 0x2e
 8005022:	d10a      	bne.n	800503a <_vfiprintf_r+0x156>
 8005024:	7863      	ldrb	r3, [r4, #1]
 8005026:	2b2a      	cmp	r3, #42	@ 0x2a
 8005028:	d132      	bne.n	8005090 <_vfiprintf_r+0x1ac>
 800502a:	9b03      	ldr	r3, [sp, #12]
 800502c:	3402      	adds	r4, #2
 800502e:	1d1a      	adds	r2, r3, #4
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005036:	9203      	str	r2, [sp, #12]
 8005038:	9305      	str	r3, [sp, #20]
 800503a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005110 <_vfiprintf_r+0x22c>
 800503e:	2203      	movs	r2, #3
 8005040:	7821      	ldrb	r1, [r4, #0]
 8005042:	4650      	mov	r0, sl
 8005044:	f000 fb26 	bl	8005694 <memchr>
 8005048:	b138      	cbz	r0, 800505a <_vfiprintf_r+0x176>
 800504a:	eba0 000a 	sub.w	r0, r0, sl
 800504e:	2240      	movs	r2, #64	@ 0x40
 8005050:	9b04      	ldr	r3, [sp, #16]
 8005052:	3401      	adds	r4, #1
 8005054:	4082      	lsls	r2, r0
 8005056:	4313      	orrs	r3, r2
 8005058:	9304      	str	r3, [sp, #16]
 800505a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800505e:	2206      	movs	r2, #6
 8005060:	4828      	ldr	r0, [pc, #160]	@ (8005104 <_vfiprintf_r+0x220>)
 8005062:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005066:	f000 fb15 	bl	8005694 <memchr>
 800506a:	2800      	cmp	r0, #0
 800506c:	d03f      	beq.n	80050ee <_vfiprintf_r+0x20a>
 800506e:	4b26      	ldr	r3, [pc, #152]	@ (8005108 <_vfiprintf_r+0x224>)
 8005070:	bb1b      	cbnz	r3, 80050ba <_vfiprintf_r+0x1d6>
 8005072:	9b03      	ldr	r3, [sp, #12]
 8005074:	3307      	adds	r3, #7
 8005076:	f023 0307 	bic.w	r3, r3, #7
 800507a:	3308      	adds	r3, #8
 800507c:	9303      	str	r3, [sp, #12]
 800507e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005080:	443b      	add	r3, r7
 8005082:	9309      	str	r3, [sp, #36]	@ 0x24
 8005084:	e76a      	b.n	8004f5c <_vfiprintf_r+0x78>
 8005086:	fb0c 3202 	mla	r2, ip, r2, r3
 800508a:	460c      	mov	r4, r1
 800508c:	2001      	movs	r0, #1
 800508e:	e7a8      	b.n	8004fe2 <_vfiprintf_r+0xfe>
 8005090:	2300      	movs	r3, #0
 8005092:	3401      	adds	r4, #1
 8005094:	f04f 0c0a 	mov.w	ip, #10
 8005098:	4619      	mov	r1, r3
 800509a:	9305      	str	r3, [sp, #20]
 800509c:	4620      	mov	r0, r4
 800509e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050a2:	3a30      	subs	r2, #48	@ 0x30
 80050a4:	2a09      	cmp	r2, #9
 80050a6:	d903      	bls.n	80050b0 <_vfiprintf_r+0x1cc>
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0c6      	beq.n	800503a <_vfiprintf_r+0x156>
 80050ac:	9105      	str	r1, [sp, #20]
 80050ae:	e7c4      	b.n	800503a <_vfiprintf_r+0x156>
 80050b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80050b4:	4604      	mov	r4, r0
 80050b6:	2301      	movs	r3, #1
 80050b8:	e7f0      	b.n	800509c <_vfiprintf_r+0x1b8>
 80050ba:	ab03      	add	r3, sp, #12
 80050bc:	462a      	mov	r2, r5
 80050be:	a904      	add	r1, sp, #16
 80050c0:	4630      	mov	r0, r6
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	4b11      	ldr	r3, [pc, #68]	@ (800510c <_vfiprintf_r+0x228>)
 80050c6:	f3af 8000 	nop.w
 80050ca:	4607      	mov	r7, r0
 80050cc:	1c78      	adds	r0, r7, #1
 80050ce:	d1d6      	bne.n	800507e <_vfiprintf_r+0x19a>
 80050d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80050d2:	07d9      	lsls	r1, r3, #31
 80050d4:	d405      	bmi.n	80050e2 <_vfiprintf_r+0x1fe>
 80050d6:	89ab      	ldrh	r3, [r5, #12]
 80050d8:	059a      	lsls	r2, r3, #22
 80050da:	d402      	bmi.n	80050e2 <_vfiprintf_r+0x1fe>
 80050dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80050de:	f7ff fe8b 	bl	8004df8 <__retarget_lock_release_recursive>
 80050e2:	89ab      	ldrh	r3, [r5, #12]
 80050e4:	065b      	lsls	r3, r3, #25
 80050e6:	f53f af1f 	bmi.w	8004f28 <_vfiprintf_r+0x44>
 80050ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050ec:	e71e      	b.n	8004f2c <_vfiprintf_r+0x48>
 80050ee:	ab03      	add	r3, sp, #12
 80050f0:	462a      	mov	r2, r5
 80050f2:	a904      	add	r1, sp, #16
 80050f4:	4630      	mov	r0, r6
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	4b04      	ldr	r3, [pc, #16]	@ (800510c <_vfiprintf_r+0x228>)
 80050fa:	f000 f87d 	bl	80051f8 <_printf_i>
 80050fe:	e7e4      	b.n	80050ca <_vfiprintf_r+0x1e6>
 8005100:	0800593c 	.word	0x0800593c
 8005104:	08005946 	.word	0x08005946
 8005108:	00000000 	.word	0x00000000
 800510c:	08004ebf 	.word	0x08004ebf
 8005110:	08005942 	.word	0x08005942

08005114 <_printf_common>:
 8005114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005118:	4616      	mov	r6, r2
 800511a:	4698      	mov	r8, r3
 800511c:	688a      	ldr	r2, [r1, #8]
 800511e:	4607      	mov	r7, r0
 8005120:	690b      	ldr	r3, [r1, #16]
 8005122:	460c      	mov	r4, r1
 8005124:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005128:	4293      	cmp	r3, r2
 800512a:	bfb8      	it	lt
 800512c:	4613      	movlt	r3, r2
 800512e:	6033      	str	r3, [r6, #0]
 8005130:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005134:	b10a      	cbz	r2, 800513a <_printf_common+0x26>
 8005136:	3301      	adds	r3, #1
 8005138:	6033      	str	r3, [r6, #0]
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	0699      	lsls	r1, r3, #26
 800513e:	bf42      	ittt	mi
 8005140:	6833      	ldrmi	r3, [r6, #0]
 8005142:	3302      	addmi	r3, #2
 8005144:	6033      	strmi	r3, [r6, #0]
 8005146:	6825      	ldr	r5, [r4, #0]
 8005148:	f015 0506 	ands.w	r5, r5, #6
 800514c:	d106      	bne.n	800515c <_printf_common+0x48>
 800514e:	f104 0a19 	add.w	sl, r4, #25
 8005152:	68e3      	ldr	r3, [r4, #12]
 8005154:	6832      	ldr	r2, [r6, #0]
 8005156:	1a9b      	subs	r3, r3, r2
 8005158:	42ab      	cmp	r3, r5
 800515a:	dc2b      	bgt.n	80051b4 <_printf_common+0xa0>
 800515c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005160:	6822      	ldr	r2, [r4, #0]
 8005162:	3b00      	subs	r3, #0
 8005164:	bf18      	it	ne
 8005166:	2301      	movne	r3, #1
 8005168:	0692      	lsls	r2, r2, #26
 800516a:	d430      	bmi.n	80051ce <_printf_common+0xba>
 800516c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005170:	4641      	mov	r1, r8
 8005172:	4638      	mov	r0, r7
 8005174:	47c8      	blx	r9
 8005176:	3001      	adds	r0, #1
 8005178:	d023      	beq.n	80051c2 <_printf_common+0xae>
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	341a      	adds	r4, #26
 800517e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8005182:	f003 0306 	and.w	r3, r3, #6
 8005186:	2b04      	cmp	r3, #4
 8005188:	bf0a      	itet	eq
 800518a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800518e:	2500      	movne	r5, #0
 8005190:	6833      	ldreq	r3, [r6, #0]
 8005192:	f04f 0600 	mov.w	r6, #0
 8005196:	bf08      	it	eq
 8005198:	1aed      	subeq	r5, r5, r3
 800519a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800519e:	bf08      	it	eq
 80051a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051a4:	4293      	cmp	r3, r2
 80051a6:	bfc4      	itt	gt
 80051a8:	1a9b      	subgt	r3, r3, r2
 80051aa:	18ed      	addgt	r5, r5, r3
 80051ac:	42b5      	cmp	r5, r6
 80051ae:	d11a      	bne.n	80051e6 <_printf_common+0xd2>
 80051b0:	2000      	movs	r0, #0
 80051b2:	e008      	b.n	80051c6 <_printf_common+0xb2>
 80051b4:	2301      	movs	r3, #1
 80051b6:	4652      	mov	r2, sl
 80051b8:	4641      	mov	r1, r8
 80051ba:	4638      	mov	r0, r7
 80051bc:	47c8      	blx	r9
 80051be:	3001      	adds	r0, #1
 80051c0:	d103      	bne.n	80051ca <_printf_common+0xb6>
 80051c2:	f04f 30ff 	mov.w	r0, #4294967295
 80051c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ca:	3501      	adds	r5, #1
 80051cc:	e7c1      	b.n	8005152 <_printf_common+0x3e>
 80051ce:	18e1      	adds	r1, r4, r3
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	2030      	movs	r0, #48	@ 0x30
 80051d4:	3302      	adds	r3, #2
 80051d6:	4422      	add	r2, r4
 80051d8:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051e4:	e7c2      	b.n	800516c <_printf_common+0x58>
 80051e6:	2301      	movs	r3, #1
 80051e8:	4622      	mov	r2, r4
 80051ea:	4641      	mov	r1, r8
 80051ec:	4638      	mov	r0, r7
 80051ee:	47c8      	blx	r9
 80051f0:	3001      	adds	r0, #1
 80051f2:	d0e6      	beq.n	80051c2 <_printf_common+0xae>
 80051f4:	3601      	adds	r6, #1
 80051f6:	e7d9      	b.n	80051ac <_printf_common+0x98>

080051f8 <_printf_i>:
 80051f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051fc:	7e0f      	ldrb	r7, [r1, #24]
 80051fe:	4691      	mov	r9, r2
 8005200:	4680      	mov	r8, r0
 8005202:	460c      	mov	r4, r1
 8005204:	2f78      	cmp	r7, #120	@ 0x78
 8005206:	469a      	mov	sl, r3
 8005208:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800520a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800520e:	d807      	bhi.n	8005220 <_printf_i+0x28>
 8005210:	2f62      	cmp	r7, #98	@ 0x62
 8005212:	d80a      	bhi.n	800522a <_printf_i+0x32>
 8005214:	2f00      	cmp	r7, #0
 8005216:	f000 80d1 	beq.w	80053bc <_printf_i+0x1c4>
 800521a:	2f58      	cmp	r7, #88	@ 0x58
 800521c:	f000 80b8 	beq.w	8005390 <_printf_i+0x198>
 8005220:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005224:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005228:	e03a      	b.n	80052a0 <_printf_i+0xa8>
 800522a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800522e:	2b15      	cmp	r3, #21
 8005230:	d8f6      	bhi.n	8005220 <_printf_i+0x28>
 8005232:	a101      	add	r1, pc, #4	@ (adr r1, 8005238 <_printf_i+0x40>)
 8005234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005238:	08005291 	.word	0x08005291
 800523c:	080052a5 	.word	0x080052a5
 8005240:	08005221 	.word	0x08005221
 8005244:	08005221 	.word	0x08005221
 8005248:	08005221 	.word	0x08005221
 800524c:	08005221 	.word	0x08005221
 8005250:	080052a5 	.word	0x080052a5
 8005254:	08005221 	.word	0x08005221
 8005258:	08005221 	.word	0x08005221
 800525c:	08005221 	.word	0x08005221
 8005260:	08005221 	.word	0x08005221
 8005264:	080053a3 	.word	0x080053a3
 8005268:	080052cf 	.word	0x080052cf
 800526c:	0800535d 	.word	0x0800535d
 8005270:	08005221 	.word	0x08005221
 8005274:	08005221 	.word	0x08005221
 8005278:	080053c5 	.word	0x080053c5
 800527c:	08005221 	.word	0x08005221
 8005280:	080052cf 	.word	0x080052cf
 8005284:	08005221 	.word	0x08005221
 8005288:	08005221 	.word	0x08005221
 800528c:	08005365 	.word	0x08005365
 8005290:	6833      	ldr	r3, [r6, #0]
 8005292:	1d1a      	adds	r2, r3, #4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6032      	str	r2, [r6, #0]
 8005298:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800529c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80052a0:	2301      	movs	r3, #1
 80052a2:	e09c      	b.n	80053de <_printf_i+0x1e6>
 80052a4:	6833      	ldr	r3, [r6, #0]
 80052a6:	6820      	ldr	r0, [r4, #0]
 80052a8:	1d19      	adds	r1, r3, #4
 80052aa:	6031      	str	r1, [r6, #0]
 80052ac:	0606      	lsls	r6, r0, #24
 80052ae:	d501      	bpl.n	80052b4 <_printf_i+0xbc>
 80052b0:	681d      	ldr	r5, [r3, #0]
 80052b2:	e003      	b.n	80052bc <_printf_i+0xc4>
 80052b4:	0645      	lsls	r5, r0, #25
 80052b6:	d5fb      	bpl.n	80052b0 <_printf_i+0xb8>
 80052b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80052bc:	2d00      	cmp	r5, #0
 80052be:	da03      	bge.n	80052c8 <_printf_i+0xd0>
 80052c0:	232d      	movs	r3, #45	@ 0x2d
 80052c2:	426d      	negs	r5, r5
 80052c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052c8:	4858      	ldr	r0, [pc, #352]	@ (800542c <_printf_i+0x234>)
 80052ca:	230a      	movs	r3, #10
 80052cc:	e011      	b.n	80052f2 <_printf_i+0xfa>
 80052ce:	6821      	ldr	r1, [r4, #0]
 80052d0:	6833      	ldr	r3, [r6, #0]
 80052d2:	0608      	lsls	r0, r1, #24
 80052d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80052d8:	d402      	bmi.n	80052e0 <_printf_i+0xe8>
 80052da:	0649      	lsls	r1, r1, #25
 80052dc:	bf48      	it	mi
 80052de:	b2ad      	uxthmi	r5, r5
 80052e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80052e2:	6033      	str	r3, [r6, #0]
 80052e4:	4851      	ldr	r0, [pc, #324]	@ (800542c <_printf_i+0x234>)
 80052e6:	bf14      	ite	ne
 80052e8:	230a      	movne	r3, #10
 80052ea:	2308      	moveq	r3, #8
 80052ec:	2100      	movs	r1, #0
 80052ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052f2:	6866      	ldr	r6, [r4, #4]
 80052f4:	2e00      	cmp	r6, #0
 80052f6:	60a6      	str	r6, [r4, #8]
 80052f8:	db05      	blt.n	8005306 <_printf_i+0x10e>
 80052fa:	6821      	ldr	r1, [r4, #0]
 80052fc:	432e      	orrs	r6, r5
 80052fe:	f021 0104 	bic.w	r1, r1, #4
 8005302:	6021      	str	r1, [r4, #0]
 8005304:	d04b      	beq.n	800539e <_printf_i+0x1a6>
 8005306:	4616      	mov	r6, r2
 8005308:	fbb5 f1f3 	udiv	r1, r5, r3
 800530c:	fb03 5711 	mls	r7, r3, r1, r5
 8005310:	5dc7      	ldrb	r7, [r0, r7]
 8005312:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005316:	462f      	mov	r7, r5
 8005318:	460d      	mov	r5, r1
 800531a:	42bb      	cmp	r3, r7
 800531c:	d9f4      	bls.n	8005308 <_printf_i+0x110>
 800531e:	2b08      	cmp	r3, #8
 8005320:	d10b      	bne.n	800533a <_printf_i+0x142>
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	07df      	lsls	r7, r3, #31
 8005326:	d508      	bpl.n	800533a <_printf_i+0x142>
 8005328:	6923      	ldr	r3, [r4, #16]
 800532a:	6861      	ldr	r1, [r4, #4]
 800532c:	4299      	cmp	r1, r3
 800532e:	bfde      	ittt	le
 8005330:	2330      	movle	r3, #48	@ 0x30
 8005332:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005336:	f106 36ff 	addle.w	r6, r6, #4294967295
 800533a:	1b92      	subs	r2, r2, r6
 800533c:	6122      	str	r2, [r4, #16]
 800533e:	464b      	mov	r3, r9
 8005340:	aa03      	add	r2, sp, #12
 8005342:	4621      	mov	r1, r4
 8005344:	4640      	mov	r0, r8
 8005346:	f8cd a000 	str.w	sl, [sp]
 800534a:	f7ff fee3 	bl	8005114 <_printf_common>
 800534e:	3001      	adds	r0, #1
 8005350:	d14a      	bne.n	80053e8 <_printf_i+0x1f0>
 8005352:	f04f 30ff 	mov.w	r0, #4294967295
 8005356:	b004      	add	sp, #16
 8005358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	f043 0320 	orr.w	r3, r3, #32
 8005362:	6023      	str	r3, [r4, #0]
 8005364:	2778      	movs	r7, #120	@ 0x78
 8005366:	4832      	ldr	r0, [pc, #200]	@ (8005430 <_printf_i+0x238>)
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800536e:	061f      	lsls	r7, r3, #24
 8005370:	6831      	ldr	r1, [r6, #0]
 8005372:	f851 5b04 	ldr.w	r5, [r1], #4
 8005376:	d402      	bmi.n	800537e <_printf_i+0x186>
 8005378:	065f      	lsls	r7, r3, #25
 800537a:	bf48      	it	mi
 800537c:	b2ad      	uxthmi	r5, r5
 800537e:	6031      	str	r1, [r6, #0]
 8005380:	07d9      	lsls	r1, r3, #31
 8005382:	bf44      	itt	mi
 8005384:	f043 0320 	orrmi.w	r3, r3, #32
 8005388:	6023      	strmi	r3, [r4, #0]
 800538a:	b11d      	cbz	r5, 8005394 <_printf_i+0x19c>
 800538c:	2310      	movs	r3, #16
 800538e:	e7ad      	b.n	80052ec <_printf_i+0xf4>
 8005390:	4826      	ldr	r0, [pc, #152]	@ (800542c <_printf_i+0x234>)
 8005392:	e7e9      	b.n	8005368 <_printf_i+0x170>
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	f023 0320 	bic.w	r3, r3, #32
 800539a:	6023      	str	r3, [r4, #0]
 800539c:	e7f6      	b.n	800538c <_printf_i+0x194>
 800539e:	4616      	mov	r6, r2
 80053a0:	e7bd      	b.n	800531e <_printf_i+0x126>
 80053a2:	6833      	ldr	r3, [r6, #0]
 80053a4:	6825      	ldr	r5, [r4, #0]
 80053a6:	1d18      	adds	r0, r3, #4
 80053a8:	6961      	ldr	r1, [r4, #20]
 80053aa:	6030      	str	r0, [r6, #0]
 80053ac:	062e      	lsls	r6, r5, #24
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	d501      	bpl.n	80053b6 <_printf_i+0x1be>
 80053b2:	6019      	str	r1, [r3, #0]
 80053b4:	e002      	b.n	80053bc <_printf_i+0x1c4>
 80053b6:	0668      	lsls	r0, r5, #25
 80053b8:	d5fb      	bpl.n	80053b2 <_printf_i+0x1ba>
 80053ba:	8019      	strh	r1, [r3, #0]
 80053bc:	2300      	movs	r3, #0
 80053be:	4616      	mov	r6, r2
 80053c0:	6123      	str	r3, [r4, #16]
 80053c2:	e7bc      	b.n	800533e <_printf_i+0x146>
 80053c4:	6833      	ldr	r3, [r6, #0]
 80053c6:	2100      	movs	r1, #0
 80053c8:	1d1a      	adds	r2, r3, #4
 80053ca:	6032      	str	r2, [r6, #0]
 80053cc:	681e      	ldr	r6, [r3, #0]
 80053ce:	6862      	ldr	r2, [r4, #4]
 80053d0:	4630      	mov	r0, r6
 80053d2:	f000 f95f 	bl	8005694 <memchr>
 80053d6:	b108      	cbz	r0, 80053dc <_printf_i+0x1e4>
 80053d8:	1b80      	subs	r0, r0, r6
 80053da:	6060      	str	r0, [r4, #4]
 80053dc:	6863      	ldr	r3, [r4, #4]
 80053de:	6123      	str	r3, [r4, #16]
 80053e0:	2300      	movs	r3, #0
 80053e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053e6:	e7aa      	b.n	800533e <_printf_i+0x146>
 80053e8:	6923      	ldr	r3, [r4, #16]
 80053ea:	4632      	mov	r2, r6
 80053ec:	4649      	mov	r1, r9
 80053ee:	4640      	mov	r0, r8
 80053f0:	47d0      	blx	sl
 80053f2:	3001      	adds	r0, #1
 80053f4:	d0ad      	beq.n	8005352 <_printf_i+0x15a>
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	079b      	lsls	r3, r3, #30
 80053fa:	d413      	bmi.n	8005424 <_printf_i+0x22c>
 80053fc:	68e0      	ldr	r0, [r4, #12]
 80053fe:	9b03      	ldr	r3, [sp, #12]
 8005400:	4298      	cmp	r0, r3
 8005402:	bfb8      	it	lt
 8005404:	4618      	movlt	r0, r3
 8005406:	e7a6      	b.n	8005356 <_printf_i+0x15e>
 8005408:	2301      	movs	r3, #1
 800540a:	4632      	mov	r2, r6
 800540c:	4649      	mov	r1, r9
 800540e:	4640      	mov	r0, r8
 8005410:	47d0      	blx	sl
 8005412:	3001      	adds	r0, #1
 8005414:	d09d      	beq.n	8005352 <_printf_i+0x15a>
 8005416:	3501      	adds	r5, #1
 8005418:	68e3      	ldr	r3, [r4, #12]
 800541a:	9903      	ldr	r1, [sp, #12]
 800541c:	1a5b      	subs	r3, r3, r1
 800541e:	42ab      	cmp	r3, r5
 8005420:	dcf2      	bgt.n	8005408 <_printf_i+0x210>
 8005422:	e7eb      	b.n	80053fc <_printf_i+0x204>
 8005424:	2500      	movs	r5, #0
 8005426:	f104 0619 	add.w	r6, r4, #25
 800542a:	e7f5      	b.n	8005418 <_printf_i+0x220>
 800542c:	0800594d 	.word	0x0800594d
 8005430:	0800595e 	.word	0x0800595e

08005434 <__sflush_r>:
 8005434:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800543c:	0716      	lsls	r6, r2, #28
 800543e:	4605      	mov	r5, r0
 8005440:	460c      	mov	r4, r1
 8005442:	d454      	bmi.n	80054ee <__sflush_r+0xba>
 8005444:	684b      	ldr	r3, [r1, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	dc02      	bgt.n	8005450 <__sflush_r+0x1c>
 800544a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800544c:	2b00      	cmp	r3, #0
 800544e:	dd48      	ble.n	80054e2 <__sflush_r+0xae>
 8005450:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005452:	2e00      	cmp	r6, #0
 8005454:	d045      	beq.n	80054e2 <__sflush_r+0xae>
 8005456:	2300      	movs	r3, #0
 8005458:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800545c:	682f      	ldr	r7, [r5, #0]
 800545e:	6a21      	ldr	r1, [r4, #32]
 8005460:	602b      	str	r3, [r5, #0]
 8005462:	d030      	beq.n	80054c6 <__sflush_r+0x92>
 8005464:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005466:	89a3      	ldrh	r3, [r4, #12]
 8005468:	0759      	lsls	r1, r3, #29
 800546a:	d505      	bpl.n	8005478 <__sflush_r+0x44>
 800546c:	6863      	ldr	r3, [r4, #4]
 800546e:	1ad2      	subs	r2, r2, r3
 8005470:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005472:	b10b      	cbz	r3, 8005478 <__sflush_r+0x44>
 8005474:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005476:	1ad2      	subs	r2, r2, r3
 8005478:	2300      	movs	r3, #0
 800547a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800547c:	6a21      	ldr	r1, [r4, #32]
 800547e:	4628      	mov	r0, r5
 8005480:	47b0      	blx	r6
 8005482:	1c43      	adds	r3, r0, #1
 8005484:	89a3      	ldrh	r3, [r4, #12]
 8005486:	d106      	bne.n	8005496 <__sflush_r+0x62>
 8005488:	6829      	ldr	r1, [r5, #0]
 800548a:	291d      	cmp	r1, #29
 800548c:	d82b      	bhi.n	80054e6 <__sflush_r+0xb2>
 800548e:	4a2a      	ldr	r2, [pc, #168]	@ (8005538 <__sflush_r+0x104>)
 8005490:	40ca      	lsrs	r2, r1
 8005492:	07d6      	lsls	r6, r2, #31
 8005494:	d527      	bpl.n	80054e6 <__sflush_r+0xb2>
 8005496:	2200      	movs	r2, #0
 8005498:	04d9      	lsls	r1, r3, #19
 800549a:	6062      	str	r2, [r4, #4]
 800549c:	6922      	ldr	r2, [r4, #16]
 800549e:	6022      	str	r2, [r4, #0]
 80054a0:	d504      	bpl.n	80054ac <__sflush_r+0x78>
 80054a2:	1c42      	adds	r2, r0, #1
 80054a4:	d101      	bne.n	80054aa <__sflush_r+0x76>
 80054a6:	682b      	ldr	r3, [r5, #0]
 80054a8:	b903      	cbnz	r3, 80054ac <__sflush_r+0x78>
 80054aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80054ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054ae:	602f      	str	r7, [r5, #0]
 80054b0:	b1b9      	cbz	r1, 80054e2 <__sflush_r+0xae>
 80054b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80054b6:	4299      	cmp	r1, r3
 80054b8:	d002      	beq.n	80054c0 <__sflush_r+0x8c>
 80054ba:	4628      	mov	r0, r5
 80054bc:	f7ff fc9e 	bl	8004dfc <_free_r>
 80054c0:	2300      	movs	r3, #0
 80054c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80054c4:	e00d      	b.n	80054e2 <__sflush_r+0xae>
 80054c6:	2301      	movs	r3, #1
 80054c8:	4628      	mov	r0, r5
 80054ca:	47b0      	blx	r6
 80054cc:	4602      	mov	r2, r0
 80054ce:	1c50      	adds	r0, r2, #1
 80054d0:	d1c9      	bne.n	8005466 <__sflush_r+0x32>
 80054d2:	682b      	ldr	r3, [r5, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0c6      	beq.n	8005466 <__sflush_r+0x32>
 80054d8:	2b1d      	cmp	r3, #29
 80054da:	d001      	beq.n	80054e0 <__sflush_r+0xac>
 80054dc:	2b16      	cmp	r3, #22
 80054de:	d11d      	bne.n	800551c <__sflush_r+0xe8>
 80054e0:	602f      	str	r7, [r5, #0]
 80054e2:	2000      	movs	r0, #0
 80054e4:	e021      	b.n	800552a <__sflush_r+0xf6>
 80054e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054ea:	b21b      	sxth	r3, r3
 80054ec:	e01a      	b.n	8005524 <__sflush_r+0xf0>
 80054ee:	690f      	ldr	r7, [r1, #16]
 80054f0:	2f00      	cmp	r7, #0
 80054f2:	d0f6      	beq.n	80054e2 <__sflush_r+0xae>
 80054f4:	0793      	lsls	r3, r2, #30
 80054f6:	680e      	ldr	r6, [r1, #0]
 80054f8:	600f      	str	r7, [r1, #0]
 80054fa:	bf0c      	ite	eq
 80054fc:	694b      	ldreq	r3, [r1, #20]
 80054fe:	2300      	movne	r3, #0
 8005500:	eba6 0807 	sub.w	r8, r6, r7
 8005504:	608b      	str	r3, [r1, #8]
 8005506:	f1b8 0f00 	cmp.w	r8, #0
 800550a:	ddea      	ble.n	80054e2 <__sflush_r+0xae>
 800550c:	4643      	mov	r3, r8
 800550e:	463a      	mov	r2, r7
 8005510:	6a21      	ldr	r1, [r4, #32]
 8005512:	4628      	mov	r0, r5
 8005514:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005516:	47b0      	blx	r6
 8005518:	2800      	cmp	r0, #0
 800551a:	dc08      	bgt.n	800552e <__sflush_r+0xfa>
 800551c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005520:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005524:	f04f 30ff 	mov.w	r0, #4294967295
 8005528:	81a3      	strh	r3, [r4, #12]
 800552a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800552e:	4407      	add	r7, r0
 8005530:	eba8 0800 	sub.w	r8, r8, r0
 8005534:	e7e7      	b.n	8005506 <__sflush_r+0xd2>
 8005536:	bf00      	nop
 8005538:	20400001 	.word	0x20400001

0800553c <_fflush_r>:
 800553c:	b538      	push	{r3, r4, r5, lr}
 800553e:	690b      	ldr	r3, [r1, #16]
 8005540:	4605      	mov	r5, r0
 8005542:	460c      	mov	r4, r1
 8005544:	b913      	cbnz	r3, 800554c <_fflush_r+0x10>
 8005546:	2500      	movs	r5, #0
 8005548:	4628      	mov	r0, r5
 800554a:	bd38      	pop	{r3, r4, r5, pc}
 800554c:	b118      	cbz	r0, 8005556 <_fflush_r+0x1a>
 800554e:	6a03      	ldr	r3, [r0, #32]
 8005550:	b90b      	cbnz	r3, 8005556 <_fflush_r+0x1a>
 8005552:	f7ff fa39 	bl	80049c8 <__sinit>
 8005556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0f3      	beq.n	8005546 <_fflush_r+0xa>
 800555e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005560:	07d0      	lsls	r0, r2, #31
 8005562:	d404      	bmi.n	800556e <_fflush_r+0x32>
 8005564:	0599      	lsls	r1, r3, #22
 8005566:	d402      	bmi.n	800556e <_fflush_r+0x32>
 8005568:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800556a:	f7ff fc44 	bl	8004df6 <__retarget_lock_acquire_recursive>
 800556e:	4628      	mov	r0, r5
 8005570:	4621      	mov	r1, r4
 8005572:	f7ff ff5f 	bl	8005434 <__sflush_r>
 8005576:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005578:	4605      	mov	r5, r0
 800557a:	07da      	lsls	r2, r3, #31
 800557c:	d4e4      	bmi.n	8005548 <_fflush_r+0xc>
 800557e:	89a3      	ldrh	r3, [r4, #12]
 8005580:	059b      	lsls	r3, r3, #22
 8005582:	d4e1      	bmi.n	8005548 <_fflush_r+0xc>
 8005584:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005586:	f7ff fc37 	bl	8004df8 <__retarget_lock_release_recursive>
 800558a:	e7dd      	b.n	8005548 <_fflush_r+0xc>

0800558c <__swhatbuf_r>:
 800558c:	b570      	push	{r4, r5, r6, lr}
 800558e:	460c      	mov	r4, r1
 8005590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005594:	b096      	sub	sp, #88	@ 0x58
 8005596:	4615      	mov	r5, r2
 8005598:	2900      	cmp	r1, #0
 800559a:	461e      	mov	r6, r3
 800559c:	da0c      	bge.n	80055b8 <__swhatbuf_r+0x2c>
 800559e:	89a3      	ldrh	r3, [r4, #12]
 80055a0:	2100      	movs	r1, #0
 80055a2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80055a6:	bf14      	ite	ne
 80055a8:	2340      	movne	r3, #64	@ 0x40
 80055aa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80055ae:	2000      	movs	r0, #0
 80055b0:	6031      	str	r1, [r6, #0]
 80055b2:	602b      	str	r3, [r5, #0]
 80055b4:	b016      	add	sp, #88	@ 0x58
 80055b6:	bd70      	pop	{r4, r5, r6, pc}
 80055b8:	466a      	mov	r2, sp
 80055ba:	f000 f849 	bl	8005650 <_fstat_r>
 80055be:	2800      	cmp	r0, #0
 80055c0:	dbed      	blt.n	800559e <__swhatbuf_r+0x12>
 80055c2:	9901      	ldr	r1, [sp, #4]
 80055c4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80055c8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80055cc:	4259      	negs	r1, r3
 80055ce:	4159      	adcs	r1, r3
 80055d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055d4:	e7eb      	b.n	80055ae <__swhatbuf_r+0x22>

080055d6 <__smakebuf_r>:
 80055d6:	898b      	ldrh	r3, [r1, #12]
 80055d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055da:	079d      	lsls	r5, r3, #30
 80055dc:	4606      	mov	r6, r0
 80055de:	460c      	mov	r4, r1
 80055e0:	d507      	bpl.n	80055f2 <__smakebuf_r+0x1c>
 80055e2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80055e6:	6023      	str	r3, [r4, #0]
 80055e8:	6123      	str	r3, [r4, #16]
 80055ea:	2301      	movs	r3, #1
 80055ec:	6163      	str	r3, [r4, #20]
 80055ee:	b003      	add	sp, #12
 80055f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055f2:	ab01      	add	r3, sp, #4
 80055f4:	466a      	mov	r2, sp
 80055f6:	f7ff ffc9 	bl	800558c <__swhatbuf_r>
 80055fa:	9f00      	ldr	r7, [sp, #0]
 80055fc:	4605      	mov	r5, r0
 80055fe:	4630      	mov	r0, r6
 8005600:	4639      	mov	r1, r7
 8005602:	f7ff f8c9 	bl	8004798 <_malloc_r>
 8005606:	b948      	cbnz	r0, 800561c <__smakebuf_r+0x46>
 8005608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800560c:	059a      	lsls	r2, r3, #22
 800560e:	d4ee      	bmi.n	80055ee <__smakebuf_r+0x18>
 8005610:	f023 0303 	bic.w	r3, r3, #3
 8005614:	f043 0302 	orr.w	r3, r3, #2
 8005618:	81a3      	strh	r3, [r4, #12]
 800561a:	e7e2      	b.n	80055e2 <__smakebuf_r+0xc>
 800561c:	89a3      	ldrh	r3, [r4, #12]
 800561e:	6020      	str	r0, [r4, #0]
 8005620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005624:	81a3      	strh	r3, [r4, #12]
 8005626:	9b01      	ldr	r3, [sp, #4]
 8005628:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800562c:	b15b      	cbz	r3, 8005646 <__smakebuf_r+0x70>
 800562e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005632:	4630      	mov	r0, r6
 8005634:	f000 f81e 	bl	8005674 <_isatty_r>
 8005638:	b128      	cbz	r0, 8005646 <__smakebuf_r+0x70>
 800563a:	89a3      	ldrh	r3, [r4, #12]
 800563c:	f023 0303 	bic.w	r3, r3, #3
 8005640:	f043 0301 	orr.w	r3, r3, #1
 8005644:	81a3      	strh	r3, [r4, #12]
 8005646:	89a3      	ldrh	r3, [r4, #12]
 8005648:	431d      	orrs	r5, r3
 800564a:	81a5      	strh	r5, [r4, #12]
 800564c:	e7cf      	b.n	80055ee <__smakebuf_r+0x18>
	...

08005650 <_fstat_r>:
 8005650:	b538      	push	{r3, r4, r5, lr}
 8005652:	2300      	movs	r3, #0
 8005654:	4d06      	ldr	r5, [pc, #24]	@ (8005670 <_fstat_r+0x20>)
 8005656:	4604      	mov	r4, r0
 8005658:	4608      	mov	r0, r1
 800565a:	4611      	mov	r1, r2
 800565c:	602b      	str	r3, [r5, #0]
 800565e:	f7fb faa0 	bl	8000ba2 <_fstat>
 8005662:	1c43      	adds	r3, r0, #1
 8005664:	d102      	bne.n	800566c <_fstat_r+0x1c>
 8005666:	682b      	ldr	r3, [r5, #0]
 8005668:	b103      	cbz	r3, 800566c <_fstat_r+0x1c>
 800566a:	6023      	str	r3, [r4, #0]
 800566c:	bd38      	pop	{r3, r4, r5, pc}
 800566e:	bf00      	nop
 8005670:	200003a4 	.word	0x200003a4

08005674 <_isatty_r>:
 8005674:	b538      	push	{r3, r4, r5, lr}
 8005676:	2300      	movs	r3, #0
 8005678:	4d05      	ldr	r5, [pc, #20]	@ (8005690 <_isatty_r+0x1c>)
 800567a:	4604      	mov	r4, r0
 800567c:	4608      	mov	r0, r1
 800567e:	602b      	str	r3, [r5, #0]
 8005680:	f7fb fa9f 	bl	8000bc2 <_isatty>
 8005684:	1c43      	adds	r3, r0, #1
 8005686:	d102      	bne.n	800568e <_isatty_r+0x1a>
 8005688:	682b      	ldr	r3, [r5, #0]
 800568a:	b103      	cbz	r3, 800568e <_isatty_r+0x1a>
 800568c:	6023      	str	r3, [r4, #0]
 800568e:	bd38      	pop	{r3, r4, r5, pc}
 8005690:	200003a4 	.word	0x200003a4

08005694 <memchr>:
 8005694:	b2c9      	uxtb	r1, r1
 8005696:	4603      	mov	r3, r0
 8005698:	4402      	add	r2, r0
 800569a:	b510      	push	{r4, lr}
 800569c:	4293      	cmp	r3, r2
 800569e:	4618      	mov	r0, r3
 80056a0:	d101      	bne.n	80056a6 <memchr+0x12>
 80056a2:	2000      	movs	r0, #0
 80056a4:	e003      	b.n	80056ae <memchr+0x1a>
 80056a6:	7804      	ldrb	r4, [r0, #0]
 80056a8:	3301      	adds	r3, #1
 80056aa:	428c      	cmp	r4, r1
 80056ac:	d1f6      	bne.n	800569c <memchr+0x8>
 80056ae:	bd10      	pop	{r4, pc}

080056b0 <_init>:
 80056b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b2:	bf00      	nop
 80056b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056b6:	bc08      	pop	{r3}
 80056b8:	469e      	mov	lr, r3
 80056ba:	4770      	bx	lr

080056bc <_fini>:
 80056bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056be:	bf00      	nop
 80056c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056c2:	bc08      	pop	{r3}
 80056c4:	469e      	mov	lr, r3
 80056c6:	4770      	bx	lr
