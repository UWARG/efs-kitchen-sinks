
NVM Flash Drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ad8  080001f4  080001f4  000011f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003ccc  08003ccc  00004ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d68  08003d68  00005034  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003d68  08003d68  00004d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d70  08003d70  00005034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d70  08003d70  00004d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d74  08003d74  00004d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08003d78  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000034  08003dac  00005034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08003dac  000051fc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed96  00000000  00000000  0000506a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000206d  00000000  00000000  00013e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  00015e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000988  00000000  00000000  00016ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028583  00000000  00000000  00017460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb40  00000000  00000000  0003f9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100550  00000000  00000000  0004e523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014ea73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003300  00000000  00000000  0014eab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00151db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	@ (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000034 	.word	0x20000034
 8000210:	00000000 	.word	0x00000000
 8000214:	08003cb4 	.word	0x08003cb4

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	@ (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	@ (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	@ (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000038 	.word	0x20000038
 8000230:	08003cb4 	.word	0x08003cb4

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b9b0 	b.w	80005ac <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800026a:	4688      	mov	r8, r1
 800026c:	4604      	mov	r4, r0
 800026e:	468e      	mov	lr, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14a      	bne.n	800030a <__udivmoddi4+0xa6>
 8000274:	428a      	cmp	r2, r1
 8000276:	4617      	mov	r7, r2
 8000278:	d95f      	bls.n	800033a <__udivmoddi4+0xd6>
 800027a:	fab2 f682 	clz	r6, r2
 800027e:	b14e      	cbz	r6, 8000294 <__udivmoddi4+0x30>
 8000280:	f1c6 0320 	rsb	r3, r6, #32
 8000284:	fa01 fe06 	lsl.w	lr, r1, r6
 8000288:	40b7      	lsls	r7, r6
 800028a:	40b4      	lsls	r4, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	ea43 0e0e 	orr.w	lr, r3, lr
 8000294:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000298:	fa1f fc87 	uxth.w	ip, r7
 800029c:	0c23      	lsrs	r3, r4, #16
 800029e:	fbbe f1f8 	udiv	r1, lr, r8
 80002a2:	fb08 ee11 	mls	lr, r8, r1, lr
 80002a6:	fb01 f20c 	mul.w	r2, r1, ip
 80002aa:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d907      	bls.n	80002c2 <__udivmoddi4+0x5e>
 80002b2:	18fb      	adds	r3, r7, r3
 80002b4:	f101 30ff 	add.w	r0, r1, #4294967295
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x5c>
 80002ba:	429a      	cmp	r2, r3
 80002bc:	f200 8154 	bhi.w	8000568 <__udivmoddi4+0x304>
 80002c0:	4601      	mov	r1, r0
 80002c2:	1a9b      	subs	r3, r3, r2
 80002c4:	b2a2      	uxth	r2, r4
 80002c6:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ca:	fb08 3310 	mls	r3, r8, r0, r3
 80002ce:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80002d6:	4594      	cmp	ip, r2
 80002d8:	d90b      	bls.n	80002f2 <__udivmoddi4+0x8e>
 80002da:	18ba      	adds	r2, r7, r2
 80002dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e0:	bf2c      	ite	cs
 80002e2:	2401      	movcs	r4, #1
 80002e4:	2400      	movcc	r4, #0
 80002e6:	4594      	cmp	ip, r2
 80002e8:	d902      	bls.n	80002f0 <__udivmoddi4+0x8c>
 80002ea:	2c00      	cmp	r4, #0
 80002ec:	f000 813f 	beq.w	800056e <__udivmoddi4+0x30a>
 80002f0:	4618      	mov	r0, r3
 80002f2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f6:	eba2 020c 	sub.w	r2, r2, ip
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa2>
 80002fe:	40f2      	lsrs	r2, r6
 8000300:	2300      	movs	r3, #0
 8000302:	e9c5 2300 	strd	r2, r3, [r5]
 8000306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xb6>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb0>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa2>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d14e      	bne.n	80003c0 <__udivmoddi4+0x15c>
 8000322:	4543      	cmp	r3, r8
 8000324:	f0c0 8112 	bcc.w	800054c <__udivmoddi4+0x2e8>
 8000328:	4282      	cmp	r2, r0
 800032a:	f240 810f 	bls.w	800054c <__udivmoddi4+0x2e8>
 800032e:	4608      	mov	r0, r1
 8000330:	2d00      	cmp	r5, #0
 8000332:	d0e8      	beq.n	8000306 <__udivmoddi4+0xa2>
 8000334:	e9c5 4e00 	strd	r4, lr, [r5]
 8000338:	e7e5      	b.n	8000306 <__udivmoddi4+0xa2>
 800033a:	2a00      	cmp	r2, #0
 800033c:	f000 80ac 	beq.w	8000498 <__udivmoddi4+0x234>
 8000340:	fab2 f682 	clz	r6, r2
 8000344:	2e00      	cmp	r6, #0
 8000346:	f040 80bb 	bne.w	80004c0 <__udivmoddi4+0x25c>
 800034a:	1a8b      	subs	r3, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b2bc      	uxth	r4, r7
 8000352:	2101      	movs	r1, #1
 8000354:	0c02      	lsrs	r2, r0, #16
 8000356:	b280      	uxth	r0, r0
 8000358:	fbb3 fcfe 	udiv	ip, r3, lr
 800035c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000360:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000364:	fb04 f20c 	mul.w	r2, r4, ip
 8000368:	429a      	cmp	r2, r3
 800036a:	d90e      	bls.n	800038a <__udivmoddi4+0x126>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	429a      	cmp	r2, r3
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80ec 	beq.w	8000560 <__udivmoddi4+0x2fc>
 8000388:	46c4      	mov	ip, r8
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	fbb3 f8fe 	udiv	r8, r3, lr
 8000390:	fb0e 3318 	mls	r3, lr, r8, r3
 8000394:	fb04 f408 	mul.w	r4, r4, r8
 8000398:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800039c:	4294      	cmp	r4, r2
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x154>
 80003a0:	18ba      	adds	r2, r7, r2
 80003a2:	f108 33ff 	add.w	r3, r8, #4294967295
 80003a6:	bf2c      	ite	cs
 80003a8:	2001      	movcs	r0, #1
 80003aa:	2000      	movcc	r0, #0
 80003ac:	4294      	cmp	r4, r2
 80003ae:	d902      	bls.n	80003b6 <__udivmoddi4+0x152>
 80003b0:	2800      	cmp	r0, #0
 80003b2:	f000 80d1 	beq.w	8000558 <__udivmoddi4+0x2f4>
 80003b6:	4698      	mov	r8, r3
 80003b8:	1b12      	subs	r2, r2, r4
 80003ba:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 80003be:	e79d      	b.n	80002fc <__udivmoddi4+0x98>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa08 f401 	lsl.w	r4, r8, r1
 80003ca:	fa00 f901 	lsl.w	r9, r0, r1
 80003ce:	fa22 f706 	lsr.w	r7, r2, r6
 80003d2:	fa28 f806 	lsr.w	r8, r8, r6
 80003d6:	408a      	lsls	r2, r1
 80003d8:	431f      	orrs	r7, r3
 80003da:	fa20 f306 	lsr.w	r3, r0, r6
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	4323      	orrs	r3, r4
 80003e2:	fa1f fc87 	uxth.w	ip, r7
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	fbb8 fef0 	udiv	lr, r8, r0
 80003ec:	fb00 881e 	mls	r8, r0, lr, r8
 80003f0:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80003f4:	fb0e f80c 	mul.w	r8, lr, ip
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d90e      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	45a0      	cmp	r8, r4
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 80b8 	beq.w	8000588 <__udivmoddi4+0x324>
 8000418:	46d6      	mov	lr, sl
 800041a:	eba4 0408 	sub.w	r4, r4, r8
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	fbb4 f3f0 	udiv	r3, r4, r0
 8000426:	fb00 4413 	mls	r4, r0, r3, r4
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000432:	45a4      	cmp	ip, r4
 8000434:	d90e      	bls.n	8000454 <__udivmoddi4+0x1f0>
 8000436:	193c      	adds	r4, r7, r4
 8000438:	f103 30ff 	add.w	r0, r3, #4294967295
 800043c:	bf2c      	ite	cs
 800043e:	f04f 0801 	movcs.w	r8, #1
 8000442:	f04f 0800 	movcc.w	r8, #0
 8000446:	45a4      	cmp	ip, r4
 8000448:	d903      	bls.n	8000452 <__udivmoddi4+0x1ee>
 800044a:	f1b8 0f00 	cmp.w	r8, #0
 800044e:	f000 809f 	beq.w	8000590 <__udivmoddi4+0x32c>
 8000452:	4603      	mov	r3, r0
 8000454:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000458:	eba4 040c 	sub.w	r4, r4, ip
 800045c:	fba0 ec02 	umull	lr, ip, r0, r2
 8000460:	4564      	cmp	r4, ip
 8000462:	4673      	mov	r3, lr
 8000464:	46e0      	mov	r8, ip
 8000466:	d302      	bcc.n	800046e <__udivmoddi4+0x20a>
 8000468:	d107      	bne.n	800047a <__udivmoddi4+0x216>
 800046a:	45f1      	cmp	r9, lr
 800046c:	d205      	bcs.n	800047a <__udivmoddi4+0x216>
 800046e:	ebbe 0302 	subs.w	r3, lr, r2
 8000472:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000476:	3801      	subs	r0, #1
 8000478:	46e0      	mov	r8, ip
 800047a:	b15d      	cbz	r5, 8000494 <__udivmoddi4+0x230>
 800047c:	ebb9 0203 	subs.w	r2, r9, r3
 8000480:	eb64 0408 	sbc.w	r4, r4, r8
 8000484:	fa04 f606 	lsl.w	r6, r4, r6
 8000488:	fa22 f301 	lsr.w	r3, r2, r1
 800048c:	40cc      	lsrs	r4, r1
 800048e:	431e      	orrs	r6, r3
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e736      	b.n	8000306 <__udivmoddi4+0xa2>
 8000498:	fbb1 fcf2 	udiv	ip, r1, r2
 800049c:	0c01      	lsrs	r1, r0, #16
 800049e:	4614      	mov	r4, r2
 80004a0:	b280      	uxth	r0, r0
 80004a2:	4696      	mov	lr, r2
 80004a4:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004a8:	2620      	movs	r6, #32
 80004aa:	4690      	mov	r8, r2
 80004ac:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004b0:	4610      	mov	r0, r2
 80004b2:	fbb1 f1f2 	udiv	r1, r1, r2
 80004b6:	eba3 0308 	sub.w	r3, r3, r8
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	e74b      	b.n	8000358 <__udivmoddi4+0xf4>
 80004c0:	40b7      	lsls	r7, r6
 80004c2:	f1c6 0320 	rsb	r3, r6, #32
 80004c6:	fa01 f206 	lsl.w	r2, r1, r6
 80004ca:	fa21 f803 	lsr.w	r8, r1, r3
 80004ce:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d2:	fa20 f303 	lsr.w	r3, r0, r3
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	40b0      	lsls	r0, r6
 80004da:	4313      	orrs	r3, r2
 80004dc:	0c02      	lsrs	r2, r0, #16
 80004de:	0c19      	lsrs	r1, r3, #16
 80004e0:	b280      	uxth	r0, r0
 80004e2:	fbb8 f9fe 	udiv	r9, r8, lr
 80004e6:	fb0e 8819 	mls	r8, lr, r9, r8
 80004ea:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	4588      	cmp	r8, r1
 80004f4:	d951      	bls.n	800059a <__udivmoddi4+0x336>
 80004f6:	1879      	adds	r1, r7, r1
 80004f8:	f109 3cff 	add.w	ip, r9, #4294967295
 80004fc:	bf2c      	ite	cs
 80004fe:	f04f 0a01 	movcs.w	sl, #1
 8000502:	f04f 0a00 	movcc.w	sl, #0
 8000506:	4588      	cmp	r8, r1
 8000508:	d902      	bls.n	8000510 <__udivmoddi4+0x2ac>
 800050a:	f1ba 0f00 	cmp.w	sl, #0
 800050e:	d031      	beq.n	8000574 <__udivmoddi4+0x310>
 8000510:	eba1 0108 	sub.w	r1, r1, r8
 8000514:	fbb1 f9fe 	udiv	r9, r1, lr
 8000518:	fb09 f804 	mul.w	r8, r9, r4
 800051c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000520:	b29b      	uxth	r3, r3
 8000522:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000526:	4543      	cmp	r3, r8
 8000528:	d235      	bcs.n	8000596 <__udivmoddi4+0x332>
 800052a:	18fb      	adds	r3, r7, r3
 800052c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000530:	bf2c      	ite	cs
 8000532:	f04f 0a01 	movcs.w	sl, #1
 8000536:	f04f 0a00 	movcc.w	sl, #0
 800053a:	4543      	cmp	r3, r8
 800053c:	d2bb      	bcs.n	80004b6 <__udivmoddi4+0x252>
 800053e:	f1ba 0f00 	cmp.w	sl, #0
 8000542:	d1b8      	bne.n	80004b6 <__udivmoddi4+0x252>
 8000544:	f1a9 0102 	sub.w	r1, r9, #2
 8000548:	443b      	add	r3, r7
 800054a:	e7b4      	b.n	80004b6 <__udivmoddi4+0x252>
 800054c:	1a84      	subs	r4, r0, r2
 800054e:	eb68 0203 	sbc.w	r2, r8, r3
 8000552:	2001      	movs	r0, #1
 8000554:	4696      	mov	lr, r2
 8000556:	e6eb      	b.n	8000330 <__udivmoddi4+0xcc>
 8000558:	443a      	add	r2, r7
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	e72b      	b.n	80003b8 <__udivmoddi4+0x154>
 8000560:	f1ac 0c02 	sub.w	ip, ip, #2
 8000564:	443b      	add	r3, r7
 8000566:	e710      	b.n	800038a <__udivmoddi4+0x126>
 8000568:	3902      	subs	r1, #2
 800056a:	443b      	add	r3, r7
 800056c:	e6a9      	b.n	80002c2 <__udivmoddi4+0x5e>
 800056e:	443a      	add	r2, r7
 8000570:	3802      	subs	r0, #2
 8000572:	e6be      	b.n	80002f2 <__udivmoddi4+0x8e>
 8000574:	eba7 0808 	sub.w	r8, r7, r8
 8000578:	f1a9 0c02 	sub.w	ip, r9, #2
 800057c:	4441      	add	r1, r8
 800057e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000582:	fb09 f804 	mul.w	r8, r9, r4
 8000586:	e7c9      	b.n	800051c <__udivmoddi4+0x2b8>
 8000588:	f1ae 0e02 	sub.w	lr, lr, #2
 800058c:	443c      	add	r4, r7
 800058e:	e744      	b.n	800041a <__udivmoddi4+0x1b6>
 8000590:	3b02      	subs	r3, #2
 8000592:	443c      	add	r4, r7
 8000594:	e75e      	b.n	8000454 <__udivmoddi4+0x1f0>
 8000596:	4649      	mov	r1, r9
 8000598:	e78d      	b.n	80004b6 <__udivmoddi4+0x252>
 800059a:	eba1 0108 	sub.w	r1, r1, r8
 800059e:	46cc      	mov	ip, r9
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7b8      	b.n	800051c <__udivmoddi4+0x2b8>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 fd6f 	bl	8001098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f84b 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f8eb 	bl	8000798 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80005c2:	f000 f898 	bl	80006f6 <MX_ICACHE_Init>
  MX_SPI1_Init();
 80005c6:	f000 f8a9 	bl	800071c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //uint8_t tx = 0b00000110;
  uint8_t tx = 0b00000000;
 80005ca:	2300      	movs	r3, #0
 80005cc:	71fb      	strb	r3, [r7, #7]
  uint8_t rx = 0x00;
 80005ce:	2300      	movs	r3, #0
 80005d0:	71bb      	strb	r3, [r7, #6]

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80005d2:	2000      	movs	r0, #0
 80005d4:	f000 fab8 	bl	8000b48 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 80005d8:	2001      	movs	r0, #1
 80005da:	f000 fab5 	bl	8000b48 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80005de:	2002      	movs	r0, #2
 80005e0:	f000 fab2 	bl	8000b48 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80005e4:	2101      	movs	r1, #1
 80005e6:	2000      	movs	r0, #0
 80005e8:	f000 fb0c 	bl	8000c04 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80005ec:	4b16      	ldr	r3, [pc, #88]	@ (8000648 <main+0x98>)
 80005ee:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005f2:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80005f4:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <main+0x98>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80005fa:	4b13      	ldr	r3, [pc, #76]	@ (8000648 <main+0x98>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000600:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <main+0x98>)
 8000602:	2200      	movs	r2, #0
 8000604:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000606:	4b10      	ldr	r3, [pc, #64]	@ (8000648 <main+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800060c:	490e      	ldr	r1, [pc, #56]	@ (8000648 <main+0x98>)
 800060e:	2000      	movs	r0, #0
 8000610:	f000 fbb4 	bl	8000d7c <BSP_COM_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <main+0x6e>
  {
    Error_Handler();
 800061a:	f000 f907 	bl	800082c <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2110      	movs	r1, #16
 8000622:	480a      	ldr	r0, [pc, #40]	@ (800064c <main+0x9c>)
 8000624:	f001 f8c6 	bl	80017b4 <HAL_GPIO_WritePin>
      HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 2, 100);
 8000628:	1dba      	adds	r2, r7, #6
 800062a:	1df9      	adds	r1, r7, #7
 800062c:	2364      	movs	r3, #100	@ 0x64
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2302      	movs	r3, #2
 8000632:	4807      	ldr	r0, [pc, #28]	@ (8000650 <main+0xa0>)
 8000634:	f002 fa11 	bl	8002a5a <HAL_SPI_TransmitReceive>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2110      	movs	r1, #16
 800063c:	4803      	ldr	r0, [pc, #12]	@ (800064c <main+0x9c>)
 800063e:	f001 f8b9 	bl	80017b4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000642:	bf00      	nop
 8000644:	e7eb      	b.n	800061e <main+0x6e>
 8000646:	bf00      	nop
 8000648:	20000050 	.word	0x20000050
 800064c:	42020000 	.word	0x42020000
 8000650:	20000060 	.word	0x20000060

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b098      	sub	sp, #96	@ 0x60
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0318 	add.w	r3, r7, #24
 800065e:	2248      	movs	r2, #72	@ 0x48
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f003 faf9 	bl	8003c5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000676:	2000      	movs	r0, #0
 8000678:	f001 f8f2 	bl	8001860 <HAL_PWREx_ControlVoltageScaling>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000682:	f000 f8d3 	bl	800082c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000686:	2310      	movs	r3, #16
 8000688:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800068a:	2301      	movs	r3, #1
 800068c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800068e:	2300      	movs	r3, #0
 8000690:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000692:	2360      	movs	r3, #96	@ 0x60
 8000694:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800069a:	2301      	movs	r3, #1
 800069c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800069e:	2301      	movs	r3, #1
 80006a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80006a2:	2337      	movs	r3, #55	@ 0x37
 80006a4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006a6:	2307      	movs	r3, #7
 80006a8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 0318 	add.w	r3, r7, #24
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 f972 	bl	80019a0 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006c2:	f000 f8b3 	bl	800082c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2303      	movs	r3, #3
 80006cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2105      	movs	r1, #5
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fe34 	bl	800234c <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ea:	f000 f89f 	bl	800082c <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3760      	adds	r7, #96	@ 0x60
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f001 f872 	bl	80017e4 <HAL_ICACHE_ConfigAssociativityMode>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000706:	f000 f891 	bl	800082c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800070a:	f001 f88b 	bl	8001824 <HAL_ICACHE_Enable>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000714:	f000 f88a 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}

0800071c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000720:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <MX_SPI1_Init+0x74>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <MX_SPI1_Init+0x78>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b1a      	ldr	r3, [pc, #104]	@ (8000790 <MX_SPI1_Init+0x74>)
 8000728:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800072c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_SPI1_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000734:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_SPI1_Init+0x74>)
 8000736:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800073a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_SPI1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000742:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <MX_SPI1_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000748:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <MX_SPI1_Init+0x74>)
 800074a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800074e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <MX_SPI1_Init+0x74>)
 8000752:	2208      	movs	r2, #8
 8000754:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_SPI1_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075c:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <MX_SPI1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <MX_SPI1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000768:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <MX_SPI1_Init+0x74>)
 800076a:	2207      	movs	r2, #7
 800076c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800076e:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <MX_SPI1_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <MX_SPI1_Init+0x74>)
 8000776:	2208      	movs	r2, #8
 8000778:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	@ (8000790 <MX_SPI1_Init+0x74>)
 800077c:	f002 f8ca 	bl	8002914 <HAL_SPI_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000786:	f000 f851 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000060 	.word	0x20000060
 8000794:	40013000 	.word	0x40013000

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000824 <MX_GPIO_Init+0x8c>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000824 <MX_GPIO_Init+0x8c>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000824 <MX_GPIO_Init+0x8c>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <MX_GPIO_Init+0x8c>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	4a16      	ldr	r2, [pc, #88]	@ (8000824 <MX_GPIO_Init+0x8c>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d2:	4b14      	ldr	r3, [pc, #80]	@ (8000824 <MX_GPIO_Init+0x8c>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_GPIO_Init+0x8c>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e2:	4a10      	ldr	r2, [pc, #64]	@ (8000824 <MX_GPIO_Init+0x8c>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_GPIO_Init+0x8c>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2110      	movs	r1, #16
 80007fa:	480b      	ldr	r0, [pc, #44]	@ (8000828 <MX_GPIO_Init+0x90>)
 80007fc:	f000 ffda 	bl	80017b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000800:	2310      	movs	r3, #16
 8000802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	4619      	mov	r1, r3
 8000816:	4804      	ldr	r0, [pc, #16]	@ (8000828 <MX_GPIO_Init+0x90>)
 8000818:	f000 fe4c 	bl	80014b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800081c:	bf00      	nop
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40021000 	.word	0x40021000
 8000828:	42020000 	.word	0x42020000

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <Error_Handler+0x8>

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <HAL_MspInit+0x44>)
 8000840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000842:	4a0e      	ldr	r2, [pc, #56]	@ (800087c <HAL_MspInit+0x44>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6613      	str	r3, [r2, #96]	@ 0x60
 800084a:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <HAL_MspInit+0x44>)
 800084c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	4b09      	ldr	r3, [pc, #36]	@ (800087c <HAL_MspInit+0x44>)
 8000858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800085a:	4a08      	ldr	r2, [pc, #32]	@ (800087c <HAL_MspInit+0x44>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000860:	6593      	str	r3, [r2, #88]	@ 0x58
 8000862:	4b06      	ldr	r3, [pc, #24]	@ (800087c <HAL_MspInit+0x44>)
 8000864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800086e:	f001 f863 	bl	8001938 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40021000 	.word	0x40021000

08000880 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	@ 0x28
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a17      	ldr	r2, [pc, #92]	@ (80008fc <HAL_SPI_MspInit+0x7c>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d127      	bne.n	80008f2 <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008a2:	4b17      	ldr	r3, [pc, #92]	@ (8000900 <HAL_SPI_MspInit+0x80>)
 80008a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008a6:	4a16      	ldr	r2, [pc, #88]	@ (8000900 <HAL_SPI_MspInit+0x80>)
 80008a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80008ae:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <HAL_SPI_MspInit+0x80>)
 80008b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <HAL_SPI_MspInit+0x80>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	4a10      	ldr	r2, [pc, #64]	@ (8000900 <HAL_SPI_MspInit+0x80>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <HAL_SPI_MspInit+0x80>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80008d2:	2338      	movs	r3, #56	@ 0x38
 80008d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008e2:	2305      	movs	r3, #5
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	@ (8000904 <HAL_SPI_MspInit+0x84>)
 80008ee:	f000 fde1 	bl	80014b4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80008f2:	bf00      	nop
 80008f4:	3728      	adds	r7, #40	@ 0x28
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40013000 	.word	0x40013000
 8000900:	40021000 	.word	0x40021000
 8000904:	42020400 	.word	0x42020400

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <NMI_Handler+0x4>

08000910 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <HardFault_Handler+0x4>

08000918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <MemManage_Handler+0x4>

08000920 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <BusFault_Handler+0x4>

08000928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <UsageFault_Handler+0x4>

08000930 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800095e:	f000 fbf1 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}

08000966 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800096a:	2000      	movs	r0, #0
 800096c:	f000 f9f0 	bl	8000d50 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}

08000974 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <SystemInit+0x20>)
 800097a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800097e:	4a05      	ldr	r2, [pc, #20]	@ (8000994 <SystemInit+0x20>)
 8000980:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000984:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b087      	sub	sp, #28
 800099c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800099e:	4b4f      	ldr	r3, [pc, #316]	@ (8000adc <SystemCoreClockUpdate+0x144>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f003 0308 	and.w	r3, r3, #8
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d107      	bne.n	80009ba <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80009aa:	4b4c      	ldr	r3, [pc, #304]	@ (8000adc <SystemCoreClockUpdate+0x144>)
 80009ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80009b0:	0a1b      	lsrs	r3, r3, #8
 80009b2:	f003 030f 	and.w	r3, r3, #15
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	e005      	b.n	80009c6 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80009ba:	4b48      	ldr	r3, [pc, #288]	@ (8000adc <SystemCoreClockUpdate+0x144>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	091b      	lsrs	r3, r3, #4
 80009c0:	f003 030f 	and.w	r3, r3, #15
 80009c4:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80009c6:	4a46      	ldr	r2, [pc, #280]	@ (8000ae0 <SystemCoreClockUpdate+0x148>)
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ce:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80009d0:	4b42      	ldr	r3, [pc, #264]	@ (8000adc <SystemCoreClockUpdate+0x144>)
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	f003 030c 	and.w	r3, r3, #12
 80009d8:	2b0c      	cmp	r3, #12
 80009da:	d866      	bhi.n	8000aaa <SystemCoreClockUpdate+0x112>
 80009dc:	a201      	add	r2, pc, #4	@ (adr r2, 80009e4 <SystemCoreClockUpdate+0x4c>)
 80009de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e2:	bf00      	nop
 80009e4:	08000a19 	.word	0x08000a19
 80009e8:	08000aab 	.word	0x08000aab
 80009ec:	08000aab 	.word	0x08000aab
 80009f0:	08000aab 	.word	0x08000aab
 80009f4:	08000a21 	.word	0x08000a21
 80009f8:	08000aab 	.word	0x08000aab
 80009fc:	08000aab 	.word	0x08000aab
 8000a00:	08000aab 	.word	0x08000aab
 8000a04:	08000a29 	.word	0x08000a29
 8000a08:	08000aab 	.word	0x08000aab
 8000a0c:	08000aab 	.word	0x08000aab
 8000a10:	08000aab 	.word	0x08000aab
 8000a14:	08000a31 	.word	0x08000a31
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000a18:	4a32      	ldr	r2, [pc, #200]	@ (8000ae4 <SystemCoreClockUpdate+0x14c>)
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	6013      	str	r3, [r2, #0]
      break;
 8000a1e:	e048      	b.n	8000ab2 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000a20:	4b30      	ldr	r3, [pc, #192]	@ (8000ae4 <SystemCoreClockUpdate+0x14c>)
 8000a22:	4a31      	ldr	r2, [pc, #196]	@ (8000ae8 <SystemCoreClockUpdate+0x150>)
 8000a24:	601a      	str	r2, [r3, #0]
      break;
 8000a26:	e044      	b.n	8000ab2 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000a28:	4b2e      	ldr	r3, [pc, #184]	@ (8000ae4 <SystemCoreClockUpdate+0x14c>)
 8000a2a:	4a30      	ldr	r2, [pc, #192]	@ (8000aec <SystemCoreClockUpdate+0x154>)
 8000a2c:	601a      	str	r2, [r3, #0]
      break;
 8000a2e:	e040      	b.n	8000ab2 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000a30:	4b2a      	ldr	r3, [pc, #168]	@ (8000adc <SystemCoreClockUpdate+0x144>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	f003 0303 	and.w	r3, r3, #3
 8000a38:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000a3a:	4b28      	ldr	r3, [pc, #160]	@ (8000adc <SystemCoreClockUpdate+0x144>)
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	091b      	lsrs	r3, r3, #4
 8000a40:	f003 030f 	and.w	r3, r3, #15
 8000a44:	3301      	adds	r3, #1
 8000a46:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d003      	beq.n	8000a56 <SystemCoreClockUpdate+0xbe>
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	2b03      	cmp	r3, #3
 8000a52:	d006      	beq.n	8000a62 <SystemCoreClockUpdate+0xca>
 8000a54:	e00b      	b.n	8000a6e <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000a56:	4a24      	ldr	r2, [pc, #144]	@ (8000ae8 <SystemCoreClockUpdate+0x150>)
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5e:	613b      	str	r3, [r7, #16]
          break;
 8000a60:	e00b      	b.n	8000a7a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000a62:	4a22      	ldr	r2, [pc, #136]	@ (8000aec <SystemCoreClockUpdate+0x154>)
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6a:	613b      	str	r3, [r7, #16]
          break;
 8000a6c:	e005      	b.n	8000a7a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000a6e:	697a      	ldr	r2, [r7, #20]
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a76:	613b      	str	r3, [r7, #16]
          break;
 8000a78:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000a7a:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <SystemCoreClockUpdate+0x144>)
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	0a1b      	lsrs	r3, r3, #8
 8000a80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	fb02 f303 	mul.w	r3, r2, r3
 8000a8a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000a8c:	4b13      	ldr	r3, [pc, #76]	@ (8000adc <SystemCoreClockUpdate+0x144>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	0e5b      	lsrs	r3, r3, #25
 8000a92:	f003 0303 	and.w	r3, r3, #3
 8000a96:	3301      	adds	r3, #1
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa4:	4a0f      	ldr	r2, [pc, #60]	@ (8000ae4 <SystemCoreClockUpdate+0x14c>)
 8000aa6:	6013      	str	r3, [r2, #0]
      break;
 8000aa8:	e003      	b.n	8000ab2 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae4 <SystemCoreClockUpdate+0x14c>)
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	6013      	str	r3, [r2, #0]
      break;
 8000ab0:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8000adc <SystemCoreClockUpdate+0x144>)
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	091b      	lsrs	r3, r3, #4
 8000ab8:	f003 030f 	and.w	r3, r3, #15
 8000abc:	4a0c      	ldr	r2, [pc, #48]	@ (8000af0 <SystemCoreClockUpdate+0x158>)
 8000abe:	5cd3      	ldrb	r3, [r2, r3]
 8000ac0:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <SystemCoreClockUpdate+0x14c>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8000acc:	4a05      	ldr	r2, [pc, #20]	@ (8000ae4 <SystemCoreClockUpdate+0x14c>)
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	371c      	adds	r7, #28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	08003d10 	.word	0x08003d10
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	00f42400 	.word	0x00f42400
 8000aec:	007a1200 	.word	0x007a1200
 8000af0:	08003cf8 	.word	0x08003cf8

08000af4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000af4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000af8:	f7ff ff3c 	bl	8000974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000afc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000afe:	e003      	b.n	8000b08 <LoopCopyDataInit>

08000b00 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b00:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b02:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b04:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b06:	3104      	adds	r1, #4

08000b08 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b08:	480a      	ldr	r0, [pc, #40]	@ (8000b34 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b0c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b0e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b10:	d3f6      	bcc.n	8000b00 <CopyDataInit>
	ldr	r2, =_sbss
 8000b12:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b14:	e002      	b.n	8000b1c <LoopFillZerobss>

08000b16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b16:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b18:	f842 3b04 	str.w	r3, [r2], #4

08000b1c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b1c:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <LoopForever+0x16>)
	cmp	r2, r3
 8000b1e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b20:	d3f9      	bcc.n	8000b16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b22:	f003 f8a3 	bl	8003c6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b26:	f7ff fd43 	bl	80005b0 <main>

08000b2a <LoopForever>:

LoopForever:
    b LoopForever
 8000b2a:	e7fe      	b.n	8000b2a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000b2c:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8000b30:	08003d78 	.word	0x08003d78
	ldr	r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b38:	20000034 	.word	0x20000034
	ldr	r2, =_sbss
 8000b3c:	20000034 	.word	0x20000034
	ldr	r3, = _ebss
 8000b40:	200001fc 	.word	0x200001fc

08000b44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC1_2_IRQHandler>
	...

08000b48 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LED1)
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d10c      	bne.n	8000b72 <BSP_LED_Init+0x2a>
  {
    LED1_GPIO_CLK_ENABLE();
 8000b58:	4b27      	ldr	r3, [pc, #156]	@ (8000bf8 <BSP_LED_Init+0xb0>)
 8000b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5c:	4a26      	ldr	r2, [pc, #152]	@ (8000bf8 <BSP_LED_Init+0xb0>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b64:	4b24      	ldr	r3, [pc, #144]	@ (8000bf8 <BSP_LED_Init+0xb0>)
 8000b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	e01b      	b.n	8000baa <BSP_LED_Init+0x62>
  }
  else if (Led == LED2)
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d10c      	bne.n	8000b92 <BSP_LED_Init+0x4a>
  {
    LED2_GPIO_CLK_ENABLE();
 8000b78:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf8 <BSP_LED_Init+0xb0>)
 8000b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7c:	4a1e      	ldr	r2, [pc, #120]	@ (8000bf8 <BSP_LED_Init+0xb0>)
 8000b7e:	f043 0302 	orr.w	r3, r3, #2
 8000b82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b84:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <BSP_LED_Init+0xb0>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b88:	f003 0302 	and.w	r3, r3, #2
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	e00b      	b.n	8000baa <BSP_LED_Init+0x62>
  }
  else /* Led = LED3 */
  {
    LED3_GPIO_CLK_ENABLE();
 8000b92:	4b19      	ldr	r3, [pc, #100]	@ (8000bf8 <BSP_LED_Init+0xb0>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b96:	4a18      	ldr	r2, [pc, #96]	@ (8000bf8 <BSP_LED_Init+0xb0>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9e:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <BSP_LED_Init+0xb0>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	4a13      	ldr	r2, [pc, #76]	@ (8000bfc <BSP_LED_Init+0xb4>)
 8000bae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bb2:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_PULLUP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c00 <BSP_LED_Init+0xb8>)
 8000bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc8:	f107 0214 	add.w	r2, r7, #20
 8000bcc:	4611      	mov	r1, r2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 fc70 	bl	80014b4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <BSP_LED_Init+0xb8>)
 8000bd8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	4a07      	ldr	r2, [pc, #28]	@ (8000bfc <BSP_LED_Init+0xb4>)
 8000be0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000be4:	2200      	movs	r2, #0
 8000be6:	4619      	mov	r1, r3
 8000be8:	f000 fde4 	bl	80017b4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3728      	adds	r7, #40	@ 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	20000004 	.word	0x20000004
 8000c00:	2000000c 	.word	0x2000000c

08000c04 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08c      	sub	sp, #48	@ 0x30
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	460a      	mov	r2, r1
 8000c0e:	71fb      	strb	r3, [r7, #7]
 8000c10:	4613      	mov	r3, r2
 8000c12:	71bb      	strb	r3, [r7, #6]
  int32_t               status = BSP_ERROR_NONE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef      GPIO_Init;
  uint32_t              BSP_BUTTON_IT_PRIO[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
 8000c18:	230f      	movs	r3, #15
 8000c1a:	617b      	str	r3, [r7, #20]
  uint32_t              BUTTON_EXTI_LINE[BUTTONn]   = {BUTTON_USER_EXTI_LINE};
 8000c1c:	4b3f      	ldr	r3, [pc, #252]	@ (8000d1c <BSP_PB_Init+0x118>)
 8000c1e:	613b      	str	r3, [r7, #16]
  BSP_EXTI_LineCallback ButtonCallback[BUTTONn]     = {BUTTON_USER_EXTI_Callback};
 8000c20:	4b3f      	ldr	r3, [pc, #252]	@ (8000d20 <BSP_PB_Init+0x11c>)
 8000c22:	60fb      	str	r3, [r7, #12]

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000c24:	4b3f      	ldr	r3, [pc, #252]	@ (8000d24 <BSP_PB_Init+0x120>)
 8000c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c28:	4a3e      	ldr	r2, [pc, #248]	@ (8000d24 <BSP_PB_Init+0x120>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c30:	4b3c      	ldr	r3, [pc, #240]	@ (8000d24 <BSP_PB_Init+0x120>)
 8000c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]

  GPIO_Init.Pin   = BUTTON_PIN[Button];
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	4a3a      	ldr	r2, [pc, #232]	@ (8000d28 <BSP_PB_Init+0x124>)
 8000c40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c44:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	623b      	str	r3, [r7, #32]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000c4e:	79bb      	ldrb	r3, [r7, #6]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d10b      	bne.n	8000c6c <BSP_PB_Init+0x68>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	4a34      	ldr	r2, [pc, #208]	@ (8000d2c <BSP_PB_Init+0x128>)
 8000c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c60:	f107 0218 	add.w	r2, r7, #24
 8000c64:	4611      	mov	r1, r2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 fc24 	bl	80014b4 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8000c6c:	79bb      	ldrb	r3, [r7, #6]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d14f      	bne.n	8000d12 <BSP_PB_Init+0x10e>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_RISING;
 8000c72:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	4a2c      	ldr	r2, [pc, #176]	@ (8000d2c <BSP_PB_Init+0x128>)
 8000c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c80:	f107 0218 	add.w	r2, r7, #24
 8000c84:	4611      	mov	r1, r2
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 fc14 	bl	80014b4 <HAL_GPIO_Init>

    if (HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) == HAL_OK)
 8000c8c:	79fa      	ldrb	r2, [r7, #7]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	4413      	add	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4a26      	ldr	r2, [pc, #152]	@ (8000d30 <BSP_PB_Init+0x12c>)
 8000c98:	441a      	add	r2, r3
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	3330      	adds	r3, #48	@ 0x30
 8000ca0:	443b      	add	r3, r7
 8000ca2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4610      	mov	r0, r2
 8000caa:	f000 fba6 	bl	80013fa <HAL_EXTI_GetHandle>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d12b      	bne.n	8000d0c <BSP_PB_Init+0x108>
    {
      if (HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_RISING_CB_ID, ButtonCallback[Button]) == HAL_OK)
 8000cb4:	79fa      	ldrb	r2, [r7, #7]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	4413      	add	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8000d30 <BSP_PB_Init+0x12c>)
 8000cc0:	1898      	adds	r0, r3, r2
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	3330      	adds	r3, #48	@ 0x30
 8000cc8:	443b      	add	r3, r7
 8000cca:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	f000 fb66 	bl	80013a2 <HAL_EXTI_RegisterCallback>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d113      	bne.n	8000d04 <BSP_PB_Init+0x100>
      {
        /* Enable and set Button EXTI Interrupt to the lowest priority */
        HAL_NVIC_SetPriority(BUTTON_IRQn[Button], BSP_BUTTON_IT_PRIO[Button], 0x00);
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	4a15      	ldr	r2, [pc, #84]	@ (8000d34 <BSP_PB_Init+0x130>)
 8000ce0:	56d0      	ldrsb	r0, [r2, r3]
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	3330      	adds	r3, #48	@ 0x30
 8000ce8:	443b      	add	r3, r7
 8000cea:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f000 fb22 	bl	800133a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8000d34 <BSP_PB_Init+0x130>)
 8000cfa:	56d3      	ldrsb	r3, [r2, r3]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 fb36 	bl	800136e <HAL_NVIC_EnableIRQ>
 8000d02:	e006      	b.n	8000d12 <BSP_PB_Init+0x10e>
      }
      else
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8000d04:	f06f 0303 	mvn.w	r3, #3
 8000d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d0a:	e002      	b.n	8000d12 <BSP_PB_Init+0x10e>
      }
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 8000d0c:	f06f 0303 	mvn.w	r3, #3
 8000d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }

  return status;
 8000d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3730      	adds	r7, #48	@ 0x30
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	0600000d 	.word	0x0600000d
 8000d20:	08000ee9 	.word	0x08000ee9
 8000d24:	40021000 	.word	0x40021000
 8000d28:	20000018 	.word	0x20000018
 8000d2c:	2000001c 	.word	0x2000001c
 8000d30:	200001ec 	.word	0x200001ec
 8000d34:	20000020 	.word	0x20000020

08000d38 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <BSP_PB_IRQHandler>:
  *   This parameter should be:
  *     @arg BUTTON_USER
  * @retval None.
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000d5a:	79fa      	ldrb	r2, [r7, #7]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4413      	add	r3, r2
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	4a04      	ldr	r2, [pc, #16]	@ (8000d78 <BSP_PB_IRQHandler+0x28>)
 8000d66:	4413      	add	r3, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 fb5b 	bl	8001424 <HAL_EXTI_IRQHandler>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200001ec 	.word	0x200001ec

08000d7c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                configuration information for the specified COM peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d103      	bne.n	8000d9a <BSP_COM_Init+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8000d92:	f06f 0301 	mvn.w	r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	e03a      	b.n	8000e10 <BSP_COM_Init+0x94>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
 8000d9a:	79fa      	ldrb	r2, [r7, #7]
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	491f      	ldr	r1, [pc, #124]	@ (8000e1c <BSP_COM_Init+0xa0>)
 8000da0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000da4:	491e      	ldr	r1, [pc, #120]	@ (8000e20 <BSP_COM_Init+0xa4>)
 8000da6:	2094      	movs	r0, #148	@ 0x94
 8000da8:	fb00 f303 	mul.w	r3, r0, r3
 8000dac:	440b      	add	r3, r1
 8000dae:	601a      	str	r2, [r3, #0]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	2294      	movs	r2, #148	@ 0x94
 8000db4:	fb02 f303 	mul.w	r3, r2, r3
 8000db8:	4a19      	ldr	r2, [pc, #100]	@ (8000e20 <BSP_COM_Init+0xa4>)
 8000dba:	4413      	add	r3, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 f89b 	bl	8000ef8 <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d123      	bne.n	8000e10 <BSP_COM_Init+0x94>
    {
      if (COM == COM1)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d110      	bne.n	8000df0 <BSP_COM_Init+0x74>
      {
        if (MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2294      	movs	r2, #148	@ 0x94
 8000dd2:	fb02 f303 	mul.w	r3, r2, r3
 8000dd6:	4a12      	ldr	r2, [pc, #72]	@ (8000e20 <BSP_COM_Init+0xa4>)
 8000dd8:	4413      	add	r3, r2
 8000dda:	6839      	ldr	r1, [r7, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 f821 	bl	8000e24 <MX_LPUART1_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d013      	beq.n	8000e10 <BSP_COM_Init+0x94>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 8000de8:	f06f 0303 	mvn.w	r3, #3
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	e00f      	b.n	8000e10 <BSP_COM_Init+0x94>
        }
      }
      else /* COM = COM2 */
      {
        if (MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	2294      	movs	r2, #148	@ 0x94
 8000df4:	fb02 f303 	mul.w	r3, r2, r3
 8000df8:	4a09      	ldr	r2, [pc, #36]	@ (8000e20 <BSP_COM_Init+0xa4>)
 8000dfa:	4413      	add	r3, r2
 8000dfc:	6839      	ldr	r1, [r7, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f841 	bl	8000e86 <MX_USART3_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d002      	beq.n	8000e10 <BSP_COM_Init+0x94>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 8000e0a:	f06f 0303 	mvn.w	r3, #3
 8000e0e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return status;
 8000e10:	68fb      	ldr	r3, [r7, #12]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000024 	.word	0x20000024
 8000e20:	200000c4 	.word	0x200000c4

08000e24 <MX_LPUART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	891b      	ldrh	r3, [r3, #8]
 8000e42:	461a      	mov	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	895b      	ldrh	r3, [r3, #10]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	220c      	movs	r2, #12
 8000e56:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	899b      	ldrh	r3, [r3, #12]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000e68:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f002 f976 	bl	8003168 <HAL_UART_Init>
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <MX_USART3_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	891b      	ldrh	r3, [r3, #8]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	895b      	ldrh	r3, [r3, #10]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	899b      	ldrh	r3, [r3, #12]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000eca:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f002 f945 	bl	8003168 <HAL_UART_Init>
 8000ede:	4603      	mov	r3, r0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000eec:	2000      	movs	r0, #0
 8000eee:	f7ff ff23 	bl	8000d38 <BSP_PB_Callback>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b098      	sub	sp, #96	@ 0x60
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init;
  GPIO_TypeDef    *COM_TX_PORT[COMn] = {COM1_TX_GPIO_PORT, COM2_TX_GPIO_PORT};
 8000f00:	4a60      	ldr	r2, [pc, #384]	@ (8001084 <UART_MspInit+0x18c>)
 8000f02:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f0a:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIO_TypeDef    *COM_RX_PORT[COMn] = {COM1_RX_GPIO_PORT, COM2_RX_GPIO_PORT};
 8000f0e:	4a5d      	ldr	r2, [pc, #372]	@ (8001084 <UART_MspInit+0x18c>)
 8000f10:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f18:	e883 0003 	stmia.w	r3, {r0, r1}
  uint16_t         COM_TX_PIN[COMn]  = {COM1_TX_PIN, COM2_TX_PIN};
 8000f1c:	4b5a      	ldr	r3, [pc, #360]	@ (8001088 <UART_MspInit+0x190>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	637b      	str	r3, [r7, #52]	@ 0x34
  uint16_t         COM_RX_PIN[COMn]  = {COM1_RX_PIN, COM2_RX_PIN};
 8000f22:	4b5a      	ldr	r3, [pc, #360]	@ (800108c <UART_MspInit+0x194>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t          COM_TX_AF[COMn]   = {COM1_TX_AF, COM2_TX_AF};
 8000f28:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8000f2c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint8_t          COM_RX_AF[COMn]   = {COM1_RX_AF, COM2_RX_AF};
 8000f2e:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8000f32:	853b      	strh	r3, [r7, #40]	@ 0x28
  COM_TypeDef      COM;

  /* Get COM according instance */
  COM = (huart->Instance == COM1_UART) ? COM1 : COM2;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a55      	ldr	r2, [pc, #340]	@ (8001090 <UART_MspInit+0x198>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	bf14      	ite	ne
 8000f3e:	2301      	movne	r3, #1
 8000f40:	2300      	moveq	r3, #0
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  /* Enable COM and GPIO clocks */
  if (COM == COM1)
 8000f48:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d132      	bne.n	8000fb6 <UART_MspInit+0xbe>
  {
    /* Enable VddIO2 for GPIOG */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000f50:	4b50      	ldr	r3, [pc, #320]	@ (8001094 <UART_MspInit+0x19c>)
 8000f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f54:	4a4f      	ldr	r2, [pc, #316]	@ (8001094 <UART_MspInit+0x19c>)
 8000f56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f5c:	4b4d      	ldr	r3, [pc, #308]	@ (8001094 <UART_MspInit+0x19c>)
 8000f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_PWREx_EnableVddIO2();
 8000f68:	f000 fcd6 	bl	8001918 <HAL_PWREx_EnableVddIO2>
    COM1_TX_GPIO_CLK_ENABLE();
 8000f6c:	4b49      	ldr	r3, [pc, #292]	@ (8001094 <UART_MspInit+0x19c>)
 8000f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f70:	4a48      	ldr	r2, [pc, #288]	@ (8001094 <UART_MspInit+0x19c>)
 8000f72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f78:	4b46      	ldr	r3, [pc, #280]	@ (8001094 <UART_MspInit+0x19c>)
 8000f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f80:	623b      	str	r3, [r7, #32]
 8000f82:	6a3b      	ldr	r3, [r7, #32]
    COM1_RX_GPIO_CLK_ENABLE();
 8000f84:	4b43      	ldr	r3, [pc, #268]	@ (8001094 <UART_MspInit+0x19c>)
 8000f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f88:	4a42      	ldr	r2, [pc, #264]	@ (8001094 <UART_MspInit+0x19c>)
 8000f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f90:	4b40      	ldr	r3, [pc, #256]	@ (8001094 <UART_MspInit+0x19c>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	69fb      	ldr	r3, [r7, #28]
    COM1_CLK_ENABLE();
 8000f9c:	4b3d      	ldr	r3, [pc, #244]	@ (8001094 <UART_MspInit+0x19c>)
 8000f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fa0:	4a3c      	ldr	r2, [pc, #240]	@ (8001094 <UART_MspInit+0x19c>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000fa8:	4b3a      	ldr	r3, [pc, #232]	@ (8001094 <UART_MspInit+0x19c>)
 8000faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	61bb      	str	r3, [r7, #24]
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	e023      	b.n	8000ffe <UART_MspInit+0x106>
  }
  else /* COM = COM2 */
  {
    COM2_TX_GPIO_CLK_ENABLE();
 8000fb6:	4b37      	ldr	r3, [pc, #220]	@ (8001094 <UART_MspInit+0x19c>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fba:	4a36      	ldr	r2, [pc, #216]	@ (8001094 <UART_MspInit+0x19c>)
 8000fbc:	f043 0308 	orr.w	r3, r3, #8
 8000fc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc2:	4b34      	ldr	r3, [pc, #208]	@ (8001094 <UART_MspInit+0x19c>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc6:	f003 0308 	and.w	r3, r3, #8
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	697b      	ldr	r3, [r7, #20]
    COM2_RX_GPIO_CLK_ENABLE();
 8000fce:	4b31      	ldr	r3, [pc, #196]	@ (8001094 <UART_MspInit+0x19c>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd2:	4a30      	ldr	r2, [pc, #192]	@ (8001094 <UART_MspInit+0x19c>)
 8000fd4:	f043 0308 	orr.w	r3, r3, #8
 8000fd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fda:	4b2e      	ldr	r3, [pc, #184]	@ (8001094 <UART_MspInit+0x19c>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fde:	f003 0308 	and.w	r3, r3, #8
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
    COM2_CLK_ENABLE();
 8000fe6:	4b2b      	ldr	r3, [pc, #172]	@ (8001094 <UART_MspInit+0x19c>)
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fea:	4a2a      	ldr	r2, [pc, #168]	@ (8001094 <UART_MspInit+0x19c>)
 8000fec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ff0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ff2:	4b28      	ldr	r3, [pc, #160]	@ (8001094 <UART_MspInit+0x19c>)
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ff6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
  }

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
 8000ffe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	3360      	adds	r3, #96	@ 0x60
 8001006:	443b      	add	r3, r7
 8001008:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 800100c:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	64fb      	str	r3, [r7, #76]	@ 0x4c
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001012:	2302      	movs	r3, #2
 8001014:	657b      	str	r3, [r7, #84]	@ 0x54
  GPIO_Init.Pull      = GPIO_PULLUP;
 8001016:	2301      	movs	r3, #1
 8001018:	653b      	str	r3, [r7, #80]	@ 0x50
  GPIO_Init.Alternate = COM_TX_AF[COM];
 800101a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800101e:	3360      	adds	r3, #96	@ 0x60
 8001020:	443b      	add	r3, r7
 8001022:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8001026:	65bb      	str	r3, [r7, #88]	@ 0x58
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
 8001028:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	3360      	adds	r3, #96	@ 0x60
 8001030:	443b      	add	r3, r7
 8001032:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001036:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fa39 	bl	80014b4 <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
 8001042:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	3360      	adds	r3, #96	@ 0x60
 800104a:	443b      	add	r3, r7
 800104c:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8001050:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_Init.Alternate = COM_RX_AF[COM];
 8001052:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001056:	3360      	adds	r3, #96	@ 0x60
 8001058:	443b      	add	r3, r7
 800105a:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800105e:	65bb      	str	r3, [r7, #88]	@ 0x58
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
 8001060:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	3360      	adds	r3, #96	@ 0x60
 8001068:	443b      	add	r3, r7
 800106a:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800106e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f000 fa1d 	bl	80014b4 <HAL_GPIO_Init>
}
 800107a:	bf00      	nop
 800107c:	3760      	adds	r7, #96	@ 0x60
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	08003ce8 	.word	0x08003ce8
 8001088:	08003cf0 	.word	0x08003cf0
 800108c:	08003cf4 	.word	0x08003cf4
 8001090:	40008000 	.word	0x40008000
 8001094:	40021000 	.word	0x40021000

08001098 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80010a2:	2004      	movs	r0, #4
 80010a4:	f000 f93e 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80010a8:	f7ff fc76 	bl	8000998 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ac:	2000      	movs	r0, #0
 80010ae:	f000 f80d 	bl	80010cc <HAL_InitTick>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d002      	beq.n	80010be <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	71fb      	strb	r3, [r7, #7]
 80010bc:	e001      	b.n	80010c2 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010be:	f7ff fbbb 	bl	8000838 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010c2:	79fb      	ldrb	r3, [r7, #7]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010d8:	4b17      	ldr	r3, [pc, #92]	@ (8001138 <HAL_InitTick+0x6c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d023      	beq.n	8001128 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <HAL_InitTick+0x70>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <HAL_InitTick+0x6c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4619      	mov	r1, r3
 80010ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f947 	bl	800138a <HAL_SYSTICK_Config>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10f      	bne.n	8001122 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b07      	cmp	r3, #7
 8001106:	d809      	bhi.n	800111c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001108:	2200      	movs	r2, #0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f000 f913 	bl	800133a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001114:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <HAL_InitTick+0x74>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	e007      	b.n	800112c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e004      	b.n	800112c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	73fb      	strb	r3, [r7, #15]
 8001126:	e001      	b.n	800112c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000030 	.word	0x20000030
 800113c:	20000000 	.word	0x20000000
 8001140:	2000002c 	.word	0x2000002c

08001144 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_IncTick+0x20>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <HAL_IncTick+0x24>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a04      	ldr	r2, [pc, #16]	@ (8001168 <HAL_IncTick+0x24>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000030 	.word	0x20000030
 8001168:	200001f8 	.word	0x200001f8

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	@ (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	200001f8 	.word	0x200001f8

08001184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	db0b      	blt.n	8001212 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f003 021f 	and.w	r2, r3, #31
 8001200:	4907      	ldr	r1, [pc, #28]	@ (8001220 <__NVIC_EnableIRQ+0x38>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	2001      	movs	r0, #1
 800120a:	fa00 f202 	lsl.w	r2, r0, r2
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e100 	.word	0xe000e100

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	@ (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	0152      	lsls	r2, r2, #5
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	@ (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0152      	lsls	r2, r2, #5
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	@ 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b03      	cmp	r3, #3
 8001294:	bf28      	it	cs
 8001296:	2303      	movcs	r3, #3
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3303      	adds	r3, #3
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b04      	subs	r3, #4
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	@ 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012f0:	d301      	bcc.n	80012f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00f      	b.n	8001316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <SysTick_Config+0x40>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fe:	2107      	movs	r1, #7
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f7ff ff8e 	bl	8001224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <SysTick_Config+0x40>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <SysTick_Config+0x40>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff29 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001348:	f7ff ff40 	bl	80011cc <__NVIC_GetPriorityGrouping>
 800134c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68b9      	ldr	r1, [r7, #8]
 8001352:	6978      	ldr	r0, [r7, #20]
 8001354:	f7ff ff90 	bl	8001278 <NVIC_EncodePriority>
 8001358:	4602      	mov	r2, r0
 800135a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff5f 	bl	8001224 <__NVIC_SetPriority>
}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff33 	bl	80011e8 <__NVIC_EnableIRQ>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ffa4 	bl	80012e0 <SysTick_Config>
 8001398:	4603      	mov	r3, r0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80013a2:	b480      	push	{r7}
 80013a4:	b087      	sub	sp, #28
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	460b      	mov	r3, r1
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80013b4:	7afb      	ldrb	r3, [r7, #11]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d011      	beq.n	80013de <HAL_EXTI_RegisterCallback+0x3c>
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	dc13      	bgt.n	80013e6 <HAL_EXTI_RegisterCallback+0x44>
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d002      	beq.n	80013c8 <HAL_EXTI_RegisterCallback+0x26>
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d007      	beq.n	80013d6 <HAL_EXTI_RegisterCallback+0x34>
 80013c6:	e00e      	b.n	80013e6 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	609a      	str	r2, [r3, #8]
      break;
 80013d4:	e00a      	b.n	80013ec <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	605a      	str	r2, [r3, #4]
      break;
 80013dc:	e006      	b.n	80013ec <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	609a      	str	r2, [r3, #8]
      break;
 80013e4:	e002      	b.n	80013ec <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	75fb      	strb	r3, [r7, #23]
      break;
 80013ea:	bf00      	nop
  }

  return status;
 80013ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	371c      	adds	r7, #28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
  /* Check null pointer */
  if(hexti == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e003      	b.n	8001416 <HAL_EXTI_GetHandle+0x1c>

  /* Check parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Store line number as handle private field */
  hexti->Line = ExtiLine;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	0c1b      	lsrs	r3, r3, #16
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 031f 	and.w	r3, r3, #31
 8001440:	2201      	movs	r2, #1
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	015a      	lsls	r2, r3, #5
 800144c:	4b17      	ldr	r3, [pc, #92]	@ (80014ac <HAL_EXTI_IRQHandler+0x88>)
 800144e:	4413      	add	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d009      	beq.n	8001476 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->RisingCallback != NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	015a      	lsls	r2, r3, #5
 800147a:	4b0d      	ldr	r3, [pc, #52]	@ (80014b0 <HAL_EXTI_IRQHandler+0x8c>)
 800147c:	4413      	add	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d009      	beq.n	80014a4 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->FallingCallback != NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d002      	beq.n	80014a4 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	4798      	blx	r3
    }
  }
}
 80014a4:	bf00      	nop
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	4002f40c 	.word	0x4002f40c
 80014b0:	4002f410 	.word	0x4002f410

080014b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b087      	sub	sp, #28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014c2:	e158      	b.n	8001776 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	2101      	movs	r1, #1
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	fa01 f303 	lsl.w	r3, r1, r3
 80014d0:	4013      	ands	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 814a 	beq.w	8001770 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d005      	beq.n	80014f4 <HAL_GPIO_Init+0x40>
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d130      	bne.n	8001556 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	2203      	movs	r2, #3
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	68da      	ldr	r2, [r3, #12]
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4313      	orrs	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800152a:	2201      	movs	r2, #1
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	091b      	lsrs	r3, r3, #4
 8001540:	f003 0201 	and.w	r2, r3, #1
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	2b03      	cmp	r3, #3
 8001560:	d017      	beq.n	8001592 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	2203      	movs	r2, #3
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d123      	bne.n	80015e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	08da      	lsrs	r2, r3, #3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3208      	adds	r2, #8
 80015a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	220f      	movs	r2, #15
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	691a      	ldr	r2, [r3, #16]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	08da      	lsrs	r2, r3, #3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3208      	adds	r2, #8
 80015e0:	6939      	ldr	r1, [r7, #16]
 80015e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	2203      	movs	r2, #3
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 0203 	and.w	r2, r3, #3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 80a4 	beq.w	8001770 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8001628:	4a5a      	ldr	r2, [pc, #360]	@ (8001794 <HAL_GPIO_Init+0x2e0>)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	089b      	lsrs	r3, r3, #2
 800162e:	3318      	adds	r3, #24
 8001630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	220f      	movs	r2, #15
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a52      	ldr	r2, [pc, #328]	@ (8001798 <HAL_GPIO_Init+0x2e4>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d025      	beq.n	80016a0 <HAL_GPIO_Init+0x1ec>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a51      	ldr	r2, [pc, #324]	@ (800179c <HAL_GPIO_Init+0x2e8>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d01f      	beq.n	800169c <HAL_GPIO_Init+0x1e8>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a50      	ldr	r2, [pc, #320]	@ (80017a0 <HAL_GPIO_Init+0x2ec>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d019      	beq.n	8001698 <HAL_GPIO_Init+0x1e4>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a4f      	ldr	r2, [pc, #316]	@ (80017a4 <HAL_GPIO_Init+0x2f0>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d013      	beq.n	8001694 <HAL_GPIO_Init+0x1e0>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a4e      	ldr	r2, [pc, #312]	@ (80017a8 <HAL_GPIO_Init+0x2f4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d00d      	beq.n	8001690 <HAL_GPIO_Init+0x1dc>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a4d      	ldr	r2, [pc, #308]	@ (80017ac <HAL_GPIO_Init+0x2f8>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d007      	beq.n	800168c <HAL_GPIO_Init+0x1d8>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a4c      	ldr	r2, [pc, #304]	@ (80017b0 <HAL_GPIO_Init+0x2fc>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d101      	bne.n	8001688 <HAL_GPIO_Init+0x1d4>
 8001684:	2306      	movs	r3, #6
 8001686:	e00c      	b.n	80016a2 <HAL_GPIO_Init+0x1ee>
 8001688:	2307      	movs	r3, #7
 800168a:	e00a      	b.n	80016a2 <HAL_GPIO_Init+0x1ee>
 800168c:	2305      	movs	r3, #5
 800168e:	e008      	b.n	80016a2 <HAL_GPIO_Init+0x1ee>
 8001690:	2304      	movs	r3, #4
 8001692:	e006      	b.n	80016a2 <HAL_GPIO_Init+0x1ee>
 8001694:	2303      	movs	r3, #3
 8001696:	e004      	b.n	80016a2 <HAL_GPIO_Init+0x1ee>
 8001698:	2302      	movs	r3, #2
 800169a:	e002      	b.n	80016a2 <HAL_GPIO_Init+0x1ee>
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <HAL_GPIO_Init+0x1ee>
 80016a0:	2300      	movs	r3, #0
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	f002 0203 	and.w	r2, r2, #3
 80016a8:	00d2      	lsls	r2, r2, #3
 80016aa:	4093      	lsls	r3, r2
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80016b2:	4938      	ldr	r1, [pc, #224]	@ (8001794 <HAL_GPIO_Init+0x2e0>)
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	089b      	lsrs	r3, r3, #2
 80016b8:	3318      	adds	r3, #24
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016c0:	4b34      	ldr	r3, [pc, #208]	@ (8001794 <HAL_GPIO_Init+0x2e0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001794 <HAL_GPIO_Init+0x2e0>)
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001794 <HAL_GPIO_Init+0x2e0>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800170e:	4a21      	ldr	r2, [pc, #132]	@ (8001794 <HAL_GPIO_Init+0x2e0>)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001714:	4b1f      	ldr	r3, [pc, #124]	@ (8001794 <HAL_GPIO_Init+0x2e0>)
 8001716:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800171a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800173a:	4a16      	ldr	r2, [pc, #88]	@ (8001794 <HAL_GPIO_Init+0x2e0>)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8001742:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <HAL_GPIO_Init+0x2e0>)
 8001744:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001768:	4a0a      	ldr	r2, [pc, #40]	@ (8001794 <HAL_GPIO_Init+0x2e0>)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	3301      	adds	r3, #1
 8001774:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	fa22 f303 	lsr.w	r3, r2, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	f47f ae9f 	bne.w	80014c4 <HAL_GPIO_Init+0x10>
  }
}
 8001786:	bf00      	nop
 8001788:	bf00      	nop
 800178a:	371c      	adds	r7, #28
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	4002f400 	.word	0x4002f400
 8001798:	42020000 	.word	0x42020000
 800179c:	42020400 	.word	0x42020400
 80017a0:	42020800 	.word	0x42020800
 80017a4:	42020c00 	.word	0x42020c00
 80017a8:	42021000 	.word	0x42021000
 80017ac:	42021400 	.word	0x42021400
 80017b0:	42021800 	.word	0x42021800

080017b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	807b      	strh	r3, [r7, #2]
 80017c0:	4613      	mov	r3, r2
 80017c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017c4:	787b      	ldrb	r3, [r7, #1]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ca:	887a      	ldrh	r2, [r7, #2]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017d0:	e002      	b.n	80017d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017d2:	887a      	ldrh	r2, [r7, #2]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017ec:	2300      	movs	r3, #0
 80017ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80017f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001820 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d002      	beq.n	8001802 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	73fb      	strb	r3, [r7, #15]
 8001800:	e007      	b.n	8001812 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001802:	4b07      	ldr	r3, [pc, #28]	@ (8001820 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 0204 	bic.w	r2, r3, #4
 800180a:	4905      	ldr	r1, [pc, #20]	@ (8001820 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4313      	orrs	r3, r2
 8001810:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001812:	7bfb      	ldrb	r3, [r7, #15]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	40030400 	.word	0x40030400

08001824 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001828:	4b05      	ldr	r3, [pc, #20]	@ (8001840 <HAL_ICACHE_Enable+0x1c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a04      	ldr	r2, [pc, #16]	@ (8001840 <HAL_ICACHE_Enable+0x1c>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	40030400 	.word	0x40030400

08001844 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001848:	4b04      	ldr	r3, [pc, #16]	@ (800185c <HAL_PWREx_GetVoltageRange+0x18>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40007000 	.word	0x40007000

08001860 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8001868:	4b27      	ldr	r3, [pc, #156]	@ (8001908 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001870:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8001872:	f000 f871 	bl	8001958 <HAL_PWREx_SMPS_GetEffectiveMode>
 8001876:	4603      	mov	r3, r0
 8001878:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800187c:	d101      	bne.n	8001882 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e03e      	b.n	8001900 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8001882:	4b21      	ldr	r3, [pc, #132]	@ (8001908 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800188a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800188e:	d101      	bne.n	8001894 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e035      	b.n	8001900 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001894:	68ba      	ldr	r2, [r7, #8]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	d101      	bne.n	80018a0 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	e02f      	b.n	8001900 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80018a0:	4b19      	ldr	r3, [pc, #100]	@ (8001908 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80018a8:	4917      	ldr	r1, [pc, #92]	@ (8001908 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80018b0:	4b16      	ldr	r3, [pc, #88]	@ (800190c <HAL_PWREx_ControlVoltageScaling+0xac>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	095b      	lsrs	r3, r3, #5
 80018b6:	4a16      	ldr	r2, [pc, #88]	@ (8001910 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	09db      	lsrs	r3, r3, #7
 80018be:	2232      	movs	r2, #50	@ 0x32
 80018c0:	fb02 f303 	mul.w	r3, r2, r3
 80018c4:	4a13      	ldr	r2, [pc, #76]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80018c6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ca:	08db      	lsrs	r3, r3, #3
 80018cc:	3301      	adds	r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018d0:	e002      	b.n	80018d8 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018e4:	d102      	bne.n	80018ec <HAL_PWREx_ControlVoltageScaling+0x8c>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f2      	bne.n	80018d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018ec:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018f8:	d101      	bne.n	80018fe <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e000      	b.n	8001900 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40007000 	.word	0x40007000
 800190c:	20000000 	.word	0x20000000
 8001910:	0a7c5ac5 	.word	0x0a7c5ac5
 8001914:	cccccccd 	.word	0xcccccccd

08001918 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800191c:	4b05      	ldr	r3, [pc, #20]	@ (8001934 <HAL_PWREx_EnableVddIO2+0x1c>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	4a04      	ldr	r2, [pc, #16]	@ (8001934 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001922:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001926:	6053      	str	r3, [r2, #4]
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40007000 	.word	0x40007000

08001938 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800193c:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	4a04      	ldr	r2, [pc, #16]	@ (8001954 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001942:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001946:	6093      	str	r3, [r2, #8]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40007000 	.word	0x40007000

08001958 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800195e:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800196e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	e00a      	b.n	800198c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d103      	bne.n	8001988 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8001980:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	e001      	b.n	800198c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8001988:	2300      	movs	r3, #0
 800198a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 800198c:	687b      	ldr	r3, [r7, #4]
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40007000 	.word	0x40007000

080019a0 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d102      	bne.n	80019b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	f000 bcc2 	b.w	8002338 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019b4:	4b99      	ldr	r3, [pc, #612]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019be:	4b97      	ldr	r3, [pc, #604]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0310 	and.w	r3, r3, #16
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 80e9 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d006      	beq.n	80019ea <HAL_RCC_OscConfig+0x4a>
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	2b0c      	cmp	r3, #12
 80019e0:	f040 8083 	bne.w	8001aea <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d17f      	bne.n	8001aea <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019ea:	4b8c      	ldr	r3, [pc, #560]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d006      	beq.n	8001a04 <HAL_RCC_OscConfig+0x64>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d102      	bne.n	8001a04 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	f000 bc9a 	b.w	8002338 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a08:	4b84      	ldr	r3, [pc, #528]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d004      	beq.n	8001a1e <HAL_RCC_OscConfig+0x7e>
 8001a14:	4b81      	ldr	r3, [pc, #516]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a1c:	e005      	b.n	8001a2a <HAL_RCC_OscConfig+0x8a>
 8001a1e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d224      	bcs.n	8001a78 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 fe9c 	bl	8002770 <RCC_SetFlashLatencyFromMSIRange>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	f000 bc7a 	b.w	8002338 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a44:	4b75      	ldr	r3, [pc, #468]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a74      	ldr	r2, [pc, #464]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001a4a:	f043 0308 	orr.w	r3, r3, #8
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b72      	ldr	r3, [pc, #456]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5c:	496f      	ldr	r1, [pc, #444]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a62:	4b6e      	ldr	r3, [pc, #440]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	021b      	lsls	r3, r3, #8
 8001a70:	496a      	ldr	r1, [pc, #424]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	604b      	str	r3, [r1, #4]
 8001a76:	e026      	b.n	8001ac6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a78:	4b68      	ldr	r3, [pc, #416]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a67      	ldr	r2, [pc, #412]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001a7e:	f043 0308 	orr.w	r3, r3, #8
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	4b65      	ldr	r3, [pc, #404]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a90:	4962      	ldr	r1, [pc, #392]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a96:	4b61      	ldr	r3, [pc, #388]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	495d      	ldr	r1, [pc, #372]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10a      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f000 fe5b 	bl	8002770 <RCC_SetFlashLatencyFromMSIRange>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d002      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	f000 bc39 	b.w	8002338 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001ac6:	f000 fe17 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4a54      	ldr	r2, [pc, #336]	@ (8001c20 <HAL_RCC_OscConfig+0x280>)
 8001ace:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ad0:	4b54      	ldr	r3, [pc, #336]	@ (8001c24 <HAL_RCC_OscConfig+0x284>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff faf9 	bl	80010cc <HAL_InitTick>
 8001ada:	4603      	mov	r3, r0
 8001adc:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d060      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
 8001ae6:	f000 bc27 	b.w	8002338 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d039      	beq.n	8001b66 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001af2:	4b4a      	ldr	r3, [pc, #296]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a49      	ldr	r2, [pc, #292]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001afe:	f7ff fb35 	bl	800116c <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b04:	e00f      	b.n	8001b26 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b06:	f7ff fb31 	bl	800116c <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d908      	bls.n	8001b26 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b14:	4b41      	ldr	r3, [pc, #260]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d102      	bne.n	8001b26 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	f000 bc09 	b.w	8002338 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b26:	4b3d      	ldr	r3, [pc, #244]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0e9      	beq.n	8001b06 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b32:	4b3a      	ldr	r3, [pc, #232]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a39      	ldr	r2, [pc, #228]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001b38:	f043 0308 	orr.w	r3, r3, #8
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	4b37      	ldr	r3, [pc, #220]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4a:	4934      	ldr	r1, [pc, #208]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b50:	4b32      	ldr	r3, [pc, #200]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	021b      	lsls	r3, r3, #8
 8001b5e:	492f      	ldr	r1, [pc, #188]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
 8001b64:	e020      	b.n	8001ba8 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b66:	4b2d      	ldr	r3, [pc, #180]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a2c      	ldr	r2, [pc, #176]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001b6c:	f023 0301 	bic.w	r3, r3, #1
 8001b70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b72:	f7ff fafb 	bl	800116c <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b78:	e00e      	b.n	8001b98 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b7a:	f7ff faf7 	bl	800116c <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d907      	bls.n	8001b98 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b88:	4b24      	ldr	r3, [pc, #144]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e3cf      	b.n	8002338 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b98:	4b20      	ldr	r3, [pc, #128]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1ea      	bne.n	8001b7a <HAL_RCC_OscConfig+0x1da>
 8001ba4:	e000      	b.n	8001ba8 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ba6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d07e      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d005      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x226>
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	2b0c      	cmp	r3, #12
 8001bbe:	d10e      	bne.n	8001bde <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d10b      	bne.n	8001bde <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc6:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d06e      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x310>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d16a      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e3ac      	b.n	8002338 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001be6:	d106      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x256>
 8001be8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0b      	ldr	r2, [pc, #44]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001bee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	e024      	b.n	8001c40 <HAL_RCC_OscConfig+0x2a0>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bfe:	d113      	bne.n	8001c28 <HAL_RCC_OscConfig+0x288>
 8001c00:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a05      	ldr	r2, [pc, #20]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001c06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	4b03      	ldr	r3, [pc, #12]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a02      	ldr	r2, [pc, #8]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	e012      	b.n	8001c40 <HAL_RCC_OscConfig+0x2a0>
 8001c1a:	bf00      	nop
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	20000000 	.word	0x20000000
 8001c24:	2000002c 	.word	0x2000002c
 8001c28:	4b8b      	ldr	r3, [pc, #556]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a8a      	ldr	r2, [pc, #552]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b88      	ldr	r3, [pc, #544]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a87      	ldr	r2, [pc, #540]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001c3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d019      	beq.n	8001c7c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c48:	f7ff fa90 	bl	800116c <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c4e:	e00e      	b.n	8001c6e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c50:	f7ff fa8c 	bl	800116c <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	@ 0x64
 8001c5c:	d907      	bls.n	8001c6e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c5e:	4b7e      	ldr	r3, [pc, #504]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e364      	b.n	8002338 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c6e:	4b7a      	ldr	r3, [pc, #488]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0ea      	beq.n	8001c50 <HAL_RCC_OscConfig+0x2b0>
 8001c7a:	e01a      	b.n	8001cb2 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fa76 	bl	800116c <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c82:	e00e      	b.n	8001ca2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c84:	f7ff fa72 	bl	800116c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	@ 0x64
 8001c90:	d907      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c92:	4b71      	ldr	r3, [pc, #452]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e34a      	b.n	8002338 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ca2:	4b6d      	ldr	r3, [pc, #436]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1ea      	bne.n	8001c84 <HAL_RCC_OscConfig+0x2e4>
 8001cae:	e000      	b.n	8001cb2 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d06c      	beq.n	8001d98 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x330>
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2b0c      	cmp	r3, #12
 8001cc8:	d119      	bne.n	8001cfe <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d116      	bne.n	8001cfe <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cd0:	4b61      	ldr	r3, [pc, #388]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x348>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e327      	b.n	8002338 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce8:	4b5b      	ldr	r3, [pc, #364]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	061b      	lsls	r3, r3, #24
 8001cf6:	4958      	ldr	r1, [pc, #352]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cfc:	e04c      	b.n	8001d98 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d029      	beq.n	8001d5a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d06:	4b54      	ldr	r3, [pc, #336]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a53      	ldr	r2, [pc, #332]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001d0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d12:	f7ff fa2b 	bl	800116c <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d18:	e00e      	b.n	8001d38 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1a:	f7ff fa27 	bl	800116c <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d907      	bls.n	8001d38 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d28:	4b4b      	ldr	r3, [pc, #300]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e2ff      	b.n	8002338 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d38:	4b47      	ldr	r3, [pc, #284]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0ea      	beq.n	8001d1a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d44:	4b44      	ldr	r3, [pc, #272]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	061b      	lsls	r3, r3, #24
 8001d52:	4941      	ldr	r1, [pc, #260]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]
 8001d58:	e01e      	b.n	8001d98 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a3e      	ldr	r2, [pc, #248]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001d60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d66:	f7ff fa01 	bl	800116c <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d6c:	e00e      	b.n	8001d8c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d6e:	f7ff f9fd 	bl	800116c <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d907      	bls.n	8001d8c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d7c:	4b36      	ldr	r3, [pc, #216]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e2d5      	b.n	8002338 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d8c:	4b32      	ldr	r3, [pc, #200]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1ea      	bne.n	8001d6e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d062      	beq.n	8001e6a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d038      	beq.n	8001e1e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d108      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001db4:	4b28      	ldr	r3, [pc, #160]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dba:	4a27      	ldr	r2, [pc, #156]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001dbc:	f023 0310 	bic.w	r3, r3, #16
 8001dc0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001dc4:	e007      	b.n	8001dd6 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001dc6:	4b24      	ldr	r3, [pc, #144]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dcc:	4a22      	ldr	r2, [pc, #136]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001dce:	f043 0310 	orr.w	r3, r3, #16
 8001dd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd6:	4b20      	ldr	r3, [pc, #128]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ddc:	4a1e      	ldr	r2, [pc, #120]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de6:	f7ff f9c1 	bl	800116c <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dec:	e00f      	b.n	8001e0e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dee:	f7ff f9bd 	bl	800116c <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b07      	cmp	r3, #7
 8001dfa:	d908      	bls.n	8001e0e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dfc:	4b16      	ldr	r3, [pc, #88]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e294      	b.n	8002338 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e0e:	4b12      	ldr	r3, [pc, #72]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0e8      	beq.n	8001dee <HAL_RCC_OscConfig+0x44e>
 8001e1c:	e025      	b.n	8001e6a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e24:	4a0c      	ldr	r2, [pc, #48]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001e26:	f023 0301 	bic.w	r3, r3, #1
 8001e2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2e:	f7ff f99d 	bl	800116c <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e34:	e012      	b.n	8001e5c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e36:	f7ff f999 	bl	800116c <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b07      	cmp	r3, #7
 8001e42:	d90b      	bls.n	8001e5c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e44:	4b04      	ldr	r3, [pc, #16]	@ (8001e58 <HAL_RCC_OscConfig+0x4b8>)
 8001e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d004      	beq.n	8001e5c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e270      	b.n	8002338 <HAL_RCC_OscConfig+0x998>
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e5c:	4ba8      	ldr	r3, [pc, #672]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8001e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1e5      	bne.n	8001e36 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 812d 	beq.w	80020d2 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e7c:	4ba0      	ldr	r3, [pc, #640]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10d      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e88:	4b9d      	ldr	r3, [pc, #628]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8c:	4a9c      	ldr	r2, [pc, #624]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8001e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e92:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e94:	4b9a      	ldr	r3, [pc, #616]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea4:	4b97      	ldr	r3, [pc, #604]	@ (8002104 <HAL_RCC_OscConfig+0x764>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d11e      	bne.n	8001eee <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eb0:	4b94      	ldr	r3, [pc, #592]	@ (8002104 <HAL_RCC_OscConfig+0x764>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a93      	ldr	r2, [pc, #588]	@ (8002104 <HAL_RCC_OscConfig+0x764>)
 8001eb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ebc:	f7ff f956 	bl	800116c <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ec2:	e00e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec4:	f7ff f952 	bl	800116c <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d907      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed2:	4b8c      	ldr	r3, [pc, #560]	@ (8002104 <HAL_RCC_OscConfig+0x764>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e22a      	b.n	8002338 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee2:	4b88      	ldr	r3, [pc, #544]	@ (8002104 <HAL_RCC_OscConfig+0x764>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0ea      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d01f      	beq.n	8001f3a <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d010      	beq.n	8001f28 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f06:	4b7e      	ldr	r3, [pc, #504]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8001f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0c:	4a7c      	ldr	r2, [pc, #496]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8001f0e:	f043 0304 	orr.w	r3, r3, #4
 8001f12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f16:	4b7a      	ldr	r3, [pc, #488]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8001f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f1c:	4a78      	ldr	r2, [pc, #480]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f26:	e018      	b.n	8001f5a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f28:	4b75      	ldr	r3, [pc, #468]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8001f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f2e:	4a74      	ldr	r2, [pc, #464]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f38:	e00f      	b.n	8001f5a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f3a:	4b71      	ldr	r3, [pc, #452]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8001f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f40:	4a6f      	ldr	r2, [pc, #444]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8001f42:	f023 0301 	bic.w	r3, r3, #1
 8001f46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f4a:	4b6d      	ldr	r3, [pc, #436]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8001f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f50:	4a6b      	ldr	r2, [pc, #428]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8001f52:	f023 0304 	bic.w	r3, r3, #4
 8001f56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d068      	beq.n	8002034 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f62:	f7ff f903 	bl	800116c <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f68:	e011      	b.n	8001f8e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6a:	f7ff f8ff 	bl	800116c <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d908      	bls.n	8001f8e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f7c:	4b60      	ldr	r3, [pc, #384]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8001f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e1d4      	b.n	8002338 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f8e:	4b5c      	ldr	r3, [pc, #368]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8001f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0e6      	beq.n	8001f6a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d022      	beq.n	8001fee <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001fa8:	4b55      	ldr	r3, [pc, #340]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fae:	4a54      	ldr	r2, [pc, #336]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8001fb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001fb8:	e011      	b.n	8001fde <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fba:	f7ff f8d7 	bl	800116c <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d908      	bls.n	8001fde <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001fcc:	4b4c      	ldr	r3, [pc, #304]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8001fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e1ac      	b.n	8002338 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001fde:	4b48      	ldr	r3, [pc, #288]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8001fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0e6      	beq.n	8001fba <HAL_RCC_OscConfig+0x61a>
 8001fec:	e068      	b.n	80020c0 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001fee:	4b44      	ldr	r3, [pc, #272]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8001ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff4:	4a42      	ldr	r2, [pc, #264]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8001ff6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ffa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ffe:	e011      	b.n	8002024 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002000:	f7ff f8b4 	bl	800116c <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800200e:	4293      	cmp	r3, r2
 8002010:	d908      	bls.n	8002024 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002012:	4b3b      	ldr	r3, [pc, #236]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8002014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002018:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e189      	b.n	8002338 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002024:	4b36      	ldr	r3, [pc, #216]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1e6      	bne.n	8002000 <HAL_RCC_OscConfig+0x660>
 8002032:	e045      	b.n	80020c0 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002034:	f7ff f89a 	bl	800116c <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800203a:	e011      	b.n	8002060 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203c:	f7ff f896 	bl	800116c <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d908      	bls.n	8002060 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800204e:	4b2c      	ldr	r3, [pc, #176]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8002050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e16b      	b.n	8002338 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002060:	4b27      	ldr	r3, [pc, #156]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8002062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1e6      	bne.n	800203c <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800206e:	4b24      	ldr	r3, [pc, #144]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8002070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002078:	2b00      	cmp	r3, #0
 800207a:	d021      	beq.n	80020c0 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800207c:	4b20      	ldr	r3, [pc, #128]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 800207e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002082:	4a1f      	ldr	r2, [pc, #124]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 8002084:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002088:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800208c:	e011      	b.n	80020b2 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208e:	f7ff f86d 	bl	800116c <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	f241 3288 	movw	r2, #5000	@ 0x1388
 800209c:	4293      	cmp	r3, r2
 800209e:	d908      	bls.n	80020b2 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020a0:	4b17      	ldr	r3, [pc, #92]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 80020a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e142      	b.n	8002338 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020b2:	4b13      	ldr	r3, [pc, #76]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 80020b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1e6      	bne.n	800208e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020c0:	7ffb      	ldrb	r3, [r7, #31]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d105      	bne.n	80020d2 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 80020c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ca:	4a0d      	ldr	r2, [pc, #52]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 80020cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0320 	and.w	r3, r3, #32
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d04f      	beq.n	800217e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d028      	beq.n	8002138 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020e6:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 80020e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020ec:	4a04      	ldr	r2, [pc, #16]	@ (8002100 <HAL_RCC_OscConfig+0x760>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f6:	f7ff f839 	bl	800116c <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020fc:	e014      	b.n	8002128 <HAL_RCC_OscConfig+0x788>
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002108:	f7ff f830 	bl	800116c <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d908      	bls.n	8002128 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002116:	4b8a      	ldr	r3, [pc, #552]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 8002118:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e107      	b.n	8002338 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002128:	4b85      	ldr	r3, [pc, #532]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 800212a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0e8      	beq.n	8002108 <HAL_RCC_OscConfig+0x768>
 8002136:	e022      	b.n	800217e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002138:	4b81      	ldr	r3, [pc, #516]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 800213a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800213e:	4a80      	ldr	r2, [pc, #512]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002148:	f7ff f810 	bl	800116c <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800214e:	e00f      	b.n	8002170 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002150:	f7ff f80c 	bl	800116c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d908      	bls.n	8002170 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800215e:	4b78      	ldr	r3, [pc, #480]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 8002160:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e0e3      	b.n	8002338 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002170:	4b73      	ldr	r3, [pc, #460]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 8002172:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1e8      	bne.n	8002150 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 80d7 	beq.w	8002336 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002188:	4b6d      	ldr	r3, [pc, #436]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 030c 	and.w	r3, r3, #12
 8002190:	2b0c      	cmp	r3, #12
 8002192:	f000 8091 	beq.w	80022b8 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219a:	2b02      	cmp	r3, #2
 800219c:	d166      	bne.n	800226c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219e:	4b68      	ldr	r3, [pc, #416]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a67      	ldr	r2, [pc, #412]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 80021a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021aa:	f7fe ffdf 	bl	800116c <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021b0:	e00e      	b.n	80021d0 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b2:	f7fe ffdb 	bl	800116c <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d907      	bls.n	80021d0 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021c0:	4b5f      	ldr	r3, [pc, #380]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e0b3      	b.n	8002338 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021d0:	4b5b      	ldr	r3, [pc, #364]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1ea      	bne.n	80021b2 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021dc:	4b58      	ldr	r3, [pc, #352]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	4b58      	ldr	r3, [pc, #352]	@ (8002344 <HAL_RCC_OscConfig+0x9a4>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80021ec:	3a01      	subs	r2, #1
 80021ee:	0112      	lsls	r2, r2, #4
 80021f0:	4311      	orrs	r1, r2
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80021f6:	0212      	lsls	r2, r2, #8
 80021f8:	4311      	orrs	r1, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80021fe:	0852      	lsrs	r2, r2, #1
 8002200:	3a01      	subs	r2, #1
 8002202:	0552      	lsls	r2, r2, #21
 8002204:	4311      	orrs	r1, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800220a:	0852      	lsrs	r2, r2, #1
 800220c:	3a01      	subs	r2, #1
 800220e:	0652      	lsls	r2, r2, #25
 8002210:	4311      	orrs	r1, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002216:	06d2      	lsls	r2, r2, #27
 8002218:	430a      	orrs	r2, r1
 800221a:	4949      	ldr	r1, [pc, #292]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 800221c:	4313      	orrs	r3, r2
 800221e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002220:	4b47      	ldr	r3, [pc, #284]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a46      	ldr	r2, [pc, #280]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 8002226:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800222a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800222c:	4b44      	ldr	r3, [pc, #272]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4a43      	ldr	r2, [pc, #268]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 8002232:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002236:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7fe ff98 	bl	800116c <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800223e:	e00e      	b.n	800225e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002240:	f7fe ff94 	bl	800116c <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d907      	bls.n	800225e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800224e:	4b3c      	ldr	r3, [pc, #240]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e06c      	b.n	8002338 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225e:	4b38      	ldr	r3, [pc, #224]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0ea      	beq.n	8002240 <HAL_RCC_OscConfig+0x8a0>
 800226a:	e064      	b.n	8002336 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226c:	4b34      	ldr	r3, [pc, #208]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a33      	ldr	r2, [pc, #204]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 8002272:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7fe ff78 	bl	800116c <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800227e:	e00e      	b.n	800229e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002280:	f7fe ff74 	bl	800116c <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d907      	bls.n	800229e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800228e:	4b2c      	ldr	r3, [pc, #176]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e04c      	b.n	8002338 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800229e:	4b28      	ldr	r3, [pc, #160]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1ea      	bne.n	8002280 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022aa:	4b25      	ldr	r3, [pc, #148]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	4924      	ldr	r1, [pc, #144]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 80022b0:	4b25      	ldr	r3, [pc, #148]	@ (8002348 <HAL_RCC_OscConfig+0x9a8>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	60cb      	str	r3, [r1, #12]
 80022b6:	e03e      	b.n	8002336 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e039      	b.n	8002338 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80022c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002340 <HAL_RCC_OscConfig+0x9a0>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f003 0203 	and.w	r2, r3, #3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d12c      	bne.n	8002332 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022e2:	3b01      	subs	r3, #1
 80022e4:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d123      	bne.n	8002332 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f4:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d11b      	bne.n	8002332 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002304:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002306:	429a      	cmp	r2, r3
 8002308:	d113      	bne.n	8002332 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002314:	085b      	lsrs	r3, r3, #1
 8002316:	3b01      	subs	r3, #1
 8002318:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800231a:	429a      	cmp	r2, r3
 800231c:	d109      	bne.n	8002332 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002328:	085b      	lsrs	r3, r3, #1
 800232a:	3b01      	subs	r3, #1
 800232c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800232e:	429a      	cmp	r2, r3
 8002330:	d001      	beq.n	8002336 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3720      	adds	r7, #32
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40021000 	.word	0x40021000
 8002344:	019f800c 	.word	0x019f800c
 8002348:	feeefffc 	.word	0xfeeefffc

0800234c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e11c      	b.n	800259e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002364:	4b90      	ldr	r3, [pc, #576]	@ (80025a8 <HAL_RCC_ClockConfig+0x25c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 030f 	and.w	r3, r3, #15
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d910      	bls.n	8002394 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002372:	4b8d      	ldr	r3, [pc, #564]	@ (80025a8 <HAL_RCC_ClockConfig+0x25c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 020f 	bic.w	r2, r3, #15
 800237a:	498b      	ldr	r1, [pc, #556]	@ (80025a8 <HAL_RCC_ClockConfig+0x25c>)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002382:	4b89      	ldr	r3, [pc, #548]	@ (80025a8 <HAL_RCC_ClockConfig+0x25c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d001      	beq.n	8002394 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e104      	b.n	800259e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d010      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	4b81      	ldr	r3, [pc, #516]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d908      	bls.n	80023c2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b0:	4b7e      	ldr	r3, [pc, #504]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	497b      	ldr	r1, [pc, #492]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 8085 	beq.w	80024da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	d11f      	bne.n	8002418 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023d8:	4b74      	ldr	r3, [pc, #464]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0da      	b.n	800259e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80023e8:	f000 fa26 	bl	8002838 <RCC_GetSysClockFreqFromPLLSource>
 80023ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4a6f      	ldr	r2, [pc, #444]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d947      	bls.n	8002486 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80023f6:	4b6d      	ldr	r3, [pc, #436]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d141      	bne.n	8002486 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002402:	4b6a      	ldr	r3, [pc, #424]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800240a:	4a68      	ldr	r2, [pc, #416]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 800240c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002410:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002412:	2380      	movs	r3, #128	@ 0x80
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	e036      	b.n	8002486 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b02      	cmp	r3, #2
 800241e:	d107      	bne.n	8002430 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002420:	4b62      	ldr	r3, [pc, #392]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d115      	bne.n	8002458 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0b6      	b.n	800259e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d107      	bne.n	8002448 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002438:	4b5c      	ldr	r3, [pc, #368]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d109      	bne.n	8002458 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0aa      	b.n	800259e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002448:	4b58      	ldr	r3, [pc, #352]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0a2      	b.n	800259e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002458:	f000 f8b0 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 800245c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4a53      	ldr	r2, [pc, #332]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d90f      	bls.n	8002486 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002466:	4b51      	ldr	r3, [pc, #324]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002472:	4b4e      	ldr	r3, [pc, #312]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800247a:	4a4c      	ldr	r2, [pc, #304]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 800247c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002480:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002482:	2380      	movs	r3, #128	@ 0x80
 8002484:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002486:	4b49      	ldr	r3, [pc, #292]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f023 0203 	bic.w	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4946      	ldr	r1, [pc, #280]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 8002494:	4313      	orrs	r3, r2
 8002496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002498:	f7fe fe68 	bl	800116c <HAL_GetTick>
 800249c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	e013      	b.n	80024c8 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a0:	f7fe fe64 	bl	800116c <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d90a      	bls.n	80024c8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b2:	4b3e      	ldr	r3, [pc, #248]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 020c 	and.w	r2, r3, #12
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e06a      	b.n	800259e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c8:	4b38      	ldr	r3, [pc, #224]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 020c 	and.w	r2, r3, #12
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d1e2      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2b80      	cmp	r3, #128	@ 0x80
 80024de:	d105      	bne.n	80024ec <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024e0:	4b32      	ldr	r3, [pc, #200]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4a31      	ldr	r2, [pc, #196]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 80024e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024ea:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d010      	beq.n	800251a <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	4b2b      	ldr	r3, [pc, #172]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002504:	429a      	cmp	r2, r3
 8002506:	d208      	bcs.n	800251a <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002508:	4b28      	ldr	r3, [pc, #160]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	4925      	ldr	r1, [pc, #148]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 8002516:	4313      	orrs	r3, r2
 8002518:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800251a:	4b23      	ldr	r3, [pc, #140]	@ (80025a8 <HAL_RCC_ClockConfig+0x25c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d210      	bcs.n	800254a <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002528:	4b1f      	ldr	r3, [pc, #124]	@ (80025a8 <HAL_RCC_ClockConfig+0x25c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f023 020f 	bic.w	r2, r3, #15
 8002530:	491d      	ldr	r1, [pc, #116]	@ (80025a8 <HAL_RCC_ClockConfig+0x25c>)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	4313      	orrs	r3, r2
 8002536:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002538:	4b1b      	ldr	r3, [pc, #108]	@ (80025a8 <HAL_RCC_ClockConfig+0x25c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d001      	beq.n	800254a <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e029      	b.n	800259e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	2b00      	cmp	r3, #0
 8002554:	d008      	beq.n	8002568 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002556:	4b15      	ldr	r3, [pc, #84]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	4912      	ldr	r1, [pc, #72]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 8002564:	4313      	orrs	r3, r2
 8002566:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d009      	beq.n	8002588 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002574:	4b0d      	ldr	r3, [pc, #52]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	490a      	ldr	r1, [pc, #40]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 8002584:	4313      	orrs	r3, r2
 8002586:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002588:	f000 f8b6 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 800258c:	4603      	mov	r3, r0
 800258e:	4a09      	ldr	r2, [pc, #36]	@ (80025b4 <HAL_RCC_ClockConfig+0x268>)
 8002590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002592:	4b09      	ldr	r3, [pc, #36]	@ (80025b8 <HAL_RCC_ClockConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fd98 	bl	80010cc <HAL_InitTick>
 800259c:	4603      	mov	r3, r0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40022000 	.word	0x40022000
 80025ac:	40021000 	.word	0x40021000
 80025b0:	04c4b400 	.word	0x04c4b400
 80025b4:	20000000 	.word	0x20000000
 80025b8:	2000002c 	.word	0x2000002c

080025bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	@ 0x24
 80025c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
 80025c6:	2300      	movs	r3, #0
 80025c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ca:	4b47      	ldr	r3, [pc, #284]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025d4:	4b44      	ldr	r3, [pc, #272]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 0303 	and.w	r3, r3, #3
 80025dc:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x34>
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	2b0c      	cmp	r3, #12
 80025e8:	d121      	bne.n	800262e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d11e      	bne.n	800262e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025f0:	4b3d      	ldr	r3, [pc, #244]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d107      	bne.n	800260c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025fc:	4b3a      	ldr	r3, [pc, #232]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80025fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002602:	0a1b      	lsrs	r3, r3, #8
 8002604:	f003 030f 	and.w	r3, r3, #15
 8002608:	61fb      	str	r3, [r7, #28]
 800260a:	e005      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800260c:	4b36      	ldr	r3, [pc, #216]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8002618:	4a34      	ldr	r2, [pc, #208]	@ (80026ec <HAL_RCC_GetSysClockFreq+0x130>)
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002620:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10d      	bne.n	8002644 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800262c:	e00a      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	2b04      	cmp	r3, #4
 8002632:	d102      	bne.n	800263a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002634:	4b2e      	ldr	r3, [pc, #184]	@ (80026f0 <HAL_RCC_GetSysClockFreq+0x134>)
 8002636:	61bb      	str	r3, [r7, #24]
 8002638:	e004      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	2b08      	cmp	r3, #8
 800263e:	d101      	bne.n	8002644 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002640:	4b2c      	ldr	r3, [pc, #176]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002642:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	2b0c      	cmp	r3, #12
 8002648:	d146      	bne.n	80026d8 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800264a:	4b27      	ldr	r3, [pc, #156]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002654:	4b24      	ldr	r3, [pc, #144]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	091b      	lsrs	r3, r3, #4
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	3301      	adds	r3, #1
 8002660:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d003      	beq.n	8002670 <HAL_RCC_GetSysClockFreq+0xb4>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b03      	cmp	r3, #3
 800266c:	d00d      	beq.n	800268a <HAL_RCC_GetSysClockFreq+0xce>
 800266e:	e019      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002670:	4a1f      	ldr	r2, [pc, #124]	@ (80026f0 <HAL_RCC_GetSysClockFreq+0x134>)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	fbb2 f3f3 	udiv	r3, r2, r3
 8002678:	4a1b      	ldr	r2, [pc, #108]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800267a:	68d2      	ldr	r2, [r2, #12]
 800267c:	0a12      	lsrs	r2, r2, #8
 800267e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002682:	fb02 f303 	mul.w	r3, r2, r3
 8002686:	617b      	str	r3, [r7, #20]
        break;
 8002688:	e019      	b.n	80026be <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800268a:	4a1a      	ldr	r2, [pc, #104]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x138>)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002692:	4a15      	ldr	r2, [pc, #84]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002694:	68d2      	ldr	r2, [r2, #12]
 8002696:	0a12      	lsrs	r2, r2, #8
 8002698:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800269c:	fb02 f303 	mul.w	r3, r2, r3
 80026a0:	617b      	str	r3, [r7, #20]
        break;
 80026a2:	e00c      	b.n	80026be <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026a4:	69fa      	ldr	r2, [r7, #28]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ac:	4a0e      	ldr	r2, [pc, #56]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80026ae:	68d2      	ldr	r2, [r2, #12]
 80026b0:	0a12      	lsrs	r2, r2, #8
 80026b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026b6:	fb02 f303 	mul.w	r3, r2, r3
 80026ba:	617b      	str	r3, [r7, #20]
        break;
 80026bc:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80026be:	4b0a      	ldr	r3, [pc, #40]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	0e5b      	lsrs	r3, r3, #25
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	3301      	adds	r3, #1
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026d8:	69bb      	ldr	r3, [r7, #24]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3724      	adds	r7, #36	@ 0x24
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40021000 	.word	0x40021000
 80026ec:	08003d10 	.word	0x08003d10
 80026f0:	00f42400 	.word	0x00f42400
 80026f4:	007a1200 	.word	0x007a1200

080026f8 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80026fc:	f7ff ff5e 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8002700:	4602      	mov	r2, r0
 8002702:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <HAL_RCC_GetHCLKFreq+0x20>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	091b      	lsrs	r3, r3, #4
 8002708:	f003 030f 	and.w	r3, r3, #15
 800270c:	4903      	ldr	r1, [pc, #12]	@ (800271c <HAL_RCC_GetHCLKFreq+0x24>)
 800270e:	5ccb      	ldrb	r3, [r1, r3]
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002714:	4618      	mov	r0, r3
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000
 800271c:	08003cf8 	.word	0x08003cf8

08002720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002724:	f7ff ffe8 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 8002728:	4602      	mov	r2, r0
 800272a:	4b05      	ldr	r3, [pc, #20]	@ (8002740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	0a1b      	lsrs	r3, r3, #8
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	4903      	ldr	r1, [pc, #12]	@ (8002744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002736:	5ccb      	ldrb	r3, [r1, r3]
 8002738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800273c:	4618      	mov	r0, r3
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000
 8002744:	08003d08 	.word	0x08003d08

08002748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800274c:	f7ff ffd4 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 8002750:	4602      	mov	r2, r0
 8002752:	4b05      	ldr	r3, [pc, #20]	@ (8002768 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	0adb      	lsrs	r3, r3, #11
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	4903      	ldr	r1, [pc, #12]	@ (800276c <HAL_RCC_GetPCLK2Freq+0x24>)
 800275e:	5ccb      	ldrb	r3, [r1, r3]
 8002760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002764:	4618      	mov	r0, r3
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40021000 	.word	0x40021000
 800276c:	08003d08 	.word	0x08003d08

08002770 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800277c:	4b2c      	ldr	r3, [pc, #176]	@ (8002830 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800277e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002780:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002788:	f7ff f85c 	bl	8001844 <HAL_PWREx_GetVoltageRange>
 800278c:	6138      	str	r0, [r7, #16]
 800278e:	e014      	b.n	80027ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002790:	4b27      	ldr	r3, [pc, #156]	@ (8002830 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002794:	4a26      	ldr	r2, [pc, #152]	@ (8002830 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800279a:	6593      	str	r3, [r2, #88]	@ 0x58
 800279c:	4b24      	ldr	r3, [pc, #144]	@ (8002830 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800279e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027a8:	f7ff f84c 	bl	8001844 <HAL_PWREx_GetVoltageRange>
 80027ac:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027ae:	4b20      	ldr	r3, [pc, #128]	@ (8002830 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80027b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002830 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80027b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <RCC_SetFlashLatencyFromMSIRange+0x58>
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027c6:	d10b      	bne.n	80027e0 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b80      	cmp	r3, #128	@ 0x80
 80027cc:	d919      	bls.n	8002802 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2ba0      	cmp	r3, #160	@ 0xa0
 80027d2:	d902      	bls.n	80027da <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027d4:	2302      	movs	r3, #2
 80027d6:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80027d8:	e013      	b.n	8002802 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027da:	2301      	movs	r3, #1
 80027dc:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80027de:	e010      	b.n	8002802 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b80      	cmp	r3, #128	@ 0x80
 80027e4:	d902      	bls.n	80027ec <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027e6:	2303      	movs	r3, #3
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	e00a      	b.n	8002802 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b80      	cmp	r3, #128	@ 0x80
 80027f0:	d102      	bne.n	80027f8 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027f2:	2302      	movs	r3, #2
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	e004      	b.n	8002802 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b70      	cmp	r3, #112	@ 0x70
 80027fc:	d101      	bne.n	8002802 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027fe:	2301      	movs	r3, #1
 8002800:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002802:	4b0c      	ldr	r3, [pc, #48]	@ (8002834 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 020f 	bic.w	r2, r3, #15
 800280a:	490a      	ldr	r1, [pc, #40]	@ (8002834 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	4313      	orrs	r3, r2
 8002810:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002812:	4b08      	ldr	r3, [pc, #32]	@ (8002834 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e000      	b.n	8002826 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40021000 	.word	0x40021000
 8002834:	40022000 	.word	0x40022000

08002838 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800283e:	4b31      	ldr	r3, [pc, #196]	@ (8002904 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002848:	4b2e      	ldr	r3, [pc, #184]	@ (8002904 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	3301      	adds	r3, #1
 8002854:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2b03      	cmp	r3, #3
 800285a:	d015      	beq.n	8002888 <RCC_GetSysClockFreqFromPLLSource+0x50>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2b03      	cmp	r3, #3
 8002860:	d839      	bhi.n	80028d6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d01c      	beq.n	80028a2 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d133      	bne.n	80028d6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800286e:	4a26      	ldr	r2, [pc, #152]	@ (8002908 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	fbb2 f3f3 	udiv	r3, r2, r3
 8002876:	4a23      	ldr	r2, [pc, #140]	@ (8002904 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002878:	68d2      	ldr	r2, [r2, #12]
 800287a:	0a12      	lsrs	r2, r2, #8
 800287c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002880:	fb02 f303 	mul.w	r3, r2, r3
 8002884:	613b      	str	r3, [r7, #16]
      break;
 8002886:	e029      	b.n	80028dc <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002888:	4a20      	ldr	r2, [pc, #128]	@ (800290c <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002890:	4a1c      	ldr	r2, [pc, #112]	@ (8002904 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002892:	68d2      	ldr	r2, [r2, #12]
 8002894:	0a12      	lsrs	r2, r2, #8
 8002896:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800289a:	fb02 f303 	mul.w	r3, r2, r3
 800289e:	613b      	str	r3, [r7, #16]
      break;
 80028a0:	e01c      	b.n	80028dc <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028a2:	4b18      	ldr	r3, [pc, #96]	@ (8002904 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d107      	bne.n	80028be <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028ae:	4b15      	ldr	r3, [pc, #84]	@ (8002904 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80028b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028b4:	0a1b      	lsrs	r3, r3, #8
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	e005      	b.n	80028ca <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028be:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	091b      	lsrs	r3, r3, #4
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 80028ca:	4a11      	ldr	r2, [pc, #68]	@ (8002910 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d2:	613b      	str	r3, [r7, #16]
        break;
 80028d4:	e002      	b.n	80028dc <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
      break;
 80028da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80028dc:	4b09      	ldr	r3, [pc, #36]	@ (8002904 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	0e5b      	lsrs	r3, r3, #25
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	3301      	adds	r3, #1
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80028f6:	683b      	ldr	r3, [r7, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	371c      	adds	r7, #28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	40021000 	.word	0x40021000
 8002908:	00f42400 	.word	0x00f42400
 800290c:	007a1200 	.word	0x007a1200
 8002910:	08003d10 	.word	0x08003d10

08002914 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e095      	b.n	8002a52 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292a:	2b00      	cmp	r3, #0
 800292c:	d108      	bne.n	8002940 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002936:	d009      	beq.n	800294c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
 800293e:	e005      	b.n	800294c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d106      	bne.n	800296c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7fd ff8a 	bl	8000880 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002982:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800298c:	d902      	bls.n	8002994 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	e002      	b.n	800299a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002994:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002998:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80029a2:	d007      	beq.n	80029b4 <HAL_SPI_Init+0xa0>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80029ac:	d002      	beq.n	80029b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f6:	ea42 0103 	orr.w	r1, r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	0c1b      	lsrs	r3, r3, #16
 8002a10:	f003 0204 	and.w	r2, r3, #4
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a18:	f003 0310 	and.w	r3, r3, #16
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002a30:	ea42 0103 	orr.w	r1, r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b08a      	sub	sp, #40	@ 0x28
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_SPI_TransmitReceive+0x26>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e20a      	b.n	8002e96 <HAL_SPI_TransmitReceive+0x43c>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a88:	f7fe fb70 	bl	800116c <HAL_GetTick>
 8002a8c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a94:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002a9c:	887b      	ldrh	r3, [r7, #2]
 8002a9e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002aa0:	887b      	ldrh	r3, [r7, #2]
 8002aa2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002aa4:	7efb      	ldrb	r3, [r7, #27]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d00e      	beq.n	8002ac8 <HAL_SPI_TransmitReceive+0x6e>
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ab0:	d106      	bne.n	8002ac0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d102      	bne.n	8002ac0 <HAL_SPI_TransmitReceive+0x66>
 8002aba:	7efb      	ldrb	r3, [r7, #27]
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d003      	beq.n	8002ac8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002ac6:	e1e0      	b.n	8002e8a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <HAL_SPI_TransmitReceive+0x80>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <HAL_SPI_TransmitReceive+0x80>
 8002ad4:	887b      	ldrh	r3, [r7, #2]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d103      	bne.n	8002ae2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002ae0:	e1d3      	b.n	8002e8a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d003      	beq.n	8002af6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2205      	movs	r2, #5
 8002af2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	887a      	ldrh	r2, [r7, #2]
 8002b06:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	887a      	ldrh	r2, [r7, #2]
 8002b0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	887a      	ldrh	r2, [r7, #2]
 8002b1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	887a      	ldrh	r2, [r7, #2]
 8002b22:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b38:	d802      	bhi.n	8002b40 <HAL_SPI_TransmitReceive+0xe6>
 8002b3a:	8a3b      	ldrh	r3, [r7, #16]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d908      	bls.n	8002b52 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b4e:	605a      	str	r2, [r3, #4]
 8002b50:	e007      	b.n	8002b62 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b60:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b6c:	2b40      	cmp	r3, #64	@ 0x40
 8002b6e:	d007      	beq.n	8002b80 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b88:	f240 8081 	bls.w	8002c8e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d002      	beq.n	8002b9a <HAL_SPI_TransmitReceive+0x140>
 8002b94:	8a7b      	ldrh	r3, [r7, #18]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d16d      	bne.n	8002c76 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9e:	881a      	ldrh	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002baa:	1c9a      	adds	r2, r3, #2
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bbe:	e05a      	b.n	8002c76 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d11b      	bne.n	8002c06 <HAL_SPI_TransmitReceive+0x1ac>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d016      	beq.n	8002c06 <HAL_SPI_TransmitReceive+0x1ac>
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d113      	bne.n	8002c06 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be2:	881a      	ldrh	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bee:	1c9a      	adds	r2, r3, #2
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d11c      	bne.n	8002c4e <HAL_SPI_TransmitReceive+0x1f4>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d016      	beq.n	8002c4e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	b292      	uxth	r2, r2
 8002c2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	1c9a      	adds	r2, r3, #2
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c4e:	f7fe fa8d 	bl	800116c <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d80b      	bhi.n	8002c76 <HAL_SPI_TransmitReceive+0x21c>
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c64:	d007      	beq.n	8002c76 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8002c74:	e109      	b.n	8002e8a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d19f      	bne.n	8002bc0 <HAL_SPI_TransmitReceive+0x166>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d199      	bne.n	8002bc0 <HAL_SPI_TransmitReceive+0x166>
 8002c8c:	e0e3      	b.n	8002e56 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_SPI_TransmitReceive+0x244>
 8002c96:	8a7b      	ldrh	r3, [r7, #18]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	f040 80cf 	bne.w	8002e3c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d912      	bls.n	8002cce <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cac:	881a      	ldrh	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb8:	1c9a      	adds	r2, r3, #2
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b02      	subs	r3, #2
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ccc:	e0b6      	b.n	8002e3c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	330c      	adds	r3, #12
 8002cd8:	7812      	ldrb	r2, [r2, #0]
 8002cda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cf4:	e0a2      	b.n	8002e3c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d134      	bne.n	8002d6e <HAL_SPI_TransmitReceive+0x314>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d02f      	beq.n	8002d6e <HAL_SPI_TransmitReceive+0x314>
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d12c      	bne.n	8002d6e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d912      	bls.n	8002d44 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d22:	881a      	ldrh	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d2e:	1c9a      	adds	r2, r3, #2
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b02      	subs	r3, #2
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d42:	e012      	b.n	8002d6a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	330c      	adds	r3, #12
 8002d4e:	7812      	ldrb	r2, [r2, #0]
 8002d50:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d148      	bne.n	8002e0e <HAL_SPI_TransmitReceive+0x3b4>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d042      	beq.n	8002e0e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d923      	bls.n	8002ddc <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9e:	b292      	uxth	r2, r2
 8002da0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da6:	1c9a      	adds	r2, r3, #2
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b02      	subs	r3, #2
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d81f      	bhi.n	8002e0a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	e016      	b.n	8002e0a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f103 020c 	add.w	r2, r3, #12
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de8:	7812      	ldrb	r2, [r2, #0]
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e0e:	f7fe f9ad 	bl	800116c <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d803      	bhi.n	8002e26 <HAL_SPI_TransmitReceive+0x3cc>
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e24:	d102      	bne.n	8002e2c <HAL_SPI_TransmitReceive+0x3d2>
 8002e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d107      	bne.n	8002e3c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8002e3a:	e026      	b.n	8002e8a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f47f af57 	bne.w	8002cf6 <HAL_SPI_TransmitReceive+0x29c>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f47f af50 	bne.w	8002cf6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e56:	69fa      	ldr	r2, [r7, #28]
 8002e58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f93e 	bl	80030dc <SPI_EndRxTxTransaction>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d005      	beq.n	8002e72 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e80:	e003      	b.n	8002e8a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002e92:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3728      	adds	r7, #40	@ 0x28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b088      	sub	sp, #32
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	4613      	mov	r3, r2
 8002eae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002eb0:	f7fe f95c 	bl	800116c <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ec0:	f7fe f954 	bl	800116c <HAL_GetTick>
 8002ec4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ec6:	4b39      	ldr	r3, [pc, #228]	@ (8002fac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	015b      	lsls	r3, r3, #5
 8002ecc:	0d1b      	lsrs	r3, r3, #20
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	fb02 f303 	mul.w	r3, r2, r3
 8002ed4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ed6:	e054      	b.n	8002f82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ede:	d050      	beq.n	8002f82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ee0:	f7fe f944 	bl	800116c <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	69fa      	ldr	r2, [r7, #28]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d902      	bls.n	8002ef6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d13d      	bne.n	8002f72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002f04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f0e:	d111      	bne.n	8002f34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f18:	d004      	beq.n	8002f24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f22:	d107      	bne.n	8002f34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f3c:	d10f      	bne.n	8002f5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e017      	b.n	8002fa2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	bf0c      	ite	eq
 8002f92:	2301      	moveq	r3, #1
 8002f94:	2300      	movne	r3, #0
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	461a      	mov	r2, r3
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d19b      	bne.n	8002ed8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3720      	adds	r7, #32
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000000 	.word	0x20000000

08002fb0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08a      	sub	sp, #40	@ 0x28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002fc2:	f7fe f8d3 	bl	800116c <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	4413      	add	r3, r2
 8002fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002fd2:	f7fe f8cb 	bl	800116c <HAL_GetTick>
 8002fd6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	330c      	adds	r3, #12
 8002fde:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002fe0:	4b3d      	ldr	r3, [pc, #244]	@ (80030d8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	00da      	lsls	r2, r3, #3
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	0d1b      	lsrs	r3, r3, #20
 8002ff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff2:	fb02 f303 	mul.w	r3, r2, r3
 8002ff6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002ff8:	e060      	b.n	80030bc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003000:	d107      	bne.n	8003012 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d104      	bne.n	8003012 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003010:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003018:	d050      	beq.n	80030bc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800301a:	f7fe f8a7 	bl	800116c <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003026:	429a      	cmp	r2, r3
 8003028:	d902      	bls.n	8003030 <SPI_WaitFifoStateUntilTimeout+0x80>
 800302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302c:	2b00      	cmp	r3, #0
 800302e:	d13d      	bne.n	80030ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800303e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003048:	d111      	bne.n	800306e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003052:	d004      	beq.n	800305e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800305c:	d107      	bne.n	800306e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800306c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003072:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003076:	d10f      	bne.n	8003098 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003096:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e010      	b.n	80030ce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	3b01      	subs	r3, #1
 80030ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	4013      	ands	r3, r2
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d196      	bne.n	8002ffa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3728      	adds	r7, #40	@ 0x28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20000000 	.word	0x20000000

080030dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af02      	add	r7, sp, #8
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f7ff ff5b 	bl	8002fb0 <SPI_WaitFifoStateUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d007      	beq.n	8003110 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003104:	f043 0220 	orr.w	r2, r3, #32
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e027      	b.n	8003160 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2200      	movs	r2, #0
 8003118:	2180      	movs	r1, #128	@ 0x80
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f7ff fec0 	bl	8002ea0 <SPI_WaitFlagStateUntilTimeout>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d007      	beq.n	8003136 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800312a:	f043 0220 	orr.w	r2, r3, #32
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e014      	b.n	8003160 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2200      	movs	r2, #0
 800313e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f7ff ff34 	bl	8002fb0 <SPI_WaitFifoStateUntilTimeout>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d007      	beq.n	800315e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003152:	f043 0220 	orr.w	r2, r3, #32
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e000      	b.n	8003160 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e042      	b.n	8003200 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003180:	2b00      	cmp	r3, #0
 8003182:	d106      	bne.n	8003192 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f83b 	bl	8003208 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2224      	movs	r2, #36	@ 0x24
 8003196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0201 	bic.w	r2, r2, #1
 80031a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fb32 	bl	800381c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f82f 	bl	800321c <UART_SetConfig>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e01b      	b.n	8003200 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 fbb1 	bl	8003960 <UART_CheckIdleState>
 80031fe:	4603      	mov	r3, r0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800321c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003220:	b08c      	sub	sp, #48	@ 0x30
 8003222:	af00      	add	r7, sp, #0
 8003224:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	431a      	orrs	r2, r3
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	431a      	orrs	r2, r3
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	4313      	orrs	r3, r2
 8003242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	4baa      	ldr	r3, [pc, #680]	@ (80034f4 <UART_SetConfig+0x2d8>)
 800324c:	4013      	ands	r3, r2
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003254:	430b      	orrs	r3, r1
 8003256:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a9f      	ldr	r2, [pc, #636]	@ (80034f8 <UART_SetConfig+0x2dc>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d004      	beq.n	8003288 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003284:	4313      	orrs	r3, r2
 8003286:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003292:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	6812      	ldr	r2, [r2, #0]
 800329a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800329c:	430b      	orrs	r3, r1
 800329e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a6:	f023 010f 	bic.w	r1, r3, #15
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a90      	ldr	r2, [pc, #576]	@ (80034fc <UART_SetConfig+0x2e0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d125      	bne.n	800330c <UART_SetConfig+0xf0>
 80032c0:	4b8f      	ldr	r3, [pc, #572]	@ (8003500 <UART_SetConfig+0x2e4>)
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	d81a      	bhi.n	8003304 <UART_SetConfig+0xe8>
 80032ce:	a201      	add	r2, pc, #4	@ (adr r2, 80032d4 <UART_SetConfig+0xb8>)
 80032d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d4:	080032e5 	.word	0x080032e5
 80032d8:	080032f5 	.word	0x080032f5
 80032dc:	080032ed 	.word	0x080032ed
 80032e0:	080032fd 	.word	0x080032fd
 80032e4:	2301      	movs	r3, #1
 80032e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032ea:	e116      	b.n	800351a <UART_SetConfig+0x2fe>
 80032ec:	2302      	movs	r3, #2
 80032ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032f2:	e112      	b.n	800351a <UART_SetConfig+0x2fe>
 80032f4:	2304      	movs	r3, #4
 80032f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032fa:	e10e      	b.n	800351a <UART_SetConfig+0x2fe>
 80032fc:	2308      	movs	r3, #8
 80032fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003302:	e10a      	b.n	800351a <UART_SetConfig+0x2fe>
 8003304:	2310      	movs	r3, #16
 8003306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800330a:	e106      	b.n	800351a <UART_SetConfig+0x2fe>
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a7c      	ldr	r2, [pc, #496]	@ (8003504 <UART_SetConfig+0x2e8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d138      	bne.n	8003388 <UART_SetConfig+0x16c>
 8003316:	4b7a      	ldr	r3, [pc, #488]	@ (8003500 <UART_SetConfig+0x2e4>)
 8003318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800331c:	f003 030c 	and.w	r3, r3, #12
 8003320:	2b0c      	cmp	r3, #12
 8003322:	d82d      	bhi.n	8003380 <UART_SetConfig+0x164>
 8003324:	a201      	add	r2, pc, #4	@ (adr r2, 800332c <UART_SetConfig+0x110>)
 8003326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332a:	bf00      	nop
 800332c:	08003361 	.word	0x08003361
 8003330:	08003381 	.word	0x08003381
 8003334:	08003381 	.word	0x08003381
 8003338:	08003381 	.word	0x08003381
 800333c:	08003371 	.word	0x08003371
 8003340:	08003381 	.word	0x08003381
 8003344:	08003381 	.word	0x08003381
 8003348:	08003381 	.word	0x08003381
 800334c:	08003369 	.word	0x08003369
 8003350:	08003381 	.word	0x08003381
 8003354:	08003381 	.word	0x08003381
 8003358:	08003381 	.word	0x08003381
 800335c:	08003379 	.word	0x08003379
 8003360:	2300      	movs	r3, #0
 8003362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003366:	e0d8      	b.n	800351a <UART_SetConfig+0x2fe>
 8003368:	2302      	movs	r3, #2
 800336a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800336e:	e0d4      	b.n	800351a <UART_SetConfig+0x2fe>
 8003370:	2304      	movs	r3, #4
 8003372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003376:	e0d0      	b.n	800351a <UART_SetConfig+0x2fe>
 8003378:	2308      	movs	r3, #8
 800337a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800337e:	e0cc      	b.n	800351a <UART_SetConfig+0x2fe>
 8003380:	2310      	movs	r3, #16
 8003382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003386:	e0c8      	b.n	800351a <UART_SetConfig+0x2fe>
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a5e      	ldr	r2, [pc, #376]	@ (8003508 <UART_SetConfig+0x2ec>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d125      	bne.n	80033de <UART_SetConfig+0x1c2>
 8003392:	4b5b      	ldr	r3, [pc, #364]	@ (8003500 <UART_SetConfig+0x2e4>)
 8003394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003398:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800339c:	2b30      	cmp	r3, #48	@ 0x30
 800339e:	d016      	beq.n	80033ce <UART_SetConfig+0x1b2>
 80033a0:	2b30      	cmp	r3, #48	@ 0x30
 80033a2:	d818      	bhi.n	80033d6 <UART_SetConfig+0x1ba>
 80033a4:	2b20      	cmp	r3, #32
 80033a6:	d00a      	beq.n	80033be <UART_SetConfig+0x1a2>
 80033a8:	2b20      	cmp	r3, #32
 80033aa:	d814      	bhi.n	80033d6 <UART_SetConfig+0x1ba>
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d002      	beq.n	80033b6 <UART_SetConfig+0x19a>
 80033b0:	2b10      	cmp	r3, #16
 80033b2:	d008      	beq.n	80033c6 <UART_SetConfig+0x1aa>
 80033b4:	e00f      	b.n	80033d6 <UART_SetConfig+0x1ba>
 80033b6:	2300      	movs	r3, #0
 80033b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033bc:	e0ad      	b.n	800351a <UART_SetConfig+0x2fe>
 80033be:	2302      	movs	r3, #2
 80033c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033c4:	e0a9      	b.n	800351a <UART_SetConfig+0x2fe>
 80033c6:	2304      	movs	r3, #4
 80033c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033cc:	e0a5      	b.n	800351a <UART_SetConfig+0x2fe>
 80033ce:	2308      	movs	r3, #8
 80033d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033d4:	e0a1      	b.n	800351a <UART_SetConfig+0x2fe>
 80033d6:	2310      	movs	r3, #16
 80033d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033dc:	e09d      	b.n	800351a <UART_SetConfig+0x2fe>
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a4a      	ldr	r2, [pc, #296]	@ (800350c <UART_SetConfig+0x2f0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d125      	bne.n	8003434 <UART_SetConfig+0x218>
 80033e8:	4b45      	ldr	r3, [pc, #276]	@ (8003500 <UART_SetConfig+0x2e4>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80033f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80033f4:	d016      	beq.n	8003424 <UART_SetConfig+0x208>
 80033f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80033f8:	d818      	bhi.n	800342c <UART_SetConfig+0x210>
 80033fa:	2b80      	cmp	r3, #128	@ 0x80
 80033fc:	d00a      	beq.n	8003414 <UART_SetConfig+0x1f8>
 80033fe:	2b80      	cmp	r3, #128	@ 0x80
 8003400:	d814      	bhi.n	800342c <UART_SetConfig+0x210>
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <UART_SetConfig+0x1f0>
 8003406:	2b40      	cmp	r3, #64	@ 0x40
 8003408:	d008      	beq.n	800341c <UART_SetConfig+0x200>
 800340a:	e00f      	b.n	800342c <UART_SetConfig+0x210>
 800340c:	2300      	movs	r3, #0
 800340e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003412:	e082      	b.n	800351a <UART_SetConfig+0x2fe>
 8003414:	2302      	movs	r3, #2
 8003416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800341a:	e07e      	b.n	800351a <UART_SetConfig+0x2fe>
 800341c:	2304      	movs	r3, #4
 800341e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003422:	e07a      	b.n	800351a <UART_SetConfig+0x2fe>
 8003424:	2308      	movs	r3, #8
 8003426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800342a:	e076      	b.n	800351a <UART_SetConfig+0x2fe>
 800342c:	2310      	movs	r3, #16
 800342e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003432:	e072      	b.n	800351a <UART_SetConfig+0x2fe>
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a35      	ldr	r2, [pc, #212]	@ (8003510 <UART_SetConfig+0x2f4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d12a      	bne.n	8003494 <UART_SetConfig+0x278>
 800343e:	4b30      	ldr	r3, [pc, #192]	@ (8003500 <UART_SetConfig+0x2e4>)
 8003440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003444:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003448:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800344c:	d01a      	beq.n	8003484 <UART_SetConfig+0x268>
 800344e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003452:	d81b      	bhi.n	800348c <UART_SetConfig+0x270>
 8003454:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003458:	d00c      	beq.n	8003474 <UART_SetConfig+0x258>
 800345a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800345e:	d815      	bhi.n	800348c <UART_SetConfig+0x270>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <UART_SetConfig+0x250>
 8003464:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003468:	d008      	beq.n	800347c <UART_SetConfig+0x260>
 800346a:	e00f      	b.n	800348c <UART_SetConfig+0x270>
 800346c:	2300      	movs	r3, #0
 800346e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003472:	e052      	b.n	800351a <UART_SetConfig+0x2fe>
 8003474:	2302      	movs	r3, #2
 8003476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800347a:	e04e      	b.n	800351a <UART_SetConfig+0x2fe>
 800347c:	2304      	movs	r3, #4
 800347e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003482:	e04a      	b.n	800351a <UART_SetConfig+0x2fe>
 8003484:	2308      	movs	r3, #8
 8003486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800348a:	e046      	b.n	800351a <UART_SetConfig+0x2fe>
 800348c:	2310      	movs	r3, #16
 800348e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003492:	e042      	b.n	800351a <UART_SetConfig+0x2fe>
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a17      	ldr	r2, [pc, #92]	@ (80034f8 <UART_SetConfig+0x2dc>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d13a      	bne.n	8003514 <UART_SetConfig+0x2f8>
 800349e:	4b18      	ldr	r3, [pc, #96]	@ (8003500 <UART_SetConfig+0x2e4>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80034a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034ac:	d01a      	beq.n	80034e4 <UART_SetConfig+0x2c8>
 80034ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034b2:	d81b      	bhi.n	80034ec <UART_SetConfig+0x2d0>
 80034b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034b8:	d00c      	beq.n	80034d4 <UART_SetConfig+0x2b8>
 80034ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034be:	d815      	bhi.n	80034ec <UART_SetConfig+0x2d0>
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d003      	beq.n	80034cc <UART_SetConfig+0x2b0>
 80034c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034c8:	d008      	beq.n	80034dc <UART_SetConfig+0x2c0>
 80034ca:	e00f      	b.n	80034ec <UART_SetConfig+0x2d0>
 80034cc:	2300      	movs	r3, #0
 80034ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034d2:	e022      	b.n	800351a <UART_SetConfig+0x2fe>
 80034d4:	2302      	movs	r3, #2
 80034d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034da:	e01e      	b.n	800351a <UART_SetConfig+0x2fe>
 80034dc:	2304      	movs	r3, #4
 80034de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034e2:	e01a      	b.n	800351a <UART_SetConfig+0x2fe>
 80034e4:	2308      	movs	r3, #8
 80034e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034ea:	e016      	b.n	800351a <UART_SetConfig+0x2fe>
 80034ec:	2310      	movs	r3, #16
 80034ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034f2:	e012      	b.n	800351a <UART_SetConfig+0x2fe>
 80034f4:	cfff69f3 	.word	0xcfff69f3
 80034f8:	40008000 	.word	0x40008000
 80034fc:	40013800 	.word	0x40013800
 8003500:	40021000 	.word	0x40021000
 8003504:	40004400 	.word	0x40004400
 8003508:	40004800 	.word	0x40004800
 800350c:	40004c00 	.word	0x40004c00
 8003510:	40005000 	.word	0x40005000
 8003514:	2310      	movs	r3, #16
 8003516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4ab0      	ldr	r2, [pc, #704]	@ (80037e0 <UART_SetConfig+0x5c4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	f040 809b 	bne.w	800365c <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003526:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800352a:	2b08      	cmp	r3, #8
 800352c:	d827      	bhi.n	800357e <UART_SetConfig+0x362>
 800352e:	a201      	add	r2, pc, #4	@ (adr r2, 8003534 <UART_SetConfig+0x318>)
 8003530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003534:	08003559 	.word	0x08003559
 8003538:	08003561 	.word	0x08003561
 800353c:	08003569 	.word	0x08003569
 8003540:	0800357f 	.word	0x0800357f
 8003544:	0800356f 	.word	0x0800356f
 8003548:	0800357f 	.word	0x0800357f
 800354c:	0800357f 	.word	0x0800357f
 8003550:	0800357f 	.word	0x0800357f
 8003554:	08003577 	.word	0x08003577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003558:	f7ff f8e2 	bl	8002720 <HAL_RCC_GetPCLK1Freq>
 800355c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800355e:	e014      	b.n	800358a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003560:	f7ff f8f2 	bl	8002748 <HAL_RCC_GetPCLK2Freq>
 8003564:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003566:	e010      	b.n	800358a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003568:	4b9e      	ldr	r3, [pc, #632]	@ (80037e4 <UART_SetConfig+0x5c8>)
 800356a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800356c:	e00d      	b.n	800358a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800356e:	f7ff f825 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8003572:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003574:	e009      	b.n	800358a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003576:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800357a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800357c:	e005      	b.n	800358a <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003588:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800358a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 8130 	beq.w	80037f2 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003596:	4a94      	ldr	r2, [pc, #592]	@ (80037e8 <UART_SetConfig+0x5cc>)
 8003598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800359c:	461a      	mov	r2, r3
 800359e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	4413      	add	r3, r2
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d305      	bcc.n	80035c2 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d903      	bls.n	80035ca <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80035c8:	e113      	b.n	80037f2 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035cc:	2200      	movs	r2, #0
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	60fa      	str	r2, [r7, #12]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d6:	4a84      	ldr	r2, [pc, #528]	@ (80037e8 <UART_SetConfig+0x5cc>)
 80035d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2200      	movs	r2, #0
 80035e0:	603b      	str	r3, [r7, #0]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035ec:	f7fc fe22 	bl	8000234 <__aeabi_uldivmod>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4610      	mov	r0, r2
 80035f6:	4619      	mov	r1, r3
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	020b      	lsls	r3, r1, #8
 8003602:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003606:	0202      	lsls	r2, r0, #8
 8003608:	6979      	ldr	r1, [r7, #20]
 800360a:	6849      	ldr	r1, [r1, #4]
 800360c:	0849      	lsrs	r1, r1, #1
 800360e:	2000      	movs	r0, #0
 8003610:	460c      	mov	r4, r1
 8003612:	4605      	mov	r5, r0
 8003614:	eb12 0804 	adds.w	r8, r2, r4
 8003618:	eb43 0905 	adc.w	r9, r3, r5
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	469a      	mov	sl, r3
 8003624:	4693      	mov	fp, r2
 8003626:	4652      	mov	r2, sl
 8003628:	465b      	mov	r3, fp
 800362a:	4640      	mov	r0, r8
 800362c:	4649      	mov	r1, r9
 800362e:	f7fc fe01 	bl	8000234 <__aeabi_uldivmod>
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	4613      	mov	r3, r2
 8003638:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003640:	d308      	bcc.n	8003654 <UART_SetConfig+0x438>
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003648:	d204      	bcs.n	8003654 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6a3a      	ldr	r2, [r7, #32]
 8003650:	60da      	str	r2, [r3, #12]
 8003652:	e0ce      	b.n	80037f2 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800365a:	e0ca      	b.n	80037f2 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003664:	d166      	bne.n	8003734 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8003666:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800366a:	2b08      	cmp	r3, #8
 800366c:	d827      	bhi.n	80036be <UART_SetConfig+0x4a2>
 800366e:	a201      	add	r2, pc, #4	@ (adr r2, 8003674 <UART_SetConfig+0x458>)
 8003670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003674:	08003699 	.word	0x08003699
 8003678:	080036a1 	.word	0x080036a1
 800367c:	080036a9 	.word	0x080036a9
 8003680:	080036bf 	.word	0x080036bf
 8003684:	080036af 	.word	0x080036af
 8003688:	080036bf 	.word	0x080036bf
 800368c:	080036bf 	.word	0x080036bf
 8003690:	080036bf 	.word	0x080036bf
 8003694:	080036b7 	.word	0x080036b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003698:	f7ff f842 	bl	8002720 <HAL_RCC_GetPCLK1Freq>
 800369c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800369e:	e014      	b.n	80036ca <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036a0:	f7ff f852 	bl	8002748 <HAL_RCC_GetPCLK2Freq>
 80036a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80036a6:	e010      	b.n	80036ca <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036a8:	4b4e      	ldr	r3, [pc, #312]	@ (80037e4 <UART_SetConfig+0x5c8>)
 80036aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80036ac:	e00d      	b.n	80036ca <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ae:	f7fe ff85 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 80036b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80036b4:	e009      	b.n	80036ca <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80036bc:	e005      	b.n	80036ca <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80036c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 8090 	beq.w	80037f2 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d6:	4a44      	ldr	r2, [pc, #272]	@ (80037e8 <UART_SetConfig+0x5cc>)
 80036d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036dc:	461a      	mov	r2, r3
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80036e4:	005a      	lsls	r2, r3, #1
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	085b      	lsrs	r3, r3, #1
 80036ec:	441a      	add	r2, r3
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	2b0f      	cmp	r3, #15
 80036fc:	d916      	bls.n	800372c <UART_SetConfig+0x510>
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003704:	d212      	bcs.n	800372c <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	b29b      	uxth	r3, r3
 800370a:	f023 030f 	bic.w	r3, r3, #15
 800370e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	085b      	lsrs	r3, r3, #1
 8003714:	b29b      	uxth	r3, r3
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	b29a      	uxth	r2, r3
 800371c:	8bfb      	ldrh	r3, [r7, #30]
 800371e:	4313      	orrs	r3, r2
 8003720:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	8bfa      	ldrh	r2, [r7, #30]
 8003728:	60da      	str	r2, [r3, #12]
 800372a:	e062      	b.n	80037f2 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003732:	e05e      	b.n	80037f2 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003734:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003738:	2b08      	cmp	r3, #8
 800373a:	d828      	bhi.n	800378e <UART_SetConfig+0x572>
 800373c:	a201      	add	r2, pc, #4	@ (adr r2, 8003744 <UART_SetConfig+0x528>)
 800373e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003742:	bf00      	nop
 8003744:	08003769 	.word	0x08003769
 8003748:	08003771 	.word	0x08003771
 800374c:	08003779 	.word	0x08003779
 8003750:	0800378f 	.word	0x0800378f
 8003754:	0800377f 	.word	0x0800377f
 8003758:	0800378f 	.word	0x0800378f
 800375c:	0800378f 	.word	0x0800378f
 8003760:	0800378f 	.word	0x0800378f
 8003764:	08003787 	.word	0x08003787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003768:	f7fe ffda 	bl	8002720 <HAL_RCC_GetPCLK1Freq>
 800376c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800376e:	e014      	b.n	800379a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003770:	f7fe ffea 	bl	8002748 <HAL_RCC_GetPCLK2Freq>
 8003774:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003776:	e010      	b.n	800379a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003778:	4b1a      	ldr	r3, [pc, #104]	@ (80037e4 <UART_SetConfig+0x5c8>)
 800377a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800377c:	e00d      	b.n	800379a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800377e:	f7fe ff1d 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8003782:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003784:	e009      	b.n	800379a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800378a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800378c:	e005      	b.n	800379a <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003798:	bf00      	nop
    }

    if (pclk != 0U)
 800379a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379c:	2b00      	cmp	r3, #0
 800379e:	d028      	beq.n	80037f2 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a4:	4a10      	ldr	r2, [pc, #64]	@ (80037e8 <UART_SetConfig+0x5cc>)
 80037a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037aa:	461a      	mov	r2, r3
 80037ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	085b      	lsrs	r3, r3, #1
 80037b8:	441a      	add	r2, r3
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	2b0f      	cmp	r3, #15
 80037c8:	d910      	bls.n	80037ec <UART_SetConfig+0x5d0>
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037d0:	d20c      	bcs.n	80037ec <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60da      	str	r2, [r3, #12]
 80037dc:	e009      	b.n	80037f2 <UART_SetConfig+0x5d6>
 80037de:	bf00      	nop
 80037e0:	40008000 	.word	0x40008000
 80037e4:	00f42400 	.word	0x00f42400
 80037e8:	08003d50 	.word	0x08003d50
      }
      else
      {
        ret = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2200      	movs	r2, #0
 8003806:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2200      	movs	r2, #0
 800380c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800380e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003812:	4618      	mov	r0, r3
 8003814:	3730      	adds	r7, #48	@ 0x30
 8003816:	46bd      	mov	sp, r7
 8003818:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800381c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d01a      	beq.n	8003932 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003916:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800391a:	d10a      	bne.n	8003932 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	605a      	str	r2, [r3, #4]
  }
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b098      	sub	sp, #96	@ 0x60
 8003964:	af02      	add	r7, sp, #8
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003970:	f7fd fbfc 	bl	800116c <HAL_GetTick>
 8003974:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b08      	cmp	r3, #8
 8003982:	d12f      	bne.n	80039e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003984:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800398c:	2200      	movs	r2, #0
 800398e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f88e 	bl	8003ab4 <UART_WaitOnFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d022      	beq.n	80039e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a6:	e853 3f00 	ldrex	r3, [r3]
 80039aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	461a      	mov	r2, r3
 80039ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80039be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039c4:	e841 2300 	strex	r3, r2, [r1]
 80039c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1e6      	bne.n	800399e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e063      	b.n	8003aac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d149      	bne.n	8003a86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039fa:	2200      	movs	r2, #0
 80039fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f857 	bl	8003ab4 <UART_WaitOnFlagUntilTimeout>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d03c      	beq.n	8003a86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a14:	e853 3f00 	ldrex	r3, [r3]
 8003a18:	623b      	str	r3, [r7, #32]
   return(result);
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a32:	e841 2300 	strex	r3, r2, [r1]
 8003a36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1e6      	bne.n	8003a0c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3308      	adds	r3, #8
 8003a44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	e853 3f00 	ldrex	r3, [r3]
 8003a4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f023 0301 	bic.w	r3, r3, #1
 8003a54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3308      	adds	r3, #8
 8003a5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a5e:	61fa      	str	r2, [r7, #28]
 8003a60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a62:	69b9      	ldr	r1, [r7, #24]
 8003a64:	69fa      	ldr	r2, [r7, #28]
 8003a66:	e841 2300 	strex	r3, r2, [r1]
 8003a6a:	617b      	str	r3, [r7, #20]
   return(result);
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1e5      	bne.n	8003a3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e012      	b.n	8003aac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3758      	adds	r7, #88	@ 0x58
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac4:	e04f      	b.n	8003b66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003acc:	d04b      	beq.n	8003b66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ace:	f7fd fb4d 	bl	800116c <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d302      	bcc.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e04e      	b.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d037      	beq.n	8003b66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2b80      	cmp	r3, #128	@ 0x80
 8003afa:	d034      	beq.n	8003b66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b40      	cmp	r3, #64	@ 0x40
 8003b00:	d031      	beq.n	8003b66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d110      	bne.n	8003b32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2208      	movs	r2, #8
 8003b16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f838 	bl	8003b8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2208      	movs	r2, #8
 8003b22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e029      	b.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b40:	d111      	bne.n	8003b66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 f81e 	bl	8003b8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e00f      	b.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69da      	ldr	r2, [r3, #28]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	bf0c      	ite	eq
 8003b76:	2301      	moveq	r3, #1
 8003b78:	2300      	movne	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d0a0      	beq.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b095      	sub	sp, #84	@ 0x54
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b9e:	e853 3f00 	ldrex	r3, [r3]
 8003ba2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bb6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bbc:	e841 2300 	strex	r3, r2, [r1]
 8003bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1e6      	bne.n	8003b96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3308      	adds	r3, #8
 8003bce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	e853 3f00 	ldrex	r3, [r3]
 8003bd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bde:	f023 0301 	bic.w	r3, r3, #1
 8003be2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3308      	adds	r3, #8
 8003bea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bf4:	e841 2300 	strex	r3, r2, [r1]
 8003bf8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1e3      	bne.n	8003bc8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d118      	bne.n	8003c3a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	f023 0310 	bic.w	r3, r3, #16
 8003c1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c26:	61bb      	str	r3, [r7, #24]
 8003c28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	6979      	ldr	r1, [r7, #20]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	613b      	str	r3, [r7, #16]
   return(result);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1e6      	bne.n	8003c08 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003c4e:	bf00      	nop
 8003c50:	3754      	adds	r7, #84	@ 0x54
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <memset>:
 8003c5a:	4402      	add	r2, r0
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d100      	bne.n	8003c64 <memset+0xa>
 8003c62:	4770      	bx	lr
 8003c64:	f803 1b01 	strb.w	r1, [r3], #1
 8003c68:	e7f9      	b.n	8003c5e <memset+0x4>
	...

08003c6c <__libc_init_array>:
 8003c6c:	b570      	push	{r4, r5, r6, lr}
 8003c6e:	4d0d      	ldr	r5, [pc, #52]	@ (8003ca4 <__libc_init_array+0x38>)
 8003c70:	2600      	movs	r6, #0
 8003c72:	4c0d      	ldr	r4, [pc, #52]	@ (8003ca8 <__libc_init_array+0x3c>)
 8003c74:	1b64      	subs	r4, r4, r5
 8003c76:	10a4      	asrs	r4, r4, #2
 8003c78:	42a6      	cmp	r6, r4
 8003c7a:	d109      	bne.n	8003c90 <__libc_init_array+0x24>
 8003c7c:	4d0b      	ldr	r5, [pc, #44]	@ (8003cac <__libc_init_array+0x40>)
 8003c7e:	2600      	movs	r6, #0
 8003c80:	4c0b      	ldr	r4, [pc, #44]	@ (8003cb0 <__libc_init_array+0x44>)
 8003c82:	f000 f817 	bl	8003cb4 <_init>
 8003c86:	1b64      	subs	r4, r4, r5
 8003c88:	10a4      	asrs	r4, r4, #2
 8003c8a:	42a6      	cmp	r6, r4
 8003c8c:	d105      	bne.n	8003c9a <__libc_init_array+0x2e>
 8003c8e:	bd70      	pop	{r4, r5, r6, pc}
 8003c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c94:	3601      	adds	r6, #1
 8003c96:	4798      	blx	r3
 8003c98:	e7ee      	b.n	8003c78 <__libc_init_array+0xc>
 8003c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c9e:	3601      	adds	r6, #1
 8003ca0:	4798      	blx	r3
 8003ca2:	e7f2      	b.n	8003c8a <__libc_init_array+0x1e>
 8003ca4:	08003d70 	.word	0x08003d70
 8003ca8:	08003d70 	.word	0x08003d70
 8003cac:	08003d70 	.word	0x08003d70
 8003cb0:	08003d74 	.word	0x08003d74

08003cb4 <_init>:
 8003cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb6:	bf00      	nop
 8003cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cba:	bc08      	pop	{r3}
 8003cbc:	469e      	mov	lr, r3
 8003cbe:	4770      	bx	lr

08003cc0 <_fini>:
 8003cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc2:	bf00      	nop
 8003cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc6:	bc08      	pop	{r3}
 8003cc8:	469e      	mov	lr, r3
 8003cca:	4770      	bx	lr
