
NVM Flash Drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000534c  080001f4  080001f4  000011f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08005540  08005540  00006540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005690  08005690  00007090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005690  08005690  00006690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005698  08005698  00007090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005698  08005698  00006698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800569c  0800569c  0000669c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  080056a0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  20000090  08005730  00007090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  08005730  000073ac  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fab5  00000000  00000000  000070c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c5  00000000  00000000  00016b7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  00018f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a7f  00000000  00000000  00019cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002969a  00000000  00000000  0001a777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fdd1  00000000  00000000  00043e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001028c9  00000000  00000000  00053be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001564ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004028  00000000  00000000  001564f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0015a518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	@ (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000090 	.word	0x20000090
 8000210:	00000000 	.word	0x00000000
 8000214:	08005528 	.word	0x08005528

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	@ (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	@ (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	@ (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000094 	.word	0x20000094
 8000230:	08005528 	.word	0x08005528

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b9b0 	b.w	80005ac <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800026a:	4688      	mov	r8, r1
 800026c:	4604      	mov	r4, r0
 800026e:	468e      	mov	lr, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14a      	bne.n	800030a <__udivmoddi4+0xa6>
 8000274:	428a      	cmp	r2, r1
 8000276:	4617      	mov	r7, r2
 8000278:	d95f      	bls.n	800033a <__udivmoddi4+0xd6>
 800027a:	fab2 f682 	clz	r6, r2
 800027e:	b14e      	cbz	r6, 8000294 <__udivmoddi4+0x30>
 8000280:	f1c6 0320 	rsb	r3, r6, #32
 8000284:	fa01 fe06 	lsl.w	lr, r1, r6
 8000288:	40b7      	lsls	r7, r6
 800028a:	40b4      	lsls	r4, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	ea43 0e0e 	orr.w	lr, r3, lr
 8000294:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000298:	fa1f fc87 	uxth.w	ip, r7
 800029c:	0c23      	lsrs	r3, r4, #16
 800029e:	fbbe f1f8 	udiv	r1, lr, r8
 80002a2:	fb08 ee11 	mls	lr, r8, r1, lr
 80002a6:	fb01 f20c 	mul.w	r2, r1, ip
 80002aa:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d907      	bls.n	80002c2 <__udivmoddi4+0x5e>
 80002b2:	18fb      	adds	r3, r7, r3
 80002b4:	f101 30ff 	add.w	r0, r1, #4294967295
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x5c>
 80002ba:	429a      	cmp	r2, r3
 80002bc:	f200 8154 	bhi.w	8000568 <__udivmoddi4+0x304>
 80002c0:	4601      	mov	r1, r0
 80002c2:	1a9b      	subs	r3, r3, r2
 80002c4:	b2a2      	uxth	r2, r4
 80002c6:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ca:	fb08 3310 	mls	r3, r8, r0, r3
 80002ce:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80002d6:	4594      	cmp	ip, r2
 80002d8:	d90b      	bls.n	80002f2 <__udivmoddi4+0x8e>
 80002da:	18ba      	adds	r2, r7, r2
 80002dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e0:	bf2c      	ite	cs
 80002e2:	2401      	movcs	r4, #1
 80002e4:	2400      	movcc	r4, #0
 80002e6:	4594      	cmp	ip, r2
 80002e8:	d902      	bls.n	80002f0 <__udivmoddi4+0x8c>
 80002ea:	2c00      	cmp	r4, #0
 80002ec:	f000 813f 	beq.w	800056e <__udivmoddi4+0x30a>
 80002f0:	4618      	mov	r0, r3
 80002f2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f6:	eba2 020c 	sub.w	r2, r2, ip
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa2>
 80002fe:	40f2      	lsrs	r2, r6
 8000300:	2300      	movs	r3, #0
 8000302:	e9c5 2300 	strd	r2, r3, [r5]
 8000306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xb6>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb0>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa2>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d14e      	bne.n	80003c0 <__udivmoddi4+0x15c>
 8000322:	4543      	cmp	r3, r8
 8000324:	f0c0 8112 	bcc.w	800054c <__udivmoddi4+0x2e8>
 8000328:	4282      	cmp	r2, r0
 800032a:	f240 810f 	bls.w	800054c <__udivmoddi4+0x2e8>
 800032e:	4608      	mov	r0, r1
 8000330:	2d00      	cmp	r5, #0
 8000332:	d0e8      	beq.n	8000306 <__udivmoddi4+0xa2>
 8000334:	e9c5 4e00 	strd	r4, lr, [r5]
 8000338:	e7e5      	b.n	8000306 <__udivmoddi4+0xa2>
 800033a:	2a00      	cmp	r2, #0
 800033c:	f000 80ac 	beq.w	8000498 <__udivmoddi4+0x234>
 8000340:	fab2 f682 	clz	r6, r2
 8000344:	2e00      	cmp	r6, #0
 8000346:	f040 80bb 	bne.w	80004c0 <__udivmoddi4+0x25c>
 800034a:	1a8b      	subs	r3, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b2bc      	uxth	r4, r7
 8000352:	2101      	movs	r1, #1
 8000354:	0c02      	lsrs	r2, r0, #16
 8000356:	b280      	uxth	r0, r0
 8000358:	fbb3 fcfe 	udiv	ip, r3, lr
 800035c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000360:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000364:	fb04 f20c 	mul.w	r2, r4, ip
 8000368:	429a      	cmp	r2, r3
 800036a:	d90e      	bls.n	800038a <__udivmoddi4+0x126>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	429a      	cmp	r2, r3
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80ec 	beq.w	8000560 <__udivmoddi4+0x2fc>
 8000388:	46c4      	mov	ip, r8
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	fbb3 f8fe 	udiv	r8, r3, lr
 8000390:	fb0e 3318 	mls	r3, lr, r8, r3
 8000394:	fb04 f408 	mul.w	r4, r4, r8
 8000398:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800039c:	4294      	cmp	r4, r2
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x154>
 80003a0:	18ba      	adds	r2, r7, r2
 80003a2:	f108 33ff 	add.w	r3, r8, #4294967295
 80003a6:	bf2c      	ite	cs
 80003a8:	2001      	movcs	r0, #1
 80003aa:	2000      	movcc	r0, #0
 80003ac:	4294      	cmp	r4, r2
 80003ae:	d902      	bls.n	80003b6 <__udivmoddi4+0x152>
 80003b0:	2800      	cmp	r0, #0
 80003b2:	f000 80d1 	beq.w	8000558 <__udivmoddi4+0x2f4>
 80003b6:	4698      	mov	r8, r3
 80003b8:	1b12      	subs	r2, r2, r4
 80003ba:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 80003be:	e79d      	b.n	80002fc <__udivmoddi4+0x98>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa08 f401 	lsl.w	r4, r8, r1
 80003ca:	fa00 f901 	lsl.w	r9, r0, r1
 80003ce:	fa22 f706 	lsr.w	r7, r2, r6
 80003d2:	fa28 f806 	lsr.w	r8, r8, r6
 80003d6:	408a      	lsls	r2, r1
 80003d8:	431f      	orrs	r7, r3
 80003da:	fa20 f306 	lsr.w	r3, r0, r6
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	4323      	orrs	r3, r4
 80003e2:	fa1f fc87 	uxth.w	ip, r7
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	fbb8 fef0 	udiv	lr, r8, r0
 80003ec:	fb00 881e 	mls	r8, r0, lr, r8
 80003f0:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80003f4:	fb0e f80c 	mul.w	r8, lr, ip
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d90e      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	45a0      	cmp	r8, r4
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 80b8 	beq.w	8000588 <__udivmoddi4+0x324>
 8000418:	46d6      	mov	lr, sl
 800041a:	eba4 0408 	sub.w	r4, r4, r8
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	fbb4 f3f0 	udiv	r3, r4, r0
 8000426:	fb00 4413 	mls	r4, r0, r3, r4
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000432:	45a4      	cmp	ip, r4
 8000434:	d90e      	bls.n	8000454 <__udivmoddi4+0x1f0>
 8000436:	193c      	adds	r4, r7, r4
 8000438:	f103 30ff 	add.w	r0, r3, #4294967295
 800043c:	bf2c      	ite	cs
 800043e:	f04f 0801 	movcs.w	r8, #1
 8000442:	f04f 0800 	movcc.w	r8, #0
 8000446:	45a4      	cmp	ip, r4
 8000448:	d903      	bls.n	8000452 <__udivmoddi4+0x1ee>
 800044a:	f1b8 0f00 	cmp.w	r8, #0
 800044e:	f000 809f 	beq.w	8000590 <__udivmoddi4+0x32c>
 8000452:	4603      	mov	r3, r0
 8000454:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000458:	eba4 040c 	sub.w	r4, r4, ip
 800045c:	fba0 ec02 	umull	lr, ip, r0, r2
 8000460:	4564      	cmp	r4, ip
 8000462:	4673      	mov	r3, lr
 8000464:	46e0      	mov	r8, ip
 8000466:	d302      	bcc.n	800046e <__udivmoddi4+0x20a>
 8000468:	d107      	bne.n	800047a <__udivmoddi4+0x216>
 800046a:	45f1      	cmp	r9, lr
 800046c:	d205      	bcs.n	800047a <__udivmoddi4+0x216>
 800046e:	ebbe 0302 	subs.w	r3, lr, r2
 8000472:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000476:	3801      	subs	r0, #1
 8000478:	46e0      	mov	r8, ip
 800047a:	b15d      	cbz	r5, 8000494 <__udivmoddi4+0x230>
 800047c:	ebb9 0203 	subs.w	r2, r9, r3
 8000480:	eb64 0408 	sbc.w	r4, r4, r8
 8000484:	fa04 f606 	lsl.w	r6, r4, r6
 8000488:	fa22 f301 	lsr.w	r3, r2, r1
 800048c:	40cc      	lsrs	r4, r1
 800048e:	431e      	orrs	r6, r3
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e736      	b.n	8000306 <__udivmoddi4+0xa2>
 8000498:	fbb1 fcf2 	udiv	ip, r1, r2
 800049c:	0c01      	lsrs	r1, r0, #16
 800049e:	4614      	mov	r4, r2
 80004a0:	b280      	uxth	r0, r0
 80004a2:	4696      	mov	lr, r2
 80004a4:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004a8:	2620      	movs	r6, #32
 80004aa:	4690      	mov	r8, r2
 80004ac:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004b0:	4610      	mov	r0, r2
 80004b2:	fbb1 f1f2 	udiv	r1, r1, r2
 80004b6:	eba3 0308 	sub.w	r3, r3, r8
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	e74b      	b.n	8000358 <__udivmoddi4+0xf4>
 80004c0:	40b7      	lsls	r7, r6
 80004c2:	f1c6 0320 	rsb	r3, r6, #32
 80004c6:	fa01 f206 	lsl.w	r2, r1, r6
 80004ca:	fa21 f803 	lsr.w	r8, r1, r3
 80004ce:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d2:	fa20 f303 	lsr.w	r3, r0, r3
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	40b0      	lsls	r0, r6
 80004da:	4313      	orrs	r3, r2
 80004dc:	0c02      	lsrs	r2, r0, #16
 80004de:	0c19      	lsrs	r1, r3, #16
 80004e0:	b280      	uxth	r0, r0
 80004e2:	fbb8 f9fe 	udiv	r9, r8, lr
 80004e6:	fb0e 8819 	mls	r8, lr, r9, r8
 80004ea:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	4588      	cmp	r8, r1
 80004f4:	d951      	bls.n	800059a <__udivmoddi4+0x336>
 80004f6:	1879      	adds	r1, r7, r1
 80004f8:	f109 3cff 	add.w	ip, r9, #4294967295
 80004fc:	bf2c      	ite	cs
 80004fe:	f04f 0a01 	movcs.w	sl, #1
 8000502:	f04f 0a00 	movcc.w	sl, #0
 8000506:	4588      	cmp	r8, r1
 8000508:	d902      	bls.n	8000510 <__udivmoddi4+0x2ac>
 800050a:	f1ba 0f00 	cmp.w	sl, #0
 800050e:	d031      	beq.n	8000574 <__udivmoddi4+0x310>
 8000510:	eba1 0108 	sub.w	r1, r1, r8
 8000514:	fbb1 f9fe 	udiv	r9, r1, lr
 8000518:	fb09 f804 	mul.w	r8, r9, r4
 800051c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000520:	b29b      	uxth	r3, r3
 8000522:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000526:	4543      	cmp	r3, r8
 8000528:	d235      	bcs.n	8000596 <__udivmoddi4+0x332>
 800052a:	18fb      	adds	r3, r7, r3
 800052c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000530:	bf2c      	ite	cs
 8000532:	f04f 0a01 	movcs.w	sl, #1
 8000536:	f04f 0a00 	movcc.w	sl, #0
 800053a:	4543      	cmp	r3, r8
 800053c:	d2bb      	bcs.n	80004b6 <__udivmoddi4+0x252>
 800053e:	f1ba 0f00 	cmp.w	sl, #0
 8000542:	d1b8      	bne.n	80004b6 <__udivmoddi4+0x252>
 8000544:	f1a9 0102 	sub.w	r1, r9, #2
 8000548:	443b      	add	r3, r7
 800054a:	e7b4      	b.n	80004b6 <__udivmoddi4+0x252>
 800054c:	1a84      	subs	r4, r0, r2
 800054e:	eb68 0203 	sbc.w	r2, r8, r3
 8000552:	2001      	movs	r0, #1
 8000554:	4696      	mov	lr, r2
 8000556:	e6eb      	b.n	8000330 <__udivmoddi4+0xcc>
 8000558:	443a      	add	r2, r7
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	e72b      	b.n	80003b8 <__udivmoddi4+0x154>
 8000560:	f1ac 0c02 	sub.w	ip, ip, #2
 8000564:	443b      	add	r3, r7
 8000566:	e710      	b.n	800038a <__udivmoddi4+0x126>
 8000568:	3902      	subs	r1, #2
 800056a:	443b      	add	r3, r7
 800056c:	e6a9      	b.n	80002c2 <__udivmoddi4+0x5e>
 800056e:	443a      	add	r2, r7
 8000570:	3802      	subs	r0, #2
 8000572:	e6be      	b.n	80002f2 <__udivmoddi4+0x8e>
 8000574:	eba7 0808 	sub.w	r8, r7, r8
 8000578:	f1a9 0c02 	sub.w	ip, r9, #2
 800057c:	4441      	add	r1, r8
 800057e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000582:	fb09 f804 	mul.w	r8, r9, r4
 8000586:	e7c9      	b.n	800051c <__udivmoddi4+0x2b8>
 8000588:	f1ae 0e02 	sub.w	lr, lr, #2
 800058c:	443c      	add	r4, r7
 800058e:	e744      	b.n	800041a <__udivmoddi4+0x1b6>
 8000590:	3b02      	subs	r3, #2
 8000592:	443c      	add	r4, r7
 8000594:	e75e      	b.n	8000454 <__udivmoddi4+0x1f0>
 8000596:	4649      	mov	r1, r9
 8000598:	e78d      	b.n	80004b6 <__udivmoddi4+0x252>
 800059a:	eba1 0108 	sub.w	r1, r1, r8
 800059e:	46cc      	mov	ip, r9
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7b8      	b.n	800051c <__udivmoddi4+0x2b8>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <CS_LOW>:


// Chip Select helpers
#define FLASH_CS_PORT GPIOA
#define FLASH_CS_PIN  GPIO_PIN_4
static inline void CS_LOW(void)  { HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET); }
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	2200      	movs	r2, #0
 80005b6:	2110      	movs	r1, #16
 80005b8:	4802      	ldr	r0, [pc, #8]	@ (80005c4 <CS_LOW+0x14>)
 80005ba:	f001 fa31 	bl	8001a20 <HAL_GPIO_WritePin>
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	42020000 	.word	0x42020000

080005c8 <CS_HIGH>:
static inline void CS_HIGH(void) { HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);   }
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	2201      	movs	r2, #1
 80005ce:	2110      	movs	r1, #16
 80005d0:	4802      	ldr	r0, [pc, #8]	@ (80005dc <CS_HIGH+0x14>)
 80005d2:	f001 fa25 	bl	8001a20 <HAL_GPIO_WritePin>
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	42020000 	.word	0x42020000

080005e0 <readID>:
static inline void spi_tx1(uint8_t v) { HAL_SPI_Transmit(&hspi1, &v, 1, HAL_MAX_DELAY);}
static inline void spi_tx(const uint8_t *buf, uint16_t n) { HAL_SPI_Transmit(&hspi1, (uint8_t*)buf, n, HAL_MAX_DELAY);}
static void spi_rx(uint8_t *buf, uint16_t n) { HAL_SPI_Receive(&hspi1, buf, n, HAL_MAX_DELAY);}

// function to read the ID of the NVM chip with command 9f
HAL_StatusTypeDef readID(uint8_t id[20]){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	// read the ID
	uint8_t id_cmd = 0x9f;
 80005e8:	239f      	movs	r3, #159	@ 0x9f
 80005ea:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef stat;
	CS_LOW();
 80005ec:	f7ff ffe0 	bl	80005b0 <CS_LOW>
	stat = HAL_SPI_Transmit(&hspi1, &id_cmd, 1, HAL_MAX_DELAY);
 80005f0:	f107 010e 	add.w	r1, r7, #14
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	2201      	movs	r2, #1
 80005fa:	4816      	ldr	r0, [pc, #88]	@ (8000654 <readID+0x74>)
 80005fc:	f002 fb63 	bl	8002cc6 <HAL_SPI_Transmit>
 8000600:	4603      	mov	r3, r0
 8000602:	73fb      	strb	r3, [r7, #15]
	if (stat == HAL_OK){
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d108      	bne.n	800061c <readID+0x3c>
		stat = HAL_SPI_Receive(&hspi1, id, 20, HAL_MAX_DELAY);
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	2214      	movs	r2, #20
 8000610:	6879      	ldr	r1, [r7, #4]
 8000612:	4810      	ldr	r0, [pc, #64]	@ (8000654 <readID+0x74>)
 8000614:	f002 fccc 	bl	8002fb0 <HAL_SPI_Receive>
 8000618:	4603      	mov	r3, r0
 800061a:	73fb      	strb	r3, [r7, #15]
	}
	CS_HIGH();
 800061c:	f7ff ffd4 	bl	80005c8 <CS_HIGH>
	if (stat == HAL_OK) {
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d10d      	bne.n	8000642 <readID+0x62>
		// we expoect ID to be 0x20, 0xBA, 0x19
		printf("JEDEC: %02X %02X %02X\r\n", id[0], id[1], id[2]);    // id[0] = MFR, id[1] = TYPE, id[2] = CAP
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	4619      	mov	r1, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3301      	adds	r3, #1
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	461a      	mov	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	3302      	adds	r3, #2
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	4807      	ldr	r0, [pc, #28]	@ (8000658 <readID+0x78>)
 800063c:	f004 f946 	bl	80048cc <iprintf>
 8000640:	e002      	b.n	8000648 <readID+0x68>
	}
	else printf("coudn't get ID, error \r\n");
 8000642:	4806      	ldr	r0, [pc, #24]	@ (800065c <readID+0x7c>)
 8000644:	f004 f9aa 	bl	800499c <puts>
	return stat;
 8000648:	7bfb      	ldrb	r3, [r7, #15]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200000bc 	.word	0x200000bc
 8000658:	08005540 	.word	0x08005540
 800065c:	08005558 	.word	0x08005558

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000666:	f000 fe29 	bl	80012bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066a:	f000 f845 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066e:	f000 f8e5 	bl	800083c <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000672:	f000 f892 	bl	800079a <MX_ICACHE_Init>
  MX_SPI1_Init();
 8000676:	f000 f8a3 	bl	80007c0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800067a:	2000      	movs	r0, #0
 800067c:	f000 fb5a 	bl	8000d34 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8000680:	2001      	movs	r0, #1
 8000682:	f000 fb57 	bl	8000d34 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000686:	2002      	movs	r0, #2
 8000688:	f000 fb54 	bl	8000d34 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800068c:	2101      	movs	r1, #1
 800068e:	2000      	movs	r0, #0
 8000690:	f000 fbae 	bl	8000df0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000694:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <main+0x90>)
 8000696:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800069a:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800069c:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <main+0x90>)
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80006a2:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <main+0x90>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80006a8:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <main+0x90>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80006ae:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <main+0x90>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80006b4:	490e      	ldr	r1, [pc, #56]	@ (80006f0 <main+0x90>)
 80006b6:	2000      	movs	r0, #0
 80006b8:	f000 fc56 	bl	8000f68 <BSP_COM_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <main+0x66>
  {
    Error_Handler();
 80006c2:	f000 f905 	bl	80008d0 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

//  txTest();
//  rxTest();
  uint8_t id[20] = {0};
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  while (1)
  {
	  printf("hello world\r\n");
 80006d4:	4807      	ldr	r0, [pc, #28]	@ (80006f4 <main+0x94>)
 80006d6:	f004 f961 	bl	800499c <puts>
	  HAL_Delay(1000);
 80006da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006de:	f000 fe63 	bl	80013a8 <HAL_Delay>
	  readID(id);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ff7b 	bl	80005e0 <readID>
	  printf("hello world\r\n");
 80006ea:	bf00      	nop
 80006ec:	e7f2      	b.n	80006d4 <main+0x74>
 80006ee:	bf00      	nop
 80006f0:	200000ac 	.word	0x200000ac
 80006f4:	080055b0 	.word	0x080055b0

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b098      	sub	sp, #96	@ 0x60
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0318 	add.w	r3, r7, #24
 8000702:	2248      	movs	r2, #72	@ 0x48
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f004 fa28 	bl	8004b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800071a:	2000      	movs	r0, #0
 800071c:	f001 f9d6 	bl	8001acc <HAL_PWREx_ControlVoltageScaling>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000726:	f000 f8d3 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800072a:	2310      	movs	r3, #16
 800072c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800072e:	2301      	movs	r3, #1
 8000730:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000732:	2300      	movs	r3, #0
 8000734:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000736:	2360      	movs	r3, #96	@ 0x60
 8000738:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800073e:	2301      	movs	r3, #1
 8000740:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000742:	2301      	movs	r3, #1
 8000744:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000746:	2337      	movs	r3, #55	@ 0x37
 8000748:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800074a:	2307      	movs	r3, #7
 800074c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800074e:	2302      	movs	r3, #2
 8000750:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000752:	2302      	movs	r3, #2
 8000754:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 0318 	add.w	r3, r7, #24
 800075a:	4618      	mov	r0, r3
 800075c:	f001 fa56 	bl	8001c0c <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000766:	f000 f8b3 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2303      	movs	r3, #3
 8000770:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2105      	movs	r1, #5
 8000782:	4618      	mov	r0, r3
 8000784:	f001 ff18 	bl	80025b8 <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800078e:	f000 f89f 	bl	80008d0 <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	3760      	adds	r7, #96	@ 0x60
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800079e:	2000      	movs	r0, #0
 80007a0:	f001 f956 	bl	8001a50 <HAL_ICACHE_ConfigAssociativityMode>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80007aa:	f000 f891 	bl	80008d0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80007ae:	f001 f96f 	bl	8001a90 <HAL_ICACHE_Enable>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80007b8:	f000 f88a 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <MX_SPI1_Init+0x74>)
 80007c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000838 <MX_SPI1_Init+0x78>)
 80007c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <MX_SPI1_Init+0x74>)
 80007cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007d2:	4b18      	ldr	r3, [pc, #96]	@ (8000834 <MX_SPI1_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d8:	4b16      	ldr	r3, [pc, #88]	@ (8000834 <MX_SPI1_Init+0x74>)
 80007da:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80007de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_SPI1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e6:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <MX_SPI1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ec:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <MX_SPI1_Init+0x74>)
 80007ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <MX_SPI1_Init+0x74>)
 80007f6:	2208      	movs	r2, #8
 80007f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <MX_SPI1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000800:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <MX_SPI1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <MX_SPI1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <MX_SPI1_Init+0x74>)
 800080e:	2207      	movs	r2, #7
 8000810:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000812:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <MX_SPI1_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <MX_SPI1_Init+0x74>)
 800081a:	2208      	movs	r2, #8
 800081c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_SPI1_Init+0x74>)
 8000820:	f002 f9ae 	bl	8002b80 <HAL_SPI_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800082a:	f000 f851 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000bc 	.word	0x200000bc
 8000838:	40013000 	.word	0x40013000

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	4b1d      	ldr	r3, [pc, #116]	@ (80008c8 <MX_GPIO_Init+0x8c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	4a1c      	ldr	r2, [pc, #112]	@ (80008c8 <MX_GPIO_Init+0x8c>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085e:	4b1a      	ldr	r3, [pc, #104]	@ (80008c8 <MX_GPIO_Init+0x8c>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b17      	ldr	r3, [pc, #92]	@ (80008c8 <MX_GPIO_Init+0x8c>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	4a16      	ldr	r2, [pc, #88]	@ (80008c8 <MX_GPIO_Init+0x8c>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000876:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <MX_GPIO_Init+0x8c>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_GPIO_Init+0x8c>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000886:	4a10      	ldr	r2, [pc, #64]	@ (80008c8 <MX_GPIO_Init+0x8c>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <MX_GPIO_Init+0x8c>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2110      	movs	r1, #16
 800089e:	480b      	ldr	r0, [pc, #44]	@ (80008cc <MX_GPIO_Init+0x90>)
 80008a0:	f001 f8be 	bl	8001a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008a4:	2310      	movs	r3, #16
 80008a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	4619      	mov	r1, r3
 80008ba:	4804      	ldr	r0, [pc, #16]	@ (80008cc <MX_GPIO_Init+0x90>)
 80008bc:	f000 ff30 	bl	8001720 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008c0:	bf00      	nop
 80008c2:	3720      	adds	r7, #32
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40021000 	.word	0x40021000
 80008cc:	42020000 	.word	0x42020000

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <Error_Handler+0x8>

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <HAL_MspInit+0x44>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000920 <HAL_MspInit+0x44>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80008ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <HAL_MspInit+0x44>)
 80008f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <HAL_MspInit+0x44>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008fe:	4a08      	ldr	r2, [pc, #32]	@ (8000920 <HAL_MspInit+0x44>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000904:	6593      	str	r3, [r2, #88]	@ 0x58
 8000906:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <HAL_MspInit+0x44>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000912:	f001 f947 	bl	8001ba4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000

08000924 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	@ 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a17      	ldr	r2, [pc, #92]	@ (80009a0 <HAL_SPI_MspInit+0x7c>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d127      	bne.n	8000996 <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000946:	4b17      	ldr	r3, [pc, #92]	@ (80009a4 <HAL_SPI_MspInit+0x80>)
 8000948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800094a:	4a16      	ldr	r2, [pc, #88]	@ (80009a4 <HAL_SPI_MspInit+0x80>)
 800094c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000950:	6613      	str	r3, [r2, #96]	@ 0x60
 8000952:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <HAL_SPI_MspInit+0x80>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000956:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <HAL_SPI_MspInit+0x80>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000962:	4a10      	ldr	r2, [pc, #64]	@ (80009a4 <HAL_SPI_MspInit+0x80>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800096a:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <HAL_SPI_MspInit+0x80>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000976:	2338      	movs	r3, #56	@ 0x38
 8000978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000986:	2305      	movs	r3, #5
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <HAL_SPI_MspInit+0x84>)
 8000992:	f000 fec5 	bl	8001720 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000996:	bf00      	nop
 8000998:	3728      	adds	r7, #40	@ 0x28
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40013000 	.word	0x40013000
 80009a4:	40021000 	.word	0x40021000
 80009a8:	42020400 	.word	0x42020400

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <NMI_Handler+0x4>

080009b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <MemManage_Handler+0x4>

080009c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a02:	f000 fcb1 	bl	8001368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f000 fa94 	bl	8000f3c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	e00a      	b.n	8000a40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a2a:	f3af 8000 	nop.w
 8000a2e:	4601      	mov	r1, r0
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	1c5a      	adds	r2, r3, #1
 8000a34:	60ba      	str	r2, [r7, #8]
 8000a36:	b2ca      	uxtb	r2, r1
 8000a38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	697a      	ldr	r2, [r7, #20]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	dbf0      	blt.n	8000a2a <_read+0x12>
  }

  return len;
 8000a48:	687b      	ldr	r3, [r7, #4]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b086      	sub	sp, #24
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	60f8      	str	r0, [r7, #12]
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
 8000a62:	e009      	b.n	8000a78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	1c5a      	adds	r2, r3, #1
 8000a68:	60ba      	str	r2, [r7, #8]
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 facf 	bl	8001010 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	3301      	adds	r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697a      	ldr	r2, [r7, #20]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	dbf1      	blt.n	8000a64 <_write+0x12>
  }
  return len;
 8000a80:	687b      	ldr	r3, [r7, #4]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <_close>:

int _close(int file)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	b083      	sub	sp, #12
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
 8000aaa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ab2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <_isatty>:

int _isatty(int file)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000afc:	4a14      	ldr	r2, [pc, #80]	@ (8000b50 <_sbrk+0x5c>)
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <_sbrk+0x60>)
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b08:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d102      	bne.n	8000b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b10:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <_sbrk+0x64>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	@ (8000b5c <_sbrk+0x68>)
 8000b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b16:	4b10      	ldr	r3, [pc, #64]	@ (8000b58 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d207      	bcs.n	8000b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b24:	f004 f878 	bl	8004c18 <__errno>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	e009      	b.n	8000b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	4a05      	ldr	r2, [pc, #20]	@ (8000b58 <_sbrk+0x64>)
 8000b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b46:	68fb      	ldr	r3, [r7, #12]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20030000 	.word	0x20030000
 8000b54:	00000400 	.word	0x00000400
 8000b58:	20000120 	.word	0x20000120
 8000b5c:	200003b0 	.word	0x200003b0

08000b60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <SystemInit+0x20>)
 8000b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b6a:	4a05      	ldr	r2, [pc, #20]	@ (8000b80 <SystemInit+0x20>)
 8000b6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b087      	sub	sp, #28
 8000b88:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000b8a:	4b4f      	ldr	r3, [pc, #316]	@ (8000cc8 <SystemCoreClockUpdate+0x144>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f003 0308 	and.w	r3, r3, #8
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d107      	bne.n	8000ba6 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000b96:	4b4c      	ldr	r3, [pc, #304]	@ (8000cc8 <SystemCoreClockUpdate+0x144>)
 8000b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	e005      	b.n	8000bb2 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000ba6:	4b48      	ldr	r3, [pc, #288]	@ (8000cc8 <SystemCoreClockUpdate+0x144>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	091b      	lsrs	r3, r3, #4
 8000bac:	f003 030f 	and.w	r3, r3, #15
 8000bb0:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000bb2:	4a46      	ldr	r2, [pc, #280]	@ (8000ccc <SystemCoreClockUpdate+0x148>)
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bba:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bbc:	4b42      	ldr	r3, [pc, #264]	@ (8000cc8 <SystemCoreClockUpdate+0x144>)
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	f003 030c 	and.w	r3, r3, #12
 8000bc4:	2b0c      	cmp	r3, #12
 8000bc6:	d866      	bhi.n	8000c96 <SystemCoreClockUpdate+0x112>
 8000bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8000bd0 <SystemCoreClockUpdate+0x4c>)
 8000bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bce:	bf00      	nop
 8000bd0:	08000c05 	.word	0x08000c05
 8000bd4:	08000c97 	.word	0x08000c97
 8000bd8:	08000c97 	.word	0x08000c97
 8000bdc:	08000c97 	.word	0x08000c97
 8000be0:	08000c0d 	.word	0x08000c0d
 8000be4:	08000c97 	.word	0x08000c97
 8000be8:	08000c97 	.word	0x08000c97
 8000bec:	08000c97 	.word	0x08000c97
 8000bf0:	08000c15 	.word	0x08000c15
 8000bf4:	08000c97 	.word	0x08000c97
 8000bf8:	08000c97 	.word	0x08000c97
 8000bfc:	08000c97 	.word	0x08000c97
 8000c00:	08000c1d 	.word	0x08000c1d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000c04:	4a32      	ldr	r2, [pc, #200]	@ (8000cd0 <SystemCoreClockUpdate+0x14c>)
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	6013      	str	r3, [r2, #0]
      break;
 8000c0a:	e048      	b.n	8000c9e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000c0c:	4b30      	ldr	r3, [pc, #192]	@ (8000cd0 <SystemCoreClockUpdate+0x14c>)
 8000c0e:	4a31      	ldr	r2, [pc, #196]	@ (8000cd4 <SystemCoreClockUpdate+0x150>)
 8000c10:	601a      	str	r2, [r3, #0]
      break;
 8000c12:	e044      	b.n	8000c9e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000c14:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd0 <SystemCoreClockUpdate+0x14c>)
 8000c16:	4a30      	ldr	r2, [pc, #192]	@ (8000cd8 <SystemCoreClockUpdate+0x154>)
 8000c18:	601a      	str	r2, [r3, #0]
      break;
 8000c1a:	e040      	b.n	8000c9e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000c1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc8 <SystemCoreClockUpdate+0x144>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000c26:	4b28      	ldr	r3, [pc, #160]	@ (8000cc8 <SystemCoreClockUpdate+0x144>)
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	091b      	lsrs	r3, r3, #4
 8000c2c:	f003 030f 	and.w	r3, r3, #15
 8000c30:	3301      	adds	r3, #1
 8000c32:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d003      	beq.n	8000c42 <SystemCoreClockUpdate+0xbe>
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	2b03      	cmp	r3, #3
 8000c3e:	d006      	beq.n	8000c4e <SystemCoreClockUpdate+0xca>
 8000c40:	e00b      	b.n	8000c5a <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000c42:	4a24      	ldr	r2, [pc, #144]	@ (8000cd4 <SystemCoreClockUpdate+0x150>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4a:	613b      	str	r3, [r7, #16]
          break;
 8000c4c:	e00b      	b.n	8000c66 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000c4e:	4a22      	ldr	r2, [pc, #136]	@ (8000cd8 <SystemCoreClockUpdate+0x154>)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	613b      	str	r3, [r7, #16]
          break;
 8000c58:	e005      	b.n	8000c66 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	613b      	str	r3, [r7, #16]
          break;
 8000c64:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000c66:	4b18      	ldr	r3, [pc, #96]	@ (8000cc8 <SystemCoreClockUpdate+0x144>)
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	0a1b      	lsrs	r3, r3, #8
 8000c6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	fb02 f303 	mul.w	r3, r2, r3
 8000c76:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000c78:	4b13      	ldr	r3, [pc, #76]	@ (8000cc8 <SystemCoreClockUpdate+0x144>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	0e5b      	lsrs	r3, r3, #25
 8000c7e:	f003 0303 	and.w	r3, r3, #3
 8000c82:	3301      	adds	r3, #1
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c90:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd0 <SystemCoreClockUpdate+0x14c>)
 8000c92:	6013      	str	r3, [r2, #0]
      break;
 8000c94:	e003      	b.n	8000c9e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000c96:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd0 <SystemCoreClockUpdate+0x14c>)
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	6013      	str	r3, [r2, #0]
      break;
 8000c9c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc8 <SystemCoreClockUpdate+0x144>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	091b      	lsrs	r3, r3, #4
 8000ca4:	f003 030f 	and.w	r3, r3, #15
 8000ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8000cdc <SystemCoreClockUpdate+0x158>)
 8000caa:	5cd3      	ldrb	r3, [r2, r3]
 8000cac:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000cae:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <SystemCoreClockUpdate+0x14c>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb8:	4a05      	ldr	r2, [pc, #20]	@ (8000cd0 <SystemCoreClockUpdate+0x14c>)
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	371c      	adds	r7, #28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	08005604 	.word	0x08005604
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	00f42400 	.word	0x00f42400
 8000cd8:	007a1200 	.word	0x007a1200
 8000cdc:	080055ec 	.word	0x080055ec

08000ce0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000ce0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ce4:	f7ff ff3c 	bl	8000b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ce8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000cea:	e003      	b.n	8000cf4 <LoopCopyDataInit>

08000cec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000cec:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000cee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000cf0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000cf2:	3104      	adds	r1, #4

08000cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000cf4:	480a      	ldr	r0, [pc, #40]	@ (8000d20 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000cf8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cfa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cfc:	d3f6      	bcc.n	8000cec <CopyDataInit>
	ldr	r2, =_sbss
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d00:	e002      	b.n	8000d08 <LoopFillZerobss>

08000d02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d02:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d04:	f842 3b04 	str.w	r3, [r2], #4

08000d08 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d08:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <LoopForever+0x16>)
	cmp	r2, r3
 8000d0a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d0c:	d3f9      	bcc.n	8000d02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d0e:	f003 ff89 	bl	8004c24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d12:	f7ff fca5 	bl	8000660 <main>

08000d16 <LoopForever>:

LoopForever:
    b LoopForever
 8000d16:	e7fe      	b.n	8000d16 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000d18:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8000d1c:	080056a0 	.word	0x080056a0
	ldr	r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d24:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 8000d28:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 8000d2c:	200003ac 	.word	0x200003ac

08000d30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <ADC1_2_IRQHandler>
	...

08000d34 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	@ 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LED1)
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d10c      	bne.n	8000d5e <BSP_LED_Init+0x2a>
  {
    LED1_GPIO_CLK_ENABLE();
 8000d44:	4b27      	ldr	r3, [pc, #156]	@ (8000de4 <BSP_LED_Init+0xb0>)
 8000d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d48:	4a26      	ldr	r2, [pc, #152]	@ (8000de4 <BSP_LED_Init+0xb0>)
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d50:	4b24      	ldr	r3, [pc, #144]	@ (8000de4 <BSP_LED_Init+0xb0>)
 8000d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	e01b      	b.n	8000d96 <BSP_LED_Init+0x62>
  }
  else if (Led == LED2)
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d10c      	bne.n	8000d7e <BSP_LED_Init+0x4a>
  {
    LED2_GPIO_CLK_ENABLE();
 8000d64:	4b1f      	ldr	r3, [pc, #124]	@ (8000de4 <BSP_LED_Init+0xb0>)
 8000d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d68:	4a1e      	ldr	r2, [pc, #120]	@ (8000de4 <BSP_LED_Init+0xb0>)
 8000d6a:	f043 0302 	orr.w	r3, r3, #2
 8000d6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d70:	4b1c      	ldr	r3, [pc, #112]	@ (8000de4 <BSP_LED_Init+0xb0>)
 8000d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d74:	f003 0302 	and.w	r3, r3, #2
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	e00b      	b.n	8000d96 <BSP_LED_Init+0x62>
  }
  else /* Led = LED3 */
  {
    LED3_GPIO_CLK_ENABLE();
 8000d7e:	4b19      	ldr	r3, [pc, #100]	@ (8000de4 <BSP_LED_Init+0xb0>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d82:	4a18      	ldr	r2, [pc, #96]	@ (8000de4 <BSP_LED_Init+0xb0>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d8a:	4b16      	ldr	r3, [pc, #88]	@ (8000de4 <BSP_LED_Init+0xb0>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	4a13      	ldr	r2, [pc, #76]	@ (8000de8 <BSP_LED_Init+0xb4>)
 8000d9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d9e:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_PULLUP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	4a0f      	ldr	r2, [pc, #60]	@ (8000dec <BSP_LED_Init+0xb8>)
 8000db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db4:	f107 0214 	add.w	r2, r7, #20
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fcb0 	bl	8001720 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <BSP_LED_Init+0xb8>)
 8000dc4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	4a07      	ldr	r2, [pc, #28]	@ (8000de8 <BSP_LED_Init+0xb4>)
 8000dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f000 fe24 	bl	8001a20 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3728      	adds	r7, #40	@ 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000
 8000de8:	20000004 	.word	0x20000004
 8000dec:	2000000c 	.word	0x2000000c

08000df0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08c      	sub	sp, #48	@ 0x30
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	460a      	mov	r2, r1
 8000dfa:	71fb      	strb	r3, [r7, #7]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	71bb      	strb	r3, [r7, #6]
  int32_t               status = BSP_ERROR_NONE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef      GPIO_Init;
  uint32_t              BSP_BUTTON_IT_PRIO[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
 8000e04:	230f      	movs	r3, #15
 8000e06:	617b      	str	r3, [r7, #20]
  uint32_t              BUTTON_EXTI_LINE[BUTTONn]   = {BUTTON_USER_EXTI_LINE};
 8000e08:	4b3f      	ldr	r3, [pc, #252]	@ (8000f08 <BSP_PB_Init+0x118>)
 8000e0a:	613b      	str	r3, [r7, #16]
  BSP_EXTI_LineCallback ButtonCallback[BUTTONn]     = {BUTTON_USER_EXTI_Callback};
 8000e0c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f0c <BSP_PB_Init+0x11c>)
 8000e0e:	60fb      	str	r3, [r7, #12]

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000e10:	4b3f      	ldr	r3, [pc, #252]	@ (8000f10 <BSP_PB_Init+0x120>)
 8000e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e14:	4a3e      	ldr	r2, [pc, #248]	@ (8000f10 <BSP_PB_Init+0x120>)
 8000e16:	f043 0304 	orr.w	r3, r3, #4
 8000e1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e1c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f10 <BSP_PB_Init+0x120>)
 8000e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e20:	f003 0304 	and.w	r3, r3, #4
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]

  GPIO_Init.Pin   = BUTTON_PIN[Button];
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	4a3a      	ldr	r2, [pc, #232]	@ (8000f14 <BSP_PB_Init+0x124>)
 8000e2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e30:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	623b      	str	r3, [r7, #32]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e36:	2302      	movs	r3, #2
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000e3a:	79bb      	ldrb	r3, [r7, #6]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d10b      	bne.n	8000e58 <BSP_PB_Init+0x68>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4a34      	ldr	r2, [pc, #208]	@ (8000f18 <BSP_PB_Init+0x128>)
 8000e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4c:	f107 0218 	add.w	r2, r7, #24
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 fc64 	bl	8001720 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8000e58:	79bb      	ldrb	r3, [r7, #6]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d14f      	bne.n	8000efe <BSP_PB_Init+0x10e>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_RISING;
 8000e5e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	4a2c      	ldr	r2, [pc, #176]	@ (8000f18 <BSP_PB_Init+0x128>)
 8000e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6c:	f107 0218 	add.w	r2, r7, #24
 8000e70:	4611      	mov	r1, r2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 fc54 	bl	8001720 <HAL_GPIO_Init>

    if (HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) == HAL_OK)
 8000e78:	79fa      	ldrb	r2, [r7, #7]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	4413      	add	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4a26      	ldr	r2, [pc, #152]	@ (8000f1c <BSP_PB_Init+0x12c>)
 8000e84:	441a      	add	r2, r3
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	3330      	adds	r3, #48	@ 0x30
 8000e8c:	443b      	add	r3, r7
 8000e8e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000e92:	4619      	mov	r1, r3
 8000e94:	4610      	mov	r0, r2
 8000e96:	f000 fbe6 	bl	8001666 <HAL_EXTI_GetHandle>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d12b      	bne.n	8000ef8 <BSP_PB_Init+0x108>
    {
      if (HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_RISING_CB_ID, ButtonCallback[Button]) == HAL_OK)
 8000ea0:	79fa      	ldrb	r2, [r7, #7]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	4413      	add	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4a1c      	ldr	r2, [pc, #112]	@ (8000f1c <BSP_PB_Init+0x12c>)
 8000eac:	1898      	adds	r0, r3, r2
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	3330      	adds	r3, #48	@ 0x30
 8000eb4:	443b      	add	r3, r7
 8000eb6:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	f000 fba6 	bl	800160e <HAL_EXTI_RegisterCallback>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d113      	bne.n	8000ef0 <BSP_PB_Init+0x100>
      {
        /* Enable and set Button EXTI Interrupt to the lowest priority */
        HAL_NVIC_SetPriority(BUTTON_IRQn[Button], BSP_BUTTON_IT_PRIO[Button], 0x00);
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	4a15      	ldr	r2, [pc, #84]	@ (8000f20 <BSP_PB_Init+0x130>)
 8000ecc:	56d0      	ldrsb	r0, [r2, r3]
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	3330      	adds	r3, #48	@ 0x30
 8000ed4:	443b      	add	r3, r7
 8000ed6:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000eda:	2200      	movs	r2, #0
 8000edc:	4619      	mov	r1, r3
 8000ede:	f000 fb62 	bl	80015a6 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	4a0e      	ldr	r2, [pc, #56]	@ (8000f20 <BSP_PB_Init+0x130>)
 8000ee6:	56d3      	ldrsb	r3, [r2, r3]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fb76 	bl	80015da <HAL_NVIC_EnableIRQ>
 8000eee:	e006      	b.n	8000efe <BSP_PB_Init+0x10e>
      }
      else
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8000ef0:	f06f 0303 	mvn.w	r3, #3
 8000ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ef6:	e002      	b.n	8000efe <BSP_PB_Init+0x10e>
      }
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 8000ef8:	f06f 0303 	mvn.w	r3, #3
 8000efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }

  return status;
 8000efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3730      	adds	r7, #48	@ 0x30
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	0600000d 	.word	0x0600000d
 8000f0c:	0800110d 	.word	0x0800110d
 8000f10:	40021000 	.word	0x40021000
 8000f14:	20000018 	.word	0x20000018
 8000f18:	2000001c 	.word	0x2000001c
 8000f1c:	2000024c 	.word	0x2000024c
 8000f20:	20000020 	.word	0x20000020

08000f24 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <BSP_PB_IRQHandler>:
  *   This parameter should be:
  *     @arg BUTTON_USER
  * @retval None.
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000f46:	79fa      	ldrb	r2, [r7, #7]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4413      	add	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4a04      	ldr	r2, [pc, #16]	@ (8000f64 <BSP_PB_IRQHandler+0x28>)
 8000f52:	4413      	add	r3, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 fb9b 	bl	8001690 <HAL_EXTI_IRQHandler>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000024c 	.word	0x2000024c

08000f68 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                configuration information for the specified COM peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d103      	bne.n	8000f86 <BSP_COM_Init+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8000f7e:	f06f 0301 	mvn.w	r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	e03a      	b.n	8000ffc <BSP_COM_Init+0x94>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
 8000f86:	79fa      	ldrb	r2, [r7, #7]
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	491f      	ldr	r1, [pc, #124]	@ (8001008 <BSP_COM_Init+0xa0>)
 8000f8c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f90:	491e      	ldr	r1, [pc, #120]	@ (800100c <BSP_COM_Init+0xa4>)
 8000f92:	2094      	movs	r0, #148	@ 0x94
 8000f94:	fb00 f303 	mul.w	r3, r0, r3
 8000f98:	440b      	add	r3, r1
 8000f9a:	601a      	str	r2, [r3, #0]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	2294      	movs	r2, #148	@ 0x94
 8000fa0:	fb02 f303 	mul.w	r3, r2, r3
 8000fa4:	4a19      	ldr	r2, [pc, #100]	@ (800100c <BSP_COM_Init+0xa4>)
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 f8b7 	bl	800111c <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d123      	bne.n	8000ffc <BSP_COM_Init+0x94>
    {
      if (COM == COM1)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d110      	bne.n	8000fdc <BSP_COM_Init+0x74>
      {
        if (MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2294      	movs	r2, #148	@ 0x94
 8000fbe:	fb02 f303 	mul.w	r3, r2, r3
 8000fc2:	4a12      	ldr	r2, [pc, #72]	@ (800100c <BSP_COM_Init+0xa4>)
 8000fc4:	4413      	add	r3, r2
 8000fc6:	6839      	ldr	r1, [r7, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f83d 	bl	8001048 <MX_LPUART1_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d013      	beq.n	8000ffc <BSP_COM_Init+0x94>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 8000fd4:	f06f 0303 	mvn.w	r3, #3
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	e00f      	b.n	8000ffc <BSP_COM_Init+0x94>
        }
      }
      else /* COM = COM2 */
      {
        if (MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	2294      	movs	r2, #148	@ 0x94
 8000fe0:	fb02 f303 	mul.w	r3, r2, r3
 8000fe4:	4a09      	ldr	r2, [pc, #36]	@ (800100c <BSP_COM_Init+0xa4>)
 8000fe6:	4413      	add	r3, r2
 8000fe8:	6839      	ldr	r1, [r7, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f85d 	bl	80010aa <MX_USART3_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d002      	beq.n	8000ffc <BSP_COM_Init+0x94>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 8000ff6:	f06f 0303 	mvn.w	r3, #3
 8000ffa:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return status;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000024 	.word	0x20000024
 800100c:	20000124 	.word	0x20000124

08001010 <__io_putchar>:
#if defined(__ARMCC_VERSION) || defined(__ICCARM__)
int fputc(int ch, __attribute__((unused))FILE *f)
#elif __GNUC__
int __io_putchar(int ch)
#endif
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001018:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <__io_putchar+0x30>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	2394      	movs	r3, #148	@ 0x94
 8001020:	fb02 f303 	mul.w	r3, r2, r3
 8001024:	4a07      	ldr	r2, [pc, #28]	@ (8001044 <__io_putchar+0x34>)
 8001026:	1898      	adds	r0, r3, r2
 8001028:	1d39      	adds	r1, r7, #4
 800102a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102e:	2201      	movs	r2, #1
 8001030:	f002 fd2e 	bl	8003a90 <HAL_UART_Transmit>
  return ch;
 8001034:	687b      	ldr	r3, [r7, #4]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000258 	.word	0x20000258
 8001044:	20000124 	.word	0x20000124

08001048 <MX_LPUART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	891b      	ldrh	r3, [r3, #8]
 8001066:	461a      	mov	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	895b      	ldrh	r3, [r3, #10]
 8001070:	461a      	mov	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	220c      	movs	r2, #12
 800107a:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	899b      	ldrh	r3, [r3, #12]
 8001080:	461a      	mov	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800108c:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f002 fc9e 	bl	80039dc <HAL_UART_Init>
 80010a0:	4603      	mov	r3, r0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <MX_USART3_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	891b      	ldrh	r3, [r3, #8]
 80010c8:	461a      	mov	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	895b      	ldrh	r3, [r3, #10]
 80010d2:	461a      	mov	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	220c      	movs	r2, #12
 80010dc:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	899b      	ldrh	r3, [r3, #12]
 80010e2:	461a      	mov	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80010ee:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f002 fc6d 	bl	80039dc <HAL_UART_Init>
 8001102:	4603      	mov	r3, r0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001110:	2000      	movs	r0, #0
 8001112:	f7ff ff07 	bl	8000f24 <BSP_PB_Callback>
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b098      	sub	sp, #96	@ 0x60
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init;
  GPIO_TypeDef    *COM_TX_PORT[COMn] = {COM1_TX_GPIO_PORT, COM2_TX_GPIO_PORT};
 8001124:	4a60      	ldr	r2, [pc, #384]	@ (80012a8 <UART_MspInit+0x18c>)
 8001126:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800112a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800112e:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIO_TypeDef    *COM_RX_PORT[COMn] = {COM1_RX_GPIO_PORT, COM2_RX_GPIO_PORT};
 8001132:	4a5d      	ldr	r2, [pc, #372]	@ (80012a8 <UART_MspInit+0x18c>)
 8001134:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001138:	e892 0003 	ldmia.w	r2, {r0, r1}
 800113c:	e883 0003 	stmia.w	r3, {r0, r1}
  uint16_t         COM_TX_PIN[COMn]  = {COM1_TX_PIN, COM2_TX_PIN};
 8001140:	4b5a      	ldr	r3, [pc, #360]	@ (80012ac <UART_MspInit+0x190>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	637b      	str	r3, [r7, #52]	@ 0x34
  uint16_t         COM_RX_PIN[COMn]  = {COM1_RX_PIN, COM2_RX_PIN};
 8001146:	4b5a      	ldr	r3, [pc, #360]	@ (80012b0 <UART_MspInit+0x194>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t          COM_TX_AF[COMn]   = {COM1_TX_AF, COM2_TX_AF};
 800114c:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001150:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint8_t          COM_RX_AF[COMn]   = {COM1_RX_AF, COM2_RX_AF};
 8001152:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001156:	853b      	strh	r3, [r7, #40]	@ 0x28
  COM_TypeDef      COM;

  /* Get COM according instance */
  COM = (huart->Instance == COM1_UART) ? COM1 : COM2;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a55      	ldr	r2, [pc, #340]	@ (80012b4 <UART_MspInit+0x198>)
 800115e:	4293      	cmp	r3, r2
 8001160:	bf14      	ite	ne
 8001162:	2301      	movne	r3, #1
 8001164:	2300      	moveq	r3, #0
 8001166:	b2db      	uxtb	r3, r3
 8001168:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  /* Enable COM and GPIO clocks */
  if (COM == COM1)
 800116c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001170:	2b00      	cmp	r3, #0
 8001172:	d132      	bne.n	80011da <UART_MspInit+0xbe>
  {
    /* Enable VddIO2 for GPIOG */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001174:	4b50      	ldr	r3, [pc, #320]	@ (80012b8 <UART_MspInit+0x19c>)
 8001176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001178:	4a4f      	ldr	r2, [pc, #316]	@ (80012b8 <UART_MspInit+0x19c>)
 800117a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800117e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001180:	4b4d      	ldr	r3, [pc, #308]	@ (80012b8 <UART_MspInit+0x19c>)
 8001182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001184:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001188:	627b      	str	r3, [r7, #36]	@ 0x24
 800118a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_PWREx_EnableVddIO2();
 800118c:	f000 fcfa 	bl	8001b84 <HAL_PWREx_EnableVddIO2>
    COM1_TX_GPIO_CLK_ENABLE();
 8001190:	4b49      	ldr	r3, [pc, #292]	@ (80012b8 <UART_MspInit+0x19c>)
 8001192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001194:	4a48      	ldr	r2, [pc, #288]	@ (80012b8 <UART_MspInit+0x19c>)
 8001196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800119a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119c:	4b46      	ldr	r3, [pc, #280]	@ (80012b8 <UART_MspInit+0x19c>)
 800119e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011a4:	623b      	str	r3, [r7, #32]
 80011a6:	6a3b      	ldr	r3, [r7, #32]
    COM1_RX_GPIO_CLK_ENABLE();
 80011a8:	4b43      	ldr	r3, [pc, #268]	@ (80012b8 <UART_MspInit+0x19c>)
 80011aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ac:	4a42      	ldr	r2, [pc, #264]	@ (80012b8 <UART_MspInit+0x19c>)
 80011ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b4:	4b40      	ldr	r3, [pc, #256]	@ (80012b8 <UART_MspInit+0x19c>)
 80011b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011bc:	61fb      	str	r3, [r7, #28]
 80011be:	69fb      	ldr	r3, [r7, #28]
    COM1_CLK_ENABLE();
 80011c0:	4b3d      	ldr	r3, [pc, #244]	@ (80012b8 <UART_MspInit+0x19c>)
 80011c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011c4:	4a3c      	ldr	r2, [pc, #240]	@ (80012b8 <UART_MspInit+0x19c>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80011cc:	4b3a      	ldr	r3, [pc, #232]	@ (80012b8 <UART_MspInit+0x19c>)
 80011ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	61bb      	str	r3, [r7, #24]
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	e023      	b.n	8001222 <UART_MspInit+0x106>
  }
  else /* COM = COM2 */
  {
    COM2_TX_GPIO_CLK_ENABLE();
 80011da:	4b37      	ldr	r3, [pc, #220]	@ (80012b8 <UART_MspInit+0x19c>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	4a36      	ldr	r2, [pc, #216]	@ (80012b8 <UART_MspInit+0x19c>)
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e6:	4b34      	ldr	r3, [pc, #208]	@ (80012b8 <UART_MspInit+0x19c>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	697b      	ldr	r3, [r7, #20]
    COM2_RX_GPIO_CLK_ENABLE();
 80011f2:	4b31      	ldr	r3, [pc, #196]	@ (80012b8 <UART_MspInit+0x19c>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	4a30      	ldr	r2, [pc, #192]	@ (80012b8 <UART_MspInit+0x19c>)
 80011f8:	f043 0308 	orr.w	r3, r3, #8
 80011fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fe:	4b2e      	ldr	r3, [pc, #184]	@ (80012b8 <UART_MspInit+0x19c>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
    COM2_CLK_ENABLE();
 800120a:	4b2b      	ldr	r3, [pc, #172]	@ (80012b8 <UART_MspInit+0x19c>)
 800120c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800120e:	4a2a      	ldr	r2, [pc, #168]	@ (80012b8 <UART_MspInit+0x19c>)
 8001210:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001214:	6593      	str	r3, [r2, #88]	@ 0x58
 8001216:	4b28      	ldr	r3, [pc, #160]	@ (80012b8 <UART_MspInit+0x19c>)
 8001218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
  }

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
 8001222:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	3360      	adds	r3, #96	@ 0x60
 800122a:	443b      	add	r3, r7
 800122c:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8001230:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	64fb      	str	r3, [r7, #76]	@ 0x4c
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001236:	2302      	movs	r3, #2
 8001238:	657b      	str	r3, [r7, #84]	@ 0x54
  GPIO_Init.Pull      = GPIO_PULLUP;
 800123a:	2301      	movs	r3, #1
 800123c:	653b      	str	r3, [r7, #80]	@ 0x50
  GPIO_Init.Alternate = COM_TX_AF[COM];
 800123e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001242:	3360      	adds	r3, #96	@ 0x60
 8001244:	443b      	add	r3, r7
 8001246:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 800124a:	65bb      	str	r3, [r7, #88]	@ 0x58
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
 800124c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	3360      	adds	r3, #96	@ 0x60
 8001254:	443b      	add	r3, r7
 8001256:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800125a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f000 fa5d 	bl	8001720 <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
 8001266:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	3360      	adds	r3, #96	@ 0x60
 800126e:	443b      	add	r3, r7
 8001270:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8001274:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_Init.Alternate = COM_RX_AF[COM];
 8001276:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800127a:	3360      	adds	r3, #96	@ 0x60
 800127c:	443b      	add	r3, r7
 800127e:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001282:	65bb      	str	r3, [r7, #88]	@ 0x58
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
 8001284:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	3360      	adds	r3, #96	@ 0x60
 800128c:	443b      	add	r3, r7
 800128e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001292:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f000 fa41 	bl	8001720 <HAL_GPIO_Init>
}
 800129e:	bf00      	nop
 80012a0:	3760      	adds	r7, #96	@ 0x60
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	080055dc 	.word	0x080055dc
 80012ac:	080055e4 	.word	0x080055e4
 80012b0:	080055e8 	.word	0x080055e8
 80012b4:	40008000 	.word	0x40008000
 80012b8:	40021000 	.word	0x40021000

080012bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80012c6:	2004      	movs	r0, #4
 80012c8:	f000 f962 	bl	8001590 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80012cc:	f7ff fc5a 	bl	8000b84 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012d0:	2000      	movs	r0, #0
 80012d2:	f000 f80d 	bl	80012f0 <HAL_InitTick>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	71fb      	strb	r3, [r7, #7]
 80012e0:	e001      	b.n	80012e6 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012e2:	f7ff fafb 	bl	80008dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012e6:	79fb      	ldrb	r3, [r7, #7]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012fc:	4b17      	ldr	r3, [pc, #92]	@ (800135c <HAL_InitTick+0x6c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d023      	beq.n	800134c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001304:	4b16      	ldr	r3, [pc, #88]	@ (8001360 <HAL_InitTick+0x70>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b14      	ldr	r3, [pc, #80]	@ (800135c <HAL_InitTick+0x6c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4619      	mov	r1, r3
 800130e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001312:	fbb3 f3f1 	udiv	r3, r3, r1
 8001316:	fbb2 f3f3 	udiv	r3, r2, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f96b 	bl	80015f6 <HAL_SYSTICK_Config>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10f      	bne.n	8001346 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b07      	cmp	r3, #7
 800132a:	d809      	bhi.n	8001340 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132c:	2200      	movs	r2, #0
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f000 f937 	bl	80015a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001338:	4a0a      	ldr	r2, [pc, #40]	@ (8001364 <HAL_InitTick+0x74>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e007      	b.n	8001350 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
 8001344:	e004      	b.n	8001350 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	73fb      	strb	r3, [r7, #15]
 800134a:	e001      	b.n	8001350 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001350:	7bfb      	ldrb	r3, [r7, #15]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000030 	.word	0x20000030
 8001360:	20000000 	.word	0x20000000
 8001364:	2000002c 	.word	0x2000002c

08001368 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <HAL_IncTick+0x20>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	4b06      	ldr	r3, [pc, #24]	@ (800138c <HAL_IncTick+0x24>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4413      	add	r3, r2
 8001378:	4a04      	ldr	r2, [pc, #16]	@ (800138c <HAL_IncTick+0x24>)
 800137a:	6013      	str	r3, [r2, #0]
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000030 	.word	0x20000030
 800138c:	2000025c 	.word	0x2000025c

08001390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return uwTick;
 8001394:	4b03      	ldr	r3, [pc, #12]	@ (80013a4 <HAL_GetTick+0x14>)
 8001396:	681b      	ldr	r3, [r3, #0]
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	2000025c 	.word	0x2000025c

080013a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b0:	f7ff ffee 	bl	8001390 <HAL_GetTick>
 80013b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c0:	d005      	beq.n	80013ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013c2:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <HAL_Delay+0x44>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4413      	add	r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ce:	bf00      	nop
 80013d0:	f7ff ffde 	bl	8001390 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d8f7      	bhi.n	80013d0 <HAL_Delay+0x28>
  {
  }
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000030 	.word	0x20000030

080013f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001400:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <__NVIC_SetPriorityGrouping+0x44>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800140c:	4013      	ands	r3, r2
 800140e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001418:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800141c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001422:	4a04      	ldr	r2, [pc, #16]	@ (8001434 <__NVIC_SetPriorityGrouping+0x44>)
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	60d3      	str	r3, [r2, #12]
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800143c:	4b04      	ldr	r3, [pc, #16]	@ (8001450 <__NVIC_GetPriorityGrouping+0x18>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	0a1b      	lsrs	r3, r3, #8
 8001442:	f003 0307 	and.w	r3, r3, #7
}
 8001446:	4618      	mov	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	2b00      	cmp	r3, #0
 8001464:	db0b      	blt.n	800147e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	f003 021f 	and.w	r2, r3, #31
 800146c:	4907      	ldr	r1, [pc, #28]	@ (800148c <__NVIC_EnableIRQ+0x38>)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	095b      	lsrs	r3, r3, #5
 8001474:	2001      	movs	r0, #1
 8001476:	fa00 f202 	lsl.w	r2, r0, r2
 800147a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000e100 	.word	0xe000e100

08001490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	6039      	str	r1, [r7, #0]
 800149a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	db0a      	blt.n	80014ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	490c      	ldr	r1, [pc, #48]	@ (80014dc <__NVIC_SetPriority+0x4c>)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	0152      	lsls	r2, r2, #5
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	440b      	add	r3, r1
 80014b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b8:	e00a      	b.n	80014d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4908      	ldr	r1, [pc, #32]	@ (80014e0 <__NVIC_SetPriority+0x50>)
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	3b04      	subs	r3, #4
 80014c8:	0152      	lsls	r2, r2, #5
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	440b      	add	r3, r1
 80014ce:	761a      	strb	r2, [r3, #24]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000e100 	.word	0xe000e100
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b089      	sub	sp, #36	@ 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f1c3 0307 	rsb	r3, r3, #7
 80014fe:	2b03      	cmp	r3, #3
 8001500:	bf28      	it	cs
 8001502:	2303      	movcs	r3, #3
 8001504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3303      	adds	r3, #3
 800150a:	2b06      	cmp	r3, #6
 800150c:	d902      	bls.n	8001514 <NVIC_EncodePriority+0x30>
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3b04      	subs	r3, #4
 8001512:	e000      	b.n	8001516 <NVIC_EncodePriority+0x32>
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	f04f 32ff 	mov.w	r2, #4294967295
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43da      	mvns	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	401a      	ands	r2, r3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800152c:	f04f 31ff 	mov.w	r1, #4294967295
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa01 f303 	lsl.w	r3, r1, r3
 8001536:	43d9      	mvns	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	4313      	orrs	r3, r2
         );
}
 800153e:	4618      	mov	r0, r3
 8001540:	3724      	adds	r7, #36	@ 0x24
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800155c:	d301      	bcc.n	8001562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800155e:	2301      	movs	r3, #1
 8001560:	e00f      	b.n	8001582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001562:	4a0a      	ldr	r2, [pc, #40]	@ (800158c <SysTick_Config+0x40>)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3b01      	subs	r3, #1
 8001568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800156a:	2107      	movs	r1, #7
 800156c:	f04f 30ff 	mov.w	r0, #4294967295
 8001570:	f7ff ff8e 	bl	8001490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001574:	4b05      	ldr	r3, [pc, #20]	@ (800158c <SysTick_Config+0x40>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157a:	4b04      	ldr	r3, [pc, #16]	@ (800158c <SysTick_Config+0x40>)
 800157c:	2207      	movs	r2, #7
 800157e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	e000e010 	.word	0xe000e010

08001590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ff29 	bl	80013f0 <__NVIC_SetPriorityGrouping>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
 80015b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015b4:	f7ff ff40 	bl	8001438 <__NVIC_GetPriorityGrouping>
 80015b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	6978      	ldr	r0, [r7, #20]
 80015c0:	f7ff ff90 	bl	80014e4 <NVIC_EncodePriority>
 80015c4:	4602      	mov	r2, r0
 80015c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ca:	4611      	mov	r1, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff5f 	bl	8001490 <__NVIC_SetPriority>
}
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff33 	bl	8001454 <__NVIC_EnableIRQ>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ffa4 	bl	800154c <SysTick_Config>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800160e:	b480      	push	{r7}
 8001610:	b087      	sub	sp, #28
 8001612:	af00      	add	r7, sp, #0
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	460b      	mov	r3, r1
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001620:	7afb      	ldrb	r3, [r7, #11]
 8001622:	2b02      	cmp	r3, #2
 8001624:	d011      	beq.n	800164a <HAL_EXTI_RegisterCallback+0x3c>
 8001626:	2b02      	cmp	r3, #2
 8001628:	dc13      	bgt.n	8001652 <HAL_EXTI_RegisterCallback+0x44>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d002      	beq.n	8001634 <HAL_EXTI_RegisterCallback+0x26>
 800162e:	2b01      	cmp	r3, #1
 8001630:	d007      	beq.n	8001642 <HAL_EXTI_RegisterCallback+0x34>
 8001632:	e00e      	b.n	8001652 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	609a      	str	r2, [r3, #8]
      break;
 8001640:	e00a      	b.n	8001658 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	605a      	str	r2, [r3, #4]
      break;
 8001648:	e006      	b.n	8001658 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	609a      	str	r2, [r3, #8]
      break;
 8001650:	e002      	b.n	8001658 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	75fb      	strb	r3, [r7, #23]
      break;
 8001656:	bf00      	nop
  }

  return status;
 8001658:	7dfb      	ldrb	r3, [r7, #23]
}
 800165a:	4618      	mov	r0, r3
 800165c:	371c      	adds	r7, #28
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	6039      	str	r1, [r7, #0]
  /* Check null pointer */
  if(hexti == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e003      	b.n	8001682 <HAL_EXTI_GetHandle+0x1c>

  /* Check parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Store line number as handle private field */
  hexti->Line = ExtiLine;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	0c1b      	lsrs	r3, r3, #16
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 031f 	and.w	r3, r3, #31
 80016ac:	2201      	movs	r2, #1
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	015a      	lsls	r2, r3, #5
 80016b8:	4b17      	ldr	r3, [pc, #92]	@ (8001718 <HAL_EXTI_IRQHandler+0x88>)
 80016ba:	4413      	add	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d009      	beq.n	80016e2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->RisingCallback != NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	015a      	lsls	r2, r3, #5
 80016e6:	4b0d      	ldr	r3, [pc, #52]	@ (800171c <HAL_EXTI_IRQHandler+0x8c>)
 80016e8:	4413      	add	r3, r2
 80016ea:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4013      	ands	r3, r2
 80016f4:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d009      	beq.n	8001710 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->FallingCallback != NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	4798      	blx	r3
    }
  }
}
 8001710:	bf00      	nop
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	4002f40c 	.word	0x4002f40c
 800171c:	4002f410 	.word	0x4002f410

08001720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001720:	b480      	push	{r7}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800172e:	e158      	b.n	80019e2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	2101      	movs	r1, #1
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	4013      	ands	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 814a 	beq.w	80019dc <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	2b01      	cmp	r3, #1
 8001752:	d005      	beq.n	8001760 <HAL_GPIO_Init+0x40>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d130      	bne.n	80017c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001796:	2201      	movs	r2, #1
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	f003 0201 	and.w	r2, r3, #1
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d017      	beq.n	80017fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	2203      	movs	r2, #3
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d123      	bne.n	8001852 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	08da      	lsrs	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3208      	adds	r2, #8
 8001812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001816:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	220f      	movs	r2, #15
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4013      	ands	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	691a      	ldr	r2, [r3, #16]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	08da      	lsrs	r2, r3, #3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3208      	adds	r2, #8
 800184c:	6939      	ldr	r1, [r7, #16]
 800184e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	2203      	movs	r2, #3
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 0203 	and.w	r2, r3, #3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 80a4 	beq.w	80019dc <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8001894:	4a5a      	ldr	r2, [pc, #360]	@ (8001a00 <HAL_GPIO_Init+0x2e0>)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	089b      	lsrs	r3, r3, #2
 800189a:	3318      	adds	r3, #24
 800189c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	220f      	movs	r2, #15
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a52      	ldr	r2, [pc, #328]	@ (8001a04 <HAL_GPIO_Init+0x2e4>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d025      	beq.n	800190c <HAL_GPIO_Init+0x1ec>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a51      	ldr	r2, [pc, #324]	@ (8001a08 <HAL_GPIO_Init+0x2e8>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d01f      	beq.n	8001908 <HAL_GPIO_Init+0x1e8>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a50      	ldr	r2, [pc, #320]	@ (8001a0c <HAL_GPIO_Init+0x2ec>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d019      	beq.n	8001904 <HAL_GPIO_Init+0x1e4>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a4f      	ldr	r2, [pc, #316]	@ (8001a10 <HAL_GPIO_Init+0x2f0>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d013      	beq.n	8001900 <HAL_GPIO_Init+0x1e0>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a4e      	ldr	r2, [pc, #312]	@ (8001a14 <HAL_GPIO_Init+0x2f4>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d00d      	beq.n	80018fc <HAL_GPIO_Init+0x1dc>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a4d      	ldr	r2, [pc, #308]	@ (8001a18 <HAL_GPIO_Init+0x2f8>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d007      	beq.n	80018f8 <HAL_GPIO_Init+0x1d8>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a4c      	ldr	r2, [pc, #304]	@ (8001a1c <HAL_GPIO_Init+0x2fc>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d101      	bne.n	80018f4 <HAL_GPIO_Init+0x1d4>
 80018f0:	2306      	movs	r3, #6
 80018f2:	e00c      	b.n	800190e <HAL_GPIO_Init+0x1ee>
 80018f4:	2307      	movs	r3, #7
 80018f6:	e00a      	b.n	800190e <HAL_GPIO_Init+0x1ee>
 80018f8:	2305      	movs	r3, #5
 80018fa:	e008      	b.n	800190e <HAL_GPIO_Init+0x1ee>
 80018fc:	2304      	movs	r3, #4
 80018fe:	e006      	b.n	800190e <HAL_GPIO_Init+0x1ee>
 8001900:	2303      	movs	r3, #3
 8001902:	e004      	b.n	800190e <HAL_GPIO_Init+0x1ee>
 8001904:	2302      	movs	r3, #2
 8001906:	e002      	b.n	800190e <HAL_GPIO_Init+0x1ee>
 8001908:	2301      	movs	r3, #1
 800190a:	e000      	b.n	800190e <HAL_GPIO_Init+0x1ee>
 800190c:	2300      	movs	r3, #0
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	f002 0203 	and.w	r2, r2, #3
 8001914:	00d2      	lsls	r2, r2, #3
 8001916:	4093      	lsls	r3, r2
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800191e:	4938      	ldr	r1, [pc, #224]	@ (8001a00 <HAL_GPIO_Init+0x2e0>)
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	089b      	lsrs	r3, r3, #2
 8001924:	3318      	adds	r3, #24
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800192c:	4b34      	ldr	r3, [pc, #208]	@ (8001a00 <HAL_GPIO_Init+0x2e0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	43db      	mvns	r3, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001950:	4a2b      	ldr	r2, [pc, #172]	@ (8001a00 <HAL_GPIO_Init+0x2e0>)
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001956:	4b2a      	ldr	r3, [pc, #168]	@ (8001a00 <HAL_GPIO_Init+0x2e0>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4313      	orrs	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800197a:	4a21      	ldr	r2, [pc, #132]	@ (8001a00 <HAL_GPIO_Init+0x2e0>)
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001980:	4b1f      	ldr	r3, [pc, #124]	@ (8001a00 <HAL_GPIO_Init+0x2e0>)
 8001982:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	43db      	mvns	r3, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4013      	ands	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019a6:	4a16      	ldr	r2, [pc, #88]	@ (8001a00 <HAL_GPIO_Init+0x2e0>)
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 80019ae:	4b14      	ldr	r3, [pc, #80]	@ (8001a00 <HAL_GPIO_Init+0x2e0>)
 80019b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001a00 <HAL_GPIO_Init+0x2e0>)
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	3301      	adds	r3, #1
 80019e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	fa22 f303 	lsr.w	r3, r2, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f47f ae9f 	bne.w	8001730 <HAL_GPIO_Init+0x10>
  }
}
 80019f2:	bf00      	nop
 80019f4:	bf00      	nop
 80019f6:	371c      	adds	r7, #28
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	4002f400 	.word	0x4002f400
 8001a04:	42020000 	.word	0x42020000
 8001a08:	42020400 	.word	0x42020400
 8001a0c:	42020800 	.word	0x42020800
 8001a10:	42020c00 	.word	0x42020c00
 8001a14:	42021000 	.word	0x42021000
 8001a18:	42021400 	.word	0x42021400
 8001a1c:	42021800 	.word	0x42021800

08001a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	807b      	strh	r3, [r7, #2]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a30:	787b      	ldrb	r3, [r7, #1]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a36:	887a      	ldrh	r2, [r7, #2]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a3c:	e002      	b.n	8001a44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a3e:	887a      	ldrh	r2, [r7, #2]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d002      	beq.n	8001a6e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	73fb      	strb	r3, [r7, #15]
 8001a6c:	e007      	b.n	8001a7e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001a6e:	4b07      	ldr	r3, [pc, #28]	@ (8001a8c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 0204 	bic.w	r2, r3, #4
 8001a76:	4905      	ldr	r1, [pc, #20]	@ (8001a8c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	40030400 	.word	0x40030400

08001a90 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001a94:	4b05      	ldr	r3, [pc, #20]	@ (8001aac <HAL_ICACHE_Enable+0x1c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a04      	ldr	r2, [pc, #16]	@ (8001aac <HAL_ICACHE_Enable+0x1c>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	40030400 	.word	0x40030400

08001ab0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001ab4:	4b04      	ldr	r3, [pc, #16]	@ (8001ac8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40007000 	.word	0x40007000

08001acc <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8001ad4:	4b27      	ldr	r3, [pc, #156]	@ (8001b74 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001adc:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8001ade:	f000 f871 	bl	8001bc4 <HAL_PWREx_SMPS_GetEffectiveMode>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ae8:	d101      	bne.n	8001aee <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e03e      	b.n	8001b6c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8001aee:	4b21      	ldr	r3, [pc, #132]	@ (8001b74 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001af6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001afa:	d101      	bne.n	8001b00 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e035      	b.n	8001b6c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d101      	bne.n	8001b0c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	e02f      	b.n	8001b6c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001b0c:	4b19      	ldr	r3, [pc, #100]	@ (8001b74 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8001b14:	4917      	ldr	r1, [pc, #92]	@ (8001b74 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8001b1c:	4b16      	ldr	r3, [pc, #88]	@ (8001b78 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	095b      	lsrs	r3, r3, #5
 8001b22:	4a16      	ldr	r2, [pc, #88]	@ (8001b7c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001b24:	fba2 2303 	umull	r2, r3, r2, r3
 8001b28:	09db      	lsrs	r3, r3, #7
 8001b2a:	2232      	movs	r2, #50	@ 0x32
 8001b2c:	fb02 f303 	mul.w	r3, r2, r3
 8001b30:	4a13      	ldr	r2, [pc, #76]	@ (8001b80 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	08db      	lsrs	r3, r3, #3
 8001b38:	3301      	adds	r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b3c:	e002      	b.n	8001b44 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b50:	d102      	bne.n	8001b58 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f2      	bne.n	8001b3e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b58:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b64:	d101      	bne.n	8001b6a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e000      	b.n	8001b6c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40007000 	.word	0x40007000
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	0a7c5ac5 	.word	0x0a7c5ac5
 8001b80:	cccccccd 	.word	0xcccccccd

08001b84 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001b88:	4b05      	ldr	r3, [pc, #20]	@ (8001ba0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ba0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001b8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b92:	6053      	str	r3, [r2, #4]
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40007000 	.word	0x40007000

08001ba4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ba8:	4b05      	ldr	r3, [pc, #20]	@ (8001bc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	4a04      	ldr	r2, [pc, #16]	@ (8001bc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001bae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bb2:	6093      	str	r3, [r2, #8]
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40007000 	.word	0x40007000

08001bc4 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8001bca:	4b0f      	ldr	r3, [pc, #60]	@ (8001c08 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8001bda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	e00a      	b.n	8001bf8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d103      	bne.n	8001bf4 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8001bec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	e001      	b.n	8001bf8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8001bf8:	687b      	ldr	r3, [r7, #4]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40007000 	.word	0x40007000

08001c0c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d102      	bne.n	8001c20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	f000 bcc2 	b.w	80025a4 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c20:	4b99      	ldr	r3, [pc, #612]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 030c 	and.w	r3, r3, #12
 8001c28:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c2a:	4b97      	ldr	r3, [pc, #604]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0310 	and.w	r3, r3, #16
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 80e9 	beq.w	8001e14 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d006      	beq.n	8001c56 <HAL_RCC_OscConfig+0x4a>
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	f040 8083 	bne.w	8001d56 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d17f      	bne.n	8001d56 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c56:	4b8c      	ldr	r3, [pc, #560]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d006      	beq.n	8001c70 <HAL_RCC_OscConfig+0x64>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d102      	bne.n	8001c70 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	f000 bc9a 	b.w	80025a4 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c74:	4b84      	ldr	r3, [pc, #528]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d004      	beq.n	8001c8a <HAL_RCC_OscConfig+0x7e>
 8001c80:	4b81      	ldr	r3, [pc, #516]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c88:	e005      	b.n	8001c96 <HAL_RCC_OscConfig+0x8a>
 8001c8a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d224      	bcs.n	8001ce4 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 fe9c 	bl	80029dc <RCC_SetFlashLatencyFromMSIRange>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d002      	beq.n	8001cb0 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	f000 bc7a 	b.w	80025a4 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cb0:	4b75      	ldr	r3, [pc, #468]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a74      	ldr	r2, [pc, #464]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001cb6:	f043 0308 	orr.w	r3, r3, #8
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	4b72      	ldr	r3, [pc, #456]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc8:	496f      	ldr	r1, [pc, #444]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cce:	4b6e      	ldr	r3, [pc, #440]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	021b      	lsls	r3, r3, #8
 8001cdc:	496a      	ldr	r1, [pc, #424]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	604b      	str	r3, [r1, #4]
 8001ce2:	e026      	b.n	8001d32 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ce4:	4b68      	ldr	r3, [pc, #416]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a67      	ldr	r2, [pc, #412]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001cea:	f043 0308 	orr.w	r3, r3, #8
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	4b65      	ldr	r3, [pc, #404]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfc:	4962      	ldr	r1, [pc, #392]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d02:	4b61      	ldr	r3, [pc, #388]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	495d      	ldr	r1, [pc, #372]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10a      	bne.n	8001d32 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 fe5b 	bl	80029dc <RCC_SetFlashLatencyFromMSIRange>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	f000 bc39 	b.w	80025a4 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001d32:	f000 fe17 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 8001d36:	4603      	mov	r3, r0
 8001d38:	4a54      	ldr	r2, [pc, #336]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001d3a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d3c:	4b54      	ldr	r3, [pc, #336]	@ (8001e90 <HAL_RCC_OscConfig+0x284>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fad5 	bl	80012f0 <HAL_InitTick>
 8001d46:	4603      	mov	r3, r0
 8001d48:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d060      	beq.n	8001e12 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	f000 bc27 	b.w	80025a4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d039      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a49      	ldr	r2, [pc, #292]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d6a:	f7ff fb11 	bl	8001390 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d70:	e00f      	b.n	8001d92 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d72:	f7ff fb0d 	bl	8001390 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d908      	bls.n	8001d92 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d80:	4b41      	ldr	r3, [pc, #260]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d102      	bne.n	8001d92 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	f000 bc09 	b.w	80025a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d92:	4b3d      	ldr	r3, [pc, #244]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0e9      	beq.n	8001d72 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d9e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a39      	ldr	r2, [pc, #228]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001da4:	f043 0308 	orr.w	r3, r3, #8
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	4b37      	ldr	r3, [pc, #220]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db6:	4934      	ldr	r1, [pc, #208]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dbc:	4b32      	ldr	r3, [pc, #200]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	021b      	lsls	r3, r3, #8
 8001dca:	492f      	ldr	r1, [pc, #188]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	604b      	str	r3, [r1, #4]
 8001dd0:	e020      	b.n	8001e14 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dd2:	4b2d      	ldr	r3, [pc, #180]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a2c      	ldr	r2, [pc, #176]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dde:	f7ff fad7 	bl	8001390 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001de4:	e00e      	b.n	8001e04 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001de6:	f7ff fad3 	bl	8001390 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d907      	bls.n	8001e04 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001df4:	4b24      	ldr	r3, [pc, #144]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e3cf      	b.n	80025a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e04:	4b20      	ldr	r3, [pc, #128]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1ea      	bne.n	8001de6 <HAL_RCC_OscConfig+0x1da>
 8001e10:	e000      	b.n	8001e14 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e12:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d07e      	beq.n	8001f1e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d005      	beq.n	8001e32 <HAL_RCC_OscConfig+0x226>
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	2b0c      	cmp	r3, #12
 8001e2a:	d10e      	bne.n	8001e4a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d10b      	bne.n	8001e4a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e32:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d06e      	beq.n	8001f1c <HAL_RCC_OscConfig+0x310>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d16a      	bne.n	8001f1c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e3ac      	b.n	80025a4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e52:	d106      	bne.n	8001e62 <HAL_RCC_OscConfig+0x256>
 8001e54:	4b0c      	ldr	r3, [pc, #48]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a0b      	ldr	r2, [pc, #44]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001e5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	e024      	b.n	8001eac <HAL_RCC_OscConfig+0x2a0>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e6a:	d113      	bne.n	8001e94 <HAL_RCC_OscConfig+0x288>
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a05      	ldr	r2, [pc, #20]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001e72:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4b03      	ldr	r3, [pc, #12]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a02      	ldr	r2, [pc, #8]	@ (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001e7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	e012      	b.n	8001eac <HAL_RCC_OscConfig+0x2a0>
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	2000002c 	.word	0x2000002c
 8001e94:	4b8b      	ldr	r3, [pc, #556]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a8a      	ldr	r2, [pc, #552]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8001e9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	4b88      	ldr	r3, [pc, #544]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a87      	ldr	r2, [pc, #540]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8001ea6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d019      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7ff fa6c 	bl	8001390 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eba:	e00e      	b.n	8001eda <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ebc:	f7ff fa68 	bl	8001390 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b64      	cmp	r3, #100	@ 0x64
 8001ec8:	d907      	bls.n	8001eda <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eca:	4b7e      	ldr	r3, [pc, #504]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e364      	b.n	80025a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eda:	4b7a      	ldr	r3, [pc, #488]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0ea      	beq.n	8001ebc <HAL_RCC_OscConfig+0x2b0>
 8001ee6:	e01a      	b.n	8001f1e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee8:	f7ff fa52 	bl	8001390 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eee:	e00e      	b.n	8001f0e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef0:	f7ff fa4e 	bl	8001390 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b64      	cmp	r3, #100	@ 0x64
 8001efc:	d907      	bls.n	8001f0e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001efe:	4b71      	ldr	r3, [pc, #452]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e34a      	b.n	80025a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f0e:	4b6d      	ldr	r3, [pc, #436]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1ea      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x2e4>
 8001f1a:	e000      	b.n	8001f1e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d06c      	beq.n	8002004 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d005      	beq.n	8001f3c <HAL_RCC_OscConfig+0x330>
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	2b0c      	cmp	r3, #12
 8001f34:	d119      	bne.n	8001f6a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d116      	bne.n	8001f6a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f3c:	4b61      	ldr	r3, [pc, #388]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_RCC_OscConfig+0x348>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e327      	b.n	80025a4 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f54:	4b5b      	ldr	r3, [pc, #364]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	061b      	lsls	r3, r3, #24
 8001f62:	4958      	ldr	r1, [pc, #352]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f68:	e04c      	b.n	8002004 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d029      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f72:	4b54      	ldr	r3, [pc, #336]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a53      	ldr	r2, [pc, #332]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8001f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7e:	f7ff fa07 	bl	8001390 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f84:	e00e      	b.n	8001fa4 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f86:	f7ff fa03 	bl	8001390 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d907      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f94:	4b4b      	ldr	r3, [pc, #300]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e2ff      	b.n	80025a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fa4:	4b47      	ldr	r3, [pc, #284]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0ea      	beq.n	8001f86 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb0:	4b44      	ldr	r3, [pc, #272]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	061b      	lsls	r3, r3, #24
 8001fbe:	4941      	ldr	r1, [pc, #260]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	604b      	str	r3, [r1, #4]
 8001fc4:	e01e      	b.n	8002004 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc6:	4b3f      	ldr	r3, [pc, #252]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a3e      	ldr	r2, [pc, #248]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8001fcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd2:	f7ff f9dd 	bl	8001390 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fd8:	e00e      	b.n	8001ff8 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fda:	f7ff f9d9 	bl	8001390 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d907      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fe8:	4b36      	ldr	r3, [pc, #216]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e2d5      	b.n	80025a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ff8:	4b32      	ldr	r3, [pc, #200]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1ea      	bne.n	8001fda <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d062      	beq.n	80020d6 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d038      	beq.n	800208a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d108      	bne.n	8002032 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002020:	4b28      	ldr	r3, [pc, #160]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8002022:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002026:	4a27      	ldr	r2, [pc, #156]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8002028:	f023 0310 	bic.w	r3, r3, #16
 800202c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002030:	e007      	b.n	8002042 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002032:	4b24      	ldr	r3, [pc, #144]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8002034:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002038:	4a22      	ldr	r2, [pc, #136]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 800203a:	f043 0310 	orr.w	r3, r3, #16
 800203e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002042:	4b20      	ldr	r3, [pc, #128]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8002044:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002048:	4a1e      	ldr	r2, [pc, #120]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002052:	f7ff f99d 	bl	8001390 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002058:	e00f      	b.n	800207a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800205a:	f7ff f999 	bl	8001390 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b07      	cmp	r3, #7
 8002066:	d908      	bls.n	800207a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002068:	4b16      	ldr	r3, [pc, #88]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 800206a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e294      	b.n	80025a4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800207a:	4b12      	ldr	r3, [pc, #72]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 800207c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0e8      	beq.n	800205a <HAL_RCC_OscConfig+0x44e>
 8002088:	e025      	b.n	80020d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800208a:	4b0e      	ldr	r3, [pc, #56]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 800208c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002090:	4a0c      	ldr	r2, [pc, #48]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 8002092:	f023 0301 	bic.w	r3, r3, #1
 8002096:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209a:	f7ff f979 	bl	8001390 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020a0:	e012      	b.n	80020c8 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a2:	f7ff f975 	bl	8001390 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b07      	cmp	r3, #7
 80020ae:	d90b      	bls.n	80020c8 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020b0:	4b04      	ldr	r3, [pc, #16]	@ (80020c4 <HAL_RCC_OscConfig+0x4b8>)
 80020b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d004      	beq.n	80020c8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e270      	b.n	80025a4 <HAL_RCC_OscConfig+0x998>
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020c8:	4ba8      	ldr	r3, [pc, #672]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 80020ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1e5      	bne.n	80020a2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 812d 	beq.w	800233e <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e4:	2300      	movs	r3, #0
 80020e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020e8:	4ba0      	ldr	r3, [pc, #640]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 80020ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10d      	bne.n	8002110 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f4:	4b9d      	ldr	r3, [pc, #628]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 80020f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f8:	4a9c      	ldr	r2, [pc, #624]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 80020fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002100:	4b9a      	ldr	r3, [pc, #616]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 8002102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002104:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800210c:	2301      	movs	r3, #1
 800210e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002110:	4b97      	ldr	r3, [pc, #604]	@ (8002370 <HAL_RCC_OscConfig+0x764>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d11e      	bne.n	800215a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800211c:	4b94      	ldr	r3, [pc, #592]	@ (8002370 <HAL_RCC_OscConfig+0x764>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a93      	ldr	r2, [pc, #588]	@ (8002370 <HAL_RCC_OscConfig+0x764>)
 8002122:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002126:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002128:	f7ff f932 	bl	8001390 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800212e:	e00e      	b.n	800214e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002130:	f7ff f92e 	bl	8001390 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d907      	bls.n	800214e <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800213e:	4b8c      	ldr	r3, [pc, #560]	@ (8002370 <HAL_RCC_OscConfig+0x764>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e22a      	b.n	80025a4 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800214e:	4b88      	ldr	r3, [pc, #544]	@ (8002370 <HAL_RCC_OscConfig+0x764>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0ea      	beq.n	8002130 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d01f      	beq.n	80021a6 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	2b00      	cmp	r3, #0
 8002170:	d010      	beq.n	8002194 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002172:	4b7e      	ldr	r3, [pc, #504]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 8002174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002178:	4a7c      	ldr	r2, [pc, #496]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 800217a:	f043 0304 	orr.w	r3, r3, #4
 800217e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002182:	4b7a      	ldr	r3, [pc, #488]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 8002184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002188:	4a78      	ldr	r2, [pc, #480]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002192:	e018      	b.n	80021c6 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002194:	4b75      	ldr	r3, [pc, #468]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800219a:	4a74      	ldr	r2, [pc, #464]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021a4:	e00f      	b.n	80021c6 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80021a6:	4b71      	ldr	r3, [pc, #452]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 80021a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ac:	4a6f      	ldr	r2, [pc, #444]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 80021ae:	f023 0301 	bic.w	r3, r3, #1
 80021b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80021b6:	4b6d      	ldr	r3, [pc, #436]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 80021b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021bc:	4a6b      	ldr	r2, [pc, #428]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 80021be:	f023 0304 	bic.w	r3, r3, #4
 80021c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d068      	beq.n	80022a0 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ce:	f7ff f8df 	bl	8001390 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d4:	e011      	b.n	80021fa <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7ff f8db 	bl	8001390 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d908      	bls.n	80021fa <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021e8:	4b60      	ldr	r3, [pc, #384]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e1d4      	b.n	80025a4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021fa:	4b5c      	ldr	r3, [pc, #368]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 80021fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0e6      	beq.n	80021d6 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002210:	2b00      	cmp	r3, #0
 8002212:	d022      	beq.n	800225a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002214:	4b55      	ldr	r3, [pc, #340]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 8002216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800221a:	4a54      	ldr	r2, [pc, #336]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 800221c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002220:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002224:	e011      	b.n	800224a <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002226:	f7ff f8b3 	bl	8001390 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002234:	4293      	cmp	r3, r2
 8002236:	d908      	bls.n	800224a <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002238:	4b4c      	ldr	r3, [pc, #304]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 800223a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800223e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e1ac      	b.n	80025a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800224a:	4b48      	ldr	r3, [pc, #288]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 800224c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002250:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0e6      	beq.n	8002226 <HAL_RCC_OscConfig+0x61a>
 8002258:	e068      	b.n	800232c <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800225a:	4b44      	ldr	r3, [pc, #272]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 800225c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002260:	4a42      	ldr	r2, [pc, #264]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 8002262:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002266:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800226a:	e011      	b.n	8002290 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226c:	f7ff f890 	bl	8001390 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d908      	bls.n	8002290 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800227e:	4b3b      	ldr	r3, [pc, #236]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 8002280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002284:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e189      	b.n	80025a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002290:	4b36      	ldr	r3, [pc, #216]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002296:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1e6      	bne.n	800226c <HAL_RCC_OscConfig+0x660>
 800229e:	e045      	b.n	800232c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a0:	f7ff f876 	bl	8001390 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022a6:	e011      	b.n	80022cc <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a8:	f7ff f872 	bl	8001390 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d908      	bls.n	80022cc <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022ba:	4b2c      	ldr	r3, [pc, #176]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 80022bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e16b      	b.n	80025a4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022cc:	4b27      	ldr	r3, [pc, #156]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 80022ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1e6      	bne.n	80022a8 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80022da:	4b24      	ldr	r3, [pc, #144]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d021      	beq.n	800232c <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80022e8:	4b20      	ldr	r3, [pc, #128]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 80022ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ee:	4a1f      	ldr	r2, [pc, #124]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 80022f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80022f8:	e011      	b.n	800231e <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fa:	f7ff f849 	bl	8001390 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002308:	4293      	cmp	r3, r2
 800230a:	d908      	bls.n	800231e <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800230c:	4b17      	ldr	r3, [pc, #92]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 800230e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002312:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e142      	b.n	80025a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800231e:	4b13      	ldr	r3, [pc, #76]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002324:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1e6      	bne.n	80022fa <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800232c:	7ffb      	ldrb	r3, [r7, #31]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d105      	bne.n	800233e <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002332:	4b0e      	ldr	r3, [pc, #56]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 8002334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002336:	4a0d      	ldr	r2, [pc, #52]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 8002338:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800233c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0320 	and.w	r3, r3, #32
 8002346:	2b00      	cmp	r3, #0
 8002348:	d04f      	beq.n	80023ea <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234e:	2b00      	cmp	r3, #0
 8002350:	d028      	beq.n	80023a4 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002352:	4b06      	ldr	r3, [pc, #24]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 8002354:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002358:	4a04      	ldr	r2, [pc, #16]	@ (800236c <HAL_RCC_OscConfig+0x760>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002362:	f7ff f815 	bl	8001390 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002368:	e014      	b.n	8002394 <HAL_RCC_OscConfig+0x788>
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002374:	f7ff f80c 	bl	8001390 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d908      	bls.n	8002394 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002382:	4b8a      	ldr	r3, [pc, #552]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 8002384:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e107      	b.n	80025a4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002394:	4b85      	ldr	r3, [pc, #532]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 8002396:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0e8      	beq.n	8002374 <HAL_RCC_OscConfig+0x768>
 80023a2:	e022      	b.n	80023ea <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023a4:	4b81      	ldr	r3, [pc, #516]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 80023a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023aa:	4a80      	ldr	r2, [pc, #512]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b4:	f7fe ffec 	bl	8001390 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023ba:	e00f      	b.n	80023dc <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023bc:	f7fe ffe8 	bl	8001390 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d908      	bls.n	80023dc <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023ca:	4b78      	ldr	r3, [pc, #480]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 80023cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e0e3      	b.n	80025a4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023dc:	4b73      	ldr	r3, [pc, #460]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 80023de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1e8      	bne.n	80023bc <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 80d7 	beq.w	80025a2 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f4:	4b6d      	ldr	r3, [pc, #436]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 030c 	and.w	r3, r3, #12
 80023fc:	2b0c      	cmp	r3, #12
 80023fe:	f000 8091 	beq.w	8002524 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002406:	2b02      	cmp	r3, #2
 8002408:	d166      	bne.n	80024d8 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240a:	4b68      	ldr	r3, [pc, #416]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a67      	ldr	r2, [pc, #412]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 8002410:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002416:	f7fe ffbb 	bl	8001390 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800241c:	e00e      	b.n	800243c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241e:	f7fe ffb7 	bl	8001390 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d907      	bls.n	800243c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800242c:	4b5f      	ldr	r3, [pc, #380]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e0b3      	b.n	80025a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800243c:	4b5b      	ldr	r3, [pc, #364]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1ea      	bne.n	800241e <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002448:	4b58      	ldr	r3, [pc, #352]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	4b58      	ldr	r3, [pc, #352]	@ (80025b0 <HAL_RCC_OscConfig+0x9a4>)
 800244e:	4013      	ands	r3, r2
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002458:	3a01      	subs	r2, #1
 800245a:	0112      	lsls	r2, r2, #4
 800245c:	4311      	orrs	r1, r2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002462:	0212      	lsls	r2, r2, #8
 8002464:	4311      	orrs	r1, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800246a:	0852      	lsrs	r2, r2, #1
 800246c:	3a01      	subs	r2, #1
 800246e:	0552      	lsls	r2, r2, #21
 8002470:	4311      	orrs	r1, r2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002476:	0852      	lsrs	r2, r2, #1
 8002478:	3a01      	subs	r2, #1
 800247a:	0652      	lsls	r2, r2, #25
 800247c:	4311      	orrs	r1, r2
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002482:	06d2      	lsls	r2, r2, #27
 8002484:	430a      	orrs	r2, r1
 8002486:	4949      	ldr	r1, [pc, #292]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 8002488:	4313      	orrs	r3, r2
 800248a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800248c:	4b47      	ldr	r3, [pc, #284]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a46      	ldr	r2, [pc, #280]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 8002492:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002496:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002498:	4b44      	ldr	r3, [pc, #272]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	4a43      	ldr	r2, [pc, #268]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 800249e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7fe ff74 	bl	8001390 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024aa:	e00e      	b.n	80024ca <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ac:	f7fe ff70 	bl	8001390 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d907      	bls.n	80024ca <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ba:	4b3c      	ldr	r3, [pc, #240]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e06c      	b.n	80025a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ca:	4b38      	ldr	r3, [pc, #224]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0ea      	beq.n	80024ac <HAL_RCC_OscConfig+0x8a0>
 80024d6:	e064      	b.n	80025a2 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d8:	4b34      	ldr	r3, [pc, #208]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a33      	ldr	r2, [pc, #204]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 80024de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e4:	f7fe ff54 	bl	8001390 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ea:	e00e      	b.n	800250a <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ec:	f7fe ff50 	bl	8001390 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d907      	bls.n	800250a <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024fa:	4b2c      	ldr	r3, [pc, #176]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e04c      	b.n	80025a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800250a:	4b28      	ldr	r3, [pc, #160]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1ea      	bne.n	80024ec <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002516:	4b25      	ldr	r3, [pc, #148]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	4924      	ldr	r1, [pc, #144]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 800251c:	4b25      	ldr	r3, [pc, #148]	@ (80025b4 <HAL_RCC_OscConfig+0x9a8>)
 800251e:	4013      	ands	r3, r2
 8002520:	60cb      	str	r3, [r1, #12]
 8002522:	e03e      	b.n	80025a2 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e039      	b.n	80025a4 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002530:	4b1e      	ldr	r3, [pc, #120]	@ (80025ac <HAL_RCC_OscConfig+0x9a0>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f003 0203 	and.w	r2, r3, #3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002540:	429a      	cmp	r2, r3
 8002542:	d12c      	bne.n	800259e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800254e:	3b01      	subs	r3, #1
 8002550:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d123      	bne.n	800259e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002560:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002562:	429a      	cmp	r2, r3
 8002564:	d11b      	bne.n	800259e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002570:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002572:	429a      	cmp	r2, r3
 8002574:	d113      	bne.n	800259e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002580:	085b      	lsrs	r3, r3, #1
 8002582:	3b01      	subs	r3, #1
 8002584:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002586:	429a      	cmp	r2, r3
 8002588:	d109      	bne.n	800259e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002594:	085b      	lsrs	r3, r3, #1
 8002596:	3b01      	subs	r3, #1
 8002598:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800259a:	429a      	cmp	r2, r3
 800259c:	d001      	beq.n	80025a2 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3720      	adds	r7, #32
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40021000 	.word	0x40021000
 80025b0:	019f800c 	.word	0x019f800c
 80025b4:	feeefffc 	.word	0xfeeefffc

080025b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e11c      	b.n	800280a <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d0:	4b90      	ldr	r3, [pc, #576]	@ (8002814 <HAL_RCC_ClockConfig+0x25c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d910      	bls.n	8002600 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025de:	4b8d      	ldr	r3, [pc, #564]	@ (8002814 <HAL_RCC_ClockConfig+0x25c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 020f 	bic.w	r2, r3, #15
 80025e6:	498b      	ldr	r1, [pc, #556]	@ (8002814 <HAL_RCC_ClockConfig+0x25c>)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ee:	4b89      	ldr	r3, [pc, #548]	@ (8002814 <HAL_RCC_ClockConfig+0x25c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e104      	b.n	800280a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d010      	beq.n	800262e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	4b81      	ldr	r3, [pc, #516]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002618:	429a      	cmp	r2, r3
 800261a:	d908      	bls.n	800262e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800261c:	4b7e      	ldr	r3, [pc, #504]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	497b      	ldr	r1, [pc, #492]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 800262a:	4313      	orrs	r3, r2
 800262c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 8085 	beq.w	8002746 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b03      	cmp	r3, #3
 8002642:	d11f      	bne.n	8002684 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002644:	4b74      	ldr	r3, [pc, #464]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0da      	b.n	800280a <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002654:	f000 fa26 	bl	8002aa4 <RCC_GetSysClockFreqFromPLLSource>
 8002658:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4a6f      	ldr	r2, [pc, #444]	@ (800281c <HAL_RCC_ClockConfig+0x264>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d947      	bls.n	80026f2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002662:	4b6d      	ldr	r3, [pc, #436]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d141      	bne.n	80026f2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800266e:	4b6a      	ldr	r3, [pc, #424]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002676:	4a68      	ldr	r2, [pc, #416]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 8002678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800267c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800267e:	2380      	movs	r3, #128	@ 0x80
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	e036      	b.n	80026f2 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d107      	bne.n	800269c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800268c:	4b62      	ldr	r3, [pc, #392]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d115      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0b6      	b.n	800280a <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d107      	bne.n	80026b4 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026a4:	4b5c      	ldr	r3, [pc, #368]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d109      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0aa      	b.n	800280a <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b4:	4b58      	ldr	r3, [pc, #352]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0a2      	b.n	800280a <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80026c4:	f000 f8b0 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 80026c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4a53      	ldr	r2, [pc, #332]	@ (800281c <HAL_RCC_ClockConfig+0x264>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d90f      	bls.n	80026f2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80026d2:	4b51      	ldr	r3, [pc, #324]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d109      	bne.n	80026f2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026de:	4b4e      	ldr	r3, [pc, #312]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026e6:	4a4c      	ldr	r2, [pc, #304]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 80026e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026ee:	2380      	movs	r3, #128	@ 0x80
 80026f0:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026f2:	4b49      	ldr	r3, [pc, #292]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f023 0203 	bic.w	r2, r3, #3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4946      	ldr	r1, [pc, #280]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 8002700:	4313      	orrs	r3, r2
 8002702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002704:	f7fe fe44 	bl	8001390 <HAL_GetTick>
 8002708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270a:	e013      	b.n	8002734 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800270c:	f7fe fe40 	bl	8001390 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800271a:	4293      	cmp	r3, r2
 800271c:	d90a      	bls.n	8002734 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271e:	4b3e      	ldr	r3, [pc, #248]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 020c 	and.w	r2, r3, #12
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e06a      	b.n	800280a <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002734:	4b38      	ldr	r3, [pc, #224]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 020c 	and.w	r2, r3, #12
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	429a      	cmp	r2, r3
 8002744:	d1e2      	bne.n	800270c <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2b80      	cmp	r3, #128	@ 0x80
 800274a:	d105      	bne.n	8002758 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800274c:	4b32      	ldr	r3, [pc, #200]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4a31      	ldr	r2, [pc, #196]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 8002752:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002756:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d010      	beq.n	8002786 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	4b2b      	ldr	r3, [pc, #172]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002770:	429a      	cmp	r2, r3
 8002772:	d208      	bcs.n	8002786 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002774:	4b28      	ldr	r3, [pc, #160]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4925      	ldr	r1, [pc, #148]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 8002782:	4313      	orrs	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002786:	4b23      	ldr	r3, [pc, #140]	@ (8002814 <HAL_RCC_ClockConfig+0x25c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d210      	bcs.n	80027b6 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002794:	4b1f      	ldr	r3, [pc, #124]	@ (8002814 <HAL_RCC_ClockConfig+0x25c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f023 020f 	bic.w	r2, r3, #15
 800279c:	491d      	ldr	r1, [pc, #116]	@ (8002814 <HAL_RCC_ClockConfig+0x25c>)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002814 <HAL_RCC_ClockConfig+0x25c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 030f 	and.w	r3, r3, #15
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d001      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e029      	b.n	800280a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d008      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c2:	4b15      	ldr	r3, [pc, #84]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	4912      	ldr	r1, [pc, #72]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d009      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	490a      	ldr	r1, [pc, #40]	@ (8002818 <HAL_RCC_ClockConfig+0x260>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80027f4:	f000 f8b6 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 80027f8:	4603      	mov	r3, r0
 80027fa:	4a09      	ldr	r2, [pc, #36]	@ (8002820 <HAL_RCC_ClockConfig+0x268>)
 80027fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80027fe:	4b09      	ldr	r3, [pc, #36]	@ (8002824 <HAL_RCC_ClockConfig+0x26c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fd74 	bl	80012f0 <HAL_InitTick>
 8002808:	4603      	mov	r3, r0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40022000 	.word	0x40022000
 8002818:	40021000 	.word	0x40021000
 800281c:	04c4b400 	.word	0x04c4b400
 8002820:	20000000 	.word	0x20000000
 8002824:	2000002c 	.word	0x2000002c

08002828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002828:	b480      	push	{r7}
 800282a:	b089      	sub	sp, #36	@ 0x24
 800282c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]
 8002832:	2300      	movs	r3, #0
 8002834:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002836:	4b47      	ldr	r3, [pc, #284]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002840:	4b44      	ldr	r3, [pc, #272]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x34>
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	2b0c      	cmp	r3, #12
 8002854:	d121      	bne.n	800289a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d11e      	bne.n	800289a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800285c:	4b3d      	ldr	r3, [pc, #244]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x12c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d107      	bne.n	8002878 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002868:	4b3a      	ldr	r3, [pc, #232]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x12c>)
 800286a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800286e:	0a1b      	lsrs	r3, r3, #8
 8002870:	f003 030f 	and.w	r3, r3, #15
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	e005      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002878:	4b36      	ldr	r3, [pc, #216]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x12c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	091b      	lsrs	r3, r3, #4
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8002884:	4a34      	ldr	r2, [pc, #208]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x130>)
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10d      	bne.n	80028b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002898:	e00a      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	2b04      	cmp	r3, #4
 800289e:	d102      	bne.n	80028a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028a0:	4b2e      	ldr	r3, [pc, #184]	@ (800295c <HAL_RCC_GetSysClockFreq+0x134>)
 80028a2:	61bb      	str	r3, [r7, #24]
 80028a4:	e004      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d101      	bne.n	80028b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002960 <HAL_RCC_GetSysClockFreq+0x138>)
 80028ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	2b0c      	cmp	r3, #12
 80028b4:	d146      	bne.n	8002944 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80028b6:	4b27      	ldr	r3, [pc, #156]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x12c>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028c0:	4b24      	ldr	r3, [pc, #144]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x12c>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	3301      	adds	r3, #1
 80028cc:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d003      	beq.n	80028dc <HAL_RCC_GetSysClockFreq+0xb4>
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d00d      	beq.n	80028f6 <HAL_RCC_GetSysClockFreq+0xce>
 80028da:	e019      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028dc:	4a1f      	ldr	r2, [pc, #124]	@ (800295c <HAL_RCC_GetSysClockFreq+0x134>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x12c>)
 80028e6:	68d2      	ldr	r2, [r2, #12]
 80028e8:	0a12      	lsrs	r2, r2, #8
 80028ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028ee:	fb02 f303 	mul.w	r3, r2, r3
 80028f2:	617b      	str	r3, [r7, #20]
        break;
 80028f4:	e019      	b.n	800292a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002960 <HAL_RCC_GetSysClockFreq+0x138>)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fe:	4a15      	ldr	r2, [pc, #84]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002900:	68d2      	ldr	r2, [r2, #12]
 8002902:	0a12      	lsrs	r2, r2, #8
 8002904:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002908:	fb02 f303 	mul.w	r3, r2, r3
 800290c:	617b      	str	r3, [r7, #20]
        break;
 800290e:	e00c      	b.n	800292a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002910:	69fa      	ldr	r2, [r7, #28]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	fbb2 f3f3 	udiv	r3, r2, r3
 8002918:	4a0e      	ldr	r2, [pc, #56]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x12c>)
 800291a:	68d2      	ldr	r2, [r2, #12]
 800291c:	0a12      	lsrs	r2, r2, #8
 800291e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002922:	fb02 f303 	mul.w	r3, r2, r3
 8002926:	617b      	str	r3, [r7, #20]
        break;
 8002928:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800292a:	4b0a      	ldr	r3, [pc, #40]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x12c>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	0e5b      	lsrs	r3, r3, #25
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	3301      	adds	r3, #1
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002942:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002944:	69bb      	ldr	r3, [r7, #24]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3724      	adds	r7, #36	@ 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40021000 	.word	0x40021000
 8002958:	08005604 	.word	0x08005604
 800295c:	00f42400 	.word	0x00f42400
 8002960:	007a1200 	.word	0x007a1200

08002964 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8002968:	f7ff ff5e 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 800296c:	4602      	mov	r2, r0
 800296e:	4b05      	ldr	r3, [pc, #20]	@ (8002984 <HAL_RCC_GetHCLKFreq+0x20>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	091b      	lsrs	r3, r3, #4
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	4903      	ldr	r1, [pc, #12]	@ (8002988 <HAL_RCC_GetHCLKFreq+0x24>)
 800297a:	5ccb      	ldrb	r3, [r1, r3]
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002980:	4618      	mov	r0, r3
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40021000 	.word	0x40021000
 8002988:	080055ec 	.word	0x080055ec

0800298c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002990:	f7ff ffe8 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 8002994:	4602      	mov	r2, r0
 8002996:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	0a1b      	lsrs	r3, r3, #8
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	4903      	ldr	r1, [pc, #12]	@ (80029b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a2:	5ccb      	ldrb	r3, [r1, r3]
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40021000 	.word	0x40021000
 80029b0:	080055fc 	.word	0x080055fc

080029b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029b8:	f7ff ffd4 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 80029bc:	4602      	mov	r2, r0
 80029be:	4b05      	ldr	r3, [pc, #20]	@ (80029d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	0adb      	lsrs	r3, r3, #11
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	4903      	ldr	r1, [pc, #12]	@ (80029d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ca:	5ccb      	ldrb	r3, [r1, r3]
 80029cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40021000 	.word	0x40021000
 80029d8:	080055fc 	.word	0x080055fc

080029dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029e8:	4b2c      	ldr	r3, [pc, #176]	@ (8002a9c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80029ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029f4:	f7ff f85c 	bl	8001ab0 <HAL_PWREx_GetVoltageRange>
 80029f8:	6138      	str	r0, [r7, #16]
 80029fa:	e014      	b.n	8002a26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029fc:	4b27      	ldr	r3, [pc, #156]	@ (8002a9c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80029fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a00:	4a26      	ldr	r2, [pc, #152]	@ (8002a9c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002a02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a06:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a08:	4b24      	ldr	r3, [pc, #144]	@ (8002a9c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a14:	f7ff f84c 	bl	8001ab0 <HAL_PWREx_GetVoltageRange>
 8002a18:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a1a:	4b20      	ldr	r3, [pc, #128]	@ (8002a9c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8002a9c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002a20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a24:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a32:	d10b      	bne.n	8002a4c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b80      	cmp	r3, #128	@ 0x80
 8002a38:	d919      	bls.n	8002a6e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a3e:	d902      	bls.n	8002a46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a40:	2302      	movs	r3, #2
 8002a42:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002a44:	e013      	b.n	8002a6e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a46:	2301      	movs	r3, #1
 8002a48:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002a4a:	e010      	b.n	8002a6e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b80      	cmp	r3, #128	@ 0x80
 8002a50:	d902      	bls.n	8002a58 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a52:	2303      	movs	r3, #3
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	e00a      	b.n	8002a6e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b80      	cmp	r3, #128	@ 0x80
 8002a5c:	d102      	bne.n	8002a64 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a5e:	2302      	movs	r3, #2
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	e004      	b.n	8002a6e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b70      	cmp	r3, #112	@ 0x70
 8002a68:	d101      	bne.n	8002a6e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 020f 	bic.w	r2, r3, #15
 8002a76:	490a      	ldr	r1, [pc, #40]	@ (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002a7e:	4b08      	ldr	r3, [pc, #32]	@ (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e000      	b.n	8002a92 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40022000 	.word	0x40022000

08002aa4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002aaa:	4b31      	ldr	r3, [pc, #196]	@ (8002b70 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8002b70 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	3301      	adds	r3, #1
 8002ac0:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d015      	beq.n	8002af4 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d839      	bhi.n	8002b42 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d01c      	beq.n	8002b0e <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d133      	bne.n	8002b42 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ada:	4a26      	ldr	r2, [pc, #152]	@ (8002b74 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae2:	4a23      	ldr	r2, [pc, #140]	@ (8002b70 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002ae4:	68d2      	ldr	r2, [r2, #12]
 8002ae6:	0a12      	lsrs	r2, r2, #8
 8002ae8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002aec:	fb02 f303 	mul.w	r3, r2, r3
 8002af0:	613b      	str	r3, [r7, #16]
      break;
 8002af2:	e029      	b.n	8002b48 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002af4:	4a20      	ldr	r2, [pc, #128]	@ (8002b78 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afc:	4a1c      	ldr	r2, [pc, #112]	@ (8002b70 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002afe:	68d2      	ldr	r2, [r2, #12]
 8002b00:	0a12      	lsrs	r2, r2, #8
 8002b02:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b06:	fb02 f303 	mul.w	r3, r2, r3
 8002b0a:	613b      	str	r3, [r7, #16]
      break;
 8002b0c:	e01c      	b.n	8002b48 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b0e:	4b18      	ldr	r3, [pc, #96]	@ (8002b70 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d107      	bne.n	8002b2a <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b1a:	4b15      	ldr	r3, [pc, #84]	@ (8002b70 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b20:	0a1b      	lsrs	r3, r3, #8
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	e005      	b.n	8002b36 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b2a:	4b11      	ldr	r3, [pc, #68]	@ (8002b70 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	091b      	lsrs	r3, r3, #4
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8002b36:	4a11      	ldr	r2, [pc, #68]	@ (8002b7c <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b3e:	613b      	str	r3, [r7, #16]
        break;
 8002b40:	e002      	b.n	8002b48 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	613b      	str	r3, [r7, #16]
      break;
 8002b46:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002b48:	4b09      	ldr	r3, [pc, #36]	@ (8002b70 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	0e5b      	lsrs	r3, r3, #25
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	3301      	adds	r3, #1
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b60:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002b62:	683b      	ldr	r3, [r7, #0]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	371c      	adds	r7, #28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	40021000 	.word	0x40021000
 8002b74:	00f42400 	.word	0x00f42400
 8002b78:	007a1200 	.word	0x007a1200
 8002b7c:	08005604 	.word	0x08005604

08002b80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e095      	b.n	8002cbe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d108      	bne.n	8002bac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ba2:	d009      	beq.n	8002bb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	61da      	str	r2, [r3, #28]
 8002baa:	e005      	b.n	8002bb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fd fea6 	bl	8000924 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002bf8:	d902      	bls.n	8002c00 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	e002      	b.n	8002c06 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c04:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002c0e:	d007      	beq.n	8002c20 <HAL_SPI_Init+0xa0>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c18:	d002      	beq.n	8002c20 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c62:	ea42 0103 	orr.w	r1, r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	0c1b      	lsrs	r3, r3, #16
 8002c7c:	f003 0204 	and.w	r2, r3, #4
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002c9c:	ea42 0103 	orr.w	r1, r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b088      	sub	sp, #32
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	603b      	str	r3, [r7, #0]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_SPI_Transmit+0x22>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e15f      	b.n	8002fa8 <HAL_SPI_Transmit+0x2e2>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cf0:	f7fe fb4e 	bl	8001390 <HAL_GetTick>
 8002cf4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002cf6:	88fb      	ldrh	r3, [r7, #6]
 8002cf8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d002      	beq.n	8002d0c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d06:	2302      	movs	r3, #2
 8002d08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d0a:	e148      	b.n	8002f9e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <HAL_SPI_Transmit+0x52>
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d1c:	e13f      	b.n	8002f9e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2203      	movs	r2, #3
 8002d22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	88fa      	ldrh	r2, [r7, #6]
 8002d36:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	88fa      	ldrh	r2, [r7, #6]
 8002d3c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d68:	d10f      	bne.n	8002d8a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d94:	2b40      	cmp	r3, #64	@ 0x40
 8002d96:	d007      	beq.n	8002da8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002da6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002db0:	d94f      	bls.n	8002e52 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <HAL_SPI_Transmit+0xfa>
 8002dba:	8afb      	ldrh	r3, [r7, #22]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d142      	bne.n	8002e46 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc4:	881a      	ldrh	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd0:	1c9a      	adds	r2, r3, #2
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002de4:	e02f      	b.n	8002e46 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d112      	bne.n	8002e1a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df8:	881a      	ldrh	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e04:	1c9a      	adds	r2, r3, #2
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e18:	e015      	b.n	8002e46 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e1a:	f7fe fab9 	bl	8001390 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d803      	bhi.n	8002e32 <HAL_SPI_Transmit+0x16c>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d102      	bne.n	8002e38 <HAL_SPI_Transmit+0x172>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d106      	bne.n	8002e46 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002e44:	e0ab      	b.n	8002f9e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1ca      	bne.n	8002de6 <HAL_SPI_Transmit+0x120>
 8002e50:	e080      	b.n	8002f54 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_SPI_Transmit+0x19a>
 8002e5a:	8afb      	ldrh	r3, [r7, #22]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d174      	bne.n	8002f4a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d912      	bls.n	8002e90 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e6e:	881a      	ldrh	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7a:	1c9a      	adds	r2, r3, #2
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	3b02      	subs	r3, #2
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e8e:	e05c      	b.n	8002f4a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	330c      	adds	r3, #12
 8002e9a:	7812      	ldrb	r2, [r2, #0]
 8002e9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002eb6:	e048      	b.n	8002f4a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d12b      	bne.n	8002f1e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d912      	bls.n	8002ef6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed4:	881a      	ldrh	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee0:	1c9a      	adds	r2, r3, #2
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	3b02      	subs	r3, #2
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ef4:	e029      	b.n	8002f4a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	330c      	adds	r3, #12
 8002f00:	7812      	ldrb	r2, [r2, #0]
 8002f02:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f1c:	e015      	b.n	8002f4a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f1e:	f7fe fa37 	bl	8001390 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d803      	bhi.n	8002f36 <HAL_SPI_Transmit+0x270>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f34:	d102      	bne.n	8002f3c <HAL_SPI_Transmit+0x276>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d106      	bne.n	8002f4a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002f48:	e029      	b.n	8002f9e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1b1      	bne.n	8002eb8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	6839      	ldr	r1, [r7, #0]
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 fcf9 	bl	8003950 <SPI_EndRxTxTransaction>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10a      	bne.n	8002f88 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f72:	2300      	movs	r3, #0
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	77fb      	strb	r3, [r7, #31]
 8002f94:	e003      	b.n	8002f9e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002fa6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3720      	adds	r7, #32
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d002      	beq.n	8002fd6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002fd4:	e11a      	b.n	800320c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fde:	d112      	bne.n	8003006 <HAL_SPI_Receive+0x56>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10e      	bne.n	8003006 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2204      	movs	r2, #4
 8002fec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ff0:	88fa      	ldrh	r2, [r7, #6]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	68b9      	ldr	r1, [r7, #8]
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 f90e 	bl	800321e <HAL_SPI_TransmitReceive>
 8003002:	4603      	mov	r3, r0
 8003004:	e107      	b.n	8003216 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_SPI_Receive+0x64>
 8003010:	2302      	movs	r3, #2
 8003012:	e100      	b.n	8003216 <HAL_SPI_Receive+0x266>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800301c:	f7fe f9b8 	bl	8001390 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <HAL_SPI_Receive+0x7e>
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d102      	bne.n	8003034 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003032:	e0eb      	b.n	800320c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2204      	movs	r2, #4
 8003038:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	88fa      	ldrh	r2, [r7, #6]
 800304c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	88fa      	ldrh	r2, [r7, #6]
 8003054:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800307e:	d908      	bls.n	8003092 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800308e:	605a      	str	r2, [r3, #4]
 8003090:	e007      	b.n	80030a2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80030a0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030aa:	d10f      	bne.n	80030cc <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80030ca:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d6:	2b40      	cmp	r3, #64	@ 0x40
 80030d8:	d007      	beq.n	80030ea <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030e8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030f2:	d86f      	bhi.n	80031d4 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80030f4:	e034      	b.n	8003160 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b01      	cmp	r3, #1
 8003102:	d117      	bne.n	8003134 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f103 020c 	add.w	r2, r3, #12
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003110:	7812      	ldrb	r2, [r2, #0]
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003132:	e015      	b.n	8003160 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003134:	f7fe f92c 	bl	8001390 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d803      	bhi.n	800314c <HAL_SPI_Receive+0x19c>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314a:	d102      	bne.n	8003152 <HAL_SPI_Receive+0x1a2>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d106      	bne.n	8003160 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800315e:	e055      	b.n	800320c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003166:	b29b      	uxth	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1c4      	bne.n	80030f6 <HAL_SPI_Receive+0x146>
 800316c:	e038      	b.n	80031e0 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b01      	cmp	r3, #1
 800317a:	d115      	bne.n	80031a8 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	b292      	uxth	r2, r2
 8003188:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318e:	1c9a      	adds	r2, r3, #2
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800319a:	b29b      	uxth	r3, r3
 800319c:	3b01      	subs	r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80031a6:	e015      	b.n	80031d4 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031a8:	f7fe f8f2 	bl	8001390 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d803      	bhi.n	80031c0 <HAL_SPI_Receive+0x210>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031be:	d102      	bne.n	80031c6 <HAL_SPI_Receive+0x216>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80031d2:	e01b      	b.n	800320c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1c6      	bne.n	800316e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	6839      	ldr	r1, [r7, #0]
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 fb5b 	bl	80038a0 <SPI_EndRxTransaction>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2220      	movs	r2, #32
 80031f4:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	75fb      	strb	r3, [r7, #23]
 8003202:	e003      	b.n	800320c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003214:	7dfb      	ldrb	r3, [r7, #23]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b08a      	sub	sp, #40	@ 0x28
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800322c:	2301      	movs	r3, #1
 800322e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_SPI_TransmitReceive+0x26>
 8003240:	2302      	movs	r3, #2
 8003242:	e20a      	b.n	800365a <HAL_SPI_TransmitReceive+0x43c>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800324c:	f7fe f8a0 	bl	8001390 <HAL_GetTick>
 8003250:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003258:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003260:	887b      	ldrh	r3, [r7, #2]
 8003262:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003264:	887b      	ldrh	r3, [r7, #2]
 8003266:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003268:	7efb      	ldrb	r3, [r7, #27]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d00e      	beq.n	800328c <HAL_SPI_TransmitReceive+0x6e>
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003274:	d106      	bne.n	8003284 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d102      	bne.n	8003284 <HAL_SPI_TransmitReceive+0x66>
 800327e:	7efb      	ldrb	r3, [r7, #27]
 8003280:	2b04      	cmp	r3, #4
 8003282:	d003      	beq.n	800328c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003284:	2302      	movs	r3, #2
 8003286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800328a:	e1e0      	b.n	800364e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d005      	beq.n	800329e <HAL_SPI_TransmitReceive+0x80>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <HAL_SPI_TransmitReceive+0x80>
 8003298:	887b      	ldrh	r3, [r7, #2]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d103      	bne.n	80032a6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80032a4:	e1d3      	b.n	800364e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d003      	beq.n	80032ba <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2205      	movs	r2, #5
 80032b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	887a      	ldrh	r2, [r7, #2]
 80032ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	887a      	ldrh	r2, [r7, #2]
 80032d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	887a      	ldrh	r2, [r7, #2]
 80032e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	887a      	ldrh	r2, [r7, #2]
 80032e6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032fc:	d802      	bhi.n	8003304 <HAL_SPI_TransmitReceive+0xe6>
 80032fe:	8a3b      	ldrh	r3, [r7, #16]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d908      	bls.n	8003316 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003312:	605a      	str	r2, [r3, #4]
 8003314:	e007      	b.n	8003326 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003324:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003330:	2b40      	cmp	r3, #64	@ 0x40
 8003332:	d007      	beq.n	8003344 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003342:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800334c:	f240 8081 	bls.w	8003452 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <HAL_SPI_TransmitReceive+0x140>
 8003358:	8a7b      	ldrh	r3, [r7, #18]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d16d      	bne.n	800343a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003362:	881a      	ldrh	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336e:	1c9a      	adds	r2, r3, #2
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003378:	b29b      	uxth	r3, r3
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003382:	e05a      	b.n	800343a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b02      	cmp	r3, #2
 8003390:	d11b      	bne.n	80033ca <HAL_SPI_TransmitReceive+0x1ac>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d016      	beq.n	80033ca <HAL_SPI_TransmitReceive+0x1ac>
 800339c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d113      	bne.n	80033ca <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a6:	881a      	ldrh	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b2:	1c9a      	adds	r2, r3, #2
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d11c      	bne.n	8003412 <HAL_SPI_TransmitReceive+0x1f4>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d016      	beq.n	8003412 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ee:	b292      	uxth	r2, r2
 80033f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	1c9a      	adds	r2, r3, #2
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800340e:	2301      	movs	r3, #1
 8003410:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003412:	f7fd ffbd 	bl	8001390 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800341e:	429a      	cmp	r2, r3
 8003420:	d80b      	bhi.n	800343a <HAL_SPI_TransmitReceive+0x21c>
 8003422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d007      	beq.n	800343a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003438:	e109      	b.n	800364e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800343e:	b29b      	uxth	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d19f      	bne.n	8003384 <HAL_SPI_TransmitReceive+0x166>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800344a:	b29b      	uxth	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d199      	bne.n	8003384 <HAL_SPI_TransmitReceive+0x166>
 8003450:	e0e3      	b.n	800361a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_SPI_TransmitReceive+0x244>
 800345a:	8a7b      	ldrh	r3, [r7, #18]
 800345c:	2b01      	cmp	r3, #1
 800345e:	f040 80cf 	bne.w	8003600 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003466:	b29b      	uxth	r3, r3
 8003468:	2b01      	cmp	r3, #1
 800346a:	d912      	bls.n	8003492 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003470:	881a      	ldrh	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800347c:	1c9a      	adds	r2, r3, #2
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b02      	subs	r3, #2
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003490:	e0b6      	b.n	8003600 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	330c      	adds	r3, #12
 800349c:	7812      	ldrb	r2, [r2, #0]
 800349e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034b8:	e0a2      	b.n	8003600 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d134      	bne.n	8003532 <HAL_SPI_TransmitReceive+0x314>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d02f      	beq.n	8003532 <HAL_SPI_TransmitReceive+0x314>
 80034d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d12c      	bne.n	8003532 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d912      	bls.n	8003508 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e6:	881a      	ldrh	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f2:	1c9a      	adds	r2, r3, #2
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	3b02      	subs	r3, #2
 8003500:	b29a      	uxth	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003506:	e012      	b.n	800352e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	330c      	adds	r3, #12
 8003512:	7812      	ldrb	r2, [r2, #0]
 8003514:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003524:	b29b      	uxth	r3, r3
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b01      	cmp	r3, #1
 800353e:	d148      	bne.n	80035d2 <HAL_SPI_TransmitReceive+0x3b4>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003546:	b29b      	uxth	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d042      	beq.n	80035d2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003552:	b29b      	uxth	r3, r3
 8003554:	2b01      	cmp	r3, #1
 8003556:	d923      	bls.n	80035a0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	b292      	uxth	r2, r2
 8003564:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356a:	1c9a      	adds	r2, r3, #2
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003576:	b29b      	uxth	r3, r3
 8003578:	3b02      	subs	r3, #2
 800357a:	b29a      	uxth	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b01      	cmp	r3, #1
 800358c:	d81f      	bhi.n	80035ce <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	e016      	b.n	80035ce <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f103 020c 	add.w	r2, r3, #12
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ac:	7812      	ldrb	r2, [r2, #0]
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035ce:	2301      	movs	r3, #1
 80035d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80035d2:	f7fd fedd 	bl	8001390 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035de:	429a      	cmp	r2, r3
 80035e0:	d803      	bhi.n	80035ea <HAL_SPI_TransmitReceive+0x3cc>
 80035e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e8:	d102      	bne.n	80035f0 <HAL_SPI_TransmitReceive+0x3d2>
 80035ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d107      	bne.n	8003600 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80035fe:	e026      	b.n	800364e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	f47f af57 	bne.w	80034ba <HAL_SPI_TransmitReceive+0x29c>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	f47f af50 	bne.w	80034ba <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800361a:	69fa      	ldr	r2, [r7, #28]
 800361c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 f996 	bl	8003950 <SPI_EndRxTxTransaction>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2220      	movs	r2, #32
 8003634:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003644:	e003      	b.n	800364e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003656:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800365a:	4618      	mov	r0, r3
 800365c:	3728      	adds	r7, #40	@ 0x28
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	603b      	str	r3, [r7, #0]
 8003670:	4613      	mov	r3, r2
 8003672:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003674:	f7fd fe8c 	bl	8001390 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	4413      	add	r3, r2
 8003682:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003684:	f7fd fe84 	bl	8001390 <HAL_GetTick>
 8003688:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800368a:	4b39      	ldr	r3, [pc, #228]	@ (8003770 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	015b      	lsls	r3, r3, #5
 8003690:	0d1b      	lsrs	r3, r3, #20
 8003692:	69fa      	ldr	r2, [r7, #28]
 8003694:	fb02 f303 	mul.w	r3, r2, r3
 8003698:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800369a:	e054      	b.n	8003746 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a2:	d050      	beq.n	8003746 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036a4:	f7fd fe74 	bl	8001390 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	69fa      	ldr	r2, [r7, #28]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d902      	bls.n	80036ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d13d      	bne.n	8003736 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80036c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036d2:	d111      	bne.n	80036f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036dc:	d004      	beq.n	80036e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036e6:	d107      	bne.n	80036f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003700:	d10f      	bne.n	8003722 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003720:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e017      	b.n	8003766 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800373c:	2300      	movs	r3, #0
 800373e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	3b01      	subs	r3, #1
 8003744:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4013      	ands	r3, r2
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	429a      	cmp	r2, r3
 8003754:	bf0c      	ite	eq
 8003756:	2301      	moveq	r3, #1
 8003758:	2300      	movne	r3, #0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	461a      	mov	r2, r3
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	429a      	cmp	r2, r3
 8003762:	d19b      	bne.n	800369c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3720      	adds	r7, #32
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	20000000 	.word	0x20000000

08003774 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08a      	sub	sp, #40	@ 0x28
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
 8003780:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003782:	2300      	movs	r3, #0
 8003784:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003786:	f7fd fe03 	bl	8001390 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378e:	1a9b      	subs	r3, r3, r2
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	4413      	add	r3, r2
 8003794:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003796:	f7fd fdfb 	bl	8001390 <HAL_GetTick>
 800379a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	330c      	adds	r3, #12
 80037a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80037a4:	4b3d      	ldr	r3, [pc, #244]	@ (800389c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	00da      	lsls	r2, r3, #3
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	0d1b      	lsrs	r3, r3, #20
 80037b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037b6:	fb02 f303 	mul.w	r3, r2, r3
 80037ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80037bc:	e060      	b.n	8003880 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80037c4:	d107      	bne.n	80037d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d104      	bne.n	80037d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80037d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037dc:	d050      	beq.n	8003880 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037de:	f7fd fdd7 	bl	8001390 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d902      	bls.n	80037f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80037ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d13d      	bne.n	8003870 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003802:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800380c:	d111      	bne.n	8003832 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003816:	d004      	beq.n	8003822 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003820:	d107      	bne.n	8003832 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003830:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003836:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800383a:	d10f      	bne.n	800385c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800385a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e010      	b.n	8003892 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	3b01      	subs	r3, #1
 800387e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	4013      	ands	r3, r2
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	429a      	cmp	r2, r3
 800388e:	d196      	bne.n	80037be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3728      	adds	r7, #40	@ 0x28
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20000000 	.word	0x20000000

080038a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af02      	add	r7, sp, #8
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038b4:	d111      	bne.n	80038da <SPI_EndRxTransaction+0x3a>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038be:	d004      	beq.n	80038ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c8:	d107      	bne.n	80038da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038d8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	2200      	movs	r2, #0
 80038e2:	2180      	movs	r1, #128	@ 0x80
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f7ff febd 	bl	8003664 <SPI_WaitFlagStateUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d007      	beq.n	8003900 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f4:	f043 0220 	orr.w	r2, r3, #32
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e023      	b.n	8003948 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003908:	d11d      	bne.n	8003946 <SPI_EndRxTransaction+0xa6>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003912:	d004      	beq.n	800391e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800391c:	d113      	bne.n	8003946 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2200      	movs	r2, #0
 8003926:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f7ff ff22 	bl	8003774 <SPI_WaitFifoStateUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800393a:	f043 0220 	orr.w	r2, r3, #32
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e000      	b.n	8003948 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af02      	add	r7, sp, #8
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2200      	movs	r2, #0
 8003964:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f7ff ff03 	bl	8003774 <SPI_WaitFifoStateUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d007      	beq.n	8003984 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003978:	f043 0220 	orr.w	r2, r3, #32
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e027      	b.n	80039d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2200      	movs	r2, #0
 800398c:	2180      	movs	r1, #128	@ 0x80
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f7ff fe68 	bl	8003664 <SPI_WaitFlagStateUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d007      	beq.n	80039aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800399e:	f043 0220 	orr.w	r2, r3, #32
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e014      	b.n	80039d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f7ff fedc 	bl	8003774 <SPI_WaitFifoStateUntilTimeout>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d007      	beq.n	80039d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c6:	f043 0220 	orr.w	r2, r3, #32
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e000      	b.n	80039d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e042      	b.n	8003a74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d106      	bne.n	8003a06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f83b 	bl	8003a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2224      	movs	r2, #36	@ 0x24
 8003a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0201 	bic.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fbc0 	bl	80041ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f8bd 	bl	8003bac <UART_SetConfig>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e01b      	b.n	8003a74 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fc3f 	bl	80042f0 <UART_CheckIdleState>
 8003a72:	4603      	mov	r3, r0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08a      	sub	sp, #40	@ 0x28
 8003a94:	af02      	add	r7, sp, #8
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	d17b      	bne.n	8003ba2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <HAL_UART_Transmit+0x26>
 8003ab0:	88fb      	ldrh	r3, [r7, #6]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e074      	b.n	8003ba4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2221      	movs	r2, #33	@ 0x21
 8003ac6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aca:	f7fd fc61 	bl	8001390 <HAL_GetTick>
 8003ace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	88fa      	ldrh	r2, [r7, #6]
 8003ad4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	88fa      	ldrh	r2, [r7, #6]
 8003adc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ae8:	d108      	bne.n	8003afc <HAL_UART_Transmit+0x6c>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d104      	bne.n	8003afc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	e003      	b.n	8003b04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b04:	e030      	b.n	8003b68 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2180      	movs	r1, #128	@ 0x80
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 fc97 	bl	8004444 <UART_WaitOnFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e03d      	b.n	8003ba4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10b      	bne.n	8003b46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b3c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	3302      	adds	r3, #2
 8003b42:	61bb      	str	r3, [r7, #24]
 8003b44:	e007      	b.n	8003b56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	781a      	ldrb	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	3301      	adds	r3, #1
 8003b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1c8      	bne.n	8003b06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	2140      	movs	r1, #64	@ 0x40
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 fc60 	bl	8004444 <UART_WaitOnFlagUntilTimeout>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e006      	b.n	8003ba4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e000      	b.n	8003ba4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003ba2:	2302      	movs	r3, #2
  }
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3720      	adds	r7, #32
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb0:	b08c      	sub	sp, #48	@ 0x30
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	4baa      	ldr	r3, [pc, #680]	@ (8003e84 <UART_SetConfig+0x2d8>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	6812      	ldr	r2, [r2, #0]
 8003be2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003be4:	430b      	orrs	r3, r1
 8003be6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a9f      	ldr	r2, [pc, #636]	@ (8003e88 <UART_SetConfig+0x2dc>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d004      	beq.n	8003c18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c14:	4313      	orrs	r3, r2
 8003c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003c22:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	6812      	ldr	r2, [r2, #0]
 8003c2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c36:	f023 010f 	bic.w	r1, r3, #15
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a90      	ldr	r2, [pc, #576]	@ (8003e8c <UART_SetConfig+0x2e0>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d125      	bne.n	8003c9c <UART_SetConfig+0xf0>
 8003c50:	4b8f      	ldr	r3, [pc, #572]	@ (8003e90 <UART_SetConfig+0x2e4>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d81a      	bhi.n	8003c94 <UART_SetConfig+0xe8>
 8003c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c64 <UART_SetConfig+0xb8>)
 8003c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c64:	08003c75 	.word	0x08003c75
 8003c68:	08003c85 	.word	0x08003c85
 8003c6c:	08003c7d 	.word	0x08003c7d
 8003c70:	08003c8d 	.word	0x08003c8d
 8003c74:	2301      	movs	r3, #1
 8003c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c7a:	e116      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c82:	e112      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003c84:	2304      	movs	r3, #4
 8003c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c8a:	e10e      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003c8c:	2308      	movs	r3, #8
 8003c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c92:	e10a      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003c94:	2310      	movs	r3, #16
 8003c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c9a:	e106      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a7c      	ldr	r2, [pc, #496]	@ (8003e94 <UART_SetConfig+0x2e8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d138      	bne.n	8003d18 <UART_SetConfig+0x16c>
 8003ca6:	4b7a      	ldr	r3, [pc, #488]	@ (8003e90 <UART_SetConfig+0x2e4>)
 8003ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cac:	f003 030c 	and.w	r3, r3, #12
 8003cb0:	2b0c      	cmp	r3, #12
 8003cb2:	d82d      	bhi.n	8003d10 <UART_SetConfig+0x164>
 8003cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cbc <UART_SetConfig+0x110>)
 8003cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cba:	bf00      	nop
 8003cbc:	08003cf1 	.word	0x08003cf1
 8003cc0:	08003d11 	.word	0x08003d11
 8003cc4:	08003d11 	.word	0x08003d11
 8003cc8:	08003d11 	.word	0x08003d11
 8003ccc:	08003d01 	.word	0x08003d01
 8003cd0:	08003d11 	.word	0x08003d11
 8003cd4:	08003d11 	.word	0x08003d11
 8003cd8:	08003d11 	.word	0x08003d11
 8003cdc:	08003cf9 	.word	0x08003cf9
 8003ce0:	08003d11 	.word	0x08003d11
 8003ce4:	08003d11 	.word	0x08003d11
 8003ce8:	08003d11 	.word	0x08003d11
 8003cec:	08003d09 	.word	0x08003d09
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cf6:	e0d8      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cfe:	e0d4      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003d00:	2304      	movs	r3, #4
 8003d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d06:	e0d0      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003d08:	2308      	movs	r3, #8
 8003d0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d0e:	e0cc      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003d10:	2310      	movs	r3, #16
 8003d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d16:	e0c8      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a5e      	ldr	r2, [pc, #376]	@ (8003e98 <UART_SetConfig+0x2ec>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d125      	bne.n	8003d6e <UART_SetConfig+0x1c2>
 8003d22:	4b5b      	ldr	r3, [pc, #364]	@ (8003e90 <UART_SetConfig+0x2e4>)
 8003d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d28:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003d2c:	2b30      	cmp	r3, #48	@ 0x30
 8003d2e:	d016      	beq.n	8003d5e <UART_SetConfig+0x1b2>
 8003d30:	2b30      	cmp	r3, #48	@ 0x30
 8003d32:	d818      	bhi.n	8003d66 <UART_SetConfig+0x1ba>
 8003d34:	2b20      	cmp	r3, #32
 8003d36:	d00a      	beq.n	8003d4e <UART_SetConfig+0x1a2>
 8003d38:	2b20      	cmp	r3, #32
 8003d3a:	d814      	bhi.n	8003d66 <UART_SetConfig+0x1ba>
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <UART_SetConfig+0x19a>
 8003d40:	2b10      	cmp	r3, #16
 8003d42:	d008      	beq.n	8003d56 <UART_SetConfig+0x1aa>
 8003d44:	e00f      	b.n	8003d66 <UART_SetConfig+0x1ba>
 8003d46:	2300      	movs	r3, #0
 8003d48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d4c:	e0ad      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d54:	e0a9      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003d56:	2304      	movs	r3, #4
 8003d58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d5c:	e0a5      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003d5e:	2308      	movs	r3, #8
 8003d60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d64:	e0a1      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003d66:	2310      	movs	r3, #16
 8003d68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d6c:	e09d      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a4a      	ldr	r2, [pc, #296]	@ (8003e9c <UART_SetConfig+0x2f0>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d125      	bne.n	8003dc4 <UART_SetConfig+0x218>
 8003d78:	4b45      	ldr	r3, [pc, #276]	@ (8003e90 <UART_SetConfig+0x2e4>)
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003d82:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d84:	d016      	beq.n	8003db4 <UART_SetConfig+0x208>
 8003d86:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d88:	d818      	bhi.n	8003dbc <UART_SetConfig+0x210>
 8003d8a:	2b80      	cmp	r3, #128	@ 0x80
 8003d8c:	d00a      	beq.n	8003da4 <UART_SetConfig+0x1f8>
 8003d8e:	2b80      	cmp	r3, #128	@ 0x80
 8003d90:	d814      	bhi.n	8003dbc <UART_SetConfig+0x210>
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <UART_SetConfig+0x1f0>
 8003d96:	2b40      	cmp	r3, #64	@ 0x40
 8003d98:	d008      	beq.n	8003dac <UART_SetConfig+0x200>
 8003d9a:	e00f      	b.n	8003dbc <UART_SetConfig+0x210>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003da2:	e082      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003da4:	2302      	movs	r3, #2
 8003da6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003daa:	e07e      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003dac:	2304      	movs	r3, #4
 8003dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003db2:	e07a      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003db4:	2308      	movs	r3, #8
 8003db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dba:	e076      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003dbc:	2310      	movs	r3, #16
 8003dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dc2:	e072      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a35      	ldr	r2, [pc, #212]	@ (8003ea0 <UART_SetConfig+0x2f4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d12a      	bne.n	8003e24 <UART_SetConfig+0x278>
 8003dce:	4b30      	ldr	r3, [pc, #192]	@ (8003e90 <UART_SetConfig+0x2e4>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ddc:	d01a      	beq.n	8003e14 <UART_SetConfig+0x268>
 8003dde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003de2:	d81b      	bhi.n	8003e1c <UART_SetConfig+0x270>
 8003de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003de8:	d00c      	beq.n	8003e04 <UART_SetConfig+0x258>
 8003dea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dee:	d815      	bhi.n	8003e1c <UART_SetConfig+0x270>
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <UART_SetConfig+0x250>
 8003df4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003df8:	d008      	beq.n	8003e0c <UART_SetConfig+0x260>
 8003dfa:	e00f      	b.n	8003e1c <UART_SetConfig+0x270>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e02:	e052      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003e04:	2302      	movs	r3, #2
 8003e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e0a:	e04e      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003e0c:	2304      	movs	r3, #4
 8003e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e12:	e04a      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003e14:	2308      	movs	r3, #8
 8003e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e1a:	e046      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e22:	e042      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a17      	ldr	r2, [pc, #92]	@ (8003e88 <UART_SetConfig+0x2dc>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d13a      	bne.n	8003ea4 <UART_SetConfig+0x2f8>
 8003e2e:	4b18      	ldr	r3, [pc, #96]	@ (8003e90 <UART_SetConfig+0x2e4>)
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e3c:	d01a      	beq.n	8003e74 <UART_SetConfig+0x2c8>
 8003e3e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e42:	d81b      	bhi.n	8003e7c <UART_SetConfig+0x2d0>
 8003e44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e48:	d00c      	beq.n	8003e64 <UART_SetConfig+0x2b8>
 8003e4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e4e:	d815      	bhi.n	8003e7c <UART_SetConfig+0x2d0>
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <UART_SetConfig+0x2b0>
 8003e54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e58:	d008      	beq.n	8003e6c <UART_SetConfig+0x2c0>
 8003e5a:	e00f      	b.n	8003e7c <UART_SetConfig+0x2d0>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e62:	e022      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003e64:	2302      	movs	r3, #2
 8003e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e6a:	e01e      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e72:	e01a      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003e74:	2308      	movs	r3, #8
 8003e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e7a:	e016      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003e7c:	2310      	movs	r3, #16
 8003e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e82:	e012      	b.n	8003eaa <UART_SetConfig+0x2fe>
 8003e84:	cfff69f3 	.word	0xcfff69f3
 8003e88:	40008000 	.word	0x40008000
 8003e8c:	40013800 	.word	0x40013800
 8003e90:	40021000 	.word	0x40021000
 8003e94:	40004400 	.word	0x40004400
 8003e98:	40004800 	.word	0x40004800
 8003e9c:	40004c00 	.word	0x40004c00
 8003ea0:	40005000 	.word	0x40005000
 8003ea4:	2310      	movs	r3, #16
 8003ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4ab0      	ldr	r2, [pc, #704]	@ (8004170 <UART_SetConfig+0x5c4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	f040 809b 	bne.w	8003fec <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003eb6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003eba:	2b08      	cmp	r3, #8
 8003ebc:	d827      	bhi.n	8003f0e <UART_SetConfig+0x362>
 8003ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec4 <UART_SetConfig+0x318>)
 8003ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec4:	08003ee9 	.word	0x08003ee9
 8003ec8:	08003ef1 	.word	0x08003ef1
 8003ecc:	08003ef9 	.word	0x08003ef9
 8003ed0:	08003f0f 	.word	0x08003f0f
 8003ed4:	08003eff 	.word	0x08003eff
 8003ed8:	08003f0f 	.word	0x08003f0f
 8003edc:	08003f0f 	.word	0x08003f0f
 8003ee0:	08003f0f 	.word	0x08003f0f
 8003ee4:	08003f07 	.word	0x08003f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ee8:	f7fe fd50 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 8003eec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003eee:	e014      	b.n	8003f1a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ef0:	f7fe fd60 	bl	80029b4 <HAL_RCC_GetPCLK2Freq>
 8003ef4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ef6:	e010      	b.n	8003f1a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ef8:	4b9e      	ldr	r3, [pc, #632]	@ (8004174 <UART_SetConfig+0x5c8>)
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003efc:	e00d      	b.n	8003f1a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003efe:	f7fe fc93 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 8003f02:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f04:	e009      	b.n	8003f1a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f0c:	e005      	b.n	8003f1a <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003f18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 8130 	beq.w	8004182 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f26:	4a94      	ldr	r2, [pc, #592]	@ (8004178 <UART_SetConfig+0x5cc>)
 8003f28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f30:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	4413      	add	r3, r2
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d305      	bcc.n	8003f52 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d903      	bls.n	8003f5a <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003f58:	e113      	b.n	8004182 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	60bb      	str	r3, [r7, #8]
 8003f60:	60fa      	str	r2, [r7, #12]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f66:	4a84      	ldr	r2, [pc, #528]	@ (8004178 <UART_SetConfig+0x5cc>)
 8003f68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	2200      	movs	r2, #0
 8003f70:	603b      	str	r3, [r7, #0]
 8003f72:	607a      	str	r2, [r7, #4]
 8003f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f7c:	f7fc f95a 	bl	8000234 <__aeabi_uldivmod>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4610      	mov	r0, r2
 8003f86:	4619      	mov	r1, r3
 8003f88:	f04f 0200 	mov.w	r2, #0
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	020b      	lsls	r3, r1, #8
 8003f92:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f96:	0202      	lsls	r2, r0, #8
 8003f98:	6979      	ldr	r1, [r7, #20]
 8003f9a:	6849      	ldr	r1, [r1, #4]
 8003f9c:	0849      	lsrs	r1, r1, #1
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	460c      	mov	r4, r1
 8003fa2:	4605      	mov	r5, r0
 8003fa4:	eb12 0804 	adds.w	r8, r2, r4
 8003fa8:	eb43 0905 	adc.w	r9, r3, r5
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	469a      	mov	sl, r3
 8003fb4:	4693      	mov	fp, r2
 8003fb6:	4652      	mov	r2, sl
 8003fb8:	465b      	mov	r3, fp
 8003fba:	4640      	mov	r0, r8
 8003fbc:	4649      	mov	r1, r9
 8003fbe:	f7fc f939 	bl	8000234 <__aeabi_uldivmod>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fd0:	d308      	bcc.n	8003fe4 <UART_SetConfig+0x438>
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fd8:	d204      	bcs.n	8003fe4 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6a3a      	ldr	r2, [r7, #32]
 8003fe0:	60da      	str	r2, [r3, #12]
 8003fe2:	e0ce      	b.n	8004182 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003fea:	e0ca      	b.n	8004182 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ff4:	d166      	bne.n	80040c4 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8003ff6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003ffa:	2b08      	cmp	r3, #8
 8003ffc:	d827      	bhi.n	800404e <UART_SetConfig+0x4a2>
 8003ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8004004 <UART_SetConfig+0x458>)
 8004000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004004:	08004029 	.word	0x08004029
 8004008:	08004031 	.word	0x08004031
 800400c:	08004039 	.word	0x08004039
 8004010:	0800404f 	.word	0x0800404f
 8004014:	0800403f 	.word	0x0800403f
 8004018:	0800404f 	.word	0x0800404f
 800401c:	0800404f 	.word	0x0800404f
 8004020:	0800404f 	.word	0x0800404f
 8004024:	08004047 	.word	0x08004047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004028:	f7fe fcb0 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 800402c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800402e:	e014      	b.n	800405a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004030:	f7fe fcc0 	bl	80029b4 <HAL_RCC_GetPCLK2Freq>
 8004034:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004036:	e010      	b.n	800405a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004038:	4b4e      	ldr	r3, [pc, #312]	@ (8004174 <UART_SetConfig+0x5c8>)
 800403a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800403c:	e00d      	b.n	800405a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800403e:	f7fe fbf3 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 8004042:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004044:	e009      	b.n	800405a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004046:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800404a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800404c:	e005      	b.n	800405a <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 800404e:	2300      	movs	r3, #0
 8004050:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004058:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800405a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 8090 	beq.w	8004182 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004066:	4a44      	ldr	r2, [pc, #272]	@ (8004178 <UART_SetConfig+0x5cc>)
 8004068:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800406c:	461a      	mov	r2, r3
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004070:	fbb3 f3f2 	udiv	r3, r3, r2
 8004074:	005a      	lsls	r2, r3, #1
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	085b      	lsrs	r3, r3, #1
 800407c:	441a      	add	r2, r3
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	fbb2 f3f3 	udiv	r3, r2, r3
 8004086:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	2b0f      	cmp	r3, #15
 800408c:	d916      	bls.n	80040bc <UART_SetConfig+0x510>
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004094:	d212      	bcs.n	80040bc <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	b29b      	uxth	r3, r3
 800409a:	f023 030f 	bic.w	r3, r3, #15
 800409e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	085b      	lsrs	r3, r3, #1
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	8bfb      	ldrh	r3, [r7, #30]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	8bfa      	ldrh	r2, [r7, #30]
 80040b8:	60da      	str	r2, [r3, #12]
 80040ba:	e062      	b.n	8004182 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80040c2:	e05e      	b.n	8004182 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d828      	bhi.n	800411e <UART_SetConfig+0x572>
 80040cc:	a201      	add	r2, pc, #4	@ (adr r2, 80040d4 <UART_SetConfig+0x528>)
 80040ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d2:	bf00      	nop
 80040d4:	080040f9 	.word	0x080040f9
 80040d8:	08004101 	.word	0x08004101
 80040dc:	08004109 	.word	0x08004109
 80040e0:	0800411f 	.word	0x0800411f
 80040e4:	0800410f 	.word	0x0800410f
 80040e8:	0800411f 	.word	0x0800411f
 80040ec:	0800411f 	.word	0x0800411f
 80040f0:	0800411f 	.word	0x0800411f
 80040f4:	08004117 	.word	0x08004117
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040f8:	f7fe fc48 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 80040fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040fe:	e014      	b.n	800412a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004100:	f7fe fc58 	bl	80029b4 <HAL_RCC_GetPCLK2Freq>
 8004104:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004106:	e010      	b.n	800412a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004108:	4b1a      	ldr	r3, [pc, #104]	@ (8004174 <UART_SetConfig+0x5c8>)
 800410a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800410c:	e00d      	b.n	800412a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800410e:	f7fe fb8b 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 8004112:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004114:	e009      	b.n	800412a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004116:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800411a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800411c:	e005      	b.n	800412a <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004128:	bf00      	nop
    }

    if (pclk != 0U)
 800412a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412c:	2b00      	cmp	r3, #0
 800412e:	d028      	beq.n	8004182 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004134:	4a10      	ldr	r2, [pc, #64]	@ (8004178 <UART_SetConfig+0x5cc>)
 8004136:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800413a:	461a      	mov	r2, r3
 800413c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	085b      	lsrs	r3, r3, #1
 8004148:	441a      	add	r2, r3
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004152:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	2b0f      	cmp	r3, #15
 8004158:	d910      	bls.n	800417c <UART_SetConfig+0x5d0>
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004160:	d20c      	bcs.n	800417c <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	b29a      	uxth	r2, r3
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	60da      	str	r2, [r3, #12]
 800416c:	e009      	b.n	8004182 <UART_SetConfig+0x5d6>
 800416e:	bf00      	nop
 8004170:	40008000 	.word	0x40008000
 8004174:	00f42400 	.word	0x00f42400
 8004178:	08005644 	.word	0x08005644
      }
      else
      {
        ret = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2201      	movs	r2, #1
 8004186:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2201      	movs	r2, #1
 800418e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2200      	movs	r2, #0
 8004196:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	2200      	movs	r2, #0
 800419c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800419e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3730      	adds	r7, #48	@ 0x30
 80041a6:	46bd      	mov	sp, r7
 80041a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080041ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004240:	f003 0310 	and.w	r3, r3, #16
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004288:	2b00      	cmp	r3, #0
 800428a:	d01a      	beq.n	80042c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042aa:	d10a      	bne.n	80042c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	605a      	str	r2, [r3, #4]
  }
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b098      	sub	sp, #96	@ 0x60
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004300:	f7fd f846 	bl	8001390 <HAL_GetTick>
 8004304:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b08      	cmp	r3, #8
 8004312:	d12f      	bne.n	8004374 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004314:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800431c:	2200      	movs	r2, #0
 800431e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f88e 	bl	8004444 <UART_WaitOnFlagUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d022      	beq.n	8004374 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800433c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800433e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004342:	653b      	str	r3, [r7, #80]	@ 0x50
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	461a      	mov	r2, r3
 800434a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800434c:	647b      	str	r3, [r7, #68]	@ 0x44
 800434e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004352:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800435a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e6      	bne.n	800432e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e063      	b.n	800443c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b04      	cmp	r3, #4
 8004380:	d149      	bne.n	8004416 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004382:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800438a:	2200      	movs	r2, #0
 800438c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f857 	bl	8004444 <UART_WaitOnFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d03c      	beq.n	8004416 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a4:	e853 3f00 	ldrex	r3, [r3]
 80043a8:	623b      	str	r3, [r7, #32]
   return(result);
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80043bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043c2:	e841 2300 	strex	r3, r2, [r1]
 80043c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1e6      	bne.n	800439c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3308      	adds	r3, #8
 80043d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f023 0301 	bic.w	r3, r3, #1
 80043e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3308      	adds	r3, #8
 80043ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043ee:	61fa      	str	r2, [r7, #28]
 80043f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f2:	69b9      	ldr	r1, [r7, #24]
 80043f4:	69fa      	ldr	r2, [r7, #28]
 80043f6:	e841 2300 	strex	r3, r2, [r1]
 80043fa:	617b      	str	r3, [r7, #20]
   return(result);
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1e5      	bne.n	80043ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2220      	movs	r2, #32
 8004406:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e012      	b.n	800443c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2220      	movs	r2, #32
 800441a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2220      	movs	r2, #32
 8004422:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3758      	adds	r7, #88	@ 0x58
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	603b      	str	r3, [r7, #0]
 8004450:	4613      	mov	r3, r2
 8004452:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004454:	e04f      	b.n	80044f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445c:	d04b      	beq.n	80044f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445e:	f7fc ff97 	bl	8001390 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	429a      	cmp	r2, r3
 800446c:	d302      	bcc.n	8004474 <UART_WaitOnFlagUntilTimeout+0x30>
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e04e      	b.n	8004516 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	2b00      	cmp	r3, #0
 8004484:	d037      	beq.n	80044f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b80      	cmp	r3, #128	@ 0x80
 800448a:	d034      	beq.n	80044f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2b40      	cmp	r3, #64	@ 0x40
 8004490:	d031      	beq.n	80044f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b08      	cmp	r3, #8
 800449e:	d110      	bne.n	80044c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2208      	movs	r2, #8
 80044a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f838 	bl	800451e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2208      	movs	r2, #8
 80044b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e029      	b.n	8004516 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044d0:	d111      	bne.n	80044f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 f81e 	bl	800451e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e00f      	b.n	8004516 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	69da      	ldr	r2, [r3, #28]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4013      	ands	r3, r2
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	429a      	cmp	r2, r3
 8004504:	bf0c      	ite	eq
 8004506:	2301      	moveq	r3, #1
 8004508:	2300      	movne	r3, #0
 800450a:	b2db      	uxtb	r3, r3
 800450c:	461a      	mov	r2, r3
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	429a      	cmp	r2, r3
 8004512:	d0a0      	beq.n	8004456 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800451e:	b480      	push	{r7}
 8004520:	b095      	sub	sp, #84	@ 0x54
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800452e:	e853 3f00 	ldrex	r3, [r3]
 8004532:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004536:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800453a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004544:	643b      	str	r3, [r7, #64]	@ 0x40
 8004546:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800454a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800454c:	e841 2300 	strex	r3, r2, [r1]
 8004550:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e6      	bne.n	8004526 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3308      	adds	r3, #8
 800455e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	e853 3f00 	ldrex	r3, [r3]
 8004566:	61fb      	str	r3, [r7, #28]
   return(result);
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800456e:	f023 0301 	bic.w	r3, r3, #1
 8004572:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3308      	adds	r3, #8
 800457a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800457c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800457e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004582:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004584:	e841 2300 	strex	r3, r2, [r1]
 8004588:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e3      	bne.n	8004558 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004594:	2b01      	cmp	r3, #1
 8004596:	d118      	bne.n	80045ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f023 0310 	bic.w	r3, r3, #16
 80045ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045b6:	61bb      	str	r3, [r7, #24]
 80045b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	6979      	ldr	r1, [r7, #20]
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	613b      	str	r3, [r7, #16]
   return(result);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e6      	bne.n	8004598 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80045de:	bf00      	nop
 80045e0:	3754      	adds	r7, #84	@ 0x54
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
	...

080045ec <sbrk_aligned>:
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	4e0f      	ldr	r6, [pc, #60]	@ (800462c <sbrk_aligned+0x40>)
 80045f0:	460c      	mov	r4, r1
 80045f2:	4605      	mov	r5, r0
 80045f4:	6831      	ldr	r1, [r6, #0]
 80045f6:	b911      	cbnz	r1, 80045fe <sbrk_aligned+0x12>
 80045f8:	f000 faec 	bl	8004bd4 <_sbrk_r>
 80045fc:	6030      	str	r0, [r6, #0]
 80045fe:	4621      	mov	r1, r4
 8004600:	4628      	mov	r0, r5
 8004602:	f000 fae7 	bl	8004bd4 <_sbrk_r>
 8004606:	1c43      	adds	r3, r0, #1
 8004608:	d103      	bne.n	8004612 <sbrk_aligned+0x26>
 800460a:	f04f 34ff 	mov.w	r4, #4294967295
 800460e:	4620      	mov	r0, r4
 8004610:	bd70      	pop	{r4, r5, r6, pc}
 8004612:	1cc4      	adds	r4, r0, #3
 8004614:	f024 0403 	bic.w	r4, r4, #3
 8004618:	42a0      	cmp	r0, r4
 800461a:	d0f8      	beq.n	800460e <sbrk_aligned+0x22>
 800461c:	1a21      	subs	r1, r4, r0
 800461e:	4628      	mov	r0, r5
 8004620:	f000 fad8 	bl	8004bd4 <_sbrk_r>
 8004624:	3001      	adds	r0, #1
 8004626:	d1f2      	bne.n	800460e <sbrk_aligned+0x22>
 8004628:	e7ef      	b.n	800460a <sbrk_aligned+0x1e>
 800462a:	bf00      	nop
 800462c:	20000260 	.word	0x20000260

08004630 <_malloc_r>:
 8004630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004634:	1ccd      	adds	r5, r1, #3
 8004636:	4606      	mov	r6, r0
 8004638:	f025 0503 	bic.w	r5, r5, #3
 800463c:	3508      	adds	r5, #8
 800463e:	2d0c      	cmp	r5, #12
 8004640:	bf38      	it	cc
 8004642:	250c      	movcc	r5, #12
 8004644:	2d00      	cmp	r5, #0
 8004646:	db01      	blt.n	800464c <_malloc_r+0x1c>
 8004648:	42a9      	cmp	r1, r5
 800464a:	d904      	bls.n	8004656 <_malloc_r+0x26>
 800464c:	230c      	movs	r3, #12
 800464e:	6033      	str	r3, [r6, #0]
 8004650:	2000      	movs	r0, #0
 8004652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004656:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800472c <_malloc_r+0xfc>
 800465a:	f000 f869 	bl	8004730 <__malloc_lock>
 800465e:	f8d8 3000 	ldr.w	r3, [r8]
 8004662:	461c      	mov	r4, r3
 8004664:	bb44      	cbnz	r4, 80046b8 <_malloc_r+0x88>
 8004666:	4629      	mov	r1, r5
 8004668:	4630      	mov	r0, r6
 800466a:	f7ff ffbf 	bl	80045ec <sbrk_aligned>
 800466e:	1c43      	adds	r3, r0, #1
 8004670:	4604      	mov	r4, r0
 8004672:	d158      	bne.n	8004726 <_malloc_r+0xf6>
 8004674:	f8d8 4000 	ldr.w	r4, [r8]
 8004678:	4627      	mov	r7, r4
 800467a:	2f00      	cmp	r7, #0
 800467c:	d143      	bne.n	8004706 <_malloc_r+0xd6>
 800467e:	2c00      	cmp	r4, #0
 8004680:	d04b      	beq.n	800471a <_malloc_r+0xea>
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	4639      	mov	r1, r7
 8004686:	4630      	mov	r0, r6
 8004688:	eb04 0903 	add.w	r9, r4, r3
 800468c:	f000 faa2 	bl	8004bd4 <_sbrk_r>
 8004690:	4581      	cmp	r9, r0
 8004692:	d142      	bne.n	800471a <_malloc_r+0xea>
 8004694:	6821      	ldr	r1, [r4, #0]
 8004696:	4630      	mov	r0, r6
 8004698:	1a6d      	subs	r5, r5, r1
 800469a:	4629      	mov	r1, r5
 800469c:	f7ff ffa6 	bl	80045ec <sbrk_aligned>
 80046a0:	3001      	adds	r0, #1
 80046a2:	d03a      	beq.n	800471a <_malloc_r+0xea>
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	442b      	add	r3, r5
 80046a8:	6023      	str	r3, [r4, #0]
 80046aa:	f8d8 3000 	ldr.w	r3, [r8]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	bb62      	cbnz	r2, 800470c <_malloc_r+0xdc>
 80046b2:	f8c8 7000 	str.w	r7, [r8]
 80046b6:	e00f      	b.n	80046d8 <_malloc_r+0xa8>
 80046b8:	6822      	ldr	r2, [r4, #0]
 80046ba:	1b52      	subs	r2, r2, r5
 80046bc:	d420      	bmi.n	8004700 <_malloc_r+0xd0>
 80046be:	2a0b      	cmp	r2, #11
 80046c0:	d917      	bls.n	80046f2 <_malloc_r+0xc2>
 80046c2:	1961      	adds	r1, r4, r5
 80046c4:	42a3      	cmp	r3, r4
 80046c6:	6025      	str	r5, [r4, #0]
 80046c8:	bf18      	it	ne
 80046ca:	6059      	strne	r1, [r3, #4]
 80046cc:	6863      	ldr	r3, [r4, #4]
 80046ce:	bf08      	it	eq
 80046d0:	f8c8 1000 	streq.w	r1, [r8]
 80046d4:	5162      	str	r2, [r4, r5]
 80046d6:	604b      	str	r3, [r1, #4]
 80046d8:	4630      	mov	r0, r6
 80046da:	f000 f82f 	bl	800473c <__malloc_unlock>
 80046de:	f104 000b 	add.w	r0, r4, #11
 80046e2:	1d23      	adds	r3, r4, #4
 80046e4:	f020 0007 	bic.w	r0, r0, #7
 80046e8:	1ac2      	subs	r2, r0, r3
 80046ea:	bf1c      	itt	ne
 80046ec:	1a1b      	subne	r3, r3, r0
 80046ee:	50a3      	strne	r3, [r4, r2]
 80046f0:	e7af      	b.n	8004652 <_malloc_r+0x22>
 80046f2:	6862      	ldr	r2, [r4, #4]
 80046f4:	42a3      	cmp	r3, r4
 80046f6:	bf0c      	ite	eq
 80046f8:	f8c8 2000 	streq.w	r2, [r8]
 80046fc:	605a      	strne	r2, [r3, #4]
 80046fe:	e7eb      	b.n	80046d8 <_malloc_r+0xa8>
 8004700:	4623      	mov	r3, r4
 8004702:	6864      	ldr	r4, [r4, #4]
 8004704:	e7ae      	b.n	8004664 <_malloc_r+0x34>
 8004706:	463c      	mov	r4, r7
 8004708:	687f      	ldr	r7, [r7, #4]
 800470a:	e7b6      	b.n	800467a <_malloc_r+0x4a>
 800470c:	461a      	mov	r2, r3
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	42a3      	cmp	r3, r4
 8004712:	d1fb      	bne.n	800470c <_malloc_r+0xdc>
 8004714:	2300      	movs	r3, #0
 8004716:	6053      	str	r3, [r2, #4]
 8004718:	e7de      	b.n	80046d8 <_malloc_r+0xa8>
 800471a:	230c      	movs	r3, #12
 800471c:	4630      	mov	r0, r6
 800471e:	6033      	str	r3, [r6, #0]
 8004720:	f000 f80c 	bl	800473c <__malloc_unlock>
 8004724:	e794      	b.n	8004650 <_malloc_r+0x20>
 8004726:	6005      	str	r5, [r0, #0]
 8004728:	e7d6      	b.n	80046d8 <_malloc_r+0xa8>
 800472a:	bf00      	nop
 800472c:	20000264 	.word	0x20000264

08004730 <__malloc_lock>:
 8004730:	4801      	ldr	r0, [pc, #4]	@ (8004738 <__malloc_lock+0x8>)
 8004732:	f000 ba9c 	b.w	8004c6e <__retarget_lock_acquire_recursive>
 8004736:	bf00      	nop
 8004738:	200003a8 	.word	0x200003a8

0800473c <__malloc_unlock>:
 800473c:	4801      	ldr	r0, [pc, #4]	@ (8004744 <__malloc_unlock+0x8>)
 800473e:	f000 ba97 	b.w	8004c70 <__retarget_lock_release_recursive>
 8004742:	bf00      	nop
 8004744:	200003a8 	.word	0x200003a8

08004748 <std>:
 8004748:	2300      	movs	r3, #0
 800474a:	b510      	push	{r4, lr}
 800474c:	4604      	mov	r4, r0
 800474e:	6083      	str	r3, [r0, #8]
 8004750:	8181      	strh	r1, [r0, #12]
 8004752:	4619      	mov	r1, r3
 8004754:	6643      	str	r3, [r0, #100]	@ 0x64
 8004756:	81c2      	strh	r2, [r0, #14]
 8004758:	2208      	movs	r2, #8
 800475a:	6183      	str	r3, [r0, #24]
 800475c:	e9c0 3300 	strd	r3, r3, [r0]
 8004760:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004764:	305c      	adds	r0, #92	@ 0x5c
 8004766:	f000 f9f9 	bl	8004b5c <memset>
 800476a:	4b0d      	ldr	r3, [pc, #52]	@ (80047a0 <std+0x58>)
 800476c:	6224      	str	r4, [r4, #32]
 800476e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004770:	4b0c      	ldr	r3, [pc, #48]	@ (80047a4 <std+0x5c>)
 8004772:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004774:	4b0c      	ldr	r3, [pc, #48]	@ (80047a8 <std+0x60>)
 8004776:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004778:	4b0c      	ldr	r3, [pc, #48]	@ (80047ac <std+0x64>)
 800477a:	6323      	str	r3, [r4, #48]	@ 0x30
 800477c:	4b0c      	ldr	r3, [pc, #48]	@ (80047b0 <std+0x68>)
 800477e:	429c      	cmp	r4, r3
 8004780:	d006      	beq.n	8004790 <std+0x48>
 8004782:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004786:	4294      	cmp	r4, r2
 8004788:	d002      	beq.n	8004790 <std+0x48>
 800478a:	33d0      	adds	r3, #208	@ 0xd0
 800478c:	429c      	cmp	r4, r3
 800478e:	d105      	bne.n	800479c <std+0x54>
 8004790:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004798:	f000 ba68 	b.w	8004c6c <__retarget_lock_init_recursive>
 800479c:	bd10      	pop	{r4, pc}
 800479e:	bf00      	nop
 80047a0:	080049ad 	.word	0x080049ad
 80047a4:	080049cf 	.word	0x080049cf
 80047a8:	08004a07 	.word	0x08004a07
 80047ac:	08004a2b 	.word	0x08004a2b
 80047b0:	20000268 	.word	0x20000268

080047b4 <stdio_exit_handler>:
 80047b4:	4a02      	ldr	r2, [pc, #8]	@ (80047c0 <stdio_exit_handler+0xc>)
 80047b6:	4903      	ldr	r1, [pc, #12]	@ (80047c4 <stdio_exit_handler+0x10>)
 80047b8:	4803      	ldr	r0, [pc, #12]	@ (80047c8 <stdio_exit_handler+0x14>)
 80047ba:	f000 b869 	b.w	8004890 <_fwalk_sglue>
 80047be:	bf00      	nop
 80047c0:	20000034 	.word	0x20000034
 80047c4:	080053b5 	.word	0x080053b5
 80047c8:	20000044 	.word	0x20000044

080047cc <cleanup_stdio>:
 80047cc:	6841      	ldr	r1, [r0, #4]
 80047ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004800 <cleanup_stdio+0x34>)
 80047d0:	4299      	cmp	r1, r3
 80047d2:	b510      	push	{r4, lr}
 80047d4:	4604      	mov	r4, r0
 80047d6:	d001      	beq.n	80047dc <cleanup_stdio+0x10>
 80047d8:	f000 fdec 	bl	80053b4 <_fflush_r>
 80047dc:	68a1      	ldr	r1, [r4, #8]
 80047de:	4b09      	ldr	r3, [pc, #36]	@ (8004804 <cleanup_stdio+0x38>)
 80047e0:	4299      	cmp	r1, r3
 80047e2:	d002      	beq.n	80047ea <cleanup_stdio+0x1e>
 80047e4:	4620      	mov	r0, r4
 80047e6:	f000 fde5 	bl	80053b4 <_fflush_r>
 80047ea:	68e1      	ldr	r1, [r4, #12]
 80047ec:	4b06      	ldr	r3, [pc, #24]	@ (8004808 <cleanup_stdio+0x3c>)
 80047ee:	4299      	cmp	r1, r3
 80047f0:	d004      	beq.n	80047fc <cleanup_stdio+0x30>
 80047f2:	4620      	mov	r0, r4
 80047f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047f8:	f000 bddc 	b.w	80053b4 <_fflush_r>
 80047fc:	bd10      	pop	{r4, pc}
 80047fe:	bf00      	nop
 8004800:	20000268 	.word	0x20000268
 8004804:	200002d0 	.word	0x200002d0
 8004808:	20000338 	.word	0x20000338

0800480c <global_stdio_init.part.0>:
 800480c:	b510      	push	{r4, lr}
 800480e:	4b0b      	ldr	r3, [pc, #44]	@ (800483c <global_stdio_init.part.0+0x30>)
 8004810:	2104      	movs	r1, #4
 8004812:	4c0b      	ldr	r4, [pc, #44]	@ (8004840 <global_stdio_init.part.0+0x34>)
 8004814:	4a0b      	ldr	r2, [pc, #44]	@ (8004844 <global_stdio_init.part.0+0x38>)
 8004816:	4620      	mov	r0, r4
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	2200      	movs	r2, #0
 800481c:	f7ff ff94 	bl	8004748 <std>
 8004820:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004824:	2201      	movs	r2, #1
 8004826:	2109      	movs	r1, #9
 8004828:	f7ff ff8e 	bl	8004748 <std>
 800482c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004830:	2202      	movs	r2, #2
 8004832:	2112      	movs	r1, #18
 8004834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004838:	f7ff bf86 	b.w	8004748 <std>
 800483c:	200003a0 	.word	0x200003a0
 8004840:	20000268 	.word	0x20000268
 8004844:	080047b5 	.word	0x080047b5

08004848 <__sfp_lock_acquire>:
 8004848:	4801      	ldr	r0, [pc, #4]	@ (8004850 <__sfp_lock_acquire+0x8>)
 800484a:	f000 ba10 	b.w	8004c6e <__retarget_lock_acquire_recursive>
 800484e:	bf00      	nop
 8004850:	200003a9 	.word	0x200003a9

08004854 <__sfp_lock_release>:
 8004854:	4801      	ldr	r0, [pc, #4]	@ (800485c <__sfp_lock_release+0x8>)
 8004856:	f000 ba0b 	b.w	8004c70 <__retarget_lock_release_recursive>
 800485a:	bf00      	nop
 800485c:	200003a9 	.word	0x200003a9

08004860 <__sinit>:
 8004860:	b510      	push	{r4, lr}
 8004862:	4604      	mov	r4, r0
 8004864:	f7ff fff0 	bl	8004848 <__sfp_lock_acquire>
 8004868:	6a23      	ldr	r3, [r4, #32]
 800486a:	b11b      	cbz	r3, 8004874 <__sinit+0x14>
 800486c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004870:	f7ff bff0 	b.w	8004854 <__sfp_lock_release>
 8004874:	4b04      	ldr	r3, [pc, #16]	@ (8004888 <__sinit+0x28>)
 8004876:	6223      	str	r3, [r4, #32]
 8004878:	4b04      	ldr	r3, [pc, #16]	@ (800488c <__sinit+0x2c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1f5      	bne.n	800486c <__sinit+0xc>
 8004880:	f7ff ffc4 	bl	800480c <global_stdio_init.part.0>
 8004884:	e7f2      	b.n	800486c <__sinit+0xc>
 8004886:	bf00      	nop
 8004888:	080047cd 	.word	0x080047cd
 800488c:	200003a0 	.word	0x200003a0

08004890 <_fwalk_sglue>:
 8004890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004894:	4607      	mov	r7, r0
 8004896:	4688      	mov	r8, r1
 8004898:	4614      	mov	r4, r2
 800489a:	2600      	movs	r6, #0
 800489c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048a0:	f1b9 0901 	subs.w	r9, r9, #1
 80048a4:	d505      	bpl.n	80048b2 <_fwalk_sglue+0x22>
 80048a6:	6824      	ldr	r4, [r4, #0]
 80048a8:	2c00      	cmp	r4, #0
 80048aa:	d1f7      	bne.n	800489c <_fwalk_sglue+0xc>
 80048ac:	4630      	mov	r0, r6
 80048ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048b2:	89ab      	ldrh	r3, [r5, #12]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d907      	bls.n	80048c8 <_fwalk_sglue+0x38>
 80048b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048bc:	3301      	adds	r3, #1
 80048be:	d003      	beq.n	80048c8 <_fwalk_sglue+0x38>
 80048c0:	4629      	mov	r1, r5
 80048c2:	4638      	mov	r0, r7
 80048c4:	47c0      	blx	r8
 80048c6:	4306      	orrs	r6, r0
 80048c8:	3568      	adds	r5, #104	@ 0x68
 80048ca:	e7e9      	b.n	80048a0 <_fwalk_sglue+0x10>

080048cc <iprintf>:
 80048cc:	b40f      	push	{r0, r1, r2, r3}
 80048ce:	b507      	push	{r0, r1, r2, lr}
 80048d0:	4906      	ldr	r1, [pc, #24]	@ (80048ec <iprintf+0x20>)
 80048d2:	ab04      	add	r3, sp, #16
 80048d4:	6808      	ldr	r0, [r1, #0]
 80048d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80048da:	6881      	ldr	r1, [r0, #8]
 80048dc:	9301      	str	r3, [sp, #4]
 80048de:	f000 fa3d 	bl	8004d5c <_vfiprintf_r>
 80048e2:	b003      	add	sp, #12
 80048e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80048e8:	b004      	add	sp, #16
 80048ea:	4770      	bx	lr
 80048ec:	20000040 	.word	0x20000040

080048f0 <_puts_r>:
 80048f0:	6a03      	ldr	r3, [r0, #32]
 80048f2:	b570      	push	{r4, r5, r6, lr}
 80048f4:	4605      	mov	r5, r0
 80048f6:	460e      	mov	r6, r1
 80048f8:	6884      	ldr	r4, [r0, #8]
 80048fa:	b90b      	cbnz	r3, 8004900 <_puts_r+0x10>
 80048fc:	f7ff ffb0 	bl	8004860 <__sinit>
 8004900:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004902:	07db      	lsls	r3, r3, #31
 8004904:	d405      	bmi.n	8004912 <_puts_r+0x22>
 8004906:	89a3      	ldrh	r3, [r4, #12]
 8004908:	0598      	lsls	r0, r3, #22
 800490a:	d402      	bmi.n	8004912 <_puts_r+0x22>
 800490c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800490e:	f000 f9ae 	bl	8004c6e <__retarget_lock_acquire_recursive>
 8004912:	89a3      	ldrh	r3, [r4, #12]
 8004914:	0719      	lsls	r1, r3, #28
 8004916:	d502      	bpl.n	800491e <_puts_r+0x2e>
 8004918:	6923      	ldr	r3, [r4, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d135      	bne.n	800498a <_puts_r+0x9a>
 800491e:	4621      	mov	r1, r4
 8004920:	4628      	mov	r0, r5
 8004922:	f000 f8c5 	bl	8004ab0 <__swsetup_r>
 8004926:	b380      	cbz	r0, 800498a <_puts_r+0x9a>
 8004928:	f04f 35ff 	mov.w	r5, #4294967295
 800492c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800492e:	07da      	lsls	r2, r3, #31
 8004930:	d405      	bmi.n	800493e <_puts_r+0x4e>
 8004932:	89a3      	ldrh	r3, [r4, #12]
 8004934:	059b      	lsls	r3, r3, #22
 8004936:	d402      	bmi.n	800493e <_puts_r+0x4e>
 8004938:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800493a:	f000 f999 	bl	8004c70 <__retarget_lock_release_recursive>
 800493e:	4628      	mov	r0, r5
 8004940:	bd70      	pop	{r4, r5, r6, pc}
 8004942:	2b00      	cmp	r3, #0
 8004944:	da04      	bge.n	8004950 <_puts_r+0x60>
 8004946:	69a2      	ldr	r2, [r4, #24]
 8004948:	429a      	cmp	r2, r3
 800494a:	dc17      	bgt.n	800497c <_puts_r+0x8c>
 800494c:	290a      	cmp	r1, #10
 800494e:	d015      	beq.n	800497c <_puts_r+0x8c>
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	1c5a      	adds	r2, r3, #1
 8004954:	6022      	str	r2, [r4, #0]
 8004956:	7019      	strb	r1, [r3, #0]
 8004958:	68a3      	ldr	r3, [r4, #8]
 800495a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800495e:	3b01      	subs	r3, #1
 8004960:	60a3      	str	r3, [r4, #8]
 8004962:	2900      	cmp	r1, #0
 8004964:	d1ed      	bne.n	8004942 <_puts_r+0x52>
 8004966:	2b00      	cmp	r3, #0
 8004968:	da11      	bge.n	800498e <_puts_r+0x9e>
 800496a:	4622      	mov	r2, r4
 800496c:	210a      	movs	r1, #10
 800496e:	4628      	mov	r0, r5
 8004970:	f000 f85f 	bl	8004a32 <__swbuf_r>
 8004974:	3001      	adds	r0, #1
 8004976:	d0d7      	beq.n	8004928 <_puts_r+0x38>
 8004978:	250a      	movs	r5, #10
 800497a:	e7d7      	b.n	800492c <_puts_r+0x3c>
 800497c:	4622      	mov	r2, r4
 800497e:	4628      	mov	r0, r5
 8004980:	f000 f857 	bl	8004a32 <__swbuf_r>
 8004984:	3001      	adds	r0, #1
 8004986:	d1e7      	bne.n	8004958 <_puts_r+0x68>
 8004988:	e7ce      	b.n	8004928 <_puts_r+0x38>
 800498a:	3e01      	subs	r6, #1
 800498c:	e7e4      	b.n	8004958 <_puts_r+0x68>
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	6022      	str	r2, [r4, #0]
 8004994:	220a      	movs	r2, #10
 8004996:	701a      	strb	r2, [r3, #0]
 8004998:	e7ee      	b.n	8004978 <_puts_r+0x88>
	...

0800499c <puts>:
 800499c:	4b02      	ldr	r3, [pc, #8]	@ (80049a8 <puts+0xc>)
 800499e:	4601      	mov	r1, r0
 80049a0:	6818      	ldr	r0, [r3, #0]
 80049a2:	f7ff bfa5 	b.w	80048f0 <_puts_r>
 80049a6:	bf00      	nop
 80049a8:	20000040 	.word	0x20000040

080049ac <__sread>:
 80049ac:	b510      	push	{r4, lr}
 80049ae:	460c      	mov	r4, r1
 80049b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049b4:	f000 f8fc 	bl	8004bb0 <_read_r>
 80049b8:	2800      	cmp	r0, #0
 80049ba:	bfab      	itete	ge
 80049bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80049be:	89a3      	ldrhlt	r3, [r4, #12]
 80049c0:	181b      	addge	r3, r3, r0
 80049c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80049c6:	bfac      	ite	ge
 80049c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80049ca:	81a3      	strhlt	r3, [r4, #12]
 80049cc:	bd10      	pop	{r4, pc}

080049ce <__swrite>:
 80049ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049d2:	461f      	mov	r7, r3
 80049d4:	898b      	ldrh	r3, [r1, #12]
 80049d6:	4605      	mov	r5, r0
 80049d8:	460c      	mov	r4, r1
 80049da:	05db      	lsls	r3, r3, #23
 80049dc:	4616      	mov	r6, r2
 80049de:	d505      	bpl.n	80049ec <__swrite+0x1e>
 80049e0:	2302      	movs	r3, #2
 80049e2:	2200      	movs	r2, #0
 80049e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049e8:	f000 f8d0 	bl	8004b8c <_lseek_r>
 80049ec:	89a3      	ldrh	r3, [r4, #12]
 80049ee:	4632      	mov	r2, r6
 80049f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049f4:	4628      	mov	r0, r5
 80049f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049fa:	81a3      	strh	r3, [r4, #12]
 80049fc:	463b      	mov	r3, r7
 80049fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a02:	f000 b8f7 	b.w	8004bf4 <_write_r>

08004a06 <__sseek>:
 8004a06:	b510      	push	{r4, lr}
 8004a08:	460c      	mov	r4, r1
 8004a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a0e:	f000 f8bd 	bl	8004b8c <_lseek_r>
 8004a12:	1c43      	adds	r3, r0, #1
 8004a14:	89a3      	ldrh	r3, [r4, #12]
 8004a16:	bf15      	itete	ne
 8004a18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004a1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004a1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004a22:	81a3      	strheq	r3, [r4, #12]
 8004a24:	bf18      	it	ne
 8004a26:	81a3      	strhne	r3, [r4, #12]
 8004a28:	bd10      	pop	{r4, pc}

08004a2a <__sclose>:
 8004a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a2e:	f000 b89d 	b.w	8004b6c <_close_r>

08004a32 <__swbuf_r>:
 8004a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a34:	460e      	mov	r6, r1
 8004a36:	4614      	mov	r4, r2
 8004a38:	4605      	mov	r5, r0
 8004a3a:	b118      	cbz	r0, 8004a44 <__swbuf_r+0x12>
 8004a3c:	6a03      	ldr	r3, [r0, #32]
 8004a3e:	b90b      	cbnz	r3, 8004a44 <__swbuf_r+0x12>
 8004a40:	f7ff ff0e 	bl	8004860 <__sinit>
 8004a44:	69a3      	ldr	r3, [r4, #24]
 8004a46:	60a3      	str	r3, [r4, #8]
 8004a48:	89a3      	ldrh	r3, [r4, #12]
 8004a4a:	071a      	lsls	r2, r3, #28
 8004a4c:	d501      	bpl.n	8004a52 <__swbuf_r+0x20>
 8004a4e:	6923      	ldr	r3, [r4, #16]
 8004a50:	b943      	cbnz	r3, 8004a64 <__swbuf_r+0x32>
 8004a52:	4621      	mov	r1, r4
 8004a54:	4628      	mov	r0, r5
 8004a56:	f000 f82b 	bl	8004ab0 <__swsetup_r>
 8004a5a:	b118      	cbz	r0, 8004a64 <__swbuf_r+0x32>
 8004a5c:	f04f 37ff 	mov.w	r7, #4294967295
 8004a60:	4638      	mov	r0, r7
 8004a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	b2f6      	uxtb	r6, r6
 8004a68:	6922      	ldr	r2, [r4, #16]
 8004a6a:	4637      	mov	r7, r6
 8004a6c:	1a98      	subs	r0, r3, r2
 8004a6e:	6963      	ldr	r3, [r4, #20]
 8004a70:	4283      	cmp	r3, r0
 8004a72:	dc05      	bgt.n	8004a80 <__swbuf_r+0x4e>
 8004a74:	4621      	mov	r1, r4
 8004a76:	4628      	mov	r0, r5
 8004a78:	f000 fc9c 	bl	80053b4 <_fflush_r>
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	d1ed      	bne.n	8004a5c <__swbuf_r+0x2a>
 8004a80:	68a3      	ldr	r3, [r4, #8]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	60a3      	str	r3, [r4, #8]
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	6022      	str	r2, [r4, #0]
 8004a8c:	701e      	strb	r6, [r3, #0]
 8004a8e:	1c43      	adds	r3, r0, #1
 8004a90:	6962      	ldr	r2, [r4, #20]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d004      	beq.n	8004aa0 <__swbuf_r+0x6e>
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	07db      	lsls	r3, r3, #31
 8004a9a:	d5e1      	bpl.n	8004a60 <__swbuf_r+0x2e>
 8004a9c:	2e0a      	cmp	r6, #10
 8004a9e:	d1df      	bne.n	8004a60 <__swbuf_r+0x2e>
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	f000 fc86 	bl	80053b4 <_fflush_r>
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	d0d9      	beq.n	8004a60 <__swbuf_r+0x2e>
 8004aac:	e7d6      	b.n	8004a5c <__swbuf_r+0x2a>
	...

08004ab0 <__swsetup_r>:
 8004ab0:	b538      	push	{r3, r4, r5, lr}
 8004ab2:	4b29      	ldr	r3, [pc, #164]	@ (8004b58 <__swsetup_r+0xa8>)
 8004ab4:	4605      	mov	r5, r0
 8004ab6:	460c      	mov	r4, r1
 8004ab8:	6818      	ldr	r0, [r3, #0]
 8004aba:	b118      	cbz	r0, 8004ac4 <__swsetup_r+0x14>
 8004abc:	6a03      	ldr	r3, [r0, #32]
 8004abe:	b90b      	cbnz	r3, 8004ac4 <__swsetup_r+0x14>
 8004ac0:	f7ff fece 	bl	8004860 <__sinit>
 8004ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ac8:	0719      	lsls	r1, r3, #28
 8004aca:	d422      	bmi.n	8004b12 <__swsetup_r+0x62>
 8004acc:	06da      	lsls	r2, r3, #27
 8004ace:	d407      	bmi.n	8004ae0 <__swsetup_r+0x30>
 8004ad0:	2209      	movs	r2, #9
 8004ad2:	602a      	str	r2, [r5, #0]
 8004ad4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8004adc:	81a3      	strh	r3, [r4, #12]
 8004ade:	e033      	b.n	8004b48 <__swsetup_r+0x98>
 8004ae0:	0758      	lsls	r0, r3, #29
 8004ae2:	d512      	bpl.n	8004b0a <__swsetup_r+0x5a>
 8004ae4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ae6:	b141      	cbz	r1, 8004afa <__swsetup_r+0x4a>
 8004ae8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004aec:	4299      	cmp	r1, r3
 8004aee:	d002      	beq.n	8004af6 <__swsetup_r+0x46>
 8004af0:	4628      	mov	r0, r5
 8004af2:	f000 f8bf 	bl	8004c74 <_free_r>
 8004af6:	2300      	movs	r3, #0
 8004af8:	6363      	str	r3, [r4, #52]	@ 0x34
 8004afa:	89a3      	ldrh	r3, [r4, #12]
 8004afc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004b00:	81a3      	strh	r3, [r4, #12]
 8004b02:	2300      	movs	r3, #0
 8004b04:	6063      	str	r3, [r4, #4]
 8004b06:	6923      	ldr	r3, [r4, #16]
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	89a3      	ldrh	r3, [r4, #12]
 8004b0c:	f043 0308 	orr.w	r3, r3, #8
 8004b10:	81a3      	strh	r3, [r4, #12]
 8004b12:	6923      	ldr	r3, [r4, #16]
 8004b14:	b94b      	cbnz	r3, 8004b2a <__swsetup_r+0x7a>
 8004b16:	89a3      	ldrh	r3, [r4, #12]
 8004b18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004b1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b20:	d003      	beq.n	8004b2a <__swsetup_r+0x7a>
 8004b22:	4621      	mov	r1, r4
 8004b24:	4628      	mov	r0, r5
 8004b26:	f000 fc92 	bl	800544e <__smakebuf_r>
 8004b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b2e:	f013 0201 	ands.w	r2, r3, #1
 8004b32:	d00a      	beq.n	8004b4a <__swsetup_r+0x9a>
 8004b34:	2200      	movs	r2, #0
 8004b36:	60a2      	str	r2, [r4, #8]
 8004b38:	6962      	ldr	r2, [r4, #20]
 8004b3a:	4252      	negs	r2, r2
 8004b3c:	61a2      	str	r2, [r4, #24]
 8004b3e:	6922      	ldr	r2, [r4, #16]
 8004b40:	b942      	cbnz	r2, 8004b54 <__swsetup_r+0xa4>
 8004b42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004b46:	d1c5      	bne.n	8004ad4 <__swsetup_r+0x24>
 8004b48:	bd38      	pop	{r3, r4, r5, pc}
 8004b4a:	0799      	lsls	r1, r3, #30
 8004b4c:	bf58      	it	pl
 8004b4e:	6962      	ldrpl	r2, [r4, #20]
 8004b50:	60a2      	str	r2, [r4, #8]
 8004b52:	e7f4      	b.n	8004b3e <__swsetup_r+0x8e>
 8004b54:	2000      	movs	r0, #0
 8004b56:	e7f7      	b.n	8004b48 <__swsetup_r+0x98>
 8004b58:	20000040 	.word	0x20000040

08004b5c <memset>:
 8004b5c:	4402      	add	r2, r0
 8004b5e:	4603      	mov	r3, r0
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d100      	bne.n	8004b66 <memset+0xa>
 8004b64:	4770      	bx	lr
 8004b66:	f803 1b01 	strb.w	r1, [r3], #1
 8004b6a:	e7f9      	b.n	8004b60 <memset+0x4>

08004b6c <_close_r>:
 8004b6c:	b538      	push	{r3, r4, r5, lr}
 8004b6e:	2300      	movs	r3, #0
 8004b70:	4d05      	ldr	r5, [pc, #20]	@ (8004b88 <_close_r+0x1c>)
 8004b72:	4604      	mov	r4, r0
 8004b74:	4608      	mov	r0, r1
 8004b76:	602b      	str	r3, [r5, #0]
 8004b78:	f7fb ff87 	bl	8000a8a <_close>
 8004b7c:	1c43      	adds	r3, r0, #1
 8004b7e:	d102      	bne.n	8004b86 <_close_r+0x1a>
 8004b80:	682b      	ldr	r3, [r5, #0]
 8004b82:	b103      	cbz	r3, 8004b86 <_close_r+0x1a>
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	bd38      	pop	{r3, r4, r5, pc}
 8004b88:	200003a4 	.word	0x200003a4

08004b8c <_lseek_r>:
 8004b8c:	b538      	push	{r3, r4, r5, lr}
 8004b8e:	4604      	mov	r4, r0
 8004b90:	4d06      	ldr	r5, [pc, #24]	@ (8004bac <_lseek_r+0x20>)
 8004b92:	4608      	mov	r0, r1
 8004b94:	4611      	mov	r1, r2
 8004b96:	2200      	movs	r2, #0
 8004b98:	602a      	str	r2, [r5, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f7fb ff9c 	bl	8000ad8 <_lseek>
 8004ba0:	1c43      	adds	r3, r0, #1
 8004ba2:	d102      	bne.n	8004baa <_lseek_r+0x1e>
 8004ba4:	682b      	ldr	r3, [r5, #0]
 8004ba6:	b103      	cbz	r3, 8004baa <_lseek_r+0x1e>
 8004ba8:	6023      	str	r3, [r4, #0]
 8004baa:	bd38      	pop	{r3, r4, r5, pc}
 8004bac:	200003a4 	.word	0x200003a4

08004bb0 <_read_r>:
 8004bb0:	b538      	push	{r3, r4, r5, lr}
 8004bb2:	4604      	mov	r4, r0
 8004bb4:	4d06      	ldr	r5, [pc, #24]	@ (8004bd0 <_read_r+0x20>)
 8004bb6:	4608      	mov	r0, r1
 8004bb8:	4611      	mov	r1, r2
 8004bba:	2200      	movs	r2, #0
 8004bbc:	602a      	str	r2, [r5, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f7fb ff2a 	bl	8000a18 <_read>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d102      	bne.n	8004bce <_read_r+0x1e>
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	b103      	cbz	r3, 8004bce <_read_r+0x1e>
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	200003a4 	.word	0x200003a4

08004bd4 <_sbrk_r>:
 8004bd4:	b538      	push	{r3, r4, r5, lr}
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	4d05      	ldr	r5, [pc, #20]	@ (8004bf0 <_sbrk_r+0x1c>)
 8004bda:	4604      	mov	r4, r0
 8004bdc:	4608      	mov	r0, r1
 8004bde:	602b      	str	r3, [r5, #0]
 8004be0:	f7fb ff88 	bl	8000af4 <_sbrk>
 8004be4:	1c43      	adds	r3, r0, #1
 8004be6:	d102      	bne.n	8004bee <_sbrk_r+0x1a>
 8004be8:	682b      	ldr	r3, [r5, #0]
 8004bea:	b103      	cbz	r3, 8004bee <_sbrk_r+0x1a>
 8004bec:	6023      	str	r3, [r4, #0]
 8004bee:	bd38      	pop	{r3, r4, r5, pc}
 8004bf0:	200003a4 	.word	0x200003a4

08004bf4 <_write_r>:
 8004bf4:	b538      	push	{r3, r4, r5, lr}
 8004bf6:	4604      	mov	r4, r0
 8004bf8:	4d06      	ldr	r5, [pc, #24]	@ (8004c14 <_write_r+0x20>)
 8004bfa:	4608      	mov	r0, r1
 8004bfc:	4611      	mov	r1, r2
 8004bfe:	2200      	movs	r2, #0
 8004c00:	602a      	str	r2, [r5, #0]
 8004c02:	461a      	mov	r2, r3
 8004c04:	f7fb ff25 	bl	8000a52 <_write>
 8004c08:	1c43      	adds	r3, r0, #1
 8004c0a:	d102      	bne.n	8004c12 <_write_r+0x1e>
 8004c0c:	682b      	ldr	r3, [r5, #0]
 8004c0e:	b103      	cbz	r3, 8004c12 <_write_r+0x1e>
 8004c10:	6023      	str	r3, [r4, #0]
 8004c12:	bd38      	pop	{r3, r4, r5, pc}
 8004c14:	200003a4 	.word	0x200003a4

08004c18 <__errno>:
 8004c18:	4b01      	ldr	r3, [pc, #4]	@ (8004c20 <__errno+0x8>)
 8004c1a:	6818      	ldr	r0, [r3, #0]
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	20000040 	.word	0x20000040

08004c24 <__libc_init_array>:
 8004c24:	b570      	push	{r4, r5, r6, lr}
 8004c26:	4d0d      	ldr	r5, [pc, #52]	@ (8004c5c <__libc_init_array+0x38>)
 8004c28:	2600      	movs	r6, #0
 8004c2a:	4c0d      	ldr	r4, [pc, #52]	@ (8004c60 <__libc_init_array+0x3c>)
 8004c2c:	1b64      	subs	r4, r4, r5
 8004c2e:	10a4      	asrs	r4, r4, #2
 8004c30:	42a6      	cmp	r6, r4
 8004c32:	d109      	bne.n	8004c48 <__libc_init_array+0x24>
 8004c34:	4d0b      	ldr	r5, [pc, #44]	@ (8004c64 <__libc_init_array+0x40>)
 8004c36:	2600      	movs	r6, #0
 8004c38:	4c0b      	ldr	r4, [pc, #44]	@ (8004c68 <__libc_init_array+0x44>)
 8004c3a:	f000 fc75 	bl	8005528 <_init>
 8004c3e:	1b64      	subs	r4, r4, r5
 8004c40:	10a4      	asrs	r4, r4, #2
 8004c42:	42a6      	cmp	r6, r4
 8004c44:	d105      	bne.n	8004c52 <__libc_init_array+0x2e>
 8004c46:	bd70      	pop	{r4, r5, r6, pc}
 8004c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c4c:	3601      	adds	r6, #1
 8004c4e:	4798      	blx	r3
 8004c50:	e7ee      	b.n	8004c30 <__libc_init_array+0xc>
 8004c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c56:	3601      	adds	r6, #1
 8004c58:	4798      	blx	r3
 8004c5a:	e7f2      	b.n	8004c42 <__libc_init_array+0x1e>
 8004c5c:	08005698 	.word	0x08005698
 8004c60:	08005698 	.word	0x08005698
 8004c64:	08005698 	.word	0x08005698
 8004c68:	0800569c 	.word	0x0800569c

08004c6c <__retarget_lock_init_recursive>:
 8004c6c:	4770      	bx	lr

08004c6e <__retarget_lock_acquire_recursive>:
 8004c6e:	4770      	bx	lr

08004c70 <__retarget_lock_release_recursive>:
 8004c70:	4770      	bx	lr
	...

08004c74 <_free_r>:
 8004c74:	b538      	push	{r3, r4, r5, lr}
 8004c76:	4605      	mov	r5, r0
 8004c78:	2900      	cmp	r1, #0
 8004c7a:	d041      	beq.n	8004d00 <_free_r+0x8c>
 8004c7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c80:	1f0c      	subs	r4, r1, #4
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	bfb8      	it	lt
 8004c86:	18e4      	addlt	r4, r4, r3
 8004c88:	f7ff fd52 	bl	8004730 <__malloc_lock>
 8004c8c:	4a1d      	ldr	r2, [pc, #116]	@ (8004d04 <_free_r+0x90>)
 8004c8e:	6813      	ldr	r3, [r2, #0]
 8004c90:	b933      	cbnz	r3, 8004ca0 <_free_r+0x2c>
 8004c92:	6063      	str	r3, [r4, #4]
 8004c94:	6014      	str	r4, [r2, #0]
 8004c96:	4628      	mov	r0, r5
 8004c98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c9c:	f7ff bd4e 	b.w	800473c <__malloc_unlock>
 8004ca0:	42a3      	cmp	r3, r4
 8004ca2:	d908      	bls.n	8004cb6 <_free_r+0x42>
 8004ca4:	6820      	ldr	r0, [r4, #0]
 8004ca6:	1821      	adds	r1, r4, r0
 8004ca8:	428b      	cmp	r3, r1
 8004caa:	bf01      	itttt	eq
 8004cac:	6819      	ldreq	r1, [r3, #0]
 8004cae:	685b      	ldreq	r3, [r3, #4]
 8004cb0:	1809      	addeq	r1, r1, r0
 8004cb2:	6021      	streq	r1, [r4, #0]
 8004cb4:	e7ed      	b.n	8004c92 <_free_r+0x1e>
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	b10b      	cbz	r3, 8004cc0 <_free_r+0x4c>
 8004cbc:	42a3      	cmp	r3, r4
 8004cbe:	d9fa      	bls.n	8004cb6 <_free_r+0x42>
 8004cc0:	6811      	ldr	r1, [r2, #0]
 8004cc2:	1850      	adds	r0, r2, r1
 8004cc4:	42a0      	cmp	r0, r4
 8004cc6:	d10b      	bne.n	8004ce0 <_free_r+0x6c>
 8004cc8:	6820      	ldr	r0, [r4, #0]
 8004cca:	4401      	add	r1, r0
 8004ccc:	1850      	adds	r0, r2, r1
 8004cce:	6011      	str	r1, [r2, #0]
 8004cd0:	4283      	cmp	r3, r0
 8004cd2:	d1e0      	bne.n	8004c96 <_free_r+0x22>
 8004cd4:	6818      	ldr	r0, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	4408      	add	r0, r1
 8004cda:	6053      	str	r3, [r2, #4]
 8004cdc:	6010      	str	r0, [r2, #0]
 8004cde:	e7da      	b.n	8004c96 <_free_r+0x22>
 8004ce0:	d902      	bls.n	8004ce8 <_free_r+0x74>
 8004ce2:	230c      	movs	r3, #12
 8004ce4:	602b      	str	r3, [r5, #0]
 8004ce6:	e7d6      	b.n	8004c96 <_free_r+0x22>
 8004ce8:	6820      	ldr	r0, [r4, #0]
 8004cea:	1821      	adds	r1, r4, r0
 8004cec:	428b      	cmp	r3, r1
 8004cee:	bf02      	ittt	eq
 8004cf0:	6819      	ldreq	r1, [r3, #0]
 8004cf2:	685b      	ldreq	r3, [r3, #4]
 8004cf4:	1809      	addeq	r1, r1, r0
 8004cf6:	6063      	str	r3, [r4, #4]
 8004cf8:	bf08      	it	eq
 8004cfa:	6021      	streq	r1, [r4, #0]
 8004cfc:	6054      	str	r4, [r2, #4]
 8004cfe:	e7ca      	b.n	8004c96 <_free_r+0x22>
 8004d00:	bd38      	pop	{r3, r4, r5, pc}
 8004d02:	bf00      	nop
 8004d04:	20000264 	.word	0x20000264

08004d08 <__sfputc_r>:
 8004d08:	6893      	ldr	r3, [r2, #8]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	b410      	push	{r4}
 8004d10:	6093      	str	r3, [r2, #8]
 8004d12:	da08      	bge.n	8004d26 <__sfputc_r+0x1e>
 8004d14:	6994      	ldr	r4, [r2, #24]
 8004d16:	42a3      	cmp	r3, r4
 8004d18:	db01      	blt.n	8004d1e <__sfputc_r+0x16>
 8004d1a:	290a      	cmp	r1, #10
 8004d1c:	d103      	bne.n	8004d26 <__sfputc_r+0x1e>
 8004d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d22:	f7ff be86 	b.w	8004a32 <__swbuf_r>
 8004d26:	6813      	ldr	r3, [r2, #0]
 8004d28:	1c58      	adds	r0, r3, #1
 8004d2a:	6010      	str	r0, [r2, #0]
 8004d2c:	4608      	mov	r0, r1
 8004d2e:	7019      	strb	r1, [r3, #0]
 8004d30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <__sfputs_r>:
 8004d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d38:	4606      	mov	r6, r0
 8004d3a:	460f      	mov	r7, r1
 8004d3c:	4614      	mov	r4, r2
 8004d3e:	18d5      	adds	r5, r2, r3
 8004d40:	42ac      	cmp	r4, r5
 8004d42:	d101      	bne.n	8004d48 <__sfputs_r+0x12>
 8004d44:	2000      	movs	r0, #0
 8004d46:	e007      	b.n	8004d58 <__sfputs_r+0x22>
 8004d48:	463a      	mov	r2, r7
 8004d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d4e:	4630      	mov	r0, r6
 8004d50:	f7ff ffda 	bl	8004d08 <__sfputc_r>
 8004d54:	1c43      	adds	r3, r0, #1
 8004d56:	d1f3      	bne.n	8004d40 <__sfputs_r+0xa>
 8004d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d5c <_vfiprintf_r>:
 8004d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d60:	460d      	mov	r5, r1
 8004d62:	b09d      	sub	sp, #116	@ 0x74
 8004d64:	4614      	mov	r4, r2
 8004d66:	4698      	mov	r8, r3
 8004d68:	4606      	mov	r6, r0
 8004d6a:	b118      	cbz	r0, 8004d74 <_vfiprintf_r+0x18>
 8004d6c:	6a03      	ldr	r3, [r0, #32]
 8004d6e:	b90b      	cbnz	r3, 8004d74 <_vfiprintf_r+0x18>
 8004d70:	f7ff fd76 	bl	8004860 <__sinit>
 8004d74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d76:	07d9      	lsls	r1, r3, #31
 8004d78:	d405      	bmi.n	8004d86 <_vfiprintf_r+0x2a>
 8004d7a:	89ab      	ldrh	r3, [r5, #12]
 8004d7c:	059a      	lsls	r2, r3, #22
 8004d7e:	d402      	bmi.n	8004d86 <_vfiprintf_r+0x2a>
 8004d80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d82:	f7ff ff74 	bl	8004c6e <__retarget_lock_acquire_recursive>
 8004d86:	89ab      	ldrh	r3, [r5, #12]
 8004d88:	071b      	lsls	r3, r3, #28
 8004d8a:	d501      	bpl.n	8004d90 <_vfiprintf_r+0x34>
 8004d8c:	692b      	ldr	r3, [r5, #16]
 8004d8e:	b99b      	cbnz	r3, 8004db8 <_vfiprintf_r+0x5c>
 8004d90:	4629      	mov	r1, r5
 8004d92:	4630      	mov	r0, r6
 8004d94:	f7ff fe8c 	bl	8004ab0 <__swsetup_r>
 8004d98:	b170      	cbz	r0, 8004db8 <_vfiprintf_r+0x5c>
 8004d9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d9c:	07dc      	lsls	r4, r3, #31
 8004d9e:	d504      	bpl.n	8004daa <_vfiprintf_r+0x4e>
 8004da0:	f04f 30ff 	mov.w	r0, #4294967295
 8004da4:	b01d      	add	sp, #116	@ 0x74
 8004da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004daa:	89ab      	ldrh	r3, [r5, #12]
 8004dac:	0598      	lsls	r0, r3, #22
 8004dae:	d4f7      	bmi.n	8004da0 <_vfiprintf_r+0x44>
 8004db0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004db2:	f7ff ff5d 	bl	8004c70 <__retarget_lock_release_recursive>
 8004db6:	e7f3      	b.n	8004da0 <_vfiprintf_r+0x44>
 8004db8:	2300      	movs	r3, #0
 8004dba:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dbe:	f04f 0901 	mov.w	r9, #1
 8004dc2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8004f78 <_vfiprintf_r+0x21c>
 8004dc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dc8:	2320      	movs	r3, #32
 8004dca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004dce:	2330      	movs	r3, #48	@ 0x30
 8004dd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004dd4:	4623      	mov	r3, r4
 8004dd6:	469a      	mov	sl, r3
 8004dd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ddc:	b10a      	cbz	r2, 8004de2 <_vfiprintf_r+0x86>
 8004dde:	2a25      	cmp	r2, #37	@ 0x25
 8004de0:	d1f9      	bne.n	8004dd6 <_vfiprintf_r+0x7a>
 8004de2:	ebba 0b04 	subs.w	fp, sl, r4
 8004de6:	d00b      	beq.n	8004e00 <_vfiprintf_r+0xa4>
 8004de8:	465b      	mov	r3, fp
 8004dea:	4622      	mov	r2, r4
 8004dec:	4629      	mov	r1, r5
 8004dee:	4630      	mov	r0, r6
 8004df0:	f7ff ffa1 	bl	8004d36 <__sfputs_r>
 8004df4:	3001      	adds	r0, #1
 8004df6:	f000 80a7 	beq.w	8004f48 <_vfiprintf_r+0x1ec>
 8004dfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004dfc:	445a      	add	r2, fp
 8004dfe:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e00:	f89a 3000 	ldrb.w	r3, [sl]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 809f 	beq.w	8004f48 <_vfiprintf_r+0x1ec>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e10:	f10a 0a01 	add.w	sl, sl, #1
 8004e14:	9304      	str	r3, [sp, #16]
 8004e16:	9307      	str	r3, [sp, #28]
 8004e18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e22:	4654      	mov	r4, sl
 8004e24:	2205      	movs	r2, #5
 8004e26:	4854      	ldr	r0, [pc, #336]	@ (8004f78 <_vfiprintf_r+0x21c>)
 8004e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e2c:	f000 fb6e 	bl	800550c <memchr>
 8004e30:	9a04      	ldr	r2, [sp, #16]
 8004e32:	b9d8      	cbnz	r0, 8004e6c <_vfiprintf_r+0x110>
 8004e34:	06d1      	lsls	r1, r2, #27
 8004e36:	bf44      	itt	mi
 8004e38:	2320      	movmi	r3, #32
 8004e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e3e:	0713      	lsls	r3, r2, #28
 8004e40:	bf44      	itt	mi
 8004e42:	232b      	movmi	r3, #43	@ 0x2b
 8004e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e48:	f89a 3000 	ldrb.w	r3, [sl]
 8004e4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e4e:	d015      	beq.n	8004e7c <_vfiprintf_r+0x120>
 8004e50:	9a07      	ldr	r2, [sp, #28]
 8004e52:	4654      	mov	r4, sl
 8004e54:	2000      	movs	r0, #0
 8004e56:	f04f 0c0a 	mov.w	ip, #10
 8004e5a:	4621      	mov	r1, r4
 8004e5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e60:	3b30      	subs	r3, #48	@ 0x30
 8004e62:	2b09      	cmp	r3, #9
 8004e64:	d94b      	bls.n	8004efe <_vfiprintf_r+0x1a2>
 8004e66:	b1b0      	cbz	r0, 8004e96 <_vfiprintf_r+0x13a>
 8004e68:	9207      	str	r2, [sp, #28]
 8004e6a:	e014      	b.n	8004e96 <_vfiprintf_r+0x13a>
 8004e6c:	eba0 0308 	sub.w	r3, r0, r8
 8004e70:	46a2      	mov	sl, r4
 8004e72:	fa09 f303 	lsl.w	r3, r9, r3
 8004e76:	4313      	orrs	r3, r2
 8004e78:	9304      	str	r3, [sp, #16]
 8004e7a:	e7d2      	b.n	8004e22 <_vfiprintf_r+0xc6>
 8004e7c:	9b03      	ldr	r3, [sp, #12]
 8004e7e:	1d19      	adds	r1, r3, #4
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	9103      	str	r1, [sp, #12]
 8004e86:	bfbb      	ittet	lt
 8004e88:	425b      	neglt	r3, r3
 8004e8a:	f042 0202 	orrlt.w	r2, r2, #2
 8004e8e:	9307      	strge	r3, [sp, #28]
 8004e90:	9307      	strlt	r3, [sp, #28]
 8004e92:	bfb8      	it	lt
 8004e94:	9204      	strlt	r2, [sp, #16]
 8004e96:	7823      	ldrb	r3, [r4, #0]
 8004e98:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e9a:	d10a      	bne.n	8004eb2 <_vfiprintf_r+0x156>
 8004e9c:	7863      	ldrb	r3, [r4, #1]
 8004e9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ea0:	d132      	bne.n	8004f08 <_vfiprintf_r+0x1ac>
 8004ea2:	9b03      	ldr	r3, [sp, #12]
 8004ea4:	3402      	adds	r4, #2
 8004ea6:	1d1a      	adds	r2, r3, #4
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004eae:	9203      	str	r2, [sp, #12]
 8004eb0:	9305      	str	r3, [sp, #20]
 8004eb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004f88 <_vfiprintf_r+0x22c>
 8004eb6:	2203      	movs	r2, #3
 8004eb8:	7821      	ldrb	r1, [r4, #0]
 8004eba:	4650      	mov	r0, sl
 8004ebc:	f000 fb26 	bl	800550c <memchr>
 8004ec0:	b138      	cbz	r0, 8004ed2 <_vfiprintf_r+0x176>
 8004ec2:	eba0 000a 	sub.w	r0, r0, sl
 8004ec6:	2240      	movs	r2, #64	@ 0x40
 8004ec8:	9b04      	ldr	r3, [sp, #16]
 8004eca:	3401      	adds	r4, #1
 8004ecc:	4082      	lsls	r2, r0
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	9304      	str	r3, [sp, #16]
 8004ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ed6:	2206      	movs	r2, #6
 8004ed8:	4828      	ldr	r0, [pc, #160]	@ (8004f7c <_vfiprintf_r+0x220>)
 8004eda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ede:	f000 fb15 	bl	800550c <memchr>
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	d03f      	beq.n	8004f66 <_vfiprintf_r+0x20a>
 8004ee6:	4b26      	ldr	r3, [pc, #152]	@ (8004f80 <_vfiprintf_r+0x224>)
 8004ee8:	bb1b      	cbnz	r3, 8004f32 <_vfiprintf_r+0x1d6>
 8004eea:	9b03      	ldr	r3, [sp, #12]
 8004eec:	3307      	adds	r3, #7
 8004eee:	f023 0307 	bic.w	r3, r3, #7
 8004ef2:	3308      	adds	r3, #8
 8004ef4:	9303      	str	r3, [sp, #12]
 8004ef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ef8:	443b      	add	r3, r7
 8004efa:	9309      	str	r3, [sp, #36]	@ 0x24
 8004efc:	e76a      	b.n	8004dd4 <_vfiprintf_r+0x78>
 8004efe:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f02:	460c      	mov	r4, r1
 8004f04:	2001      	movs	r0, #1
 8004f06:	e7a8      	b.n	8004e5a <_vfiprintf_r+0xfe>
 8004f08:	2300      	movs	r3, #0
 8004f0a:	3401      	adds	r4, #1
 8004f0c:	f04f 0c0a 	mov.w	ip, #10
 8004f10:	4619      	mov	r1, r3
 8004f12:	9305      	str	r3, [sp, #20]
 8004f14:	4620      	mov	r0, r4
 8004f16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f1a:	3a30      	subs	r2, #48	@ 0x30
 8004f1c:	2a09      	cmp	r2, #9
 8004f1e:	d903      	bls.n	8004f28 <_vfiprintf_r+0x1cc>
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0c6      	beq.n	8004eb2 <_vfiprintf_r+0x156>
 8004f24:	9105      	str	r1, [sp, #20]
 8004f26:	e7c4      	b.n	8004eb2 <_vfiprintf_r+0x156>
 8004f28:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f2c:	4604      	mov	r4, r0
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e7f0      	b.n	8004f14 <_vfiprintf_r+0x1b8>
 8004f32:	ab03      	add	r3, sp, #12
 8004f34:	462a      	mov	r2, r5
 8004f36:	a904      	add	r1, sp, #16
 8004f38:	4630      	mov	r0, r6
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	4b11      	ldr	r3, [pc, #68]	@ (8004f84 <_vfiprintf_r+0x228>)
 8004f3e:	f3af 8000 	nop.w
 8004f42:	4607      	mov	r7, r0
 8004f44:	1c78      	adds	r0, r7, #1
 8004f46:	d1d6      	bne.n	8004ef6 <_vfiprintf_r+0x19a>
 8004f48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f4a:	07d9      	lsls	r1, r3, #31
 8004f4c:	d405      	bmi.n	8004f5a <_vfiprintf_r+0x1fe>
 8004f4e:	89ab      	ldrh	r3, [r5, #12]
 8004f50:	059a      	lsls	r2, r3, #22
 8004f52:	d402      	bmi.n	8004f5a <_vfiprintf_r+0x1fe>
 8004f54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f56:	f7ff fe8b 	bl	8004c70 <__retarget_lock_release_recursive>
 8004f5a:	89ab      	ldrh	r3, [r5, #12]
 8004f5c:	065b      	lsls	r3, r3, #25
 8004f5e:	f53f af1f 	bmi.w	8004da0 <_vfiprintf_r+0x44>
 8004f62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f64:	e71e      	b.n	8004da4 <_vfiprintf_r+0x48>
 8004f66:	ab03      	add	r3, sp, #12
 8004f68:	462a      	mov	r2, r5
 8004f6a:	a904      	add	r1, sp, #16
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	4b04      	ldr	r3, [pc, #16]	@ (8004f84 <_vfiprintf_r+0x228>)
 8004f72:	f000 f87d 	bl	8005070 <_printf_i>
 8004f76:	e7e4      	b.n	8004f42 <_vfiprintf_r+0x1e6>
 8004f78:	0800565c 	.word	0x0800565c
 8004f7c:	08005666 	.word	0x08005666
 8004f80:	00000000 	.word	0x00000000
 8004f84:	08004d37 	.word	0x08004d37
 8004f88:	08005662 	.word	0x08005662

08004f8c <_printf_common>:
 8004f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f90:	4616      	mov	r6, r2
 8004f92:	4698      	mov	r8, r3
 8004f94:	688a      	ldr	r2, [r1, #8]
 8004f96:	4607      	mov	r7, r0
 8004f98:	690b      	ldr	r3, [r1, #16]
 8004f9a:	460c      	mov	r4, r1
 8004f9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	bfb8      	it	lt
 8004fa4:	4613      	movlt	r3, r2
 8004fa6:	6033      	str	r3, [r6, #0]
 8004fa8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004fac:	b10a      	cbz	r2, 8004fb2 <_printf_common+0x26>
 8004fae:	3301      	adds	r3, #1
 8004fb0:	6033      	str	r3, [r6, #0]
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	0699      	lsls	r1, r3, #26
 8004fb6:	bf42      	ittt	mi
 8004fb8:	6833      	ldrmi	r3, [r6, #0]
 8004fba:	3302      	addmi	r3, #2
 8004fbc:	6033      	strmi	r3, [r6, #0]
 8004fbe:	6825      	ldr	r5, [r4, #0]
 8004fc0:	f015 0506 	ands.w	r5, r5, #6
 8004fc4:	d106      	bne.n	8004fd4 <_printf_common+0x48>
 8004fc6:	f104 0a19 	add.w	sl, r4, #25
 8004fca:	68e3      	ldr	r3, [r4, #12]
 8004fcc:	6832      	ldr	r2, [r6, #0]
 8004fce:	1a9b      	subs	r3, r3, r2
 8004fd0:	42ab      	cmp	r3, r5
 8004fd2:	dc2b      	bgt.n	800502c <_printf_common+0xa0>
 8004fd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004fd8:	6822      	ldr	r2, [r4, #0]
 8004fda:	3b00      	subs	r3, #0
 8004fdc:	bf18      	it	ne
 8004fde:	2301      	movne	r3, #1
 8004fe0:	0692      	lsls	r2, r2, #26
 8004fe2:	d430      	bmi.n	8005046 <_printf_common+0xba>
 8004fe4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004fe8:	4641      	mov	r1, r8
 8004fea:	4638      	mov	r0, r7
 8004fec:	47c8      	blx	r9
 8004fee:	3001      	adds	r0, #1
 8004ff0:	d023      	beq.n	800503a <_printf_common+0xae>
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	341a      	adds	r4, #26
 8004ff6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8004ffa:	f003 0306 	and.w	r3, r3, #6
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	bf0a      	itet	eq
 8005002:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8005006:	2500      	movne	r5, #0
 8005008:	6833      	ldreq	r3, [r6, #0]
 800500a:	f04f 0600 	mov.w	r6, #0
 800500e:	bf08      	it	eq
 8005010:	1aed      	subeq	r5, r5, r3
 8005012:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005016:	bf08      	it	eq
 8005018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800501c:	4293      	cmp	r3, r2
 800501e:	bfc4      	itt	gt
 8005020:	1a9b      	subgt	r3, r3, r2
 8005022:	18ed      	addgt	r5, r5, r3
 8005024:	42b5      	cmp	r5, r6
 8005026:	d11a      	bne.n	800505e <_printf_common+0xd2>
 8005028:	2000      	movs	r0, #0
 800502a:	e008      	b.n	800503e <_printf_common+0xb2>
 800502c:	2301      	movs	r3, #1
 800502e:	4652      	mov	r2, sl
 8005030:	4641      	mov	r1, r8
 8005032:	4638      	mov	r0, r7
 8005034:	47c8      	blx	r9
 8005036:	3001      	adds	r0, #1
 8005038:	d103      	bne.n	8005042 <_printf_common+0xb6>
 800503a:	f04f 30ff 	mov.w	r0, #4294967295
 800503e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005042:	3501      	adds	r5, #1
 8005044:	e7c1      	b.n	8004fca <_printf_common+0x3e>
 8005046:	18e1      	adds	r1, r4, r3
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	2030      	movs	r0, #48	@ 0x30
 800504c:	3302      	adds	r3, #2
 800504e:	4422      	add	r2, r4
 8005050:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005054:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005058:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800505c:	e7c2      	b.n	8004fe4 <_printf_common+0x58>
 800505e:	2301      	movs	r3, #1
 8005060:	4622      	mov	r2, r4
 8005062:	4641      	mov	r1, r8
 8005064:	4638      	mov	r0, r7
 8005066:	47c8      	blx	r9
 8005068:	3001      	adds	r0, #1
 800506a:	d0e6      	beq.n	800503a <_printf_common+0xae>
 800506c:	3601      	adds	r6, #1
 800506e:	e7d9      	b.n	8005024 <_printf_common+0x98>

08005070 <_printf_i>:
 8005070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005074:	7e0f      	ldrb	r7, [r1, #24]
 8005076:	4691      	mov	r9, r2
 8005078:	4680      	mov	r8, r0
 800507a:	460c      	mov	r4, r1
 800507c:	2f78      	cmp	r7, #120	@ 0x78
 800507e:	469a      	mov	sl, r3
 8005080:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005082:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005086:	d807      	bhi.n	8005098 <_printf_i+0x28>
 8005088:	2f62      	cmp	r7, #98	@ 0x62
 800508a:	d80a      	bhi.n	80050a2 <_printf_i+0x32>
 800508c:	2f00      	cmp	r7, #0
 800508e:	f000 80d1 	beq.w	8005234 <_printf_i+0x1c4>
 8005092:	2f58      	cmp	r7, #88	@ 0x58
 8005094:	f000 80b8 	beq.w	8005208 <_printf_i+0x198>
 8005098:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800509c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80050a0:	e03a      	b.n	8005118 <_printf_i+0xa8>
 80050a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80050a6:	2b15      	cmp	r3, #21
 80050a8:	d8f6      	bhi.n	8005098 <_printf_i+0x28>
 80050aa:	a101      	add	r1, pc, #4	@ (adr r1, 80050b0 <_printf_i+0x40>)
 80050ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050b0:	08005109 	.word	0x08005109
 80050b4:	0800511d 	.word	0x0800511d
 80050b8:	08005099 	.word	0x08005099
 80050bc:	08005099 	.word	0x08005099
 80050c0:	08005099 	.word	0x08005099
 80050c4:	08005099 	.word	0x08005099
 80050c8:	0800511d 	.word	0x0800511d
 80050cc:	08005099 	.word	0x08005099
 80050d0:	08005099 	.word	0x08005099
 80050d4:	08005099 	.word	0x08005099
 80050d8:	08005099 	.word	0x08005099
 80050dc:	0800521b 	.word	0x0800521b
 80050e0:	08005147 	.word	0x08005147
 80050e4:	080051d5 	.word	0x080051d5
 80050e8:	08005099 	.word	0x08005099
 80050ec:	08005099 	.word	0x08005099
 80050f0:	0800523d 	.word	0x0800523d
 80050f4:	08005099 	.word	0x08005099
 80050f8:	08005147 	.word	0x08005147
 80050fc:	08005099 	.word	0x08005099
 8005100:	08005099 	.word	0x08005099
 8005104:	080051dd 	.word	0x080051dd
 8005108:	6833      	ldr	r3, [r6, #0]
 800510a:	1d1a      	adds	r2, r3, #4
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6032      	str	r2, [r6, #0]
 8005110:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005114:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005118:	2301      	movs	r3, #1
 800511a:	e09c      	b.n	8005256 <_printf_i+0x1e6>
 800511c:	6833      	ldr	r3, [r6, #0]
 800511e:	6820      	ldr	r0, [r4, #0]
 8005120:	1d19      	adds	r1, r3, #4
 8005122:	6031      	str	r1, [r6, #0]
 8005124:	0606      	lsls	r6, r0, #24
 8005126:	d501      	bpl.n	800512c <_printf_i+0xbc>
 8005128:	681d      	ldr	r5, [r3, #0]
 800512a:	e003      	b.n	8005134 <_printf_i+0xc4>
 800512c:	0645      	lsls	r5, r0, #25
 800512e:	d5fb      	bpl.n	8005128 <_printf_i+0xb8>
 8005130:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005134:	2d00      	cmp	r5, #0
 8005136:	da03      	bge.n	8005140 <_printf_i+0xd0>
 8005138:	232d      	movs	r3, #45	@ 0x2d
 800513a:	426d      	negs	r5, r5
 800513c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005140:	4858      	ldr	r0, [pc, #352]	@ (80052a4 <_printf_i+0x234>)
 8005142:	230a      	movs	r3, #10
 8005144:	e011      	b.n	800516a <_printf_i+0xfa>
 8005146:	6821      	ldr	r1, [r4, #0]
 8005148:	6833      	ldr	r3, [r6, #0]
 800514a:	0608      	lsls	r0, r1, #24
 800514c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005150:	d402      	bmi.n	8005158 <_printf_i+0xe8>
 8005152:	0649      	lsls	r1, r1, #25
 8005154:	bf48      	it	mi
 8005156:	b2ad      	uxthmi	r5, r5
 8005158:	2f6f      	cmp	r7, #111	@ 0x6f
 800515a:	6033      	str	r3, [r6, #0]
 800515c:	4851      	ldr	r0, [pc, #324]	@ (80052a4 <_printf_i+0x234>)
 800515e:	bf14      	ite	ne
 8005160:	230a      	movne	r3, #10
 8005162:	2308      	moveq	r3, #8
 8005164:	2100      	movs	r1, #0
 8005166:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800516a:	6866      	ldr	r6, [r4, #4]
 800516c:	2e00      	cmp	r6, #0
 800516e:	60a6      	str	r6, [r4, #8]
 8005170:	db05      	blt.n	800517e <_printf_i+0x10e>
 8005172:	6821      	ldr	r1, [r4, #0]
 8005174:	432e      	orrs	r6, r5
 8005176:	f021 0104 	bic.w	r1, r1, #4
 800517a:	6021      	str	r1, [r4, #0]
 800517c:	d04b      	beq.n	8005216 <_printf_i+0x1a6>
 800517e:	4616      	mov	r6, r2
 8005180:	fbb5 f1f3 	udiv	r1, r5, r3
 8005184:	fb03 5711 	mls	r7, r3, r1, r5
 8005188:	5dc7      	ldrb	r7, [r0, r7]
 800518a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800518e:	462f      	mov	r7, r5
 8005190:	460d      	mov	r5, r1
 8005192:	42bb      	cmp	r3, r7
 8005194:	d9f4      	bls.n	8005180 <_printf_i+0x110>
 8005196:	2b08      	cmp	r3, #8
 8005198:	d10b      	bne.n	80051b2 <_printf_i+0x142>
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	07df      	lsls	r7, r3, #31
 800519e:	d508      	bpl.n	80051b2 <_printf_i+0x142>
 80051a0:	6923      	ldr	r3, [r4, #16]
 80051a2:	6861      	ldr	r1, [r4, #4]
 80051a4:	4299      	cmp	r1, r3
 80051a6:	bfde      	ittt	le
 80051a8:	2330      	movle	r3, #48	@ 0x30
 80051aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051b2:	1b92      	subs	r2, r2, r6
 80051b4:	6122      	str	r2, [r4, #16]
 80051b6:	464b      	mov	r3, r9
 80051b8:	aa03      	add	r2, sp, #12
 80051ba:	4621      	mov	r1, r4
 80051bc:	4640      	mov	r0, r8
 80051be:	f8cd a000 	str.w	sl, [sp]
 80051c2:	f7ff fee3 	bl	8004f8c <_printf_common>
 80051c6:	3001      	adds	r0, #1
 80051c8:	d14a      	bne.n	8005260 <_printf_i+0x1f0>
 80051ca:	f04f 30ff 	mov.w	r0, #4294967295
 80051ce:	b004      	add	sp, #16
 80051d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	f043 0320 	orr.w	r3, r3, #32
 80051da:	6023      	str	r3, [r4, #0]
 80051dc:	2778      	movs	r7, #120	@ 0x78
 80051de:	4832      	ldr	r0, [pc, #200]	@ (80052a8 <_printf_i+0x238>)
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051e6:	061f      	lsls	r7, r3, #24
 80051e8:	6831      	ldr	r1, [r6, #0]
 80051ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80051ee:	d402      	bmi.n	80051f6 <_printf_i+0x186>
 80051f0:	065f      	lsls	r7, r3, #25
 80051f2:	bf48      	it	mi
 80051f4:	b2ad      	uxthmi	r5, r5
 80051f6:	6031      	str	r1, [r6, #0]
 80051f8:	07d9      	lsls	r1, r3, #31
 80051fa:	bf44      	itt	mi
 80051fc:	f043 0320 	orrmi.w	r3, r3, #32
 8005200:	6023      	strmi	r3, [r4, #0]
 8005202:	b11d      	cbz	r5, 800520c <_printf_i+0x19c>
 8005204:	2310      	movs	r3, #16
 8005206:	e7ad      	b.n	8005164 <_printf_i+0xf4>
 8005208:	4826      	ldr	r0, [pc, #152]	@ (80052a4 <_printf_i+0x234>)
 800520a:	e7e9      	b.n	80051e0 <_printf_i+0x170>
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	f023 0320 	bic.w	r3, r3, #32
 8005212:	6023      	str	r3, [r4, #0]
 8005214:	e7f6      	b.n	8005204 <_printf_i+0x194>
 8005216:	4616      	mov	r6, r2
 8005218:	e7bd      	b.n	8005196 <_printf_i+0x126>
 800521a:	6833      	ldr	r3, [r6, #0]
 800521c:	6825      	ldr	r5, [r4, #0]
 800521e:	1d18      	adds	r0, r3, #4
 8005220:	6961      	ldr	r1, [r4, #20]
 8005222:	6030      	str	r0, [r6, #0]
 8005224:	062e      	lsls	r6, r5, #24
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	d501      	bpl.n	800522e <_printf_i+0x1be>
 800522a:	6019      	str	r1, [r3, #0]
 800522c:	e002      	b.n	8005234 <_printf_i+0x1c4>
 800522e:	0668      	lsls	r0, r5, #25
 8005230:	d5fb      	bpl.n	800522a <_printf_i+0x1ba>
 8005232:	8019      	strh	r1, [r3, #0]
 8005234:	2300      	movs	r3, #0
 8005236:	4616      	mov	r6, r2
 8005238:	6123      	str	r3, [r4, #16]
 800523a:	e7bc      	b.n	80051b6 <_printf_i+0x146>
 800523c:	6833      	ldr	r3, [r6, #0]
 800523e:	2100      	movs	r1, #0
 8005240:	1d1a      	adds	r2, r3, #4
 8005242:	6032      	str	r2, [r6, #0]
 8005244:	681e      	ldr	r6, [r3, #0]
 8005246:	6862      	ldr	r2, [r4, #4]
 8005248:	4630      	mov	r0, r6
 800524a:	f000 f95f 	bl	800550c <memchr>
 800524e:	b108      	cbz	r0, 8005254 <_printf_i+0x1e4>
 8005250:	1b80      	subs	r0, r0, r6
 8005252:	6060      	str	r0, [r4, #4]
 8005254:	6863      	ldr	r3, [r4, #4]
 8005256:	6123      	str	r3, [r4, #16]
 8005258:	2300      	movs	r3, #0
 800525a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800525e:	e7aa      	b.n	80051b6 <_printf_i+0x146>
 8005260:	6923      	ldr	r3, [r4, #16]
 8005262:	4632      	mov	r2, r6
 8005264:	4649      	mov	r1, r9
 8005266:	4640      	mov	r0, r8
 8005268:	47d0      	blx	sl
 800526a:	3001      	adds	r0, #1
 800526c:	d0ad      	beq.n	80051ca <_printf_i+0x15a>
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	079b      	lsls	r3, r3, #30
 8005272:	d413      	bmi.n	800529c <_printf_i+0x22c>
 8005274:	68e0      	ldr	r0, [r4, #12]
 8005276:	9b03      	ldr	r3, [sp, #12]
 8005278:	4298      	cmp	r0, r3
 800527a:	bfb8      	it	lt
 800527c:	4618      	movlt	r0, r3
 800527e:	e7a6      	b.n	80051ce <_printf_i+0x15e>
 8005280:	2301      	movs	r3, #1
 8005282:	4632      	mov	r2, r6
 8005284:	4649      	mov	r1, r9
 8005286:	4640      	mov	r0, r8
 8005288:	47d0      	blx	sl
 800528a:	3001      	adds	r0, #1
 800528c:	d09d      	beq.n	80051ca <_printf_i+0x15a>
 800528e:	3501      	adds	r5, #1
 8005290:	68e3      	ldr	r3, [r4, #12]
 8005292:	9903      	ldr	r1, [sp, #12]
 8005294:	1a5b      	subs	r3, r3, r1
 8005296:	42ab      	cmp	r3, r5
 8005298:	dcf2      	bgt.n	8005280 <_printf_i+0x210>
 800529a:	e7eb      	b.n	8005274 <_printf_i+0x204>
 800529c:	2500      	movs	r5, #0
 800529e:	f104 0619 	add.w	r6, r4, #25
 80052a2:	e7f5      	b.n	8005290 <_printf_i+0x220>
 80052a4:	0800566d 	.word	0x0800566d
 80052a8:	0800567e 	.word	0x0800567e

080052ac <__sflush_r>:
 80052ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80052b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052b4:	0716      	lsls	r6, r2, #28
 80052b6:	4605      	mov	r5, r0
 80052b8:	460c      	mov	r4, r1
 80052ba:	d454      	bmi.n	8005366 <__sflush_r+0xba>
 80052bc:	684b      	ldr	r3, [r1, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	dc02      	bgt.n	80052c8 <__sflush_r+0x1c>
 80052c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	dd48      	ble.n	800535a <__sflush_r+0xae>
 80052c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80052ca:	2e00      	cmp	r6, #0
 80052cc:	d045      	beq.n	800535a <__sflush_r+0xae>
 80052ce:	2300      	movs	r3, #0
 80052d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80052d4:	682f      	ldr	r7, [r5, #0]
 80052d6:	6a21      	ldr	r1, [r4, #32]
 80052d8:	602b      	str	r3, [r5, #0]
 80052da:	d030      	beq.n	800533e <__sflush_r+0x92>
 80052dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80052de:	89a3      	ldrh	r3, [r4, #12]
 80052e0:	0759      	lsls	r1, r3, #29
 80052e2:	d505      	bpl.n	80052f0 <__sflush_r+0x44>
 80052e4:	6863      	ldr	r3, [r4, #4]
 80052e6:	1ad2      	subs	r2, r2, r3
 80052e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80052ea:	b10b      	cbz	r3, 80052f0 <__sflush_r+0x44>
 80052ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80052ee:	1ad2      	subs	r2, r2, r3
 80052f0:	2300      	movs	r3, #0
 80052f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80052f4:	6a21      	ldr	r1, [r4, #32]
 80052f6:	4628      	mov	r0, r5
 80052f8:	47b0      	blx	r6
 80052fa:	1c43      	adds	r3, r0, #1
 80052fc:	89a3      	ldrh	r3, [r4, #12]
 80052fe:	d106      	bne.n	800530e <__sflush_r+0x62>
 8005300:	6829      	ldr	r1, [r5, #0]
 8005302:	291d      	cmp	r1, #29
 8005304:	d82b      	bhi.n	800535e <__sflush_r+0xb2>
 8005306:	4a2a      	ldr	r2, [pc, #168]	@ (80053b0 <__sflush_r+0x104>)
 8005308:	40ca      	lsrs	r2, r1
 800530a:	07d6      	lsls	r6, r2, #31
 800530c:	d527      	bpl.n	800535e <__sflush_r+0xb2>
 800530e:	2200      	movs	r2, #0
 8005310:	04d9      	lsls	r1, r3, #19
 8005312:	6062      	str	r2, [r4, #4]
 8005314:	6922      	ldr	r2, [r4, #16]
 8005316:	6022      	str	r2, [r4, #0]
 8005318:	d504      	bpl.n	8005324 <__sflush_r+0x78>
 800531a:	1c42      	adds	r2, r0, #1
 800531c:	d101      	bne.n	8005322 <__sflush_r+0x76>
 800531e:	682b      	ldr	r3, [r5, #0]
 8005320:	b903      	cbnz	r3, 8005324 <__sflush_r+0x78>
 8005322:	6560      	str	r0, [r4, #84]	@ 0x54
 8005324:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005326:	602f      	str	r7, [r5, #0]
 8005328:	b1b9      	cbz	r1, 800535a <__sflush_r+0xae>
 800532a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800532e:	4299      	cmp	r1, r3
 8005330:	d002      	beq.n	8005338 <__sflush_r+0x8c>
 8005332:	4628      	mov	r0, r5
 8005334:	f7ff fc9e 	bl	8004c74 <_free_r>
 8005338:	2300      	movs	r3, #0
 800533a:	6363      	str	r3, [r4, #52]	@ 0x34
 800533c:	e00d      	b.n	800535a <__sflush_r+0xae>
 800533e:	2301      	movs	r3, #1
 8005340:	4628      	mov	r0, r5
 8005342:	47b0      	blx	r6
 8005344:	4602      	mov	r2, r0
 8005346:	1c50      	adds	r0, r2, #1
 8005348:	d1c9      	bne.n	80052de <__sflush_r+0x32>
 800534a:	682b      	ldr	r3, [r5, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0c6      	beq.n	80052de <__sflush_r+0x32>
 8005350:	2b1d      	cmp	r3, #29
 8005352:	d001      	beq.n	8005358 <__sflush_r+0xac>
 8005354:	2b16      	cmp	r3, #22
 8005356:	d11d      	bne.n	8005394 <__sflush_r+0xe8>
 8005358:	602f      	str	r7, [r5, #0]
 800535a:	2000      	movs	r0, #0
 800535c:	e021      	b.n	80053a2 <__sflush_r+0xf6>
 800535e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005362:	b21b      	sxth	r3, r3
 8005364:	e01a      	b.n	800539c <__sflush_r+0xf0>
 8005366:	690f      	ldr	r7, [r1, #16]
 8005368:	2f00      	cmp	r7, #0
 800536a:	d0f6      	beq.n	800535a <__sflush_r+0xae>
 800536c:	0793      	lsls	r3, r2, #30
 800536e:	680e      	ldr	r6, [r1, #0]
 8005370:	600f      	str	r7, [r1, #0]
 8005372:	bf0c      	ite	eq
 8005374:	694b      	ldreq	r3, [r1, #20]
 8005376:	2300      	movne	r3, #0
 8005378:	eba6 0807 	sub.w	r8, r6, r7
 800537c:	608b      	str	r3, [r1, #8]
 800537e:	f1b8 0f00 	cmp.w	r8, #0
 8005382:	ddea      	ble.n	800535a <__sflush_r+0xae>
 8005384:	4643      	mov	r3, r8
 8005386:	463a      	mov	r2, r7
 8005388:	6a21      	ldr	r1, [r4, #32]
 800538a:	4628      	mov	r0, r5
 800538c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800538e:	47b0      	blx	r6
 8005390:	2800      	cmp	r0, #0
 8005392:	dc08      	bgt.n	80053a6 <__sflush_r+0xfa>
 8005394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005398:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800539c:	f04f 30ff 	mov.w	r0, #4294967295
 80053a0:	81a3      	strh	r3, [r4, #12]
 80053a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053a6:	4407      	add	r7, r0
 80053a8:	eba8 0800 	sub.w	r8, r8, r0
 80053ac:	e7e7      	b.n	800537e <__sflush_r+0xd2>
 80053ae:	bf00      	nop
 80053b0:	20400001 	.word	0x20400001

080053b4 <_fflush_r>:
 80053b4:	b538      	push	{r3, r4, r5, lr}
 80053b6:	690b      	ldr	r3, [r1, #16]
 80053b8:	4605      	mov	r5, r0
 80053ba:	460c      	mov	r4, r1
 80053bc:	b913      	cbnz	r3, 80053c4 <_fflush_r+0x10>
 80053be:	2500      	movs	r5, #0
 80053c0:	4628      	mov	r0, r5
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	b118      	cbz	r0, 80053ce <_fflush_r+0x1a>
 80053c6:	6a03      	ldr	r3, [r0, #32]
 80053c8:	b90b      	cbnz	r3, 80053ce <_fflush_r+0x1a>
 80053ca:	f7ff fa49 	bl	8004860 <__sinit>
 80053ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0f3      	beq.n	80053be <_fflush_r+0xa>
 80053d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80053d8:	07d0      	lsls	r0, r2, #31
 80053da:	d404      	bmi.n	80053e6 <_fflush_r+0x32>
 80053dc:	0599      	lsls	r1, r3, #22
 80053de:	d402      	bmi.n	80053e6 <_fflush_r+0x32>
 80053e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053e2:	f7ff fc44 	bl	8004c6e <__retarget_lock_acquire_recursive>
 80053e6:	4628      	mov	r0, r5
 80053e8:	4621      	mov	r1, r4
 80053ea:	f7ff ff5f 	bl	80052ac <__sflush_r>
 80053ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80053f0:	4605      	mov	r5, r0
 80053f2:	07da      	lsls	r2, r3, #31
 80053f4:	d4e4      	bmi.n	80053c0 <_fflush_r+0xc>
 80053f6:	89a3      	ldrh	r3, [r4, #12]
 80053f8:	059b      	lsls	r3, r3, #22
 80053fa:	d4e1      	bmi.n	80053c0 <_fflush_r+0xc>
 80053fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053fe:	f7ff fc37 	bl	8004c70 <__retarget_lock_release_recursive>
 8005402:	e7dd      	b.n	80053c0 <_fflush_r+0xc>

08005404 <__swhatbuf_r>:
 8005404:	b570      	push	{r4, r5, r6, lr}
 8005406:	460c      	mov	r4, r1
 8005408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800540c:	b096      	sub	sp, #88	@ 0x58
 800540e:	4615      	mov	r5, r2
 8005410:	2900      	cmp	r1, #0
 8005412:	461e      	mov	r6, r3
 8005414:	da0c      	bge.n	8005430 <__swhatbuf_r+0x2c>
 8005416:	89a3      	ldrh	r3, [r4, #12]
 8005418:	2100      	movs	r1, #0
 800541a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800541e:	bf14      	ite	ne
 8005420:	2340      	movne	r3, #64	@ 0x40
 8005422:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005426:	2000      	movs	r0, #0
 8005428:	6031      	str	r1, [r6, #0]
 800542a:	602b      	str	r3, [r5, #0]
 800542c:	b016      	add	sp, #88	@ 0x58
 800542e:	bd70      	pop	{r4, r5, r6, pc}
 8005430:	466a      	mov	r2, sp
 8005432:	f000 f849 	bl	80054c8 <_fstat_r>
 8005436:	2800      	cmp	r0, #0
 8005438:	dbed      	blt.n	8005416 <__swhatbuf_r+0x12>
 800543a:	9901      	ldr	r1, [sp, #4]
 800543c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005440:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005444:	4259      	negs	r1, r3
 8005446:	4159      	adcs	r1, r3
 8005448:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800544c:	e7eb      	b.n	8005426 <__swhatbuf_r+0x22>

0800544e <__smakebuf_r>:
 800544e:	898b      	ldrh	r3, [r1, #12]
 8005450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005452:	079d      	lsls	r5, r3, #30
 8005454:	4606      	mov	r6, r0
 8005456:	460c      	mov	r4, r1
 8005458:	d507      	bpl.n	800546a <__smakebuf_r+0x1c>
 800545a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800545e:	6023      	str	r3, [r4, #0]
 8005460:	6123      	str	r3, [r4, #16]
 8005462:	2301      	movs	r3, #1
 8005464:	6163      	str	r3, [r4, #20]
 8005466:	b003      	add	sp, #12
 8005468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800546a:	ab01      	add	r3, sp, #4
 800546c:	466a      	mov	r2, sp
 800546e:	f7ff ffc9 	bl	8005404 <__swhatbuf_r>
 8005472:	9f00      	ldr	r7, [sp, #0]
 8005474:	4605      	mov	r5, r0
 8005476:	4630      	mov	r0, r6
 8005478:	4639      	mov	r1, r7
 800547a:	f7ff f8d9 	bl	8004630 <_malloc_r>
 800547e:	b948      	cbnz	r0, 8005494 <__smakebuf_r+0x46>
 8005480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005484:	059a      	lsls	r2, r3, #22
 8005486:	d4ee      	bmi.n	8005466 <__smakebuf_r+0x18>
 8005488:	f023 0303 	bic.w	r3, r3, #3
 800548c:	f043 0302 	orr.w	r3, r3, #2
 8005490:	81a3      	strh	r3, [r4, #12]
 8005492:	e7e2      	b.n	800545a <__smakebuf_r+0xc>
 8005494:	89a3      	ldrh	r3, [r4, #12]
 8005496:	6020      	str	r0, [r4, #0]
 8005498:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800549c:	81a3      	strh	r3, [r4, #12]
 800549e:	9b01      	ldr	r3, [sp, #4]
 80054a0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80054a4:	b15b      	cbz	r3, 80054be <__smakebuf_r+0x70>
 80054a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054aa:	4630      	mov	r0, r6
 80054ac:	f000 f81e 	bl	80054ec <_isatty_r>
 80054b0:	b128      	cbz	r0, 80054be <__smakebuf_r+0x70>
 80054b2:	89a3      	ldrh	r3, [r4, #12]
 80054b4:	f023 0303 	bic.w	r3, r3, #3
 80054b8:	f043 0301 	orr.w	r3, r3, #1
 80054bc:	81a3      	strh	r3, [r4, #12]
 80054be:	89a3      	ldrh	r3, [r4, #12]
 80054c0:	431d      	orrs	r5, r3
 80054c2:	81a5      	strh	r5, [r4, #12]
 80054c4:	e7cf      	b.n	8005466 <__smakebuf_r+0x18>
	...

080054c8 <_fstat_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	2300      	movs	r3, #0
 80054cc:	4d06      	ldr	r5, [pc, #24]	@ (80054e8 <_fstat_r+0x20>)
 80054ce:	4604      	mov	r4, r0
 80054d0:	4608      	mov	r0, r1
 80054d2:	4611      	mov	r1, r2
 80054d4:	602b      	str	r3, [r5, #0]
 80054d6:	f7fb fae4 	bl	8000aa2 <_fstat>
 80054da:	1c43      	adds	r3, r0, #1
 80054dc:	d102      	bne.n	80054e4 <_fstat_r+0x1c>
 80054de:	682b      	ldr	r3, [r5, #0]
 80054e0:	b103      	cbz	r3, 80054e4 <_fstat_r+0x1c>
 80054e2:	6023      	str	r3, [r4, #0]
 80054e4:	bd38      	pop	{r3, r4, r5, pc}
 80054e6:	bf00      	nop
 80054e8:	200003a4 	.word	0x200003a4

080054ec <_isatty_r>:
 80054ec:	b538      	push	{r3, r4, r5, lr}
 80054ee:	2300      	movs	r3, #0
 80054f0:	4d05      	ldr	r5, [pc, #20]	@ (8005508 <_isatty_r+0x1c>)
 80054f2:	4604      	mov	r4, r0
 80054f4:	4608      	mov	r0, r1
 80054f6:	602b      	str	r3, [r5, #0]
 80054f8:	f7fb fae3 	bl	8000ac2 <_isatty>
 80054fc:	1c43      	adds	r3, r0, #1
 80054fe:	d102      	bne.n	8005506 <_isatty_r+0x1a>
 8005500:	682b      	ldr	r3, [r5, #0]
 8005502:	b103      	cbz	r3, 8005506 <_isatty_r+0x1a>
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	bd38      	pop	{r3, r4, r5, pc}
 8005508:	200003a4 	.word	0x200003a4

0800550c <memchr>:
 800550c:	b2c9      	uxtb	r1, r1
 800550e:	4603      	mov	r3, r0
 8005510:	4402      	add	r2, r0
 8005512:	b510      	push	{r4, lr}
 8005514:	4293      	cmp	r3, r2
 8005516:	4618      	mov	r0, r3
 8005518:	d101      	bne.n	800551e <memchr+0x12>
 800551a:	2000      	movs	r0, #0
 800551c:	e003      	b.n	8005526 <memchr+0x1a>
 800551e:	7804      	ldrb	r4, [r0, #0]
 8005520:	3301      	adds	r3, #1
 8005522:	428c      	cmp	r4, r1
 8005524:	d1f6      	bne.n	8005514 <memchr+0x8>
 8005526:	bd10      	pop	{r4, pc}

08005528 <_init>:
 8005528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552a:	bf00      	nop
 800552c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800552e:	bc08      	pop	{r3}
 8005530:	469e      	mov	lr, r3
 8005532:	4770      	bx	lr

08005534 <_fini>:
 8005534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005536:	bf00      	nop
 8005538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553a:	bc08      	pop	{r3}
 800553c:	469e      	mov	lr, r3
 800553e:	4770      	bx	lr
