
Bootloader_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ea0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08004030  08004030  00005030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004100  08004100  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004100  08004100  00005100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004108  08004108  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004108  08004108  00005108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800410c  0800410c  0000510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004110  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000068  08004178  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08004178  00006260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9b8  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a4c  00000000  00000000  00010a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  000124a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000734  00000000  00000000  00012e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022323  00000000  00000000  0001354c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b483  00000000  00000000  0003586f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc705  00000000  00000000  00040cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d3f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d34  00000000  00000000  0010d43c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00110170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004018 	.word	0x08004018

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004018 	.word	0x08004018

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000564:	f000 fb16 	bl	8000b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f836 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056c:	f000 f8b6 	bl	80006dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000570:	f000 f884 	bl	800067c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Bootloader (%d.%d)\n", BL_version[0], BL_version[1]);
 8000574:	2300      	movs	r3, #0
 8000576:	2201      	movs	r2, #1
 8000578:	4619      	mov	r1, r3
 800057a:	4813      	ldr	r0, [pc, #76]	@ (80005c8 <main+0x68>)
 800057c:	f002 fede 	bl	800333c <iprintf>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000586:	4811      	ldr	r0, [pc, #68]	@ (80005cc <main+0x6c>)
 8000588:	f000 fe40 	bl	800120c <HAL_GPIO_WritePin>
  printf("After LED Toggle (%d.%d)\n", BL_version[0], BL_version[1]);
 800058c:	2300      	movs	r3, #0
 800058e:	2201      	movs	r2, #1
 8000590:	4619      	mov	r1, r3
 8000592:	480f      	ldr	r0, [pc, #60]	@ (80005d0 <main+0x70>)
 8000594:	f002 fed2 	bl	800333c <iprintf>
  HAL_Delay(5000);
 8000598:	f241 3088 	movw	r0, #5000	@ 0x1388
 800059c:	f000 fbb2 	bl	8000d04 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005a6:	4809      	ldr	r0, [pc, #36]	@ (80005cc <main+0x6c>)
 80005a8:	f000 fe30 	bl	800120c <HAL_GPIO_WritePin>
  printf("After delay (%d.%d)\n", BL_version[0], BL_version[1]);
 80005ac:	2300      	movs	r3, #0
 80005ae:	2201      	movs	r2, #1
 80005b0:	4619      	mov	r1, r3
 80005b2:	4808      	ldr	r0, [pc, #32]	@ (80005d4 <main+0x74>)
 80005b4:	f002 fec2 	bl	800333c <iprintf>
  HAL_Delay(1000);
 80005b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005bc:	f000 fba2 	bl	8000d04 <HAL_Delay>

  goto_application();
 80005c0:	f000 f928 	bl	8000814 <goto_application>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <main+0x64>
 80005c8:	08004030 	.word	0x08004030
 80005cc:	48000400 	.word	0x48000400
 80005d0:	08004050 	.word	0x08004050
 80005d4:	0800406c 	.word	0x0800406c

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b096      	sub	sp, #88	@ 0x58
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	2244      	movs	r2, #68	@ 0x44
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fefd 	bl	80033e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	463b      	mov	r3, r7
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005fe:	f000 fe2b 	bl	8001258 <HAL_PWREx_ControlVoltageScaling>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000608:	f000 f932 	bl	8000870 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060c:	2302      	movs	r3, #2
 800060e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000610:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000614:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000616:	2310      	movs	r3, #16
 8000618:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061e:	2302      	movs	r3, #2
 8000620:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000622:	2301      	movs	r3, #1
 8000624:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000626:	230a      	movs	r3, #10
 8000628:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800062a:	2307      	movs	r3, #7
 800062c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800062e:	2302      	movs	r3, #2
 8000630:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000632:	2302      	movs	r3, #2
 8000634:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4618      	mov	r0, r3
 800063c:	f000 fefa 	bl	8001434 <HAL_RCC_OscConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000646:	f000 f913 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	230f      	movs	r3, #15
 800064c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2303      	movs	r3, #3
 8000650:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800065e:	463b      	mov	r3, r7
 8000660:	2104      	movs	r1, #4
 8000662:	4618      	mov	r0, r3
 8000664:	f001 fafa 	bl	8001c5c <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800066e:	f000 f8ff 	bl	8000870 <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3758      	adds	r7, #88	@ 0x58
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_USART2_UART_Init+0x58>)
 8000682:	4a15      	ldr	r2, [pc, #84]	@ (80006d8 <MX_USART2_UART_Init+0x5c>)
 8000684:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000686:	4b13      	ldr	r3, [pc, #76]	@ (80006d4 <MX_USART2_UART_Init+0x58>)
 8000688:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800068c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <MX_USART2_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <MX_USART2_UART_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069a:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <MX_USART2_UART_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <MX_USART2_UART_Init+0x58>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	@ (80006d4 <MX_USART2_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ac:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <MX_USART2_UART_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <MX_USART2_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b8:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <MX_USART2_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	@ (80006d4 <MX_USART2_UART_Init+0x58>)
 80006c0:	f002 f82c 	bl	800271c <HAL_UART_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ca:	f000 f8d1 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000084 	.word	0x20000084
 80006d8:	40004400 	.word	0x40004400

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	@ 0x28
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f2:	4b3c      	ldr	r3, [pc, #240]	@ (80007e4 <MX_GPIO_Init+0x108>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f6:	4a3b      	ldr	r2, [pc, #236]	@ (80007e4 <MX_GPIO_Init+0x108>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006fe:	4b39      	ldr	r3, [pc, #228]	@ (80007e4 <MX_GPIO_Init+0x108>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070a:	4b36      	ldr	r3, [pc, #216]	@ (80007e4 <MX_GPIO_Init+0x108>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070e:	4a35      	ldr	r2, [pc, #212]	@ (80007e4 <MX_GPIO_Init+0x108>)
 8000710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000716:	4b33      	ldr	r3, [pc, #204]	@ (80007e4 <MX_GPIO_Init+0x108>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b30      	ldr	r3, [pc, #192]	@ (80007e4 <MX_GPIO_Init+0x108>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	4a2f      	ldr	r2, [pc, #188]	@ (80007e4 <MX_GPIO_Init+0x108>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072e:	4b2d      	ldr	r3, [pc, #180]	@ (80007e4 <MX_GPIO_Init+0x108>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b2a      	ldr	r3, [pc, #168]	@ (80007e4 <MX_GPIO_Init+0x108>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	4a29      	ldr	r2, [pc, #164]	@ (80007e4 <MX_GPIO_Init+0x108>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000746:	4b27      	ldr	r3, [pc, #156]	@ (80007e4 <MX_GPIO_Init+0x108>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	21b0      	movs	r1, #176	@ 0xb0
 8000756:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800075a:	f000 fd57 	bl	800120c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000764:	4820      	ldr	r0, [pc, #128]	@ (80007e8 <MX_GPIO_Init+0x10c>)
 8000766:	f000 fd51 	bl	800120c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800076a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000770:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	481a      	ldr	r0, [pc, #104]	@ (80007ec <MX_GPIO_Init+0x110>)
 8000782:	f000 fbc9 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000786:	23b0      	movs	r3, #176	@ 0xb0
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a0:	f000 fbba 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80007a4:	2340      	movs	r3, #64	@ 0x40
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ba:	f000 fbad 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80007be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	4804      	ldr	r0, [pc, #16]	@ (80007e8 <MX_GPIO_Init+0x10c>)
 80007d8:	f000 fb9e 	bl	8000f18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007dc:	bf00      	nop
 80007de:	3728      	adds	r7, #40	@ 0x28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40021000 	.word	0x40021000
 80007e8:	48000400 	.word	0x48000400
 80007ec:	48000800 	.word	0x48000800

080007f0 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80007f8:	1d39      	adds	r1, r7, #4
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
 80007fe:	2201      	movs	r2, #1
 8000800:	4803      	ldr	r0, [pc, #12]	@ (8000810 <__io_putchar+0x20>)
 8000802:	f001 ffd9 	bl	80027b8 <HAL_UART_Transmit>

	return ch;
 8000806:	687b      	ldr	r3, [r7, #4]
}
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000084 	.word	0x20000084

08000814 <goto_application>:

static void goto_application(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
//	void(*app_reset_handler) (void) = (void*) (*(volatile uint32_t*) (0x08020000 + 4));
	void (*app_reset_handler)(void) = (void (*)(void))(*(volatile uint32_t*)(0x08020000 + 4));
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <goto_application+0x4c>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000820:	2201      	movs	r2, #1
 8000822:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000826:	480f      	ldr	r0, [pc, #60]	@ (8000864 <goto_application+0x50>)
 8000828:	f000 fcf0 	bl	800120c <HAL_GPIO_WritePin>

//	uint32_t appStack = *(volatile uint32_t*) (0x08010000);
//	__set_MSP(appStack);
	/* Reset the Clock */
	  HAL_RCC_DeInit();
 800082c:	f000 fd6a 	bl	8001304 <HAL_RCC_DeInit>
	  HAL_DeInit();
 8000830:	f000 f9d0 	bl	8000bd4 <HAL_DeInit>
	  __set_MSP(*(volatile uint32_t*) 0x08020000);
 8000834:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <goto_application+0x54>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	f383 8808 	msr	MSP, r3
}
 8000840:	bf00      	nop
	  SysTick->CTRL = 0;
 8000842:	4b0a      	ldr	r3, [pc, #40]	@ (800086c <goto_application+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
	  SysTick->LOAD = 0;
 8000848:	4b08      	ldr	r3, [pc, #32]	@ (800086c <goto_application+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	605a      	str	r2, [r3, #4]
	  SysTick->VAL = 0;
 800084e:	4b07      	ldr	r3, [pc, #28]	@ (800086c <goto_application+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]




	app_reset_handler();
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4798      	blx	r3
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	08020004 	.word	0x08020004
 8000864:	48000400 	.word	0x48000400
 8000868:	08020000 	.word	0x08020000
 800086c:	e000e010 	.word	0xe000e010

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <Error_Handler+0x8>

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <HAL_MspInit+0x44>)
 8000884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000886:	4a0e      	ldr	r2, [pc, #56]	@ (80008c0 <HAL_MspInit+0x44>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6613      	str	r3, [r2, #96]	@ 0x60
 800088e:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <HAL_MspInit+0x44>)
 8000890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <HAL_MspInit+0x44>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800089e:	4a08      	ldr	r2, [pc, #32]	@ (80008c0 <HAL_MspInit+0x44>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <HAL_MspInit+0x44>)
 80008a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000

080008c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b0a2      	sub	sp, #136	@ 0x88
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	2260      	movs	r2, #96	@ 0x60
 80008e2:	2100      	movs	r1, #0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 fd7e 	bl	80033e6 <memset>
  if(huart->Instance==USART2)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a20      	ldr	r2, [pc, #128]	@ (8000970 <HAL_UART_MspInit+0xac>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d138      	bne.n	8000966 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008f4:	2302      	movs	r3, #2
 80008f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4618      	mov	r0, r3
 8000902:	f001 fbcf 	bl	80020a4 <HAL_RCCEx_PeriphCLKConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800090c:	f7ff ffb0 	bl	8000870 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000910:	4b18      	ldr	r3, [pc, #96]	@ (8000974 <HAL_UART_MspInit+0xb0>)
 8000912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000914:	4a17      	ldr	r2, [pc, #92]	@ (8000974 <HAL_UART_MspInit+0xb0>)
 8000916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800091a:	6593      	str	r3, [r2, #88]	@ 0x58
 800091c:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <HAL_UART_MspInit+0xb0>)
 800091e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000928:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <HAL_UART_MspInit+0xb0>)
 800092a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092c:	4a11      	ldr	r2, [pc, #68]	@ (8000974 <HAL_UART_MspInit+0xb0>)
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000934:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <HAL_UART_MspInit+0xb0>)
 8000936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000938:	f003 0301 	and.w	r3, r3, #1
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000940:	230c      	movs	r3, #12
 8000942:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000952:	2307      	movs	r3, #7
 8000954:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800095c:	4619      	mov	r1, r3
 800095e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000962:	f000 fad9 	bl	8000f18 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000966:	bf00      	nop
 8000968:	3788      	adds	r7, #136	@ 0x88
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40004400 	.word	0x40004400
 8000974:	40021000 	.word	0x40021000

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <NMI_Handler+0x4>

08000980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <MemManage_Handler+0x4>

08000990 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <UsageFault_Handler+0x4>

080009a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ce:	f000 f979 	bl	8000cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b086      	sub	sp, #24
 80009da:	af00      	add	r7, sp, #0
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	e00a      	b.n	80009fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009e8:	f3af 8000 	nop.w
 80009ec:	4601      	mov	r1, r0
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	1c5a      	adds	r2, r3, #1
 80009f2:	60ba      	str	r2, [r7, #8]
 80009f4:	b2ca      	uxtb	r2, r1
 80009f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	3301      	adds	r3, #1
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	697a      	ldr	r2, [r7, #20]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	dbf0      	blt.n	80009e8 <_read+0x12>
  }

  return len;
 8000a06:	687b      	ldr	r3, [r7, #4]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	e009      	b.n	8000a36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	1c5a      	adds	r2, r3, #1
 8000a26:	60ba      	str	r2, [r7, #8]
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fee0 	bl	80007f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	3301      	adds	r3, #1
 8000a34:	617b      	str	r3, [r7, #20]
 8000a36:	697a      	ldr	r2, [r7, #20]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	dbf1      	blt.n	8000a22 <_write+0x12>
  }
  return len;
 8000a3e:	687b      	ldr	r3, [r7, #4]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <_close>:

int _close(int file)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a70:	605a      	str	r2, [r3, #4]
  return 0;
 8000a72:	2300      	movs	r3, #0
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <_isatty>:

int _isatty(int file)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a88:	2301      	movs	r3, #1
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b085      	sub	sp, #20
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	60f8      	str	r0, [r7, #12]
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000aa2:	2300      	movs	r3, #0
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab8:	4a14      	ldr	r2, [pc, #80]	@ (8000b0c <_sbrk+0x5c>)
 8000aba:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <_sbrk+0x60>)
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac4:	4b13      	ldr	r3, [pc, #76]	@ (8000b14 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d102      	bne.n	8000ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000acc:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <_sbrk+0x64>)
 8000ace:	4a12      	ldr	r2, [pc, #72]	@ (8000b18 <_sbrk+0x68>)
 8000ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ad2:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <_sbrk+0x64>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4413      	add	r3, r2
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d207      	bcs.n	8000af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae0:	f002 fcd0 	bl	8003484 <__errno>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
 8000aee:	e009      	b.n	8000b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af0:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000af6:	4b07      	ldr	r3, [pc, #28]	@ (8000b14 <_sbrk+0x64>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	4a05      	ldr	r2, [pc, #20]	@ (8000b14 <_sbrk+0x64>)
 8000b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b02:	68fb      	ldr	r3, [r7, #12]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20010000 	.word	0x20010000
 8000b10:	00000400 	.word	0x00000400
 8000b14:	2000010c 	.word	0x2000010c
 8000b18:	20000260 	.word	0x20000260

08000b1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b20:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <SystemInit+0x20>)
 8000b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b26:	4a05      	ldr	r2, [pc, #20]	@ (8000b3c <SystemInit+0x20>)
 8000b28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b44:	f7ff ffea 	bl	8000b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b48:	480c      	ldr	r0, [pc, #48]	@ (8000b7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b4a:	490d      	ldr	r1, [pc, #52]	@ (8000b80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b84 <LoopForever+0xe>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b50:	e002      	b.n	8000b58 <LoopCopyDataInit>

08000b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b56:	3304      	adds	r3, #4

08000b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b5c:	d3f9      	bcc.n	8000b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b60:	4c0a      	ldr	r4, [pc, #40]	@ (8000b8c <LoopForever+0x16>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b64:	e001      	b.n	8000b6a <LoopFillZerobss>

08000b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b68:	3204      	adds	r2, #4

08000b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b6c:	d3fb      	bcc.n	8000b66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b6e:	f002 fc8f 	bl	8003490 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b72:	f7ff fcf5 	bl	8000560 <main>

08000b76 <LoopForever>:

LoopForever:
    b LoopForever
 8000b76:	e7fe      	b.n	8000b76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b78:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b80:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b84:	08004110 	.word	0x08004110
  ldr r2, =_sbss
 8000b88:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b8c:	20000260 	.word	0x20000260

08000b90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b90:	e7fe      	b.n	8000b90 <ADC1_IRQHandler>
	...

08000b94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <HAL_Init+0x3c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd0 <HAL_Init+0x3c>)
 8000ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ba8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000baa:	2003      	movs	r0, #3
 8000bac:	f000 f980 	bl	8000eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f000 f84b 	bl	8000c4c <HAL_InitTick>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d002      	beq.n	8000bc2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	71fb      	strb	r3, [r7, #7]
 8000bc0:	e001      	b.n	8000bc6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bc2:	f7ff fe5b 	bl	800087c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40022000 	.word	0x40022000

08000bd4 <HAL_DeInit>:
  * @brief De-initialize common part of the HAL and stop the source of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000bd8:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <HAL_DeInit+0x64>)
 8000bda:	f04f 32ff 	mov.w	r2, #4294967295
 8000bde:	639a      	str	r2, [r3, #56]	@ 0x38
 8000be0:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <HAL_DeInit+0x64>)
 8000be2:	f04f 32ff 	mov.w	r2, #4294967295
 8000be6:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_RCC_APB1_RELEASE_RESET();
 8000be8:	4b13      	ldr	r3, [pc, #76]	@ (8000c38 <HAL_DeInit+0x64>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bee:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <HAL_DeInit+0x64>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	63da      	str	r2, [r3, #60]	@ 0x3c

  __HAL_RCC_APB2_FORCE_RESET();
 8000bf4:	4b10      	ldr	r3, [pc, #64]	@ (8000c38 <HAL_DeInit+0x64>)
 8000bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8000bfa:	641a      	str	r2, [r3, #64]	@ 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <HAL_DeInit+0x64>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	641a      	str	r2, [r3, #64]	@ 0x40

  __HAL_RCC_AHB1_FORCE_RESET();
 8000c02:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <HAL_DeInit+0x64>)
 8000c04:	f04f 32ff 	mov.w	r2, #4294967295
 8000c08:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <HAL_DeInit+0x64>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	629a      	str	r2, [r3, #40]	@ 0x28

  __HAL_RCC_AHB2_FORCE_RESET();
 8000c10:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <HAL_DeInit+0x64>)
 8000c12:	f04f 32ff 	mov.w	r2, #4294967295
 8000c16:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000c18:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <HAL_DeInit+0x64>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  __HAL_RCC_AHB3_FORCE_RESET();
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <HAL_DeInit+0x64>)
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	631a      	str	r2, [r3, #48]	@ 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000c26:	4b04      	ldr	r3, [pc, #16]	@ (8000c38 <HAL_DeInit+0x64>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000c2c:	f000 f806 	bl	8000c3c <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000

08000c3c <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c58:	4b17      	ldr	r3, [pc, #92]	@ (8000cb8 <HAL_InitTick+0x6c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d023      	beq.n	8000ca8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c60:	4b16      	ldr	r3, [pc, #88]	@ (8000cbc <HAL_InitTick+0x70>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <HAL_InitTick+0x6c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 f941 	bl	8000efe <HAL_SYSTICK_Config>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10f      	bne.n	8000ca2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d809      	bhi.n	8000c9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f000 f919 	bl	8000ec6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c94:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc0 <HAL_InitTick+0x74>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	e007      	b.n	8000cac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	e004      	b.n	8000cac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
 8000ca6:	e001      	b.n	8000cac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_IncTick+0x20>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <HAL_IncTick+0x24>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a04      	ldr	r2, [pc, #16]	@ (8000ce8 <HAL_IncTick+0x24>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000110 	.word	0x20000110

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	@ (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000110 	.word	0x20000110

08000d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d0c:	f7ff ffee 	bl	8000cec <HAL_GetTick>
 8000d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d1c:	d005      	beq.n	8000d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <HAL_Delay+0x44>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4413      	add	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d2a:	bf00      	nop
 8000d2c:	f7ff ffde 	bl	8000cec <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d8f7      	bhi.n	8000d2c <HAL_Delay+0x28>
  {
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008

08000d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7e:	4a04      	ldr	r2, [pc, #16]	@ (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	60d3      	str	r3, [r2, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d98:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <__NVIC_GetPriorityGrouping+0x18>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	f003 0307 	and.w	r3, r3, #7
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	@ (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	@ (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	@ 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	@ 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e7c:	d301      	bcc.n	8000e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00f      	b.n	8000ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e82:	4a0a      	ldr	r2, [pc, #40]	@ (8000eac <SysTick_Config+0x40>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8a:	210f      	movs	r1, #15
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f7ff ff8e 	bl	8000db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e94:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <SysTick_Config+0x40>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9a:	4b04      	ldr	r3, [pc, #16]	@ (8000eac <SysTick_Config+0x40>)
 8000e9c:	2207      	movs	r2, #7
 8000e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	e000e010 	.word	0xe000e010

08000eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ff47 	bl	8000d4c <__NVIC_SetPriorityGrouping>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed8:	f7ff ff5c 	bl	8000d94 <__NVIC_GetPriorityGrouping>
 8000edc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	68b9      	ldr	r1, [r7, #8]
 8000ee2:	6978      	ldr	r0, [r7, #20]
 8000ee4:	f7ff ff8e 	bl	8000e04 <NVIC_EncodePriority>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff5d 	bl	8000db0 <__NVIC_SetPriority>
}
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ffb0 	bl	8000e6c <SysTick_Config>
 8000f0c:	4603      	mov	r3, r0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b087      	sub	sp, #28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f26:	e154      	b.n	80011d2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	fa01 f303 	lsl.w	r3, r1, r3
 8000f34:	4013      	ands	r3, r2
 8000f36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 8146 	beq.w	80011cc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d005      	beq.n	8000f58 <HAL_GPIO_Init+0x40>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d130      	bne.n	8000fba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f8e:	2201      	movs	r2, #1
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	091b      	lsrs	r3, r3, #4
 8000fa4:	f003 0201 	and.w	r2, r3, #1
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d017      	beq.n	8000ff6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d123      	bne.n	800104a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	08da      	lsrs	r2, r3, #3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3208      	adds	r2, #8
 800100a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	220f      	movs	r2, #15
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	691a      	ldr	r2, [r3, #16]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f003 0307 	and.w	r3, r3, #7
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	08da      	lsrs	r2, r3, #3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3208      	adds	r2, #8
 8001044:	6939      	ldr	r1, [r7, #16]
 8001046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	2203      	movs	r2, #3
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 0203 	and.w	r2, r3, #3
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 80a0 	beq.w	80011cc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108c:	4b58      	ldr	r3, [pc, #352]	@ (80011f0 <HAL_GPIO_Init+0x2d8>)
 800108e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001090:	4a57      	ldr	r2, [pc, #348]	@ (80011f0 <HAL_GPIO_Init+0x2d8>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6613      	str	r3, [r2, #96]	@ 0x60
 8001098:	4b55      	ldr	r3, [pc, #340]	@ (80011f0 <HAL_GPIO_Init+0x2d8>)
 800109a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010a4:	4a53      	ldr	r2, [pc, #332]	@ (80011f4 <HAL_GPIO_Init+0x2dc>)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3302      	adds	r3, #2
 80010ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	220f      	movs	r2, #15
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010ce:	d019      	beq.n	8001104 <HAL_GPIO_Init+0x1ec>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a49      	ldr	r2, [pc, #292]	@ (80011f8 <HAL_GPIO_Init+0x2e0>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d013      	beq.n	8001100 <HAL_GPIO_Init+0x1e8>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a48      	ldr	r2, [pc, #288]	@ (80011fc <HAL_GPIO_Init+0x2e4>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d00d      	beq.n	80010fc <HAL_GPIO_Init+0x1e4>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a47      	ldr	r2, [pc, #284]	@ (8001200 <HAL_GPIO_Init+0x2e8>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d007      	beq.n	80010f8 <HAL_GPIO_Init+0x1e0>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a46      	ldr	r2, [pc, #280]	@ (8001204 <HAL_GPIO_Init+0x2ec>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d101      	bne.n	80010f4 <HAL_GPIO_Init+0x1dc>
 80010f0:	2304      	movs	r3, #4
 80010f2:	e008      	b.n	8001106 <HAL_GPIO_Init+0x1ee>
 80010f4:	2307      	movs	r3, #7
 80010f6:	e006      	b.n	8001106 <HAL_GPIO_Init+0x1ee>
 80010f8:	2303      	movs	r3, #3
 80010fa:	e004      	b.n	8001106 <HAL_GPIO_Init+0x1ee>
 80010fc:	2302      	movs	r3, #2
 80010fe:	e002      	b.n	8001106 <HAL_GPIO_Init+0x1ee>
 8001100:	2301      	movs	r3, #1
 8001102:	e000      	b.n	8001106 <HAL_GPIO_Init+0x1ee>
 8001104:	2300      	movs	r3, #0
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	f002 0203 	and.w	r2, r2, #3
 800110c:	0092      	lsls	r2, r2, #2
 800110e:	4093      	lsls	r3, r2
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001116:	4937      	ldr	r1, [pc, #220]	@ (80011f4 <HAL_GPIO_Init+0x2dc>)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	3302      	adds	r3, #2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001124:	4b38      	ldr	r3, [pc, #224]	@ (8001208 <HAL_GPIO_Init+0x2f0>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	43db      	mvns	r3, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001148:	4a2f      	ldr	r2, [pc, #188]	@ (8001208 <HAL_GPIO_Init+0x2f0>)
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800114e:	4b2e      	ldr	r3, [pc, #184]	@ (8001208 <HAL_GPIO_Init+0x2f0>)
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001172:	4a25      	ldr	r2, [pc, #148]	@ (8001208 <HAL_GPIO_Init+0x2f0>)
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001178:	4b23      	ldr	r3, [pc, #140]	@ (8001208 <HAL_GPIO_Init+0x2f0>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800119c:	4a1a      	ldr	r2, [pc, #104]	@ (8001208 <HAL_GPIO_Init+0x2f0>)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011a2:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <HAL_GPIO_Init+0x2f0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011c6:	4a10      	ldr	r2, [pc, #64]	@ (8001208 <HAL_GPIO_Init+0x2f0>)
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	3301      	adds	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	fa22 f303 	lsr.w	r3, r2, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f47f aea3 	bne.w	8000f28 <HAL_GPIO_Init+0x10>
  }
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	371c      	adds	r7, #28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40010000 	.word	0x40010000
 80011f8:	48000400 	.word	0x48000400
 80011fc:	48000800 	.word	0x48000800
 8001200:	48000c00 	.word	0x48000c00
 8001204:	48001000 	.word	0x48001000
 8001208:	40010400 	.word	0x40010400

0800120c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
 8001218:	4613      	mov	r3, r2
 800121a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800121c:	787b      	ldrb	r3, [r7, #1]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001222:	887a      	ldrh	r2, [r7, #2]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001228:	e002      	b.n	8001230 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800122a:	887a      	ldrh	r2, [r7, #2]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001240:	4b04      	ldr	r3, [pc, #16]	@ (8001254 <HAL_PWREx_GetVoltageRange+0x18>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40007000 	.word	0x40007000

08001258 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001266:	d130      	bne.n	80012ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001268:	4b23      	ldr	r3, [pc, #140]	@ (80012f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001270:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001274:	d038      	beq.n	80012e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001276:	4b20      	ldr	r3, [pc, #128]	@ (80012f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800127e:	4a1e      	ldr	r2, [pc, #120]	@ (80012f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001280:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001284:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001286:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2232      	movs	r2, #50	@ 0x32
 800128c:	fb02 f303 	mul.w	r3, r2, r3
 8001290:	4a1b      	ldr	r2, [pc, #108]	@ (8001300 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001292:	fba2 2303 	umull	r2, r3, r2, r3
 8001296:	0c9b      	lsrs	r3, r3, #18
 8001298:	3301      	adds	r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800129c:	e002      	b.n	80012a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012a4:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012b0:	d102      	bne.n	80012b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1f2      	bne.n	800129e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012b8:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012c4:	d110      	bne.n	80012e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e00f      	b.n	80012ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012ca:	4b0b      	ldr	r3, [pc, #44]	@ (80012f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012d6:	d007      	beq.n	80012e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012d8:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012e0:	4a05      	ldr	r2, [pc, #20]	@ (80012f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40007000 	.word	0x40007000
 80012fc:	20000000 	.word	0x20000000
 8001300:	431bde83 	.word	0x431bde83

08001304 <HAL_RCC_DeInit>:
  *            - Peripheral clock sources
  *            - LSI, LSE and RTC clocks (Backup domain)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Reset to default System clock */
  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800130a:	4b45      	ldr	r3, [pc, #276]	@ (8001420 <HAL_RCC_DeInit+0x11c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a44      	ldr	r2, [pc, #272]	@ (8001420 <HAL_RCC_DeInit+0x11c>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6013      	str	r3, [r2, #0]

  /* Insure MSIRDY bit is set before writing default MSIRANGE value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8001316:	f7ff fce9 	bl	8000cec <HAL_GetTick>
 800131a:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800131c:	e008      	b.n	8001330 <HAL_RCC_DeInit+0x2c>
  {
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800131e:	f7ff fce5 	bl	8000cec <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e073      	b.n	8001418 <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001330:	4b3b      	ldr	r3, [pc, #236]	@ (8001420 <HAL_RCC_DeInit+0x11c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set MSIRANGE default value */
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 800133c:	4b38      	ldr	r3, [pc, #224]	@ (8001420 <HAL_RCC_DeInit+0x11c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001344:	4a36      	ldr	r2, [pc, #216]	@ (8001420 <HAL_RCC_DeInit+0x11c>)
 8001346:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800134a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 800134c:	4b34      	ldr	r3, [pc, #208]	@ (8001420 <HAL_RCC_DeInit+0x11c>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 8001352:	4b34      	ldr	r3, [pc, #208]	@ (8001424 <HAL_RCC_DeInit+0x120>)
 8001354:	4a34      	ldr	r2, [pc, #208]	@ (8001428 <HAL_RCC_DeInit+0x124>)
 8001356:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8001358:	4b34      	ldr	r3, [pc, #208]	@ (800142c <HAL_RCC_DeInit+0x128>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fc75 	bl	8000c4c <HAL_InitTick>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_RCC_DeInit+0x68>
  {
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e055      	b.n	8001418 <HAL_RCC_DeInit+0x114>
  }

  /* Insure MSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 800136c:	f7ff fcbe 	bl	8000cec <HAL_GetTick>
 8001370:	6078      	str	r0, [r7, #4]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8001372:	e00a      	b.n	800138a <HAL_RCC_DeInit+0x86>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001374:	f7ff fcba 	bl	8000cec <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001382:	4293      	cmp	r3, r2
 8001384:	d901      	bls.n	800138a <HAL_RCC_DeInit+0x86>
    {
      return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e046      	b.n	8001418 <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 800138a:	4b25      	ldr	r3, [pc, #148]	@ (8001420 <HAL_RCC_DeInit+0x11c>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1ee      	bne.n	8001374 <HAL_RCC_DeInit+0x70>

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);

#elif defined(RCC_PLLSAI1_SUPPORT)

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON);
 8001396:	4b22      	ldr	r3, [pc, #136]	@ (8001420 <HAL_RCC_DeInit+0x11c>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	4921      	ldr	r1, [pc, #132]	@ (8001420 <HAL_RCC_DeInit+0x11c>)
 800139c:	4b24      	ldr	r3, [pc, #144]	@ (8001430 <HAL_RCC_DeInit+0x12c>)
 800139e:	4013      	ands	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Insure PLLRDY, PLLSAI1RDY and PLLSAI2RDY (if present) are reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 80013a2:	f7ff fca3 	bl	8000cec <HAL_GetTick>
 80013a6:	6078      	str	r0, [r7, #4]

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)

#elif defined(RCC_PLLSAI1_SUPPORT)

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY) != 0U)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_DeInit+0xb8>

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)

#endif
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013aa:	f7ff fc9f 	bl	8000cec <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e02d      	b.n	8001418 <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY) != 0U)
 80013bc:	4b18      	ldr	r3, [pc, #96]	@ (8001420 <HAL_RCC_DeInit+0x11c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 6320 	and.w	r3, r3, #167772160	@ 0xa000000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1f0      	bne.n	80013aa <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 80013c8:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <HAL_RCC_DeInit+0x11c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 80013ce:	4b14      	ldr	r3, [pc, #80]	@ (8001420 <HAL_RCC_DeInit+0x11c>)
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	4a13      	ldr	r2, [pc, #76]	@ (8001420 <HAL_RCC_DeInit+0x11c>)
 80013d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013d8:	60d3      	str	r3, [r2, #12]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Reset PLLSAI1CFGR register */
  CLEAR_REG(RCC->PLLSAI1CFGR);
 80013da:	4b11      	ldr	r3, [pc, #68]	@ (8001420 <HAL_RCC_DeInit+0x11c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 80013e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <HAL_RCC_DeInit+0x11c>)
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001420 <HAL_RCC_DeInit+0x11c>)
 80013e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013ea:	6113      	str	r3, [r2, #16]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80013ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <HAL_RCC_DeInit+0x11c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001420 <HAL_RCC_DeInit+0x11c>)
 80013f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 80013f8:	4b09      	ldr	r3, [pc, #36]	@ (8001420 <HAL_RCC_DeInit+0x11c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 80013fe:	4b08      	ldr	r3, [pc, #32]	@ (8001420 <HAL_RCC_DeInit+0x11c>)
 8001400:	f04f 32ff 	mov.w	r2, #4294967295
 8001404:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001406:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <HAL_RCC_DeInit+0x11c>)
 8001408:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800140c:	4a04      	ldr	r2, [pc, #16]	@ (8001420 <HAL_RCC_DeInit+0x11c>)
 800140e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001412:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40021000 	.word	0x40021000
 8001424:	20000000 	.word	0x20000000
 8001428:	003d0900 	.word	0x003d0900
 800142c:	20000004 	.word	0x20000004
 8001430:	fafef4ff 	.word	0xfafef4ff

08001434 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d102      	bne.n	8001448 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	f000 bc02 	b.w	8001c4c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001448:	4b96      	ldr	r3, [pc, #600]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 030c 	and.w	r3, r3, #12
 8001450:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001452:	4b94      	ldr	r3, [pc, #592]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80e4 	beq.w	8001632 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d007      	beq.n	8001480 <HAL_RCC_OscConfig+0x4c>
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	2b0c      	cmp	r3, #12
 8001474:	f040 808b 	bne.w	800158e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2b01      	cmp	r3, #1
 800147c:	f040 8087 	bne.w	800158e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001480:	4b88      	ldr	r3, [pc, #544]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <HAL_RCC_OscConfig+0x64>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e3d9      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1a      	ldr	r2, [r3, #32]
 800149c:	4b81      	ldr	r3, [pc, #516]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d004      	beq.n	80014b2 <HAL_RCC_OscConfig+0x7e>
 80014a8:	4b7e      	ldr	r3, [pc, #504]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014b0:	e005      	b.n	80014be <HAL_RCC_OscConfig+0x8a>
 80014b2:	4b7c      	ldr	r3, [pc, #496]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014b8:	091b      	lsrs	r3, r3, #4
 80014ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014be:	4293      	cmp	r3, r2
 80014c0:	d223      	bcs.n	800150a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fd8c 	bl	8001fe4 <RCC_SetFlashLatencyFromMSIRange>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e3ba      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014d6:	4b73      	ldr	r3, [pc, #460]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a72      	ldr	r2, [pc, #456]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014dc:	f043 0308 	orr.w	r3, r3, #8
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	4b70      	ldr	r3, [pc, #448]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	496d      	ldr	r1, [pc, #436]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f4:	4b6b      	ldr	r3, [pc, #428]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	4968      	ldr	r1, [pc, #416]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
 8001508:	e025      	b.n	8001556 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800150a:	4b66      	ldr	r3, [pc, #408]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a65      	ldr	r2, [pc, #404]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	4b63      	ldr	r3, [pc, #396]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	4960      	ldr	r1, [pc, #384]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001524:	4313      	orrs	r3, r2
 8001526:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001528:	4b5e      	ldr	r3, [pc, #376]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	495b      	ldr	r1, [pc, #364]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d109      	bne.n	8001556 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4618      	mov	r0, r3
 8001548:	f000 fd4c 	bl	8001fe4 <RCC_SetFlashLatencyFromMSIRange>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e37a      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001556:	f000 fc81 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 800155a:	4602      	mov	r2, r0
 800155c:	4b51      	ldr	r3, [pc, #324]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	091b      	lsrs	r3, r3, #4
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	4950      	ldr	r1, [pc, #320]	@ (80016a8 <HAL_RCC_OscConfig+0x274>)
 8001568:	5ccb      	ldrb	r3, [r1, r3]
 800156a:	f003 031f 	and.w	r3, r3, #31
 800156e:	fa22 f303 	lsr.w	r3, r2, r3
 8001572:	4a4e      	ldr	r2, [pc, #312]	@ (80016ac <HAL_RCC_OscConfig+0x278>)
 8001574:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001576:	4b4e      	ldr	r3, [pc, #312]	@ (80016b0 <HAL_RCC_OscConfig+0x27c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fb66 	bl	8000c4c <HAL_InitTick>
 8001580:	4603      	mov	r3, r0
 8001582:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d052      	beq.n	8001630 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	e35e      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d032      	beq.n	80015fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001596:	4b43      	ldr	r3, [pc, #268]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a42      	ldr	r2, [pc, #264]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015a2:	f7ff fba3 	bl	8000cec <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015aa:	f7ff fb9f 	bl	8000cec <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e347      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015bc:	4b39      	ldr	r3, [pc, #228]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c8:	4b36      	ldr	r3, [pc, #216]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a35      	ldr	r2, [pc, #212]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015ce:	f043 0308 	orr.w	r3, r3, #8
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b33      	ldr	r3, [pc, #204]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	4930      	ldr	r1, [pc, #192]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e6:	4b2f      	ldr	r3, [pc, #188]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	492b      	ldr	r1, [pc, #172]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	604b      	str	r3, [r1, #4]
 80015fa:	e01a      	b.n	8001632 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015fc:	4b29      	ldr	r3, [pc, #164]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a28      	ldr	r2, [pc, #160]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001608:	f7ff fb70 	bl	8000cec <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001610:	f7ff fb6c 	bl	8000cec <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e314      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001622:	4b20      	ldr	r3, [pc, #128]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x1dc>
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001630:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d073      	beq.n	8001726 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	2b08      	cmp	r3, #8
 8001642:	d005      	beq.n	8001650 <HAL_RCC_OscConfig+0x21c>
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	2b0c      	cmp	r3, #12
 8001648:	d10e      	bne.n	8001668 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2b03      	cmp	r3, #3
 800164e:	d10b      	bne.n	8001668 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001650:	4b14      	ldr	r3, [pc, #80]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d063      	beq.n	8001724 <HAL_RCC_OscConfig+0x2f0>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d15f      	bne.n	8001724 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e2f1      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001670:	d106      	bne.n	8001680 <HAL_RCC_OscConfig+0x24c>
 8001672:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a0b      	ldr	r2, [pc, #44]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e025      	b.n	80016cc <HAL_RCC_OscConfig+0x298>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001688:	d114      	bne.n	80016b4 <HAL_RCC_OscConfig+0x280>
 800168a:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a05      	ldr	r2, [pc, #20]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001690:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	4b03      	ldr	r3, [pc, #12]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a02      	ldr	r2, [pc, #8]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800169c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e013      	b.n	80016cc <HAL_RCC_OscConfig+0x298>
 80016a4:	40021000 	.word	0x40021000
 80016a8:	08004084 	.word	0x08004084
 80016ac:	20000000 	.word	0x20000000
 80016b0:	20000004 	.word	0x20000004
 80016b4:	4ba0      	ldr	r3, [pc, #640]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a9f      	ldr	r2, [pc, #636]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80016ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b9d      	ldr	r3, [pc, #628]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a9c      	ldr	r2, [pc, #624]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80016c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d013      	beq.n	80016fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff fb0a 	bl	8000cec <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff fb06 	bl	8000cec <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	@ 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e2ae      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ee:	4b92      	ldr	r3, [pc, #584]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x2a8>
 80016fa:	e014      	b.n	8001726 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fc:	f7ff faf6 	bl	8000cec <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001704:	f7ff faf2 	bl	8000cec <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	@ 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e29a      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001716:	4b88      	ldr	r3, [pc, #544]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x2d0>
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d060      	beq.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	2b04      	cmp	r3, #4
 8001736:	d005      	beq.n	8001744 <HAL_RCC_OscConfig+0x310>
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2b0c      	cmp	r3, #12
 800173c:	d119      	bne.n	8001772 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d116      	bne.n	8001772 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001744:	4b7c      	ldr	r3, [pc, #496]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_RCC_OscConfig+0x328>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e277      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175c:	4b76      	ldr	r3, [pc, #472]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	061b      	lsls	r3, r3, #24
 800176a:	4973      	ldr	r1, [pc, #460]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001770:	e040      	b.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d023      	beq.n	80017c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800177a:	4b6f      	ldr	r3, [pc, #444]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a6e      	ldr	r2, [pc, #440]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff fab1 	bl	8000cec <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178e:	f7ff faad 	bl	8000cec <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e255      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a0:	4b65      	ldr	r3, [pc, #404]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ac:	4b62      	ldr	r3, [pc, #392]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	061b      	lsls	r3, r3, #24
 80017ba:	495f      	ldr	r1, [pc, #380]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
 80017c0:	e018      	b.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c2:	4b5d      	ldr	r3, [pc, #372]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a5c      	ldr	r2, [pc, #368]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80017c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ce:	f7ff fa8d 	bl	8000cec <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d6:	f7ff fa89 	bl	8000cec <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e231      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e8:	4b53      	ldr	r3, [pc, #332]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d03c      	beq.n	800187a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d01c      	beq.n	8001842 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001808:	4b4b      	ldr	r3, [pc, #300]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800180a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800180e:	4a4a      	ldr	r2, [pc, #296]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001818:	f7ff fa68 	bl	8000cec <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001820:	f7ff fa64 	bl	8000cec <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e20c      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001832:	4b41      	ldr	r3, [pc, #260]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001834:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0ef      	beq.n	8001820 <HAL_RCC_OscConfig+0x3ec>
 8001840:	e01b      	b.n	800187a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001842:	4b3d      	ldr	r3, [pc, #244]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001844:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001848:	4a3b      	ldr	r2, [pc, #236]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800184a:	f023 0301 	bic.w	r3, r3, #1
 800184e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001852:	f7ff fa4b 	bl	8000cec <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800185a:	f7ff fa47 	bl	8000cec <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e1ef      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800186c:	4b32      	ldr	r3, [pc, #200]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800186e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1ef      	bne.n	800185a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 80a6 	beq.w	80019d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800188c:	4b2a      	ldr	r3, [pc, #168]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10d      	bne.n	80018b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001898:	4b27      	ldr	r3, [pc, #156]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189c:	4a26      	ldr	r2, [pc, #152]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800189e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80018a4:	4b24      	ldr	r3, [pc, #144]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b0:	2301      	movs	r3, #1
 80018b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b4:	4b21      	ldr	r3, [pc, #132]	@ (800193c <HAL_RCC_OscConfig+0x508>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d118      	bne.n	80018f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018c0:	4b1e      	ldr	r3, [pc, #120]	@ (800193c <HAL_RCC_OscConfig+0x508>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a1d      	ldr	r2, [pc, #116]	@ (800193c <HAL_RCC_OscConfig+0x508>)
 80018c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018cc:	f7ff fa0e 	bl	8000cec <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d4:	f7ff fa0a 	bl	8000cec <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e1b2      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e6:	4b15      	ldr	r3, [pc, #84]	@ (800193c <HAL_RCC_OscConfig+0x508>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d108      	bne.n	800190c <HAL_RCC_OscConfig+0x4d8>
 80018fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80018fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001900:	4a0d      	ldr	r2, [pc, #52]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800190a:	e029      	b.n	8001960 <HAL_RCC_OscConfig+0x52c>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b05      	cmp	r3, #5
 8001912:	d115      	bne.n	8001940 <HAL_RCC_OscConfig+0x50c>
 8001914:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800191a:	4a07      	ldr	r2, [pc, #28]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001924:	4b04      	ldr	r3, [pc, #16]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800192a:	4a03      	ldr	r2, [pc, #12]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001934:	e014      	b.n	8001960 <HAL_RCC_OscConfig+0x52c>
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000
 800193c:	40007000 	.word	0x40007000
 8001940:	4b9a      	ldr	r3, [pc, #616]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001946:	4a99      	ldr	r2, [pc, #612]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001950:	4b96      	ldr	r3, [pc, #600]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 8001952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001956:	4a95      	ldr	r2, [pc, #596]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 8001958:	f023 0304 	bic.w	r3, r3, #4
 800195c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d016      	beq.n	8001996 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001968:	f7ff f9c0 	bl	8000cec <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800196e:	e00a      	b.n	8001986 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001970:	f7ff f9bc 	bl	8000cec <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800197e:	4293      	cmp	r3, r2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e162      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001986:	4b89      	ldr	r3, [pc, #548]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 8001988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0ed      	beq.n	8001970 <HAL_RCC_OscConfig+0x53c>
 8001994:	e015      	b.n	80019c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001996:	f7ff f9a9 	bl	8000cec <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800199c:	e00a      	b.n	80019b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199e:	f7ff f9a5 	bl	8000cec <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e14b      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019b4:	4b7d      	ldr	r3, [pc, #500]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 80019b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1ed      	bne.n	800199e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019c2:	7ffb      	ldrb	r3, [r7, #31]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d105      	bne.n	80019d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c8:	4b78      	ldr	r3, [pc, #480]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 80019ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019cc:	4a77      	ldr	r2, [pc, #476]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 80019ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0320 	and.w	r3, r3, #32
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d03c      	beq.n	8001a5a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d01c      	beq.n	8001a22 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019e8:	4b70      	ldr	r3, [pc, #448]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 80019ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019ee:	4a6f      	ldr	r2, [pc, #444]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f8:	f7ff f978 	bl	8000cec <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a00:	f7ff f974 	bl	8000cec <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e11c      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a12:	4b66      	ldr	r3, [pc, #408]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 8001a14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0ef      	beq.n	8001a00 <HAL_RCC_OscConfig+0x5cc>
 8001a20:	e01b      	b.n	8001a5a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a22:	4b62      	ldr	r3, [pc, #392]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 8001a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a28:	4a60      	ldr	r2, [pc, #384]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 8001a2a:	f023 0301 	bic.w	r3, r3, #1
 8001a2e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a32:	f7ff f95b 	bl	8000cec <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a3a:	f7ff f957 	bl	8000cec <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e0ff      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a4c:	4b57      	ldr	r3, [pc, #348]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 8001a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1ef      	bne.n	8001a3a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 80f3 	beq.w	8001c4a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	f040 80c9 	bne.w	8001c00 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a6e:	4b4f      	ldr	r3, [pc, #316]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f003 0203 	and.w	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d12c      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d123      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a9e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d11b      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d113      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001abe:	085b      	lsrs	r3, r3, #1
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d109      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	085b      	lsrs	r3, r3, #1
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d06b      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	2b0c      	cmp	r3, #12
 8001ae0:	d062      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ae2:	4b32      	ldr	r3, [pc, #200]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e0ac      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001af2:	4b2e      	ldr	r3, [pc, #184]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a2d      	ldr	r2, [pc, #180]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 8001af8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001afc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001afe:	f7ff f8f5 	bl	8000cec <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b06:	f7ff f8f1 	bl	8000cec <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e099      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b18:	4b24      	ldr	r3, [pc, #144]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f0      	bne.n	8001b06 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b24:	4b21      	ldr	r3, [pc, #132]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	4b21      	ldr	r3, [pc, #132]	@ (8001bb0 <HAL_RCC_OscConfig+0x77c>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b34:	3a01      	subs	r2, #1
 8001b36:	0112      	lsls	r2, r2, #4
 8001b38:	4311      	orrs	r1, r2
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b3e:	0212      	lsls	r2, r2, #8
 8001b40:	4311      	orrs	r1, r2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b46:	0852      	lsrs	r2, r2, #1
 8001b48:	3a01      	subs	r2, #1
 8001b4a:	0552      	lsls	r2, r2, #21
 8001b4c:	4311      	orrs	r1, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b52:	0852      	lsrs	r2, r2, #1
 8001b54:	3a01      	subs	r2, #1
 8001b56:	0652      	lsls	r2, r2, #25
 8001b58:	4311      	orrs	r1, r2
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b5e:	06d2      	lsls	r2, r2, #27
 8001b60:	430a      	orrs	r2, r1
 8001b62:	4912      	ldr	r1, [pc, #72]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b68:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0f      	ldr	r2, [pc, #60]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b74:	4b0d      	ldr	r3, [pc, #52]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	4a0c      	ldr	r2, [pc, #48]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b80:	f7ff f8b4 	bl	8000cec <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b88:	f7ff f8b0 	bl	8000cec <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e058      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9a:	4b04      	ldr	r3, [pc, #16]	@ (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ba6:	e050      	b.n	8001c4a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e04f      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb4:	4b27      	ldr	r3, [pc, #156]	@ (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d144      	bne.n	8001c4a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bc0:	4b24      	ldr	r3, [pc, #144]	@ (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a23      	ldr	r2, [pc, #140]	@ (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001bc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bcc:	4b21      	ldr	r3, [pc, #132]	@ (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	4a20      	ldr	r2, [pc, #128]	@ (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001bd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bd8:	f7ff f888 	bl	8000cec <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be0:	f7ff f884 	bl	8000cec <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e02c      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf2:	4b18      	ldr	r3, [pc, #96]	@ (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0x7ac>
 8001bfe:	e024      	b.n	8001c4a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	2b0c      	cmp	r3, #12
 8001c04:	d01f      	beq.n	8001c46 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c06:	4b13      	ldr	r3, [pc, #76]	@ (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a12      	ldr	r2, [pc, #72]	@ (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001c0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c12:	f7ff f86b 	bl	8000cec <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1a:	f7ff f867 	bl	8000cec <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e00f      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2c:	4b09      	ldr	r3, [pc, #36]	@ (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f0      	bne.n	8001c1a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001c38:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	4905      	ldr	r1, [pc, #20]	@ (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_RCC_OscConfig+0x824>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	60cb      	str	r3, [r1, #12]
 8001c44:	e001      	b.n	8001c4a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3720      	adds	r7, #32
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40021000 	.word	0x40021000
 8001c58:	feeefffc 	.word	0xfeeefffc

08001c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0e7      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c70:	4b75      	ldr	r3, [pc, #468]	@ (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d910      	bls.n	8001ca0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7e:	4b72      	ldr	r3, [pc, #456]	@ (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 0207 	bic.w	r2, r3, #7
 8001c86:	4970      	ldr	r1, [pc, #448]	@ (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8e:	4b6e      	ldr	r3, [pc, #440]	@ (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e0cf      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d010      	beq.n	8001cce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	4b66      	ldr	r3, [pc, #408]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d908      	bls.n	8001cce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cbc:	4b63      	ldr	r3, [pc, #396]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	4960      	ldr	r1, [pc, #384]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d04c      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce2:	4b5a      	ldr	r3, [pc, #360]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d121      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e0a6      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d107      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cfa:	4b54      	ldr	r3, [pc, #336]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d115      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e09a      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d107      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d12:	4b4e      	ldr	r3, [pc, #312]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e08e      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d22:	4b4a      	ldr	r3, [pc, #296]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e086      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d32:	4b46      	ldr	r3, [pc, #280]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f023 0203 	bic.w	r2, r3, #3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	4943      	ldr	r1, [pc, #268]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d44:	f7fe ffd2 	bl	8000cec <HAL_GetTick>
 8001d48:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	e00a      	b.n	8001d62 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d4c:	f7fe ffce 	bl	8000cec <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e06e      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d62:	4b3a      	ldr	r3, [pc, #232]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 020c 	and.w	r2, r3, #12
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d1eb      	bne.n	8001d4c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d010      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	4b31      	ldr	r3, [pc, #196]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d208      	bcs.n	8001da2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d90:	4b2e      	ldr	r3, [pc, #184]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	492b      	ldr	r1, [pc, #172]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da2:	4b29      	ldr	r3, [pc, #164]	@ (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d210      	bcs.n	8001dd2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db0:	4b25      	ldr	r3, [pc, #148]	@ (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f023 0207 	bic.w	r2, r3, #7
 8001db8:	4923      	ldr	r1, [pc, #140]	@ (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc0:	4b21      	ldr	r3, [pc, #132]	@ (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d001      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e036      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d008      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dde:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	4918      	ldr	r1, [pc, #96]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d009      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dfc:	4b13      	ldr	r3, [pc, #76]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4910      	ldr	r1, [pc, #64]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e10:	f000 f824 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8001e14:	4602      	mov	r2, r0
 8001e16:	4b0d      	ldr	r3, [pc, #52]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	091b      	lsrs	r3, r3, #4
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	490b      	ldr	r1, [pc, #44]	@ (8001e50 <HAL_RCC_ClockConfig+0x1f4>)
 8001e22:	5ccb      	ldrb	r3, [r1, r3]
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2c:	4a09      	ldr	r2, [pc, #36]	@ (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001e2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e30:	4b09      	ldr	r3, [pc, #36]	@ (8001e58 <HAL_RCC_ClockConfig+0x1fc>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe ff09 	bl	8000c4c <HAL_InitTick>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e3e:	7afb      	ldrb	r3, [r7, #11]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40022000 	.word	0x40022000
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	08004084 	.word	0x08004084
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000004 	.word	0x20000004

08001e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	@ 0x24
 8001e60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e6a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e74:	4b3b      	ldr	r3, [pc, #236]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d005      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0x34>
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	2b0c      	cmp	r3, #12
 8001e88:	d121      	bne.n	8001ece <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d11e      	bne.n	8001ece <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e90:	4b34      	ldr	r3, [pc, #208]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d107      	bne.n	8001eac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e9c:	4b31      	ldr	r3, [pc, #196]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	f003 030f 	and.w	r3, r3, #15
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	e005      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001eac:	4b2d      	ldr	r3, [pc, #180]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001eb8:	4a2b      	ldr	r2, [pc, #172]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10d      	bne.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d102      	bne.n	8001eda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ed4:	4b25      	ldr	r3, [pc, #148]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ed6:	61bb      	str	r3, [r7, #24]
 8001ed8:	e004      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ee0:	4b23      	ldr	r3, [pc, #140]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ee2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	2b0c      	cmp	r3, #12
 8001ee8:	d134      	bne.n	8001f54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eea:	4b1e      	ldr	r3, [pc, #120]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d003      	beq.n	8001f02 <HAL_RCC_GetSysClockFreq+0xa6>
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d003      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0xac>
 8001f00:	e005      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f02:	4b1a      	ldr	r3, [pc, #104]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x110>)
 8001f04:	617b      	str	r3, [r7, #20]
      break;
 8001f06:	e005      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f08:	4b19      	ldr	r3, [pc, #100]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f0a:	617b      	str	r3, [r7, #20]
      break;
 8001f0c:	e002      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	617b      	str	r3, [r7, #20]
      break;
 8001f12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f14:	4b13      	ldr	r3, [pc, #76]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	3301      	adds	r3, #1
 8001f20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f22:	4b10      	ldr	r3, [pc, #64]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	fb03 f202 	mul.w	r2, r3, r2
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	0e5b      	lsrs	r3, r3, #25
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	3301      	adds	r3, #1
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f54:	69bb      	ldr	r3, [r7, #24]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3724      	adds	r7, #36	@ 0x24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	0800409c 	.word	0x0800409c
 8001f6c:	00f42400 	.word	0x00f42400
 8001f70:	007a1200 	.word	0x007a1200

08001f74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f78:	4b03      	ldr	r3, [pc, #12]	@ (8001f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000000 	.word	0x20000000

08001f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f90:	f7ff fff0 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	0a1b      	lsrs	r3, r3, #8
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	4904      	ldr	r1, [pc, #16]	@ (8001fb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fa2:	5ccb      	ldrb	r3, [r1, r3]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	08004094 	.word	0x08004094

08001fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fbc:	f7ff ffda 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	0adb      	lsrs	r3, r3, #11
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	4904      	ldr	r1, [pc, #16]	@ (8001fe0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fce:	5ccb      	ldrb	r3, [r1, r3]
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	08004094 	.word	0x08004094

08001fe4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fec:	2300      	movs	r3, #0
 8001fee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ffc:	f7ff f91e 	bl	800123c <HAL_PWREx_GetVoltageRange>
 8002000:	6178      	str	r0, [r7, #20]
 8002002:	e014      	b.n	800202e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002004:	4b25      	ldr	r3, [pc, #148]	@ (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002008:	4a24      	ldr	r2, [pc, #144]	@ (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800200a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800200e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002010:	4b22      	ldr	r3, [pc, #136]	@ (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800201c:	f7ff f90e 	bl	800123c <HAL_PWREx_GetVoltageRange>
 8002020:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002022:	4b1e      	ldr	r3, [pc, #120]	@ (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002026:	4a1d      	ldr	r2, [pc, #116]	@ (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002028:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800202c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002034:	d10b      	bne.n	800204e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b80      	cmp	r3, #128	@ 0x80
 800203a:	d919      	bls.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002040:	d902      	bls.n	8002048 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002042:	2302      	movs	r3, #2
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	e013      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002048:	2301      	movs	r3, #1
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	e010      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b80      	cmp	r3, #128	@ 0x80
 8002052:	d902      	bls.n	800205a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002054:	2303      	movs	r3, #3
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	e00a      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b80      	cmp	r3, #128	@ 0x80
 800205e:	d102      	bne.n	8002066 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002060:	2302      	movs	r3, #2
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	e004      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b70      	cmp	r3, #112	@ 0x70
 800206a:	d101      	bne.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800206c:	2301      	movs	r3, #1
 800206e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002070:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f023 0207 	bic.w	r2, r3, #7
 8002078:	4909      	ldr	r1, [pc, #36]	@ (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002080:	4b07      	ldr	r3, [pc, #28]	@ (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	429a      	cmp	r2, r3
 800208c:	d001      	beq.n	8002092 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000
 80020a0:	40022000 	.word	0x40022000

080020a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020ac:	2300      	movs	r3, #0
 80020ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020b0:	2300      	movs	r3, #0
 80020b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d031      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80020c8:	d01a      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80020ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80020ce:	d814      	bhi.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d009      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80020d8:	d10f      	bne.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80020da:	4b5d      	ldr	r3, [pc, #372]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	4a5c      	ldr	r2, [pc, #368]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020e6:	e00c      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3304      	adds	r3, #4
 80020ec:	2100      	movs	r1, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 fa22 	bl	8002538 <RCCEx_PLLSAI1_Config>
 80020f4:	4603      	mov	r3, r0
 80020f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020f8:	e003      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	74fb      	strb	r3, [r7, #19]
      break;
 80020fe:	e000      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002100:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002102:	7cfb      	ldrb	r3, [r7, #19]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10b      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002108:	4b51      	ldr	r3, [pc, #324]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002116:	494e      	ldr	r1, [pc, #312]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800211e:	e001      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002120:	7cfb      	ldrb	r3, [r7, #19]
 8002122:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 809e 	beq.w	800226e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002132:	2300      	movs	r3, #0
 8002134:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002136:	4b46      	ldr	r3, [pc, #280]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002146:	2300      	movs	r3, #0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00d      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214c:	4b40      	ldr	r3, [pc, #256]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800214e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002150:	4a3f      	ldr	r2, [pc, #252]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002152:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002156:	6593      	str	r3, [r2, #88]	@ 0x58
 8002158:	4b3d      	ldr	r3, [pc, #244]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800215a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002164:	2301      	movs	r3, #1
 8002166:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002168:	4b3a      	ldr	r3, [pc, #232]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a39      	ldr	r2, [pc, #228]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800216e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002172:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002174:	f7fe fdba 	bl	8000cec <HAL_GetTick>
 8002178:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800217a:	e009      	b.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800217c:	f7fe fdb6 	bl	8000cec <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d902      	bls.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	74fb      	strb	r3, [r7, #19]
        break;
 800218e:	e005      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002190:	4b30      	ldr	r3, [pc, #192]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0ef      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800219c:	7cfb      	ldrb	r3, [r7, #19]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d15a      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d01e      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d019      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021be:	4b24      	ldr	r3, [pc, #144]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021c8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021ca:	4b21      	ldr	r3, [pc, #132]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021da:	4b1d      	ldr	r3, [pc, #116]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021ea:	4a19      	ldr	r2, [pc, #100]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d016      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7fe fd76 	bl	8000cec <HAL_GetTick>
 8002200:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002202:	e00b      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002204:	f7fe fd72 	bl	8000cec <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d902      	bls.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	74fb      	strb	r3, [r7, #19]
            break;
 800221a:	e006      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800221c:	4b0c      	ldr	r3, [pc, #48]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0ec      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800222a:	7cfb      	ldrb	r3, [r7, #19]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10b      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002230:	4b07      	ldr	r3, [pc, #28]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002236:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223e:	4904      	ldr	r1, [pc, #16]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002246:	e009      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002248:	7cfb      	ldrb	r3, [r7, #19]
 800224a:	74bb      	strb	r3, [r7, #18]
 800224c:	e006      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000
 8002254:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002258:	7cfb      	ldrb	r3, [r7, #19]
 800225a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800225c:	7c7b      	ldrb	r3, [r7, #17]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d105      	bne.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002262:	4b8d      	ldr	r3, [pc, #564]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002266:	4a8c      	ldr	r2, [pc, #560]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002268:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800226c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800227a:	4b87      	ldr	r3, [pc, #540]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002280:	f023 0203 	bic.w	r2, r3, #3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	4983      	ldr	r1, [pc, #524]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800229c:	4b7e      	ldr	r3, [pc, #504]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a2:	f023 020c 	bic.w	r2, r3, #12
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022aa:	497b      	ldr	r1, [pc, #492]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022be:	4b76      	ldr	r3, [pc, #472]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022cc:	4972      	ldr	r1, [pc, #456]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022e0:	4b6d      	ldr	r3, [pc, #436]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ee:	496a      	ldr	r1, [pc, #424]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002302:	4b65      	ldr	r3, [pc, #404]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002308:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002310:	4961      	ldr	r1, [pc, #388]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002324:	4b5c      	ldr	r3, [pc, #368]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	4959      	ldr	r1, [pc, #356]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002346:	4b54      	ldr	r3, [pc, #336]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002354:	4950      	ldr	r1, [pc, #320]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002368:	4b4b      	ldr	r3, [pc, #300]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002376:	4948      	ldr	r1, [pc, #288]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800238a:	4b43      	ldr	r3, [pc, #268]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800238c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002390:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002398:	493f      	ldr	r1, [pc, #252]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d028      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ba:	4937      	ldr	r1, [pc, #220]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023ca:	d106      	bne.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023cc:	4b32      	ldr	r3, [pc, #200]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	4a31      	ldr	r2, [pc, #196]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023d6:	60d3      	str	r3, [r2, #12]
 80023d8:	e011      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023e2:	d10c      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3304      	adds	r3, #4
 80023e8:	2101      	movs	r1, #1
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f8a4 	bl	8002538 <RCCEx_PLLSAI1_Config>
 80023f0:	4603      	mov	r3, r0
 80023f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023f4:	7cfb      	ldrb	r3, [r7, #19]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80023fa:	7cfb      	ldrb	r3, [r7, #19]
 80023fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d028      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800240a:	4b23      	ldr	r3, [pc, #140]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002410:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002418:	491f      	ldr	r1, [pc, #124]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002424:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002428:	d106      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800242a:	4b1b      	ldr	r3, [pc, #108]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	4a1a      	ldr	r2, [pc, #104]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002430:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002434:	60d3      	str	r3, [r2, #12]
 8002436:	e011      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800243c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002440:	d10c      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3304      	adds	r3, #4
 8002446:	2101      	movs	r1, #1
 8002448:	4618      	mov	r0, r3
 800244a:	f000 f875 	bl	8002538 <RCCEx_PLLSAI1_Config>
 800244e:	4603      	mov	r3, r0
 8002450:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002452:	7cfb      	ldrb	r3, [r7, #19]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002458:	7cfb      	ldrb	r3, [r7, #19]
 800245a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d02b      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002468:	4b0b      	ldr	r3, [pc, #44]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002476:	4908      	ldr	r1, [pc, #32]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002482:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002486:	d109      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002488:	4b03      	ldr	r3, [pc, #12]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4a02      	ldr	r2, [pc, #8]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800248e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002492:	60d3      	str	r3, [r2, #12]
 8002494:	e014      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3304      	adds	r3, #4
 80024aa:	2101      	movs	r1, #1
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 f843 	bl	8002538 <RCCEx_PLLSAI1_Config>
 80024b2:	4603      	mov	r3, r0
 80024b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024b6:	7cfb      	ldrb	r3, [r7, #19]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d01c      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024cc:	4b19      	ldr	r3, [pc, #100]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024da:	4916      	ldr	r1, [pc, #88]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024ea:	d10c      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3304      	adds	r3, #4
 80024f0:	2102      	movs	r1, #2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 f820 	bl	8002538 <RCCEx_PLLSAI1_Config>
 80024f8:	4603      	mov	r3, r0
 80024fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8002502:	7cfb      	ldrb	r3, [r7, #19]
 8002504:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00a      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002512:	4b08      	ldr	r3, [pc, #32]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002518:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002520:	4904      	ldr	r1, [pc, #16]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002528:	7cbb      	ldrb	r3, [r7, #18]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000

08002538 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002546:	4b74      	ldr	r3, [pc, #464]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d018      	beq.n	8002584 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002552:	4b71      	ldr	r3, [pc, #452]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f003 0203 	and.w	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d10d      	bne.n	800257e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
       ||
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800256a:	4b6b      	ldr	r3, [pc, #428]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e0>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	091b      	lsrs	r3, r3, #4
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
       ||
 800257a:	429a      	cmp	r2, r3
 800257c:	d047      	beq.n	800260e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	73fb      	strb	r3, [r7, #15]
 8002582:	e044      	b.n	800260e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d018      	beq.n	80025be <RCCEx_PLLSAI1_Config+0x86>
 800258c:	2b03      	cmp	r3, #3
 800258e:	d825      	bhi.n	80025dc <RCCEx_PLLSAI1_Config+0xa4>
 8002590:	2b01      	cmp	r3, #1
 8002592:	d002      	beq.n	800259a <RCCEx_PLLSAI1_Config+0x62>
 8002594:	2b02      	cmp	r3, #2
 8002596:	d009      	beq.n	80025ac <RCCEx_PLLSAI1_Config+0x74>
 8002598:	e020      	b.n	80025dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800259a:	4b5f      	ldr	r3, [pc, #380]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d11d      	bne.n	80025e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025aa:	e01a      	b.n	80025e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025ac:	4b5a      	ldr	r3, [pc, #360]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d116      	bne.n	80025e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025bc:	e013      	b.n	80025e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025be:	4b56      	ldr	r3, [pc, #344]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10f      	bne.n	80025ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025ca:	4b53      	ldr	r3, [pc, #332]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025da:	e006      	b.n	80025ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
      break;
 80025e0:	e004      	b.n	80025ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025e2:	bf00      	nop
 80025e4:	e002      	b.n	80025ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025e6:	bf00      	nop
 80025e8:	e000      	b.n	80025ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10d      	bne.n	800260e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025f2:	4b49      	ldr	r3, [pc, #292]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6819      	ldr	r1, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	430b      	orrs	r3, r1
 8002608:	4943      	ldr	r1, [pc, #268]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e0>)
 800260a:	4313      	orrs	r3, r2
 800260c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d17c      	bne.n	800270e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002614:	4b40      	ldr	r3, [pc, #256]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a3f      	ldr	r2, [pc, #252]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e0>)
 800261a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800261e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002620:	f7fe fb64 	bl	8000cec <HAL_GetTick>
 8002624:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002626:	e009      	b.n	800263c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002628:	f7fe fb60 	bl	8000cec <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d902      	bls.n	800263c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	73fb      	strb	r3, [r7, #15]
        break;
 800263a:	e005      	b.n	8002648 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800263c:	4b36      	ldr	r3, [pc, #216]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1ef      	bne.n	8002628 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d15f      	bne.n	800270e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d110      	bne.n	8002676 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002654:	4b30      	ldr	r3, [pc, #192]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800265c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6892      	ldr	r2, [r2, #8]
 8002664:	0211      	lsls	r1, r2, #8
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68d2      	ldr	r2, [r2, #12]
 800266a:	06d2      	lsls	r2, r2, #27
 800266c:	430a      	orrs	r2, r1
 800266e:	492a      	ldr	r1, [pc, #168]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002670:	4313      	orrs	r3, r2
 8002672:	610b      	str	r3, [r1, #16]
 8002674:	e027      	b.n	80026c6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d112      	bne.n	80026a2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800267c:	4b26      	ldr	r3, [pc, #152]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e0>)
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002684:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6892      	ldr	r2, [r2, #8]
 800268c:	0211      	lsls	r1, r2, #8
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6912      	ldr	r2, [r2, #16]
 8002692:	0852      	lsrs	r2, r2, #1
 8002694:	3a01      	subs	r2, #1
 8002696:	0552      	lsls	r2, r2, #21
 8002698:	430a      	orrs	r2, r1
 800269a:	491f      	ldr	r1, [pc, #124]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e0>)
 800269c:	4313      	orrs	r3, r2
 800269e:	610b      	str	r3, [r1, #16]
 80026a0:	e011      	b.n	80026c6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80026aa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6892      	ldr	r2, [r2, #8]
 80026b2:	0211      	lsls	r1, r2, #8
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6952      	ldr	r2, [r2, #20]
 80026b8:	0852      	lsrs	r2, r2, #1
 80026ba:	3a01      	subs	r2, #1
 80026bc:	0652      	lsls	r2, r2, #25
 80026be:	430a      	orrs	r2, r1
 80026c0:	4915      	ldr	r1, [pc, #84]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026c6:	4b14      	ldr	r3, [pc, #80]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a13      	ldr	r2, [pc, #76]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d2:	f7fe fb0b 	bl	8000cec <HAL_GetTick>
 80026d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026d8:	e009      	b.n	80026ee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026da:	f7fe fb07 	bl	8000cec <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d902      	bls.n	80026ee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	73fb      	strb	r3, [r7, #15]
          break;
 80026ec:	e005      	b.n	80026fa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0ef      	beq.n	80026da <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d106      	bne.n	800270e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002700:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	4903      	ldr	r1, [pc, #12]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e0>)
 800270a:	4313      	orrs	r3, r2
 800270c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800270e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000

0800271c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e040      	b.n	80027b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002732:	2b00      	cmp	r3, #0
 8002734:	d106      	bne.n	8002744 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7fe f8c0 	bl	80008c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2224      	movs	r2, #36	@ 0x24
 8002748:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0201 	bic.w	r2, r2, #1
 8002758:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 fb0c 	bl	8002d80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f8af 	bl	80028cc <UART_SetConfig>
 800276e:	4603      	mov	r3, r0
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e01b      	b.n	80027b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002786:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002796:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0201 	orr.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 fb8b 	bl	8002ec4 <UART_CheckIdleState>
 80027ae:	4603      	mov	r3, r0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08a      	sub	sp, #40	@ 0x28
 80027bc:	af02      	add	r7, sp, #8
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	603b      	str	r3, [r7, #0]
 80027c4:	4613      	mov	r3, r2
 80027c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027cc:	2b20      	cmp	r3, #32
 80027ce:	d177      	bne.n	80028c0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <HAL_UART_Transmit+0x24>
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e070      	b.n	80028c2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2221      	movs	r2, #33	@ 0x21
 80027ec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027ee:	f7fe fa7d 	bl	8000cec <HAL_GetTick>
 80027f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	88fa      	ldrh	r2, [r7, #6]
 80027f8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	88fa      	ldrh	r2, [r7, #6]
 8002800:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800280c:	d108      	bne.n	8002820 <HAL_UART_Transmit+0x68>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d104      	bne.n	8002820 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	e003      	b.n	8002828 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002828:	e02f      	b.n	800288a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2200      	movs	r2, #0
 8002832:	2180      	movs	r1, #128	@ 0x80
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 fbed 	bl	8003014 <UART_WaitOnFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d004      	beq.n	800284a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2220      	movs	r2, #32
 8002844:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e03b      	b.n	80028c2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10b      	bne.n	8002868 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	881a      	ldrh	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800285c:	b292      	uxth	r2, r2
 800285e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	3302      	adds	r3, #2
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	e007      	b.n	8002878 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	781a      	ldrb	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3301      	adds	r3, #1
 8002876:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800287e:	b29b      	uxth	r3, r3
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002890:	b29b      	uxth	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1c9      	bne.n	800282a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2200      	movs	r2, #0
 800289e:	2140      	movs	r1, #64	@ 0x40
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 fbb7 	bl	8003014 <UART_WaitOnFlagUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d004      	beq.n	80028b6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e005      	b.n	80028c2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2220      	movs	r2, #32
 80028ba:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	e000      	b.n	80028c2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80028c0:	2302      	movs	r3, #2
  }
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3720      	adds	r7, #32
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028d0:	b08a      	sub	sp, #40	@ 0x28
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	431a      	orrs	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4b9e      	ldr	r3, [pc, #632]	@ (8002b74 <UART_SetConfig+0x2a8>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002904:	430b      	orrs	r3, r1
 8002906:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a93      	ldr	r2, [pc, #588]	@ (8002b78 <UART_SetConfig+0x2ac>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d004      	beq.n	8002938 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002934:	4313      	orrs	r3, r2
 8002936:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002948:	430a      	orrs	r2, r1
 800294a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a8a      	ldr	r2, [pc, #552]	@ (8002b7c <UART_SetConfig+0x2b0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d126      	bne.n	80029a4 <UART_SetConfig+0xd8>
 8002956:	4b8a      	ldr	r3, [pc, #552]	@ (8002b80 <UART_SetConfig+0x2b4>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	2b03      	cmp	r3, #3
 8002962:	d81b      	bhi.n	800299c <UART_SetConfig+0xd0>
 8002964:	a201      	add	r2, pc, #4	@ (adr r2, 800296c <UART_SetConfig+0xa0>)
 8002966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296a:	bf00      	nop
 800296c:	0800297d 	.word	0x0800297d
 8002970:	0800298d 	.word	0x0800298d
 8002974:	08002985 	.word	0x08002985
 8002978:	08002995 	.word	0x08002995
 800297c:	2301      	movs	r3, #1
 800297e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002982:	e0ab      	b.n	8002adc <UART_SetConfig+0x210>
 8002984:	2302      	movs	r3, #2
 8002986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800298a:	e0a7      	b.n	8002adc <UART_SetConfig+0x210>
 800298c:	2304      	movs	r3, #4
 800298e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002992:	e0a3      	b.n	8002adc <UART_SetConfig+0x210>
 8002994:	2308      	movs	r3, #8
 8002996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800299a:	e09f      	b.n	8002adc <UART_SetConfig+0x210>
 800299c:	2310      	movs	r3, #16
 800299e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029a2:	e09b      	b.n	8002adc <UART_SetConfig+0x210>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a76      	ldr	r2, [pc, #472]	@ (8002b84 <UART_SetConfig+0x2b8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d138      	bne.n	8002a20 <UART_SetConfig+0x154>
 80029ae:	4b74      	ldr	r3, [pc, #464]	@ (8002b80 <UART_SetConfig+0x2b4>)
 80029b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b4:	f003 030c 	and.w	r3, r3, #12
 80029b8:	2b0c      	cmp	r3, #12
 80029ba:	d82d      	bhi.n	8002a18 <UART_SetConfig+0x14c>
 80029bc:	a201      	add	r2, pc, #4	@ (adr r2, 80029c4 <UART_SetConfig+0xf8>)
 80029be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c2:	bf00      	nop
 80029c4:	080029f9 	.word	0x080029f9
 80029c8:	08002a19 	.word	0x08002a19
 80029cc:	08002a19 	.word	0x08002a19
 80029d0:	08002a19 	.word	0x08002a19
 80029d4:	08002a09 	.word	0x08002a09
 80029d8:	08002a19 	.word	0x08002a19
 80029dc:	08002a19 	.word	0x08002a19
 80029e0:	08002a19 	.word	0x08002a19
 80029e4:	08002a01 	.word	0x08002a01
 80029e8:	08002a19 	.word	0x08002a19
 80029ec:	08002a19 	.word	0x08002a19
 80029f0:	08002a19 	.word	0x08002a19
 80029f4:	08002a11 	.word	0x08002a11
 80029f8:	2300      	movs	r3, #0
 80029fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029fe:	e06d      	b.n	8002adc <UART_SetConfig+0x210>
 8002a00:	2302      	movs	r3, #2
 8002a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a06:	e069      	b.n	8002adc <UART_SetConfig+0x210>
 8002a08:	2304      	movs	r3, #4
 8002a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a0e:	e065      	b.n	8002adc <UART_SetConfig+0x210>
 8002a10:	2308      	movs	r3, #8
 8002a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a16:	e061      	b.n	8002adc <UART_SetConfig+0x210>
 8002a18:	2310      	movs	r3, #16
 8002a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a1e:	e05d      	b.n	8002adc <UART_SetConfig+0x210>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a58      	ldr	r2, [pc, #352]	@ (8002b88 <UART_SetConfig+0x2bc>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d125      	bne.n	8002a76 <UART_SetConfig+0x1aa>
 8002a2a:	4b55      	ldr	r3, [pc, #340]	@ (8002b80 <UART_SetConfig+0x2b4>)
 8002a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a30:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002a34:	2b30      	cmp	r3, #48	@ 0x30
 8002a36:	d016      	beq.n	8002a66 <UART_SetConfig+0x19a>
 8002a38:	2b30      	cmp	r3, #48	@ 0x30
 8002a3a:	d818      	bhi.n	8002a6e <UART_SetConfig+0x1a2>
 8002a3c:	2b20      	cmp	r3, #32
 8002a3e:	d00a      	beq.n	8002a56 <UART_SetConfig+0x18a>
 8002a40:	2b20      	cmp	r3, #32
 8002a42:	d814      	bhi.n	8002a6e <UART_SetConfig+0x1a2>
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <UART_SetConfig+0x182>
 8002a48:	2b10      	cmp	r3, #16
 8002a4a:	d008      	beq.n	8002a5e <UART_SetConfig+0x192>
 8002a4c:	e00f      	b.n	8002a6e <UART_SetConfig+0x1a2>
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a54:	e042      	b.n	8002adc <UART_SetConfig+0x210>
 8002a56:	2302      	movs	r3, #2
 8002a58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a5c:	e03e      	b.n	8002adc <UART_SetConfig+0x210>
 8002a5e:	2304      	movs	r3, #4
 8002a60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a64:	e03a      	b.n	8002adc <UART_SetConfig+0x210>
 8002a66:	2308      	movs	r3, #8
 8002a68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a6c:	e036      	b.n	8002adc <UART_SetConfig+0x210>
 8002a6e:	2310      	movs	r3, #16
 8002a70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a74:	e032      	b.n	8002adc <UART_SetConfig+0x210>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a3f      	ldr	r2, [pc, #252]	@ (8002b78 <UART_SetConfig+0x2ac>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d12a      	bne.n	8002ad6 <UART_SetConfig+0x20a>
 8002a80:	4b3f      	ldr	r3, [pc, #252]	@ (8002b80 <UART_SetConfig+0x2b4>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a86:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002a8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002a8e:	d01a      	beq.n	8002ac6 <UART_SetConfig+0x1fa>
 8002a90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002a94:	d81b      	bhi.n	8002ace <UART_SetConfig+0x202>
 8002a96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a9a:	d00c      	beq.n	8002ab6 <UART_SetConfig+0x1ea>
 8002a9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002aa0:	d815      	bhi.n	8002ace <UART_SetConfig+0x202>
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <UART_SetConfig+0x1e2>
 8002aa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aaa:	d008      	beq.n	8002abe <UART_SetConfig+0x1f2>
 8002aac:	e00f      	b.n	8002ace <UART_SetConfig+0x202>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ab4:	e012      	b.n	8002adc <UART_SetConfig+0x210>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002abc:	e00e      	b.n	8002adc <UART_SetConfig+0x210>
 8002abe:	2304      	movs	r3, #4
 8002ac0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ac4:	e00a      	b.n	8002adc <UART_SetConfig+0x210>
 8002ac6:	2308      	movs	r3, #8
 8002ac8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002acc:	e006      	b.n	8002adc <UART_SetConfig+0x210>
 8002ace:	2310      	movs	r3, #16
 8002ad0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ad4:	e002      	b.n	8002adc <UART_SetConfig+0x210>
 8002ad6:	2310      	movs	r3, #16
 8002ad8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a25      	ldr	r2, [pc, #148]	@ (8002b78 <UART_SetConfig+0x2ac>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	f040 808a 	bne.w	8002bfc <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d824      	bhi.n	8002b3a <UART_SetConfig+0x26e>
 8002af0:	a201      	add	r2, pc, #4	@ (adr r2, 8002af8 <UART_SetConfig+0x22c>)
 8002af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af6:	bf00      	nop
 8002af8:	08002b1d 	.word	0x08002b1d
 8002afc:	08002b3b 	.word	0x08002b3b
 8002b00:	08002b25 	.word	0x08002b25
 8002b04:	08002b3b 	.word	0x08002b3b
 8002b08:	08002b2b 	.word	0x08002b2b
 8002b0c:	08002b3b 	.word	0x08002b3b
 8002b10:	08002b3b 	.word	0x08002b3b
 8002b14:	08002b3b 	.word	0x08002b3b
 8002b18:	08002b33 	.word	0x08002b33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b1c:	f7ff fa36 	bl	8001f8c <HAL_RCC_GetPCLK1Freq>
 8002b20:	61f8      	str	r0, [r7, #28]
        break;
 8002b22:	e010      	b.n	8002b46 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b24:	4b19      	ldr	r3, [pc, #100]	@ (8002b8c <UART_SetConfig+0x2c0>)
 8002b26:	61fb      	str	r3, [r7, #28]
        break;
 8002b28:	e00d      	b.n	8002b46 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b2a:	f7ff f997 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8002b2e:	61f8      	str	r0, [r7, #28]
        break;
 8002b30:	e009      	b.n	8002b46 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b36:	61fb      	str	r3, [r7, #28]
        break;
 8002b38:	e005      	b.n	8002b46 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002b44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 8109 	beq.w	8002d60 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	4413      	add	r3, r2
 8002b58:	69fa      	ldr	r2, [r7, #28]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d305      	bcc.n	8002b6a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b64:	69fa      	ldr	r2, [r7, #28]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d912      	bls.n	8002b90 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002b70:	e0f6      	b.n	8002d60 <UART_SetConfig+0x494>
 8002b72:	bf00      	nop
 8002b74:	efff69f3 	.word	0xefff69f3
 8002b78:	40008000 	.word	0x40008000
 8002b7c:	40013800 	.word	0x40013800
 8002b80:	40021000 	.word	0x40021000
 8002b84:	40004400 	.word	0x40004400
 8002b88:	40004800 	.word	0x40004800
 8002b8c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	2200      	movs	r2, #0
 8002b94:	461c      	mov	r4, r3
 8002b96:	4615      	mov	r5, r2
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	022b      	lsls	r3, r5, #8
 8002ba2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002ba6:	0222      	lsls	r2, r4, #8
 8002ba8:	68f9      	ldr	r1, [r7, #12]
 8002baa:	6849      	ldr	r1, [r1, #4]
 8002bac:	0849      	lsrs	r1, r1, #1
 8002bae:	2000      	movs	r0, #0
 8002bb0:	4688      	mov	r8, r1
 8002bb2:	4681      	mov	r9, r0
 8002bb4:	eb12 0a08 	adds.w	sl, r2, r8
 8002bb8:	eb43 0b09 	adc.w	fp, r3, r9
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	603b      	str	r3, [r7, #0]
 8002bc4:	607a      	str	r2, [r7, #4]
 8002bc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bca:	4650      	mov	r0, sl
 8002bcc:	4659      	mov	r1, fp
 8002bce:	f7fd fb4f 	bl	8000270 <__aeabi_uldivmod>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002be0:	d308      	bcc.n	8002bf4 <UART_SetConfig+0x328>
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002be8:	d204      	bcs.n	8002bf4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	e0b5      	b.n	8002d60 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002bfa:	e0b1      	b.n	8002d60 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c04:	d15d      	bne.n	8002cc2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8002c06:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d827      	bhi.n	8002c5e <UART_SetConfig+0x392>
 8002c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c14 <UART_SetConfig+0x348>)
 8002c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c14:	08002c39 	.word	0x08002c39
 8002c18:	08002c41 	.word	0x08002c41
 8002c1c:	08002c49 	.word	0x08002c49
 8002c20:	08002c5f 	.word	0x08002c5f
 8002c24:	08002c4f 	.word	0x08002c4f
 8002c28:	08002c5f 	.word	0x08002c5f
 8002c2c:	08002c5f 	.word	0x08002c5f
 8002c30:	08002c5f 	.word	0x08002c5f
 8002c34:	08002c57 	.word	0x08002c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c38:	f7ff f9a8 	bl	8001f8c <HAL_RCC_GetPCLK1Freq>
 8002c3c:	61f8      	str	r0, [r7, #28]
        break;
 8002c3e:	e014      	b.n	8002c6a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c40:	f7ff f9ba 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 8002c44:	61f8      	str	r0, [r7, #28]
        break;
 8002c46:	e010      	b.n	8002c6a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c48:	4b4c      	ldr	r3, [pc, #304]	@ (8002d7c <UART_SetConfig+0x4b0>)
 8002c4a:	61fb      	str	r3, [r7, #28]
        break;
 8002c4c:	e00d      	b.n	8002c6a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c4e:	f7ff f905 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8002c52:	61f8      	str	r0, [r7, #28]
        break;
 8002c54:	e009      	b.n	8002c6a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c5a:	61fb      	str	r3, [r7, #28]
        break;
 8002c5c:	e005      	b.n	8002c6a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002c68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d077      	beq.n	8002d60 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	005a      	lsls	r2, r3, #1
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	085b      	lsrs	r3, r3, #1
 8002c7a:	441a      	add	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c84:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	2b0f      	cmp	r3, #15
 8002c8a:	d916      	bls.n	8002cba <UART_SetConfig+0x3ee>
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c92:	d212      	bcs.n	8002cba <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	f023 030f 	bic.w	r3, r3, #15
 8002c9c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	085b      	lsrs	r3, r3, #1
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	8afb      	ldrh	r3, [r7, #22]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	8afa      	ldrh	r2, [r7, #22]
 8002cb6:	60da      	str	r2, [r3, #12]
 8002cb8:	e052      	b.n	8002d60 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002cc0:	e04e      	b.n	8002d60 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cc2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d827      	bhi.n	8002d1a <UART_SetConfig+0x44e>
 8002cca:	a201      	add	r2, pc, #4	@ (adr r2, 8002cd0 <UART_SetConfig+0x404>)
 8002ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd0:	08002cf5 	.word	0x08002cf5
 8002cd4:	08002cfd 	.word	0x08002cfd
 8002cd8:	08002d05 	.word	0x08002d05
 8002cdc:	08002d1b 	.word	0x08002d1b
 8002ce0:	08002d0b 	.word	0x08002d0b
 8002ce4:	08002d1b 	.word	0x08002d1b
 8002ce8:	08002d1b 	.word	0x08002d1b
 8002cec:	08002d1b 	.word	0x08002d1b
 8002cf0:	08002d13 	.word	0x08002d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cf4:	f7ff f94a 	bl	8001f8c <HAL_RCC_GetPCLK1Freq>
 8002cf8:	61f8      	str	r0, [r7, #28]
        break;
 8002cfa:	e014      	b.n	8002d26 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cfc:	f7ff f95c 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 8002d00:	61f8      	str	r0, [r7, #28]
        break;
 8002d02:	e010      	b.n	8002d26 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d04:	4b1d      	ldr	r3, [pc, #116]	@ (8002d7c <UART_SetConfig+0x4b0>)
 8002d06:	61fb      	str	r3, [r7, #28]
        break;
 8002d08:	e00d      	b.n	8002d26 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d0a:	f7ff f8a7 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8002d0e:	61f8      	str	r0, [r7, #28]
        break;
 8002d10:	e009      	b.n	8002d26 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d16:	61fb      	str	r3, [r7, #28]
        break;
 8002d18:	e005      	b.n	8002d26 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002d24:	bf00      	nop
    }

    if (pclk != 0U)
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d019      	beq.n	8002d60 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	085a      	lsrs	r2, r3, #1
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	441a      	add	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	2b0f      	cmp	r3, #15
 8002d44:	d909      	bls.n	8002d5a <UART_SetConfig+0x48e>
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d4c:	d205      	bcs.n	8002d5a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	60da      	str	r2, [r3, #12]
 8002d58:	e002      	b.n	8002d60 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002d6c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3728      	adds	r7, #40	@ 0x28
 8002d74:	46bd      	mov	sp, r7
 8002d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d7a:	bf00      	nop
 8002d7c:	00f42400 	.word	0x00f42400

08002d80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00a      	beq.n	8002daa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00a      	beq.n	8002e32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01a      	beq.n	8002e96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e7e:	d10a      	bne.n	8002e96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	605a      	str	r2, [r3, #4]
  }
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b098      	sub	sp, #96	@ 0x60
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ed4:	f7fd ff0a 	bl	8000cec <HAL_GetTick>
 8002ed8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d12e      	bne.n	8002f46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ee8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f88c 	bl	8003014 <UART_WaitOnFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d021      	beq.n	8002f46 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f0a:	e853 3f00 	ldrex	r3, [r3]
 8002f0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f16:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f20:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f22:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f28:	e841 2300 	strex	r3, r2, [r1]
 8002f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1e6      	bne.n	8002f02 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2220      	movs	r2, #32
 8002f38:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e062      	b.n	800300c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d149      	bne.n	8002fe8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f856 	bl	8003014 <UART_WaitOnFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d03c      	beq.n	8002fe8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f76:	e853 3f00 	ldrex	r3, [r3]
 8002f7a:	623b      	str	r3, [r7, #32]
   return(result);
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f94:	e841 2300 	strex	r3, r2, [r1]
 8002f98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1e6      	bne.n	8002f6e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	3308      	adds	r3, #8
 8002fa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	e853 3f00 	ldrex	r3, [r3]
 8002fae:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3308      	adds	r3, #8
 8002fbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fc0:	61fa      	str	r2, [r7, #28]
 8002fc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc4:	69b9      	ldr	r1, [r7, #24]
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	e841 2300 	strex	r3, r2, [r1]
 8002fcc:	617b      	str	r3, [r7, #20]
   return(result);
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e5      	bne.n	8002fa0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e011      	b.n	800300c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2220      	movs	r2, #32
 8002fec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3758      	adds	r7, #88	@ 0x58
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	4613      	mov	r3, r2
 8003022:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003024:	e04f      	b.n	80030c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d04b      	beq.n	80030c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302e:	f7fd fe5d 	bl	8000cec <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	429a      	cmp	r2, r3
 800303c:	d302      	bcc.n	8003044 <UART_WaitOnFlagUntilTimeout+0x30>
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e04e      	b.n	80030e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	d037      	beq.n	80030c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b80      	cmp	r3, #128	@ 0x80
 800305a:	d034      	beq.n	80030c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b40      	cmp	r3, #64	@ 0x40
 8003060:	d031      	beq.n	80030c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b08      	cmp	r3, #8
 800306e:	d110      	bne.n	8003092 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2208      	movs	r2, #8
 8003076:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 f838 	bl	80030ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2208      	movs	r2, #8
 8003082:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e029      	b.n	80030e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800309c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030a0:	d111      	bne.n	80030c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f81e 	bl	80030ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e00f      	b.n	80030e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	69da      	ldr	r2, [r3, #28]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4013      	ands	r3, r2
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	bf0c      	ite	eq
 80030d6:	2301      	moveq	r3, #1
 80030d8:	2300      	movne	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d0a0      	beq.n	8003026 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b095      	sub	sp, #84	@ 0x54
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030fe:	e853 3f00 	ldrex	r3, [r3]
 8003102:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003106:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800310a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	461a      	mov	r2, r3
 8003112:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003114:	643b      	str	r3, [r7, #64]	@ 0x40
 8003116:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003118:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800311a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800311c:	e841 2300 	strex	r3, r2, [r1]
 8003120:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e6      	bne.n	80030f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3308      	adds	r3, #8
 800312e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	e853 3f00 	ldrex	r3, [r3]
 8003136:	61fb      	str	r3, [r7, #28]
   return(result);
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f023 0301 	bic.w	r3, r3, #1
 800313e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3308      	adds	r3, #8
 8003146:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003148:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800314a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800314e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003150:	e841 2300 	strex	r3, r2, [r1]
 8003154:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1e5      	bne.n	8003128 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003160:	2b01      	cmp	r3, #1
 8003162:	d118      	bne.n	8003196 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	e853 3f00 	ldrex	r3, [r3]
 8003170:	60bb      	str	r3, [r7, #8]
   return(result);
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f023 0310 	bic.w	r3, r3, #16
 8003178:	647b      	str	r3, [r7, #68]	@ 0x44
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003182:	61bb      	str	r3, [r7, #24]
 8003184:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003186:	6979      	ldr	r1, [r7, #20]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	e841 2300 	strex	r3, r2, [r1]
 800318e:	613b      	str	r3, [r7, #16]
   return(result);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1e6      	bne.n	8003164 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2220      	movs	r2, #32
 800319a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80031aa:	bf00      	nop
 80031ac:	3754      	adds	r7, #84	@ 0x54
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
	...

080031b8 <std>:
 80031b8:	2300      	movs	r3, #0
 80031ba:	b510      	push	{r4, lr}
 80031bc:	4604      	mov	r4, r0
 80031be:	e9c0 3300 	strd	r3, r3, [r0]
 80031c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031c6:	6083      	str	r3, [r0, #8]
 80031c8:	8181      	strh	r1, [r0, #12]
 80031ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80031cc:	81c2      	strh	r2, [r0, #14]
 80031ce:	6183      	str	r3, [r0, #24]
 80031d0:	4619      	mov	r1, r3
 80031d2:	2208      	movs	r2, #8
 80031d4:	305c      	adds	r0, #92	@ 0x5c
 80031d6:	f000 f906 	bl	80033e6 <memset>
 80031da:	4b0d      	ldr	r3, [pc, #52]	@ (8003210 <std+0x58>)
 80031dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80031de:	4b0d      	ldr	r3, [pc, #52]	@ (8003214 <std+0x5c>)
 80031e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80031e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003218 <std+0x60>)
 80031e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80031e6:	4b0d      	ldr	r3, [pc, #52]	@ (800321c <std+0x64>)
 80031e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80031ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003220 <std+0x68>)
 80031ec:	6224      	str	r4, [r4, #32]
 80031ee:	429c      	cmp	r4, r3
 80031f0:	d006      	beq.n	8003200 <std+0x48>
 80031f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80031f6:	4294      	cmp	r4, r2
 80031f8:	d002      	beq.n	8003200 <std+0x48>
 80031fa:	33d0      	adds	r3, #208	@ 0xd0
 80031fc:	429c      	cmp	r4, r3
 80031fe:	d105      	bne.n	800320c <std+0x54>
 8003200:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003208:	f000 b966 	b.w	80034d8 <__retarget_lock_init_recursive>
 800320c:	bd10      	pop	{r4, pc}
 800320e:	bf00      	nop
 8003210:	08003361 	.word	0x08003361
 8003214:	08003383 	.word	0x08003383
 8003218:	080033bb 	.word	0x080033bb
 800321c:	080033df 	.word	0x080033df
 8003220:	20000114 	.word	0x20000114

08003224 <stdio_exit_handler>:
 8003224:	4a02      	ldr	r2, [pc, #8]	@ (8003230 <stdio_exit_handler+0xc>)
 8003226:	4903      	ldr	r1, [pc, #12]	@ (8003234 <stdio_exit_handler+0x10>)
 8003228:	4803      	ldr	r0, [pc, #12]	@ (8003238 <stdio_exit_handler+0x14>)
 800322a:	f000 b869 	b.w	8003300 <_fwalk_sglue>
 800322e:	bf00      	nop
 8003230:	2000000c 	.word	0x2000000c
 8003234:	08003d79 	.word	0x08003d79
 8003238:	2000001c 	.word	0x2000001c

0800323c <cleanup_stdio>:
 800323c:	6841      	ldr	r1, [r0, #4]
 800323e:	4b0c      	ldr	r3, [pc, #48]	@ (8003270 <cleanup_stdio+0x34>)
 8003240:	4299      	cmp	r1, r3
 8003242:	b510      	push	{r4, lr}
 8003244:	4604      	mov	r4, r0
 8003246:	d001      	beq.n	800324c <cleanup_stdio+0x10>
 8003248:	f000 fd96 	bl	8003d78 <_fflush_r>
 800324c:	68a1      	ldr	r1, [r4, #8]
 800324e:	4b09      	ldr	r3, [pc, #36]	@ (8003274 <cleanup_stdio+0x38>)
 8003250:	4299      	cmp	r1, r3
 8003252:	d002      	beq.n	800325a <cleanup_stdio+0x1e>
 8003254:	4620      	mov	r0, r4
 8003256:	f000 fd8f 	bl	8003d78 <_fflush_r>
 800325a:	68e1      	ldr	r1, [r4, #12]
 800325c:	4b06      	ldr	r3, [pc, #24]	@ (8003278 <cleanup_stdio+0x3c>)
 800325e:	4299      	cmp	r1, r3
 8003260:	d004      	beq.n	800326c <cleanup_stdio+0x30>
 8003262:	4620      	mov	r0, r4
 8003264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003268:	f000 bd86 	b.w	8003d78 <_fflush_r>
 800326c:	bd10      	pop	{r4, pc}
 800326e:	bf00      	nop
 8003270:	20000114 	.word	0x20000114
 8003274:	2000017c 	.word	0x2000017c
 8003278:	200001e4 	.word	0x200001e4

0800327c <global_stdio_init.part.0>:
 800327c:	b510      	push	{r4, lr}
 800327e:	4b0b      	ldr	r3, [pc, #44]	@ (80032ac <global_stdio_init.part.0+0x30>)
 8003280:	4c0b      	ldr	r4, [pc, #44]	@ (80032b0 <global_stdio_init.part.0+0x34>)
 8003282:	4a0c      	ldr	r2, [pc, #48]	@ (80032b4 <global_stdio_init.part.0+0x38>)
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	4620      	mov	r0, r4
 8003288:	2200      	movs	r2, #0
 800328a:	2104      	movs	r1, #4
 800328c:	f7ff ff94 	bl	80031b8 <std>
 8003290:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003294:	2201      	movs	r2, #1
 8003296:	2109      	movs	r1, #9
 8003298:	f7ff ff8e 	bl	80031b8 <std>
 800329c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80032a0:	2202      	movs	r2, #2
 80032a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032a6:	2112      	movs	r1, #18
 80032a8:	f7ff bf86 	b.w	80031b8 <std>
 80032ac:	2000024c 	.word	0x2000024c
 80032b0:	20000114 	.word	0x20000114
 80032b4:	08003225 	.word	0x08003225

080032b8 <__sfp_lock_acquire>:
 80032b8:	4801      	ldr	r0, [pc, #4]	@ (80032c0 <__sfp_lock_acquire+0x8>)
 80032ba:	f000 b90e 	b.w	80034da <__retarget_lock_acquire_recursive>
 80032be:	bf00      	nop
 80032c0:	20000255 	.word	0x20000255

080032c4 <__sfp_lock_release>:
 80032c4:	4801      	ldr	r0, [pc, #4]	@ (80032cc <__sfp_lock_release+0x8>)
 80032c6:	f000 b909 	b.w	80034dc <__retarget_lock_release_recursive>
 80032ca:	bf00      	nop
 80032cc:	20000255 	.word	0x20000255

080032d0 <__sinit>:
 80032d0:	b510      	push	{r4, lr}
 80032d2:	4604      	mov	r4, r0
 80032d4:	f7ff fff0 	bl	80032b8 <__sfp_lock_acquire>
 80032d8:	6a23      	ldr	r3, [r4, #32]
 80032da:	b11b      	cbz	r3, 80032e4 <__sinit+0x14>
 80032dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032e0:	f7ff bff0 	b.w	80032c4 <__sfp_lock_release>
 80032e4:	4b04      	ldr	r3, [pc, #16]	@ (80032f8 <__sinit+0x28>)
 80032e6:	6223      	str	r3, [r4, #32]
 80032e8:	4b04      	ldr	r3, [pc, #16]	@ (80032fc <__sinit+0x2c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1f5      	bne.n	80032dc <__sinit+0xc>
 80032f0:	f7ff ffc4 	bl	800327c <global_stdio_init.part.0>
 80032f4:	e7f2      	b.n	80032dc <__sinit+0xc>
 80032f6:	bf00      	nop
 80032f8:	0800323d 	.word	0x0800323d
 80032fc:	2000024c 	.word	0x2000024c

08003300 <_fwalk_sglue>:
 8003300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003304:	4607      	mov	r7, r0
 8003306:	4688      	mov	r8, r1
 8003308:	4614      	mov	r4, r2
 800330a:	2600      	movs	r6, #0
 800330c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003310:	f1b9 0901 	subs.w	r9, r9, #1
 8003314:	d505      	bpl.n	8003322 <_fwalk_sglue+0x22>
 8003316:	6824      	ldr	r4, [r4, #0]
 8003318:	2c00      	cmp	r4, #0
 800331a:	d1f7      	bne.n	800330c <_fwalk_sglue+0xc>
 800331c:	4630      	mov	r0, r6
 800331e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003322:	89ab      	ldrh	r3, [r5, #12]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d907      	bls.n	8003338 <_fwalk_sglue+0x38>
 8003328:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800332c:	3301      	adds	r3, #1
 800332e:	d003      	beq.n	8003338 <_fwalk_sglue+0x38>
 8003330:	4629      	mov	r1, r5
 8003332:	4638      	mov	r0, r7
 8003334:	47c0      	blx	r8
 8003336:	4306      	orrs	r6, r0
 8003338:	3568      	adds	r5, #104	@ 0x68
 800333a:	e7e9      	b.n	8003310 <_fwalk_sglue+0x10>

0800333c <iprintf>:
 800333c:	b40f      	push	{r0, r1, r2, r3}
 800333e:	b507      	push	{r0, r1, r2, lr}
 8003340:	4906      	ldr	r1, [pc, #24]	@ (800335c <iprintf+0x20>)
 8003342:	ab04      	add	r3, sp, #16
 8003344:	6808      	ldr	r0, [r1, #0]
 8003346:	f853 2b04 	ldr.w	r2, [r3], #4
 800334a:	6881      	ldr	r1, [r0, #8]
 800334c:	9301      	str	r3, [sp, #4]
 800334e:	f000 f9e9 	bl	8003724 <_vfiprintf_r>
 8003352:	b003      	add	sp, #12
 8003354:	f85d eb04 	ldr.w	lr, [sp], #4
 8003358:	b004      	add	sp, #16
 800335a:	4770      	bx	lr
 800335c:	20000018 	.word	0x20000018

08003360 <__sread>:
 8003360:	b510      	push	{r4, lr}
 8003362:	460c      	mov	r4, r1
 8003364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003368:	f000 f868 	bl	800343c <_read_r>
 800336c:	2800      	cmp	r0, #0
 800336e:	bfab      	itete	ge
 8003370:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003372:	89a3      	ldrhlt	r3, [r4, #12]
 8003374:	181b      	addge	r3, r3, r0
 8003376:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800337a:	bfac      	ite	ge
 800337c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800337e:	81a3      	strhlt	r3, [r4, #12]
 8003380:	bd10      	pop	{r4, pc}

08003382 <__swrite>:
 8003382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003386:	461f      	mov	r7, r3
 8003388:	898b      	ldrh	r3, [r1, #12]
 800338a:	05db      	lsls	r3, r3, #23
 800338c:	4605      	mov	r5, r0
 800338e:	460c      	mov	r4, r1
 8003390:	4616      	mov	r6, r2
 8003392:	d505      	bpl.n	80033a0 <__swrite+0x1e>
 8003394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003398:	2302      	movs	r3, #2
 800339a:	2200      	movs	r2, #0
 800339c:	f000 f83c 	bl	8003418 <_lseek_r>
 80033a0:	89a3      	ldrh	r3, [r4, #12]
 80033a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80033aa:	81a3      	strh	r3, [r4, #12]
 80033ac:	4632      	mov	r2, r6
 80033ae:	463b      	mov	r3, r7
 80033b0:	4628      	mov	r0, r5
 80033b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033b6:	f000 b853 	b.w	8003460 <_write_r>

080033ba <__sseek>:
 80033ba:	b510      	push	{r4, lr}
 80033bc:	460c      	mov	r4, r1
 80033be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033c2:	f000 f829 	bl	8003418 <_lseek_r>
 80033c6:	1c43      	adds	r3, r0, #1
 80033c8:	89a3      	ldrh	r3, [r4, #12]
 80033ca:	bf15      	itete	ne
 80033cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80033ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80033d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80033d6:	81a3      	strheq	r3, [r4, #12]
 80033d8:	bf18      	it	ne
 80033da:	81a3      	strhne	r3, [r4, #12]
 80033dc:	bd10      	pop	{r4, pc}

080033de <__sclose>:
 80033de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033e2:	f000 b809 	b.w	80033f8 <_close_r>

080033e6 <memset>:
 80033e6:	4402      	add	r2, r0
 80033e8:	4603      	mov	r3, r0
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d100      	bne.n	80033f0 <memset+0xa>
 80033ee:	4770      	bx	lr
 80033f0:	f803 1b01 	strb.w	r1, [r3], #1
 80033f4:	e7f9      	b.n	80033ea <memset+0x4>
	...

080033f8 <_close_r>:
 80033f8:	b538      	push	{r3, r4, r5, lr}
 80033fa:	4d06      	ldr	r5, [pc, #24]	@ (8003414 <_close_r+0x1c>)
 80033fc:	2300      	movs	r3, #0
 80033fe:	4604      	mov	r4, r0
 8003400:	4608      	mov	r0, r1
 8003402:	602b      	str	r3, [r5, #0]
 8003404:	f7fd fb20 	bl	8000a48 <_close>
 8003408:	1c43      	adds	r3, r0, #1
 800340a:	d102      	bne.n	8003412 <_close_r+0x1a>
 800340c:	682b      	ldr	r3, [r5, #0]
 800340e:	b103      	cbz	r3, 8003412 <_close_r+0x1a>
 8003410:	6023      	str	r3, [r4, #0]
 8003412:	bd38      	pop	{r3, r4, r5, pc}
 8003414:	20000250 	.word	0x20000250

08003418 <_lseek_r>:
 8003418:	b538      	push	{r3, r4, r5, lr}
 800341a:	4d07      	ldr	r5, [pc, #28]	@ (8003438 <_lseek_r+0x20>)
 800341c:	4604      	mov	r4, r0
 800341e:	4608      	mov	r0, r1
 8003420:	4611      	mov	r1, r2
 8003422:	2200      	movs	r2, #0
 8003424:	602a      	str	r2, [r5, #0]
 8003426:	461a      	mov	r2, r3
 8003428:	f7fd fb35 	bl	8000a96 <_lseek>
 800342c:	1c43      	adds	r3, r0, #1
 800342e:	d102      	bne.n	8003436 <_lseek_r+0x1e>
 8003430:	682b      	ldr	r3, [r5, #0]
 8003432:	b103      	cbz	r3, 8003436 <_lseek_r+0x1e>
 8003434:	6023      	str	r3, [r4, #0]
 8003436:	bd38      	pop	{r3, r4, r5, pc}
 8003438:	20000250 	.word	0x20000250

0800343c <_read_r>:
 800343c:	b538      	push	{r3, r4, r5, lr}
 800343e:	4d07      	ldr	r5, [pc, #28]	@ (800345c <_read_r+0x20>)
 8003440:	4604      	mov	r4, r0
 8003442:	4608      	mov	r0, r1
 8003444:	4611      	mov	r1, r2
 8003446:	2200      	movs	r2, #0
 8003448:	602a      	str	r2, [r5, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	f7fd fac3 	bl	80009d6 <_read>
 8003450:	1c43      	adds	r3, r0, #1
 8003452:	d102      	bne.n	800345a <_read_r+0x1e>
 8003454:	682b      	ldr	r3, [r5, #0]
 8003456:	b103      	cbz	r3, 800345a <_read_r+0x1e>
 8003458:	6023      	str	r3, [r4, #0]
 800345a:	bd38      	pop	{r3, r4, r5, pc}
 800345c:	20000250 	.word	0x20000250

08003460 <_write_r>:
 8003460:	b538      	push	{r3, r4, r5, lr}
 8003462:	4d07      	ldr	r5, [pc, #28]	@ (8003480 <_write_r+0x20>)
 8003464:	4604      	mov	r4, r0
 8003466:	4608      	mov	r0, r1
 8003468:	4611      	mov	r1, r2
 800346a:	2200      	movs	r2, #0
 800346c:	602a      	str	r2, [r5, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	f7fd face 	bl	8000a10 <_write>
 8003474:	1c43      	adds	r3, r0, #1
 8003476:	d102      	bne.n	800347e <_write_r+0x1e>
 8003478:	682b      	ldr	r3, [r5, #0]
 800347a:	b103      	cbz	r3, 800347e <_write_r+0x1e>
 800347c:	6023      	str	r3, [r4, #0]
 800347e:	bd38      	pop	{r3, r4, r5, pc}
 8003480:	20000250 	.word	0x20000250

08003484 <__errno>:
 8003484:	4b01      	ldr	r3, [pc, #4]	@ (800348c <__errno+0x8>)
 8003486:	6818      	ldr	r0, [r3, #0]
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	20000018 	.word	0x20000018

08003490 <__libc_init_array>:
 8003490:	b570      	push	{r4, r5, r6, lr}
 8003492:	4d0d      	ldr	r5, [pc, #52]	@ (80034c8 <__libc_init_array+0x38>)
 8003494:	4c0d      	ldr	r4, [pc, #52]	@ (80034cc <__libc_init_array+0x3c>)
 8003496:	1b64      	subs	r4, r4, r5
 8003498:	10a4      	asrs	r4, r4, #2
 800349a:	2600      	movs	r6, #0
 800349c:	42a6      	cmp	r6, r4
 800349e:	d109      	bne.n	80034b4 <__libc_init_array+0x24>
 80034a0:	4d0b      	ldr	r5, [pc, #44]	@ (80034d0 <__libc_init_array+0x40>)
 80034a2:	4c0c      	ldr	r4, [pc, #48]	@ (80034d4 <__libc_init_array+0x44>)
 80034a4:	f000 fdb8 	bl	8004018 <_init>
 80034a8:	1b64      	subs	r4, r4, r5
 80034aa:	10a4      	asrs	r4, r4, #2
 80034ac:	2600      	movs	r6, #0
 80034ae:	42a6      	cmp	r6, r4
 80034b0:	d105      	bne.n	80034be <__libc_init_array+0x2e>
 80034b2:	bd70      	pop	{r4, r5, r6, pc}
 80034b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034b8:	4798      	blx	r3
 80034ba:	3601      	adds	r6, #1
 80034bc:	e7ee      	b.n	800349c <__libc_init_array+0xc>
 80034be:	f855 3b04 	ldr.w	r3, [r5], #4
 80034c2:	4798      	blx	r3
 80034c4:	3601      	adds	r6, #1
 80034c6:	e7f2      	b.n	80034ae <__libc_init_array+0x1e>
 80034c8:	08004108 	.word	0x08004108
 80034cc:	08004108 	.word	0x08004108
 80034d0:	08004108 	.word	0x08004108
 80034d4:	0800410c 	.word	0x0800410c

080034d8 <__retarget_lock_init_recursive>:
 80034d8:	4770      	bx	lr

080034da <__retarget_lock_acquire_recursive>:
 80034da:	4770      	bx	lr

080034dc <__retarget_lock_release_recursive>:
 80034dc:	4770      	bx	lr
	...

080034e0 <_free_r>:
 80034e0:	b538      	push	{r3, r4, r5, lr}
 80034e2:	4605      	mov	r5, r0
 80034e4:	2900      	cmp	r1, #0
 80034e6:	d041      	beq.n	800356c <_free_r+0x8c>
 80034e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034ec:	1f0c      	subs	r4, r1, #4
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	bfb8      	it	lt
 80034f2:	18e4      	addlt	r4, r4, r3
 80034f4:	f000 f8e0 	bl	80036b8 <__malloc_lock>
 80034f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003570 <_free_r+0x90>)
 80034fa:	6813      	ldr	r3, [r2, #0]
 80034fc:	b933      	cbnz	r3, 800350c <_free_r+0x2c>
 80034fe:	6063      	str	r3, [r4, #4]
 8003500:	6014      	str	r4, [r2, #0]
 8003502:	4628      	mov	r0, r5
 8003504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003508:	f000 b8dc 	b.w	80036c4 <__malloc_unlock>
 800350c:	42a3      	cmp	r3, r4
 800350e:	d908      	bls.n	8003522 <_free_r+0x42>
 8003510:	6820      	ldr	r0, [r4, #0]
 8003512:	1821      	adds	r1, r4, r0
 8003514:	428b      	cmp	r3, r1
 8003516:	bf01      	itttt	eq
 8003518:	6819      	ldreq	r1, [r3, #0]
 800351a:	685b      	ldreq	r3, [r3, #4]
 800351c:	1809      	addeq	r1, r1, r0
 800351e:	6021      	streq	r1, [r4, #0]
 8003520:	e7ed      	b.n	80034fe <_free_r+0x1e>
 8003522:	461a      	mov	r2, r3
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	b10b      	cbz	r3, 800352c <_free_r+0x4c>
 8003528:	42a3      	cmp	r3, r4
 800352a:	d9fa      	bls.n	8003522 <_free_r+0x42>
 800352c:	6811      	ldr	r1, [r2, #0]
 800352e:	1850      	adds	r0, r2, r1
 8003530:	42a0      	cmp	r0, r4
 8003532:	d10b      	bne.n	800354c <_free_r+0x6c>
 8003534:	6820      	ldr	r0, [r4, #0]
 8003536:	4401      	add	r1, r0
 8003538:	1850      	adds	r0, r2, r1
 800353a:	4283      	cmp	r3, r0
 800353c:	6011      	str	r1, [r2, #0]
 800353e:	d1e0      	bne.n	8003502 <_free_r+0x22>
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	6053      	str	r3, [r2, #4]
 8003546:	4408      	add	r0, r1
 8003548:	6010      	str	r0, [r2, #0]
 800354a:	e7da      	b.n	8003502 <_free_r+0x22>
 800354c:	d902      	bls.n	8003554 <_free_r+0x74>
 800354e:	230c      	movs	r3, #12
 8003550:	602b      	str	r3, [r5, #0]
 8003552:	e7d6      	b.n	8003502 <_free_r+0x22>
 8003554:	6820      	ldr	r0, [r4, #0]
 8003556:	1821      	adds	r1, r4, r0
 8003558:	428b      	cmp	r3, r1
 800355a:	bf04      	itt	eq
 800355c:	6819      	ldreq	r1, [r3, #0]
 800355e:	685b      	ldreq	r3, [r3, #4]
 8003560:	6063      	str	r3, [r4, #4]
 8003562:	bf04      	itt	eq
 8003564:	1809      	addeq	r1, r1, r0
 8003566:	6021      	streq	r1, [r4, #0]
 8003568:	6054      	str	r4, [r2, #4]
 800356a:	e7ca      	b.n	8003502 <_free_r+0x22>
 800356c:	bd38      	pop	{r3, r4, r5, pc}
 800356e:	bf00      	nop
 8003570:	2000025c 	.word	0x2000025c

08003574 <sbrk_aligned>:
 8003574:	b570      	push	{r4, r5, r6, lr}
 8003576:	4e0f      	ldr	r6, [pc, #60]	@ (80035b4 <sbrk_aligned+0x40>)
 8003578:	460c      	mov	r4, r1
 800357a:	6831      	ldr	r1, [r6, #0]
 800357c:	4605      	mov	r5, r0
 800357e:	b911      	cbnz	r1, 8003586 <sbrk_aligned+0x12>
 8003580:	f000 fcb6 	bl	8003ef0 <_sbrk_r>
 8003584:	6030      	str	r0, [r6, #0]
 8003586:	4621      	mov	r1, r4
 8003588:	4628      	mov	r0, r5
 800358a:	f000 fcb1 	bl	8003ef0 <_sbrk_r>
 800358e:	1c43      	adds	r3, r0, #1
 8003590:	d103      	bne.n	800359a <sbrk_aligned+0x26>
 8003592:	f04f 34ff 	mov.w	r4, #4294967295
 8003596:	4620      	mov	r0, r4
 8003598:	bd70      	pop	{r4, r5, r6, pc}
 800359a:	1cc4      	adds	r4, r0, #3
 800359c:	f024 0403 	bic.w	r4, r4, #3
 80035a0:	42a0      	cmp	r0, r4
 80035a2:	d0f8      	beq.n	8003596 <sbrk_aligned+0x22>
 80035a4:	1a21      	subs	r1, r4, r0
 80035a6:	4628      	mov	r0, r5
 80035a8:	f000 fca2 	bl	8003ef0 <_sbrk_r>
 80035ac:	3001      	adds	r0, #1
 80035ae:	d1f2      	bne.n	8003596 <sbrk_aligned+0x22>
 80035b0:	e7ef      	b.n	8003592 <sbrk_aligned+0x1e>
 80035b2:	bf00      	nop
 80035b4:	20000258 	.word	0x20000258

080035b8 <_malloc_r>:
 80035b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035bc:	1ccd      	adds	r5, r1, #3
 80035be:	f025 0503 	bic.w	r5, r5, #3
 80035c2:	3508      	adds	r5, #8
 80035c4:	2d0c      	cmp	r5, #12
 80035c6:	bf38      	it	cc
 80035c8:	250c      	movcc	r5, #12
 80035ca:	2d00      	cmp	r5, #0
 80035cc:	4606      	mov	r6, r0
 80035ce:	db01      	blt.n	80035d4 <_malloc_r+0x1c>
 80035d0:	42a9      	cmp	r1, r5
 80035d2:	d904      	bls.n	80035de <_malloc_r+0x26>
 80035d4:	230c      	movs	r3, #12
 80035d6:	6033      	str	r3, [r6, #0]
 80035d8:	2000      	movs	r0, #0
 80035da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80036b4 <_malloc_r+0xfc>
 80035e2:	f000 f869 	bl	80036b8 <__malloc_lock>
 80035e6:	f8d8 3000 	ldr.w	r3, [r8]
 80035ea:	461c      	mov	r4, r3
 80035ec:	bb44      	cbnz	r4, 8003640 <_malloc_r+0x88>
 80035ee:	4629      	mov	r1, r5
 80035f0:	4630      	mov	r0, r6
 80035f2:	f7ff ffbf 	bl	8003574 <sbrk_aligned>
 80035f6:	1c43      	adds	r3, r0, #1
 80035f8:	4604      	mov	r4, r0
 80035fa:	d158      	bne.n	80036ae <_malloc_r+0xf6>
 80035fc:	f8d8 4000 	ldr.w	r4, [r8]
 8003600:	4627      	mov	r7, r4
 8003602:	2f00      	cmp	r7, #0
 8003604:	d143      	bne.n	800368e <_malloc_r+0xd6>
 8003606:	2c00      	cmp	r4, #0
 8003608:	d04b      	beq.n	80036a2 <_malloc_r+0xea>
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	4639      	mov	r1, r7
 800360e:	4630      	mov	r0, r6
 8003610:	eb04 0903 	add.w	r9, r4, r3
 8003614:	f000 fc6c 	bl	8003ef0 <_sbrk_r>
 8003618:	4581      	cmp	r9, r0
 800361a:	d142      	bne.n	80036a2 <_malloc_r+0xea>
 800361c:	6821      	ldr	r1, [r4, #0]
 800361e:	1a6d      	subs	r5, r5, r1
 8003620:	4629      	mov	r1, r5
 8003622:	4630      	mov	r0, r6
 8003624:	f7ff ffa6 	bl	8003574 <sbrk_aligned>
 8003628:	3001      	adds	r0, #1
 800362a:	d03a      	beq.n	80036a2 <_malloc_r+0xea>
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	442b      	add	r3, r5
 8003630:	6023      	str	r3, [r4, #0]
 8003632:	f8d8 3000 	ldr.w	r3, [r8]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	bb62      	cbnz	r2, 8003694 <_malloc_r+0xdc>
 800363a:	f8c8 7000 	str.w	r7, [r8]
 800363e:	e00f      	b.n	8003660 <_malloc_r+0xa8>
 8003640:	6822      	ldr	r2, [r4, #0]
 8003642:	1b52      	subs	r2, r2, r5
 8003644:	d420      	bmi.n	8003688 <_malloc_r+0xd0>
 8003646:	2a0b      	cmp	r2, #11
 8003648:	d917      	bls.n	800367a <_malloc_r+0xc2>
 800364a:	1961      	adds	r1, r4, r5
 800364c:	42a3      	cmp	r3, r4
 800364e:	6025      	str	r5, [r4, #0]
 8003650:	bf18      	it	ne
 8003652:	6059      	strne	r1, [r3, #4]
 8003654:	6863      	ldr	r3, [r4, #4]
 8003656:	bf08      	it	eq
 8003658:	f8c8 1000 	streq.w	r1, [r8]
 800365c:	5162      	str	r2, [r4, r5]
 800365e:	604b      	str	r3, [r1, #4]
 8003660:	4630      	mov	r0, r6
 8003662:	f000 f82f 	bl	80036c4 <__malloc_unlock>
 8003666:	f104 000b 	add.w	r0, r4, #11
 800366a:	1d23      	adds	r3, r4, #4
 800366c:	f020 0007 	bic.w	r0, r0, #7
 8003670:	1ac2      	subs	r2, r0, r3
 8003672:	bf1c      	itt	ne
 8003674:	1a1b      	subne	r3, r3, r0
 8003676:	50a3      	strne	r3, [r4, r2]
 8003678:	e7af      	b.n	80035da <_malloc_r+0x22>
 800367a:	6862      	ldr	r2, [r4, #4]
 800367c:	42a3      	cmp	r3, r4
 800367e:	bf0c      	ite	eq
 8003680:	f8c8 2000 	streq.w	r2, [r8]
 8003684:	605a      	strne	r2, [r3, #4]
 8003686:	e7eb      	b.n	8003660 <_malloc_r+0xa8>
 8003688:	4623      	mov	r3, r4
 800368a:	6864      	ldr	r4, [r4, #4]
 800368c:	e7ae      	b.n	80035ec <_malloc_r+0x34>
 800368e:	463c      	mov	r4, r7
 8003690:	687f      	ldr	r7, [r7, #4]
 8003692:	e7b6      	b.n	8003602 <_malloc_r+0x4a>
 8003694:	461a      	mov	r2, r3
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	42a3      	cmp	r3, r4
 800369a:	d1fb      	bne.n	8003694 <_malloc_r+0xdc>
 800369c:	2300      	movs	r3, #0
 800369e:	6053      	str	r3, [r2, #4]
 80036a0:	e7de      	b.n	8003660 <_malloc_r+0xa8>
 80036a2:	230c      	movs	r3, #12
 80036a4:	6033      	str	r3, [r6, #0]
 80036a6:	4630      	mov	r0, r6
 80036a8:	f000 f80c 	bl	80036c4 <__malloc_unlock>
 80036ac:	e794      	b.n	80035d8 <_malloc_r+0x20>
 80036ae:	6005      	str	r5, [r0, #0]
 80036b0:	e7d6      	b.n	8003660 <_malloc_r+0xa8>
 80036b2:	bf00      	nop
 80036b4:	2000025c 	.word	0x2000025c

080036b8 <__malloc_lock>:
 80036b8:	4801      	ldr	r0, [pc, #4]	@ (80036c0 <__malloc_lock+0x8>)
 80036ba:	f7ff bf0e 	b.w	80034da <__retarget_lock_acquire_recursive>
 80036be:	bf00      	nop
 80036c0:	20000254 	.word	0x20000254

080036c4 <__malloc_unlock>:
 80036c4:	4801      	ldr	r0, [pc, #4]	@ (80036cc <__malloc_unlock+0x8>)
 80036c6:	f7ff bf09 	b.w	80034dc <__retarget_lock_release_recursive>
 80036ca:	bf00      	nop
 80036cc:	20000254 	.word	0x20000254

080036d0 <__sfputc_r>:
 80036d0:	6893      	ldr	r3, [r2, #8]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	b410      	push	{r4}
 80036d8:	6093      	str	r3, [r2, #8]
 80036da:	da08      	bge.n	80036ee <__sfputc_r+0x1e>
 80036dc:	6994      	ldr	r4, [r2, #24]
 80036de:	42a3      	cmp	r3, r4
 80036e0:	db01      	blt.n	80036e6 <__sfputc_r+0x16>
 80036e2:	290a      	cmp	r1, #10
 80036e4:	d103      	bne.n	80036ee <__sfputc_r+0x1e>
 80036e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036ea:	f000 bb6d 	b.w	8003dc8 <__swbuf_r>
 80036ee:	6813      	ldr	r3, [r2, #0]
 80036f0:	1c58      	adds	r0, r3, #1
 80036f2:	6010      	str	r0, [r2, #0]
 80036f4:	7019      	strb	r1, [r3, #0]
 80036f6:	4608      	mov	r0, r1
 80036f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <__sfputs_r>:
 80036fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003700:	4606      	mov	r6, r0
 8003702:	460f      	mov	r7, r1
 8003704:	4614      	mov	r4, r2
 8003706:	18d5      	adds	r5, r2, r3
 8003708:	42ac      	cmp	r4, r5
 800370a:	d101      	bne.n	8003710 <__sfputs_r+0x12>
 800370c:	2000      	movs	r0, #0
 800370e:	e007      	b.n	8003720 <__sfputs_r+0x22>
 8003710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003714:	463a      	mov	r2, r7
 8003716:	4630      	mov	r0, r6
 8003718:	f7ff ffda 	bl	80036d0 <__sfputc_r>
 800371c:	1c43      	adds	r3, r0, #1
 800371e:	d1f3      	bne.n	8003708 <__sfputs_r+0xa>
 8003720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003724 <_vfiprintf_r>:
 8003724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003728:	460d      	mov	r5, r1
 800372a:	b09d      	sub	sp, #116	@ 0x74
 800372c:	4614      	mov	r4, r2
 800372e:	4698      	mov	r8, r3
 8003730:	4606      	mov	r6, r0
 8003732:	b118      	cbz	r0, 800373c <_vfiprintf_r+0x18>
 8003734:	6a03      	ldr	r3, [r0, #32]
 8003736:	b90b      	cbnz	r3, 800373c <_vfiprintf_r+0x18>
 8003738:	f7ff fdca 	bl	80032d0 <__sinit>
 800373c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800373e:	07d9      	lsls	r1, r3, #31
 8003740:	d405      	bmi.n	800374e <_vfiprintf_r+0x2a>
 8003742:	89ab      	ldrh	r3, [r5, #12]
 8003744:	059a      	lsls	r2, r3, #22
 8003746:	d402      	bmi.n	800374e <_vfiprintf_r+0x2a>
 8003748:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800374a:	f7ff fec6 	bl	80034da <__retarget_lock_acquire_recursive>
 800374e:	89ab      	ldrh	r3, [r5, #12]
 8003750:	071b      	lsls	r3, r3, #28
 8003752:	d501      	bpl.n	8003758 <_vfiprintf_r+0x34>
 8003754:	692b      	ldr	r3, [r5, #16]
 8003756:	b99b      	cbnz	r3, 8003780 <_vfiprintf_r+0x5c>
 8003758:	4629      	mov	r1, r5
 800375a:	4630      	mov	r0, r6
 800375c:	f000 fb72 	bl	8003e44 <__swsetup_r>
 8003760:	b170      	cbz	r0, 8003780 <_vfiprintf_r+0x5c>
 8003762:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003764:	07dc      	lsls	r4, r3, #31
 8003766:	d504      	bpl.n	8003772 <_vfiprintf_r+0x4e>
 8003768:	f04f 30ff 	mov.w	r0, #4294967295
 800376c:	b01d      	add	sp, #116	@ 0x74
 800376e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003772:	89ab      	ldrh	r3, [r5, #12]
 8003774:	0598      	lsls	r0, r3, #22
 8003776:	d4f7      	bmi.n	8003768 <_vfiprintf_r+0x44>
 8003778:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800377a:	f7ff feaf 	bl	80034dc <__retarget_lock_release_recursive>
 800377e:	e7f3      	b.n	8003768 <_vfiprintf_r+0x44>
 8003780:	2300      	movs	r3, #0
 8003782:	9309      	str	r3, [sp, #36]	@ 0x24
 8003784:	2320      	movs	r3, #32
 8003786:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800378a:	f8cd 800c 	str.w	r8, [sp, #12]
 800378e:	2330      	movs	r3, #48	@ 0x30
 8003790:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003940 <_vfiprintf_r+0x21c>
 8003794:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003798:	f04f 0901 	mov.w	r9, #1
 800379c:	4623      	mov	r3, r4
 800379e:	469a      	mov	sl, r3
 80037a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037a4:	b10a      	cbz	r2, 80037aa <_vfiprintf_r+0x86>
 80037a6:	2a25      	cmp	r2, #37	@ 0x25
 80037a8:	d1f9      	bne.n	800379e <_vfiprintf_r+0x7a>
 80037aa:	ebba 0b04 	subs.w	fp, sl, r4
 80037ae:	d00b      	beq.n	80037c8 <_vfiprintf_r+0xa4>
 80037b0:	465b      	mov	r3, fp
 80037b2:	4622      	mov	r2, r4
 80037b4:	4629      	mov	r1, r5
 80037b6:	4630      	mov	r0, r6
 80037b8:	f7ff ffa1 	bl	80036fe <__sfputs_r>
 80037bc:	3001      	adds	r0, #1
 80037be:	f000 80a7 	beq.w	8003910 <_vfiprintf_r+0x1ec>
 80037c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80037c4:	445a      	add	r2, fp
 80037c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80037c8:	f89a 3000 	ldrb.w	r3, [sl]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 809f 	beq.w	8003910 <_vfiprintf_r+0x1ec>
 80037d2:	2300      	movs	r3, #0
 80037d4:	f04f 32ff 	mov.w	r2, #4294967295
 80037d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037dc:	f10a 0a01 	add.w	sl, sl, #1
 80037e0:	9304      	str	r3, [sp, #16]
 80037e2:	9307      	str	r3, [sp, #28]
 80037e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80037e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80037ea:	4654      	mov	r4, sl
 80037ec:	2205      	movs	r2, #5
 80037ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037f2:	4853      	ldr	r0, [pc, #332]	@ (8003940 <_vfiprintf_r+0x21c>)
 80037f4:	f7fc fcec 	bl	80001d0 <memchr>
 80037f8:	9a04      	ldr	r2, [sp, #16]
 80037fa:	b9d8      	cbnz	r0, 8003834 <_vfiprintf_r+0x110>
 80037fc:	06d1      	lsls	r1, r2, #27
 80037fe:	bf44      	itt	mi
 8003800:	2320      	movmi	r3, #32
 8003802:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003806:	0713      	lsls	r3, r2, #28
 8003808:	bf44      	itt	mi
 800380a:	232b      	movmi	r3, #43	@ 0x2b
 800380c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003810:	f89a 3000 	ldrb.w	r3, [sl]
 8003814:	2b2a      	cmp	r3, #42	@ 0x2a
 8003816:	d015      	beq.n	8003844 <_vfiprintf_r+0x120>
 8003818:	9a07      	ldr	r2, [sp, #28]
 800381a:	4654      	mov	r4, sl
 800381c:	2000      	movs	r0, #0
 800381e:	f04f 0c0a 	mov.w	ip, #10
 8003822:	4621      	mov	r1, r4
 8003824:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003828:	3b30      	subs	r3, #48	@ 0x30
 800382a:	2b09      	cmp	r3, #9
 800382c:	d94b      	bls.n	80038c6 <_vfiprintf_r+0x1a2>
 800382e:	b1b0      	cbz	r0, 800385e <_vfiprintf_r+0x13a>
 8003830:	9207      	str	r2, [sp, #28]
 8003832:	e014      	b.n	800385e <_vfiprintf_r+0x13a>
 8003834:	eba0 0308 	sub.w	r3, r0, r8
 8003838:	fa09 f303 	lsl.w	r3, r9, r3
 800383c:	4313      	orrs	r3, r2
 800383e:	9304      	str	r3, [sp, #16]
 8003840:	46a2      	mov	sl, r4
 8003842:	e7d2      	b.n	80037ea <_vfiprintf_r+0xc6>
 8003844:	9b03      	ldr	r3, [sp, #12]
 8003846:	1d19      	adds	r1, r3, #4
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	9103      	str	r1, [sp, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	bfbb      	ittet	lt
 8003850:	425b      	neglt	r3, r3
 8003852:	f042 0202 	orrlt.w	r2, r2, #2
 8003856:	9307      	strge	r3, [sp, #28]
 8003858:	9307      	strlt	r3, [sp, #28]
 800385a:	bfb8      	it	lt
 800385c:	9204      	strlt	r2, [sp, #16]
 800385e:	7823      	ldrb	r3, [r4, #0]
 8003860:	2b2e      	cmp	r3, #46	@ 0x2e
 8003862:	d10a      	bne.n	800387a <_vfiprintf_r+0x156>
 8003864:	7863      	ldrb	r3, [r4, #1]
 8003866:	2b2a      	cmp	r3, #42	@ 0x2a
 8003868:	d132      	bne.n	80038d0 <_vfiprintf_r+0x1ac>
 800386a:	9b03      	ldr	r3, [sp, #12]
 800386c:	1d1a      	adds	r2, r3, #4
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	9203      	str	r2, [sp, #12]
 8003872:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003876:	3402      	adds	r4, #2
 8003878:	9305      	str	r3, [sp, #20]
 800387a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003950 <_vfiprintf_r+0x22c>
 800387e:	7821      	ldrb	r1, [r4, #0]
 8003880:	2203      	movs	r2, #3
 8003882:	4650      	mov	r0, sl
 8003884:	f7fc fca4 	bl	80001d0 <memchr>
 8003888:	b138      	cbz	r0, 800389a <_vfiprintf_r+0x176>
 800388a:	9b04      	ldr	r3, [sp, #16]
 800388c:	eba0 000a 	sub.w	r0, r0, sl
 8003890:	2240      	movs	r2, #64	@ 0x40
 8003892:	4082      	lsls	r2, r0
 8003894:	4313      	orrs	r3, r2
 8003896:	3401      	adds	r4, #1
 8003898:	9304      	str	r3, [sp, #16]
 800389a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800389e:	4829      	ldr	r0, [pc, #164]	@ (8003944 <_vfiprintf_r+0x220>)
 80038a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80038a4:	2206      	movs	r2, #6
 80038a6:	f7fc fc93 	bl	80001d0 <memchr>
 80038aa:	2800      	cmp	r0, #0
 80038ac:	d03f      	beq.n	800392e <_vfiprintf_r+0x20a>
 80038ae:	4b26      	ldr	r3, [pc, #152]	@ (8003948 <_vfiprintf_r+0x224>)
 80038b0:	bb1b      	cbnz	r3, 80038fa <_vfiprintf_r+0x1d6>
 80038b2:	9b03      	ldr	r3, [sp, #12]
 80038b4:	3307      	adds	r3, #7
 80038b6:	f023 0307 	bic.w	r3, r3, #7
 80038ba:	3308      	adds	r3, #8
 80038bc:	9303      	str	r3, [sp, #12]
 80038be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038c0:	443b      	add	r3, r7
 80038c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80038c4:	e76a      	b.n	800379c <_vfiprintf_r+0x78>
 80038c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80038ca:	460c      	mov	r4, r1
 80038cc:	2001      	movs	r0, #1
 80038ce:	e7a8      	b.n	8003822 <_vfiprintf_r+0xfe>
 80038d0:	2300      	movs	r3, #0
 80038d2:	3401      	adds	r4, #1
 80038d4:	9305      	str	r3, [sp, #20]
 80038d6:	4619      	mov	r1, r3
 80038d8:	f04f 0c0a 	mov.w	ip, #10
 80038dc:	4620      	mov	r0, r4
 80038de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038e2:	3a30      	subs	r2, #48	@ 0x30
 80038e4:	2a09      	cmp	r2, #9
 80038e6:	d903      	bls.n	80038f0 <_vfiprintf_r+0x1cc>
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0c6      	beq.n	800387a <_vfiprintf_r+0x156>
 80038ec:	9105      	str	r1, [sp, #20]
 80038ee:	e7c4      	b.n	800387a <_vfiprintf_r+0x156>
 80038f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80038f4:	4604      	mov	r4, r0
 80038f6:	2301      	movs	r3, #1
 80038f8:	e7f0      	b.n	80038dc <_vfiprintf_r+0x1b8>
 80038fa:	ab03      	add	r3, sp, #12
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	462a      	mov	r2, r5
 8003900:	4b12      	ldr	r3, [pc, #72]	@ (800394c <_vfiprintf_r+0x228>)
 8003902:	a904      	add	r1, sp, #16
 8003904:	4630      	mov	r0, r6
 8003906:	f3af 8000 	nop.w
 800390a:	4607      	mov	r7, r0
 800390c:	1c78      	adds	r0, r7, #1
 800390e:	d1d6      	bne.n	80038be <_vfiprintf_r+0x19a>
 8003910:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003912:	07d9      	lsls	r1, r3, #31
 8003914:	d405      	bmi.n	8003922 <_vfiprintf_r+0x1fe>
 8003916:	89ab      	ldrh	r3, [r5, #12]
 8003918:	059a      	lsls	r2, r3, #22
 800391a:	d402      	bmi.n	8003922 <_vfiprintf_r+0x1fe>
 800391c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800391e:	f7ff fddd 	bl	80034dc <__retarget_lock_release_recursive>
 8003922:	89ab      	ldrh	r3, [r5, #12]
 8003924:	065b      	lsls	r3, r3, #25
 8003926:	f53f af1f 	bmi.w	8003768 <_vfiprintf_r+0x44>
 800392a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800392c:	e71e      	b.n	800376c <_vfiprintf_r+0x48>
 800392e:	ab03      	add	r3, sp, #12
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	462a      	mov	r2, r5
 8003934:	4b05      	ldr	r3, [pc, #20]	@ (800394c <_vfiprintf_r+0x228>)
 8003936:	a904      	add	r1, sp, #16
 8003938:	4630      	mov	r0, r6
 800393a:	f000 f879 	bl	8003a30 <_printf_i>
 800393e:	e7e4      	b.n	800390a <_vfiprintf_r+0x1e6>
 8003940:	080040cc 	.word	0x080040cc
 8003944:	080040d6 	.word	0x080040d6
 8003948:	00000000 	.word	0x00000000
 800394c:	080036ff 	.word	0x080036ff
 8003950:	080040d2 	.word	0x080040d2

08003954 <_printf_common>:
 8003954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003958:	4616      	mov	r6, r2
 800395a:	4698      	mov	r8, r3
 800395c:	688a      	ldr	r2, [r1, #8]
 800395e:	690b      	ldr	r3, [r1, #16]
 8003960:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003964:	4293      	cmp	r3, r2
 8003966:	bfb8      	it	lt
 8003968:	4613      	movlt	r3, r2
 800396a:	6033      	str	r3, [r6, #0]
 800396c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003970:	4607      	mov	r7, r0
 8003972:	460c      	mov	r4, r1
 8003974:	b10a      	cbz	r2, 800397a <_printf_common+0x26>
 8003976:	3301      	adds	r3, #1
 8003978:	6033      	str	r3, [r6, #0]
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	0699      	lsls	r1, r3, #26
 800397e:	bf42      	ittt	mi
 8003980:	6833      	ldrmi	r3, [r6, #0]
 8003982:	3302      	addmi	r3, #2
 8003984:	6033      	strmi	r3, [r6, #0]
 8003986:	6825      	ldr	r5, [r4, #0]
 8003988:	f015 0506 	ands.w	r5, r5, #6
 800398c:	d106      	bne.n	800399c <_printf_common+0x48>
 800398e:	f104 0a19 	add.w	sl, r4, #25
 8003992:	68e3      	ldr	r3, [r4, #12]
 8003994:	6832      	ldr	r2, [r6, #0]
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	42ab      	cmp	r3, r5
 800399a:	dc26      	bgt.n	80039ea <_printf_common+0x96>
 800399c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80039a0:	6822      	ldr	r2, [r4, #0]
 80039a2:	3b00      	subs	r3, #0
 80039a4:	bf18      	it	ne
 80039a6:	2301      	movne	r3, #1
 80039a8:	0692      	lsls	r2, r2, #26
 80039aa:	d42b      	bmi.n	8003a04 <_printf_common+0xb0>
 80039ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80039b0:	4641      	mov	r1, r8
 80039b2:	4638      	mov	r0, r7
 80039b4:	47c8      	blx	r9
 80039b6:	3001      	adds	r0, #1
 80039b8:	d01e      	beq.n	80039f8 <_printf_common+0xa4>
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	6922      	ldr	r2, [r4, #16]
 80039be:	f003 0306 	and.w	r3, r3, #6
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	bf02      	ittt	eq
 80039c6:	68e5      	ldreq	r5, [r4, #12]
 80039c8:	6833      	ldreq	r3, [r6, #0]
 80039ca:	1aed      	subeq	r5, r5, r3
 80039cc:	68a3      	ldr	r3, [r4, #8]
 80039ce:	bf0c      	ite	eq
 80039d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039d4:	2500      	movne	r5, #0
 80039d6:	4293      	cmp	r3, r2
 80039d8:	bfc4      	itt	gt
 80039da:	1a9b      	subgt	r3, r3, r2
 80039dc:	18ed      	addgt	r5, r5, r3
 80039de:	2600      	movs	r6, #0
 80039e0:	341a      	adds	r4, #26
 80039e2:	42b5      	cmp	r5, r6
 80039e4:	d11a      	bne.n	8003a1c <_printf_common+0xc8>
 80039e6:	2000      	movs	r0, #0
 80039e8:	e008      	b.n	80039fc <_printf_common+0xa8>
 80039ea:	2301      	movs	r3, #1
 80039ec:	4652      	mov	r2, sl
 80039ee:	4641      	mov	r1, r8
 80039f0:	4638      	mov	r0, r7
 80039f2:	47c8      	blx	r9
 80039f4:	3001      	adds	r0, #1
 80039f6:	d103      	bne.n	8003a00 <_printf_common+0xac>
 80039f8:	f04f 30ff 	mov.w	r0, #4294967295
 80039fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a00:	3501      	adds	r5, #1
 8003a02:	e7c6      	b.n	8003992 <_printf_common+0x3e>
 8003a04:	18e1      	adds	r1, r4, r3
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	2030      	movs	r0, #48	@ 0x30
 8003a0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003a0e:	4422      	add	r2, r4
 8003a10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003a14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003a18:	3302      	adds	r3, #2
 8003a1a:	e7c7      	b.n	80039ac <_printf_common+0x58>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	4622      	mov	r2, r4
 8003a20:	4641      	mov	r1, r8
 8003a22:	4638      	mov	r0, r7
 8003a24:	47c8      	blx	r9
 8003a26:	3001      	adds	r0, #1
 8003a28:	d0e6      	beq.n	80039f8 <_printf_common+0xa4>
 8003a2a:	3601      	adds	r6, #1
 8003a2c:	e7d9      	b.n	80039e2 <_printf_common+0x8e>
	...

08003a30 <_printf_i>:
 8003a30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a34:	7e0f      	ldrb	r7, [r1, #24]
 8003a36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003a38:	2f78      	cmp	r7, #120	@ 0x78
 8003a3a:	4691      	mov	r9, r2
 8003a3c:	4680      	mov	r8, r0
 8003a3e:	460c      	mov	r4, r1
 8003a40:	469a      	mov	sl, r3
 8003a42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003a46:	d807      	bhi.n	8003a58 <_printf_i+0x28>
 8003a48:	2f62      	cmp	r7, #98	@ 0x62
 8003a4a:	d80a      	bhi.n	8003a62 <_printf_i+0x32>
 8003a4c:	2f00      	cmp	r7, #0
 8003a4e:	f000 80d2 	beq.w	8003bf6 <_printf_i+0x1c6>
 8003a52:	2f58      	cmp	r7, #88	@ 0x58
 8003a54:	f000 80b9 	beq.w	8003bca <_printf_i+0x19a>
 8003a58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003a60:	e03a      	b.n	8003ad8 <_printf_i+0xa8>
 8003a62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003a66:	2b15      	cmp	r3, #21
 8003a68:	d8f6      	bhi.n	8003a58 <_printf_i+0x28>
 8003a6a:	a101      	add	r1, pc, #4	@ (adr r1, 8003a70 <_printf_i+0x40>)
 8003a6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a70:	08003ac9 	.word	0x08003ac9
 8003a74:	08003add 	.word	0x08003add
 8003a78:	08003a59 	.word	0x08003a59
 8003a7c:	08003a59 	.word	0x08003a59
 8003a80:	08003a59 	.word	0x08003a59
 8003a84:	08003a59 	.word	0x08003a59
 8003a88:	08003add 	.word	0x08003add
 8003a8c:	08003a59 	.word	0x08003a59
 8003a90:	08003a59 	.word	0x08003a59
 8003a94:	08003a59 	.word	0x08003a59
 8003a98:	08003a59 	.word	0x08003a59
 8003a9c:	08003bdd 	.word	0x08003bdd
 8003aa0:	08003b07 	.word	0x08003b07
 8003aa4:	08003b97 	.word	0x08003b97
 8003aa8:	08003a59 	.word	0x08003a59
 8003aac:	08003a59 	.word	0x08003a59
 8003ab0:	08003bff 	.word	0x08003bff
 8003ab4:	08003a59 	.word	0x08003a59
 8003ab8:	08003b07 	.word	0x08003b07
 8003abc:	08003a59 	.word	0x08003a59
 8003ac0:	08003a59 	.word	0x08003a59
 8003ac4:	08003b9f 	.word	0x08003b9f
 8003ac8:	6833      	ldr	r3, [r6, #0]
 8003aca:	1d1a      	adds	r2, r3, #4
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6032      	str	r2, [r6, #0]
 8003ad0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ad4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e09d      	b.n	8003c18 <_printf_i+0x1e8>
 8003adc:	6833      	ldr	r3, [r6, #0]
 8003ade:	6820      	ldr	r0, [r4, #0]
 8003ae0:	1d19      	adds	r1, r3, #4
 8003ae2:	6031      	str	r1, [r6, #0]
 8003ae4:	0606      	lsls	r6, r0, #24
 8003ae6:	d501      	bpl.n	8003aec <_printf_i+0xbc>
 8003ae8:	681d      	ldr	r5, [r3, #0]
 8003aea:	e003      	b.n	8003af4 <_printf_i+0xc4>
 8003aec:	0645      	lsls	r5, r0, #25
 8003aee:	d5fb      	bpl.n	8003ae8 <_printf_i+0xb8>
 8003af0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003af4:	2d00      	cmp	r5, #0
 8003af6:	da03      	bge.n	8003b00 <_printf_i+0xd0>
 8003af8:	232d      	movs	r3, #45	@ 0x2d
 8003afa:	426d      	negs	r5, r5
 8003afc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b00:	4859      	ldr	r0, [pc, #356]	@ (8003c68 <_printf_i+0x238>)
 8003b02:	230a      	movs	r3, #10
 8003b04:	e011      	b.n	8003b2a <_printf_i+0xfa>
 8003b06:	6821      	ldr	r1, [r4, #0]
 8003b08:	6833      	ldr	r3, [r6, #0]
 8003b0a:	0608      	lsls	r0, r1, #24
 8003b0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003b10:	d402      	bmi.n	8003b18 <_printf_i+0xe8>
 8003b12:	0649      	lsls	r1, r1, #25
 8003b14:	bf48      	it	mi
 8003b16:	b2ad      	uxthmi	r5, r5
 8003b18:	2f6f      	cmp	r7, #111	@ 0x6f
 8003b1a:	4853      	ldr	r0, [pc, #332]	@ (8003c68 <_printf_i+0x238>)
 8003b1c:	6033      	str	r3, [r6, #0]
 8003b1e:	bf14      	ite	ne
 8003b20:	230a      	movne	r3, #10
 8003b22:	2308      	moveq	r3, #8
 8003b24:	2100      	movs	r1, #0
 8003b26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003b2a:	6866      	ldr	r6, [r4, #4]
 8003b2c:	60a6      	str	r6, [r4, #8]
 8003b2e:	2e00      	cmp	r6, #0
 8003b30:	bfa2      	ittt	ge
 8003b32:	6821      	ldrge	r1, [r4, #0]
 8003b34:	f021 0104 	bicge.w	r1, r1, #4
 8003b38:	6021      	strge	r1, [r4, #0]
 8003b3a:	b90d      	cbnz	r5, 8003b40 <_printf_i+0x110>
 8003b3c:	2e00      	cmp	r6, #0
 8003b3e:	d04b      	beq.n	8003bd8 <_printf_i+0x1a8>
 8003b40:	4616      	mov	r6, r2
 8003b42:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b46:	fb03 5711 	mls	r7, r3, r1, r5
 8003b4a:	5dc7      	ldrb	r7, [r0, r7]
 8003b4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b50:	462f      	mov	r7, r5
 8003b52:	42bb      	cmp	r3, r7
 8003b54:	460d      	mov	r5, r1
 8003b56:	d9f4      	bls.n	8003b42 <_printf_i+0x112>
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d10b      	bne.n	8003b74 <_printf_i+0x144>
 8003b5c:	6823      	ldr	r3, [r4, #0]
 8003b5e:	07df      	lsls	r7, r3, #31
 8003b60:	d508      	bpl.n	8003b74 <_printf_i+0x144>
 8003b62:	6923      	ldr	r3, [r4, #16]
 8003b64:	6861      	ldr	r1, [r4, #4]
 8003b66:	4299      	cmp	r1, r3
 8003b68:	bfde      	ittt	le
 8003b6a:	2330      	movle	r3, #48	@ 0x30
 8003b6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b74:	1b92      	subs	r2, r2, r6
 8003b76:	6122      	str	r2, [r4, #16]
 8003b78:	f8cd a000 	str.w	sl, [sp]
 8003b7c:	464b      	mov	r3, r9
 8003b7e:	aa03      	add	r2, sp, #12
 8003b80:	4621      	mov	r1, r4
 8003b82:	4640      	mov	r0, r8
 8003b84:	f7ff fee6 	bl	8003954 <_printf_common>
 8003b88:	3001      	adds	r0, #1
 8003b8a:	d14a      	bne.n	8003c22 <_printf_i+0x1f2>
 8003b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b90:	b004      	add	sp, #16
 8003b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	f043 0320 	orr.w	r3, r3, #32
 8003b9c:	6023      	str	r3, [r4, #0]
 8003b9e:	4833      	ldr	r0, [pc, #204]	@ (8003c6c <_printf_i+0x23c>)
 8003ba0:	2778      	movs	r7, #120	@ 0x78
 8003ba2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	6831      	ldr	r1, [r6, #0]
 8003baa:	061f      	lsls	r7, r3, #24
 8003bac:	f851 5b04 	ldr.w	r5, [r1], #4
 8003bb0:	d402      	bmi.n	8003bb8 <_printf_i+0x188>
 8003bb2:	065f      	lsls	r7, r3, #25
 8003bb4:	bf48      	it	mi
 8003bb6:	b2ad      	uxthmi	r5, r5
 8003bb8:	6031      	str	r1, [r6, #0]
 8003bba:	07d9      	lsls	r1, r3, #31
 8003bbc:	bf44      	itt	mi
 8003bbe:	f043 0320 	orrmi.w	r3, r3, #32
 8003bc2:	6023      	strmi	r3, [r4, #0]
 8003bc4:	b11d      	cbz	r5, 8003bce <_printf_i+0x19e>
 8003bc6:	2310      	movs	r3, #16
 8003bc8:	e7ac      	b.n	8003b24 <_printf_i+0xf4>
 8003bca:	4827      	ldr	r0, [pc, #156]	@ (8003c68 <_printf_i+0x238>)
 8003bcc:	e7e9      	b.n	8003ba2 <_printf_i+0x172>
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	f023 0320 	bic.w	r3, r3, #32
 8003bd4:	6023      	str	r3, [r4, #0]
 8003bd6:	e7f6      	b.n	8003bc6 <_printf_i+0x196>
 8003bd8:	4616      	mov	r6, r2
 8003bda:	e7bd      	b.n	8003b58 <_printf_i+0x128>
 8003bdc:	6833      	ldr	r3, [r6, #0]
 8003bde:	6825      	ldr	r5, [r4, #0]
 8003be0:	6961      	ldr	r1, [r4, #20]
 8003be2:	1d18      	adds	r0, r3, #4
 8003be4:	6030      	str	r0, [r6, #0]
 8003be6:	062e      	lsls	r6, r5, #24
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	d501      	bpl.n	8003bf0 <_printf_i+0x1c0>
 8003bec:	6019      	str	r1, [r3, #0]
 8003bee:	e002      	b.n	8003bf6 <_printf_i+0x1c6>
 8003bf0:	0668      	lsls	r0, r5, #25
 8003bf2:	d5fb      	bpl.n	8003bec <_printf_i+0x1bc>
 8003bf4:	8019      	strh	r1, [r3, #0]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	6123      	str	r3, [r4, #16]
 8003bfa:	4616      	mov	r6, r2
 8003bfc:	e7bc      	b.n	8003b78 <_printf_i+0x148>
 8003bfe:	6833      	ldr	r3, [r6, #0]
 8003c00:	1d1a      	adds	r2, r3, #4
 8003c02:	6032      	str	r2, [r6, #0]
 8003c04:	681e      	ldr	r6, [r3, #0]
 8003c06:	6862      	ldr	r2, [r4, #4]
 8003c08:	2100      	movs	r1, #0
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	f7fc fae0 	bl	80001d0 <memchr>
 8003c10:	b108      	cbz	r0, 8003c16 <_printf_i+0x1e6>
 8003c12:	1b80      	subs	r0, r0, r6
 8003c14:	6060      	str	r0, [r4, #4]
 8003c16:	6863      	ldr	r3, [r4, #4]
 8003c18:	6123      	str	r3, [r4, #16]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c20:	e7aa      	b.n	8003b78 <_printf_i+0x148>
 8003c22:	6923      	ldr	r3, [r4, #16]
 8003c24:	4632      	mov	r2, r6
 8003c26:	4649      	mov	r1, r9
 8003c28:	4640      	mov	r0, r8
 8003c2a:	47d0      	blx	sl
 8003c2c:	3001      	adds	r0, #1
 8003c2e:	d0ad      	beq.n	8003b8c <_printf_i+0x15c>
 8003c30:	6823      	ldr	r3, [r4, #0]
 8003c32:	079b      	lsls	r3, r3, #30
 8003c34:	d413      	bmi.n	8003c5e <_printf_i+0x22e>
 8003c36:	68e0      	ldr	r0, [r4, #12]
 8003c38:	9b03      	ldr	r3, [sp, #12]
 8003c3a:	4298      	cmp	r0, r3
 8003c3c:	bfb8      	it	lt
 8003c3e:	4618      	movlt	r0, r3
 8003c40:	e7a6      	b.n	8003b90 <_printf_i+0x160>
 8003c42:	2301      	movs	r3, #1
 8003c44:	4632      	mov	r2, r6
 8003c46:	4649      	mov	r1, r9
 8003c48:	4640      	mov	r0, r8
 8003c4a:	47d0      	blx	sl
 8003c4c:	3001      	adds	r0, #1
 8003c4e:	d09d      	beq.n	8003b8c <_printf_i+0x15c>
 8003c50:	3501      	adds	r5, #1
 8003c52:	68e3      	ldr	r3, [r4, #12]
 8003c54:	9903      	ldr	r1, [sp, #12]
 8003c56:	1a5b      	subs	r3, r3, r1
 8003c58:	42ab      	cmp	r3, r5
 8003c5a:	dcf2      	bgt.n	8003c42 <_printf_i+0x212>
 8003c5c:	e7eb      	b.n	8003c36 <_printf_i+0x206>
 8003c5e:	2500      	movs	r5, #0
 8003c60:	f104 0619 	add.w	r6, r4, #25
 8003c64:	e7f5      	b.n	8003c52 <_printf_i+0x222>
 8003c66:	bf00      	nop
 8003c68:	080040dd 	.word	0x080040dd
 8003c6c:	080040ee 	.word	0x080040ee

08003c70 <__sflush_r>:
 8003c70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c78:	0716      	lsls	r6, r2, #28
 8003c7a:	4605      	mov	r5, r0
 8003c7c:	460c      	mov	r4, r1
 8003c7e:	d454      	bmi.n	8003d2a <__sflush_r+0xba>
 8003c80:	684b      	ldr	r3, [r1, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	dc02      	bgt.n	8003c8c <__sflush_r+0x1c>
 8003c86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	dd48      	ble.n	8003d1e <__sflush_r+0xae>
 8003c8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c8e:	2e00      	cmp	r6, #0
 8003c90:	d045      	beq.n	8003d1e <__sflush_r+0xae>
 8003c92:	2300      	movs	r3, #0
 8003c94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003c98:	682f      	ldr	r7, [r5, #0]
 8003c9a:	6a21      	ldr	r1, [r4, #32]
 8003c9c:	602b      	str	r3, [r5, #0]
 8003c9e:	d030      	beq.n	8003d02 <__sflush_r+0x92>
 8003ca0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003ca2:	89a3      	ldrh	r3, [r4, #12]
 8003ca4:	0759      	lsls	r1, r3, #29
 8003ca6:	d505      	bpl.n	8003cb4 <__sflush_r+0x44>
 8003ca8:	6863      	ldr	r3, [r4, #4]
 8003caa:	1ad2      	subs	r2, r2, r3
 8003cac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003cae:	b10b      	cbz	r3, 8003cb4 <__sflush_r+0x44>
 8003cb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003cb2:	1ad2      	subs	r2, r2, r3
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003cb8:	6a21      	ldr	r1, [r4, #32]
 8003cba:	4628      	mov	r0, r5
 8003cbc:	47b0      	blx	r6
 8003cbe:	1c43      	adds	r3, r0, #1
 8003cc0:	89a3      	ldrh	r3, [r4, #12]
 8003cc2:	d106      	bne.n	8003cd2 <__sflush_r+0x62>
 8003cc4:	6829      	ldr	r1, [r5, #0]
 8003cc6:	291d      	cmp	r1, #29
 8003cc8:	d82b      	bhi.n	8003d22 <__sflush_r+0xb2>
 8003cca:	4a2a      	ldr	r2, [pc, #168]	@ (8003d74 <__sflush_r+0x104>)
 8003ccc:	410a      	asrs	r2, r1
 8003cce:	07d6      	lsls	r6, r2, #31
 8003cd0:	d427      	bmi.n	8003d22 <__sflush_r+0xb2>
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	6062      	str	r2, [r4, #4]
 8003cd6:	04d9      	lsls	r1, r3, #19
 8003cd8:	6922      	ldr	r2, [r4, #16]
 8003cda:	6022      	str	r2, [r4, #0]
 8003cdc:	d504      	bpl.n	8003ce8 <__sflush_r+0x78>
 8003cde:	1c42      	adds	r2, r0, #1
 8003ce0:	d101      	bne.n	8003ce6 <__sflush_r+0x76>
 8003ce2:	682b      	ldr	r3, [r5, #0]
 8003ce4:	b903      	cbnz	r3, 8003ce8 <__sflush_r+0x78>
 8003ce6:	6560      	str	r0, [r4, #84]	@ 0x54
 8003ce8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003cea:	602f      	str	r7, [r5, #0]
 8003cec:	b1b9      	cbz	r1, 8003d1e <__sflush_r+0xae>
 8003cee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003cf2:	4299      	cmp	r1, r3
 8003cf4:	d002      	beq.n	8003cfc <__sflush_r+0x8c>
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	f7ff fbf2 	bl	80034e0 <_free_r>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d00:	e00d      	b.n	8003d1e <__sflush_r+0xae>
 8003d02:	2301      	movs	r3, #1
 8003d04:	4628      	mov	r0, r5
 8003d06:	47b0      	blx	r6
 8003d08:	4602      	mov	r2, r0
 8003d0a:	1c50      	adds	r0, r2, #1
 8003d0c:	d1c9      	bne.n	8003ca2 <__sflush_r+0x32>
 8003d0e:	682b      	ldr	r3, [r5, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0c6      	beq.n	8003ca2 <__sflush_r+0x32>
 8003d14:	2b1d      	cmp	r3, #29
 8003d16:	d001      	beq.n	8003d1c <__sflush_r+0xac>
 8003d18:	2b16      	cmp	r3, #22
 8003d1a:	d11e      	bne.n	8003d5a <__sflush_r+0xea>
 8003d1c:	602f      	str	r7, [r5, #0]
 8003d1e:	2000      	movs	r0, #0
 8003d20:	e022      	b.n	8003d68 <__sflush_r+0xf8>
 8003d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d26:	b21b      	sxth	r3, r3
 8003d28:	e01b      	b.n	8003d62 <__sflush_r+0xf2>
 8003d2a:	690f      	ldr	r7, [r1, #16]
 8003d2c:	2f00      	cmp	r7, #0
 8003d2e:	d0f6      	beq.n	8003d1e <__sflush_r+0xae>
 8003d30:	0793      	lsls	r3, r2, #30
 8003d32:	680e      	ldr	r6, [r1, #0]
 8003d34:	bf08      	it	eq
 8003d36:	694b      	ldreq	r3, [r1, #20]
 8003d38:	600f      	str	r7, [r1, #0]
 8003d3a:	bf18      	it	ne
 8003d3c:	2300      	movne	r3, #0
 8003d3e:	eba6 0807 	sub.w	r8, r6, r7
 8003d42:	608b      	str	r3, [r1, #8]
 8003d44:	f1b8 0f00 	cmp.w	r8, #0
 8003d48:	dde9      	ble.n	8003d1e <__sflush_r+0xae>
 8003d4a:	6a21      	ldr	r1, [r4, #32]
 8003d4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003d4e:	4643      	mov	r3, r8
 8003d50:	463a      	mov	r2, r7
 8003d52:	4628      	mov	r0, r5
 8003d54:	47b0      	blx	r6
 8003d56:	2800      	cmp	r0, #0
 8003d58:	dc08      	bgt.n	8003d6c <__sflush_r+0xfc>
 8003d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d62:	81a3      	strh	r3, [r4, #12]
 8003d64:	f04f 30ff 	mov.w	r0, #4294967295
 8003d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d6c:	4407      	add	r7, r0
 8003d6e:	eba8 0800 	sub.w	r8, r8, r0
 8003d72:	e7e7      	b.n	8003d44 <__sflush_r+0xd4>
 8003d74:	dfbffffe 	.word	0xdfbffffe

08003d78 <_fflush_r>:
 8003d78:	b538      	push	{r3, r4, r5, lr}
 8003d7a:	690b      	ldr	r3, [r1, #16]
 8003d7c:	4605      	mov	r5, r0
 8003d7e:	460c      	mov	r4, r1
 8003d80:	b913      	cbnz	r3, 8003d88 <_fflush_r+0x10>
 8003d82:	2500      	movs	r5, #0
 8003d84:	4628      	mov	r0, r5
 8003d86:	bd38      	pop	{r3, r4, r5, pc}
 8003d88:	b118      	cbz	r0, 8003d92 <_fflush_r+0x1a>
 8003d8a:	6a03      	ldr	r3, [r0, #32]
 8003d8c:	b90b      	cbnz	r3, 8003d92 <_fflush_r+0x1a>
 8003d8e:	f7ff fa9f 	bl	80032d0 <__sinit>
 8003d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f3      	beq.n	8003d82 <_fflush_r+0xa>
 8003d9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003d9c:	07d0      	lsls	r0, r2, #31
 8003d9e:	d404      	bmi.n	8003daa <_fflush_r+0x32>
 8003da0:	0599      	lsls	r1, r3, #22
 8003da2:	d402      	bmi.n	8003daa <_fflush_r+0x32>
 8003da4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003da6:	f7ff fb98 	bl	80034da <__retarget_lock_acquire_recursive>
 8003daa:	4628      	mov	r0, r5
 8003dac:	4621      	mov	r1, r4
 8003dae:	f7ff ff5f 	bl	8003c70 <__sflush_r>
 8003db2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003db4:	07da      	lsls	r2, r3, #31
 8003db6:	4605      	mov	r5, r0
 8003db8:	d4e4      	bmi.n	8003d84 <_fflush_r+0xc>
 8003dba:	89a3      	ldrh	r3, [r4, #12]
 8003dbc:	059b      	lsls	r3, r3, #22
 8003dbe:	d4e1      	bmi.n	8003d84 <_fflush_r+0xc>
 8003dc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003dc2:	f7ff fb8b 	bl	80034dc <__retarget_lock_release_recursive>
 8003dc6:	e7dd      	b.n	8003d84 <_fflush_r+0xc>

08003dc8 <__swbuf_r>:
 8003dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dca:	460e      	mov	r6, r1
 8003dcc:	4614      	mov	r4, r2
 8003dce:	4605      	mov	r5, r0
 8003dd0:	b118      	cbz	r0, 8003dda <__swbuf_r+0x12>
 8003dd2:	6a03      	ldr	r3, [r0, #32]
 8003dd4:	b90b      	cbnz	r3, 8003dda <__swbuf_r+0x12>
 8003dd6:	f7ff fa7b 	bl	80032d0 <__sinit>
 8003dda:	69a3      	ldr	r3, [r4, #24]
 8003ddc:	60a3      	str	r3, [r4, #8]
 8003dde:	89a3      	ldrh	r3, [r4, #12]
 8003de0:	071a      	lsls	r2, r3, #28
 8003de2:	d501      	bpl.n	8003de8 <__swbuf_r+0x20>
 8003de4:	6923      	ldr	r3, [r4, #16]
 8003de6:	b943      	cbnz	r3, 8003dfa <__swbuf_r+0x32>
 8003de8:	4621      	mov	r1, r4
 8003dea:	4628      	mov	r0, r5
 8003dec:	f000 f82a 	bl	8003e44 <__swsetup_r>
 8003df0:	b118      	cbz	r0, 8003dfa <__swbuf_r+0x32>
 8003df2:	f04f 37ff 	mov.w	r7, #4294967295
 8003df6:	4638      	mov	r0, r7
 8003df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	6922      	ldr	r2, [r4, #16]
 8003dfe:	1a98      	subs	r0, r3, r2
 8003e00:	6963      	ldr	r3, [r4, #20]
 8003e02:	b2f6      	uxtb	r6, r6
 8003e04:	4283      	cmp	r3, r0
 8003e06:	4637      	mov	r7, r6
 8003e08:	dc05      	bgt.n	8003e16 <__swbuf_r+0x4e>
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	f7ff ffb3 	bl	8003d78 <_fflush_r>
 8003e12:	2800      	cmp	r0, #0
 8003e14:	d1ed      	bne.n	8003df2 <__swbuf_r+0x2a>
 8003e16:	68a3      	ldr	r3, [r4, #8]
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	60a3      	str	r3, [r4, #8]
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	6022      	str	r2, [r4, #0]
 8003e22:	701e      	strb	r6, [r3, #0]
 8003e24:	6962      	ldr	r2, [r4, #20]
 8003e26:	1c43      	adds	r3, r0, #1
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d004      	beq.n	8003e36 <__swbuf_r+0x6e>
 8003e2c:	89a3      	ldrh	r3, [r4, #12]
 8003e2e:	07db      	lsls	r3, r3, #31
 8003e30:	d5e1      	bpl.n	8003df6 <__swbuf_r+0x2e>
 8003e32:	2e0a      	cmp	r6, #10
 8003e34:	d1df      	bne.n	8003df6 <__swbuf_r+0x2e>
 8003e36:	4621      	mov	r1, r4
 8003e38:	4628      	mov	r0, r5
 8003e3a:	f7ff ff9d 	bl	8003d78 <_fflush_r>
 8003e3e:	2800      	cmp	r0, #0
 8003e40:	d0d9      	beq.n	8003df6 <__swbuf_r+0x2e>
 8003e42:	e7d6      	b.n	8003df2 <__swbuf_r+0x2a>

08003e44 <__swsetup_r>:
 8003e44:	b538      	push	{r3, r4, r5, lr}
 8003e46:	4b29      	ldr	r3, [pc, #164]	@ (8003eec <__swsetup_r+0xa8>)
 8003e48:	4605      	mov	r5, r0
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	b118      	cbz	r0, 8003e58 <__swsetup_r+0x14>
 8003e50:	6a03      	ldr	r3, [r0, #32]
 8003e52:	b90b      	cbnz	r3, 8003e58 <__swsetup_r+0x14>
 8003e54:	f7ff fa3c 	bl	80032d0 <__sinit>
 8003e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e5c:	0719      	lsls	r1, r3, #28
 8003e5e:	d422      	bmi.n	8003ea6 <__swsetup_r+0x62>
 8003e60:	06da      	lsls	r2, r3, #27
 8003e62:	d407      	bmi.n	8003e74 <__swsetup_r+0x30>
 8003e64:	2209      	movs	r2, #9
 8003e66:	602a      	str	r2, [r5, #0]
 8003e68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e6c:	81a3      	strh	r3, [r4, #12]
 8003e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e72:	e033      	b.n	8003edc <__swsetup_r+0x98>
 8003e74:	0758      	lsls	r0, r3, #29
 8003e76:	d512      	bpl.n	8003e9e <__swsetup_r+0x5a>
 8003e78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e7a:	b141      	cbz	r1, 8003e8e <__swsetup_r+0x4a>
 8003e7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003e80:	4299      	cmp	r1, r3
 8003e82:	d002      	beq.n	8003e8a <__swsetup_r+0x46>
 8003e84:	4628      	mov	r0, r5
 8003e86:	f7ff fb2b 	bl	80034e0 <_free_r>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e8e:	89a3      	ldrh	r3, [r4, #12]
 8003e90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003e94:	81a3      	strh	r3, [r4, #12]
 8003e96:	2300      	movs	r3, #0
 8003e98:	6063      	str	r3, [r4, #4]
 8003e9a:	6923      	ldr	r3, [r4, #16]
 8003e9c:	6023      	str	r3, [r4, #0]
 8003e9e:	89a3      	ldrh	r3, [r4, #12]
 8003ea0:	f043 0308 	orr.w	r3, r3, #8
 8003ea4:	81a3      	strh	r3, [r4, #12]
 8003ea6:	6923      	ldr	r3, [r4, #16]
 8003ea8:	b94b      	cbnz	r3, 8003ebe <__swsetup_r+0x7a>
 8003eaa:	89a3      	ldrh	r3, [r4, #12]
 8003eac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003eb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eb4:	d003      	beq.n	8003ebe <__swsetup_r+0x7a>
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	4628      	mov	r0, r5
 8003eba:	f000 f84f 	bl	8003f5c <__smakebuf_r>
 8003ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ec2:	f013 0201 	ands.w	r2, r3, #1
 8003ec6:	d00a      	beq.n	8003ede <__swsetup_r+0x9a>
 8003ec8:	2200      	movs	r2, #0
 8003eca:	60a2      	str	r2, [r4, #8]
 8003ecc:	6962      	ldr	r2, [r4, #20]
 8003ece:	4252      	negs	r2, r2
 8003ed0:	61a2      	str	r2, [r4, #24]
 8003ed2:	6922      	ldr	r2, [r4, #16]
 8003ed4:	b942      	cbnz	r2, 8003ee8 <__swsetup_r+0xa4>
 8003ed6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003eda:	d1c5      	bne.n	8003e68 <__swsetup_r+0x24>
 8003edc:	bd38      	pop	{r3, r4, r5, pc}
 8003ede:	0799      	lsls	r1, r3, #30
 8003ee0:	bf58      	it	pl
 8003ee2:	6962      	ldrpl	r2, [r4, #20]
 8003ee4:	60a2      	str	r2, [r4, #8]
 8003ee6:	e7f4      	b.n	8003ed2 <__swsetup_r+0x8e>
 8003ee8:	2000      	movs	r0, #0
 8003eea:	e7f7      	b.n	8003edc <__swsetup_r+0x98>
 8003eec:	20000018 	.word	0x20000018

08003ef0 <_sbrk_r>:
 8003ef0:	b538      	push	{r3, r4, r5, lr}
 8003ef2:	4d06      	ldr	r5, [pc, #24]	@ (8003f0c <_sbrk_r+0x1c>)
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	4608      	mov	r0, r1
 8003efa:	602b      	str	r3, [r5, #0]
 8003efc:	f7fc fdd8 	bl	8000ab0 <_sbrk>
 8003f00:	1c43      	adds	r3, r0, #1
 8003f02:	d102      	bne.n	8003f0a <_sbrk_r+0x1a>
 8003f04:	682b      	ldr	r3, [r5, #0]
 8003f06:	b103      	cbz	r3, 8003f0a <_sbrk_r+0x1a>
 8003f08:	6023      	str	r3, [r4, #0]
 8003f0a:	bd38      	pop	{r3, r4, r5, pc}
 8003f0c:	20000250 	.word	0x20000250

08003f10 <__swhatbuf_r>:
 8003f10:	b570      	push	{r4, r5, r6, lr}
 8003f12:	460c      	mov	r4, r1
 8003f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f18:	2900      	cmp	r1, #0
 8003f1a:	b096      	sub	sp, #88	@ 0x58
 8003f1c:	4615      	mov	r5, r2
 8003f1e:	461e      	mov	r6, r3
 8003f20:	da0d      	bge.n	8003f3e <__swhatbuf_r+0x2e>
 8003f22:	89a3      	ldrh	r3, [r4, #12]
 8003f24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003f28:	f04f 0100 	mov.w	r1, #0
 8003f2c:	bf14      	ite	ne
 8003f2e:	2340      	movne	r3, #64	@ 0x40
 8003f30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003f34:	2000      	movs	r0, #0
 8003f36:	6031      	str	r1, [r6, #0]
 8003f38:	602b      	str	r3, [r5, #0]
 8003f3a:	b016      	add	sp, #88	@ 0x58
 8003f3c:	bd70      	pop	{r4, r5, r6, pc}
 8003f3e:	466a      	mov	r2, sp
 8003f40:	f000 f848 	bl	8003fd4 <_fstat_r>
 8003f44:	2800      	cmp	r0, #0
 8003f46:	dbec      	blt.n	8003f22 <__swhatbuf_r+0x12>
 8003f48:	9901      	ldr	r1, [sp, #4]
 8003f4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003f4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003f52:	4259      	negs	r1, r3
 8003f54:	4159      	adcs	r1, r3
 8003f56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f5a:	e7eb      	b.n	8003f34 <__swhatbuf_r+0x24>

08003f5c <__smakebuf_r>:
 8003f5c:	898b      	ldrh	r3, [r1, #12]
 8003f5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f60:	079d      	lsls	r5, r3, #30
 8003f62:	4606      	mov	r6, r0
 8003f64:	460c      	mov	r4, r1
 8003f66:	d507      	bpl.n	8003f78 <__smakebuf_r+0x1c>
 8003f68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003f6c:	6023      	str	r3, [r4, #0]
 8003f6e:	6123      	str	r3, [r4, #16]
 8003f70:	2301      	movs	r3, #1
 8003f72:	6163      	str	r3, [r4, #20]
 8003f74:	b003      	add	sp, #12
 8003f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f78:	ab01      	add	r3, sp, #4
 8003f7a:	466a      	mov	r2, sp
 8003f7c:	f7ff ffc8 	bl	8003f10 <__swhatbuf_r>
 8003f80:	9f00      	ldr	r7, [sp, #0]
 8003f82:	4605      	mov	r5, r0
 8003f84:	4639      	mov	r1, r7
 8003f86:	4630      	mov	r0, r6
 8003f88:	f7ff fb16 	bl	80035b8 <_malloc_r>
 8003f8c:	b948      	cbnz	r0, 8003fa2 <__smakebuf_r+0x46>
 8003f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f92:	059a      	lsls	r2, r3, #22
 8003f94:	d4ee      	bmi.n	8003f74 <__smakebuf_r+0x18>
 8003f96:	f023 0303 	bic.w	r3, r3, #3
 8003f9a:	f043 0302 	orr.w	r3, r3, #2
 8003f9e:	81a3      	strh	r3, [r4, #12]
 8003fa0:	e7e2      	b.n	8003f68 <__smakebuf_r+0xc>
 8003fa2:	89a3      	ldrh	r3, [r4, #12]
 8003fa4:	6020      	str	r0, [r4, #0]
 8003fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003faa:	81a3      	strh	r3, [r4, #12]
 8003fac:	9b01      	ldr	r3, [sp, #4]
 8003fae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003fb2:	b15b      	cbz	r3, 8003fcc <__smakebuf_r+0x70>
 8003fb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fb8:	4630      	mov	r0, r6
 8003fba:	f000 f81d 	bl	8003ff8 <_isatty_r>
 8003fbe:	b128      	cbz	r0, 8003fcc <__smakebuf_r+0x70>
 8003fc0:	89a3      	ldrh	r3, [r4, #12]
 8003fc2:	f023 0303 	bic.w	r3, r3, #3
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	81a3      	strh	r3, [r4, #12]
 8003fcc:	89a3      	ldrh	r3, [r4, #12]
 8003fce:	431d      	orrs	r5, r3
 8003fd0:	81a5      	strh	r5, [r4, #12]
 8003fd2:	e7cf      	b.n	8003f74 <__smakebuf_r+0x18>

08003fd4 <_fstat_r>:
 8003fd4:	b538      	push	{r3, r4, r5, lr}
 8003fd6:	4d07      	ldr	r5, [pc, #28]	@ (8003ff4 <_fstat_r+0x20>)
 8003fd8:	2300      	movs	r3, #0
 8003fda:	4604      	mov	r4, r0
 8003fdc:	4608      	mov	r0, r1
 8003fde:	4611      	mov	r1, r2
 8003fe0:	602b      	str	r3, [r5, #0]
 8003fe2:	f7fc fd3d 	bl	8000a60 <_fstat>
 8003fe6:	1c43      	adds	r3, r0, #1
 8003fe8:	d102      	bne.n	8003ff0 <_fstat_r+0x1c>
 8003fea:	682b      	ldr	r3, [r5, #0]
 8003fec:	b103      	cbz	r3, 8003ff0 <_fstat_r+0x1c>
 8003fee:	6023      	str	r3, [r4, #0]
 8003ff0:	bd38      	pop	{r3, r4, r5, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000250 	.word	0x20000250

08003ff8 <_isatty_r>:
 8003ff8:	b538      	push	{r3, r4, r5, lr}
 8003ffa:	4d06      	ldr	r5, [pc, #24]	@ (8004014 <_isatty_r+0x1c>)
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	4604      	mov	r4, r0
 8004000:	4608      	mov	r0, r1
 8004002:	602b      	str	r3, [r5, #0]
 8004004:	f7fc fd3c 	bl	8000a80 <_isatty>
 8004008:	1c43      	adds	r3, r0, #1
 800400a:	d102      	bne.n	8004012 <_isatty_r+0x1a>
 800400c:	682b      	ldr	r3, [r5, #0]
 800400e:	b103      	cbz	r3, 8004012 <_isatty_r+0x1a>
 8004010:	6023      	str	r3, [r4, #0]
 8004012:	bd38      	pop	{r3, r4, r5, pc}
 8004014:	20000250 	.word	0x20000250

08004018 <_init>:
 8004018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401a:	bf00      	nop
 800401c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800401e:	bc08      	pop	{r3}
 8004020:	469e      	mov	lr, r3
 8004022:	4770      	bx	lr

08004024 <_fini>:
 8004024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004026:	bf00      	nop
 8004028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402a:	bc08      	pop	{r3}
 800402c:	469e      	mov	lr, r3
 800402e:	4770      	bx	lr
