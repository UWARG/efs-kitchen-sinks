
RFD900X_test_f07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08002364  08002364  00012364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023e8  080023e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080023e8  080023e8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023e8  080023e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023e8  080023e8  000123e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023ec  080023ec  000123ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080023f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  080023fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080023fc  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000079ae  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012ae  00000000  00000000  000279e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  00028c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000598  00000000  00000000  000292a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018943  00000000  00000000  00029838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000082b1  00000000  00000000  0004217b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f2f6  00000000  00000000  0004a42c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9722  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001444  00000000  00000000  000d9774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800234c 	.word	0x0800234c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800234c 	.word	0x0800234c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b0b9      	sub	sp, #228	; 0xe4
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fa5f 	bl	80006e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f845 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f8f9 	bl	8000424 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000232:	f000 f8c7 	bl	80003c4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000236:	f000 f895 	bl	8000364 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t data_recieve[40];
  uint8_t corrupt_percent;
  
  uint8_t info[] = "In the current 100 value the corrupt rate is: ";
 800023a:	2380      	movs	r3, #128	; 0x80
 800023c:	18fb      	adds	r3, r7, r3
 800023e:	4a1a      	ldr	r2, [pc, #104]	; (80002a8 <main+0x88>)
 8000240:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000242:	c313      	stmia	r3!, {r0, r1, r4}
 8000244:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000246:	c313      	stmia	r3!, {r0, r1, r4}
 8000248:	ca13      	ldmia	r2!, {r0, r1, r4}
 800024a:	c313      	stmia	r3!, {r0, r1, r4}
 800024c:	ca03      	ldmia	r2!, {r0, r1}
 800024e:	c303      	stmia	r3!, {r0, r1}
 8000250:	8811      	ldrh	r1, [r2, #0]
 8000252:	8019      	strh	r1, [r3, #0]
 8000254:	7892      	ldrb	r2, [r2, #2]
 8000256:	709a      	strb	r2, [r3, #2]
  char ending[] = " % \r\n";
 8000258:	2378      	movs	r3, #120	; 0x78
 800025a:	18fb      	adds	r3, r7, r3
 800025c:	4a13      	ldr	r2, [pc, #76]	; (80002ac <main+0x8c>)
 800025e:	6811      	ldr	r1, [r2, #0]
 8000260:	6019      	str	r1, [r3, #0]
 8000262:	8892      	ldrh	r2, [r2, #4]
 8000264:	809a      	strh	r2, [r3, #4]
  char warning[] = "There is no input\r\n";
 8000266:	2364      	movs	r3, #100	; 0x64
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	4a11      	ldr	r2, [pc, #68]	; (80002b0 <main+0x90>)
 800026c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800026e:	c313      	stmia	r3!, {r0, r1, r4}
 8000270:	ca03      	ldmia	r2!, {r0, r1}
 8000272:	c303      	stmia	r3!, {r0, r1}
  uint8_t response[100];
  int test = 12;
 8000274:	230c      	movs	r3, #12
 8000276:	22dc      	movs	r2, #220	; 0xdc
 8000278:	18ba      	adds	r2, r7, r2
 800027a:	6013      	str	r3, [r2, #0]

  int receive = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	22d8      	movs	r2, #216	; 0xd8
 8000280:	18ba      	adds	r2, r7, r2
 8000282:	6013      	str	r3, [r2, #0]
  while (1)
  {
	  //based on the reference sheet for the operation figure out that need to send pointer instead
//	  HAL_UART_Transmit(&huart1, info, sizeof(info), 100);
//	  HAL_Delay(1000);
	  HAL_UART_Transmit(&huart2, info, sizeof(info), 100);
 8000284:	2380      	movs	r3, #128	; 0x80
 8000286:	18f9      	adds	r1, r7, r3
 8000288:	480a      	ldr	r0, [pc, #40]	; (80002b4 <main+0x94>)
 800028a:	2364      	movs	r3, #100	; 0x64
 800028c:	222f      	movs	r2, #47	; 0x2f
 800028e:	f001 fb4f 	bl	8001930 <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart2, response, sizeof(info), 100);
 8000292:	0039      	movs	r1, r7
 8000294:	4807      	ldr	r0, [pc, #28]	; (80002b4 <main+0x94>)
 8000296:	2364      	movs	r3, #100	; 0x64
 8000298:	222f      	movs	r2, #47	; 0x2f
 800029a:	f001 fbf3 	bl	8001a84 <HAL_UART_Receive>
	  HAL_Delay(100);
 800029e:	2064      	movs	r0, #100	; 0x64
 80002a0:	f000 fa86 	bl	80007b0 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, info, sizeof(info), 100);
 80002a4:	e7ee      	b.n	8000284 <main+0x64>
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	08002364 	.word	0x08002364
 80002ac:	08002394 	.word	0x08002394
 80002b0:	0800239c 	.word	0x0800239c
 80002b4:	200000ac 	.word	0x200000ac

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b099      	sub	sp, #100	; 0x64
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	242c      	movs	r4, #44	; 0x2c
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	0018      	movs	r0, r3
 80002c4:	2334      	movs	r3, #52	; 0x34
 80002c6:	001a      	movs	r2, r3
 80002c8:	2100      	movs	r1, #0
 80002ca:	f002 f837 	bl	800233c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ce:	231c      	movs	r3, #28
 80002d0:	18fb      	adds	r3, r7, r3
 80002d2:	0018      	movs	r0, r3
 80002d4:	2310      	movs	r3, #16
 80002d6:	001a      	movs	r2, r3
 80002d8:	2100      	movs	r1, #0
 80002da:	f002 f82f 	bl	800233c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002de:	003b      	movs	r3, r7
 80002e0:	0018      	movs	r0, r3
 80002e2:	231c      	movs	r3, #28
 80002e4:	001a      	movs	r2, r3
 80002e6:	2100      	movs	r1, #0
 80002e8:	f002 f828 	bl	800233c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80002ec:	193b      	adds	r3, r7, r4
 80002ee:	2220      	movs	r2, #32
 80002f0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002f2:	193b      	adds	r3, r7, r4
 80002f4:	2201      	movs	r2, #1
 80002f6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f8:	193b      	adds	r3, r7, r4
 80002fa:	2200      	movs	r2, #0
 80002fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fe:	193b      	adds	r3, r7, r4
 8000300:	0018      	movs	r0, r3
 8000302:	f000 fcc3 	bl	8000c8c <HAL_RCC_OscConfig>
 8000306:	1e03      	subs	r3, r0, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x56>
  {
    Error_Handler();
 800030a:	f000 f8f5 	bl	80004f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030e:	211c      	movs	r1, #28
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2207      	movs	r2, #7
 8000314:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2203      	movs	r2, #3
 800031a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2200      	movs	r2, #0
 8000326:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000328:	187b      	adds	r3, r7, r1
 800032a:	2101      	movs	r1, #1
 800032c:	0018      	movs	r0, r3
 800032e:	f001 f833 	bl	8001398 <HAL_RCC_ClockConfig>
 8000332:	1e03      	subs	r3, r0, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000336:	f000 f8df 	bl	80004f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800033a:	003b      	movs	r3, r7
 800033c:	2203      	movs	r2, #3
 800033e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000340:	003b      	movs	r3, r7
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000346:	003b      	movs	r3, r7
 8000348:	2200      	movs	r2, #0
 800034a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800034c:	003b      	movs	r3, r7
 800034e:	0018      	movs	r0, r3
 8000350:	f001 f99c 	bl	800168c <HAL_RCCEx_PeriphCLKConfig>
 8000354:	1e03      	subs	r3, r0, #0
 8000356:	d001      	beq.n	800035c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000358:	f000 f8ce 	bl	80004f8 <Error_Handler>
  }
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b019      	add	sp, #100	; 0x64
 8000362:	bd90      	pop	{r4, r7, pc}

08000364 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000368:	4b14      	ldr	r3, [pc, #80]	; (80003bc <MX_USART1_UART_Init+0x58>)
 800036a:	4a15      	ldr	r2, [pc, #84]	; (80003c0 <MX_USART1_UART_Init+0x5c>)
 800036c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 14400;
 800036e:	4b13      	ldr	r3, [pc, #76]	; (80003bc <MX_USART1_UART_Init+0x58>)
 8000370:	22e1      	movs	r2, #225	; 0xe1
 8000372:	0192      	lsls	r2, r2, #6
 8000374:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000376:	4b11      	ldr	r3, [pc, #68]	; (80003bc <MX_USART1_UART_Init+0x58>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800037c:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <MX_USART1_UART_Init+0x58>)
 800037e:	2200      	movs	r2, #0
 8000380:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000382:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <MX_USART1_UART_Init+0x58>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000388:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <MX_USART1_UART_Init+0x58>)
 800038a:	220c      	movs	r2, #12
 800038c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <MX_USART1_UART_Init+0x58>)
 8000390:	2200      	movs	r2, #0
 8000392:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000394:	4b09      	ldr	r3, [pc, #36]	; (80003bc <MX_USART1_UART_Init+0x58>)
 8000396:	2200      	movs	r2, #0
 8000398:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800039a:	4b08      	ldr	r3, [pc, #32]	; (80003bc <MX_USART1_UART_Init+0x58>)
 800039c:	2200      	movs	r2, #0
 800039e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <MX_USART1_UART_Init+0x58>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003a6:	4b05      	ldr	r3, [pc, #20]	; (80003bc <MX_USART1_UART_Init+0x58>)
 80003a8:	0018      	movs	r0, r3
 80003aa:	f001 fa6d 	bl	8001888 <HAL_UART_Init>
 80003ae:	1e03      	subs	r3, r0, #0
 80003b0:	d001      	beq.n	80003b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003b2:	f000 f8a1 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000028 	.word	0x20000028
 80003c0:	40013800 	.word	0x40013800

080003c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003c8:	4b14      	ldr	r3, [pc, #80]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003ca:	4a15      	ldr	r2, [pc, #84]	; (8000420 <MX_USART2_UART_Init+0x5c>)
 80003cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003ce:	4b13      	ldr	r3, [pc, #76]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003d0:	22e1      	movs	r2, #225	; 0xe1
 80003d2:	0252      	lsls	r2, r2, #9
 80003d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003d6:	4b11      	ldr	r3, [pc, #68]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003ea:	220c      	movs	r2, #12
 80003ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <MX_USART2_UART_Init+0x58>)
 8000402:	2200      	movs	r2, #0
 8000404:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000406:	4b05      	ldr	r3, [pc, #20]	; (800041c <MX_USART2_UART_Init+0x58>)
 8000408:	0018      	movs	r0, r3
 800040a:	f001 fa3d 	bl	8001888 <HAL_UART_Init>
 800040e:	1e03      	subs	r3, r0, #0
 8000410:	d001      	beq.n	8000416 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000412:	f000 f871 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	200000ac 	.word	0x200000ac
 8000420:	40004400 	.word	0x40004400

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b590      	push	{r4, r7, lr}
 8000426:	b089      	sub	sp, #36	; 0x24
 8000428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042a:	240c      	movs	r4, #12
 800042c:	193b      	adds	r3, r7, r4
 800042e:	0018      	movs	r0, r3
 8000430:	2314      	movs	r3, #20
 8000432:	001a      	movs	r2, r3
 8000434:	2100      	movs	r1, #0
 8000436:	f001 ff81 	bl	800233c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043a:	4b2d      	ldr	r3, [pc, #180]	; (80004f0 <MX_GPIO_Init+0xcc>)
 800043c:	695a      	ldr	r2, [r3, #20]
 800043e:	4b2c      	ldr	r3, [pc, #176]	; (80004f0 <MX_GPIO_Init+0xcc>)
 8000440:	2180      	movs	r1, #128	; 0x80
 8000442:	0309      	lsls	r1, r1, #12
 8000444:	430a      	orrs	r2, r1
 8000446:	615a      	str	r2, [r3, #20]
 8000448:	4b29      	ldr	r3, [pc, #164]	; (80004f0 <MX_GPIO_Init+0xcc>)
 800044a:	695a      	ldr	r2, [r3, #20]
 800044c:	2380      	movs	r3, #128	; 0x80
 800044e:	031b      	lsls	r3, r3, #12
 8000450:	4013      	ands	r3, r2
 8000452:	60bb      	str	r3, [r7, #8]
 8000454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000456:	4b26      	ldr	r3, [pc, #152]	; (80004f0 <MX_GPIO_Init+0xcc>)
 8000458:	695a      	ldr	r2, [r3, #20]
 800045a:	4b25      	ldr	r3, [pc, #148]	; (80004f0 <MX_GPIO_Init+0xcc>)
 800045c:	2180      	movs	r1, #128	; 0x80
 800045e:	03c9      	lsls	r1, r1, #15
 8000460:	430a      	orrs	r2, r1
 8000462:	615a      	str	r2, [r3, #20]
 8000464:	4b22      	ldr	r3, [pc, #136]	; (80004f0 <MX_GPIO_Init+0xcc>)
 8000466:	695a      	ldr	r2, [r3, #20]
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	03db      	lsls	r3, r3, #15
 800046c:	4013      	ands	r3, r2
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	4b1f      	ldr	r3, [pc, #124]	; (80004f0 <MX_GPIO_Init+0xcc>)
 8000474:	695a      	ldr	r2, [r3, #20]
 8000476:	4b1e      	ldr	r3, [pc, #120]	; (80004f0 <MX_GPIO_Init+0xcc>)
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	0289      	lsls	r1, r1, #10
 800047c:	430a      	orrs	r2, r1
 800047e:	615a      	str	r2, [r3, #20]
 8000480:	4b1b      	ldr	r3, [pc, #108]	; (80004f0 <MX_GPIO_Init+0xcc>)
 8000482:	695a      	ldr	r2, [r3, #20]
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	029b      	lsls	r3, r3, #10
 8000488:	4013      	ands	r3, r2
 800048a:	603b      	str	r3, [r7, #0]
 800048c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800048e:	2390      	movs	r3, #144	; 0x90
 8000490:	05db      	lsls	r3, r3, #23
 8000492:	2200      	movs	r2, #0
 8000494:	2120      	movs	r1, #32
 8000496:	0018      	movs	r0, r3
 8000498:	f000 fbda 	bl	8000c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800049c:	193b      	adds	r3, r7, r4
 800049e:	2280      	movs	r2, #128	; 0x80
 80004a0:	0192      	lsls	r2, r2, #6
 80004a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	2284      	movs	r2, #132	; 0x84
 80004a8:	0392      	lsls	r2, r2, #14
 80004aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	4a0f      	ldr	r2, [pc, #60]	; (80004f4 <MX_GPIO_Init+0xd0>)
 80004b6:	0019      	movs	r1, r3
 80004b8:	0010      	movs	r0, r2
 80004ba:	f000 fa51 	bl	8000960 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004be:	0021      	movs	r1, r4
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2220      	movs	r2, #32
 80004c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2201      	movs	r2, #1
 80004ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2200      	movs	r2, #0
 80004d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004d8:	187a      	adds	r2, r7, r1
 80004da:	2390      	movs	r3, #144	; 0x90
 80004dc:	05db      	lsls	r3, r3, #23
 80004de:	0011      	movs	r1, r2
 80004e0:	0018      	movs	r0, r3
 80004e2:	f000 fa3d 	bl	8000960 <HAL_GPIO_Init>

}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	b009      	add	sp, #36	; 0x24
 80004ec:	bd90      	pop	{r4, r7, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	40021000 	.word	0x40021000
 80004f4:	48000800 	.word	0x48000800

080004f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004fc:	b672      	cpsid	i
}
 80004fe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000500:	e7fe      	b.n	8000500 <Error_Handler+0x8>
	...

08000504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <HAL_MspInit+0x44>)
 800050c:	699a      	ldr	r2, [r3, #24]
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <HAL_MspInit+0x44>)
 8000510:	2101      	movs	r1, #1
 8000512:	430a      	orrs	r2, r1
 8000514:	619a      	str	r2, [r3, #24]
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <HAL_MspInit+0x44>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	2201      	movs	r2, #1
 800051c:	4013      	ands	r3, r2
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <HAL_MspInit+0x44>)
 8000524:	69da      	ldr	r2, [r3, #28]
 8000526:	4b08      	ldr	r3, [pc, #32]	; (8000548 <HAL_MspInit+0x44>)
 8000528:	2180      	movs	r1, #128	; 0x80
 800052a:	0549      	lsls	r1, r1, #21
 800052c:	430a      	orrs	r2, r1
 800052e:	61da      	str	r2, [r3, #28]
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <HAL_MspInit+0x44>)
 8000532:	69da      	ldr	r2, [r3, #28]
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	055b      	lsls	r3, r3, #21
 8000538:	4013      	ands	r3, r2
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b002      	add	sp, #8
 8000544:	bd80      	pop	{r7, pc}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	40021000 	.word	0x40021000

0800054c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b08d      	sub	sp, #52	; 0x34
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	241c      	movs	r4, #28
 8000556:	193b      	adds	r3, r7, r4
 8000558:	0018      	movs	r0, r3
 800055a:	2314      	movs	r3, #20
 800055c:	001a      	movs	r2, r3
 800055e:	2100      	movs	r1, #0
 8000560:	f001 feec 	bl	800233c <memset>
  if(huart->Instance==USART1)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a39      	ldr	r2, [pc, #228]	; (8000650 <HAL_UART_MspInit+0x104>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d134      	bne.n	80005d8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800056e:	4b39      	ldr	r3, [pc, #228]	; (8000654 <HAL_UART_MspInit+0x108>)
 8000570:	699a      	ldr	r2, [r3, #24]
 8000572:	4b38      	ldr	r3, [pc, #224]	; (8000654 <HAL_UART_MspInit+0x108>)
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	01c9      	lsls	r1, r1, #7
 8000578:	430a      	orrs	r2, r1
 800057a:	619a      	str	r2, [r3, #24]
 800057c:	4b35      	ldr	r3, [pc, #212]	; (8000654 <HAL_UART_MspInit+0x108>)
 800057e:	699a      	ldr	r2, [r3, #24]
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	01db      	lsls	r3, r3, #7
 8000584:	4013      	ands	r3, r2
 8000586:	61bb      	str	r3, [r7, #24]
 8000588:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800058a:	4b32      	ldr	r3, [pc, #200]	; (8000654 <HAL_UART_MspInit+0x108>)
 800058c:	695a      	ldr	r2, [r3, #20]
 800058e:	4b31      	ldr	r3, [pc, #196]	; (8000654 <HAL_UART_MspInit+0x108>)
 8000590:	2180      	movs	r1, #128	; 0x80
 8000592:	0289      	lsls	r1, r1, #10
 8000594:	430a      	orrs	r2, r1
 8000596:	615a      	str	r2, [r3, #20]
 8000598:	4b2e      	ldr	r3, [pc, #184]	; (8000654 <HAL_UART_MspInit+0x108>)
 800059a:	695a      	ldr	r2, [r3, #20]
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	029b      	lsls	r3, r3, #10
 80005a0:	4013      	ands	r3, r2
 80005a2:	617b      	str	r3, [r7, #20]
 80005a4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	22c0      	movs	r2, #192	; 0xc0
 80005aa:	00d2      	lsls	r2, r2, #3
 80005ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ae:	0021      	movs	r1, r4
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2202      	movs	r2, #2
 80005b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2203      	movs	r2, #3
 80005c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2201      	movs	r2, #1
 80005c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c8:	187a      	adds	r2, r7, r1
 80005ca:	2390      	movs	r3, #144	; 0x90
 80005cc:	05db      	lsls	r3, r3, #23
 80005ce:	0011      	movs	r1, r2
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 f9c5 	bl	8000960 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005d6:	e037      	b.n	8000648 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a1e      	ldr	r2, [pc, #120]	; (8000658 <HAL_UART_MspInit+0x10c>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d132      	bne.n	8000648 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 80005e2:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <HAL_UART_MspInit+0x108>)
 80005e4:	69da      	ldr	r2, [r3, #28]
 80005e6:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <HAL_UART_MspInit+0x108>)
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	0289      	lsls	r1, r1, #10
 80005ec:	430a      	orrs	r2, r1
 80005ee:	61da      	str	r2, [r3, #28]
 80005f0:	4b18      	ldr	r3, [pc, #96]	; (8000654 <HAL_UART_MspInit+0x108>)
 80005f2:	69da      	ldr	r2, [r3, #28]
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	029b      	lsls	r3, r3, #10
 80005f8:	4013      	ands	r3, r2
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <HAL_UART_MspInit+0x108>)
 8000600:	695a      	ldr	r2, [r3, #20]
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <HAL_UART_MspInit+0x108>)
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	0289      	lsls	r1, r1, #10
 8000608:	430a      	orrs	r2, r1
 800060a:	615a      	str	r2, [r3, #20]
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <HAL_UART_MspInit+0x108>)
 800060e:	695a      	ldr	r2, [r3, #20]
 8000610:	2380      	movs	r3, #128	; 0x80
 8000612:	029b      	lsls	r3, r3, #10
 8000614:	4013      	ands	r3, r2
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800061a:	211c      	movs	r1, #28
 800061c:	187b      	adds	r3, r7, r1
 800061e:	220c      	movs	r2, #12
 8000620:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2202      	movs	r2, #2
 8000626:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2201      	movs	r2, #1
 8000638:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063a:	187a      	adds	r2, r7, r1
 800063c:	2390      	movs	r3, #144	; 0x90
 800063e:	05db      	lsls	r3, r3, #23
 8000640:	0011      	movs	r1, r2
 8000642:	0018      	movs	r0, r3
 8000644:	f000 f98c 	bl	8000960 <HAL_GPIO_Init>
}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	b00d      	add	sp, #52	; 0x34
 800064e:	bd90      	pop	{r4, r7, pc}
 8000650:	40013800 	.word	0x40013800
 8000654:	40021000 	.word	0x40021000
 8000658:	40004400 	.word	0x40004400

0800065c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <NMI_Handler+0x4>

08000662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000666:	e7fe      	b.n	8000666 <HardFault_Handler+0x4>

08000668 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000680:	f000 f87a 	bl	8000778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000696:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000698:	480d      	ldr	r0, [pc, #52]	; (80006d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800069a:	490e      	ldr	r1, [pc, #56]	; (80006d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800069c:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <LoopForever+0xe>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a0:	e002      	b.n	80006a8 <LoopCopyDataInit>

080006a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a6:	3304      	adds	r3, #4

080006a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ac:	d3f9      	bcc.n	80006a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ae:	4a0b      	ldr	r2, [pc, #44]	; (80006dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b0:	4c0b      	ldr	r4, [pc, #44]	; (80006e0 <LoopForever+0x16>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b4:	e001      	b.n	80006ba <LoopFillZerobss>

080006b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b8:	3204      	adds	r2, #4

080006ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006bc:	d3fb      	bcc.n	80006b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006be:	f7ff ffe4 	bl	800068a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80006c2:	f001 fe17 	bl	80022f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006c6:	f7ff fdab 	bl	8000220 <main>

080006ca <LoopForever>:

LoopForever:
    b LoopForever
 80006ca:	e7fe      	b.n	80006ca <LoopForever>
  ldr   r0, =_estack
 80006cc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80006d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006d8:	080023f0 	.word	0x080023f0
  ldr r2, =_sbss
 80006dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006e0:	20000134 	.word	0x20000134

080006e4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e4:	e7fe      	b.n	80006e4 <ADC1_COMP_IRQHandler>
	...

080006e8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <HAL_Init+0x24>)
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_Init+0x24>)
 80006f2:	2110      	movs	r1, #16
 80006f4:	430a      	orrs	r2, r1
 80006f6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006f8:	2000      	movs	r0, #0
 80006fa:	f000 f809 	bl	8000710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006fe:	f7ff ff01 	bl	8000504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000702:	2300      	movs	r3, #0
}
 8000704:	0018      	movs	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	40022000 	.word	0x40022000

08000710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <HAL_InitTick+0x5c>)
 800071a:	681c      	ldr	r4, [r3, #0]
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <HAL_InitTick+0x60>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	0019      	movs	r1, r3
 8000722:	23fa      	movs	r3, #250	; 0xfa
 8000724:	0098      	lsls	r0, r3, #2
 8000726:	f7ff fcef 	bl	8000108 <__udivsi3>
 800072a:	0003      	movs	r3, r0
 800072c:	0019      	movs	r1, r3
 800072e:	0020      	movs	r0, r4
 8000730:	f7ff fcea 	bl	8000108 <__udivsi3>
 8000734:	0003      	movs	r3, r0
 8000736:	0018      	movs	r0, r3
 8000738:	f000 f905 	bl	8000946 <HAL_SYSTICK_Config>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d001      	beq.n	8000744 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000740:	2301      	movs	r3, #1
 8000742:	e00f      	b.n	8000764 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2b03      	cmp	r3, #3
 8000748:	d80b      	bhi.n	8000762 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	2301      	movs	r3, #1
 800074e:	425b      	negs	r3, r3
 8000750:	2200      	movs	r2, #0
 8000752:	0018      	movs	r0, r3
 8000754:	f000 f8e2 	bl	800091c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_InitTick+0x64>)
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800075e:	2300      	movs	r3, #0
 8000760:	e000      	b.n	8000764 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
}
 8000764:	0018      	movs	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	b003      	add	sp, #12
 800076a:	bd90      	pop	{r4, r7, pc}
 800076c:	20000000 	.word	0x20000000
 8000770:	20000008 	.word	0x20000008
 8000774:	20000004 	.word	0x20000004

08000778 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_IncTick+0x1c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	001a      	movs	r2, r3
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <HAL_IncTick+0x20>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	18d2      	adds	r2, r2, r3
 8000788:	4b03      	ldr	r3, [pc, #12]	; (8000798 <HAL_IncTick+0x20>)
 800078a:	601a      	str	r2, [r3, #0]
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	20000008 	.word	0x20000008
 8000798:	20000130 	.word	0x20000130

0800079c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  return uwTick;
 80007a0:	4b02      	ldr	r3, [pc, #8]	; (80007ac <HAL_GetTick+0x10>)
 80007a2:	681b      	ldr	r3, [r3, #0]
}
 80007a4:	0018      	movs	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	20000130 	.word	0x20000130

080007b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b8:	f7ff fff0 	bl	800079c <HAL_GetTick>
 80007bc:	0003      	movs	r3, r0
 80007be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	3301      	adds	r3, #1
 80007c8:	d005      	beq.n	80007d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <HAL_Delay+0x44>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	001a      	movs	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	189b      	adds	r3, r3, r2
 80007d4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	f7ff ffe0 	bl	800079c <HAL_GetTick>
 80007dc:	0002      	movs	r2, r0
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d8f7      	bhi.n	80007d8 <HAL_Delay+0x28>
  {
  }
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b004      	add	sp, #16
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	20000008 	.word	0x20000008

080007f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	0002      	movs	r2, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	1dfb      	adds	r3, r7, #7
 8000804:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000806:	1dfb      	adds	r3, r7, #7
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b7f      	cmp	r3, #127	; 0x7f
 800080c:	d828      	bhi.n	8000860 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800080e:	4a2f      	ldr	r2, [pc, #188]	; (80008cc <__NVIC_SetPriority+0xd4>)
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b25b      	sxtb	r3, r3
 8000816:	089b      	lsrs	r3, r3, #2
 8000818:	33c0      	adds	r3, #192	; 0xc0
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	589b      	ldr	r3, [r3, r2]
 800081e:	1dfa      	adds	r2, r7, #7
 8000820:	7812      	ldrb	r2, [r2, #0]
 8000822:	0011      	movs	r1, r2
 8000824:	2203      	movs	r2, #3
 8000826:	400a      	ands	r2, r1
 8000828:	00d2      	lsls	r2, r2, #3
 800082a:	21ff      	movs	r1, #255	; 0xff
 800082c:	4091      	lsls	r1, r2
 800082e:	000a      	movs	r2, r1
 8000830:	43d2      	mvns	r2, r2
 8000832:	401a      	ands	r2, r3
 8000834:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	019b      	lsls	r3, r3, #6
 800083a:	22ff      	movs	r2, #255	; 0xff
 800083c:	401a      	ands	r2, r3
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	0018      	movs	r0, r3
 8000844:	2303      	movs	r3, #3
 8000846:	4003      	ands	r3, r0
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800084c:	481f      	ldr	r0, [pc, #124]	; (80008cc <__NVIC_SetPriority+0xd4>)
 800084e:	1dfb      	adds	r3, r7, #7
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b25b      	sxtb	r3, r3
 8000854:	089b      	lsrs	r3, r3, #2
 8000856:	430a      	orrs	r2, r1
 8000858:	33c0      	adds	r3, #192	; 0xc0
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800085e:	e031      	b.n	80008c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000860:	4a1b      	ldr	r2, [pc, #108]	; (80008d0 <__NVIC_SetPriority+0xd8>)
 8000862:	1dfb      	adds	r3, r7, #7
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	0019      	movs	r1, r3
 8000868:	230f      	movs	r3, #15
 800086a:	400b      	ands	r3, r1
 800086c:	3b08      	subs	r3, #8
 800086e:	089b      	lsrs	r3, r3, #2
 8000870:	3306      	adds	r3, #6
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	18d3      	adds	r3, r2, r3
 8000876:	3304      	adds	r3, #4
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	1dfa      	adds	r2, r7, #7
 800087c:	7812      	ldrb	r2, [r2, #0]
 800087e:	0011      	movs	r1, r2
 8000880:	2203      	movs	r2, #3
 8000882:	400a      	ands	r2, r1
 8000884:	00d2      	lsls	r2, r2, #3
 8000886:	21ff      	movs	r1, #255	; 0xff
 8000888:	4091      	lsls	r1, r2
 800088a:	000a      	movs	r2, r1
 800088c:	43d2      	mvns	r2, r2
 800088e:	401a      	ands	r2, r3
 8000890:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	019b      	lsls	r3, r3, #6
 8000896:	22ff      	movs	r2, #255	; 0xff
 8000898:	401a      	ands	r2, r3
 800089a:	1dfb      	adds	r3, r7, #7
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	0018      	movs	r0, r3
 80008a0:	2303      	movs	r3, #3
 80008a2:	4003      	ands	r3, r0
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a8:	4809      	ldr	r0, [pc, #36]	; (80008d0 <__NVIC_SetPriority+0xd8>)
 80008aa:	1dfb      	adds	r3, r7, #7
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	001c      	movs	r4, r3
 80008b0:	230f      	movs	r3, #15
 80008b2:	4023      	ands	r3, r4
 80008b4:	3b08      	subs	r3, #8
 80008b6:	089b      	lsrs	r3, r3, #2
 80008b8:	430a      	orrs	r2, r1
 80008ba:	3306      	adds	r3, #6
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	18c3      	adds	r3, r0, r3
 80008c0:	3304      	adds	r3, #4
 80008c2:	601a      	str	r2, [r3, #0]
}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b003      	add	sp, #12
 80008ca:	bd90      	pop	{r4, r7, pc}
 80008cc:	e000e100 	.word	0xe000e100
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	1e5a      	subs	r2, r3, #1
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	045b      	lsls	r3, r3, #17
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d301      	bcc.n	80008ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008e8:	2301      	movs	r3, #1
 80008ea:	e010      	b.n	800090e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <SysTick_Config+0x44>)
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	3a01      	subs	r2, #1
 80008f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008f4:	2301      	movs	r3, #1
 80008f6:	425b      	negs	r3, r3
 80008f8:	2103      	movs	r1, #3
 80008fa:	0018      	movs	r0, r3
 80008fc:	f7ff ff7c 	bl	80007f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <SysTick_Config+0x44>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000906:	4b04      	ldr	r3, [pc, #16]	; (8000918 <SysTick_Config+0x44>)
 8000908:	2207      	movs	r2, #7
 800090a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800090c:	2300      	movs	r3, #0
}
 800090e:	0018      	movs	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	b002      	add	sp, #8
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	e000e010 	.word	0xe000e010

0800091c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	60b9      	str	r1, [r7, #8]
 8000924:	607a      	str	r2, [r7, #4]
 8000926:	210f      	movs	r1, #15
 8000928:	187b      	adds	r3, r7, r1
 800092a:	1c02      	adds	r2, r0, #0
 800092c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	187b      	adds	r3, r7, r1
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b25b      	sxtb	r3, r3
 8000936:	0011      	movs	r1, r2
 8000938:	0018      	movs	r0, r3
 800093a:	f7ff ff5d 	bl	80007f8 <__NVIC_SetPriority>
}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b004      	add	sp, #16
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	0018      	movs	r0, r3
 8000952:	f7ff ffbf 	bl	80008d4 <SysTick_Config>
 8000956:	0003      	movs	r3, r0
}
 8000958:	0018      	movs	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	b002      	add	sp, #8
 800095e:	bd80      	pop	{r7, pc}

08000960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800096e:	e155      	b.n	8000c1c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2101      	movs	r1, #1
 8000976:	697a      	ldr	r2, [r7, #20]
 8000978:	4091      	lsls	r1, r2
 800097a:	000a      	movs	r2, r1
 800097c:	4013      	ands	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d100      	bne.n	8000988 <HAL_GPIO_Init+0x28>
 8000986:	e146      	b.n	8000c16 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	2203      	movs	r2, #3
 800098e:	4013      	ands	r3, r2
 8000990:	2b01      	cmp	r3, #1
 8000992:	d005      	beq.n	80009a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	2203      	movs	r2, #3
 800099a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800099c:	2b02      	cmp	r3, #2
 800099e:	d130      	bne.n	8000a02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	2203      	movs	r2, #3
 80009ac:	409a      	lsls	r2, r3
 80009ae:	0013      	movs	r3, r2
 80009b0:	43da      	mvns	r2, r3
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	4013      	ands	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	68da      	ldr	r2, [r3, #12]
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	409a      	lsls	r2, r3
 80009c2:	0013      	movs	r3, r2
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009d6:	2201      	movs	r2, #1
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	409a      	lsls	r2, r3
 80009dc:	0013      	movs	r3, r2
 80009de:	43da      	mvns	r2, r3
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	4013      	ands	r3, r2
 80009e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	091b      	lsrs	r3, r3, #4
 80009ec:	2201      	movs	r2, #1
 80009ee:	401a      	ands	r2, r3
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	409a      	lsls	r2, r3
 80009f4:	0013      	movs	r3, r2
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	2203      	movs	r2, #3
 8000a08:	4013      	ands	r3, r2
 8000a0a:	2b03      	cmp	r3, #3
 8000a0c:	d017      	beq.n	8000a3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	2203      	movs	r2, #3
 8000a1a:	409a      	lsls	r2, r3
 8000a1c:	0013      	movs	r3, r2
 8000a1e:	43da      	mvns	r2, r3
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	4013      	ands	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	689a      	ldr	r2, [r3, #8]
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	0013      	movs	r3, r2
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	2203      	movs	r2, #3
 8000a44:	4013      	ands	r3, r2
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d123      	bne.n	8000a92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	08da      	lsrs	r2, r3, #3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	3208      	adds	r2, #8
 8000a52:	0092      	lsls	r2, r2, #2
 8000a54:	58d3      	ldr	r3, [r2, r3]
 8000a56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	2207      	movs	r2, #7
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	220f      	movs	r2, #15
 8000a62:	409a      	lsls	r2, r3
 8000a64:	0013      	movs	r3, r2
 8000a66:	43da      	mvns	r2, r3
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	691a      	ldr	r2, [r3, #16]
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	2107      	movs	r1, #7
 8000a76:	400b      	ands	r3, r1
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	409a      	lsls	r2, r3
 8000a7c:	0013      	movs	r3, r2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	08da      	lsrs	r2, r3, #3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3208      	adds	r2, #8
 8000a8c:	0092      	lsls	r2, r2, #2
 8000a8e:	6939      	ldr	r1, [r7, #16]
 8000a90:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	409a      	lsls	r2, r3
 8000aa0:	0013      	movs	r3, r2
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	2203      	movs	r2, #3
 8000ab0:	401a      	ands	r2, r3
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	409a      	lsls	r2, r3
 8000ab8:	0013      	movs	r3, r2
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685a      	ldr	r2, [r3, #4]
 8000aca:	23c0      	movs	r3, #192	; 0xc0
 8000acc:	029b      	lsls	r3, r3, #10
 8000ace:	4013      	ands	r3, r2
 8000ad0:	d100      	bne.n	8000ad4 <HAL_GPIO_Init+0x174>
 8000ad2:	e0a0      	b.n	8000c16 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad4:	4b57      	ldr	r3, [pc, #348]	; (8000c34 <HAL_GPIO_Init+0x2d4>)
 8000ad6:	699a      	ldr	r2, [r3, #24]
 8000ad8:	4b56      	ldr	r3, [pc, #344]	; (8000c34 <HAL_GPIO_Init+0x2d4>)
 8000ada:	2101      	movs	r1, #1
 8000adc:	430a      	orrs	r2, r1
 8000ade:	619a      	str	r2, [r3, #24]
 8000ae0:	4b54      	ldr	r3, [pc, #336]	; (8000c34 <HAL_GPIO_Init+0x2d4>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000aec:	4a52      	ldr	r2, [pc, #328]	; (8000c38 <HAL_GPIO_Init+0x2d8>)
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	089b      	lsrs	r3, r3, #2
 8000af2:	3302      	adds	r3, #2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	589b      	ldr	r3, [r3, r2]
 8000af8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	2203      	movs	r2, #3
 8000afe:	4013      	ands	r3, r2
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	220f      	movs	r2, #15
 8000b04:	409a      	lsls	r2, r3
 8000b06:	0013      	movs	r3, r2
 8000b08:	43da      	mvns	r2, r3
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	2390      	movs	r3, #144	; 0x90
 8000b14:	05db      	lsls	r3, r3, #23
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d019      	beq.n	8000b4e <HAL_GPIO_Init+0x1ee>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a47      	ldr	r2, [pc, #284]	; (8000c3c <HAL_GPIO_Init+0x2dc>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d013      	beq.n	8000b4a <HAL_GPIO_Init+0x1ea>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a46      	ldr	r2, [pc, #280]	; (8000c40 <HAL_GPIO_Init+0x2e0>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d00d      	beq.n	8000b46 <HAL_GPIO_Init+0x1e6>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a45      	ldr	r2, [pc, #276]	; (8000c44 <HAL_GPIO_Init+0x2e4>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d007      	beq.n	8000b42 <HAL_GPIO_Init+0x1e2>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a44      	ldr	r2, [pc, #272]	; (8000c48 <HAL_GPIO_Init+0x2e8>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d101      	bne.n	8000b3e <HAL_GPIO_Init+0x1de>
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	e008      	b.n	8000b50 <HAL_GPIO_Init+0x1f0>
 8000b3e:	2305      	movs	r3, #5
 8000b40:	e006      	b.n	8000b50 <HAL_GPIO_Init+0x1f0>
 8000b42:	2303      	movs	r3, #3
 8000b44:	e004      	b.n	8000b50 <HAL_GPIO_Init+0x1f0>
 8000b46:	2302      	movs	r3, #2
 8000b48:	e002      	b.n	8000b50 <HAL_GPIO_Init+0x1f0>
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e000      	b.n	8000b50 <HAL_GPIO_Init+0x1f0>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	697a      	ldr	r2, [r7, #20]
 8000b52:	2103      	movs	r1, #3
 8000b54:	400a      	ands	r2, r1
 8000b56:	0092      	lsls	r2, r2, #2
 8000b58:	4093      	lsls	r3, r2
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b60:	4935      	ldr	r1, [pc, #212]	; (8000c38 <HAL_GPIO_Init+0x2d8>)
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	089b      	lsrs	r3, r3, #2
 8000b66:	3302      	adds	r3, #2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b6e:	4b37      	ldr	r3, [pc, #220]	; (8000c4c <HAL_GPIO_Init+0x2ec>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	43da      	mvns	r2, r3
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685a      	ldr	r2, [r3, #4]
 8000b82:	2380      	movs	r3, #128	; 0x80
 8000b84:	025b      	lsls	r3, r3, #9
 8000b86:	4013      	ands	r3, r2
 8000b88:	d003      	beq.n	8000b92 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b92:	4b2e      	ldr	r3, [pc, #184]	; (8000c4c <HAL_GPIO_Init+0x2ec>)
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000b98:	4b2c      	ldr	r3, [pc, #176]	; (8000c4c <HAL_GPIO_Init+0x2ec>)
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	43da      	mvns	r2, r3
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685a      	ldr	r2, [r3, #4]
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	029b      	lsls	r3, r3, #10
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	d003      	beq.n	8000bbc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bbc:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <HAL_GPIO_Init+0x2ec>)
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bc2:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <HAL_GPIO_Init+0x2ec>)
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	43da      	mvns	r2, r3
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685a      	ldr	r2, [r3, #4]
 8000bd6:	2380      	movs	r3, #128	; 0x80
 8000bd8:	035b      	lsls	r3, r3, #13
 8000bda:	4013      	ands	r3, r2
 8000bdc:	d003      	beq.n	8000be6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <HAL_GPIO_Init+0x2ec>)
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <HAL_GPIO_Init+0x2ec>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	43da      	mvns	r2, r3
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685a      	ldr	r2, [r3, #4]
 8000c00:	2380      	movs	r3, #128	; 0x80
 8000c02:	039b      	lsls	r3, r3, #14
 8000c04:	4013      	ands	r3, r2
 8000c06:	d003      	beq.n	8000c10 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <HAL_GPIO_Init+0x2ec>)
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	40da      	lsrs	r2, r3
 8000c24:	1e13      	subs	r3, r2, #0
 8000c26:	d000      	beq.n	8000c2a <HAL_GPIO_Init+0x2ca>
 8000c28:	e6a2      	b.n	8000970 <HAL_GPIO_Init+0x10>
  } 
}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b006      	add	sp, #24
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40010000 	.word	0x40010000
 8000c3c:	48000400 	.word	0x48000400
 8000c40:	48000800 	.word	0x48000800
 8000c44:	48000c00 	.word	0x48000c00
 8000c48:	48001000 	.word	0x48001000
 8000c4c:	40010400 	.word	0x40010400

08000c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	0008      	movs	r0, r1
 8000c5a:	0011      	movs	r1, r2
 8000c5c:	1cbb      	adds	r3, r7, #2
 8000c5e:	1c02      	adds	r2, r0, #0
 8000c60:	801a      	strh	r2, [r3, #0]
 8000c62:	1c7b      	adds	r3, r7, #1
 8000c64:	1c0a      	adds	r2, r1, #0
 8000c66:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c68:	1c7b      	adds	r3, r7, #1
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d004      	beq.n	8000c7a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c70:	1cbb      	adds	r3, r7, #2
 8000c72:	881a      	ldrh	r2, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c78:	e003      	b.n	8000c82 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c7a:	1cbb      	adds	r3, r7, #2
 8000c7c:	881a      	ldrh	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b002      	add	sp, #8
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d102      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	f000 fb76 	bl	800138c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	d100      	bne.n	8000cac <HAL_RCC_OscConfig+0x20>
 8000caa:	e08e      	b.n	8000dca <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cac:	4bc5      	ldr	r3, [pc, #788]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	220c      	movs	r2, #12
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	2b04      	cmp	r3, #4
 8000cb6:	d00e      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cb8:	4bc2      	ldr	r3, [pc, #776]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	220c      	movs	r2, #12
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	2b08      	cmp	r3, #8
 8000cc2:	d117      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x68>
 8000cc4:	4bbf      	ldr	r3, [pc, #764]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000cc6:	685a      	ldr	r2, [r3, #4]
 8000cc8:	23c0      	movs	r3, #192	; 0xc0
 8000cca:	025b      	lsls	r3, r3, #9
 8000ccc:	401a      	ands	r2, r3
 8000cce:	2380      	movs	r3, #128	; 0x80
 8000cd0:	025b      	lsls	r3, r3, #9
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d10e      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd6:	4bbb      	ldr	r3, [pc, #748]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	2380      	movs	r3, #128	; 0x80
 8000cdc:	029b      	lsls	r3, r3, #10
 8000cde:	4013      	ands	r3, r2
 8000ce0:	d100      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x58>
 8000ce2:	e071      	b.n	8000dc8 <HAL_RCC_OscConfig+0x13c>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d000      	beq.n	8000cee <HAL_RCC_OscConfig+0x62>
 8000cec:	e06c      	b.n	8000dc8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	f000 fb4c 	bl	800138c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d107      	bne.n	8000d0c <HAL_RCC_OscConfig+0x80>
 8000cfc:	4bb1      	ldr	r3, [pc, #708]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4bb0      	ldr	r3, [pc, #704]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000d02:	2180      	movs	r1, #128	; 0x80
 8000d04:	0249      	lsls	r1, r1, #9
 8000d06:	430a      	orrs	r2, r1
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	e02f      	b.n	8000d6c <HAL_RCC_OscConfig+0xe0>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d10c      	bne.n	8000d2e <HAL_RCC_OscConfig+0xa2>
 8000d14:	4bab      	ldr	r3, [pc, #684]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4baa      	ldr	r3, [pc, #680]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000d1a:	49ab      	ldr	r1, [pc, #684]	; (8000fc8 <HAL_RCC_OscConfig+0x33c>)
 8000d1c:	400a      	ands	r2, r1
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	4ba8      	ldr	r3, [pc, #672]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4ba7      	ldr	r3, [pc, #668]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000d26:	49a9      	ldr	r1, [pc, #676]	; (8000fcc <HAL_RCC_OscConfig+0x340>)
 8000d28:	400a      	ands	r2, r1
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	e01e      	b.n	8000d6c <HAL_RCC_OscConfig+0xe0>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	2b05      	cmp	r3, #5
 8000d34:	d10e      	bne.n	8000d54 <HAL_RCC_OscConfig+0xc8>
 8000d36:	4ba3      	ldr	r3, [pc, #652]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	4ba2      	ldr	r3, [pc, #648]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000d3c:	2180      	movs	r1, #128	; 0x80
 8000d3e:	02c9      	lsls	r1, r1, #11
 8000d40:	430a      	orrs	r2, r1
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	4b9f      	ldr	r3, [pc, #636]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b9e      	ldr	r3, [pc, #632]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000d4a:	2180      	movs	r1, #128	; 0x80
 8000d4c:	0249      	lsls	r1, r1, #9
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	e00b      	b.n	8000d6c <HAL_RCC_OscConfig+0xe0>
 8000d54:	4b9b      	ldr	r3, [pc, #620]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b9a      	ldr	r3, [pc, #616]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000d5a:	499b      	ldr	r1, [pc, #620]	; (8000fc8 <HAL_RCC_OscConfig+0x33c>)
 8000d5c:	400a      	ands	r2, r1
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	4b98      	ldr	r3, [pc, #608]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b97      	ldr	r3, [pc, #604]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000d66:	4999      	ldr	r1, [pc, #612]	; (8000fcc <HAL_RCC_OscConfig+0x340>)
 8000d68:	400a      	ands	r2, r1
 8000d6a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d014      	beq.n	8000d9e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d74:	f7ff fd12 	bl	800079c <HAL_GetTick>
 8000d78:	0003      	movs	r3, r0
 8000d7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d7c:	e008      	b.n	8000d90 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d7e:	f7ff fd0d 	bl	800079c <HAL_GetTick>
 8000d82:	0002      	movs	r2, r0
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	2b64      	cmp	r3, #100	; 0x64
 8000d8a:	d901      	bls.n	8000d90 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	e2fd      	b.n	800138c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d90:	4b8c      	ldr	r3, [pc, #560]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	2380      	movs	r3, #128	; 0x80
 8000d96:	029b      	lsls	r3, r3, #10
 8000d98:	4013      	ands	r3, r2
 8000d9a:	d0f0      	beq.n	8000d7e <HAL_RCC_OscConfig+0xf2>
 8000d9c:	e015      	b.n	8000dca <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9e:	f7ff fcfd 	bl	800079c <HAL_GetTick>
 8000da2:	0003      	movs	r3, r0
 8000da4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000da6:	e008      	b.n	8000dba <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000da8:	f7ff fcf8 	bl	800079c <HAL_GetTick>
 8000dac:	0002      	movs	r2, r0
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b64      	cmp	r3, #100	; 0x64
 8000db4:	d901      	bls.n	8000dba <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e2e8      	b.n	800138c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dba:	4b82      	ldr	r3, [pc, #520]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	2380      	movs	r3, #128	; 0x80
 8000dc0:	029b      	lsls	r3, r3, #10
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	d1f0      	bne.n	8000da8 <HAL_RCC_OscConfig+0x11c>
 8000dc6:	e000      	b.n	8000dca <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2202      	movs	r2, #2
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	d100      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x14a>
 8000dd4:	e06c      	b.n	8000eb0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000dd6:	4b7b      	ldr	r3, [pc, #492]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	220c      	movs	r2, #12
 8000ddc:	4013      	ands	r3, r2
 8000dde:	d00e      	beq.n	8000dfe <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000de0:	4b78      	ldr	r3, [pc, #480]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	220c      	movs	r2, #12
 8000de6:	4013      	ands	r3, r2
 8000de8:	2b08      	cmp	r3, #8
 8000dea:	d11f      	bne.n	8000e2c <HAL_RCC_OscConfig+0x1a0>
 8000dec:	4b75      	ldr	r3, [pc, #468]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	23c0      	movs	r3, #192	; 0xc0
 8000df2:	025b      	lsls	r3, r3, #9
 8000df4:	401a      	ands	r2, r3
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	021b      	lsls	r3, r3, #8
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d116      	bne.n	8000e2c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dfe:	4b71      	ldr	r3, [pc, #452]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2202      	movs	r2, #2
 8000e04:	4013      	ands	r3, r2
 8000e06:	d005      	beq.n	8000e14 <HAL_RCC_OscConfig+0x188>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d001      	beq.n	8000e14 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e2bb      	b.n	800138c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e14:	4b6b      	ldr	r3, [pc, #428]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	22f8      	movs	r2, #248	; 0xf8
 8000e1a:	4393      	bics	r3, r2
 8000e1c:	0019      	movs	r1, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	00da      	lsls	r2, r3, #3
 8000e24:	4b67      	ldr	r3, [pc, #412]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000e26:	430a      	orrs	r2, r1
 8000e28:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e2a:	e041      	b.n	8000eb0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d024      	beq.n	8000e7e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e34:	4b63      	ldr	r3, [pc, #396]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b62      	ldr	r3, [pc, #392]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e40:	f7ff fcac 	bl	800079c <HAL_GetTick>
 8000e44:	0003      	movs	r3, r0
 8000e46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e48:	e008      	b.n	8000e5c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e4a:	f7ff fca7 	bl	800079c <HAL_GetTick>
 8000e4e:	0002      	movs	r2, r0
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d901      	bls.n	8000e5c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e297      	b.n	800138c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e5c:	4b59      	ldr	r3, [pc, #356]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2202      	movs	r2, #2
 8000e62:	4013      	ands	r3, r2
 8000e64:	d0f1      	beq.n	8000e4a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e66:	4b57      	ldr	r3, [pc, #348]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	22f8      	movs	r2, #248	; 0xf8
 8000e6c:	4393      	bics	r3, r2
 8000e6e:	0019      	movs	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	691b      	ldr	r3, [r3, #16]
 8000e74:	00da      	lsls	r2, r3, #3
 8000e76:	4b53      	ldr	r3, [pc, #332]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	e018      	b.n	8000eb0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e7e:	4b51      	ldr	r3, [pc, #324]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	4b50      	ldr	r3, [pc, #320]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000e84:	2101      	movs	r1, #1
 8000e86:	438a      	bics	r2, r1
 8000e88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8a:	f7ff fc87 	bl	800079c <HAL_GetTick>
 8000e8e:	0003      	movs	r3, r0
 8000e90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e92:	e008      	b.n	8000ea6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e94:	f7ff fc82 	bl	800079c <HAL_GetTick>
 8000e98:	0002      	movs	r2, r0
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d901      	bls.n	8000ea6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e272      	b.n	800138c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea6:	4b47      	ldr	r3, [pc, #284]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2202      	movs	r2, #2
 8000eac:	4013      	ands	r3, r2
 8000eae:	d1f1      	bne.n	8000e94 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2208      	movs	r2, #8
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	d036      	beq.n	8000f28 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d019      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ec2:	4b40      	ldr	r3, [pc, #256]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000ec4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ec6:	4b3f      	ldr	r3, [pc, #252]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000ec8:	2101      	movs	r1, #1
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ece:	f7ff fc65 	bl	800079c <HAL_GetTick>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ed6:	e008      	b.n	8000eea <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ed8:	f7ff fc60 	bl	800079c <HAL_GetTick>
 8000edc:	0002      	movs	r2, r0
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e250      	b.n	800138c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eea:	4b36      	ldr	r3, [pc, #216]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eee:	2202      	movs	r2, #2
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d0f1      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x24c>
 8000ef4:	e018      	b.n	8000f28 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ef6:	4b33      	ldr	r3, [pc, #204]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000ef8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000efa:	4b32      	ldr	r3, [pc, #200]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000efc:	2101      	movs	r1, #1
 8000efe:	438a      	bics	r2, r1
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f02:	f7ff fc4b 	bl	800079c <HAL_GetTick>
 8000f06:	0003      	movs	r3, r0
 8000f08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f0a:	e008      	b.n	8000f1e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f0c:	f7ff fc46 	bl	800079c <HAL_GetTick>
 8000f10:	0002      	movs	r2, r0
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d901      	bls.n	8000f1e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e236      	b.n	800138c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f1e:	4b29      	ldr	r3, [pc, #164]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f22:	2202      	movs	r2, #2
 8000f24:	4013      	ands	r3, r2
 8000f26:	d1f1      	bne.n	8000f0c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	4013      	ands	r3, r2
 8000f30:	d100      	bne.n	8000f34 <HAL_RCC_OscConfig+0x2a8>
 8000f32:	e0b5      	b.n	80010a0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f34:	201f      	movs	r0, #31
 8000f36:	183b      	adds	r3, r7, r0
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f3c:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000f3e:	69da      	ldr	r2, [r3, #28]
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	055b      	lsls	r3, r3, #21
 8000f44:	4013      	ands	r3, r2
 8000f46:	d110      	bne.n	8000f6a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f48:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000f4a:	69da      	ldr	r2, [r3, #28]
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000f4e:	2180      	movs	r1, #128	; 0x80
 8000f50:	0549      	lsls	r1, r1, #21
 8000f52:	430a      	orrs	r2, r1
 8000f54:	61da      	str	r2, [r3, #28]
 8000f56:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000f58:	69da      	ldr	r2, [r3, #28]
 8000f5a:	2380      	movs	r3, #128	; 0x80
 8000f5c:	055b      	lsls	r3, r3, #21
 8000f5e:	4013      	ands	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f64:	183b      	adds	r3, r7, r0
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <HAL_RCC_OscConfig+0x344>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	4013      	ands	r3, r2
 8000f74:	d11a      	bne.n	8000fac <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f76:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <HAL_RCC_OscConfig+0x344>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <HAL_RCC_OscConfig+0x344>)
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	0049      	lsls	r1, r1, #1
 8000f80:	430a      	orrs	r2, r1
 8000f82:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f84:	f7ff fc0a 	bl	800079c <HAL_GetTick>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f8c:	e008      	b.n	8000fa0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f8e:	f7ff fc05 	bl	800079c <HAL_GetTick>
 8000f92:	0002      	movs	r2, r0
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b64      	cmp	r3, #100	; 0x64
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e1f5      	b.n	800138c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_RCC_OscConfig+0x344>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	2380      	movs	r3, #128	; 0x80
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d0f0      	beq.n	8000f8e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d10f      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x348>
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000fb6:	6a1a      	ldr	r2, [r3, #32]
 8000fb8:	4b02      	ldr	r3, [pc, #8]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
 8000fba:	2101      	movs	r1, #1
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	621a      	str	r2, [r3, #32]
 8000fc0:	e036      	b.n	8001030 <HAL_RCC_OscConfig+0x3a4>
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	fffeffff 	.word	0xfffeffff
 8000fcc:	fffbffff 	.word	0xfffbffff
 8000fd0:	40007000 	.word	0x40007000
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d10c      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x36a>
 8000fdc:	4bca      	ldr	r3, [pc, #808]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 8000fde:	6a1a      	ldr	r2, [r3, #32]
 8000fe0:	4bc9      	ldr	r3, [pc, #804]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	438a      	bics	r2, r1
 8000fe6:	621a      	str	r2, [r3, #32]
 8000fe8:	4bc7      	ldr	r3, [pc, #796]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 8000fea:	6a1a      	ldr	r2, [r3, #32]
 8000fec:	4bc6      	ldr	r3, [pc, #792]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 8000fee:	2104      	movs	r1, #4
 8000ff0:	438a      	bics	r2, r1
 8000ff2:	621a      	str	r2, [r3, #32]
 8000ff4:	e01c      	b.n	8001030 <HAL_RCC_OscConfig+0x3a4>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	2b05      	cmp	r3, #5
 8000ffc:	d10c      	bne.n	8001018 <HAL_RCC_OscConfig+0x38c>
 8000ffe:	4bc2      	ldr	r3, [pc, #776]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 8001000:	6a1a      	ldr	r2, [r3, #32]
 8001002:	4bc1      	ldr	r3, [pc, #772]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 8001004:	2104      	movs	r1, #4
 8001006:	430a      	orrs	r2, r1
 8001008:	621a      	str	r2, [r3, #32]
 800100a:	4bbf      	ldr	r3, [pc, #764]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 800100c:	6a1a      	ldr	r2, [r3, #32]
 800100e:	4bbe      	ldr	r3, [pc, #760]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 8001010:	2101      	movs	r1, #1
 8001012:	430a      	orrs	r2, r1
 8001014:	621a      	str	r2, [r3, #32]
 8001016:	e00b      	b.n	8001030 <HAL_RCC_OscConfig+0x3a4>
 8001018:	4bbb      	ldr	r3, [pc, #748]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 800101a:	6a1a      	ldr	r2, [r3, #32]
 800101c:	4bba      	ldr	r3, [pc, #744]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 800101e:	2101      	movs	r1, #1
 8001020:	438a      	bics	r2, r1
 8001022:	621a      	str	r2, [r3, #32]
 8001024:	4bb8      	ldr	r3, [pc, #736]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 8001026:	6a1a      	ldr	r2, [r3, #32]
 8001028:	4bb7      	ldr	r3, [pc, #732]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 800102a:	2104      	movs	r1, #4
 800102c:	438a      	bics	r2, r1
 800102e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d014      	beq.n	8001062 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001038:	f7ff fbb0 	bl	800079c <HAL_GetTick>
 800103c:	0003      	movs	r3, r0
 800103e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001040:	e009      	b.n	8001056 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001042:	f7ff fbab 	bl	800079c <HAL_GetTick>
 8001046:	0002      	movs	r2, r0
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	4aaf      	ldr	r2, [pc, #700]	; (800130c <HAL_RCC_OscConfig+0x680>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e19a      	b.n	800138c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001056:	4bac      	ldr	r3, [pc, #688]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 8001058:	6a1b      	ldr	r3, [r3, #32]
 800105a:	2202      	movs	r2, #2
 800105c:	4013      	ands	r3, r2
 800105e:	d0f0      	beq.n	8001042 <HAL_RCC_OscConfig+0x3b6>
 8001060:	e013      	b.n	800108a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001062:	f7ff fb9b 	bl	800079c <HAL_GetTick>
 8001066:	0003      	movs	r3, r0
 8001068:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800106a:	e009      	b.n	8001080 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800106c:	f7ff fb96 	bl	800079c <HAL_GetTick>
 8001070:	0002      	movs	r2, r0
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	4aa5      	ldr	r2, [pc, #660]	; (800130c <HAL_RCC_OscConfig+0x680>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e185      	b.n	800138c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001080:	4ba1      	ldr	r3, [pc, #644]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	2202      	movs	r2, #2
 8001086:	4013      	ands	r3, r2
 8001088:	d1f0      	bne.n	800106c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800108a:	231f      	movs	r3, #31
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d105      	bne.n	80010a0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001094:	4b9c      	ldr	r3, [pc, #624]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 8001096:	69da      	ldr	r2, [r3, #28]
 8001098:	4b9b      	ldr	r3, [pc, #620]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 800109a:	499d      	ldr	r1, [pc, #628]	; (8001310 <HAL_RCC_OscConfig+0x684>)
 800109c:	400a      	ands	r2, r1
 800109e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2210      	movs	r2, #16
 80010a6:	4013      	ands	r3, r2
 80010a8:	d063      	beq.n	8001172 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d12a      	bne.n	8001108 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010b2:	4b95      	ldr	r3, [pc, #596]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 80010b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010b6:	4b94      	ldr	r3, [pc, #592]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 80010b8:	2104      	movs	r1, #4
 80010ba:	430a      	orrs	r2, r1
 80010bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80010be:	4b92      	ldr	r3, [pc, #584]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 80010c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010c2:	4b91      	ldr	r3, [pc, #580]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 80010c4:	2101      	movs	r1, #1
 80010c6:	430a      	orrs	r2, r1
 80010c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ca:	f7ff fb67 	bl	800079c <HAL_GetTick>
 80010ce:	0003      	movs	r3, r0
 80010d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010d4:	f7ff fb62 	bl	800079c <HAL_GetTick>
 80010d8:	0002      	movs	r2, r0
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e152      	b.n	800138c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010e6:	4b88      	ldr	r3, [pc, #544]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 80010e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ea:	2202      	movs	r2, #2
 80010ec:	4013      	ands	r3, r2
 80010ee:	d0f1      	beq.n	80010d4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010f0:	4b85      	ldr	r3, [pc, #532]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 80010f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f4:	22f8      	movs	r2, #248	; 0xf8
 80010f6:	4393      	bics	r3, r2
 80010f8:	0019      	movs	r1, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	00da      	lsls	r2, r3, #3
 8001100:	4b81      	ldr	r3, [pc, #516]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 8001102:	430a      	orrs	r2, r1
 8001104:	635a      	str	r2, [r3, #52]	; 0x34
 8001106:	e034      	b.n	8001172 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	3305      	adds	r3, #5
 800110e:	d111      	bne.n	8001134 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001110:	4b7d      	ldr	r3, [pc, #500]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 8001112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001114:	4b7c      	ldr	r3, [pc, #496]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 8001116:	2104      	movs	r1, #4
 8001118:	438a      	bics	r2, r1
 800111a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800111c:	4b7a      	ldr	r3, [pc, #488]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 800111e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001120:	22f8      	movs	r2, #248	; 0xf8
 8001122:	4393      	bics	r3, r2
 8001124:	0019      	movs	r1, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	00da      	lsls	r2, r3, #3
 800112c:	4b76      	ldr	r3, [pc, #472]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 800112e:	430a      	orrs	r2, r1
 8001130:	635a      	str	r2, [r3, #52]	; 0x34
 8001132:	e01e      	b.n	8001172 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001134:	4b74      	ldr	r3, [pc, #464]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 8001136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001138:	4b73      	ldr	r3, [pc, #460]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 800113a:	2104      	movs	r1, #4
 800113c:	430a      	orrs	r2, r1
 800113e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001140:	4b71      	ldr	r3, [pc, #452]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 8001142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001144:	4b70      	ldr	r3, [pc, #448]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 8001146:	2101      	movs	r1, #1
 8001148:	438a      	bics	r2, r1
 800114a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114c:	f7ff fb26 	bl	800079c <HAL_GetTick>
 8001150:	0003      	movs	r3, r0
 8001152:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001154:	e008      	b.n	8001168 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001156:	f7ff fb21 	bl	800079c <HAL_GetTick>
 800115a:	0002      	movs	r2, r0
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e111      	b.n	800138c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001168:	4b67      	ldr	r3, [pc, #412]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 800116a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800116c:	2202      	movs	r2, #2
 800116e:	4013      	ands	r3, r2
 8001170:	d1f1      	bne.n	8001156 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2220      	movs	r2, #32
 8001178:	4013      	ands	r3, r2
 800117a:	d05c      	beq.n	8001236 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800117c:	4b62      	ldr	r3, [pc, #392]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	220c      	movs	r2, #12
 8001182:	4013      	ands	r3, r2
 8001184:	2b0c      	cmp	r3, #12
 8001186:	d00e      	beq.n	80011a6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001188:	4b5f      	ldr	r3, [pc, #380]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	220c      	movs	r2, #12
 800118e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001190:	2b08      	cmp	r3, #8
 8001192:	d114      	bne.n	80011be <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001194:	4b5c      	ldr	r3, [pc, #368]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	23c0      	movs	r3, #192	; 0xc0
 800119a:	025b      	lsls	r3, r3, #9
 800119c:	401a      	ands	r2, r3
 800119e:	23c0      	movs	r3, #192	; 0xc0
 80011a0:	025b      	lsls	r3, r3, #9
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d10b      	bne.n	80011be <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80011a6:	4b58      	ldr	r3, [pc, #352]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 80011a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011aa:	2380      	movs	r3, #128	; 0x80
 80011ac:	025b      	lsls	r3, r3, #9
 80011ae:	4013      	ands	r3, r2
 80011b0:	d040      	beq.n	8001234 <HAL_RCC_OscConfig+0x5a8>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d03c      	beq.n	8001234 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e0e6      	b.n	800138c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d01b      	beq.n	80011fe <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80011c6:	4b50      	ldr	r3, [pc, #320]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 80011c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ca:	4b4f      	ldr	r3, [pc, #316]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 80011cc:	2180      	movs	r1, #128	; 0x80
 80011ce:	0249      	lsls	r1, r1, #9
 80011d0:	430a      	orrs	r2, r1
 80011d2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fae2 	bl	800079c <HAL_GetTick>
 80011d8:	0003      	movs	r3, r0
 80011da:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011de:	f7ff fadd 	bl	800079c <HAL_GetTick>
 80011e2:	0002      	movs	r2, r0
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e0cd      	b.n	800138c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80011f0:	4b45      	ldr	r3, [pc, #276]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 80011f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	025b      	lsls	r3, r3, #9
 80011f8:	4013      	ands	r3, r2
 80011fa:	d0f0      	beq.n	80011de <HAL_RCC_OscConfig+0x552>
 80011fc:	e01b      	b.n	8001236 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80011fe:	4b42      	ldr	r3, [pc, #264]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 8001200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001202:	4b41      	ldr	r3, [pc, #260]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 8001204:	4943      	ldr	r1, [pc, #268]	; (8001314 <HAL_RCC_OscConfig+0x688>)
 8001206:	400a      	ands	r2, r1
 8001208:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120a:	f7ff fac7 	bl	800079c <HAL_GetTick>
 800120e:	0003      	movs	r3, r0
 8001210:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001214:	f7ff fac2 	bl	800079c <HAL_GetTick>
 8001218:	0002      	movs	r2, r0
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e0b2      	b.n	800138c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001226:	4b38      	ldr	r3, [pc, #224]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 8001228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800122a:	2380      	movs	r3, #128	; 0x80
 800122c:	025b      	lsls	r3, r3, #9
 800122e:	4013      	ands	r3, r2
 8001230:	d1f0      	bne.n	8001214 <HAL_RCC_OscConfig+0x588>
 8001232:	e000      	b.n	8001236 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001234:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123a:	2b00      	cmp	r3, #0
 800123c:	d100      	bne.n	8001240 <HAL_RCC_OscConfig+0x5b4>
 800123e:	e0a4      	b.n	800138a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001240:	4b31      	ldr	r3, [pc, #196]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	220c      	movs	r2, #12
 8001246:	4013      	ands	r3, r2
 8001248:	2b08      	cmp	r3, #8
 800124a:	d100      	bne.n	800124e <HAL_RCC_OscConfig+0x5c2>
 800124c:	e078      	b.n	8001340 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001252:	2b02      	cmp	r3, #2
 8001254:	d14c      	bne.n	80012f0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001256:	4b2c      	ldr	r3, [pc, #176]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	4b2b      	ldr	r3, [pc, #172]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 800125c:	492e      	ldr	r1, [pc, #184]	; (8001318 <HAL_RCC_OscConfig+0x68c>)
 800125e:	400a      	ands	r2, r1
 8001260:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001262:	f7ff fa9b 	bl	800079c <HAL_GetTick>
 8001266:	0003      	movs	r3, r0
 8001268:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800126c:	f7ff fa96 	bl	800079c <HAL_GetTick>
 8001270:	0002      	movs	r2, r0
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e086      	b.n	800138c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800127e:	4b22      	ldr	r3, [pc, #136]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	049b      	lsls	r3, r3, #18
 8001286:	4013      	ands	r3, r2
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800128a:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 800128c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128e:	220f      	movs	r2, #15
 8001290:	4393      	bics	r3, r2
 8001292:	0019      	movs	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001298:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 800129a:	430a      	orrs	r2, r1
 800129c:	62da      	str	r2, [r3, #44]	; 0x2c
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	4a1e      	ldr	r2, [pc, #120]	; (800131c <HAL_RCC_OscConfig+0x690>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	0019      	movs	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b0:	431a      	orrs	r2, r3
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 80012b4:	430a      	orrs	r2, r1
 80012b6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 80012be:	2180      	movs	r1, #128	; 0x80
 80012c0:	0449      	lsls	r1, r1, #17
 80012c2:	430a      	orrs	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c6:	f7ff fa69 	bl	800079c <HAL_GetTick>
 80012ca:	0003      	movs	r3, r0
 80012cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d0:	f7ff fa64 	bl	800079c <HAL_GetTick>
 80012d4:	0002      	movs	r2, r0
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e054      	b.n	800138c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	049b      	lsls	r3, r3, #18
 80012ea:	4013      	ands	r3, r2
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0x644>
 80012ee:	e04c      	b.n	800138a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <HAL_RCC_OscConfig+0x67c>)
 80012f6:	4908      	ldr	r1, [pc, #32]	; (8001318 <HAL_RCC_OscConfig+0x68c>)
 80012f8:	400a      	ands	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fa4e 	bl	800079c <HAL_GetTick>
 8001300:	0003      	movs	r3, r0
 8001302:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001304:	e015      	b.n	8001332 <HAL_RCC_OscConfig+0x6a6>
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	40021000 	.word	0x40021000
 800130c:	00001388 	.word	0x00001388
 8001310:	efffffff 	.word	0xefffffff
 8001314:	fffeffff 	.word	0xfffeffff
 8001318:	feffffff 	.word	0xfeffffff
 800131c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001320:	f7ff fa3c 	bl	800079c <HAL_GetTick>
 8001324:	0002      	movs	r2, r0
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e02c      	b.n	800138c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <HAL_RCC_OscConfig+0x708>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	049b      	lsls	r3, r3, #18
 800133a:	4013      	ands	r3, r2
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x694>
 800133e:	e024      	b.n	800138a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e01f      	b.n	800138c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <HAL_RCC_OscConfig+0x708>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <HAL_RCC_OscConfig+0x708>)
 8001354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001356:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	23c0      	movs	r3, #192	; 0xc0
 800135c:	025b      	lsls	r3, r3, #9
 800135e:	401a      	ands	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001364:	429a      	cmp	r2, r3
 8001366:	d10e      	bne.n	8001386 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	220f      	movs	r2, #15
 800136c:	401a      	ands	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001372:	429a      	cmp	r2, r3
 8001374:	d107      	bne.n	8001386 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	23f0      	movs	r3, #240	; 0xf0
 800137a:	039b      	lsls	r3, r3, #14
 800137c:	401a      	ands	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001382:	429a      	cmp	r2, r3
 8001384:	d001      	beq.n	800138a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	0018      	movs	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	b008      	add	sp, #32
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40021000 	.word	0x40021000

08001398 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e0bf      	b.n	800152c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013ac:	4b61      	ldr	r3, [pc, #388]	; (8001534 <HAL_RCC_ClockConfig+0x19c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2201      	movs	r2, #1
 80013b2:	4013      	ands	r3, r2
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d911      	bls.n	80013de <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ba:	4b5e      	ldr	r3, [pc, #376]	; (8001534 <HAL_RCC_ClockConfig+0x19c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2201      	movs	r2, #1
 80013c0:	4393      	bics	r3, r2
 80013c2:	0019      	movs	r1, r3
 80013c4:	4b5b      	ldr	r3, [pc, #364]	; (8001534 <HAL_RCC_ClockConfig+0x19c>)
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013cc:	4b59      	ldr	r3, [pc, #356]	; (8001534 <HAL_RCC_ClockConfig+0x19c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2201      	movs	r2, #1
 80013d2:	4013      	ands	r3, r2
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d001      	beq.n	80013de <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e0a6      	b.n	800152c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2202      	movs	r2, #2
 80013e4:	4013      	ands	r3, r2
 80013e6:	d015      	beq.n	8001414 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2204      	movs	r2, #4
 80013ee:	4013      	ands	r3, r2
 80013f0:	d006      	beq.n	8001400 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013f2:	4b51      	ldr	r3, [pc, #324]	; (8001538 <HAL_RCC_ClockConfig+0x1a0>)
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	4b50      	ldr	r3, [pc, #320]	; (8001538 <HAL_RCC_ClockConfig+0x1a0>)
 80013f8:	21e0      	movs	r1, #224	; 0xe0
 80013fa:	00c9      	lsls	r1, r1, #3
 80013fc:	430a      	orrs	r2, r1
 80013fe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001400:	4b4d      	ldr	r3, [pc, #308]	; (8001538 <HAL_RCC_ClockConfig+0x1a0>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	22f0      	movs	r2, #240	; 0xf0
 8001406:	4393      	bics	r3, r2
 8001408:	0019      	movs	r1, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	4b4a      	ldr	r3, [pc, #296]	; (8001538 <HAL_RCC_ClockConfig+0x1a0>)
 8001410:	430a      	orrs	r2, r1
 8001412:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2201      	movs	r2, #1
 800141a:	4013      	ands	r3, r2
 800141c:	d04c      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d107      	bne.n	8001436 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001426:	4b44      	ldr	r3, [pc, #272]	; (8001538 <HAL_RCC_ClockConfig+0x1a0>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	029b      	lsls	r3, r3, #10
 800142e:	4013      	ands	r3, r2
 8001430:	d120      	bne.n	8001474 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e07a      	b.n	800152c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d107      	bne.n	800144e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143e:	4b3e      	ldr	r3, [pc, #248]	; (8001538 <HAL_RCC_ClockConfig+0x1a0>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	2380      	movs	r3, #128	; 0x80
 8001444:	049b      	lsls	r3, r3, #18
 8001446:	4013      	ands	r3, r2
 8001448:	d114      	bne.n	8001474 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e06e      	b.n	800152c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b03      	cmp	r3, #3
 8001454:	d107      	bne.n	8001466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001456:	4b38      	ldr	r3, [pc, #224]	; (8001538 <HAL_RCC_ClockConfig+0x1a0>)
 8001458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	025b      	lsls	r3, r3, #9
 800145e:	4013      	ands	r3, r2
 8001460:	d108      	bne.n	8001474 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e062      	b.n	800152c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001466:	4b34      	ldr	r3, [pc, #208]	; (8001538 <HAL_RCC_ClockConfig+0x1a0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2202      	movs	r2, #2
 800146c:	4013      	ands	r3, r2
 800146e:	d101      	bne.n	8001474 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e05b      	b.n	800152c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001474:	4b30      	ldr	r3, [pc, #192]	; (8001538 <HAL_RCC_ClockConfig+0x1a0>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2203      	movs	r2, #3
 800147a:	4393      	bics	r3, r2
 800147c:	0019      	movs	r1, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <HAL_RCC_ClockConfig+0x1a0>)
 8001484:	430a      	orrs	r2, r1
 8001486:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001488:	f7ff f988 	bl	800079c <HAL_GetTick>
 800148c:	0003      	movs	r3, r0
 800148e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001490:	e009      	b.n	80014a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001492:	f7ff f983 	bl	800079c <HAL_GetTick>
 8001496:	0002      	movs	r2, r0
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	4a27      	ldr	r2, [pc, #156]	; (800153c <HAL_RCC_ClockConfig+0x1a4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e042      	b.n	800152c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a6:	4b24      	ldr	r3, [pc, #144]	; (8001538 <HAL_RCC_ClockConfig+0x1a0>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	220c      	movs	r2, #12
 80014ac:	401a      	ands	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d1ec      	bne.n	8001492 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014b8:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <HAL_RCC_ClockConfig+0x19c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2201      	movs	r2, #1
 80014be:	4013      	ands	r3, r2
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d211      	bcs.n	80014ea <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <HAL_RCC_ClockConfig+0x19c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2201      	movs	r2, #1
 80014cc:	4393      	bics	r3, r2
 80014ce:	0019      	movs	r1, r3
 80014d0:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_RCC_ClockConfig+0x19c>)
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <HAL_RCC_ClockConfig+0x19c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2201      	movs	r2, #1
 80014de:	4013      	ands	r3, r2
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d001      	beq.n	80014ea <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e020      	b.n	800152c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2204      	movs	r2, #4
 80014f0:	4013      	ands	r3, r2
 80014f2:	d009      	beq.n	8001508 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014f4:	4b10      	ldr	r3, [pc, #64]	; (8001538 <HAL_RCC_ClockConfig+0x1a0>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	4a11      	ldr	r2, [pc, #68]	; (8001540 <HAL_RCC_ClockConfig+0x1a8>)
 80014fa:	4013      	ands	r3, r2
 80014fc:	0019      	movs	r1, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68da      	ldr	r2, [r3, #12]
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <HAL_RCC_ClockConfig+0x1a0>)
 8001504:	430a      	orrs	r2, r1
 8001506:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001508:	f000 f820 	bl	800154c <HAL_RCC_GetSysClockFreq>
 800150c:	0001      	movs	r1, r0
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <HAL_RCC_ClockConfig+0x1a0>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	091b      	lsrs	r3, r3, #4
 8001514:	220f      	movs	r2, #15
 8001516:	4013      	ands	r3, r2
 8001518:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <HAL_RCC_ClockConfig+0x1ac>)
 800151a:	5cd3      	ldrb	r3, [r2, r3]
 800151c:	000a      	movs	r2, r1
 800151e:	40da      	lsrs	r2, r3
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_RCC_ClockConfig+0x1b0>)
 8001522:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001524:	2000      	movs	r0, #0
 8001526:	f7ff f8f3 	bl	8000710 <HAL_InitTick>
  
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	0018      	movs	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	b004      	add	sp, #16
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40022000 	.word	0x40022000
 8001538:	40021000 	.word	0x40021000
 800153c:	00001388 	.word	0x00001388
 8001540:	fffff8ff 	.word	0xfffff8ff
 8001544:	080023d0 	.word	0x080023d0
 8001548:	20000000 	.word	0x20000000

0800154c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b08f      	sub	sp, #60	; 0x3c
 8001550:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001552:	2314      	movs	r3, #20
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	4a38      	ldr	r2, [pc, #224]	; (8001638 <HAL_RCC_GetSysClockFreq+0xec>)
 8001558:	ca13      	ldmia	r2!, {r0, r1, r4}
 800155a:	c313      	stmia	r3!, {r0, r1, r4}
 800155c:	6812      	ldr	r2, [r2, #0]
 800155e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	4a36      	ldr	r2, [pc, #216]	; (800163c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001564:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001566:	c313      	stmia	r3!, {r0, r1, r4}
 8001568:	6812      	ldr	r2, [r2, #0]
 800156a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001570:	2300      	movs	r3, #0
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
 8001574:	2300      	movs	r3, #0
 8001576:	637b      	str	r3, [r7, #52]	; 0x34
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001580:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001588:	220c      	movs	r2, #12
 800158a:	4013      	ands	r3, r2
 800158c:	2b0c      	cmp	r3, #12
 800158e:	d047      	beq.n	8001620 <HAL_RCC_GetSysClockFreq+0xd4>
 8001590:	d849      	bhi.n	8001626 <HAL_RCC_GetSysClockFreq+0xda>
 8001592:	2b04      	cmp	r3, #4
 8001594:	d002      	beq.n	800159c <HAL_RCC_GetSysClockFreq+0x50>
 8001596:	2b08      	cmp	r3, #8
 8001598:	d003      	beq.n	80015a2 <HAL_RCC_GetSysClockFreq+0x56>
 800159a:	e044      	b.n	8001626 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800159c:	4b29      	ldr	r3, [pc, #164]	; (8001644 <HAL_RCC_GetSysClockFreq+0xf8>)
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015a0:	e044      	b.n	800162c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80015a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a4:	0c9b      	lsrs	r3, r3, #18
 80015a6:	220f      	movs	r2, #15
 80015a8:	4013      	ands	r3, r2
 80015aa:	2214      	movs	r2, #20
 80015ac:	18ba      	adds	r2, r7, r2
 80015ae:	5cd3      	ldrb	r3, [r2, r3]
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80015b2:	4b23      	ldr	r3, [pc, #140]	; (8001640 <HAL_RCC_GetSysClockFreq+0xf4>)
 80015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b6:	220f      	movs	r2, #15
 80015b8:	4013      	ands	r3, r2
 80015ba:	1d3a      	adds	r2, r7, #4
 80015bc:	5cd3      	ldrb	r3, [r2, r3]
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80015c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015c2:	23c0      	movs	r3, #192	; 0xc0
 80015c4:	025b      	lsls	r3, r3, #9
 80015c6:	401a      	ands	r2, r3
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	025b      	lsls	r3, r3, #9
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d109      	bne.n	80015e4 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015d2:	481c      	ldr	r0, [pc, #112]	; (8001644 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015d4:	f7fe fd98 	bl	8000108 <__udivsi3>
 80015d8:	0003      	movs	r3, r0
 80015da:	001a      	movs	r2, r3
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	4353      	muls	r3, r2
 80015e0:	637b      	str	r3, [r7, #52]	; 0x34
 80015e2:	e01a      	b.n	800161a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80015e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015e6:	23c0      	movs	r3, #192	; 0xc0
 80015e8:	025b      	lsls	r3, r3, #9
 80015ea:	401a      	ands	r2, r3
 80015ec:	23c0      	movs	r3, #192	; 0xc0
 80015ee:	025b      	lsls	r3, r3, #9
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d109      	bne.n	8001608 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015f6:	4814      	ldr	r0, [pc, #80]	; (8001648 <HAL_RCC_GetSysClockFreq+0xfc>)
 80015f8:	f7fe fd86 	bl	8000108 <__udivsi3>
 80015fc:	0003      	movs	r3, r0
 80015fe:	001a      	movs	r2, r3
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	4353      	muls	r3, r2
 8001604:	637b      	str	r3, [r7, #52]	; 0x34
 8001606:	e008      	b.n	800161a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001608:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800160a:	480e      	ldr	r0, [pc, #56]	; (8001644 <HAL_RCC_GetSysClockFreq+0xf8>)
 800160c:	f7fe fd7c 	bl	8000108 <__udivsi3>
 8001610:	0003      	movs	r3, r0
 8001612:	001a      	movs	r2, r3
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	4353      	muls	r3, r2
 8001618:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800161a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800161c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800161e:	e005      	b.n	800162c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001622:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001624:	e002      	b.n	800162c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001626:	4b07      	ldr	r3, [pc, #28]	; (8001644 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001628:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800162a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800162c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800162e:	0018      	movs	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	b00f      	add	sp, #60	; 0x3c
 8001634:	bd90      	pop	{r4, r7, pc}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	080023b0 	.word	0x080023b0
 800163c:	080023c0 	.word	0x080023c0
 8001640:	40021000 	.word	0x40021000
 8001644:	007a1200 	.word	0x007a1200
 8001648:	02dc6c00 	.word	0x02dc6c00

0800164c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001650:	4b02      	ldr	r3, [pc, #8]	; (800165c <HAL_RCC_GetHCLKFreq+0x10>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	0018      	movs	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	20000000 	.word	0x20000000

08001660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001664:	f7ff fff2 	bl	800164c <HAL_RCC_GetHCLKFreq>
 8001668:	0001      	movs	r1, r0
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_RCC_GetPCLK1Freq+0x24>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	0a1b      	lsrs	r3, r3, #8
 8001670:	2207      	movs	r2, #7
 8001672:	4013      	ands	r3, r2
 8001674:	4a04      	ldr	r2, [pc, #16]	; (8001688 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001676:	5cd3      	ldrb	r3, [r2, r3]
 8001678:	40d9      	lsrs	r1, r3
 800167a:	000b      	movs	r3, r1
}    
 800167c:	0018      	movs	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	40021000 	.word	0x40021000
 8001688:	080023e0 	.word	0x080023e0

0800168c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	025b      	lsls	r3, r3, #9
 80016a4:	4013      	ands	r3, r2
 80016a6:	d100      	bne.n	80016aa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80016a8:	e08e      	b.n	80017c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80016aa:	2017      	movs	r0, #23
 80016ac:	183b      	adds	r3, r7, r0
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016b2:	4b6e      	ldr	r3, [pc, #440]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016b4:	69da      	ldr	r2, [r3, #28]
 80016b6:	2380      	movs	r3, #128	; 0x80
 80016b8:	055b      	lsls	r3, r3, #21
 80016ba:	4013      	ands	r3, r2
 80016bc:	d110      	bne.n	80016e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80016be:	4b6b      	ldr	r3, [pc, #428]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016c0:	69da      	ldr	r2, [r3, #28]
 80016c2:	4b6a      	ldr	r3, [pc, #424]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016c4:	2180      	movs	r1, #128	; 0x80
 80016c6:	0549      	lsls	r1, r1, #21
 80016c8:	430a      	orrs	r2, r1
 80016ca:	61da      	str	r2, [r3, #28]
 80016cc:	4b67      	ldr	r3, [pc, #412]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016ce:	69da      	ldr	r2, [r3, #28]
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	055b      	lsls	r3, r3, #21
 80016d4:	4013      	ands	r3, r2
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016da:	183b      	adds	r3, r7, r0
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e0:	4b63      	ldr	r3, [pc, #396]	; (8001870 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4013      	ands	r3, r2
 80016ea:	d11a      	bne.n	8001722 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ec:	4b60      	ldr	r3, [pc, #384]	; (8001870 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b5f      	ldr	r3, [pc, #380]	; (8001870 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80016f2:	2180      	movs	r1, #128	; 0x80
 80016f4:	0049      	lsls	r1, r1, #1
 80016f6:	430a      	orrs	r2, r1
 80016f8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016fa:	f7ff f84f 	bl	800079c <HAL_GetTick>
 80016fe:	0003      	movs	r3, r0
 8001700:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001702:	e008      	b.n	8001716 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001704:	f7ff f84a 	bl	800079c <HAL_GetTick>
 8001708:	0002      	movs	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	; 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e0a6      	b.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001716:	4b56      	ldr	r3, [pc, #344]	; (8001870 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	2380      	movs	r3, #128	; 0x80
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4013      	ands	r3, r2
 8001720:	d0f0      	beq.n	8001704 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001722:	4b52      	ldr	r3, [pc, #328]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001724:	6a1a      	ldr	r2, [r3, #32]
 8001726:	23c0      	movs	r3, #192	; 0xc0
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4013      	ands	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d034      	beq.n	800179e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	23c0      	movs	r3, #192	; 0xc0
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4013      	ands	r3, r2
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	429a      	cmp	r2, r3
 8001742:	d02c      	beq.n	800179e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001744:	4b49      	ldr	r3, [pc, #292]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	4a4a      	ldr	r2, [pc, #296]	; (8001874 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800174a:	4013      	ands	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800174e:	4b47      	ldr	r3, [pc, #284]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001750:	6a1a      	ldr	r2, [r3, #32]
 8001752:	4b46      	ldr	r3, [pc, #280]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001754:	2180      	movs	r1, #128	; 0x80
 8001756:	0249      	lsls	r1, r1, #9
 8001758:	430a      	orrs	r2, r1
 800175a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800175c:	4b43      	ldr	r3, [pc, #268]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800175e:	6a1a      	ldr	r2, [r3, #32]
 8001760:	4b42      	ldr	r3, [pc, #264]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001762:	4945      	ldr	r1, [pc, #276]	; (8001878 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001764:	400a      	ands	r2, r1
 8001766:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001768:	4b40      	ldr	r3, [pc, #256]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2201      	movs	r2, #1
 8001772:	4013      	ands	r3, r2
 8001774:	d013      	beq.n	800179e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001776:	f7ff f811 	bl	800079c <HAL_GetTick>
 800177a:	0003      	movs	r3, r0
 800177c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177e:	e009      	b.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001780:	f7ff f80c 	bl	800079c <HAL_GetTick>
 8001784:	0002      	movs	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	4a3c      	ldr	r2, [pc, #240]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d901      	bls.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e067      	b.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001794:	4b35      	ldr	r3, [pc, #212]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	2202      	movs	r2, #2
 800179a:	4013      	ands	r3, r2
 800179c:	d0f0      	beq.n	8001780 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800179e:	4b33      	ldr	r3, [pc, #204]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	4a34      	ldr	r2, [pc, #208]	; (8001874 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	0019      	movs	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	4b2f      	ldr	r3, [pc, #188]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017ae:	430a      	orrs	r2, r1
 80017b0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017b2:	2317      	movs	r3, #23
 80017b4:	18fb      	adds	r3, r7, r3
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d105      	bne.n	80017c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017bc:	4b2b      	ldr	r3, [pc, #172]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017be:	69da      	ldr	r2, [r3, #28]
 80017c0:	4b2a      	ldr	r3, [pc, #168]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017c2:	492f      	ldr	r1, [pc, #188]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80017c4:	400a      	ands	r2, r1
 80017c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2201      	movs	r2, #1
 80017ce:	4013      	ands	r3, r2
 80017d0:	d009      	beq.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017d2:	4b26      	ldr	r3, [pc, #152]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	2203      	movs	r2, #3
 80017d8:	4393      	bics	r3, r2
 80017da:	0019      	movs	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	4b22      	ldr	r3, [pc, #136]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017e2:	430a      	orrs	r2, r1
 80017e4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2202      	movs	r2, #2
 80017ec:	4013      	ands	r3, r2
 80017ee:	d009      	beq.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80017f0:	4b1e      	ldr	r3, [pc, #120]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f4:	4a23      	ldr	r2, [pc, #140]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	0019      	movs	r1, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001800:	430a      	orrs	r2, r1
 8001802:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2220      	movs	r2, #32
 800180a:	4013      	ands	r3, r2
 800180c:	d009      	beq.n	8001822 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	2210      	movs	r2, #16
 8001814:	4393      	bics	r3, r2
 8001816:	0019      	movs	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691a      	ldr	r2, [r3, #16]
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800181e:	430a      	orrs	r2, r1
 8001820:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	029b      	lsls	r3, r3, #10
 800182a:	4013      	ands	r3, r2
 800182c:	d009      	beq.n	8001842 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	4393      	bics	r3, r2
 8001836:	0019      	movs	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	699a      	ldr	r2, [r3, #24]
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800183e:	430a      	orrs	r2, r1
 8001840:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	2380      	movs	r3, #128	; 0x80
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4013      	ands	r3, r2
 800184c:	d009      	beq.n	8001862 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800184e:	4b07      	ldr	r3, [pc, #28]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	2240      	movs	r2, #64	; 0x40
 8001854:	4393      	bics	r3, r2
 8001856:	0019      	movs	r1, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	695a      	ldr	r2, [r3, #20]
 800185c:	4b03      	ldr	r3, [pc, #12]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800185e:	430a      	orrs	r2, r1
 8001860:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	0018      	movs	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	b006      	add	sp, #24
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40021000 	.word	0x40021000
 8001870:	40007000 	.word	0x40007000
 8001874:	fffffcff 	.word	0xfffffcff
 8001878:	fffeffff 	.word	0xfffeffff
 800187c:	00001388 	.word	0x00001388
 8001880:	efffffff 	.word	0xefffffff
 8001884:	fffcffff 	.word	0xfffcffff

08001888 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e044      	b.n	8001924 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d107      	bne.n	80018b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2274      	movs	r2, #116	; 0x74
 80018a6:	2100      	movs	r1, #0
 80018a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	0018      	movs	r0, r3
 80018ae:	f7fe fe4d 	bl	800054c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2224      	movs	r2, #36	; 0x24
 80018b6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2101      	movs	r1, #1
 80018c4:	438a      	bics	r2, r1
 80018c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	0018      	movs	r0, r3
 80018cc:	f000 f9ca 	bl	8001c64 <UART_SetConfig>
 80018d0:	0003      	movs	r3, r0
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e024      	b.n	8001924 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	0018      	movs	r0, r3
 80018e6:	f000 fb45 	bl	8001f74 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	490d      	ldr	r1, [pc, #52]	; (800192c <HAL_UART_Init+0xa4>)
 80018f6:	400a      	ands	r2, r1
 80018f8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	212a      	movs	r1, #42	; 0x2a
 8001906:	438a      	bics	r2, r1
 8001908:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2101      	movs	r1, #1
 8001916:	430a      	orrs	r2, r1
 8001918:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	0018      	movs	r0, r3
 800191e:	f000 fbdd 	bl	80020dc <UART_CheckIdleState>
 8001922:	0003      	movs	r3, r0
}
 8001924:	0018      	movs	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	b002      	add	sp, #8
 800192a:	bd80      	pop	{r7, pc}
 800192c:	ffffb7ff 	.word	0xffffb7ff

08001930 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	; 0x28
 8001934:	af02      	add	r7, sp, #8
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	1dbb      	adds	r3, r7, #6
 800193e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001944:	2b20      	cmp	r3, #32
 8001946:	d000      	beq.n	800194a <HAL_UART_Transmit+0x1a>
 8001948:	e096      	b.n	8001a78 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_UART_Transmit+0x28>
 8001950:	1dbb      	adds	r3, r7, #6
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e08e      	b.n	8001a7a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	015b      	lsls	r3, r3, #5
 8001964:	429a      	cmp	r2, r3
 8001966:	d109      	bne.n	800197c <HAL_UART_Transmit+0x4c>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d105      	bne.n	800197c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2201      	movs	r2, #1
 8001974:	4013      	ands	r3, r2
 8001976:	d001      	beq.n	800197c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e07e      	b.n	8001a7a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2274      	movs	r2, #116	; 0x74
 8001980:	5c9b      	ldrb	r3, [r3, r2]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d101      	bne.n	800198a <HAL_UART_Transmit+0x5a>
 8001986:	2302      	movs	r3, #2
 8001988:	e077      	b.n	8001a7a <HAL_UART_Transmit+0x14a>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2274      	movs	r2, #116	; 0x74
 800198e:	2101      	movs	r1, #1
 8001990:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	2100      	movs	r1, #0
 8001998:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2221      	movs	r2, #33	; 0x21
 800199e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80019a0:	f7fe fefc 	bl	800079c <HAL_GetTick>
 80019a4:	0003      	movs	r3, r0
 80019a6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	1dba      	adds	r2, r7, #6
 80019ac:	2150      	movs	r1, #80	; 0x50
 80019ae:	8812      	ldrh	r2, [r2, #0]
 80019b0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1dba      	adds	r2, r7, #6
 80019b6:	2152      	movs	r1, #82	; 0x52
 80019b8:	8812      	ldrh	r2, [r2, #0]
 80019ba:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	015b      	lsls	r3, r3, #5
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d108      	bne.n	80019da <HAL_UART_Transmit+0xaa>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d104      	bne.n	80019da <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	61bb      	str	r3, [r7, #24]
 80019d8:	e003      	b.n	80019e2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2274      	movs	r2, #116	; 0x74
 80019e6:	2100      	movs	r1, #0
 80019e8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80019ea:	e02d      	b.n	8001a48 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	0013      	movs	r3, r2
 80019f6:	2200      	movs	r2, #0
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	f000 fbb7 	bl	800216c <UART_WaitOnFlagUntilTimeout>
 80019fe:	1e03      	subs	r3, r0, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e039      	b.n	8001a7a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10b      	bne.n	8001a24 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	881a      	ldrh	r2, [r3, #0]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	05d2      	lsls	r2, r2, #23
 8001a16:	0dd2      	lsrs	r2, r2, #23
 8001a18:	b292      	uxth	r2, r2
 8001a1a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	3302      	adds	r3, #2
 8001a20:	61bb      	str	r3, [r7, #24]
 8001a22:	e008      	b.n	8001a36 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	781a      	ldrb	r2, [r3, #0]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	b292      	uxth	r2, r2
 8001a2e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	3301      	adds	r3, #1
 8001a34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2252      	movs	r2, #82	; 0x52
 8001a3a:	5a9b      	ldrh	r3, [r3, r2]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	b299      	uxth	r1, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2252      	movs	r2, #82	; 0x52
 8001a46:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2252      	movs	r2, #82	; 0x52
 8001a4c:	5a9b      	ldrh	r3, [r3, r2]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1cb      	bne.n	80019ec <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	0013      	movs	r3, r2
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2140      	movs	r1, #64	; 0x40
 8001a62:	f000 fb83 	bl	800216c <UART_WaitOnFlagUntilTimeout>
 8001a66:	1e03      	subs	r3, r0, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e005      	b.n	8001a7a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2220      	movs	r2, #32
 8001a72:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	e000      	b.n	8001a7a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001a78:	2302      	movs	r3, #2
  }
}
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b008      	add	sp, #32
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	; 0x28
 8001a88:	af02      	add	r7, sp, #8
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	1dbb      	adds	r3, r7, #6
 8001a92:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a98:	2b20      	cmp	r3, #32
 8001a9a:	d000      	beq.n	8001a9e <HAL_UART_Receive+0x1a>
 8001a9c:	e0da      	b.n	8001c54 <HAL_UART_Receive+0x1d0>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_UART_Receive+0x28>
 8001aa4:	1dbb      	adds	r3, r7, #6
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0d2      	b.n	8001c56 <HAL_UART_Receive+0x1d2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	015b      	lsls	r3, r3, #5
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d109      	bne.n	8001ad0 <HAL_UART_Receive+0x4c>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d105      	bne.n	8001ad0 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d001      	beq.n	8001ad0 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0c2      	b.n	8001c56 <HAL_UART_Receive+0x1d2>
      }
    }

    __HAL_LOCK(huart);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2274      	movs	r2, #116	; 0x74
 8001ad4:	5c9b      	ldrb	r3, [r3, r2]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d101      	bne.n	8001ade <HAL_UART_Receive+0x5a>
 8001ada:	2302      	movs	r3, #2
 8001adc:	e0bb      	b.n	8001c56 <HAL_UART_Receive+0x1d2>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2274      	movs	r2, #116	; 0x74
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2280      	movs	r2, #128	; 0x80
 8001aea:	2100      	movs	r1, #0
 8001aec:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2222      	movs	r2, #34	; 0x22
 8001af2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001afa:	f7fe fe4f 	bl	800079c <HAL_GetTick>
 8001afe:	0003      	movs	r3, r0
 8001b00:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	1dba      	adds	r2, r7, #6
 8001b06:	2158      	movs	r1, #88	; 0x58
 8001b08:	8812      	ldrh	r2, [r2, #0]
 8001b0a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1dba      	adds	r2, r7, #6
 8001b10:	215a      	movs	r1, #90	; 0x5a
 8001b12:	8812      	ldrh	r2, [r2, #0]
 8001b14:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	015b      	lsls	r3, r3, #5
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d10d      	bne.n	8001b3e <HAL_UART_Receive+0xba>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d104      	bne.n	8001b34 <HAL_UART_Receive+0xb0>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	225c      	movs	r2, #92	; 0x5c
 8001b2e:	494c      	ldr	r1, [pc, #304]	; (8001c60 <HAL_UART_Receive+0x1dc>)
 8001b30:	5299      	strh	r1, [r3, r2]
 8001b32:	e02e      	b.n	8001b92 <HAL_UART_Receive+0x10e>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	225c      	movs	r2, #92	; 0x5c
 8001b38:	21ff      	movs	r1, #255	; 0xff
 8001b3a:	5299      	strh	r1, [r3, r2]
 8001b3c:	e029      	b.n	8001b92 <HAL_UART_Receive+0x10e>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10d      	bne.n	8001b62 <HAL_UART_Receive+0xde>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d104      	bne.n	8001b58 <HAL_UART_Receive+0xd4>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	225c      	movs	r2, #92	; 0x5c
 8001b52:	21ff      	movs	r1, #255	; 0xff
 8001b54:	5299      	strh	r1, [r3, r2]
 8001b56:	e01c      	b.n	8001b92 <HAL_UART_Receive+0x10e>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	225c      	movs	r2, #92	; 0x5c
 8001b5c:	217f      	movs	r1, #127	; 0x7f
 8001b5e:	5299      	strh	r1, [r3, r2]
 8001b60:	e017      	b.n	8001b92 <HAL_UART_Receive+0x10e>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	2380      	movs	r3, #128	; 0x80
 8001b68:	055b      	lsls	r3, r3, #21
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d10d      	bne.n	8001b8a <HAL_UART_Receive+0x106>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d104      	bne.n	8001b80 <HAL_UART_Receive+0xfc>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	225c      	movs	r2, #92	; 0x5c
 8001b7a:	217f      	movs	r1, #127	; 0x7f
 8001b7c:	5299      	strh	r1, [r3, r2]
 8001b7e:	e008      	b.n	8001b92 <HAL_UART_Receive+0x10e>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	225c      	movs	r2, #92	; 0x5c
 8001b84:	213f      	movs	r1, #63	; 0x3f
 8001b86:	5299      	strh	r1, [r3, r2]
 8001b88:	e003      	b.n	8001b92 <HAL_UART_Receive+0x10e>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	225c      	movs	r2, #92	; 0x5c
 8001b8e:	2100      	movs	r1, #0
 8001b90:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8001b92:	2312      	movs	r3, #18
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	215c      	movs	r1, #92	; 0x5c
 8001b9a:	5a52      	ldrh	r2, [r2, r1]
 8001b9c:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	015b      	lsls	r3, r3, #5
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d108      	bne.n	8001bbc <HAL_UART_Receive+0x138>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d104      	bne.n	8001bbc <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	e003      	b.n	8001bc4 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2274      	movs	r2, #116	; 0x74
 8001bc8:	2100      	movs	r1, #0
 8001bca:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8001bcc:	e037      	b.n	8001c3e <HAL_UART_Receive+0x1ba>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	0013      	movs	r3, r2
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2120      	movs	r1, #32
 8001bdc:	f000 fac6 	bl	800216c <UART_WaitOnFlagUntilTimeout>
 8001be0:	1e03      	subs	r3, r0, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e036      	b.n	8001c56 <HAL_UART_Receive+0x1d2>
      }
      if (pdata8bits == NULL)
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10e      	bne.n	8001c0c <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	2212      	movs	r2, #18
 8001bf8:	18ba      	adds	r2, r7, r2
 8001bfa:	8812      	ldrh	r2, [r2, #0]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	3302      	adds	r3, #2
 8001c08:	61bb      	str	r3, [r7, #24]
 8001c0a:	e00f      	b.n	8001c2c <HAL_UART_Receive+0x1a8>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2212      	movs	r2, #18
 8001c18:	18ba      	adds	r2, r7, r2
 8001c1a:	8812      	ldrh	r2, [r2, #0]
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	4013      	ands	r3, r2
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	225a      	movs	r2, #90	; 0x5a
 8001c30:	5a9b      	ldrh	r3, [r3, r2]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	3b01      	subs	r3, #1
 8001c36:	b299      	uxth	r1, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	225a      	movs	r2, #90	; 0x5a
 8001c3c:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	225a      	movs	r2, #90	; 0x5a
 8001c42:	5a9b      	ldrh	r3, [r3, r2]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1c1      	bne.n	8001bce <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	e000      	b.n	8001c56 <HAL_UART_Receive+0x1d2>
  }
  else
  {
    return HAL_BUSY;
 8001c54:	2302      	movs	r3, #2
  }
}
 8001c56:	0018      	movs	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b008      	add	sp, #32
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	000001ff 	.word	0x000001ff

08001c64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c6c:	231e      	movs	r3, #30
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4aaf      	ldr	r2, [pc, #700]	; (8001f50 <UART_SetConfig+0x2ec>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	0019      	movs	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	4aaa      	ldr	r2, [pc, #680]	; (8001f54 <UART_SetConfig+0x2f0>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	0019      	movs	r1, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	4aa1      	ldr	r2, [pc, #644]	; (8001f58 <UART_SetConfig+0x2f4>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	0019      	movs	r1, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a9d      	ldr	r2, [pc, #628]	; (8001f5c <UART_SetConfig+0x2f8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d127      	bne.n	8001d3a <UART_SetConfig+0xd6>
 8001cea:	4b9d      	ldr	r3, [pc, #628]	; (8001f60 <UART_SetConfig+0x2fc>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	2203      	movs	r2, #3
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d00d      	beq.n	8001d12 <UART_SetConfig+0xae>
 8001cf6:	d81b      	bhi.n	8001d30 <UART_SetConfig+0xcc>
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d014      	beq.n	8001d26 <UART_SetConfig+0xc2>
 8001cfc:	d818      	bhi.n	8001d30 <UART_SetConfig+0xcc>
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d002      	beq.n	8001d08 <UART_SetConfig+0xa4>
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d00a      	beq.n	8001d1c <UART_SetConfig+0xb8>
 8001d06:	e013      	b.n	8001d30 <UART_SetConfig+0xcc>
 8001d08:	231f      	movs	r3, #31
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
 8001d10:	e065      	b.n	8001dde <UART_SetConfig+0x17a>
 8001d12:	231f      	movs	r3, #31
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	2202      	movs	r2, #2
 8001d18:	701a      	strb	r2, [r3, #0]
 8001d1a:	e060      	b.n	8001dde <UART_SetConfig+0x17a>
 8001d1c:	231f      	movs	r3, #31
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	2204      	movs	r2, #4
 8001d22:	701a      	strb	r2, [r3, #0]
 8001d24:	e05b      	b.n	8001dde <UART_SetConfig+0x17a>
 8001d26:	231f      	movs	r3, #31
 8001d28:	18fb      	adds	r3, r7, r3
 8001d2a:	2208      	movs	r2, #8
 8001d2c:	701a      	strb	r2, [r3, #0]
 8001d2e:	e056      	b.n	8001dde <UART_SetConfig+0x17a>
 8001d30:	231f      	movs	r3, #31
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	2210      	movs	r2, #16
 8001d36:	701a      	strb	r2, [r3, #0]
 8001d38:	e051      	b.n	8001dde <UART_SetConfig+0x17a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a89      	ldr	r2, [pc, #548]	; (8001f64 <UART_SetConfig+0x300>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d134      	bne.n	8001dae <UART_SetConfig+0x14a>
 8001d44:	4b86      	ldr	r3, [pc, #536]	; (8001f60 <UART_SetConfig+0x2fc>)
 8001d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d48:	23c0      	movs	r3, #192	; 0xc0
 8001d4a:	029b      	lsls	r3, r3, #10
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	22c0      	movs	r2, #192	; 0xc0
 8001d50:	0292      	lsls	r2, r2, #10
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d017      	beq.n	8001d86 <UART_SetConfig+0x122>
 8001d56:	22c0      	movs	r2, #192	; 0xc0
 8001d58:	0292      	lsls	r2, r2, #10
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d822      	bhi.n	8001da4 <UART_SetConfig+0x140>
 8001d5e:	2280      	movs	r2, #128	; 0x80
 8001d60:	0292      	lsls	r2, r2, #10
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d019      	beq.n	8001d9a <UART_SetConfig+0x136>
 8001d66:	2280      	movs	r2, #128	; 0x80
 8001d68:	0292      	lsls	r2, r2, #10
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d81a      	bhi.n	8001da4 <UART_SetConfig+0x140>
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d004      	beq.n	8001d7c <UART_SetConfig+0x118>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0252      	lsls	r2, r2, #9
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d00a      	beq.n	8001d90 <UART_SetConfig+0x12c>
 8001d7a:	e013      	b.n	8001da4 <UART_SetConfig+0x140>
 8001d7c:	231f      	movs	r3, #31
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	e02b      	b.n	8001dde <UART_SetConfig+0x17a>
 8001d86:	231f      	movs	r3, #31
 8001d88:	18fb      	adds	r3, r7, r3
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	701a      	strb	r2, [r3, #0]
 8001d8e:	e026      	b.n	8001dde <UART_SetConfig+0x17a>
 8001d90:	231f      	movs	r3, #31
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	2204      	movs	r2, #4
 8001d96:	701a      	strb	r2, [r3, #0]
 8001d98:	e021      	b.n	8001dde <UART_SetConfig+0x17a>
 8001d9a:	231f      	movs	r3, #31
 8001d9c:	18fb      	adds	r3, r7, r3
 8001d9e:	2208      	movs	r2, #8
 8001da0:	701a      	strb	r2, [r3, #0]
 8001da2:	e01c      	b.n	8001dde <UART_SetConfig+0x17a>
 8001da4:	231f      	movs	r3, #31
 8001da6:	18fb      	adds	r3, r7, r3
 8001da8:	2210      	movs	r2, #16
 8001daa:	701a      	strb	r2, [r3, #0]
 8001dac:	e017      	b.n	8001dde <UART_SetConfig+0x17a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a6d      	ldr	r2, [pc, #436]	; (8001f68 <UART_SetConfig+0x304>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d104      	bne.n	8001dc2 <UART_SetConfig+0x15e>
 8001db8:	231f      	movs	r3, #31
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
 8001dc0:	e00d      	b.n	8001dde <UART_SetConfig+0x17a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a69      	ldr	r2, [pc, #420]	; (8001f6c <UART_SetConfig+0x308>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d104      	bne.n	8001dd6 <UART_SetConfig+0x172>
 8001dcc:	231f      	movs	r3, #31
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
 8001dd4:	e003      	b.n	8001dde <UART_SetConfig+0x17a>
 8001dd6:	231f      	movs	r3, #31
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	2210      	movs	r2, #16
 8001ddc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69da      	ldr	r2, [r3, #28]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	021b      	lsls	r3, r3, #8
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d15d      	bne.n	8001ea6 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8001dea:	231f      	movs	r3, #31
 8001dec:	18fb      	adds	r3, r7, r3
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d015      	beq.n	8001e20 <UART_SetConfig+0x1bc>
 8001df4:	dc18      	bgt.n	8001e28 <UART_SetConfig+0x1c4>
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d00d      	beq.n	8001e16 <UART_SetConfig+0x1b2>
 8001dfa:	dc15      	bgt.n	8001e28 <UART_SetConfig+0x1c4>
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d002      	beq.n	8001e06 <UART_SetConfig+0x1a2>
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d005      	beq.n	8001e10 <UART_SetConfig+0x1ac>
 8001e04:	e010      	b.n	8001e28 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e06:	f7ff fc2b 	bl	8001660 <HAL_RCC_GetPCLK1Freq>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	61bb      	str	r3, [r7, #24]
        break;
 8001e0e:	e012      	b.n	8001e36 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001e10:	4b57      	ldr	r3, [pc, #348]	; (8001f70 <UART_SetConfig+0x30c>)
 8001e12:	61bb      	str	r3, [r7, #24]
        break;
 8001e14:	e00f      	b.n	8001e36 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e16:	f7ff fb99 	bl	800154c <HAL_RCC_GetSysClockFreq>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	61bb      	str	r3, [r7, #24]
        break;
 8001e1e:	e00a      	b.n	8001e36 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	61bb      	str	r3, [r7, #24]
        break;
 8001e26:	e006      	b.n	8001e36 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001e2c:	231e      	movs	r3, #30
 8001e2e:	18fb      	adds	r3, r7, r3
 8001e30:	2201      	movs	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]
        break;
 8001e34:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d100      	bne.n	8001e3e <UART_SetConfig+0x1da>
 8001e3c:	e07b      	b.n	8001f36 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	005a      	lsls	r2, r3, #1
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	085b      	lsrs	r3, r3, #1
 8001e48:	18d2      	adds	r2, r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	0019      	movs	r1, r3
 8001e50:	0010      	movs	r0, r2
 8001e52:	f7fe f959 	bl	8000108 <__udivsi3>
 8001e56:	0003      	movs	r3, r0
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	2b0f      	cmp	r3, #15
 8001e60:	d91c      	bls.n	8001e9c <UART_SetConfig+0x238>
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	025b      	lsls	r3, r3, #9
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d217      	bcs.n	8001e9c <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	200e      	movs	r0, #14
 8001e72:	183b      	adds	r3, r7, r0
 8001e74:	210f      	movs	r1, #15
 8001e76:	438a      	bics	r2, r1
 8001e78:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	085b      	lsrs	r3, r3, #1
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	2207      	movs	r2, #7
 8001e82:	4013      	ands	r3, r2
 8001e84:	b299      	uxth	r1, r3
 8001e86:	183b      	adds	r3, r7, r0
 8001e88:	183a      	adds	r2, r7, r0
 8001e8a:	8812      	ldrh	r2, [r2, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	183a      	adds	r2, r7, r0
 8001e96:	8812      	ldrh	r2, [r2, #0]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	e04c      	b.n	8001f36 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8001e9c:	231e      	movs	r3, #30
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
 8001ea4:	e047      	b.n	8001f36 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001ea6:	231f      	movs	r3, #31
 8001ea8:	18fb      	adds	r3, r7, r3
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d015      	beq.n	8001edc <UART_SetConfig+0x278>
 8001eb0:	dc18      	bgt.n	8001ee4 <UART_SetConfig+0x280>
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d00d      	beq.n	8001ed2 <UART_SetConfig+0x26e>
 8001eb6:	dc15      	bgt.n	8001ee4 <UART_SetConfig+0x280>
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d002      	beq.n	8001ec2 <UART_SetConfig+0x25e>
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d005      	beq.n	8001ecc <UART_SetConfig+0x268>
 8001ec0:	e010      	b.n	8001ee4 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001ec2:	f7ff fbcd 	bl	8001660 <HAL_RCC_GetPCLK1Freq>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	61bb      	str	r3, [r7, #24]
        break;
 8001eca:	e012      	b.n	8001ef2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001ecc:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <UART_SetConfig+0x30c>)
 8001ece:	61bb      	str	r3, [r7, #24]
        break;
 8001ed0:	e00f      	b.n	8001ef2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ed2:	f7ff fb3b 	bl	800154c <HAL_RCC_GetSysClockFreq>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	61bb      	str	r3, [r7, #24]
        break;
 8001eda:	e00a      	b.n	8001ef2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	61bb      	str	r3, [r7, #24]
        break;
 8001ee2:	e006      	b.n	8001ef2 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001ee8:	231e      	movs	r3, #30
 8001eea:	18fb      	adds	r3, r7, r3
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
        break;
 8001ef0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d01e      	beq.n	8001f36 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	085a      	lsrs	r2, r3, #1
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	18d2      	adds	r2, r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	0019      	movs	r1, r3
 8001f08:	0010      	movs	r0, r2
 8001f0a:	f7fe f8fd 	bl	8000108 <__udivsi3>
 8001f0e:	0003      	movs	r3, r0
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	2b0f      	cmp	r3, #15
 8001f18:	d909      	bls.n	8001f2e <UART_SetConfig+0x2ca>
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	025b      	lsls	r3, r3, #9
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d204      	bcs.n	8001f2e <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	60da      	str	r2, [r3, #12]
 8001f2c:	e003      	b.n	8001f36 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8001f2e:	231e      	movs	r3, #30
 8001f30:	18fb      	adds	r3, r7, r3
 8001f32:	2201      	movs	r2, #1
 8001f34:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001f42:	231e      	movs	r3, #30
 8001f44:	18fb      	adds	r3, r7, r3
 8001f46:	781b      	ldrb	r3, [r3, #0]
}
 8001f48:	0018      	movs	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	b008      	add	sp, #32
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	efff69f3 	.word	0xefff69f3
 8001f54:	ffffcfff 	.word	0xffffcfff
 8001f58:	fffff4ff 	.word	0xfffff4ff
 8001f5c:	40013800 	.word	0x40013800
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40004400 	.word	0x40004400
 8001f68:	40004800 	.word	0x40004800
 8001f6c:	40004c00 	.word	0x40004c00
 8001f70:	007a1200 	.word	0x007a1200

08001f74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	2201      	movs	r2, #1
 8001f82:	4013      	ands	r3, r2
 8001f84:	d00b      	beq.n	8001f9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	4a4a      	ldr	r2, [pc, #296]	; (80020b8 <UART_AdvFeatureConfig+0x144>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	0019      	movs	r1, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d00b      	beq.n	8001fc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4a43      	ldr	r2, [pc, #268]	; (80020bc <UART_AdvFeatureConfig+0x148>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d00b      	beq.n	8001fe2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4a3b      	ldr	r2, [pc, #236]	; (80020c0 <UART_AdvFeatureConfig+0x14c>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	0019      	movs	r1, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	2208      	movs	r2, #8
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d00b      	beq.n	8002004 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	4a34      	ldr	r2, [pc, #208]	; (80020c4 <UART_AdvFeatureConfig+0x150>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	2210      	movs	r2, #16
 800200a:	4013      	ands	r3, r2
 800200c:	d00b      	beq.n	8002026 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	4a2c      	ldr	r2, [pc, #176]	; (80020c8 <UART_AdvFeatureConfig+0x154>)
 8002016:	4013      	ands	r3, r2
 8002018:	0019      	movs	r1, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	2220      	movs	r2, #32
 800202c:	4013      	ands	r3, r2
 800202e:	d00b      	beq.n	8002048 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	4a25      	ldr	r2, [pc, #148]	; (80020cc <UART_AdvFeatureConfig+0x158>)
 8002038:	4013      	ands	r3, r2
 800203a:	0019      	movs	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	2240      	movs	r2, #64	; 0x40
 800204e:	4013      	ands	r3, r2
 8002050:	d01d      	beq.n	800208e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	4a1d      	ldr	r2, [pc, #116]	; (80020d0 <UART_AdvFeatureConfig+0x15c>)
 800205a:	4013      	ands	r3, r2
 800205c:	0019      	movs	r1, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	035b      	lsls	r3, r3, #13
 8002072:	429a      	cmp	r2, r3
 8002074:	d10b      	bne.n	800208e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4a15      	ldr	r2, [pc, #84]	; (80020d4 <UART_AdvFeatureConfig+0x160>)
 800207e:	4013      	ands	r3, r2
 8002080:	0019      	movs	r1, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	4013      	ands	r3, r2
 8002096:	d00b      	beq.n	80020b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4a0e      	ldr	r2, [pc, #56]	; (80020d8 <UART_AdvFeatureConfig+0x164>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	0019      	movs	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	605a      	str	r2, [r3, #4]
  }
}
 80020b0:	46c0      	nop			; (mov r8, r8)
 80020b2:	46bd      	mov	sp, r7
 80020b4:	b002      	add	sp, #8
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	fffdffff 	.word	0xfffdffff
 80020bc:	fffeffff 	.word	0xfffeffff
 80020c0:	fffbffff 	.word	0xfffbffff
 80020c4:	ffff7fff 	.word	0xffff7fff
 80020c8:	ffffefff 	.word	0xffffefff
 80020cc:	ffffdfff 	.word	0xffffdfff
 80020d0:	ffefffff 	.word	0xffefffff
 80020d4:	ff9fffff 	.word	0xff9fffff
 80020d8:	fff7ffff 	.word	0xfff7ffff

080020dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2280      	movs	r2, #128	; 0x80
 80020e8:	2100      	movs	r1, #0
 80020ea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80020ec:	f7fe fb56 	bl	800079c <HAL_GetTick>
 80020f0:	0003      	movs	r3, r0
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2208      	movs	r2, #8
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d10c      	bne.n	800211c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2280      	movs	r2, #128	; 0x80
 8002106:	0391      	lsls	r1, r2, #14
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	4a17      	ldr	r2, [pc, #92]	; (8002168 <UART_CheckIdleState+0x8c>)
 800210c:	9200      	str	r2, [sp, #0]
 800210e:	2200      	movs	r2, #0
 8002110:	f000 f82c 	bl	800216c <UART_WaitOnFlagUntilTimeout>
 8002114:	1e03      	subs	r3, r0, #0
 8002116:	d001      	beq.n	800211c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e021      	b.n	8002160 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2204      	movs	r2, #4
 8002124:	4013      	ands	r3, r2
 8002126:	2b04      	cmp	r3, #4
 8002128:	d10c      	bne.n	8002144 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2280      	movs	r2, #128	; 0x80
 800212e:	03d1      	lsls	r1, r2, #15
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	4a0d      	ldr	r2, [pc, #52]	; (8002168 <UART_CheckIdleState+0x8c>)
 8002134:	9200      	str	r2, [sp, #0]
 8002136:	2200      	movs	r2, #0
 8002138:	f000 f818 	bl	800216c <UART_WaitOnFlagUntilTimeout>
 800213c:	1e03      	subs	r3, r0, #0
 800213e:	d001      	beq.n	8002144 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e00d      	b.n	8002160 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2220      	movs	r2, #32
 8002148:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2220      	movs	r2, #32
 800214e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2274      	movs	r2, #116	; 0x74
 800215a:	2100      	movs	r1, #0
 800215c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	0018      	movs	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	b004      	add	sp, #16
 8002166:	bd80      	pop	{r7, pc}
 8002168:	01ffffff 	.word	0x01ffffff

0800216c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b094      	sub	sp, #80	; 0x50
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	603b      	str	r3, [r7, #0]
 8002178:	1dfb      	adds	r3, r7, #7
 800217a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800217c:	e0a3      	b.n	80022c6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800217e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002180:	3301      	adds	r3, #1
 8002182:	d100      	bne.n	8002186 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002184:	e09f      	b.n	80022c6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002186:	f7fe fb09 	bl	800079c <HAL_GetTick>
 800218a:	0002      	movs	r2, r0
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002192:	429a      	cmp	r2, r3
 8002194:	d302      	bcc.n	800219c <UART_WaitOnFlagUntilTimeout+0x30>
 8002196:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002198:	2b00      	cmp	r3, #0
 800219a:	d13d      	bne.n	8002218 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800219c:	f3ef 8310 	mrs	r3, PRIMASK
 80021a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80021a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021a4:	647b      	str	r3, [r7, #68]	; 0x44
 80021a6:	2301      	movs	r3, #1
 80021a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ac:	f383 8810 	msr	PRIMASK, r3
}
 80021b0:	46c0      	nop			; (mov r8, r8)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	494c      	ldr	r1, [pc, #304]	; (80022f0 <UART_WaitOnFlagUntilTimeout+0x184>)
 80021be:	400a      	ands	r2, r1
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021c4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c8:	f383 8810 	msr	PRIMASK, r3
}
 80021cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021ce:	f3ef 8310 	mrs	r3, PRIMASK
 80021d2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80021d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021d6:	643b      	str	r3, [r7, #64]	; 0x40
 80021d8:	2301      	movs	r3, #1
 80021da:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021de:	f383 8810 	msr	PRIMASK, r3
}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2101      	movs	r1, #1
 80021f0:	438a      	bics	r2, r1
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021fa:	f383 8810 	msr	PRIMASK, r3
}
 80021fe:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2220      	movs	r2, #32
 8002204:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2220      	movs	r2, #32
 800220a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2274      	movs	r2, #116	; 0x74
 8002210:	2100      	movs	r1, #0
 8002212:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e067      	b.n	80022e8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2204      	movs	r2, #4
 8002220:	4013      	ands	r3, r2
 8002222:	d050      	beq.n	80022c6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	69da      	ldr	r2, [r3, #28]
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	401a      	ands	r2, r3
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	429a      	cmp	r2, r3
 8002236:	d146      	bne.n	80022c6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2280      	movs	r2, #128	; 0x80
 800223e:	0112      	lsls	r2, r2, #4
 8002240:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002242:	f3ef 8310 	mrs	r3, PRIMASK
 8002246:	613b      	str	r3, [r7, #16]
  return(result);
 8002248:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800224a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800224c:	2301      	movs	r3, #1
 800224e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f383 8810 	msr	PRIMASK, r3
}
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4923      	ldr	r1, [pc, #140]	; (80022f0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002264:	400a      	ands	r2, r1
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800226a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	f383 8810 	msr	PRIMASK, r3
}
 8002272:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002274:	f3ef 8310 	mrs	r3, PRIMASK
 8002278:	61fb      	str	r3, [r7, #28]
  return(result);
 800227a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800227c:	64bb      	str	r3, [r7, #72]	; 0x48
 800227e:	2301      	movs	r3, #1
 8002280:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	f383 8810 	msr	PRIMASK, r3
}
 8002288:	46c0      	nop			; (mov r8, r8)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2101      	movs	r1, #1
 8002296:	438a      	bics	r2, r1
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	f383 8810 	msr	PRIMASK, r3
}
 80022a4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2220      	movs	r2, #32
 80022aa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2220      	movs	r2, #32
 80022b0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2280      	movs	r2, #128	; 0x80
 80022b6:	2120      	movs	r1, #32
 80022b8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2274      	movs	r2, #116	; 0x74
 80022be:	2100      	movs	r1, #0
 80022c0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e010      	b.n	80022e8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	4013      	ands	r3, r2
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	425a      	negs	r2, r3
 80022d6:	4153      	adcs	r3, r2
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	001a      	movs	r2, r3
 80022dc:	1dfb      	adds	r3, r7, #7
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d100      	bne.n	80022e6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80022e4:	e74b      	b.n	800217e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	0018      	movs	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b014      	add	sp, #80	; 0x50
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	fffffe5f 	.word	0xfffffe5f

080022f4 <__libc_init_array>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	2600      	movs	r6, #0
 80022f8:	4d0c      	ldr	r5, [pc, #48]	; (800232c <__libc_init_array+0x38>)
 80022fa:	4c0d      	ldr	r4, [pc, #52]	; (8002330 <__libc_init_array+0x3c>)
 80022fc:	1b64      	subs	r4, r4, r5
 80022fe:	10a4      	asrs	r4, r4, #2
 8002300:	42a6      	cmp	r6, r4
 8002302:	d109      	bne.n	8002318 <__libc_init_array+0x24>
 8002304:	2600      	movs	r6, #0
 8002306:	f000 f821 	bl	800234c <_init>
 800230a:	4d0a      	ldr	r5, [pc, #40]	; (8002334 <__libc_init_array+0x40>)
 800230c:	4c0a      	ldr	r4, [pc, #40]	; (8002338 <__libc_init_array+0x44>)
 800230e:	1b64      	subs	r4, r4, r5
 8002310:	10a4      	asrs	r4, r4, #2
 8002312:	42a6      	cmp	r6, r4
 8002314:	d105      	bne.n	8002322 <__libc_init_array+0x2e>
 8002316:	bd70      	pop	{r4, r5, r6, pc}
 8002318:	00b3      	lsls	r3, r6, #2
 800231a:	58eb      	ldr	r3, [r5, r3]
 800231c:	4798      	blx	r3
 800231e:	3601      	adds	r6, #1
 8002320:	e7ee      	b.n	8002300 <__libc_init_array+0xc>
 8002322:	00b3      	lsls	r3, r6, #2
 8002324:	58eb      	ldr	r3, [r5, r3]
 8002326:	4798      	blx	r3
 8002328:	3601      	adds	r6, #1
 800232a:	e7f2      	b.n	8002312 <__libc_init_array+0x1e>
 800232c:	080023e8 	.word	0x080023e8
 8002330:	080023e8 	.word	0x080023e8
 8002334:	080023e8 	.word	0x080023e8
 8002338:	080023ec 	.word	0x080023ec

0800233c <memset>:
 800233c:	0003      	movs	r3, r0
 800233e:	1882      	adds	r2, r0, r2
 8002340:	4293      	cmp	r3, r2
 8002342:	d100      	bne.n	8002346 <memset+0xa>
 8002344:	4770      	bx	lr
 8002346:	7019      	strb	r1, [r3, #0]
 8002348:	3301      	adds	r3, #1
 800234a:	e7f9      	b.n	8002340 <memset+0x4>

0800234c <_init>:
 800234c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002352:	bc08      	pop	{r3}
 8002354:	469e      	mov	lr, r3
 8002356:	4770      	bx	lr

08002358 <_fini>:
 8002358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800235e:	bc08      	pop	{r3}
 8002360:	469e      	mov	lr, r3
 8002362:	4770      	bx	lr
