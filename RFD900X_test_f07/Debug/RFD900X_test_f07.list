
RFD900X_test_f07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003120  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080031e0  080031e0  000131e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032e4  080032e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080032e4  080032e4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032e4  080032e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032e4  080032e4  000132e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032e8  080032e8  000132e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080032ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000070  0800335c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  0800335c  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008104  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000152c  00000000  00000000  0002819c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  000296c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000638  00000000  00000000  00029d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001991b  00000000  00000000  0002a3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008de7  00000000  00000000  00043ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000919ac  00000000  00000000  0004cad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de47e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e8c  00000000  00000000  000de4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080031c8 	.word	0x080031c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080031c8 	.word	0x080031c8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b087      	sub	sp, #28
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fa83 	bl	8000744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f83b 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f8bd 	bl	80003c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000246:	f000 f88b 	bl	8000360 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  uint8_t data_recieve[10];
  uint8_t corrupt_percent;
  while (1)
  {
	  HAL_UART_Receive(&huart2, data_recieve, sizeof(data_recieve), 10);
 800024a:	1d39      	adds	r1, r7, #4
 800024c:	4818      	ldr	r0, [pc, #96]	; (80002b0 <main+0x7c>)
 800024e:	230a      	movs	r3, #10
 8000250:	220a      	movs	r2, #10
 8000252:	f001 fb77 	bl	8001944 <HAL_UART_Receive>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//evaluating the value
	for(int i = 1; i < 10; i++) {
 8000256:	2301      	movs	r3, #1
 8000258:	613b      	str	r3, [r7, #16]
 800025a:	e025      	b.n	80002a8 <main+0x74>
		if(data_recieve[i] - data_recieve[i-1] != 1) {
 800025c:	1d3a      	adds	r2, r7, #4
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	18d3      	adds	r3, r2, r3
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	0019      	movs	r1, r3
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	3b01      	subs	r3, #1
 800026a:	1d3a      	adds	r2, r7, #4
 800026c:	5cd3      	ldrb	r3, [r2, r3]
 800026e:	1acb      	subs	r3, r1, r3
 8000270:	2b01      	cmp	r3, #1
 8000272:	d005      	beq.n	8000280 <main+0x4c>
			corrupt_percent ++;
 8000274:	2117      	movs	r1, #23
 8000276:	187b      	adds	r3, r7, r1
 8000278:	781a      	ldrb	r2, [r3, #0]
 800027a:	187b      	adds	r3, r7, r1
 800027c:	3201      	adds	r2, #1
 800027e:	701a      	strb	r2, [r3, #0]
		}
		if (data_recieve[i] == 100) {
 8000280:	1d3a      	adds	r2, r7, #4
 8000282:	693b      	ldr	r3, [r7, #16]
 8000284:	18d3      	adds	r3, r2, r3
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	2b64      	cmp	r3, #100	; 0x64
 800028a:	d10a      	bne.n	80002a2 <main+0x6e>
			printf("In the current 100 value the corrupt rate is %ud", corrupt_percent);
 800028c:	2417      	movs	r4, #23
 800028e:	193b      	adds	r3, r7, r4
 8000290:	781a      	ldrb	r2, [r3, #0]
 8000292:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <main+0x80>)
 8000294:	0011      	movs	r1, r2
 8000296:	0018      	movs	r0, r3
 8000298:	f001 ffbe 	bl	8002218 <iprintf>
			corrupt_percent = 0;
 800029c:	193b      	adds	r3, r7, r4
 800029e:	2200      	movs	r2, #0
 80002a0:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < 10; i++) {
 80002a2:	693b      	ldr	r3, [r7, #16]
 80002a4:	3301      	adds	r3, #1
 80002a6:	613b      	str	r3, [r7, #16]
 80002a8:	693b      	ldr	r3, [r7, #16]
 80002aa:	2b09      	cmp	r3, #9
 80002ac:	ddd6      	ble.n	800025c <main+0x28>
	  HAL_UART_Receive(&huart2, data_recieve, sizeof(data_recieve), 10);
 80002ae:	e7cc      	b.n	800024a <main+0x16>
 80002b0:	2000008c 	.word	0x2000008c
 80002b4:	080031e0 	.word	0x080031e0

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b099      	sub	sp, #100	; 0x64
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	242c      	movs	r4, #44	; 0x2c
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	0018      	movs	r0, r3
 80002c4:	2334      	movs	r3, #52	; 0x34
 80002c6:	001a      	movs	r2, r3
 80002c8:	2100      	movs	r1, #0
 80002ca:	f001 ff9d 	bl	8002208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ce:	231c      	movs	r3, #28
 80002d0:	18fb      	adds	r3, r7, r3
 80002d2:	0018      	movs	r0, r3
 80002d4:	2310      	movs	r3, #16
 80002d6:	001a      	movs	r2, r3
 80002d8:	2100      	movs	r1, #0
 80002da:	f001 ff95 	bl	8002208 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002de:	003b      	movs	r3, r7
 80002e0:	0018      	movs	r0, r3
 80002e2:	231c      	movs	r3, #28
 80002e4:	001a      	movs	r2, r3
 80002e6:	2100      	movs	r1, #0
 80002e8:	f001 ff8e 	bl	8002208 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80002ec:	193b      	adds	r3, r7, r4
 80002ee:	2220      	movs	r2, #32
 80002f0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002f2:	193b      	adds	r3, r7, r4
 80002f4:	2201      	movs	r2, #1
 80002f6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f8:	193b      	adds	r3, r7, r4
 80002fa:	2200      	movs	r2, #0
 80002fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fe:	193b      	adds	r3, r7, r4
 8000300:	0018      	movs	r0, r3
 8000302:	f000 fccd 	bl	8000ca0 <HAL_RCC_OscConfig>
 8000306:	1e03      	subs	r3, r0, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x56>
  {
    Error_Handler();
 800030a:	f000 f8c3 	bl	8000494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030e:	211c      	movs	r1, #28
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2207      	movs	r2, #7
 8000314:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2203      	movs	r2, #3
 800031a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2200      	movs	r2, #0
 8000326:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000328:	187b      	adds	r3, r7, r1
 800032a:	2101      	movs	r1, #1
 800032c:	0018      	movs	r0, r3
 800032e:	f001 f83d 	bl	80013ac <HAL_RCC_ClockConfig>
 8000332:	1e03      	subs	r3, r0, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000336:	f000 f8ad 	bl	8000494 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800033a:	003b      	movs	r3, r7
 800033c:	2202      	movs	r2, #2
 800033e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000340:	003b      	movs	r3, r7
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000346:	003b      	movs	r3, r7
 8000348:	0018      	movs	r0, r3
 800034a:	f001 f9a9 	bl	80016a0 <HAL_RCCEx_PeriphCLKConfig>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000352:	f000 f89f 	bl	8000494 <Error_Handler>
  }
}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	46bd      	mov	sp, r7
 800035a:	b019      	add	sp, #100	; 0x64
 800035c:	bd90      	pop	{r4, r7, pc}
	...

08000360 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000364:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 8000366:	4a15      	ldr	r2, [pc, #84]	; (80003bc <MX_USART2_UART_Init+0x5c>)
 8000368:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800036a:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 800036c:	2296      	movs	r2, #150	; 0x96
 800036e:	0212      	lsls	r2, r2, #8
 8000370:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 8000380:	2200      	movs	r2, #0
 8000382:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 8000386:	220c      	movs	r2, #12
 8000388:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 800038c:	2200      	movs	r2, #0
 800038e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 8000392:	2200      	movs	r2, #0
 8000394:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 8000398:	2200      	movs	r2, #0
 800039a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 800039e:	2200      	movs	r2, #0
 80003a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003a2:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 fa79 	bl	800189c <HAL_UART_Init>
 80003aa:	1e03      	subs	r3, r0, #0
 80003ac:	d001      	beq.n	80003b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003ae:	f000 f871 	bl	8000494 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	2000008c 	.word	0x2000008c
 80003bc:	40004400 	.word	0x40004400

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b590      	push	{r4, r7, lr}
 80003c2:	b089      	sub	sp, #36	; 0x24
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	240c      	movs	r4, #12
 80003c8:	193b      	adds	r3, r7, r4
 80003ca:	0018      	movs	r0, r3
 80003cc:	2314      	movs	r3, #20
 80003ce:	001a      	movs	r2, r3
 80003d0:	2100      	movs	r1, #0
 80003d2:	f001 ff19 	bl	8002208 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d6:	4b2d      	ldr	r3, [pc, #180]	; (800048c <MX_GPIO_Init+0xcc>)
 80003d8:	695a      	ldr	r2, [r3, #20]
 80003da:	4b2c      	ldr	r3, [pc, #176]	; (800048c <MX_GPIO_Init+0xcc>)
 80003dc:	2180      	movs	r1, #128	; 0x80
 80003de:	0309      	lsls	r1, r1, #12
 80003e0:	430a      	orrs	r2, r1
 80003e2:	615a      	str	r2, [r3, #20]
 80003e4:	4b29      	ldr	r3, [pc, #164]	; (800048c <MX_GPIO_Init+0xcc>)
 80003e6:	695a      	ldr	r2, [r3, #20]
 80003e8:	2380      	movs	r3, #128	; 0x80
 80003ea:	031b      	lsls	r3, r3, #12
 80003ec:	4013      	ands	r3, r2
 80003ee:	60bb      	str	r3, [r7, #8]
 80003f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003f2:	4b26      	ldr	r3, [pc, #152]	; (800048c <MX_GPIO_Init+0xcc>)
 80003f4:	695a      	ldr	r2, [r3, #20]
 80003f6:	4b25      	ldr	r3, [pc, #148]	; (800048c <MX_GPIO_Init+0xcc>)
 80003f8:	2180      	movs	r1, #128	; 0x80
 80003fa:	03c9      	lsls	r1, r1, #15
 80003fc:	430a      	orrs	r2, r1
 80003fe:	615a      	str	r2, [r3, #20]
 8000400:	4b22      	ldr	r3, [pc, #136]	; (800048c <MX_GPIO_Init+0xcc>)
 8000402:	695a      	ldr	r2, [r3, #20]
 8000404:	2380      	movs	r3, #128	; 0x80
 8000406:	03db      	lsls	r3, r3, #15
 8000408:	4013      	ands	r3, r2
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040e:	4b1f      	ldr	r3, [pc, #124]	; (800048c <MX_GPIO_Init+0xcc>)
 8000410:	695a      	ldr	r2, [r3, #20]
 8000412:	4b1e      	ldr	r3, [pc, #120]	; (800048c <MX_GPIO_Init+0xcc>)
 8000414:	2180      	movs	r1, #128	; 0x80
 8000416:	0289      	lsls	r1, r1, #10
 8000418:	430a      	orrs	r2, r1
 800041a:	615a      	str	r2, [r3, #20]
 800041c:	4b1b      	ldr	r3, [pc, #108]	; (800048c <MX_GPIO_Init+0xcc>)
 800041e:	695a      	ldr	r2, [r3, #20]
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	029b      	lsls	r3, r3, #10
 8000424:	4013      	ands	r3, r2
 8000426:	603b      	str	r3, [r7, #0]
 8000428:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800042a:	2390      	movs	r3, #144	; 0x90
 800042c:	05db      	lsls	r3, r3, #23
 800042e:	2200      	movs	r2, #0
 8000430:	2120      	movs	r1, #32
 8000432:	0018      	movs	r0, r3
 8000434:	f000 fc16 	bl	8000c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000438:	193b      	adds	r3, r7, r4
 800043a:	2280      	movs	r2, #128	; 0x80
 800043c:	0192      	lsls	r2, r2, #6
 800043e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000440:	193b      	adds	r3, r7, r4
 8000442:	2284      	movs	r2, #132	; 0x84
 8000444:	0392      	lsls	r2, r2, #14
 8000446:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000448:	193b      	adds	r3, r7, r4
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800044e:	193b      	adds	r3, r7, r4
 8000450:	4a0f      	ldr	r2, [pc, #60]	; (8000490 <MX_GPIO_Init+0xd0>)
 8000452:	0019      	movs	r1, r3
 8000454:	0010      	movs	r0, r2
 8000456:	f000 fa8d 	bl	8000974 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800045a:	0021      	movs	r1, r4
 800045c:	187b      	adds	r3, r7, r1
 800045e:	2220      	movs	r2, #32
 8000460:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000462:	187b      	adds	r3, r7, r1
 8000464:	2201      	movs	r2, #1
 8000466:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046e:	187b      	adds	r3, r7, r1
 8000470:	2200      	movs	r2, #0
 8000472:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000474:	187a      	adds	r2, r7, r1
 8000476:	2390      	movs	r3, #144	; 0x90
 8000478:	05db      	lsls	r3, r3, #23
 800047a:	0011      	movs	r1, r2
 800047c:	0018      	movs	r0, r3
 800047e:	f000 fa79 	bl	8000974 <HAL_GPIO_Init>

}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	46bd      	mov	sp, r7
 8000486:	b009      	add	sp, #36	; 0x24
 8000488:	bd90      	pop	{r4, r7, pc}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	40021000 	.word	0x40021000
 8000490:	48000800 	.word	0x48000800

08000494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000498:	b672      	cpsid	i
}
 800049a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800049c:	e7fe      	b.n	800049c <Error_Handler+0x8>
	...

080004a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a6:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <HAL_MspInit+0x44>)
 80004a8:	699a      	ldr	r2, [r3, #24]
 80004aa:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <HAL_MspInit+0x44>)
 80004ac:	2101      	movs	r1, #1
 80004ae:	430a      	orrs	r2, r1
 80004b0:	619a      	str	r2, [r3, #24]
 80004b2:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <HAL_MspInit+0x44>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	2201      	movs	r2, #1
 80004b8:	4013      	ands	r3, r2
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <HAL_MspInit+0x44>)
 80004c0:	69da      	ldr	r2, [r3, #28]
 80004c2:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <HAL_MspInit+0x44>)
 80004c4:	2180      	movs	r1, #128	; 0x80
 80004c6:	0549      	lsls	r1, r1, #21
 80004c8:	430a      	orrs	r2, r1
 80004ca:	61da      	str	r2, [r3, #28]
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <HAL_MspInit+0x44>)
 80004ce:	69da      	ldr	r2, [r3, #28]
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	055b      	lsls	r3, r3, #21
 80004d4:	4013      	ands	r3, r2
 80004d6:	603b      	str	r3, [r7, #0]
 80004d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	b002      	add	sp, #8
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	40021000 	.word	0x40021000

080004e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004e8:	b590      	push	{r4, r7, lr}
 80004ea:	b08b      	sub	sp, #44	; 0x2c
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f0:	2414      	movs	r4, #20
 80004f2:	193b      	adds	r3, r7, r4
 80004f4:	0018      	movs	r0, r3
 80004f6:	2314      	movs	r3, #20
 80004f8:	001a      	movs	r2, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	f001 fe84 	bl	8002208 <memset>
  if(huart->Instance==USART2)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a1c      	ldr	r2, [pc, #112]	; (8000578 <HAL_UART_MspInit+0x90>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d132      	bne.n	8000570 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800050a:	4b1c      	ldr	r3, [pc, #112]	; (800057c <HAL_UART_MspInit+0x94>)
 800050c:	69da      	ldr	r2, [r3, #28]
 800050e:	4b1b      	ldr	r3, [pc, #108]	; (800057c <HAL_UART_MspInit+0x94>)
 8000510:	2180      	movs	r1, #128	; 0x80
 8000512:	0289      	lsls	r1, r1, #10
 8000514:	430a      	orrs	r2, r1
 8000516:	61da      	str	r2, [r3, #28]
 8000518:	4b18      	ldr	r3, [pc, #96]	; (800057c <HAL_UART_MspInit+0x94>)
 800051a:	69da      	ldr	r2, [r3, #28]
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	029b      	lsls	r3, r3, #10
 8000520:	4013      	ands	r3, r2
 8000522:	613b      	str	r3, [r7, #16]
 8000524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <HAL_UART_MspInit+0x94>)
 8000528:	695a      	ldr	r2, [r3, #20]
 800052a:	4b14      	ldr	r3, [pc, #80]	; (800057c <HAL_UART_MspInit+0x94>)
 800052c:	2180      	movs	r1, #128	; 0x80
 800052e:	0289      	lsls	r1, r1, #10
 8000530:	430a      	orrs	r2, r1
 8000532:	615a      	str	r2, [r3, #20]
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <HAL_UART_MspInit+0x94>)
 8000536:	695a      	ldr	r2, [r3, #20]
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	029b      	lsls	r3, r3, #10
 800053c:	4013      	ands	r3, r2
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000542:	0021      	movs	r1, r4
 8000544:	187b      	adds	r3, r7, r1
 8000546:	220c      	movs	r2, #12
 8000548:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2202      	movs	r2, #2
 800054e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2200      	movs	r2, #0
 800055a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2201      	movs	r2, #1
 8000560:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000562:	187a      	adds	r2, r7, r1
 8000564:	2390      	movs	r3, #144	; 0x90
 8000566:	05db      	lsls	r3, r3, #23
 8000568:	0011      	movs	r1, r2
 800056a:	0018      	movs	r0, r3
 800056c:	f000 fa02 	bl	8000974 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000570:	46c0      	nop			; (mov r8, r8)
 8000572:	46bd      	mov	sp, r7
 8000574:	b00b      	add	sp, #44	; 0x2c
 8000576:	bd90      	pop	{r4, r7, pc}
 8000578:	40004400 	.word	0x40004400
 800057c:	40021000 	.word	0x40021000

08000580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000584:	e7fe      	b.n	8000584 <NMI_Handler+0x4>

08000586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058a:	e7fe      	b.n	800058a <HardFault_Handler+0x4>

0800058c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a4:	f000 f916 	bl	80007d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a8:	46c0      	nop			; (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b086      	sub	sp, #24
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	60f8      	str	r0, [r7, #12]
 80005b6:	60b9      	str	r1, [r7, #8]
 80005b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	e00a      	b.n	80005d6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005c0:	e000      	b.n	80005c4 <_read+0x16>
 80005c2:	bf00      	nop
 80005c4:	0001      	movs	r1, r0
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	1c5a      	adds	r2, r3, #1
 80005ca:	60ba      	str	r2, [r7, #8]
 80005cc:	b2ca      	uxtb	r2, r1
 80005ce:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	3301      	adds	r3, #1
 80005d4:	617b      	str	r3, [r7, #20]
 80005d6:	697a      	ldr	r2, [r7, #20]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	429a      	cmp	r2, r3
 80005dc:	dbf0      	blt.n	80005c0 <_read+0x12>
	}

return len;
 80005de:	687b      	ldr	r3, [r7, #4]
}
 80005e0:	0018      	movs	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b006      	add	sp, #24
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	e009      	b.n	800060e <_write+0x26>
	{
		__io_putchar(*ptr++);
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	1c5a      	adds	r2, r3, #1
 80005fe:	60ba      	str	r2, [r7, #8]
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	0018      	movs	r0, r3
 8000604:	e000      	b.n	8000608 <_write+0x20>
 8000606:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	3301      	adds	r3, #1
 800060c:	617b      	str	r3, [r7, #20]
 800060e:	697a      	ldr	r2, [r7, #20]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	429a      	cmp	r2, r3
 8000614:	dbf1      	blt.n	80005fa <_write+0x12>
	}
	return len;
 8000616:	687b      	ldr	r3, [r7, #4]
}
 8000618:	0018      	movs	r0, r3
 800061a:	46bd      	mov	sp, r7
 800061c:	b006      	add	sp, #24
 800061e:	bd80      	pop	{r7, pc}

08000620 <_close>:

int _close(int file)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	return -1;
 8000628:	2301      	movs	r3, #1
 800062a:	425b      	negs	r3, r3
}
 800062c:	0018      	movs	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	b002      	add	sp, #8
 8000632:	bd80      	pop	{r7, pc}

08000634 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	0192      	lsls	r2, r2, #6
 8000644:	605a      	str	r2, [r3, #4]
	return 0;
 8000646:	2300      	movs	r3, #0
}
 8000648:	0018      	movs	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	b002      	add	sp, #8
 800064e:	bd80      	pop	{r7, pc}

08000650 <_isatty>:

int _isatty(int file)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	return 1;
 8000658:	2301      	movs	r3, #1
}
 800065a:	0018      	movs	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	b002      	add	sp, #8
 8000660:	bd80      	pop	{r7, pc}

08000662 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b084      	sub	sp, #16
 8000666:	af00      	add	r7, sp, #0
 8000668:	60f8      	str	r0, [r7, #12]
 800066a:	60b9      	str	r1, [r7, #8]
 800066c:	607a      	str	r2, [r7, #4]
	return 0;
 800066e:	2300      	movs	r3, #0
}
 8000670:	0018      	movs	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	b004      	add	sp, #16
 8000676:	bd80      	pop	{r7, pc}

08000678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000680:	4a14      	ldr	r2, [pc, #80]	; (80006d4 <_sbrk+0x5c>)
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <_sbrk+0x60>)
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800068c:	4b13      	ldr	r3, [pc, #76]	; (80006dc <_sbrk+0x64>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d102      	bne.n	800069a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <_sbrk+0x64>)
 8000696:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <_sbrk+0x68>)
 8000698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <_sbrk+0x64>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	18d3      	adds	r3, r2, r3
 80006a2:	693a      	ldr	r2, [r7, #16]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d207      	bcs.n	80006b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006a8:	f001 fd84 	bl	80021b4 <__errno>
 80006ac:	0003      	movs	r3, r0
 80006ae:	220c      	movs	r2, #12
 80006b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	425b      	negs	r3, r3
 80006b6:	e009      	b.n	80006cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <_sbrk+0x64>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006be:	4b07      	ldr	r3, [pc, #28]	; (80006dc <_sbrk+0x64>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	18d2      	adds	r2, r2, r3
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <_sbrk+0x64>)
 80006c8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80006ca:	68fb      	ldr	r3, [r7, #12]
}
 80006cc:	0018      	movs	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b006      	add	sp, #24
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20004000 	.word	0x20004000
 80006d8:	00000400 	.word	0x00000400
 80006dc:	20000110 	.word	0x20000110
 80006e0:	20000128 	.word	0x20000128

080006e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006e8:	46c0      	nop			; (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006f0:	480d      	ldr	r0, [pc, #52]	; (8000728 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006f2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f4:	480d      	ldr	r0, [pc, #52]	; (800072c <LoopForever+0x6>)
  ldr r1, =_edata
 80006f6:	490e      	ldr	r1, [pc, #56]	; (8000730 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f8:	4a0e      	ldr	r2, [pc, #56]	; (8000734 <LoopForever+0xe>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006fc:	e002      	b.n	8000704 <LoopCopyDataInit>

080006fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000702:	3304      	adds	r3, #4

08000704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000708:	d3f9      	bcc.n	80006fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070a:	4a0b      	ldr	r2, [pc, #44]	; (8000738 <LoopForever+0x12>)
  ldr r4, =_ebss
 800070c:	4c0b      	ldr	r4, [pc, #44]	; (800073c <LoopForever+0x16>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000710:	e001      	b.n	8000716 <LoopFillZerobss>

08000712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000714:	3204      	adds	r2, #4

08000716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000718:	d3fb      	bcc.n	8000712 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800071a:	f7ff ffe3 	bl	80006e4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800071e:	f001 fd4f 	bl	80021c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000722:	f7ff fd87 	bl	8000234 <main>

08000726 <LoopForever>:

LoopForever:
    b LoopForever
 8000726:	e7fe      	b.n	8000726 <LoopForever>
  ldr   r0, =_estack
 8000728:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800072c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000730:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000734:	080032ec 	.word	0x080032ec
  ldr r2, =_sbss
 8000738:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800073c:	20000128 	.word	0x20000128

08000740 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000740:	e7fe      	b.n	8000740 <ADC1_COMP_IRQHandler>
	...

08000744 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <HAL_Init+0x24>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_Init+0x24>)
 800074e:	2110      	movs	r1, #16
 8000750:	430a      	orrs	r2, r1
 8000752:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000754:	2000      	movs	r0, #0
 8000756:	f000 f809 	bl	800076c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800075a:	f7ff fea1 	bl	80004a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800075e:	2300      	movs	r3, #0
}
 8000760:	0018      	movs	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	40022000 	.word	0x40022000

0800076c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <HAL_InitTick+0x5c>)
 8000776:	681c      	ldr	r4, [r3, #0]
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <HAL_InitTick+0x60>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	0019      	movs	r1, r3
 800077e:	23fa      	movs	r3, #250	; 0xfa
 8000780:	0098      	lsls	r0, r3, #2
 8000782:	f7ff fccb 	bl	800011c <__udivsi3>
 8000786:	0003      	movs	r3, r0
 8000788:	0019      	movs	r1, r3
 800078a:	0020      	movs	r0, r4
 800078c:	f7ff fcc6 	bl	800011c <__udivsi3>
 8000790:	0003      	movs	r3, r0
 8000792:	0018      	movs	r0, r3
 8000794:	f000 f8e1 	bl	800095a <HAL_SYSTICK_Config>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800079c:	2301      	movs	r3, #1
 800079e:	e00f      	b.n	80007c0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b03      	cmp	r3, #3
 80007a4:	d80b      	bhi.n	80007be <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a6:	6879      	ldr	r1, [r7, #4]
 80007a8:	2301      	movs	r3, #1
 80007aa:	425b      	negs	r3, r3
 80007ac:	2200      	movs	r2, #0
 80007ae:	0018      	movs	r0, r3
 80007b0:	f000 f8be 	bl	8000930 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <HAL_InitTick+0x64>)
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007ba:	2300      	movs	r3, #0
 80007bc:	e000      	b.n	80007c0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
}
 80007c0:	0018      	movs	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b003      	add	sp, #12
 80007c6:	bd90      	pop	{r4, r7, pc}
 80007c8:	20000000 	.word	0x20000000
 80007cc:	20000008 	.word	0x20000008
 80007d0:	20000004 	.word	0x20000004

080007d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_IncTick+0x1c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	001a      	movs	r2, r3
 80007de:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <HAL_IncTick+0x20>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	18d2      	adds	r2, r2, r3
 80007e4:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <HAL_IncTick+0x20>)
 80007e6:	601a      	str	r2, [r3, #0]
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	20000008 	.word	0x20000008
 80007f4:	20000114 	.word	0x20000114

080007f8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  return uwTick;
 80007fc:	4b02      	ldr	r3, [pc, #8]	; (8000808 <HAL_GetTick+0x10>)
 80007fe:	681b      	ldr	r3, [r3, #0]
}
 8000800:	0018      	movs	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	20000114 	.word	0x20000114

0800080c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	0002      	movs	r2, r0
 8000814:	6039      	str	r1, [r7, #0]
 8000816:	1dfb      	adds	r3, r7, #7
 8000818:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800081a:	1dfb      	adds	r3, r7, #7
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b7f      	cmp	r3, #127	; 0x7f
 8000820:	d828      	bhi.n	8000874 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000822:	4a2f      	ldr	r2, [pc, #188]	; (80008e0 <__NVIC_SetPriority+0xd4>)
 8000824:	1dfb      	adds	r3, r7, #7
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b25b      	sxtb	r3, r3
 800082a:	089b      	lsrs	r3, r3, #2
 800082c:	33c0      	adds	r3, #192	; 0xc0
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	589b      	ldr	r3, [r3, r2]
 8000832:	1dfa      	adds	r2, r7, #7
 8000834:	7812      	ldrb	r2, [r2, #0]
 8000836:	0011      	movs	r1, r2
 8000838:	2203      	movs	r2, #3
 800083a:	400a      	ands	r2, r1
 800083c:	00d2      	lsls	r2, r2, #3
 800083e:	21ff      	movs	r1, #255	; 0xff
 8000840:	4091      	lsls	r1, r2
 8000842:	000a      	movs	r2, r1
 8000844:	43d2      	mvns	r2, r2
 8000846:	401a      	ands	r2, r3
 8000848:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	019b      	lsls	r3, r3, #6
 800084e:	22ff      	movs	r2, #255	; 0xff
 8000850:	401a      	ands	r2, r3
 8000852:	1dfb      	adds	r3, r7, #7
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	0018      	movs	r0, r3
 8000858:	2303      	movs	r3, #3
 800085a:	4003      	ands	r3, r0
 800085c:	00db      	lsls	r3, r3, #3
 800085e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000860:	481f      	ldr	r0, [pc, #124]	; (80008e0 <__NVIC_SetPriority+0xd4>)
 8000862:	1dfb      	adds	r3, r7, #7
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b25b      	sxtb	r3, r3
 8000868:	089b      	lsrs	r3, r3, #2
 800086a:	430a      	orrs	r2, r1
 800086c:	33c0      	adds	r3, #192	; 0xc0
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000872:	e031      	b.n	80008d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000874:	4a1b      	ldr	r2, [pc, #108]	; (80008e4 <__NVIC_SetPriority+0xd8>)
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	0019      	movs	r1, r3
 800087c:	230f      	movs	r3, #15
 800087e:	400b      	ands	r3, r1
 8000880:	3b08      	subs	r3, #8
 8000882:	089b      	lsrs	r3, r3, #2
 8000884:	3306      	adds	r3, #6
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	18d3      	adds	r3, r2, r3
 800088a:	3304      	adds	r3, #4
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	1dfa      	adds	r2, r7, #7
 8000890:	7812      	ldrb	r2, [r2, #0]
 8000892:	0011      	movs	r1, r2
 8000894:	2203      	movs	r2, #3
 8000896:	400a      	ands	r2, r1
 8000898:	00d2      	lsls	r2, r2, #3
 800089a:	21ff      	movs	r1, #255	; 0xff
 800089c:	4091      	lsls	r1, r2
 800089e:	000a      	movs	r2, r1
 80008a0:	43d2      	mvns	r2, r2
 80008a2:	401a      	ands	r2, r3
 80008a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	019b      	lsls	r3, r3, #6
 80008aa:	22ff      	movs	r2, #255	; 0xff
 80008ac:	401a      	ands	r2, r3
 80008ae:	1dfb      	adds	r3, r7, #7
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	0018      	movs	r0, r3
 80008b4:	2303      	movs	r3, #3
 80008b6:	4003      	ands	r3, r0
 80008b8:	00db      	lsls	r3, r3, #3
 80008ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008bc:	4809      	ldr	r0, [pc, #36]	; (80008e4 <__NVIC_SetPriority+0xd8>)
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	001c      	movs	r4, r3
 80008c4:	230f      	movs	r3, #15
 80008c6:	4023      	ands	r3, r4
 80008c8:	3b08      	subs	r3, #8
 80008ca:	089b      	lsrs	r3, r3, #2
 80008cc:	430a      	orrs	r2, r1
 80008ce:	3306      	adds	r3, #6
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	18c3      	adds	r3, r0, r3
 80008d4:	3304      	adds	r3, #4
 80008d6:	601a      	str	r2, [r3, #0]
}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	b003      	add	sp, #12
 80008de:	bd90      	pop	{r4, r7, pc}
 80008e0:	e000e100 	.word	0xe000e100
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	1e5a      	subs	r2, r3, #1
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	045b      	lsls	r3, r3, #17
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d301      	bcc.n	8000900 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008fc:	2301      	movs	r3, #1
 80008fe:	e010      	b.n	8000922 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <SysTick_Config+0x44>)
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	3a01      	subs	r2, #1
 8000906:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000908:	2301      	movs	r3, #1
 800090a:	425b      	negs	r3, r3
 800090c:	2103      	movs	r1, #3
 800090e:	0018      	movs	r0, r3
 8000910:	f7ff ff7c 	bl	800080c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <SysTick_Config+0x44>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800091a:	4b04      	ldr	r3, [pc, #16]	; (800092c <SysTick_Config+0x44>)
 800091c:	2207      	movs	r2, #7
 800091e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000920:	2300      	movs	r3, #0
}
 8000922:	0018      	movs	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	b002      	add	sp, #8
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	e000e010 	.word	0xe000e010

08000930 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	210f      	movs	r1, #15
 800093c:	187b      	adds	r3, r7, r1
 800093e:	1c02      	adds	r2, r0, #0
 8000940:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	187b      	adds	r3, r7, r1
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b25b      	sxtb	r3, r3
 800094a:	0011      	movs	r1, r2
 800094c:	0018      	movs	r0, r3
 800094e:	f7ff ff5d 	bl	800080c <__NVIC_SetPriority>
}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	b004      	add	sp, #16
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	0018      	movs	r0, r3
 8000966:	f7ff ffbf 	bl	80008e8 <SysTick_Config>
 800096a:	0003      	movs	r3, r0
}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b002      	add	sp, #8
 8000972:	bd80      	pop	{r7, pc}

08000974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000982:	e155      	b.n	8000c30 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2101      	movs	r1, #1
 800098a:	697a      	ldr	r2, [r7, #20]
 800098c:	4091      	lsls	r1, r2
 800098e:	000a      	movs	r2, r1
 8000990:	4013      	ands	r3, r2
 8000992:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d100      	bne.n	800099c <HAL_GPIO_Init+0x28>
 800099a:	e146      	b.n	8000c2a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	2203      	movs	r2, #3
 80009a2:	4013      	ands	r3, r2
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d005      	beq.n	80009b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2203      	movs	r2, #3
 80009ae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d130      	bne.n	8000a16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	2203      	movs	r2, #3
 80009c0:	409a      	lsls	r2, r3
 80009c2:	0013      	movs	r3, r2
 80009c4:	43da      	mvns	r2, r3
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	4013      	ands	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	68da      	ldr	r2, [r3, #12]
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	409a      	lsls	r2, r3
 80009d6:	0013      	movs	r3, r2
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	4313      	orrs	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009ea:	2201      	movs	r2, #1
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	409a      	lsls	r2, r3
 80009f0:	0013      	movs	r3, r2
 80009f2:	43da      	mvns	r2, r3
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	4013      	ands	r3, r2
 80009f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	091b      	lsrs	r3, r3, #4
 8000a00:	2201      	movs	r2, #1
 8000a02:	401a      	ands	r2, r3
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	409a      	lsls	r2, r3
 8000a08:	0013      	movs	r3, r2
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	2b03      	cmp	r3, #3
 8000a20:	d017      	beq.n	8000a52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	68db      	ldr	r3, [r3, #12]
 8000a26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	0013      	movs	r3, r2
 8000a32:	43da      	mvns	r2, r3
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	4013      	ands	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	689a      	ldr	r2, [r3, #8]
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	409a      	lsls	r2, r3
 8000a44:	0013      	movs	r3, r2
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	2203      	movs	r2, #3
 8000a58:	4013      	ands	r3, r2
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	d123      	bne.n	8000aa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	08da      	lsrs	r2, r3, #3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3208      	adds	r2, #8
 8000a66:	0092      	lsls	r2, r2, #2
 8000a68:	58d3      	ldr	r3, [r2, r3]
 8000a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	2207      	movs	r2, #7
 8000a70:	4013      	ands	r3, r2
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	220f      	movs	r2, #15
 8000a76:	409a      	lsls	r2, r3
 8000a78:	0013      	movs	r3, r2
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	691a      	ldr	r2, [r3, #16]
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	2107      	movs	r1, #7
 8000a8a:	400b      	ands	r3, r1
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	409a      	lsls	r2, r3
 8000a90:	0013      	movs	r3, r2
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	08da      	lsrs	r2, r3, #3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3208      	adds	r2, #8
 8000aa0:	0092      	lsls	r2, r2, #2
 8000aa2:	6939      	ldr	r1, [r7, #16]
 8000aa4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	409a      	lsls	r2, r3
 8000ab4:	0013      	movs	r3, r2
 8000ab6:	43da      	mvns	r2, r3
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	401a      	ands	r2, r3
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	409a      	lsls	r2, r3
 8000acc:	0013      	movs	r3, r2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	23c0      	movs	r3, #192	; 0xc0
 8000ae0:	029b      	lsls	r3, r3, #10
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	d100      	bne.n	8000ae8 <HAL_GPIO_Init+0x174>
 8000ae6:	e0a0      	b.n	8000c2a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae8:	4b57      	ldr	r3, [pc, #348]	; (8000c48 <HAL_GPIO_Init+0x2d4>)
 8000aea:	699a      	ldr	r2, [r3, #24]
 8000aec:	4b56      	ldr	r3, [pc, #344]	; (8000c48 <HAL_GPIO_Init+0x2d4>)
 8000aee:	2101      	movs	r1, #1
 8000af0:	430a      	orrs	r2, r1
 8000af2:	619a      	str	r2, [r3, #24]
 8000af4:	4b54      	ldr	r3, [pc, #336]	; (8000c48 <HAL_GPIO_Init+0x2d4>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	2201      	movs	r2, #1
 8000afa:	4013      	ands	r3, r2
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b00:	4a52      	ldr	r2, [pc, #328]	; (8000c4c <HAL_GPIO_Init+0x2d8>)
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	089b      	lsrs	r3, r3, #2
 8000b06:	3302      	adds	r3, #2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	589b      	ldr	r3, [r3, r2]
 8000b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	2203      	movs	r2, #3
 8000b12:	4013      	ands	r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	220f      	movs	r2, #15
 8000b18:	409a      	lsls	r2, r3
 8000b1a:	0013      	movs	r3, r2
 8000b1c:	43da      	mvns	r2, r3
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	2390      	movs	r3, #144	; 0x90
 8000b28:	05db      	lsls	r3, r3, #23
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d019      	beq.n	8000b62 <HAL_GPIO_Init+0x1ee>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a47      	ldr	r2, [pc, #284]	; (8000c50 <HAL_GPIO_Init+0x2dc>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d013      	beq.n	8000b5e <HAL_GPIO_Init+0x1ea>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a46      	ldr	r2, [pc, #280]	; (8000c54 <HAL_GPIO_Init+0x2e0>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d00d      	beq.n	8000b5a <HAL_GPIO_Init+0x1e6>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a45      	ldr	r2, [pc, #276]	; (8000c58 <HAL_GPIO_Init+0x2e4>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d007      	beq.n	8000b56 <HAL_GPIO_Init+0x1e2>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a44      	ldr	r2, [pc, #272]	; (8000c5c <HAL_GPIO_Init+0x2e8>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d101      	bne.n	8000b52 <HAL_GPIO_Init+0x1de>
 8000b4e:	2304      	movs	r3, #4
 8000b50:	e008      	b.n	8000b64 <HAL_GPIO_Init+0x1f0>
 8000b52:	2305      	movs	r3, #5
 8000b54:	e006      	b.n	8000b64 <HAL_GPIO_Init+0x1f0>
 8000b56:	2303      	movs	r3, #3
 8000b58:	e004      	b.n	8000b64 <HAL_GPIO_Init+0x1f0>
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	e002      	b.n	8000b64 <HAL_GPIO_Init+0x1f0>
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e000      	b.n	8000b64 <HAL_GPIO_Init+0x1f0>
 8000b62:	2300      	movs	r3, #0
 8000b64:	697a      	ldr	r2, [r7, #20]
 8000b66:	2103      	movs	r1, #3
 8000b68:	400a      	ands	r2, r1
 8000b6a:	0092      	lsls	r2, r2, #2
 8000b6c:	4093      	lsls	r3, r2
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b74:	4935      	ldr	r1, [pc, #212]	; (8000c4c <HAL_GPIO_Init+0x2d8>)
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	089b      	lsrs	r3, r3, #2
 8000b7a:	3302      	adds	r3, #2
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b82:	4b37      	ldr	r3, [pc, #220]	; (8000c60 <HAL_GPIO_Init+0x2ec>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	43da      	mvns	r2, r3
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	2380      	movs	r3, #128	; 0x80
 8000b98:	025b      	lsls	r3, r3, #9
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ba6:	4b2e      	ldr	r3, [pc, #184]	; (8000c60 <HAL_GPIO_Init+0x2ec>)
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000bac:	4b2c      	ldr	r3, [pc, #176]	; (8000c60 <HAL_GPIO_Init+0x2ec>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	43da      	mvns	r2, r3
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685a      	ldr	r2, [r3, #4]
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	029b      	lsls	r3, r3, #10
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	d003      	beq.n	8000bd0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bd0:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <HAL_GPIO_Init+0x2ec>)
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bd6:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <HAL_GPIO_Init+0x2ec>)
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	43da      	mvns	r2, r3
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	2380      	movs	r3, #128	; 0x80
 8000bec:	035b      	lsls	r3, r3, #13
 8000bee:	4013      	ands	r3, r2
 8000bf0:	d003      	beq.n	8000bfa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bfa:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <HAL_GPIO_Init+0x2ec>)
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <HAL_GPIO_Init+0x2ec>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	43da      	mvns	r2, r3
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	039b      	lsls	r3, r3, #14
 8000c18:	4013      	ands	r3, r2
 8000c1a:	d003      	beq.n	8000c24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_GPIO_Init+0x2ec>)
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	40da      	lsrs	r2, r3
 8000c38:	1e13      	subs	r3, r2, #0
 8000c3a:	d000      	beq.n	8000c3e <HAL_GPIO_Init+0x2ca>
 8000c3c:	e6a2      	b.n	8000984 <HAL_GPIO_Init+0x10>
  } 
}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b006      	add	sp, #24
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010000 	.word	0x40010000
 8000c50:	48000400 	.word	0x48000400
 8000c54:	48000800 	.word	0x48000800
 8000c58:	48000c00 	.word	0x48000c00
 8000c5c:	48001000 	.word	0x48001000
 8000c60:	40010400 	.word	0x40010400

08000c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	0008      	movs	r0, r1
 8000c6e:	0011      	movs	r1, r2
 8000c70:	1cbb      	adds	r3, r7, #2
 8000c72:	1c02      	adds	r2, r0, #0
 8000c74:	801a      	strh	r2, [r3, #0]
 8000c76:	1c7b      	adds	r3, r7, #1
 8000c78:	1c0a      	adds	r2, r1, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c7c:	1c7b      	adds	r3, r7, #1
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d004      	beq.n	8000c8e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c84:	1cbb      	adds	r3, r7, #2
 8000c86:	881a      	ldrh	r2, [r3, #0]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c8c:	e003      	b.n	8000c96 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c8e:	1cbb      	adds	r3, r7, #2
 8000c90:	881a      	ldrh	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b002      	add	sp, #8
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d102      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	f000 fb76 	bl	80013a0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	4013      	ands	r3, r2
 8000cbc:	d100      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x20>
 8000cbe:	e08e      	b.n	8000dde <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cc0:	4bc5      	ldr	r3, [pc, #788]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	220c      	movs	r2, #12
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	2b04      	cmp	r3, #4
 8000cca:	d00e      	beq.n	8000cea <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ccc:	4bc2      	ldr	r3, [pc, #776]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	220c      	movs	r2, #12
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	2b08      	cmp	r3, #8
 8000cd6:	d117      	bne.n	8000d08 <HAL_RCC_OscConfig+0x68>
 8000cd8:	4bbf      	ldr	r3, [pc, #764]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	23c0      	movs	r3, #192	; 0xc0
 8000cde:	025b      	lsls	r3, r3, #9
 8000ce0:	401a      	ands	r2, r3
 8000ce2:	2380      	movs	r3, #128	; 0x80
 8000ce4:	025b      	lsls	r3, r3, #9
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d10e      	bne.n	8000d08 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cea:	4bbb      	ldr	r3, [pc, #748]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	029b      	lsls	r3, r3, #10
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	d100      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x58>
 8000cf6:	e071      	b.n	8000ddc <HAL_RCC_OscConfig+0x13c>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d000      	beq.n	8000d02 <HAL_RCC_OscConfig+0x62>
 8000d00:	e06c      	b.n	8000ddc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	f000 fb4c 	bl	80013a0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d107      	bne.n	8000d20 <HAL_RCC_OscConfig+0x80>
 8000d10:	4bb1      	ldr	r3, [pc, #708]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4bb0      	ldr	r3, [pc, #704]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d16:	2180      	movs	r1, #128	; 0x80
 8000d18:	0249      	lsls	r1, r1, #9
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	e02f      	b.n	8000d80 <HAL_RCC_OscConfig+0xe0>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d10c      	bne.n	8000d42 <HAL_RCC_OscConfig+0xa2>
 8000d28:	4bab      	ldr	r3, [pc, #684]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4baa      	ldr	r3, [pc, #680]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d2e:	49ab      	ldr	r1, [pc, #684]	; (8000fdc <HAL_RCC_OscConfig+0x33c>)
 8000d30:	400a      	ands	r2, r1
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	4ba8      	ldr	r3, [pc, #672]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4ba7      	ldr	r3, [pc, #668]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d3a:	49a9      	ldr	r1, [pc, #676]	; (8000fe0 <HAL_RCC_OscConfig+0x340>)
 8000d3c:	400a      	ands	r2, r1
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	e01e      	b.n	8000d80 <HAL_RCC_OscConfig+0xe0>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2b05      	cmp	r3, #5
 8000d48:	d10e      	bne.n	8000d68 <HAL_RCC_OscConfig+0xc8>
 8000d4a:	4ba3      	ldr	r3, [pc, #652]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	4ba2      	ldr	r3, [pc, #648]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	02c9      	lsls	r1, r1, #11
 8000d54:	430a      	orrs	r2, r1
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	4b9f      	ldr	r3, [pc, #636]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b9e      	ldr	r3, [pc, #632]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d5e:	2180      	movs	r1, #128	; 0x80
 8000d60:	0249      	lsls	r1, r1, #9
 8000d62:	430a      	orrs	r2, r1
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	e00b      	b.n	8000d80 <HAL_RCC_OscConfig+0xe0>
 8000d68:	4b9b      	ldr	r3, [pc, #620]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b9a      	ldr	r3, [pc, #616]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d6e:	499b      	ldr	r1, [pc, #620]	; (8000fdc <HAL_RCC_OscConfig+0x33c>)
 8000d70:	400a      	ands	r2, r1
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	4b98      	ldr	r3, [pc, #608]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b97      	ldr	r3, [pc, #604]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d7a:	4999      	ldr	r1, [pc, #612]	; (8000fe0 <HAL_RCC_OscConfig+0x340>)
 8000d7c:	400a      	ands	r2, r1
 8000d7e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d014      	beq.n	8000db2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d88:	f7ff fd36 	bl	80007f8 <HAL_GetTick>
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d90:	e008      	b.n	8000da4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d92:	f7ff fd31 	bl	80007f8 <HAL_GetTick>
 8000d96:	0002      	movs	r2, r0
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	2b64      	cmp	r3, #100	; 0x64
 8000d9e:	d901      	bls.n	8000da4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000da0:	2303      	movs	r3, #3
 8000da2:	e2fd      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da4:	4b8c      	ldr	r3, [pc, #560]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	029b      	lsls	r3, r3, #10
 8000dac:	4013      	ands	r3, r2
 8000dae:	d0f0      	beq.n	8000d92 <HAL_RCC_OscConfig+0xf2>
 8000db0:	e015      	b.n	8000dde <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db2:	f7ff fd21 	bl	80007f8 <HAL_GetTick>
 8000db6:	0003      	movs	r3, r0
 8000db8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dba:	e008      	b.n	8000dce <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dbc:	f7ff fd1c 	bl	80007f8 <HAL_GetTick>
 8000dc0:	0002      	movs	r2, r0
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b64      	cmp	r3, #100	; 0x64
 8000dc8:	d901      	bls.n	8000dce <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e2e8      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dce:	4b82      	ldr	r3, [pc, #520]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	2380      	movs	r3, #128	; 0x80
 8000dd4:	029b      	lsls	r3, r3, #10
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	d1f0      	bne.n	8000dbc <HAL_RCC_OscConfig+0x11c>
 8000dda:	e000      	b.n	8000dde <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ddc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2202      	movs	r2, #2
 8000de4:	4013      	ands	r3, r2
 8000de6:	d100      	bne.n	8000dea <HAL_RCC_OscConfig+0x14a>
 8000de8:	e06c      	b.n	8000ec4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000dea:	4b7b      	ldr	r3, [pc, #492]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	220c      	movs	r2, #12
 8000df0:	4013      	ands	r3, r2
 8000df2:	d00e      	beq.n	8000e12 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000df4:	4b78      	ldr	r3, [pc, #480]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	220c      	movs	r2, #12
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	2b08      	cmp	r3, #8
 8000dfe:	d11f      	bne.n	8000e40 <HAL_RCC_OscConfig+0x1a0>
 8000e00:	4b75      	ldr	r3, [pc, #468]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	23c0      	movs	r3, #192	; 0xc0
 8000e06:	025b      	lsls	r3, r3, #9
 8000e08:	401a      	ands	r2, r3
 8000e0a:	2380      	movs	r3, #128	; 0x80
 8000e0c:	021b      	lsls	r3, r3, #8
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d116      	bne.n	8000e40 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e12:	4b71      	ldr	r3, [pc, #452]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2202      	movs	r2, #2
 8000e18:	4013      	ands	r3, r2
 8000e1a:	d005      	beq.n	8000e28 <HAL_RCC_OscConfig+0x188>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d001      	beq.n	8000e28 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	e2bb      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e28:	4b6b      	ldr	r3, [pc, #428]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	22f8      	movs	r2, #248	; 0xf8
 8000e2e:	4393      	bics	r3, r2
 8000e30:	0019      	movs	r1, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	00da      	lsls	r2, r3, #3
 8000e38:	4b67      	ldr	r3, [pc, #412]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e3e:	e041      	b.n	8000ec4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d024      	beq.n	8000e92 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e48:	4b63      	ldr	r3, [pc, #396]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b62      	ldr	r3, [pc, #392]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e4e:	2101      	movs	r1, #1
 8000e50:	430a      	orrs	r2, r1
 8000e52:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e54:	f7ff fcd0 	bl	80007f8 <HAL_GetTick>
 8000e58:	0003      	movs	r3, r0
 8000e5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e5c:	e008      	b.n	8000e70 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e5e:	f7ff fccb 	bl	80007f8 <HAL_GetTick>
 8000e62:	0002      	movs	r2, r0
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d901      	bls.n	8000e70 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e297      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e70:	4b59      	ldr	r3, [pc, #356]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2202      	movs	r2, #2
 8000e76:	4013      	ands	r3, r2
 8000e78:	d0f1      	beq.n	8000e5e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e7a:	4b57      	ldr	r3, [pc, #348]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	22f8      	movs	r2, #248	; 0xf8
 8000e80:	4393      	bics	r3, r2
 8000e82:	0019      	movs	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	00da      	lsls	r2, r3, #3
 8000e8a:	4b53      	ldr	r3, [pc, #332]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	e018      	b.n	8000ec4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e92:	4b51      	ldr	r3, [pc, #324]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	4b50      	ldr	r3, [pc, #320]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e98:	2101      	movs	r1, #1
 8000e9a:	438a      	bics	r2, r1
 8000e9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9e:	f7ff fcab 	bl	80007f8 <HAL_GetTick>
 8000ea2:	0003      	movs	r3, r0
 8000ea4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea6:	e008      	b.n	8000eba <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ea8:	f7ff fca6 	bl	80007f8 <HAL_GetTick>
 8000eac:	0002      	movs	r2, r0
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e272      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eba:	4b47      	ldr	r3, [pc, #284]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	d1f1      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2208      	movs	r2, #8
 8000eca:	4013      	ands	r3, r2
 8000ecc:	d036      	beq.n	8000f3c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d019      	beq.n	8000f0a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ed6:	4b40      	ldr	r3, [pc, #256]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eda:	4b3f      	ldr	r3, [pc, #252]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000edc:	2101      	movs	r1, #1
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee2:	f7ff fc89 	bl	80007f8 <HAL_GetTick>
 8000ee6:	0003      	movs	r3, r0
 8000ee8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eea:	e008      	b.n	8000efe <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eec:	f7ff fc84 	bl	80007f8 <HAL_GetTick>
 8000ef0:	0002      	movs	r2, r0
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e250      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000efe:	4b36      	ldr	r3, [pc, #216]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f02:	2202      	movs	r2, #2
 8000f04:	4013      	ands	r3, r2
 8000f06:	d0f1      	beq.n	8000eec <HAL_RCC_OscConfig+0x24c>
 8000f08:	e018      	b.n	8000f3c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f0a:	4b33      	ldr	r3, [pc, #204]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f0e:	4b32      	ldr	r3, [pc, #200]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000f10:	2101      	movs	r1, #1
 8000f12:	438a      	bics	r2, r1
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f16:	f7ff fc6f 	bl	80007f8 <HAL_GetTick>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f1e:	e008      	b.n	8000f32 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f20:	f7ff fc6a 	bl	80007f8 <HAL_GetTick>
 8000f24:	0002      	movs	r2, r0
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e236      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f32:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f36:	2202      	movs	r2, #2
 8000f38:	4013      	ands	r3, r2
 8000f3a:	d1f1      	bne.n	8000f20 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2204      	movs	r2, #4
 8000f42:	4013      	ands	r3, r2
 8000f44:	d100      	bne.n	8000f48 <HAL_RCC_OscConfig+0x2a8>
 8000f46:	e0b5      	b.n	80010b4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f48:	201f      	movs	r0, #31
 8000f4a:	183b      	adds	r3, r7, r0
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f50:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000f52:	69da      	ldr	r2, [r3, #28]
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	055b      	lsls	r3, r3, #21
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d110      	bne.n	8000f7e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000f5e:	69da      	ldr	r2, [r3, #28]
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000f62:	2180      	movs	r1, #128	; 0x80
 8000f64:	0549      	lsls	r1, r1, #21
 8000f66:	430a      	orrs	r2, r1
 8000f68:	61da      	str	r2, [r3, #28]
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000f6c:	69da      	ldr	r2, [r3, #28]
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	055b      	lsls	r3, r3, #21
 8000f72:	4013      	ands	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f78:	183b      	adds	r3, r7, r0
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f7e:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <HAL_RCC_OscConfig+0x344>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4013      	ands	r3, r2
 8000f88:	d11a      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <HAL_RCC_OscConfig+0x344>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <HAL_RCC_OscConfig+0x344>)
 8000f90:	2180      	movs	r1, #128	; 0x80
 8000f92:	0049      	lsls	r1, r1, #1
 8000f94:	430a      	orrs	r2, r1
 8000f96:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f98:	f7ff fc2e 	bl	80007f8 <HAL_GetTick>
 8000f9c:	0003      	movs	r3, r0
 8000f9e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fa2:	f7ff fc29 	bl	80007f8 <HAL_GetTick>
 8000fa6:	0002      	movs	r2, r0
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b64      	cmp	r3, #100	; 0x64
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e1f5      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <HAL_RCC_OscConfig+0x344>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d0f0      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d10f      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x348>
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000fca:	6a1a      	ldr	r2, [r3, #32]
 8000fcc:	4b02      	ldr	r3, [pc, #8]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000fce:	2101      	movs	r1, #1
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	621a      	str	r2, [r3, #32]
 8000fd4:	e036      	b.n	8001044 <HAL_RCC_OscConfig+0x3a4>
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	fffeffff 	.word	0xfffeffff
 8000fe0:	fffbffff 	.word	0xfffbffff
 8000fe4:	40007000 	.word	0x40007000
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10c      	bne.n	800100a <HAL_RCC_OscConfig+0x36a>
 8000ff0:	4bca      	ldr	r3, [pc, #808]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8000ff2:	6a1a      	ldr	r2, [r3, #32]
 8000ff4:	4bc9      	ldr	r3, [pc, #804]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	438a      	bics	r2, r1
 8000ffa:	621a      	str	r2, [r3, #32]
 8000ffc:	4bc7      	ldr	r3, [pc, #796]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8000ffe:	6a1a      	ldr	r2, [r3, #32]
 8001000:	4bc6      	ldr	r3, [pc, #792]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001002:	2104      	movs	r1, #4
 8001004:	438a      	bics	r2, r1
 8001006:	621a      	str	r2, [r3, #32]
 8001008:	e01c      	b.n	8001044 <HAL_RCC_OscConfig+0x3a4>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	2b05      	cmp	r3, #5
 8001010:	d10c      	bne.n	800102c <HAL_RCC_OscConfig+0x38c>
 8001012:	4bc2      	ldr	r3, [pc, #776]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001014:	6a1a      	ldr	r2, [r3, #32]
 8001016:	4bc1      	ldr	r3, [pc, #772]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001018:	2104      	movs	r1, #4
 800101a:	430a      	orrs	r2, r1
 800101c:	621a      	str	r2, [r3, #32]
 800101e:	4bbf      	ldr	r3, [pc, #764]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001020:	6a1a      	ldr	r2, [r3, #32]
 8001022:	4bbe      	ldr	r3, [pc, #760]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001024:	2101      	movs	r1, #1
 8001026:	430a      	orrs	r2, r1
 8001028:	621a      	str	r2, [r3, #32]
 800102a:	e00b      	b.n	8001044 <HAL_RCC_OscConfig+0x3a4>
 800102c:	4bbb      	ldr	r3, [pc, #748]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800102e:	6a1a      	ldr	r2, [r3, #32]
 8001030:	4bba      	ldr	r3, [pc, #744]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001032:	2101      	movs	r1, #1
 8001034:	438a      	bics	r2, r1
 8001036:	621a      	str	r2, [r3, #32]
 8001038:	4bb8      	ldr	r3, [pc, #736]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800103a:	6a1a      	ldr	r2, [r3, #32]
 800103c:	4bb7      	ldr	r3, [pc, #732]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800103e:	2104      	movs	r1, #4
 8001040:	438a      	bics	r2, r1
 8001042:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d014      	beq.n	8001076 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800104c:	f7ff fbd4 	bl	80007f8 <HAL_GetTick>
 8001050:	0003      	movs	r3, r0
 8001052:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001054:	e009      	b.n	800106a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001056:	f7ff fbcf 	bl	80007f8 <HAL_GetTick>
 800105a:	0002      	movs	r2, r0
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	4aaf      	ldr	r2, [pc, #700]	; (8001320 <HAL_RCC_OscConfig+0x680>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e19a      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800106a:	4bac      	ldr	r3, [pc, #688]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	2202      	movs	r2, #2
 8001070:	4013      	ands	r3, r2
 8001072:	d0f0      	beq.n	8001056 <HAL_RCC_OscConfig+0x3b6>
 8001074:	e013      	b.n	800109e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001076:	f7ff fbbf 	bl	80007f8 <HAL_GetTick>
 800107a:	0003      	movs	r3, r0
 800107c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800107e:	e009      	b.n	8001094 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001080:	f7ff fbba 	bl	80007f8 <HAL_GetTick>
 8001084:	0002      	movs	r2, r0
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	4aa5      	ldr	r2, [pc, #660]	; (8001320 <HAL_RCC_OscConfig+0x680>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e185      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001094:	4ba1      	ldr	r3, [pc, #644]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	2202      	movs	r2, #2
 800109a:	4013      	ands	r3, r2
 800109c:	d1f0      	bne.n	8001080 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800109e:	231f      	movs	r3, #31
 80010a0:	18fb      	adds	r3, r7, r3
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d105      	bne.n	80010b4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010a8:	4b9c      	ldr	r3, [pc, #624]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80010aa:	69da      	ldr	r2, [r3, #28]
 80010ac:	4b9b      	ldr	r3, [pc, #620]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80010ae:	499d      	ldr	r1, [pc, #628]	; (8001324 <HAL_RCC_OscConfig+0x684>)
 80010b0:	400a      	ands	r2, r1
 80010b2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2210      	movs	r2, #16
 80010ba:	4013      	ands	r3, r2
 80010bc:	d063      	beq.n	8001186 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d12a      	bne.n	800111c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010c6:	4b95      	ldr	r3, [pc, #596]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80010c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ca:	4b94      	ldr	r3, [pc, #592]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80010cc:	2104      	movs	r1, #4
 80010ce:	430a      	orrs	r2, r1
 80010d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80010d2:	4b92      	ldr	r3, [pc, #584]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80010d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d6:	4b91      	ldr	r3, [pc, #580]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80010d8:	2101      	movs	r1, #1
 80010da:	430a      	orrs	r2, r1
 80010dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010de:	f7ff fb8b 	bl	80007f8 <HAL_GetTick>
 80010e2:	0003      	movs	r3, r0
 80010e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010e8:	f7ff fb86 	bl	80007f8 <HAL_GetTick>
 80010ec:	0002      	movs	r2, r0
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e152      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010fa:	4b88      	ldr	r3, [pc, #544]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80010fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fe:	2202      	movs	r2, #2
 8001100:	4013      	ands	r3, r2
 8001102:	d0f1      	beq.n	80010e8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001104:	4b85      	ldr	r3, [pc, #532]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001108:	22f8      	movs	r2, #248	; 0xf8
 800110a:	4393      	bics	r3, r2
 800110c:	0019      	movs	r1, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	00da      	lsls	r2, r3, #3
 8001114:	4b81      	ldr	r3, [pc, #516]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001116:	430a      	orrs	r2, r1
 8001118:	635a      	str	r2, [r3, #52]	; 0x34
 800111a:	e034      	b.n	8001186 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	3305      	adds	r3, #5
 8001122:	d111      	bne.n	8001148 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001124:	4b7d      	ldr	r3, [pc, #500]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001128:	4b7c      	ldr	r3, [pc, #496]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800112a:	2104      	movs	r1, #4
 800112c:	438a      	bics	r2, r1
 800112e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001130:	4b7a      	ldr	r3, [pc, #488]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001134:	22f8      	movs	r2, #248	; 0xf8
 8001136:	4393      	bics	r3, r2
 8001138:	0019      	movs	r1, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	00da      	lsls	r2, r3, #3
 8001140:	4b76      	ldr	r3, [pc, #472]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001142:	430a      	orrs	r2, r1
 8001144:	635a      	str	r2, [r3, #52]	; 0x34
 8001146:	e01e      	b.n	8001186 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001148:	4b74      	ldr	r3, [pc, #464]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800114a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800114c:	4b73      	ldr	r3, [pc, #460]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800114e:	2104      	movs	r1, #4
 8001150:	430a      	orrs	r2, r1
 8001152:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001154:	4b71      	ldr	r3, [pc, #452]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001158:	4b70      	ldr	r3, [pc, #448]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800115a:	2101      	movs	r1, #1
 800115c:	438a      	bics	r2, r1
 800115e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001160:	f7ff fb4a 	bl	80007f8 <HAL_GetTick>
 8001164:	0003      	movs	r3, r0
 8001166:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800116a:	f7ff fb45 	bl	80007f8 <HAL_GetTick>
 800116e:	0002      	movs	r2, r0
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e111      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800117c:	4b67      	ldr	r3, [pc, #412]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800117e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001180:	2202      	movs	r2, #2
 8001182:	4013      	ands	r3, r2
 8001184:	d1f1      	bne.n	800116a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2220      	movs	r2, #32
 800118c:	4013      	ands	r3, r2
 800118e:	d05c      	beq.n	800124a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001190:	4b62      	ldr	r3, [pc, #392]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	220c      	movs	r2, #12
 8001196:	4013      	ands	r3, r2
 8001198:	2b0c      	cmp	r3, #12
 800119a:	d00e      	beq.n	80011ba <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800119c:	4b5f      	ldr	r3, [pc, #380]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	220c      	movs	r2, #12
 80011a2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d114      	bne.n	80011d2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80011a8:	4b5c      	ldr	r3, [pc, #368]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	23c0      	movs	r3, #192	; 0xc0
 80011ae:	025b      	lsls	r3, r3, #9
 80011b0:	401a      	ands	r2, r3
 80011b2:	23c0      	movs	r3, #192	; 0xc0
 80011b4:	025b      	lsls	r3, r3, #9
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d10b      	bne.n	80011d2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80011ba:	4b58      	ldr	r3, [pc, #352]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80011bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011be:	2380      	movs	r3, #128	; 0x80
 80011c0:	025b      	lsls	r3, r3, #9
 80011c2:	4013      	ands	r3, r2
 80011c4:	d040      	beq.n	8001248 <HAL_RCC_OscConfig+0x5a8>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d03c      	beq.n	8001248 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e0e6      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d01b      	beq.n	8001212 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80011da:	4b50      	ldr	r3, [pc, #320]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80011dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011de:	4b4f      	ldr	r3, [pc, #316]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80011e0:	2180      	movs	r1, #128	; 0x80
 80011e2:	0249      	lsls	r1, r1, #9
 80011e4:	430a      	orrs	r2, r1
 80011e6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e8:	f7ff fb06 	bl	80007f8 <HAL_GetTick>
 80011ec:	0003      	movs	r3, r0
 80011ee:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011f2:	f7ff fb01 	bl	80007f8 <HAL_GetTick>
 80011f6:	0002      	movs	r2, r0
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e0cd      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001204:	4b45      	ldr	r3, [pc, #276]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	025b      	lsls	r3, r3, #9
 800120c:	4013      	ands	r3, r2
 800120e:	d0f0      	beq.n	80011f2 <HAL_RCC_OscConfig+0x552>
 8001210:	e01b      	b.n	800124a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001212:	4b42      	ldr	r3, [pc, #264]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001216:	4b41      	ldr	r3, [pc, #260]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001218:	4943      	ldr	r1, [pc, #268]	; (8001328 <HAL_RCC_OscConfig+0x688>)
 800121a:	400a      	ands	r2, r1
 800121c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121e:	f7ff faeb 	bl	80007f8 <HAL_GetTick>
 8001222:	0003      	movs	r3, r0
 8001224:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001228:	f7ff fae6 	bl	80007f8 <HAL_GetTick>
 800122c:	0002      	movs	r2, r0
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e0b2      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800123a:	4b38      	ldr	r3, [pc, #224]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800123c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	025b      	lsls	r3, r3, #9
 8001242:	4013      	ands	r3, r2
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0x588>
 8001246:	e000      	b.n	800124a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001248:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	2b00      	cmp	r3, #0
 8001250:	d100      	bne.n	8001254 <HAL_RCC_OscConfig+0x5b4>
 8001252:	e0a4      	b.n	800139e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001254:	4b31      	ldr	r3, [pc, #196]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	220c      	movs	r2, #12
 800125a:	4013      	ands	r3, r2
 800125c:	2b08      	cmp	r3, #8
 800125e:	d100      	bne.n	8001262 <HAL_RCC_OscConfig+0x5c2>
 8001260:	e078      	b.n	8001354 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	2b02      	cmp	r3, #2
 8001268:	d14c      	bne.n	8001304 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126a:	4b2c      	ldr	r3, [pc, #176]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4b2b      	ldr	r3, [pc, #172]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001270:	492e      	ldr	r1, [pc, #184]	; (800132c <HAL_RCC_OscConfig+0x68c>)
 8001272:	400a      	ands	r2, r1
 8001274:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001276:	f7ff fabf 	bl	80007f8 <HAL_GetTick>
 800127a:	0003      	movs	r3, r0
 800127c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001280:	f7ff faba 	bl	80007f8 <HAL_GetTick>
 8001284:	0002      	movs	r2, r0
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e086      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001292:	4b22      	ldr	r3, [pc, #136]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	049b      	lsls	r3, r3, #18
 800129a:	4013      	ands	r3, r2
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80012a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a2:	220f      	movs	r2, #15
 80012a4:	4393      	bics	r3, r2
 80012a6:	0019      	movs	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012ac:	4b1b      	ldr	r3, [pc, #108]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80012ae:	430a      	orrs	r2, r1
 80012b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4a1e      	ldr	r2, [pc, #120]	; (8001330 <HAL_RCC_OscConfig+0x690>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	0019      	movs	r1, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c4:	431a      	orrs	r2, r3
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80012c8:	430a      	orrs	r2, r1
 80012ca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80012d2:	2180      	movs	r1, #128	; 0x80
 80012d4:	0449      	lsls	r1, r1, #17
 80012d6:	430a      	orrs	r2, r1
 80012d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012da:	f7ff fa8d 	bl	80007f8 <HAL_GetTick>
 80012de:	0003      	movs	r3, r0
 80012e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012e4:	f7ff fa88 	bl	80007f8 <HAL_GetTick>
 80012e8:	0002      	movs	r2, r0
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e054      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	049b      	lsls	r3, r3, #18
 80012fe:	4013      	ands	r3, r2
 8001300:	d0f0      	beq.n	80012e4 <HAL_RCC_OscConfig+0x644>
 8001302:	e04c      	b.n	800139e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800130a:	4908      	ldr	r1, [pc, #32]	; (800132c <HAL_RCC_OscConfig+0x68c>)
 800130c:	400a      	ands	r2, r1
 800130e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff fa72 	bl	80007f8 <HAL_GetTick>
 8001314:	0003      	movs	r3, r0
 8001316:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001318:	e015      	b.n	8001346 <HAL_RCC_OscConfig+0x6a6>
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	40021000 	.word	0x40021000
 8001320:	00001388 	.word	0x00001388
 8001324:	efffffff 	.word	0xefffffff
 8001328:	fffeffff 	.word	0xfffeffff
 800132c:	feffffff 	.word	0xfeffffff
 8001330:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001334:	f7ff fa60 	bl	80007f8 <HAL_GetTick>
 8001338:	0002      	movs	r2, r0
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e02c      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <HAL_RCC_OscConfig+0x708>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	049b      	lsls	r3, r3, #18
 800134e:	4013      	ands	r3, r2
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0x694>
 8001352:	e024      	b.n	800139e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001358:	2b01      	cmp	r3, #1
 800135a:	d101      	bne.n	8001360 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e01f      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <HAL_RCC_OscConfig+0x708>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <HAL_RCC_OscConfig+0x708>)
 8001368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	23c0      	movs	r3, #192	; 0xc0
 8001370:	025b      	lsls	r3, r3, #9
 8001372:	401a      	ands	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001378:	429a      	cmp	r2, r3
 800137a:	d10e      	bne.n	800139a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	220f      	movs	r2, #15
 8001380:	401a      	ands	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001386:	429a      	cmp	r2, r3
 8001388:	d107      	bne.n	800139a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	23f0      	movs	r3, #240	; 0xf0
 800138e:	039b      	lsls	r3, r3, #14
 8001390:	401a      	ands	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001396:	429a      	cmp	r2, r3
 8001398:	d001      	beq.n	800139e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	0018      	movs	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b008      	add	sp, #32
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40021000 	.word	0x40021000

080013ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e0bf      	b.n	8001540 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013c0:	4b61      	ldr	r3, [pc, #388]	; (8001548 <HAL_RCC_ClockConfig+0x19c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2201      	movs	r2, #1
 80013c6:	4013      	ands	r3, r2
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d911      	bls.n	80013f2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ce:	4b5e      	ldr	r3, [pc, #376]	; (8001548 <HAL_RCC_ClockConfig+0x19c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2201      	movs	r2, #1
 80013d4:	4393      	bics	r3, r2
 80013d6:	0019      	movs	r1, r3
 80013d8:	4b5b      	ldr	r3, [pc, #364]	; (8001548 <HAL_RCC_ClockConfig+0x19c>)
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013e0:	4b59      	ldr	r3, [pc, #356]	; (8001548 <HAL_RCC_ClockConfig+0x19c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2201      	movs	r2, #1
 80013e6:	4013      	ands	r3, r2
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d001      	beq.n	80013f2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e0a6      	b.n	8001540 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2202      	movs	r2, #2
 80013f8:	4013      	ands	r3, r2
 80013fa:	d015      	beq.n	8001428 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2204      	movs	r2, #4
 8001402:	4013      	ands	r3, r2
 8001404:	d006      	beq.n	8001414 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001406:	4b51      	ldr	r3, [pc, #324]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	4b50      	ldr	r3, [pc, #320]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 800140c:	21e0      	movs	r1, #224	; 0xe0
 800140e:	00c9      	lsls	r1, r1, #3
 8001410:	430a      	orrs	r2, r1
 8001412:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001414:	4b4d      	ldr	r3, [pc, #308]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	22f0      	movs	r2, #240	; 0xf0
 800141a:	4393      	bics	r3, r2
 800141c:	0019      	movs	r1, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	4b4a      	ldr	r3, [pc, #296]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 8001424:	430a      	orrs	r2, r1
 8001426:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2201      	movs	r2, #1
 800142e:	4013      	ands	r3, r2
 8001430:	d04c      	beq.n	80014cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d107      	bne.n	800144a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143a:	4b44      	ldr	r3, [pc, #272]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	029b      	lsls	r3, r3, #10
 8001442:	4013      	ands	r3, r2
 8001444:	d120      	bne.n	8001488 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e07a      	b.n	8001540 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d107      	bne.n	8001462 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001452:	4b3e      	ldr	r3, [pc, #248]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	049b      	lsls	r3, r3, #18
 800145a:	4013      	ands	r3, r2
 800145c:	d114      	bne.n	8001488 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e06e      	b.n	8001540 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b03      	cmp	r3, #3
 8001468:	d107      	bne.n	800147a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800146a:	4b38      	ldr	r3, [pc, #224]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 800146c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	025b      	lsls	r3, r3, #9
 8001472:	4013      	ands	r3, r2
 8001474:	d108      	bne.n	8001488 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e062      	b.n	8001540 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147a:	4b34      	ldr	r3, [pc, #208]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2202      	movs	r2, #2
 8001480:	4013      	ands	r3, r2
 8001482:	d101      	bne.n	8001488 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e05b      	b.n	8001540 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001488:	4b30      	ldr	r3, [pc, #192]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2203      	movs	r2, #3
 800148e:	4393      	bics	r3, r2
 8001490:	0019      	movs	r1, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 8001498:	430a      	orrs	r2, r1
 800149a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800149c:	f7ff f9ac 	bl	80007f8 <HAL_GetTick>
 80014a0:	0003      	movs	r3, r0
 80014a2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a4:	e009      	b.n	80014ba <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a6:	f7ff f9a7 	bl	80007f8 <HAL_GetTick>
 80014aa:	0002      	movs	r2, r0
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	4a27      	ldr	r2, [pc, #156]	; (8001550 <HAL_RCC_ClockConfig+0x1a4>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e042      	b.n	8001540 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ba:	4b24      	ldr	r3, [pc, #144]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	220c      	movs	r2, #12
 80014c0:	401a      	ands	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d1ec      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014cc:	4b1e      	ldr	r3, [pc, #120]	; (8001548 <HAL_RCC_ClockConfig+0x19c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2201      	movs	r2, #1
 80014d2:	4013      	ands	r3, r2
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d211      	bcs.n	80014fe <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014da:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <HAL_RCC_ClockConfig+0x19c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2201      	movs	r2, #1
 80014e0:	4393      	bics	r3, r2
 80014e2:	0019      	movs	r1, r3
 80014e4:	4b18      	ldr	r3, [pc, #96]	; (8001548 <HAL_RCC_ClockConfig+0x19c>)
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ec:	4b16      	ldr	r3, [pc, #88]	; (8001548 <HAL_RCC_ClockConfig+0x19c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2201      	movs	r2, #1
 80014f2:	4013      	ands	r3, r2
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d001      	beq.n	80014fe <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e020      	b.n	8001540 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2204      	movs	r2, #4
 8001504:	4013      	ands	r3, r2
 8001506:	d009      	beq.n	800151c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001508:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	4a11      	ldr	r2, [pc, #68]	; (8001554 <HAL_RCC_ClockConfig+0x1a8>)
 800150e:	4013      	ands	r3, r2
 8001510:	0019      	movs	r1, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68da      	ldr	r2, [r3, #12]
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 8001518:	430a      	orrs	r2, r1
 800151a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800151c:	f000 f820 	bl	8001560 <HAL_RCC_GetSysClockFreq>
 8001520:	0001      	movs	r1, r0
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	220f      	movs	r2, #15
 800152a:	4013      	ands	r3, r2
 800152c:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <HAL_RCC_ClockConfig+0x1ac>)
 800152e:	5cd3      	ldrb	r3, [r2, r3]
 8001530:	000a      	movs	r2, r1
 8001532:	40da      	lsrs	r2, r3
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_RCC_ClockConfig+0x1b0>)
 8001536:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001538:	2000      	movs	r0, #0
 800153a:	f7ff f917 	bl	800076c <HAL_InitTick>
  
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	0018      	movs	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	b004      	add	sp, #16
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40022000 	.word	0x40022000
 800154c:	40021000 	.word	0x40021000
 8001550:	00001388 	.word	0x00001388
 8001554:	fffff8ff 	.word	0xfffff8ff
 8001558:	08003234 	.word	0x08003234
 800155c:	20000000 	.word	0x20000000

08001560 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b08f      	sub	sp, #60	; 0x3c
 8001564:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001566:	2314      	movs	r3, #20
 8001568:	18fb      	adds	r3, r7, r3
 800156a:	4a38      	ldr	r2, [pc, #224]	; (800164c <HAL_RCC_GetSysClockFreq+0xec>)
 800156c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800156e:	c313      	stmia	r3!, {r0, r1, r4}
 8001570:	6812      	ldr	r2, [r2, #0]
 8001572:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	4a36      	ldr	r2, [pc, #216]	; (8001650 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001578:	ca13      	ldmia	r2!, {r0, r1, r4}
 800157a:	c313      	stmia	r3!, {r0, r1, r4}
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001584:	2300      	movs	r3, #0
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
 8001588:	2300      	movs	r3, #0
 800158a:	637b      	str	r3, [r7, #52]	; 0x34
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001590:	2300      	movs	r3, #0
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001594:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800159a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159c:	220c      	movs	r2, #12
 800159e:	4013      	ands	r3, r2
 80015a0:	2b0c      	cmp	r3, #12
 80015a2:	d047      	beq.n	8001634 <HAL_RCC_GetSysClockFreq+0xd4>
 80015a4:	d849      	bhi.n	800163a <HAL_RCC_GetSysClockFreq+0xda>
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d002      	beq.n	80015b0 <HAL_RCC_GetSysClockFreq+0x50>
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d003      	beq.n	80015b6 <HAL_RCC_GetSysClockFreq+0x56>
 80015ae:	e044      	b.n	800163a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015b0:	4b29      	ldr	r3, [pc, #164]	; (8001658 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015b4:	e044      	b.n	8001640 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80015b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b8:	0c9b      	lsrs	r3, r3, #18
 80015ba:	220f      	movs	r2, #15
 80015bc:	4013      	ands	r3, r2
 80015be:	2214      	movs	r2, #20
 80015c0:	18ba      	adds	r2, r7, r2
 80015c2:	5cd3      	ldrb	r3, [r2, r3]
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80015c6:	4b23      	ldr	r3, [pc, #140]	; (8001654 <HAL_RCC_GetSysClockFreq+0xf4>)
 80015c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ca:	220f      	movs	r2, #15
 80015cc:	4013      	ands	r3, r2
 80015ce:	1d3a      	adds	r2, r7, #4
 80015d0:	5cd3      	ldrb	r3, [r2, r3]
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80015d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015d6:	23c0      	movs	r3, #192	; 0xc0
 80015d8:	025b      	lsls	r3, r3, #9
 80015da:	401a      	ands	r2, r3
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	025b      	lsls	r3, r3, #9
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d109      	bne.n	80015f8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015e6:	481c      	ldr	r0, [pc, #112]	; (8001658 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015e8:	f7fe fd98 	bl	800011c <__udivsi3>
 80015ec:	0003      	movs	r3, r0
 80015ee:	001a      	movs	r2, r3
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	4353      	muls	r3, r2
 80015f4:	637b      	str	r3, [r7, #52]	; 0x34
 80015f6:	e01a      	b.n	800162e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80015f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015fa:	23c0      	movs	r3, #192	; 0xc0
 80015fc:	025b      	lsls	r3, r3, #9
 80015fe:	401a      	ands	r2, r3
 8001600:	23c0      	movs	r3, #192	; 0xc0
 8001602:	025b      	lsls	r3, r3, #9
 8001604:	429a      	cmp	r2, r3
 8001606:	d109      	bne.n	800161c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001608:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800160a:	4814      	ldr	r0, [pc, #80]	; (800165c <HAL_RCC_GetSysClockFreq+0xfc>)
 800160c:	f7fe fd86 	bl	800011c <__udivsi3>
 8001610:	0003      	movs	r3, r0
 8001612:	001a      	movs	r2, r3
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	4353      	muls	r3, r2
 8001618:	637b      	str	r3, [r7, #52]	; 0x34
 800161a:	e008      	b.n	800162e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800161c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800161e:	480e      	ldr	r0, [pc, #56]	; (8001658 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001620:	f7fe fd7c 	bl	800011c <__udivsi3>
 8001624:	0003      	movs	r3, r0
 8001626:	001a      	movs	r2, r3
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	4353      	muls	r3, r2
 800162c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800162e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001630:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001632:	e005      	b.n	8001640 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001636:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001638:	e002      	b.n	8001640 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800163a:	4b07      	ldr	r3, [pc, #28]	; (8001658 <HAL_RCC_GetSysClockFreq+0xf8>)
 800163c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800163e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001642:	0018      	movs	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	b00f      	add	sp, #60	; 0x3c
 8001648:	bd90      	pop	{r4, r7, pc}
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	08003214 	.word	0x08003214
 8001650:	08003224 	.word	0x08003224
 8001654:	40021000 	.word	0x40021000
 8001658:	007a1200 	.word	0x007a1200
 800165c:	02dc6c00 	.word	0x02dc6c00

08001660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001664:	4b02      	ldr	r3, [pc, #8]	; (8001670 <HAL_RCC_GetHCLKFreq+0x10>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	0018      	movs	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	20000000 	.word	0x20000000

08001674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001678:	f7ff fff2 	bl	8001660 <HAL_RCC_GetHCLKFreq>
 800167c:	0001      	movs	r1, r0
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	0a1b      	lsrs	r3, r3, #8
 8001684:	2207      	movs	r2, #7
 8001686:	4013      	ands	r3, r2
 8001688:	4a04      	ldr	r2, [pc, #16]	; (800169c <HAL_RCC_GetPCLK1Freq+0x28>)
 800168a:	5cd3      	ldrb	r3, [r2, r3]
 800168c:	40d9      	lsrs	r1, r3
 800168e:	000b      	movs	r3, r1
}    
 8001690:	0018      	movs	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	40021000 	.word	0x40021000
 800169c:	08003244 	.word	0x08003244

080016a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	025b      	lsls	r3, r3, #9
 80016b8:	4013      	ands	r3, r2
 80016ba:	d100      	bne.n	80016be <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80016bc:	e08e      	b.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80016be:	2017      	movs	r0, #23
 80016c0:	183b      	adds	r3, r7, r0
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016c6:	4b6e      	ldr	r3, [pc, #440]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016c8:	69da      	ldr	r2, [r3, #28]
 80016ca:	2380      	movs	r3, #128	; 0x80
 80016cc:	055b      	lsls	r3, r3, #21
 80016ce:	4013      	ands	r3, r2
 80016d0:	d110      	bne.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	4b6b      	ldr	r3, [pc, #428]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016d4:	69da      	ldr	r2, [r3, #28]
 80016d6:	4b6a      	ldr	r3, [pc, #424]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016d8:	2180      	movs	r1, #128	; 0x80
 80016da:	0549      	lsls	r1, r1, #21
 80016dc:	430a      	orrs	r2, r1
 80016de:	61da      	str	r2, [r3, #28]
 80016e0:	4b67      	ldr	r3, [pc, #412]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016e2:	69da      	ldr	r2, [r3, #28]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	055b      	lsls	r3, r3, #21
 80016e8:	4013      	ands	r3, r2
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ee:	183b      	adds	r3, r7, r0
 80016f0:	2201      	movs	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f4:	4b63      	ldr	r3, [pc, #396]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4013      	ands	r3, r2
 80016fe:	d11a      	bne.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001700:	4b60      	ldr	r3, [pc, #384]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b5f      	ldr	r3, [pc, #380]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	0049      	lsls	r1, r1, #1
 800170a:	430a      	orrs	r2, r1
 800170c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170e:	f7ff f873 	bl	80007f8 <HAL_GetTick>
 8001712:	0003      	movs	r3, r0
 8001714:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001716:	e008      	b.n	800172a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001718:	f7ff f86e 	bl	80007f8 <HAL_GetTick>
 800171c:	0002      	movs	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b64      	cmp	r3, #100	; 0x64
 8001724:	d901      	bls.n	800172a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e0a6      	b.n	8001878 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172a:	4b56      	ldr	r3, [pc, #344]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4013      	ands	r3, r2
 8001734:	d0f0      	beq.n	8001718 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001736:	4b52      	ldr	r3, [pc, #328]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001738:	6a1a      	ldr	r2, [r3, #32]
 800173a:	23c0      	movs	r3, #192	; 0xc0
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4013      	ands	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d034      	beq.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	23c0      	movs	r3, #192	; 0xc0
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4013      	ands	r3, r2
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	429a      	cmp	r2, r3
 8001756:	d02c      	beq.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001758:	4b49      	ldr	r3, [pc, #292]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	4a4a      	ldr	r2, [pc, #296]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800175e:	4013      	ands	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001762:	4b47      	ldr	r3, [pc, #284]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001764:	6a1a      	ldr	r2, [r3, #32]
 8001766:	4b46      	ldr	r3, [pc, #280]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001768:	2180      	movs	r1, #128	; 0x80
 800176a:	0249      	lsls	r1, r1, #9
 800176c:	430a      	orrs	r2, r1
 800176e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001770:	4b43      	ldr	r3, [pc, #268]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001772:	6a1a      	ldr	r2, [r3, #32]
 8001774:	4b42      	ldr	r3, [pc, #264]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001776:	4945      	ldr	r1, [pc, #276]	; (800188c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001778:	400a      	ands	r2, r1
 800177a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800177c:	4b40      	ldr	r3, [pc, #256]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2201      	movs	r2, #1
 8001786:	4013      	ands	r3, r2
 8001788:	d013      	beq.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178a:	f7ff f835 	bl	80007f8 <HAL_GetTick>
 800178e:	0003      	movs	r3, r0
 8001790:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001792:	e009      	b.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001794:	f7ff f830 	bl	80007f8 <HAL_GetTick>
 8001798:	0002      	movs	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	4a3c      	ldr	r2, [pc, #240]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e067      	b.n	8001878 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a8:	4b35      	ldr	r3, [pc, #212]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	2202      	movs	r2, #2
 80017ae:	4013      	ands	r3, r2
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017b2:	4b33      	ldr	r3, [pc, #204]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	4a34      	ldr	r2, [pc, #208]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	0019      	movs	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	4b2f      	ldr	r3, [pc, #188]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017c2:	430a      	orrs	r2, r1
 80017c4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017c6:	2317      	movs	r3, #23
 80017c8:	18fb      	adds	r3, r7, r3
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d105      	bne.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d0:	4b2b      	ldr	r3, [pc, #172]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017d2:	69da      	ldr	r2, [r3, #28]
 80017d4:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017d6:	492f      	ldr	r1, [pc, #188]	; (8001894 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80017d8:	400a      	ands	r2, r1
 80017da:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2201      	movs	r2, #1
 80017e2:	4013      	ands	r3, r2
 80017e4:	d009      	beq.n	80017fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017e6:	4b26      	ldr	r3, [pc, #152]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	2203      	movs	r2, #3
 80017ec:	4393      	bics	r3, r2
 80017ee:	0019      	movs	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	4b22      	ldr	r3, [pc, #136]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017f6:	430a      	orrs	r2, r1
 80017f8:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2202      	movs	r2, #2
 8001800:	4013      	ands	r3, r2
 8001802:	d009      	beq.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001804:	4b1e      	ldr	r3, [pc, #120]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	4a23      	ldr	r2, [pc, #140]	; (8001898 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800180a:	4013      	ands	r3, r2
 800180c:	0019      	movs	r1, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001814:	430a      	orrs	r2, r1
 8001816:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2220      	movs	r2, #32
 800181e:	4013      	ands	r3, r2
 8001820:	d009      	beq.n	8001836 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	2210      	movs	r2, #16
 8001828:	4393      	bics	r3, r2
 800182a:	0019      	movs	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001832:	430a      	orrs	r2, r1
 8001834:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	029b      	lsls	r3, r3, #10
 800183e:	4013      	ands	r3, r2
 8001840:	d009      	beq.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	2280      	movs	r2, #128	; 0x80
 8001848:	4393      	bics	r3, r2
 800184a:	0019      	movs	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	699a      	ldr	r2, [r3, #24]
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001852:	430a      	orrs	r2, r1
 8001854:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	4013      	ands	r3, r2
 8001860:	d009      	beq.n	8001876 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	2240      	movs	r2, #64	; 0x40
 8001868:	4393      	bics	r3, r2
 800186a:	0019      	movs	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	695a      	ldr	r2, [r3, #20]
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001872:	430a      	orrs	r2, r1
 8001874:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	0018      	movs	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	b006      	add	sp, #24
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40021000 	.word	0x40021000
 8001884:	40007000 	.word	0x40007000
 8001888:	fffffcff 	.word	0xfffffcff
 800188c:	fffeffff 	.word	0xfffeffff
 8001890:	00001388 	.word	0x00001388
 8001894:	efffffff 	.word	0xefffffff
 8001898:	fffcffff 	.word	0xfffcffff

0800189c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e044      	b.n	8001938 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d107      	bne.n	80018c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2274      	movs	r2, #116	; 0x74
 80018ba:	2100      	movs	r1, #0
 80018bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	0018      	movs	r0, r3
 80018c2:	f7fe fe11 	bl	80004e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2224      	movs	r2, #36	; 0x24
 80018ca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2101      	movs	r1, #1
 80018d8:	438a      	bics	r2, r1
 80018da:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	0018      	movs	r0, r3
 80018e0:	f000 f920 	bl	8001b24 <UART_SetConfig>
 80018e4:	0003      	movs	r3, r0
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d101      	bne.n	80018ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e024      	b.n	8001938 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	0018      	movs	r0, r3
 80018fa:	f000 fa9b 	bl	8001e34 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	490d      	ldr	r1, [pc, #52]	; (8001940 <HAL_UART_Init+0xa4>)
 800190a:	400a      	ands	r2, r1
 800190c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	212a      	movs	r1, #42	; 0x2a
 800191a:	438a      	bics	r2, r1
 800191c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2101      	movs	r1, #1
 800192a:	430a      	orrs	r2, r1
 800192c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	0018      	movs	r0, r3
 8001932:	f000 fb33 	bl	8001f9c <UART_CheckIdleState>
 8001936:	0003      	movs	r3, r0
}
 8001938:	0018      	movs	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	b002      	add	sp, #8
 800193e:	bd80      	pop	{r7, pc}
 8001940:	ffffb7ff 	.word	0xffffb7ff

08001944 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af02      	add	r7, sp, #8
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	1dbb      	adds	r3, r7, #6
 8001952:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001958:	2b20      	cmp	r3, #32
 800195a:	d000      	beq.n	800195e <HAL_UART_Receive+0x1a>
 800195c:	e0da      	b.n	8001b14 <HAL_UART_Receive+0x1d0>
  {
    if ((pData == NULL) || (Size == 0U))
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_UART_Receive+0x28>
 8001964:	1dbb      	adds	r3, r7, #6
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0d2      	b.n	8001b16 <HAL_UART_Receive+0x1d2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	015b      	lsls	r3, r3, #5
 8001978:	429a      	cmp	r2, r3
 800197a:	d109      	bne.n	8001990 <HAL_UART_Receive+0x4c>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d105      	bne.n	8001990 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	2201      	movs	r2, #1
 8001988:	4013      	ands	r3, r2
 800198a:	d001      	beq.n	8001990 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0c2      	b.n	8001b16 <HAL_UART_Receive+0x1d2>
      }
    }

    __HAL_LOCK(huart);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2274      	movs	r2, #116	; 0x74
 8001994:	5c9b      	ldrb	r3, [r3, r2]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d101      	bne.n	800199e <HAL_UART_Receive+0x5a>
 800199a:	2302      	movs	r3, #2
 800199c:	e0bb      	b.n	8001b16 <HAL_UART_Receive+0x1d2>
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2274      	movs	r2, #116	; 0x74
 80019a2:	2101      	movs	r1, #1
 80019a4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2280      	movs	r2, #128	; 0x80
 80019aa:	2100      	movs	r1, #0
 80019ac:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2222      	movs	r2, #34	; 0x22
 80019b2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80019ba:	f7fe ff1d 	bl	80007f8 <HAL_GetTick>
 80019be:	0003      	movs	r3, r0
 80019c0:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1dba      	adds	r2, r7, #6
 80019c6:	2158      	movs	r1, #88	; 0x58
 80019c8:	8812      	ldrh	r2, [r2, #0]
 80019ca:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	1dba      	adds	r2, r7, #6
 80019d0:	215a      	movs	r1, #90	; 0x5a
 80019d2:	8812      	ldrh	r2, [r2, #0]
 80019d4:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	015b      	lsls	r3, r3, #5
 80019de:	429a      	cmp	r2, r3
 80019e0:	d10d      	bne.n	80019fe <HAL_UART_Receive+0xba>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d104      	bne.n	80019f4 <HAL_UART_Receive+0xb0>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	225c      	movs	r2, #92	; 0x5c
 80019ee:	494c      	ldr	r1, [pc, #304]	; (8001b20 <HAL_UART_Receive+0x1dc>)
 80019f0:	5299      	strh	r1, [r3, r2]
 80019f2:	e02e      	b.n	8001a52 <HAL_UART_Receive+0x10e>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	225c      	movs	r2, #92	; 0x5c
 80019f8:	21ff      	movs	r1, #255	; 0xff
 80019fa:	5299      	strh	r1, [r3, r2]
 80019fc:	e029      	b.n	8001a52 <HAL_UART_Receive+0x10e>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10d      	bne.n	8001a22 <HAL_UART_Receive+0xde>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d104      	bne.n	8001a18 <HAL_UART_Receive+0xd4>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	225c      	movs	r2, #92	; 0x5c
 8001a12:	21ff      	movs	r1, #255	; 0xff
 8001a14:	5299      	strh	r1, [r3, r2]
 8001a16:	e01c      	b.n	8001a52 <HAL_UART_Receive+0x10e>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	225c      	movs	r2, #92	; 0x5c
 8001a1c:	217f      	movs	r1, #127	; 0x7f
 8001a1e:	5299      	strh	r1, [r3, r2]
 8001a20:	e017      	b.n	8001a52 <HAL_UART_Receive+0x10e>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	055b      	lsls	r3, r3, #21
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d10d      	bne.n	8001a4a <HAL_UART_Receive+0x106>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d104      	bne.n	8001a40 <HAL_UART_Receive+0xfc>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	225c      	movs	r2, #92	; 0x5c
 8001a3a:	217f      	movs	r1, #127	; 0x7f
 8001a3c:	5299      	strh	r1, [r3, r2]
 8001a3e:	e008      	b.n	8001a52 <HAL_UART_Receive+0x10e>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	225c      	movs	r2, #92	; 0x5c
 8001a44:	213f      	movs	r1, #63	; 0x3f
 8001a46:	5299      	strh	r1, [r3, r2]
 8001a48:	e003      	b.n	8001a52 <HAL_UART_Receive+0x10e>
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	225c      	movs	r2, #92	; 0x5c
 8001a4e:	2100      	movs	r1, #0
 8001a50:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8001a52:	2312      	movs	r3, #18
 8001a54:	18fb      	adds	r3, r7, r3
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	215c      	movs	r1, #92	; 0x5c
 8001a5a:	5a52      	ldrh	r2, [r2, r1]
 8001a5c:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	2380      	movs	r3, #128	; 0x80
 8001a64:	015b      	lsls	r3, r3, #5
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d108      	bne.n	8001a7c <HAL_UART_Receive+0x138>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d104      	bne.n	8001a7c <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	61bb      	str	r3, [r7, #24]
 8001a7a:	e003      	b.n	8001a84 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2274      	movs	r2, #116	; 0x74
 8001a88:	2100      	movs	r1, #0
 8001a8a:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8001a8c:	e037      	b.n	8001afe <HAL_UART_Receive+0x1ba>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	0013      	movs	r3, r2
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2120      	movs	r1, #32
 8001a9c:	f000 fac6 	bl	800202c <UART_WaitOnFlagUntilTimeout>
 8001aa0:	1e03      	subs	r3, r0, #0
 8001aa2:	d001      	beq.n	8001aa8 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e036      	b.n	8001b16 <HAL_UART_Receive+0x1d2>
      }
      if (pdata8bits == NULL)
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10e      	bne.n	8001acc <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	2212      	movs	r2, #18
 8001ab8:	18ba      	adds	r2, r7, r2
 8001aba:	8812      	ldrh	r2, [r2, #0]
 8001abc:	4013      	ands	r3, r2
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	61bb      	str	r3, [r7, #24]
 8001aca:	e00f      	b.n	8001aec <HAL_UART_Receive+0x1a8>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2212      	movs	r2, #18
 8001ad8:	18ba      	adds	r2, r7, r2
 8001ada:	8812      	ldrh	r2, [r2, #0]
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	4013      	ands	r3, r2
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	225a      	movs	r2, #90	; 0x5a
 8001af0:	5a9b      	ldrh	r3, [r3, r2]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b299      	uxth	r1, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	225a      	movs	r2, #90	; 0x5a
 8001afc:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	225a      	movs	r2, #90	; 0x5a
 8001b02:	5a9b      	ldrh	r3, [r3, r2]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1c1      	bne.n	8001a8e <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e000      	b.n	8001b16 <HAL_UART_Receive+0x1d2>
  }
  else
  {
    return HAL_BUSY;
 8001b14:	2302      	movs	r3, #2
  }
}
 8001b16:	0018      	movs	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b008      	add	sp, #32
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	000001ff 	.word	0x000001ff

08001b24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b2c:	231e      	movs	r3, #30
 8001b2e:	18fb      	adds	r3, r7, r3
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4aaf      	ldr	r2, [pc, #700]	; (8001e10 <UART_SetConfig+0x2ec>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	0019      	movs	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	4aaa      	ldr	r2, [pc, #680]	; (8001e14 <UART_SetConfig+0x2f0>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	4aa1      	ldr	r2, [pc, #644]	; (8001e18 <UART_SetConfig+0x2f4>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	0019      	movs	r1, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a9d      	ldr	r2, [pc, #628]	; (8001e1c <UART_SetConfig+0x2f8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d127      	bne.n	8001bfa <UART_SetConfig+0xd6>
 8001baa:	4b9d      	ldr	r3, [pc, #628]	; (8001e20 <UART_SetConfig+0x2fc>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	2203      	movs	r2, #3
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d00d      	beq.n	8001bd2 <UART_SetConfig+0xae>
 8001bb6:	d81b      	bhi.n	8001bf0 <UART_SetConfig+0xcc>
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d014      	beq.n	8001be6 <UART_SetConfig+0xc2>
 8001bbc:	d818      	bhi.n	8001bf0 <UART_SetConfig+0xcc>
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d002      	beq.n	8001bc8 <UART_SetConfig+0xa4>
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d00a      	beq.n	8001bdc <UART_SetConfig+0xb8>
 8001bc6:	e013      	b.n	8001bf0 <UART_SetConfig+0xcc>
 8001bc8:	231f      	movs	r3, #31
 8001bca:	18fb      	adds	r3, r7, r3
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]
 8001bd0:	e065      	b.n	8001c9e <UART_SetConfig+0x17a>
 8001bd2:	231f      	movs	r3, #31
 8001bd4:	18fb      	adds	r3, r7, r3
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	e060      	b.n	8001c9e <UART_SetConfig+0x17a>
 8001bdc:	231f      	movs	r3, #31
 8001bde:	18fb      	adds	r3, r7, r3
 8001be0:	2204      	movs	r2, #4
 8001be2:	701a      	strb	r2, [r3, #0]
 8001be4:	e05b      	b.n	8001c9e <UART_SetConfig+0x17a>
 8001be6:	231f      	movs	r3, #31
 8001be8:	18fb      	adds	r3, r7, r3
 8001bea:	2208      	movs	r2, #8
 8001bec:	701a      	strb	r2, [r3, #0]
 8001bee:	e056      	b.n	8001c9e <UART_SetConfig+0x17a>
 8001bf0:	231f      	movs	r3, #31
 8001bf2:	18fb      	adds	r3, r7, r3
 8001bf4:	2210      	movs	r2, #16
 8001bf6:	701a      	strb	r2, [r3, #0]
 8001bf8:	e051      	b.n	8001c9e <UART_SetConfig+0x17a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a89      	ldr	r2, [pc, #548]	; (8001e24 <UART_SetConfig+0x300>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d134      	bne.n	8001c6e <UART_SetConfig+0x14a>
 8001c04:	4b86      	ldr	r3, [pc, #536]	; (8001e20 <UART_SetConfig+0x2fc>)
 8001c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c08:	23c0      	movs	r3, #192	; 0xc0
 8001c0a:	029b      	lsls	r3, r3, #10
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	22c0      	movs	r2, #192	; 0xc0
 8001c10:	0292      	lsls	r2, r2, #10
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d017      	beq.n	8001c46 <UART_SetConfig+0x122>
 8001c16:	22c0      	movs	r2, #192	; 0xc0
 8001c18:	0292      	lsls	r2, r2, #10
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d822      	bhi.n	8001c64 <UART_SetConfig+0x140>
 8001c1e:	2280      	movs	r2, #128	; 0x80
 8001c20:	0292      	lsls	r2, r2, #10
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d019      	beq.n	8001c5a <UART_SetConfig+0x136>
 8001c26:	2280      	movs	r2, #128	; 0x80
 8001c28:	0292      	lsls	r2, r2, #10
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d81a      	bhi.n	8001c64 <UART_SetConfig+0x140>
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d004      	beq.n	8001c3c <UART_SetConfig+0x118>
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	0252      	lsls	r2, r2, #9
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d00a      	beq.n	8001c50 <UART_SetConfig+0x12c>
 8001c3a:	e013      	b.n	8001c64 <UART_SetConfig+0x140>
 8001c3c:	231f      	movs	r3, #31
 8001c3e:	18fb      	adds	r3, r7, r3
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
 8001c44:	e02b      	b.n	8001c9e <UART_SetConfig+0x17a>
 8001c46:	231f      	movs	r3, #31
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	701a      	strb	r2, [r3, #0]
 8001c4e:	e026      	b.n	8001c9e <UART_SetConfig+0x17a>
 8001c50:	231f      	movs	r3, #31
 8001c52:	18fb      	adds	r3, r7, r3
 8001c54:	2204      	movs	r2, #4
 8001c56:	701a      	strb	r2, [r3, #0]
 8001c58:	e021      	b.n	8001c9e <UART_SetConfig+0x17a>
 8001c5a:	231f      	movs	r3, #31
 8001c5c:	18fb      	adds	r3, r7, r3
 8001c5e:	2208      	movs	r2, #8
 8001c60:	701a      	strb	r2, [r3, #0]
 8001c62:	e01c      	b.n	8001c9e <UART_SetConfig+0x17a>
 8001c64:	231f      	movs	r3, #31
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	2210      	movs	r2, #16
 8001c6a:	701a      	strb	r2, [r3, #0]
 8001c6c:	e017      	b.n	8001c9e <UART_SetConfig+0x17a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a6d      	ldr	r2, [pc, #436]	; (8001e28 <UART_SetConfig+0x304>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d104      	bne.n	8001c82 <UART_SetConfig+0x15e>
 8001c78:	231f      	movs	r3, #31
 8001c7a:	18fb      	adds	r3, r7, r3
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
 8001c80:	e00d      	b.n	8001c9e <UART_SetConfig+0x17a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a69      	ldr	r2, [pc, #420]	; (8001e2c <UART_SetConfig+0x308>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d104      	bne.n	8001c96 <UART_SetConfig+0x172>
 8001c8c:	231f      	movs	r3, #31
 8001c8e:	18fb      	adds	r3, r7, r3
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
 8001c94:	e003      	b.n	8001c9e <UART_SetConfig+0x17a>
 8001c96:	231f      	movs	r3, #31
 8001c98:	18fb      	adds	r3, r7, r3
 8001c9a:	2210      	movs	r2, #16
 8001c9c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69da      	ldr	r2, [r3, #28]
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d15d      	bne.n	8001d66 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8001caa:	231f      	movs	r3, #31
 8001cac:	18fb      	adds	r3, r7, r3
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d015      	beq.n	8001ce0 <UART_SetConfig+0x1bc>
 8001cb4:	dc18      	bgt.n	8001ce8 <UART_SetConfig+0x1c4>
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d00d      	beq.n	8001cd6 <UART_SetConfig+0x1b2>
 8001cba:	dc15      	bgt.n	8001ce8 <UART_SetConfig+0x1c4>
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <UART_SetConfig+0x1a2>
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d005      	beq.n	8001cd0 <UART_SetConfig+0x1ac>
 8001cc4:	e010      	b.n	8001ce8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001cc6:	f7ff fcd5 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 8001cca:	0003      	movs	r3, r0
 8001ccc:	61bb      	str	r3, [r7, #24]
        break;
 8001cce:	e012      	b.n	8001cf6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001cd0:	4b57      	ldr	r3, [pc, #348]	; (8001e30 <UART_SetConfig+0x30c>)
 8001cd2:	61bb      	str	r3, [r7, #24]
        break;
 8001cd4:	e00f      	b.n	8001cf6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001cd6:	f7ff fc43 	bl	8001560 <HAL_RCC_GetSysClockFreq>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	61bb      	str	r3, [r7, #24]
        break;
 8001cde:	e00a      	b.n	8001cf6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	021b      	lsls	r3, r3, #8
 8001ce4:	61bb      	str	r3, [r7, #24]
        break;
 8001ce6:	e006      	b.n	8001cf6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001cec:	231e      	movs	r3, #30
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	701a      	strb	r2, [r3, #0]
        break;
 8001cf4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d100      	bne.n	8001cfe <UART_SetConfig+0x1da>
 8001cfc:	e07b      	b.n	8001df6 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	005a      	lsls	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	085b      	lsrs	r3, r3, #1
 8001d08:	18d2      	adds	r2, r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	0019      	movs	r1, r3
 8001d10:	0010      	movs	r0, r2
 8001d12:	f7fe fa03 	bl	800011c <__udivsi3>
 8001d16:	0003      	movs	r3, r0
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	2b0f      	cmp	r3, #15
 8001d20:	d91c      	bls.n	8001d5c <UART_SetConfig+0x238>
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	025b      	lsls	r3, r3, #9
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d217      	bcs.n	8001d5c <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	200e      	movs	r0, #14
 8001d32:	183b      	adds	r3, r7, r0
 8001d34:	210f      	movs	r1, #15
 8001d36:	438a      	bics	r2, r1
 8001d38:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	085b      	lsrs	r3, r3, #1
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	2207      	movs	r2, #7
 8001d42:	4013      	ands	r3, r2
 8001d44:	b299      	uxth	r1, r3
 8001d46:	183b      	adds	r3, r7, r0
 8001d48:	183a      	adds	r2, r7, r0
 8001d4a:	8812      	ldrh	r2, [r2, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	183a      	adds	r2, r7, r0
 8001d56:	8812      	ldrh	r2, [r2, #0]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	e04c      	b.n	8001df6 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8001d5c:	231e      	movs	r3, #30
 8001d5e:	18fb      	adds	r3, r7, r3
 8001d60:	2201      	movs	r2, #1
 8001d62:	701a      	strb	r2, [r3, #0]
 8001d64:	e047      	b.n	8001df6 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001d66:	231f      	movs	r3, #31
 8001d68:	18fb      	adds	r3, r7, r3
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d015      	beq.n	8001d9c <UART_SetConfig+0x278>
 8001d70:	dc18      	bgt.n	8001da4 <UART_SetConfig+0x280>
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d00d      	beq.n	8001d92 <UART_SetConfig+0x26e>
 8001d76:	dc15      	bgt.n	8001da4 <UART_SetConfig+0x280>
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <UART_SetConfig+0x25e>
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d005      	beq.n	8001d8c <UART_SetConfig+0x268>
 8001d80:	e010      	b.n	8001da4 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001d82:	f7ff fc77 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 8001d86:	0003      	movs	r3, r0
 8001d88:	61bb      	str	r3, [r7, #24]
        break;
 8001d8a:	e012      	b.n	8001db2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001d8c:	4b28      	ldr	r3, [pc, #160]	; (8001e30 <UART_SetConfig+0x30c>)
 8001d8e:	61bb      	str	r3, [r7, #24]
        break;
 8001d90:	e00f      	b.n	8001db2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001d92:	f7ff fbe5 	bl	8001560 <HAL_RCC_GetSysClockFreq>
 8001d96:	0003      	movs	r3, r0
 8001d98:	61bb      	str	r3, [r7, #24]
        break;
 8001d9a:	e00a      	b.n	8001db2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	021b      	lsls	r3, r3, #8
 8001da0:	61bb      	str	r3, [r7, #24]
        break;
 8001da2:	e006      	b.n	8001db2 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001da8:	231e      	movs	r3, #30
 8001daa:	18fb      	adds	r3, r7, r3
 8001dac:	2201      	movs	r2, #1
 8001dae:	701a      	strb	r2, [r3, #0]
        break;
 8001db0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d01e      	beq.n	8001df6 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	085a      	lsrs	r2, r3, #1
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	18d2      	adds	r2, r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	0019      	movs	r1, r3
 8001dc8:	0010      	movs	r0, r2
 8001dca:	f7fe f9a7 	bl	800011c <__udivsi3>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	2b0f      	cmp	r3, #15
 8001dd8:	d909      	bls.n	8001dee <UART_SetConfig+0x2ca>
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	025b      	lsls	r3, r3, #9
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d204      	bcs.n	8001dee <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	60da      	str	r2, [r3, #12]
 8001dec:	e003      	b.n	8001df6 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8001dee:	231e      	movs	r3, #30
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001e02:	231e      	movs	r3, #30
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	781b      	ldrb	r3, [r3, #0]
}
 8001e08:	0018      	movs	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b008      	add	sp, #32
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	efff69f3 	.word	0xefff69f3
 8001e14:	ffffcfff 	.word	0xffffcfff
 8001e18:	fffff4ff 	.word	0xfffff4ff
 8001e1c:	40013800 	.word	0x40013800
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40004400 	.word	0x40004400
 8001e28:	40004800 	.word	0x40004800
 8001e2c:	40004c00 	.word	0x40004c00
 8001e30:	007a1200 	.word	0x007a1200

08001e34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	2201      	movs	r2, #1
 8001e42:	4013      	ands	r3, r2
 8001e44:	d00b      	beq.n	8001e5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	4a4a      	ldr	r2, [pc, #296]	; (8001f78 <UART_AdvFeatureConfig+0x144>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	0019      	movs	r1, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	2202      	movs	r2, #2
 8001e64:	4013      	ands	r3, r2
 8001e66:	d00b      	beq.n	8001e80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	4a43      	ldr	r2, [pc, #268]	; (8001f7c <UART_AdvFeatureConfig+0x148>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	0019      	movs	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	2204      	movs	r2, #4
 8001e86:	4013      	ands	r3, r2
 8001e88:	d00b      	beq.n	8001ea2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	4a3b      	ldr	r2, [pc, #236]	; (8001f80 <UART_AdvFeatureConfig+0x14c>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	0019      	movs	r1, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	2208      	movs	r2, #8
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d00b      	beq.n	8001ec4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4a34      	ldr	r2, [pc, #208]	; (8001f84 <UART_AdvFeatureConfig+0x150>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	0019      	movs	r1, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	2210      	movs	r2, #16
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d00b      	beq.n	8001ee6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	4a2c      	ldr	r2, [pc, #176]	; (8001f88 <UART_AdvFeatureConfig+0x154>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	0019      	movs	r1, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	2220      	movs	r2, #32
 8001eec:	4013      	ands	r3, r2
 8001eee:	d00b      	beq.n	8001f08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	4a25      	ldr	r2, [pc, #148]	; (8001f8c <UART_AdvFeatureConfig+0x158>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	0019      	movs	r1, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	2240      	movs	r2, #64	; 0x40
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d01d      	beq.n	8001f4e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	4a1d      	ldr	r2, [pc, #116]	; (8001f90 <UART_AdvFeatureConfig+0x15c>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	0019      	movs	r1, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	035b      	lsls	r3, r3, #13
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d10b      	bne.n	8001f4e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	4a15      	ldr	r2, [pc, #84]	; (8001f94 <UART_AdvFeatureConfig+0x160>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	0019      	movs	r1, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	2280      	movs	r2, #128	; 0x80
 8001f54:	4013      	ands	r3, r2
 8001f56:	d00b      	beq.n	8001f70 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <UART_AdvFeatureConfig+0x164>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	0019      	movs	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	605a      	str	r2, [r3, #4]
  }
}
 8001f70:	46c0      	nop			; (mov r8, r8)
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b002      	add	sp, #8
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	fffdffff 	.word	0xfffdffff
 8001f7c:	fffeffff 	.word	0xfffeffff
 8001f80:	fffbffff 	.word	0xfffbffff
 8001f84:	ffff7fff 	.word	0xffff7fff
 8001f88:	ffffefff 	.word	0xffffefff
 8001f8c:	ffffdfff 	.word	0xffffdfff
 8001f90:	ffefffff 	.word	0xffefffff
 8001f94:	ff9fffff 	.word	0xff9fffff
 8001f98:	fff7ffff 	.word	0xfff7ffff

08001f9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af02      	add	r7, sp, #8
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2280      	movs	r2, #128	; 0x80
 8001fa8:	2100      	movs	r1, #0
 8001faa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001fac:	f7fe fc24 	bl	80007f8 <HAL_GetTick>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2208      	movs	r2, #8
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	d10c      	bne.n	8001fdc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2280      	movs	r2, #128	; 0x80
 8001fc6:	0391      	lsls	r1, r2, #14
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	4a17      	ldr	r2, [pc, #92]	; (8002028 <UART_CheckIdleState+0x8c>)
 8001fcc:	9200      	str	r2, [sp, #0]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f000 f82c 	bl	800202c <UART_WaitOnFlagUntilTimeout>
 8001fd4:	1e03      	subs	r3, r0, #0
 8001fd6:	d001      	beq.n	8001fdc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e021      	b.n	8002020 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2204      	movs	r2, #4
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d10c      	bne.n	8002004 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2280      	movs	r2, #128	; 0x80
 8001fee:	03d1      	lsls	r1, r2, #15
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4a0d      	ldr	r2, [pc, #52]	; (8002028 <UART_CheckIdleState+0x8c>)
 8001ff4:	9200      	str	r2, [sp, #0]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f000 f818 	bl	800202c <UART_WaitOnFlagUntilTimeout>
 8001ffc:	1e03      	subs	r3, r0, #0
 8001ffe:	d001      	beq.n	8002004 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e00d      	b.n	8002020 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2220      	movs	r2, #32
 8002008:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2220      	movs	r2, #32
 800200e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2274      	movs	r2, #116	; 0x74
 800201a:	2100      	movs	r1, #0
 800201c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	0018      	movs	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	b004      	add	sp, #16
 8002026:	bd80      	pop	{r7, pc}
 8002028:	01ffffff 	.word	0x01ffffff

0800202c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b094      	sub	sp, #80	; 0x50
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	1dfb      	adds	r3, r7, #7
 800203a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800203c:	e0a3      	b.n	8002186 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800203e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002040:	3301      	adds	r3, #1
 8002042:	d100      	bne.n	8002046 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002044:	e09f      	b.n	8002186 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002046:	f7fe fbd7 	bl	80007f8 <HAL_GetTick>
 800204a:	0002      	movs	r2, r0
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002052:	429a      	cmp	r2, r3
 8002054:	d302      	bcc.n	800205c <UART_WaitOnFlagUntilTimeout+0x30>
 8002056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002058:	2b00      	cmp	r3, #0
 800205a:	d13d      	bne.n	80020d8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800205c:	f3ef 8310 	mrs	r3, PRIMASK
 8002060:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002062:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002064:	647b      	str	r3, [r7, #68]	; 0x44
 8002066:	2301      	movs	r3, #1
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800206a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800206c:	f383 8810 	msr	PRIMASK, r3
}
 8002070:	46c0      	nop			; (mov r8, r8)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	494c      	ldr	r1, [pc, #304]	; (80021b0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800207e:	400a      	ands	r2, r1
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002084:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002088:	f383 8810 	msr	PRIMASK, r3
}
 800208c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800208e:	f3ef 8310 	mrs	r3, PRIMASK
 8002092:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002096:	643b      	str	r3, [r7, #64]	; 0x40
 8002098:	2301      	movs	r3, #1
 800209a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800209c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800209e:	f383 8810 	msr	PRIMASK, r3
}
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2101      	movs	r1, #1
 80020b0:	438a      	bics	r2, r1
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ba:	f383 8810 	msr	PRIMASK, r3
}
 80020be:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2220      	movs	r2, #32
 80020c4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2220      	movs	r2, #32
 80020ca:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2274      	movs	r2, #116	; 0x74
 80020d0:	2100      	movs	r1, #0
 80020d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e067      	b.n	80021a8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2204      	movs	r2, #4
 80020e0:	4013      	ands	r3, r2
 80020e2:	d050      	beq.n	8002186 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	69da      	ldr	r2, [r3, #28]
 80020ea:	2380      	movs	r3, #128	; 0x80
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	401a      	ands	r2, r3
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d146      	bne.n	8002186 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2280      	movs	r2, #128	; 0x80
 80020fe:	0112      	lsls	r2, r2, #4
 8002100:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002102:	f3ef 8310 	mrs	r3, PRIMASK
 8002106:	613b      	str	r3, [r7, #16]
  return(result);
 8002108:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800210a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800210c:	2301      	movs	r3, #1
 800210e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f383 8810 	msr	PRIMASK, r3
}
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4923      	ldr	r1, [pc, #140]	; (80021b0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002124:	400a      	ands	r2, r1
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800212a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	f383 8810 	msr	PRIMASK, r3
}
 8002132:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002134:	f3ef 8310 	mrs	r3, PRIMASK
 8002138:	61fb      	str	r3, [r7, #28]
  return(result);
 800213a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800213c:	64bb      	str	r3, [r7, #72]	; 0x48
 800213e:	2301      	movs	r3, #1
 8002140:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002142:	6a3b      	ldr	r3, [r7, #32]
 8002144:	f383 8810 	msr	PRIMASK, r3
}
 8002148:	46c0      	nop			; (mov r8, r8)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2101      	movs	r1, #1
 8002156:	438a      	bics	r2, r1
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	f383 8810 	msr	PRIMASK, r3
}
 8002164:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2220      	movs	r2, #32
 800216a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2220      	movs	r2, #32
 8002170:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2280      	movs	r2, #128	; 0x80
 8002176:	2120      	movs	r1, #32
 8002178:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2274      	movs	r2, #116	; 0x74
 800217e:	2100      	movs	r1, #0
 8002180:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e010      	b.n	80021a8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	4013      	ands	r3, r2
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	425a      	negs	r2, r3
 8002196:	4153      	adcs	r3, r2
 8002198:	b2db      	uxtb	r3, r3
 800219a:	001a      	movs	r2, r3
 800219c:	1dfb      	adds	r3, r7, #7
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d100      	bne.n	80021a6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80021a4:	e74b      	b.n	800203e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	0018      	movs	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b014      	add	sp, #80	; 0x50
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	fffffe5f 	.word	0xfffffe5f

080021b4 <__errno>:
 80021b4:	4b01      	ldr	r3, [pc, #4]	; (80021bc <__errno+0x8>)
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	4770      	bx	lr
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	2000000c 	.word	0x2000000c

080021c0 <__libc_init_array>:
 80021c0:	b570      	push	{r4, r5, r6, lr}
 80021c2:	2600      	movs	r6, #0
 80021c4:	4d0c      	ldr	r5, [pc, #48]	; (80021f8 <__libc_init_array+0x38>)
 80021c6:	4c0d      	ldr	r4, [pc, #52]	; (80021fc <__libc_init_array+0x3c>)
 80021c8:	1b64      	subs	r4, r4, r5
 80021ca:	10a4      	asrs	r4, r4, #2
 80021cc:	42a6      	cmp	r6, r4
 80021ce:	d109      	bne.n	80021e4 <__libc_init_array+0x24>
 80021d0:	2600      	movs	r6, #0
 80021d2:	f000 fff9 	bl	80031c8 <_init>
 80021d6:	4d0a      	ldr	r5, [pc, #40]	; (8002200 <__libc_init_array+0x40>)
 80021d8:	4c0a      	ldr	r4, [pc, #40]	; (8002204 <__libc_init_array+0x44>)
 80021da:	1b64      	subs	r4, r4, r5
 80021dc:	10a4      	asrs	r4, r4, #2
 80021de:	42a6      	cmp	r6, r4
 80021e0:	d105      	bne.n	80021ee <__libc_init_array+0x2e>
 80021e2:	bd70      	pop	{r4, r5, r6, pc}
 80021e4:	00b3      	lsls	r3, r6, #2
 80021e6:	58eb      	ldr	r3, [r5, r3]
 80021e8:	4798      	blx	r3
 80021ea:	3601      	adds	r6, #1
 80021ec:	e7ee      	b.n	80021cc <__libc_init_array+0xc>
 80021ee:	00b3      	lsls	r3, r6, #2
 80021f0:	58eb      	ldr	r3, [r5, r3]
 80021f2:	4798      	blx	r3
 80021f4:	3601      	adds	r6, #1
 80021f6:	e7f2      	b.n	80021de <__libc_init_array+0x1e>
 80021f8:	080032e4 	.word	0x080032e4
 80021fc:	080032e4 	.word	0x080032e4
 8002200:	080032e4 	.word	0x080032e4
 8002204:	080032e8 	.word	0x080032e8

08002208 <memset>:
 8002208:	0003      	movs	r3, r0
 800220a:	1882      	adds	r2, r0, r2
 800220c:	4293      	cmp	r3, r2
 800220e:	d100      	bne.n	8002212 <memset+0xa>
 8002210:	4770      	bx	lr
 8002212:	7019      	strb	r1, [r3, #0]
 8002214:	3301      	adds	r3, #1
 8002216:	e7f9      	b.n	800220c <memset+0x4>

08002218 <iprintf>:
 8002218:	b40f      	push	{r0, r1, r2, r3}
 800221a:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <iprintf+0x30>)
 800221c:	b513      	push	{r0, r1, r4, lr}
 800221e:	681c      	ldr	r4, [r3, #0]
 8002220:	2c00      	cmp	r4, #0
 8002222:	d005      	beq.n	8002230 <iprintf+0x18>
 8002224:	69a3      	ldr	r3, [r4, #24]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d102      	bne.n	8002230 <iprintf+0x18>
 800222a:	0020      	movs	r0, r4
 800222c:	f000 f870 	bl	8002310 <__sinit>
 8002230:	ab05      	add	r3, sp, #20
 8002232:	0020      	movs	r0, r4
 8002234:	9a04      	ldr	r2, [sp, #16]
 8002236:	68a1      	ldr	r1, [r4, #8]
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	f000 f9cd 	bl	80025d8 <_vfiprintf_r>
 800223e:	bc16      	pop	{r1, r2, r4}
 8002240:	bc08      	pop	{r3}
 8002242:	b004      	add	sp, #16
 8002244:	4718      	bx	r3
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	2000000c 	.word	0x2000000c

0800224c <std>:
 800224c:	2300      	movs	r3, #0
 800224e:	b510      	push	{r4, lr}
 8002250:	0004      	movs	r4, r0
 8002252:	6003      	str	r3, [r0, #0]
 8002254:	6043      	str	r3, [r0, #4]
 8002256:	6083      	str	r3, [r0, #8]
 8002258:	8181      	strh	r1, [r0, #12]
 800225a:	6643      	str	r3, [r0, #100]	; 0x64
 800225c:	0019      	movs	r1, r3
 800225e:	81c2      	strh	r2, [r0, #14]
 8002260:	6103      	str	r3, [r0, #16]
 8002262:	6143      	str	r3, [r0, #20]
 8002264:	6183      	str	r3, [r0, #24]
 8002266:	2208      	movs	r2, #8
 8002268:	305c      	adds	r0, #92	; 0x5c
 800226a:	f7ff ffcd 	bl	8002208 <memset>
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <std+0x38>)
 8002270:	6224      	str	r4, [r4, #32]
 8002272:	6263      	str	r3, [r4, #36]	; 0x24
 8002274:	4b04      	ldr	r3, [pc, #16]	; (8002288 <std+0x3c>)
 8002276:	62a3      	str	r3, [r4, #40]	; 0x28
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <std+0x40>)
 800227a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800227c:	4b04      	ldr	r3, [pc, #16]	; (8002290 <std+0x44>)
 800227e:	6323      	str	r3, [r4, #48]	; 0x30
 8002280:	bd10      	pop	{r4, pc}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	08002b75 	.word	0x08002b75
 8002288:	08002b9d 	.word	0x08002b9d
 800228c:	08002bd5 	.word	0x08002bd5
 8002290:	08002c01 	.word	0x08002c01

08002294 <_cleanup_r>:
 8002294:	b510      	push	{r4, lr}
 8002296:	4902      	ldr	r1, [pc, #8]	; (80022a0 <_cleanup_r+0xc>)
 8002298:	f000 f8ba 	bl	8002410 <_fwalk_reent>
 800229c:	bd10      	pop	{r4, pc}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	08002f0d 	.word	0x08002f0d

080022a4 <__sfmoreglue>:
 80022a4:	b570      	push	{r4, r5, r6, lr}
 80022a6:	2568      	movs	r5, #104	; 0x68
 80022a8:	1e4a      	subs	r2, r1, #1
 80022aa:	4355      	muls	r5, r2
 80022ac:	000e      	movs	r6, r1
 80022ae:	0029      	movs	r1, r5
 80022b0:	3174      	adds	r1, #116	; 0x74
 80022b2:	f000 f8f3 	bl	800249c <_malloc_r>
 80022b6:	1e04      	subs	r4, r0, #0
 80022b8:	d008      	beq.n	80022cc <__sfmoreglue+0x28>
 80022ba:	2100      	movs	r1, #0
 80022bc:	002a      	movs	r2, r5
 80022be:	6001      	str	r1, [r0, #0]
 80022c0:	6046      	str	r6, [r0, #4]
 80022c2:	300c      	adds	r0, #12
 80022c4:	60a0      	str	r0, [r4, #8]
 80022c6:	3268      	adds	r2, #104	; 0x68
 80022c8:	f7ff ff9e 	bl	8002208 <memset>
 80022cc:	0020      	movs	r0, r4
 80022ce:	bd70      	pop	{r4, r5, r6, pc}

080022d0 <__sfp_lock_acquire>:
 80022d0:	b510      	push	{r4, lr}
 80022d2:	4802      	ldr	r0, [pc, #8]	; (80022dc <__sfp_lock_acquire+0xc>)
 80022d4:	f000 f8bd 	bl	8002452 <__retarget_lock_acquire_recursive>
 80022d8:	bd10      	pop	{r4, pc}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	20000119 	.word	0x20000119

080022e0 <__sfp_lock_release>:
 80022e0:	b510      	push	{r4, lr}
 80022e2:	4802      	ldr	r0, [pc, #8]	; (80022ec <__sfp_lock_release+0xc>)
 80022e4:	f000 f8b6 	bl	8002454 <__retarget_lock_release_recursive>
 80022e8:	bd10      	pop	{r4, pc}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	20000119 	.word	0x20000119

080022f0 <__sinit_lock_acquire>:
 80022f0:	b510      	push	{r4, lr}
 80022f2:	4802      	ldr	r0, [pc, #8]	; (80022fc <__sinit_lock_acquire+0xc>)
 80022f4:	f000 f8ad 	bl	8002452 <__retarget_lock_acquire_recursive>
 80022f8:	bd10      	pop	{r4, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	2000011a 	.word	0x2000011a

08002300 <__sinit_lock_release>:
 8002300:	b510      	push	{r4, lr}
 8002302:	4802      	ldr	r0, [pc, #8]	; (800230c <__sinit_lock_release+0xc>)
 8002304:	f000 f8a6 	bl	8002454 <__retarget_lock_release_recursive>
 8002308:	bd10      	pop	{r4, pc}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	2000011a 	.word	0x2000011a

08002310 <__sinit>:
 8002310:	b513      	push	{r0, r1, r4, lr}
 8002312:	0004      	movs	r4, r0
 8002314:	f7ff ffec 	bl	80022f0 <__sinit_lock_acquire>
 8002318:	69a3      	ldr	r3, [r4, #24]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <__sinit+0x14>
 800231e:	f7ff ffef 	bl	8002300 <__sinit_lock_release>
 8002322:	bd13      	pop	{r0, r1, r4, pc}
 8002324:	64a3      	str	r3, [r4, #72]	; 0x48
 8002326:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002328:	6523      	str	r3, [r4, #80]	; 0x50
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <__sinit+0x68>)
 800232c:	4a13      	ldr	r2, [pc, #76]	; (800237c <__sinit+0x6c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	62a2      	str	r2, [r4, #40]	; 0x28
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	42a3      	cmp	r3, r4
 8002336:	d101      	bne.n	800233c <__sinit+0x2c>
 8002338:	2301      	movs	r3, #1
 800233a:	61a3      	str	r3, [r4, #24]
 800233c:	0020      	movs	r0, r4
 800233e:	f000 f81f 	bl	8002380 <__sfp>
 8002342:	6060      	str	r0, [r4, #4]
 8002344:	0020      	movs	r0, r4
 8002346:	f000 f81b 	bl	8002380 <__sfp>
 800234a:	60a0      	str	r0, [r4, #8]
 800234c:	0020      	movs	r0, r4
 800234e:	f000 f817 	bl	8002380 <__sfp>
 8002352:	2200      	movs	r2, #0
 8002354:	2104      	movs	r1, #4
 8002356:	60e0      	str	r0, [r4, #12]
 8002358:	6860      	ldr	r0, [r4, #4]
 800235a:	f7ff ff77 	bl	800224c <std>
 800235e:	2201      	movs	r2, #1
 8002360:	2109      	movs	r1, #9
 8002362:	68a0      	ldr	r0, [r4, #8]
 8002364:	f7ff ff72 	bl	800224c <std>
 8002368:	2202      	movs	r2, #2
 800236a:	2112      	movs	r1, #18
 800236c:	68e0      	ldr	r0, [r4, #12]
 800236e:	f7ff ff6d 	bl	800224c <std>
 8002372:	2301      	movs	r3, #1
 8002374:	61a3      	str	r3, [r4, #24]
 8002376:	e7d2      	b.n	800231e <__sinit+0xe>
 8002378:	0800324c 	.word	0x0800324c
 800237c:	08002295 	.word	0x08002295

08002380 <__sfp>:
 8002380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002382:	0007      	movs	r7, r0
 8002384:	f7ff ffa4 	bl	80022d0 <__sfp_lock_acquire>
 8002388:	4b1f      	ldr	r3, [pc, #124]	; (8002408 <__sfp+0x88>)
 800238a:	681e      	ldr	r6, [r3, #0]
 800238c:	69b3      	ldr	r3, [r6, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d102      	bne.n	8002398 <__sfp+0x18>
 8002392:	0030      	movs	r0, r6
 8002394:	f7ff ffbc 	bl	8002310 <__sinit>
 8002398:	3648      	adds	r6, #72	; 0x48
 800239a:	68b4      	ldr	r4, [r6, #8]
 800239c:	6873      	ldr	r3, [r6, #4]
 800239e:	3b01      	subs	r3, #1
 80023a0:	d504      	bpl.n	80023ac <__sfp+0x2c>
 80023a2:	6833      	ldr	r3, [r6, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d022      	beq.n	80023ee <__sfp+0x6e>
 80023a8:	6836      	ldr	r6, [r6, #0]
 80023aa:	e7f6      	b.n	800239a <__sfp+0x1a>
 80023ac:	220c      	movs	r2, #12
 80023ae:	5ea5      	ldrsh	r5, [r4, r2]
 80023b0:	2d00      	cmp	r5, #0
 80023b2:	d11a      	bne.n	80023ea <__sfp+0x6a>
 80023b4:	0020      	movs	r0, r4
 80023b6:	4b15      	ldr	r3, [pc, #84]	; (800240c <__sfp+0x8c>)
 80023b8:	3058      	adds	r0, #88	; 0x58
 80023ba:	60e3      	str	r3, [r4, #12]
 80023bc:	6665      	str	r5, [r4, #100]	; 0x64
 80023be:	f000 f847 	bl	8002450 <__retarget_lock_init_recursive>
 80023c2:	f7ff ff8d 	bl	80022e0 <__sfp_lock_release>
 80023c6:	0020      	movs	r0, r4
 80023c8:	2208      	movs	r2, #8
 80023ca:	0029      	movs	r1, r5
 80023cc:	6025      	str	r5, [r4, #0]
 80023ce:	60a5      	str	r5, [r4, #8]
 80023d0:	6065      	str	r5, [r4, #4]
 80023d2:	6125      	str	r5, [r4, #16]
 80023d4:	6165      	str	r5, [r4, #20]
 80023d6:	61a5      	str	r5, [r4, #24]
 80023d8:	305c      	adds	r0, #92	; 0x5c
 80023da:	f7ff ff15 	bl	8002208 <memset>
 80023de:	6365      	str	r5, [r4, #52]	; 0x34
 80023e0:	63a5      	str	r5, [r4, #56]	; 0x38
 80023e2:	64a5      	str	r5, [r4, #72]	; 0x48
 80023e4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80023e6:	0020      	movs	r0, r4
 80023e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023ea:	3468      	adds	r4, #104	; 0x68
 80023ec:	e7d7      	b.n	800239e <__sfp+0x1e>
 80023ee:	2104      	movs	r1, #4
 80023f0:	0038      	movs	r0, r7
 80023f2:	f7ff ff57 	bl	80022a4 <__sfmoreglue>
 80023f6:	1e04      	subs	r4, r0, #0
 80023f8:	6030      	str	r0, [r6, #0]
 80023fa:	d1d5      	bne.n	80023a8 <__sfp+0x28>
 80023fc:	f7ff ff70 	bl	80022e0 <__sfp_lock_release>
 8002400:	230c      	movs	r3, #12
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	e7ef      	b.n	80023e6 <__sfp+0x66>
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	0800324c 	.word	0x0800324c
 800240c:	ffff0001 	.word	0xffff0001

08002410 <_fwalk_reent>:
 8002410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002412:	0004      	movs	r4, r0
 8002414:	0006      	movs	r6, r0
 8002416:	2700      	movs	r7, #0
 8002418:	9101      	str	r1, [sp, #4]
 800241a:	3448      	adds	r4, #72	; 0x48
 800241c:	6863      	ldr	r3, [r4, #4]
 800241e:	68a5      	ldr	r5, [r4, #8]
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	9b00      	ldr	r3, [sp, #0]
 8002424:	3b01      	subs	r3, #1
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	d504      	bpl.n	8002434 <_fwalk_reent+0x24>
 800242a:	6824      	ldr	r4, [r4, #0]
 800242c:	2c00      	cmp	r4, #0
 800242e:	d1f5      	bne.n	800241c <_fwalk_reent+0xc>
 8002430:	0038      	movs	r0, r7
 8002432:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002434:	89ab      	ldrh	r3, [r5, #12]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d908      	bls.n	800244c <_fwalk_reent+0x3c>
 800243a:	220e      	movs	r2, #14
 800243c:	5eab      	ldrsh	r3, [r5, r2]
 800243e:	3301      	adds	r3, #1
 8002440:	d004      	beq.n	800244c <_fwalk_reent+0x3c>
 8002442:	0029      	movs	r1, r5
 8002444:	0030      	movs	r0, r6
 8002446:	9b01      	ldr	r3, [sp, #4]
 8002448:	4798      	blx	r3
 800244a:	4307      	orrs	r7, r0
 800244c:	3568      	adds	r5, #104	; 0x68
 800244e:	e7e8      	b.n	8002422 <_fwalk_reent+0x12>

08002450 <__retarget_lock_init_recursive>:
 8002450:	4770      	bx	lr

08002452 <__retarget_lock_acquire_recursive>:
 8002452:	4770      	bx	lr

08002454 <__retarget_lock_release_recursive>:
 8002454:	4770      	bx	lr
	...

08002458 <sbrk_aligned>:
 8002458:	b570      	push	{r4, r5, r6, lr}
 800245a:	4e0f      	ldr	r6, [pc, #60]	; (8002498 <sbrk_aligned+0x40>)
 800245c:	000d      	movs	r5, r1
 800245e:	6831      	ldr	r1, [r6, #0]
 8002460:	0004      	movs	r4, r0
 8002462:	2900      	cmp	r1, #0
 8002464:	d102      	bne.n	800246c <sbrk_aligned+0x14>
 8002466:	f000 fb73 	bl	8002b50 <_sbrk_r>
 800246a:	6030      	str	r0, [r6, #0]
 800246c:	0029      	movs	r1, r5
 800246e:	0020      	movs	r0, r4
 8002470:	f000 fb6e 	bl	8002b50 <_sbrk_r>
 8002474:	1c43      	adds	r3, r0, #1
 8002476:	d00a      	beq.n	800248e <sbrk_aligned+0x36>
 8002478:	2303      	movs	r3, #3
 800247a:	1cc5      	adds	r5, r0, #3
 800247c:	439d      	bics	r5, r3
 800247e:	42a8      	cmp	r0, r5
 8002480:	d007      	beq.n	8002492 <sbrk_aligned+0x3a>
 8002482:	1a29      	subs	r1, r5, r0
 8002484:	0020      	movs	r0, r4
 8002486:	f000 fb63 	bl	8002b50 <_sbrk_r>
 800248a:	1c43      	adds	r3, r0, #1
 800248c:	d101      	bne.n	8002492 <sbrk_aligned+0x3a>
 800248e:	2501      	movs	r5, #1
 8002490:	426d      	negs	r5, r5
 8002492:	0028      	movs	r0, r5
 8002494:	bd70      	pop	{r4, r5, r6, pc}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	20000120 	.word	0x20000120

0800249c <_malloc_r>:
 800249c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800249e:	2203      	movs	r2, #3
 80024a0:	1ccb      	adds	r3, r1, #3
 80024a2:	4393      	bics	r3, r2
 80024a4:	3308      	adds	r3, #8
 80024a6:	0006      	movs	r6, r0
 80024a8:	001f      	movs	r7, r3
 80024aa:	2b0c      	cmp	r3, #12
 80024ac:	d232      	bcs.n	8002514 <_malloc_r+0x78>
 80024ae:	270c      	movs	r7, #12
 80024b0:	42b9      	cmp	r1, r7
 80024b2:	d831      	bhi.n	8002518 <_malloc_r+0x7c>
 80024b4:	0030      	movs	r0, r6
 80024b6:	f000 fdf5 	bl	80030a4 <__malloc_lock>
 80024ba:	4d32      	ldr	r5, [pc, #200]	; (8002584 <_malloc_r+0xe8>)
 80024bc:	682b      	ldr	r3, [r5, #0]
 80024be:	001c      	movs	r4, r3
 80024c0:	2c00      	cmp	r4, #0
 80024c2:	d12e      	bne.n	8002522 <_malloc_r+0x86>
 80024c4:	0039      	movs	r1, r7
 80024c6:	0030      	movs	r0, r6
 80024c8:	f7ff ffc6 	bl	8002458 <sbrk_aligned>
 80024cc:	0004      	movs	r4, r0
 80024ce:	1c43      	adds	r3, r0, #1
 80024d0:	d11e      	bne.n	8002510 <_malloc_r+0x74>
 80024d2:	682c      	ldr	r4, [r5, #0]
 80024d4:	0025      	movs	r5, r4
 80024d6:	2d00      	cmp	r5, #0
 80024d8:	d14a      	bne.n	8002570 <_malloc_r+0xd4>
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	0029      	movs	r1, r5
 80024de:	18e3      	adds	r3, r4, r3
 80024e0:	0030      	movs	r0, r6
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	f000 fb34 	bl	8002b50 <_sbrk_r>
 80024e8:	9b01      	ldr	r3, [sp, #4]
 80024ea:	4283      	cmp	r3, r0
 80024ec:	d143      	bne.n	8002576 <_malloc_r+0xda>
 80024ee:	6823      	ldr	r3, [r4, #0]
 80024f0:	3703      	adds	r7, #3
 80024f2:	1aff      	subs	r7, r7, r3
 80024f4:	2303      	movs	r3, #3
 80024f6:	439f      	bics	r7, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	2f0c      	cmp	r7, #12
 80024fc:	d200      	bcs.n	8002500 <_malloc_r+0x64>
 80024fe:	270c      	movs	r7, #12
 8002500:	0039      	movs	r1, r7
 8002502:	0030      	movs	r0, r6
 8002504:	f7ff ffa8 	bl	8002458 <sbrk_aligned>
 8002508:	1c43      	adds	r3, r0, #1
 800250a:	d034      	beq.n	8002576 <_malloc_r+0xda>
 800250c:	6823      	ldr	r3, [r4, #0]
 800250e:	19df      	adds	r7, r3, r7
 8002510:	6027      	str	r7, [r4, #0]
 8002512:	e013      	b.n	800253c <_malloc_r+0xa0>
 8002514:	2b00      	cmp	r3, #0
 8002516:	dacb      	bge.n	80024b0 <_malloc_r+0x14>
 8002518:	230c      	movs	r3, #12
 800251a:	2500      	movs	r5, #0
 800251c:	6033      	str	r3, [r6, #0]
 800251e:	0028      	movs	r0, r5
 8002520:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002522:	6822      	ldr	r2, [r4, #0]
 8002524:	1bd1      	subs	r1, r2, r7
 8002526:	d420      	bmi.n	800256a <_malloc_r+0xce>
 8002528:	290b      	cmp	r1, #11
 800252a:	d917      	bls.n	800255c <_malloc_r+0xc0>
 800252c:	19e2      	adds	r2, r4, r7
 800252e:	6027      	str	r7, [r4, #0]
 8002530:	42a3      	cmp	r3, r4
 8002532:	d111      	bne.n	8002558 <_malloc_r+0xbc>
 8002534:	602a      	str	r2, [r5, #0]
 8002536:	6863      	ldr	r3, [r4, #4]
 8002538:	6011      	str	r1, [r2, #0]
 800253a:	6053      	str	r3, [r2, #4]
 800253c:	0030      	movs	r0, r6
 800253e:	0025      	movs	r5, r4
 8002540:	f000 fdb8 	bl	80030b4 <__malloc_unlock>
 8002544:	2207      	movs	r2, #7
 8002546:	350b      	adds	r5, #11
 8002548:	1d23      	adds	r3, r4, #4
 800254a:	4395      	bics	r5, r2
 800254c:	1aea      	subs	r2, r5, r3
 800254e:	429d      	cmp	r5, r3
 8002550:	d0e5      	beq.n	800251e <_malloc_r+0x82>
 8002552:	1b5b      	subs	r3, r3, r5
 8002554:	50a3      	str	r3, [r4, r2]
 8002556:	e7e2      	b.n	800251e <_malloc_r+0x82>
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	e7ec      	b.n	8002536 <_malloc_r+0x9a>
 800255c:	6862      	ldr	r2, [r4, #4]
 800255e:	42a3      	cmp	r3, r4
 8002560:	d101      	bne.n	8002566 <_malloc_r+0xca>
 8002562:	602a      	str	r2, [r5, #0]
 8002564:	e7ea      	b.n	800253c <_malloc_r+0xa0>
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	e7e8      	b.n	800253c <_malloc_r+0xa0>
 800256a:	0023      	movs	r3, r4
 800256c:	6864      	ldr	r4, [r4, #4]
 800256e:	e7a7      	b.n	80024c0 <_malloc_r+0x24>
 8002570:	002c      	movs	r4, r5
 8002572:	686d      	ldr	r5, [r5, #4]
 8002574:	e7af      	b.n	80024d6 <_malloc_r+0x3a>
 8002576:	230c      	movs	r3, #12
 8002578:	0030      	movs	r0, r6
 800257a:	6033      	str	r3, [r6, #0]
 800257c:	f000 fd9a 	bl	80030b4 <__malloc_unlock>
 8002580:	e7cd      	b.n	800251e <_malloc_r+0x82>
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	2000011c 	.word	0x2000011c

08002588 <__sfputc_r>:
 8002588:	6893      	ldr	r3, [r2, #8]
 800258a:	b510      	push	{r4, lr}
 800258c:	3b01      	subs	r3, #1
 800258e:	6093      	str	r3, [r2, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	da04      	bge.n	800259e <__sfputc_r+0x16>
 8002594:	6994      	ldr	r4, [r2, #24]
 8002596:	42a3      	cmp	r3, r4
 8002598:	db07      	blt.n	80025aa <__sfputc_r+0x22>
 800259a:	290a      	cmp	r1, #10
 800259c:	d005      	beq.n	80025aa <__sfputc_r+0x22>
 800259e:	6813      	ldr	r3, [r2, #0]
 80025a0:	1c58      	adds	r0, r3, #1
 80025a2:	6010      	str	r0, [r2, #0]
 80025a4:	7019      	strb	r1, [r3, #0]
 80025a6:	0008      	movs	r0, r1
 80025a8:	bd10      	pop	{r4, pc}
 80025aa:	f000 fb2f 	bl	8002c0c <__swbuf_r>
 80025ae:	0001      	movs	r1, r0
 80025b0:	e7f9      	b.n	80025a6 <__sfputc_r+0x1e>

080025b2 <__sfputs_r>:
 80025b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025b4:	0006      	movs	r6, r0
 80025b6:	000f      	movs	r7, r1
 80025b8:	0014      	movs	r4, r2
 80025ba:	18d5      	adds	r5, r2, r3
 80025bc:	42ac      	cmp	r4, r5
 80025be:	d101      	bne.n	80025c4 <__sfputs_r+0x12>
 80025c0:	2000      	movs	r0, #0
 80025c2:	e007      	b.n	80025d4 <__sfputs_r+0x22>
 80025c4:	7821      	ldrb	r1, [r4, #0]
 80025c6:	003a      	movs	r2, r7
 80025c8:	0030      	movs	r0, r6
 80025ca:	f7ff ffdd 	bl	8002588 <__sfputc_r>
 80025ce:	3401      	adds	r4, #1
 80025d0:	1c43      	adds	r3, r0, #1
 80025d2:	d1f3      	bne.n	80025bc <__sfputs_r+0xa>
 80025d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080025d8 <_vfiprintf_r>:
 80025d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025da:	b0a1      	sub	sp, #132	; 0x84
 80025dc:	0006      	movs	r6, r0
 80025de:	000c      	movs	r4, r1
 80025e0:	001f      	movs	r7, r3
 80025e2:	9203      	str	r2, [sp, #12]
 80025e4:	2800      	cmp	r0, #0
 80025e6:	d004      	beq.n	80025f2 <_vfiprintf_r+0x1a>
 80025e8:	6983      	ldr	r3, [r0, #24]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <_vfiprintf_r+0x1a>
 80025ee:	f7ff fe8f 	bl	8002310 <__sinit>
 80025f2:	4b8e      	ldr	r3, [pc, #568]	; (800282c <_vfiprintf_r+0x254>)
 80025f4:	429c      	cmp	r4, r3
 80025f6:	d11c      	bne.n	8002632 <_vfiprintf_r+0x5a>
 80025f8:	6874      	ldr	r4, [r6, #4]
 80025fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80025fc:	07db      	lsls	r3, r3, #31
 80025fe:	d405      	bmi.n	800260c <_vfiprintf_r+0x34>
 8002600:	89a3      	ldrh	r3, [r4, #12]
 8002602:	059b      	lsls	r3, r3, #22
 8002604:	d402      	bmi.n	800260c <_vfiprintf_r+0x34>
 8002606:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002608:	f7ff ff23 	bl	8002452 <__retarget_lock_acquire_recursive>
 800260c:	89a3      	ldrh	r3, [r4, #12]
 800260e:	071b      	lsls	r3, r3, #28
 8002610:	d502      	bpl.n	8002618 <_vfiprintf_r+0x40>
 8002612:	6923      	ldr	r3, [r4, #16]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d11d      	bne.n	8002654 <_vfiprintf_r+0x7c>
 8002618:	0021      	movs	r1, r4
 800261a:	0030      	movs	r0, r6
 800261c:	f000 fb60 	bl	8002ce0 <__swsetup_r>
 8002620:	2800      	cmp	r0, #0
 8002622:	d017      	beq.n	8002654 <_vfiprintf_r+0x7c>
 8002624:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002626:	07db      	lsls	r3, r3, #31
 8002628:	d50d      	bpl.n	8002646 <_vfiprintf_r+0x6e>
 800262a:	2001      	movs	r0, #1
 800262c:	4240      	negs	r0, r0
 800262e:	b021      	add	sp, #132	; 0x84
 8002630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002632:	4b7f      	ldr	r3, [pc, #508]	; (8002830 <_vfiprintf_r+0x258>)
 8002634:	429c      	cmp	r4, r3
 8002636:	d101      	bne.n	800263c <_vfiprintf_r+0x64>
 8002638:	68b4      	ldr	r4, [r6, #8]
 800263a:	e7de      	b.n	80025fa <_vfiprintf_r+0x22>
 800263c:	4b7d      	ldr	r3, [pc, #500]	; (8002834 <_vfiprintf_r+0x25c>)
 800263e:	429c      	cmp	r4, r3
 8002640:	d1db      	bne.n	80025fa <_vfiprintf_r+0x22>
 8002642:	68f4      	ldr	r4, [r6, #12]
 8002644:	e7d9      	b.n	80025fa <_vfiprintf_r+0x22>
 8002646:	89a3      	ldrh	r3, [r4, #12]
 8002648:	059b      	lsls	r3, r3, #22
 800264a:	d4ee      	bmi.n	800262a <_vfiprintf_r+0x52>
 800264c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800264e:	f7ff ff01 	bl	8002454 <__retarget_lock_release_recursive>
 8002652:	e7ea      	b.n	800262a <_vfiprintf_r+0x52>
 8002654:	2300      	movs	r3, #0
 8002656:	ad08      	add	r5, sp, #32
 8002658:	616b      	str	r3, [r5, #20]
 800265a:	3320      	adds	r3, #32
 800265c:	766b      	strb	r3, [r5, #25]
 800265e:	3310      	adds	r3, #16
 8002660:	76ab      	strb	r3, [r5, #26]
 8002662:	9707      	str	r7, [sp, #28]
 8002664:	9f03      	ldr	r7, [sp, #12]
 8002666:	783b      	ldrb	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <_vfiprintf_r+0x98>
 800266c:	2b25      	cmp	r3, #37	; 0x25
 800266e:	d14e      	bne.n	800270e <_vfiprintf_r+0x136>
 8002670:	9b03      	ldr	r3, [sp, #12]
 8002672:	1afb      	subs	r3, r7, r3
 8002674:	9305      	str	r3, [sp, #20]
 8002676:	9b03      	ldr	r3, [sp, #12]
 8002678:	429f      	cmp	r7, r3
 800267a:	d00d      	beq.n	8002698 <_vfiprintf_r+0xc0>
 800267c:	9b05      	ldr	r3, [sp, #20]
 800267e:	0021      	movs	r1, r4
 8002680:	0030      	movs	r0, r6
 8002682:	9a03      	ldr	r2, [sp, #12]
 8002684:	f7ff ff95 	bl	80025b2 <__sfputs_r>
 8002688:	1c43      	adds	r3, r0, #1
 800268a:	d100      	bne.n	800268e <_vfiprintf_r+0xb6>
 800268c:	e0b5      	b.n	80027fa <_vfiprintf_r+0x222>
 800268e:	696a      	ldr	r2, [r5, #20]
 8002690:	9b05      	ldr	r3, [sp, #20]
 8002692:	4694      	mov	ip, r2
 8002694:	4463      	add	r3, ip
 8002696:	616b      	str	r3, [r5, #20]
 8002698:	783b      	ldrb	r3, [r7, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d100      	bne.n	80026a0 <_vfiprintf_r+0xc8>
 800269e:	e0ac      	b.n	80027fa <_vfiprintf_r+0x222>
 80026a0:	2201      	movs	r2, #1
 80026a2:	1c7b      	adds	r3, r7, #1
 80026a4:	9303      	str	r3, [sp, #12]
 80026a6:	2300      	movs	r3, #0
 80026a8:	4252      	negs	r2, r2
 80026aa:	606a      	str	r2, [r5, #4]
 80026ac:	a904      	add	r1, sp, #16
 80026ae:	3254      	adds	r2, #84	; 0x54
 80026b0:	1852      	adds	r2, r2, r1
 80026b2:	602b      	str	r3, [r5, #0]
 80026b4:	60eb      	str	r3, [r5, #12]
 80026b6:	60ab      	str	r3, [r5, #8]
 80026b8:	7013      	strb	r3, [r2, #0]
 80026ba:	65ab      	str	r3, [r5, #88]	; 0x58
 80026bc:	9b03      	ldr	r3, [sp, #12]
 80026be:	2205      	movs	r2, #5
 80026c0:	7819      	ldrb	r1, [r3, #0]
 80026c2:	485d      	ldr	r0, [pc, #372]	; (8002838 <_vfiprintf_r+0x260>)
 80026c4:	f000 fce2 	bl	800308c <memchr>
 80026c8:	9b03      	ldr	r3, [sp, #12]
 80026ca:	1c5f      	adds	r7, r3, #1
 80026cc:	2800      	cmp	r0, #0
 80026ce:	d120      	bne.n	8002712 <_vfiprintf_r+0x13a>
 80026d0:	682a      	ldr	r2, [r5, #0]
 80026d2:	06d3      	lsls	r3, r2, #27
 80026d4:	d504      	bpl.n	80026e0 <_vfiprintf_r+0x108>
 80026d6:	2353      	movs	r3, #83	; 0x53
 80026d8:	a904      	add	r1, sp, #16
 80026da:	185b      	adds	r3, r3, r1
 80026dc:	2120      	movs	r1, #32
 80026de:	7019      	strb	r1, [r3, #0]
 80026e0:	0713      	lsls	r3, r2, #28
 80026e2:	d504      	bpl.n	80026ee <_vfiprintf_r+0x116>
 80026e4:	2353      	movs	r3, #83	; 0x53
 80026e6:	a904      	add	r1, sp, #16
 80026e8:	185b      	adds	r3, r3, r1
 80026ea:	212b      	movs	r1, #43	; 0x2b
 80026ec:	7019      	strb	r1, [r3, #0]
 80026ee:	9b03      	ldr	r3, [sp, #12]
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b2a      	cmp	r3, #42	; 0x2a
 80026f4:	d016      	beq.n	8002724 <_vfiprintf_r+0x14c>
 80026f6:	2100      	movs	r1, #0
 80026f8:	68eb      	ldr	r3, [r5, #12]
 80026fa:	9f03      	ldr	r7, [sp, #12]
 80026fc:	783a      	ldrb	r2, [r7, #0]
 80026fe:	1c78      	adds	r0, r7, #1
 8002700:	3a30      	subs	r2, #48	; 0x30
 8002702:	4684      	mov	ip, r0
 8002704:	2a09      	cmp	r2, #9
 8002706:	d94f      	bls.n	80027a8 <_vfiprintf_r+0x1d0>
 8002708:	2900      	cmp	r1, #0
 800270a:	d111      	bne.n	8002730 <_vfiprintf_r+0x158>
 800270c:	e017      	b.n	800273e <_vfiprintf_r+0x166>
 800270e:	3701      	adds	r7, #1
 8002710:	e7a9      	b.n	8002666 <_vfiprintf_r+0x8e>
 8002712:	4b49      	ldr	r3, [pc, #292]	; (8002838 <_vfiprintf_r+0x260>)
 8002714:	682a      	ldr	r2, [r5, #0]
 8002716:	1ac0      	subs	r0, r0, r3
 8002718:	2301      	movs	r3, #1
 800271a:	4083      	lsls	r3, r0
 800271c:	4313      	orrs	r3, r2
 800271e:	602b      	str	r3, [r5, #0]
 8002720:	9703      	str	r7, [sp, #12]
 8002722:	e7cb      	b.n	80026bc <_vfiprintf_r+0xe4>
 8002724:	9b07      	ldr	r3, [sp, #28]
 8002726:	1d19      	adds	r1, r3, #4
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	9107      	str	r1, [sp, #28]
 800272c:	2b00      	cmp	r3, #0
 800272e:	db01      	blt.n	8002734 <_vfiprintf_r+0x15c>
 8002730:	930b      	str	r3, [sp, #44]	; 0x2c
 8002732:	e004      	b.n	800273e <_vfiprintf_r+0x166>
 8002734:	425b      	negs	r3, r3
 8002736:	60eb      	str	r3, [r5, #12]
 8002738:	2302      	movs	r3, #2
 800273a:	4313      	orrs	r3, r2
 800273c:	602b      	str	r3, [r5, #0]
 800273e:	783b      	ldrb	r3, [r7, #0]
 8002740:	2b2e      	cmp	r3, #46	; 0x2e
 8002742:	d10a      	bne.n	800275a <_vfiprintf_r+0x182>
 8002744:	787b      	ldrb	r3, [r7, #1]
 8002746:	2b2a      	cmp	r3, #42	; 0x2a
 8002748:	d137      	bne.n	80027ba <_vfiprintf_r+0x1e2>
 800274a:	9b07      	ldr	r3, [sp, #28]
 800274c:	3702      	adds	r7, #2
 800274e:	1d1a      	adds	r2, r3, #4
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	9207      	str	r2, [sp, #28]
 8002754:	2b00      	cmp	r3, #0
 8002756:	db2d      	blt.n	80027b4 <_vfiprintf_r+0x1dc>
 8002758:	9309      	str	r3, [sp, #36]	; 0x24
 800275a:	2203      	movs	r2, #3
 800275c:	7839      	ldrb	r1, [r7, #0]
 800275e:	4837      	ldr	r0, [pc, #220]	; (800283c <_vfiprintf_r+0x264>)
 8002760:	f000 fc94 	bl	800308c <memchr>
 8002764:	2800      	cmp	r0, #0
 8002766:	d007      	beq.n	8002778 <_vfiprintf_r+0x1a0>
 8002768:	4b34      	ldr	r3, [pc, #208]	; (800283c <_vfiprintf_r+0x264>)
 800276a:	682a      	ldr	r2, [r5, #0]
 800276c:	1ac0      	subs	r0, r0, r3
 800276e:	2340      	movs	r3, #64	; 0x40
 8002770:	4083      	lsls	r3, r0
 8002772:	4313      	orrs	r3, r2
 8002774:	3701      	adds	r7, #1
 8002776:	602b      	str	r3, [r5, #0]
 8002778:	7839      	ldrb	r1, [r7, #0]
 800277a:	1c7b      	adds	r3, r7, #1
 800277c:	2206      	movs	r2, #6
 800277e:	4830      	ldr	r0, [pc, #192]	; (8002840 <_vfiprintf_r+0x268>)
 8002780:	9303      	str	r3, [sp, #12]
 8002782:	7629      	strb	r1, [r5, #24]
 8002784:	f000 fc82 	bl	800308c <memchr>
 8002788:	2800      	cmp	r0, #0
 800278a:	d045      	beq.n	8002818 <_vfiprintf_r+0x240>
 800278c:	4b2d      	ldr	r3, [pc, #180]	; (8002844 <_vfiprintf_r+0x26c>)
 800278e:	2b00      	cmp	r3, #0
 8002790:	d127      	bne.n	80027e2 <_vfiprintf_r+0x20a>
 8002792:	2207      	movs	r2, #7
 8002794:	9b07      	ldr	r3, [sp, #28]
 8002796:	3307      	adds	r3, #7
 8002798:	4393      	bics	r3, r2
 800279a:	3308      	adds	r3, #8
 800279c:	9307      	str	r3, [sp, #28]
 800279e:	696b      	ldr	r3, [r5, #20]
 80027a0:	9a04      	ldr	r2, [sp, #16]
 80027a2:	189b      	adds	r3, r3, r2
 80027a4:	616b      	str	r3, [r5, #20]
 80027a6:	e75d      	b.n	8002664 <_vfiprintf_r+0x8c>
 80027a8:	210a      	movs	r1, #10
 80027aa:	434b      	muls	r3, r1
 80027ac:	4667      	mov	r7, ip
 80027ae:	189b      	adds	r3, r3, r2
 80027b0:	3909      	subs	r1, #9
 80027b2:	e7a3      	b.n	80026fc <_vfiprintf_r+0x124>
 80027b4:	2301      	movs	r3, #1
 80027b6:	425b      	negs	r3, r3
 80027b8:	e7ce      	b.n	8002758 <_vfiprintf_r+0x180>
 80027ba:	2300      	movs	r3, #0
 80027bc:	001a      	movs	r2, r3
 80027be:	3701      	adds	r7, #1
 80027c0:	606b      	str	r3, [r5, #4]
 80027c2:	7839      	ldrb	r1, [r7, #0]
 80027c4:	1c78      	adds	r0, r7, #1
 80027c6:	3930      	subs	r1, #48	; 0x30
 80027c8:	4684      	mov	ip, r0
 80027ca:	2909      	cmp	r1, #9
 80027cc:	d903      	bls.n	80027d6 <_vfiprintf_r+0x1fe>
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0c3      	beq.n	800275a <_vfiprintf_r+0x182>
 80027d2:	9209      	str	r2, [sp, #36]	; 0x24
 80027d4:	e7c1      	b.n	800275a <_vfiprintf_r+0x182>
 80027d6:	230a      	movs	r3, #10
 80027d8:	435a      	muls	r2, r3
 80027da:	4667      	mov	r7, ip
 80027dc:	1852      	adds	r2, r2, r1
 80027de:	3b09      	subs	r3, #9
 80027e0:	e7ef      	b.n	80027c2 <_vfiprintf_r+0x1ea>
 80027e2:	ab07      	add	r3, sp, #28
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	0022      	movs	r2, r4
 80027e8:	0029      	movs	r1, r5
 80027ea:	0030      	movs	r0, r6
 80027ec:	4b16      	ldr	r3, [pc, #88]	; (8002848 <_vfiprintf_r+0x270>)
 80027ee:	e000      	b.n	80027f2 <_vfiprintf_r+0x21a>
 80027f0:	bf00      	nop
 80027f2:	9004      	str	r0, [sp, #16]
 80027f4:	9b04      	ldr	r3, [sp, #16]
 80027f6:	3301      	adds	r3, #1
 80027f8:	d1d1      	bne.n	800279e <_vfiprintf_r+0x1c6>
 80027fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027fc:	07db      	lsls	r3, r3, #31
 80027fe:	d405      	bmi.n	800280c <_vfiprintf_r+0x234>
 8002800:	89a3      	ldrh	r3, [r4, #12]
 8002802:	059b      	lsls	r3, r3, #22
 8002804:	d402      	bmi.n	800280c <_vfiprintf_r+0x234>
 8002806:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002808:	f7ff fe24 	bl	8002454 <__retarget_lock_release_recursive>
 800280c:	89a3      	ldrh	r3, [r4, #12]
 800280e:	065b      	lsls	r3, r3, #25
 8002810:	d500      	bpl.n	8002814 <_vfiprintf_r+0x23c>
 8002812:	e70a      	b.n	800262a <_vfiprintf_r+0x52>
 8002814:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002816:	e70a      	b.n	800262e <_vfiprintf_r+0x56>
 8002818:	ab07      	add	r3, sp, #28
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	0022      	movs	r2, r4
 800281e:	0029      	movs	r1, r5
 8002820:	0030      	movs	r0, r6
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <_vfiprintf_r+0x270>)
 8002824:	f000 f882 	bl	800292c <_printf_i>
 8002828:	e7e3      	b.n	80027f2 <_vfiprintf_r+0x21a>
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	08003270 	.word	0x08003270
 8002830:	08003290 	.word	0x08003290
 8002834:	08003250 	.word	0x08003250
 8002838:	080032b0 	.word	0x080032b0
 800283c:	080032b6 	.word	0x080032b6
 8002840:	080032ba 	.word	0x080032ba
 8002844:	00000000 	.word	0x00000000
 8002848:	080025b3 	.word	0x080025b3

0800284c <_printf_common>:
 800284c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800284e:	0015      	movs	r5, r2
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	688a      	ldr	r2, [r1, #8]
 8002854:	690b      	ldr	r3, [r1, #16]
 8002856:	000c      	movs	r4, r1
 8002858:	9000      	str	r0, [sp, #0]
 800285a:	4293      	cmp	r3, r2
 800285c:	da00      	bge.n	8002860 <_printf_common+0x14>
 800285e:	0013      	movs	r3, r2
 8002860:	0022      	movs	r2, r4
 8002862:	602b      	str	r3, [r5, #0]
 8002864:	3243      	adds	r2, #67	; 0x43
 8002866:	7812      	ldrb	r2, [r2, #0]
 8002868:	2a00      	cmp	r2, #0
 800286a:	d001      	beq.n	8002870 <_printf_common+0x24>
 800286c:	3301      	adds	r3, #1
 800286e:	602b      	str	r3, [r5, #0]
 8002870:	6823      	ldr	r3, [r4, #0]
 8002872:	069b      	lsls	r3, r3, #26
 8002874:	d502      	bpl.n	800287c <_printf_common+0x30>
 8002876:	682b      	ldr	r3, [r5, #0]
 8002878:	3302      	adds	r3, #2
 800287a:	602b      	str	r3, [r5, #0]
 800287c:	6822      	ldr	r2, [r4, #0]
 800287e:	2306      	movs	r3, #6
 8002880:	0017      	movs	r7, r2
 8002882:	401f      	ands	r7, r3
 8002884:	421a      	tst	r2, r3
 8002886:	d027      	beq.n	80028d8 <_printf_common+0x8c>
 8002888:	0023      	movs	r3, r4
 800288a:	3343      	adds	r3, #67	; 0x43
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	1e5a      	subs	r2, r3, #1
 8002890:	4193      	sbcs	r3, r2
 8002892:	6822      	ldr	r2, [r4, #0]
 8002894:	0692      	lsls	r2, r2, #26
 8002896:	d430      	bmi.n	80028fa <_printf_common+0xae>
 8002898:	0022      	movs	r2, r4
 800289a:	9901      	ldr	r1, [sp, #4]
 800289c:	9800      	ldr	r0, [sp, #0]
 800289e:	9e08      	ldr	r6, [sp, #32]
 80028a0:	3243      	adds	r2, #67	; 0x43
 80028a2:	47b0      	blx	r6
 80028a4:	1c43      	adds	r3, r0, #1
 80028a6:	d025      	beq.n	80028f4 <_printf_common+0xa8>
 80028a8:	2306      	movs	r3, #6
 80028aa:	6820      	ldr	r0, [r4, #0]
 80028ac:	682a      	ldr	r2, [r5, #0]
 80028ae:	68e1      	ldr	r1, [r4, #12]
 80028b0:	2500      	movs	r5, #0
 80028b2:	4003      	ands	r3, r0
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d103      	bne.n	80028c0 <_printf_common+0x74>
 80028b8:	1a8d      	subs	r5, r1, r2
 80028ba:	43eb      	mvns	r3, r5
 80028bc:	17db      	asrs	r3, r3, #31
 80028be:	401d      	ands	r5, r3
 80028c0:	68a3      	ldr	r3, [r4, #8]
 80028c2:	6922      	ldr	r2, [r4, #16]
 80028c4:	4293      	cmp	r3, r2
 80028c6:	dd01      	ble.n	80028cc <_printf_common+0x80>
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	18ed      	adds	r5, r5, r3
 80028cc:	2700      	movs	r7, #0
 80028ce:	42bd      	cmp	r5, r7
 80028d0:	d120      	bne.n	8002914 <_printf_common+0xc8>
 80028d2:	2000      	movs	r0, #0
 80028d4:	e010      	b.n	80028f8 <_printf_common+0xac>
 80028d6:	3701      	adds	r7, #1
 80028d8:	68e3      	ldr	r3, [r4, #12]
 80028da:	682a      	ldr	r2, [r5, #0]
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	42bb      	cmp	r3, r7
 80028e0:	ddd2      	ble.n	8002888 <_printf_common+0x3c>
 80028e2:	0022      	movs	r2, r4
 80028e4:	2301      	movs	r3, #1
 80028e6:	9901      	ldr	r1, [sp, #4]
 80028e8:	9800      	ldr	r0, [sp, #0]
 80028ea:	9e08      	ldr	r6, [sp, #32]
 80028ec:	3219      	adds	r2, #25
 80028ee:	47b0      	blx	r6
 80028f0:	1c43      	adds	r3, r0, #1
 80028f2:	d1f0      	bne.n	80028d6 <_printf_common+0x8a>
 80028f4:	2001      	movs	r0, #1
 80028f6:	4240      	negs	r0, r0
 80028f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80028fa:	2030      	movs	r0, #48	; 0x30
 80028fc:	18e1      	adds	r1, r4, r3
 80028fe:	3143      	adds	r1, #67	; 0x43
 8002900:	7008      	strb	r0, [r1, #0]
 8002902:	0021      	movs	r1, r4
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	3145      	adds	r1, #69	; 0x45
 8002908:	7809      	ldrb	r1, [r1, #0]
 800290a:	18a2      	adds	r2, r4, r2
 800290c:	3243      	adds	r2, #67	; 0x43
 800290e:	3302      	adds	r3, #2
 8002910:	7011      	strb	r1, [r2, #0]
 8002912:	e7c1      	b.n	8002898 <_printf_common+0x4c>
 8002914:	0022      	movs	r2, r4
 8002916:	2301      	movs	r3, #1
 8002918:	9901      	ldr	r1, [sp, #4]
 800291a:	9800      	ldr	r0, [sp, #0]
 800291c:	9e08      	ldr	r6, [sp, #32]
 800291e:	321a      	adds	r2, #26
 8002920:	47b0      	blx	r6
 8002922:	1c43      	adds	r3, r0, #1
 8002924:	d0e6      	beq.n	80028f4 <_printf_common+0xa8>
 8002926:	3701      	adds	r7, #1
 8002928:	e7d1      	b.n	80028ce <_printf_common+0x82>
	...

0800292c <_printf_i>:
 800292c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800292e:	b08b      	sub	sp, #44	; 0x2c
 8002930:	9206      	str	r2, [sp, #24]
 8002932:	000a      	movs	r2, r1
 8002934:	3243      	adds	r2, #67	; 0x43
 8002936:	9307      	str	r3, [sp, #28]
 8002938:	9005      	str	r0, [sp, #20]
 800293a:	9204      	str	r2, [sp, #16]
 800293c:	7e0a      	ldrb	r2, [r1, #24]
 800293e:	000c      	movs	r4, r1
 8002940:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002942:	2a78      	cmp	r2, #120	; 0x78
 8002944:	d807      	bhi.n	8002956 <_printf_i+0x2a>
 8002946:	2a62      	cmp	r2, #98	; 0x62
 8002948:	d809      	bhi.n	800295e <_printf_i+0x32>
 800294a:	2a00      	cmp	r2, #0
 800294c:	d100      	bne.n	8002950 <_printf_i+0x24>
 800294e:	e0c1      	b.n	8002ad4 <_printf_i+0x1a8>
 8002950:	2a58      	cmp	r2, #88	; 0x58
 8002952:	d100      	bne.n	8002956 <_printf_i+0x2a>
 8002954:	e08c      	b.n	8002a70 <_printf_i+0x144>
 8002956:	0026      	movs	r6, r4
 8002958:	3642      	adds	r6, #66	; 0x42
 800295a:	7032      	strb	r2, [r6, #0]
 800295c:	e022      	b.n	80029a4 <_printf_i+0x78>
 800295e:	0010      	movs	r0, r2
 8002960:	3863      	subs	r0, #99	; 0x63
 8002962:	2815      	cmp	r0, #21
 8002964:	d8f7      	bhi.n	8002956 <_printf_i+0x2a>
 8002966:	f7fd fbcf 	bl	8000108 <__gnu_thumb1_case_shi>
 800296a:	0016      	.short	0x0016
 800296c:	fff6001f 	.word	0xfff6001f
 8002970:	fff6fff6 	.word	0xfff6fff6
 8002974:	001ffff6 	.word	0x001ffff6
 8002978:	fff6fff6 	.word	0xfff6fff6
 800297c:	fff6fff6 	.word	0xfff6fff6
 8002980:	003600a8 	.word	0x003600a8
 8002984:	fff6009a 	.word	0xfff6009a
 8002988:	00b9fff6 	.word	0x00b9fff6
 800298c:	0036fff6 	.word	0x0036fff6
 8002990:	fff6fff6 	.word	0xfff6fff6
 8002994:	009e      	.short	0x009e
 8002996:	0026      	movs	r6, r4
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	3642      	adds	r6, #66	; 0x42
 800299c:	1d11      	adds	r1, r2, #4
 800299e:	6019      	str	r1, [r3, #0]
 80029a0:	6813      	ldr	r3, [r2, #0]
 80029a2:	7033      	strb	r3, [r6, #0]
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0a7      	b.n	8002af8 <_printf_i+0x1cc>
 80029a8:	6808      	ldr	r0, [r1, #0]
 80029aa:	6819      	ldr	r1, [r3, #0]
 80029ac:	1d0a      	adds	r2, r1, #4
 80029ae:	0605      	lsls	r5, r0, #24
 80029b0:	d50b      	bpl.n	80029ca <_printf_i+0x9e>
 80029b2:	680d      	ldr	r5, [r1, #0]
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	2d00      	cmp	r5, #0
 80029b8:	da03      	bge.n	80029c2 <_printf_i+0x96>
 80029ba:	232d      	movs	r3, #45	; 0x2d
 80029bc:	9a04      	ldr	r2, [sp, #16]
 80029be:	426d      	negs	r5, r5
 80029c0:	7013      	strb	r3, [r2, #0]
 80029c2:	4b61      	ldr	r3, [pc, #388]	; (8002b48 <_printf_i+0x21c>)
 80029c4:	270a      	movs	r7, #10
 80029c6:	9303      	str	r3, [sp, #12]
 80029c8:	e01b      	b.n	8002a02 <_printf_i+0xd6>
 80029ca:	680d      	ldr	r5, [r1, #0]
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	0641      	lsls	r1, r0, #25
 80029d0:	d5f1      	bpl.n	80029b6 <_printf_i+0x8a>
 80029d2:	b22d      	sxth	r5, r5
 80029d4:	e7ef      	b.n	80029b6 <_printf_i+0x8a>
 80029d6:	680d      	ldr	r5, [r1, #0]
 80029d8:	6819      	ldr	r1, [r3, #0]
 80029da:	1d08      	adds	r0, r1, #4
 80029dc:	6018      	str	r0, [r3, #0]
 80029de:	062e      	lsls	r6, r5, #24
 80029e0:	d501      	bpl.n	80029e6 <_printf_i+0xba>
 80029e2:	680d      	ldr	r5, [r1, #0]
 80029e4:	e003      	b.n	80029ee <_printf_i+0xc2>
 80029e6:	066d      	lsls	r5, r5, #25
 80029e8:	d5fb      	bpl.n	80029e2 <_printf_i+0xb6>
 80029ea:	680d      	ldr	r5, [r1, #0]
 80029ec:	b2ad      	uxth	r5, r5
 80029ee:	4b56      	ldr	r3, [pc, #344]	; (8002b48 <_printf_i+0x21c>)
 80029f0:	2708      	movs	r7, #8
 80029f2:	9303      	str	r3, [sp, #12]
 80029f4:	2a6f      	cmp	r2, #111	; 0x6f
 80029f6:	d000      	beq.n	80029fa <_printf_i+0xce>
 80029f8:	3702      	adds	r7, #2
 80029fa:	0023      	movs	r3, r4
 80029fc:	2200      	movs	r2, #0
 80029fe:	3343      	adds	r3, #67	; 0x43
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	6863      	ldr	r3, [r4, #4]
 8002a04:	60a3      	str	r3, [r4, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	db03      	blt.n	8002a12 <_printf_i+0xe6>
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	6821      	ldr	r1, [r4, #0]
 8002a0e:	4391      	bics	r1, r2
 8002a10:	6021      	str	r1, [r4, #0]
 8002a12:	2d00      	cmp	r5, #0
 8002a14:	d102      	bne.n	8002a1c <_printf_i+0xf0>
 8002a16:	9e04      	ldr	r6, [sp, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00c      	beq.n	8002a36 <_printf_i+0x10a>
 8002a1c:	9e04      	ldr	r6, [sp, #16]
 8002a1e:	0028      	movs	r0, r5
 8002a20:	0039      	movs	r1, r7
 8002a22:	f7fd fc01 	bl	8000228 <__aeabi_uidivmod>
 8002a26:	9b03      	ldr	r3, [sp, #12]
 8002a28:	3e01      	subs	r6, #1
 8002a2a:	5c5b      	ldrb	r3, [r3, r1]
 8002a2c:	7033      	strb	r3, [r6, #0]
 8002a2e:	002b      	movs	r3, r5
 8002a30:	0005      	movs	r5, r0
 8002a32:	429f      	cmp	r7, r3
 8002a34:	d9f3      	bls.n	8002a1e <_printf_i+0xf2>
 8002a36:	2f08      	cmp	r7, #8
 8002a38:	d109      	bne.n	8002a4e <_printf_i+0x122>
 8002a3a:	6823      	ldr	r3, [r4, #0]
 8002a3c:	07db      	lsls	r3, r3, #31
 8002a3e:	d506      	bpl.n	8002a4e <_printf_i+0x122>
 8002a40:	6863      	ldr	r3, [r4, #4]
 8002a42:	6922      	ldr	r2, [r4, #16]
 8002a44:	4293      	cmp	r3, r2
 8002a46:	dc02      	bgt.n	8002a4e <_printf_i+0x122>
 8002a48:	2330      	movs	r3, #48	; 0x30
 8002a4a:	3e01      	subs	r6, #1
 8002a4c:	7033      	strb	r3, [r6, #0]
 8002a4e:	9b04      	ldr	r3, [sp, #16]
 8002a50:	1b9b      	subs	r3, r3, r6
 8002a52:	6123      	str	r3, [r4, #16]
 8002a54:	9b07      	ldr	r3, [sp, #28]
 8002a56:	0021      	movs	r1, r4
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	9805      	ldr	r0, [sp, #20]
 8002a5c:	9b06      	ldr	r3, [sp, #24]
 8002a5e:	aa09      	add	r2, sp, #36	; 0x24
 8002a60:	f7ff fef4 	bl	800284c <_printf_common>
 8002a64:	1c43      	adds	r3, r0, #1
 8002a66:	d14c      	bne.n	8002b02 <_printf_i+0x1d6>
 8002a68:	2001      	movs	r0, #1
 8002a6a:	4240      	negs	r0, r0
 8002a6c:	b00b      	add	sp, #44	; 0x2c
 8002a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a70:	3145      	adds	r1, #69	; 0x45
 8002a72:	700a      	strb	r2, [r1, #0]
 8002a74:	4a34      	ldr	r2, [pc, #208]	; (8002b48 <_printf_i+0x21c>)
 8002a76:	9203      	str	r2, [sp, #12]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	6821      	ldr	r1, [r4, #0]
 8002a7c:	ca20      	ldmia	r2!, {r5}
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	0608      	lsls	r0, r1, #24
 8002a82:	d516      	bpl.n	8002ab2 <_printf_i+0x186>
 8002a84:	07cb      	lsls	r3, r1, #31
 8002a86:	d502      	bpl.n	8002a8e <_printf_i+0x162>
 8002a88:	2320      	movs	r3, #32
 8002a8a:	4319      	orrs	r1, r3
 8002a8c:	6021      	str	r1, [r4, #0]
 8002a8e:	2710      	movs	r7, #16
 8002a90:	2d00      	cmp	r5, #0
 8002a92:	d1b2      	bne.n	80029fa <_printf_i+0xce>
 8002a94:	2320      	movs	r3, #32
 8002a96:	6822      	ldr	r2, [r4, #0]
 8002a98:	439a      	bics	r2, r3
 8002a9a:	6022      	str	r2, [r4, #0]
 8002a9c:	e7ad      	b.n	80029fa <_printf_i+0xce>
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	6809      	ldr	r1, [r1, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	6022      	str	r2, [r4, #0]
 8002aa6:	0022      	movs	r2, r4
 8002aa8:	2178      	movs	r1, #120	; 0x78
 8002aaa:	3245      	adds	r2, #69	; 0x45
 8002aac:	7011      	strb	r1, [r2, #0]
 8002aae:	4a27      	ldr	r2, [pc, #156]	; (8002b4c <_printf_i+0x220>)
 8002ab0:	e7e1      	b.n	8002a76 <_printf_i+0x14a>
 8002ab2:	0648      	lsls	r0, r1, #25
 8002ab4:	d5e6      	bpl.n	8002a84 <_printf_i+0x158>
 8002ab6:	b2ad      	uxth	r5, r5
 8002ab8:	e7e4      	b.n	8002a84 <_printf_i+0x158>
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	680d      	ldr	r5, [r1, #0]
 8002abe:	1d10      	adds	r0, r2, #4
 8002ac0:	6949      	ldr	r1, [r1, #20]
 8002ac2:	6018      	str	r0, [r3, #0]
 8002ac4:	6813      	ldr	r3, [r2, #0]
 8002ac6:	062e      	lsls	r6, r5, #24
 8002ac8:	d501      	bpl.n	8002ace <_printf_i+0x1a2>
 8002aca:	6019      	str	r1, [r3, #0]
 8002acc:	e002      	b.n	8002ad4 <_printf_i+0x1a8>
 8002ace:	066d      	lsls	r5, r5, #25
 8002ad0:	d5fb      	bpl.n	8002aca <_printf_i+0x19e>
 8002ad2:	8019      	strh	r1, [r3, #0]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	9e04      	ldr	r6, [sp, #16]
 8002ad8:	6123      	str	r3, [r4, #16]
 8002ada:	e7bb      	b.n	8002a54 <_printf_i+0x128>
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	1d11      	adds	r1, r2, #4
 8002ae0:	6019      	str	r1, [r3, #0]
 8002ae2:	6816      	ldr	r6, [r2, #0]
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	0030      	movs	r0, r6
 8002ae8:	6862      	ldr	r2, [r4, #4]
 8002aea:	f000 facf 	bl	800308c <memchr>
 8002aee:	2800      	cmp	r0, #0
 8002af0:	d001      	beq.n	8002af6 <_printf_i+0x1ca>
 8002af2:	1b80      	subs	r0, r0, r6
 8002af4:	6060      	str	r0, [r4, #4]
 8002af6:	6863      	ldr	r3, [r4, #4]
 8002af8:	6123      	str	r3, [r4, #16]
 8002afa:	2300      	movs	r3, #0
 8002afc:	9a04      	ldr	r2, [sp, #16]
 8002afe:	7013      	strb	r3, [r2, #0]
 8002b00:	e7a8      	b.n	8002a54 <_printf_i+0x128>
 8002b02:	6923      	ldr	r3, [r4, #16]
 8002b04:	0032      	movs	r2, r6
 8002b06:	9906      	ldr	r1, [sp, #24]
 8002b08:	9805      	ldr	r0, [sp, #20]
 8002b0a:	9d07      	ldr	r5, [sp, #28]
 8002b0c:	47a8      	blx	r5
 8002b0e:	1c43      	adds	r3, r0, #1
 8002b10:	d0aa      	beq.n	8002a68 <_printf_i+0x13c>
 8002b12:	6823      	ldr	r3, [r4, #0]
 8002b14:	079b      	lsls	r3, r3, #30
 8002b16:	d415      	bmi.n	8002b44 <_printf_i+0x218>
 8002b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b1a:	68e0      	ldr	r0, [r4, #12]
 8002b1c:	4298      	cmp	r0, r3
 8002b1e:	daa5      	bge.n	8002a6c <_printf_i+0x140>
 8002b20:	0018      	movs	r0, r3
 8002b22:	e7a3      	b.n	8002a6c <_printf_i+0x140>
 8002b24:	0022      	movs	r2, r4
 8002b26:	2301      	movs	r3, #1
 8002b28:	9906      	ldr	r1, [sp, #24]
 8002b2a:	9805      	ldr	r0, [sp, #20]
 8002b2c:	9e07      	ldr	r6, [sp, #28]
 8002b2e:	3219      	adds	r2, #25
 8002b30:	47b0      	blx	r6
 8002b32:	1c43      	adds	r3, r0, #1
 8002b34:	d098      	beq.n	8002a68 <_printf_i+0x13c>
 8002b36:	3501      	adds	r5, #1
 8002b38:	68e3      	ldr	r3, [r4, #12]
 8002b3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b3c:	1a9b      	subs	r3, r3, r2
 8002b3e:	42ab      	cmp	r3, r5
 8002b40:	dcf0      	bgt.n	8002b24 <_printf_i+0x1f8>
 8002b42:	e7e9      	b.n	8002b18 <_printf_i+0x1ec>
 8002b44:	2500      	movs	r5, #0
 8002b46:	e7f7      	b.n	8002b38 <_printf_i+0x20c>
 8002b48:	080032c1 	.word	0x080032c1
 8002b4c:	080032d2 	.word	0x080032d2

08002b50 <_sbrk_r>:
 8002b50:	2300      	movs	r3, #0
 8002b52:	b570      	push	{r4, r5, r6, lr}
 8002b54:	4d06      	ldr	r5, [pc, #24]	; (8002b70 <_sbrk_r+0x20>)
 8002b56:	0004      	movs	r4, r0
 8002b58:	0008      	movs	r0, r1
 8002b5a:	602b      	str	r3, [r5, #0]
 8002b5c:	f7fd fd8c 	bl	8000678 <_sbrk>
 8002b60:	1c43      	adds	r3, r0, #1
 8002b62:	d103      	bne.n	8002b6c <_sbrk_r+0x1c>
 8002b64:	682b      	ldr	r3, [r5, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d000      	beq.n	8002b6c <_sbrk_r+0x1c>
 8002b6a:	6023      	str	r3, [r4, #0]
 8002b6c:	bd70      	pop	{r4, r5, r6, pc}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	20000124 	.word	0x20000124

08002b74 <__sread>:
 8002b74:	b570      	push	{r4, r5, r6, lr}
 8002b76:	000c      	movs	r4, r1
 8002b78:	250e      	movs	r5, #14
 8002b7a:	5f49      	ldrsh	r1, [r1, r5]
 8002b7c:	f000 faec 	bl	8003158 <_read_r>
 8002b80:	2800      	cmp	r0, #0
 8002b82:	db03      	blt.n	8002b8c <__sread+0x18>
 8002b84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b86:	181b      	adds	r3, r3, r0
 8002b88:	6563      	str	r3, [r4, #84]	; 0x54
 8002b8a:	bd70      	pop	{r4, r5, r6, pc}
 8002b8c:	89a3      	ldrh	r3, [r4, #12]
 8002b8e:	4a02      	ldr	r2, [pc, #8]	; (8002b98 <__sread+0x24>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	81a3      	strh	r3, [r4, #12]
 8002b94:	e7f9      	b.n	8002b8a <__sread+0x16>
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	ffffefff 	.word	0xffffefff

08002b9c <__swrite>:
 8002b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9e:	001f      	movs	r7, r3
 8002ba0:	898b      	ldrh	r3, [r1, #12]
 8002ba2:	0005      	movs	r5, r0
 8002ba4:	000c      	movs	r4, r1
 8002ba6:	0016      	movs	r6, r2
 8002ba8:	05db      	lsls	r3, r3, #23
 8002baa:	d505      	bpl.n	8002bb8 <__swrite+0x1c>
 8002bac:	230e      	movs	r3, #14
 8002bae:	5ec9      	ldrsh	r1, [r1, r3]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	f000 f9ea 	bl	8002f8c <_lseek_r>
 8002bb8:	89a3      	ldrh	r3, [r4, #12]
 8002bba:	4a05      	ldr	r2, [pc, #20]	; (8002bd0 <__swrite+0x34>)
 8002bbc:	0028      	movs	r0, r5
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	81a3      	strh	r3, [r4, #12]
 8002bc2:	0032      	movs	r2, r6
 8002bc4:	230e      	movs	r3, #14
 8002bc6:	5ee1      	ldrsh	r1, [r4, r3]
 8002bc8:	003b      	movs	r3, r7
 8002bca:	f000 f875 	bl	8002cb8 <_write_r>
 8002bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bd0:	ffffefff 	.word	0xffffefff

08002bd4 <__sseek>:
 8002bd4:	b570      	push	{r4, r5, r6, lr}
 8002bd6:	000c      	movs	r4, r1
 8002bd8:	250e      	movs	r5, #14
 8002bda:	5f49      	ldrsh	r1, [r1, r5]
 8002bdc:	f000 f9d6 	bl	8002f8c <_lseek_r>
 8002be0:	89a3      	ldrh	r3, [r4, #12]
 8002be2:	1c42      	adds	r2, r0, #1
 8002be4:	d103      	bne.n	8002bee <__sseek+0x1a>
 8002be6:	4a05      	ldr	r2, [pc, #20]	; (8002bfc <__sseek+0x28>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	81a3      	strh	r3, [r4, #12]
 8002bec:	bd70      	pop	{r4, r5, r6, pc}
 8002bee:	2280      	movs	r2, #128	; 0x80
 8002bf0:	0152      	lsls	r2, r2, #5
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	81a3      	strh	r3, [r4, #12]
 8002bf6:	6560      	str	r0, [r4, #84]	; 0x54
 8002bf8:	e7f8      	b.n	8002bec <__sseek+0x18>
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	ffffefff 	.word	0xffffefff

08002c00 <__sclose>:
 8002c00:	b510      	push	{r4, lr}
 8002c02:	230e      	movs	r3, #14
 8002c04:	5ec9      	ldrsh	r1, [r1, r3]
 8002c06:	f000 f8e3 	bl	8002dd0 <_close_r>
 8002c0a:	bd10      	pop	{r4, pc}

08002c0c <__swbuf_r>:
 8002c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0e:	0005      	movs	r5, r0
 8002c10:	000e      	movs	r6, r1
 8002c12:	0014      	movs	r4, r2
 8002c14:	2800      	cmp	r0, #0
 8002c16:	d004      	beq.n	8002c22 <__swbuf_r+0x16>
 8002c18:	6983      	ldr	r3, [r0, #24]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <__swbuf_r+0x16>
 8002c1e:	f7ff fb77 	bl	8002310 <__sinit>
 8002c22:	4b22      	ldr	r3, [pc, #136]	; (8002cac <__swbuf_r+0xa0>)
 8002c24:	429c      	cmp	r4, r3
 8002c26:	d12e      	bne.n	8002c86 <__swbuf_r+0x7a>
 8002c28:	686c      	ldr	r4, [r5, #4]
 8002c2a:	69a3      	ldr	r3, [r4, #24]
 8002c2c:	60a3      	str	r3, [r4, #8]
 8002c2e:	89a3      	ldrh	r3, [r4, #12]
 8002c30:	071b      	lsls	r3, r3, #28
 8002c32:	d532      	bpl.n	8002c9a <__swbuf_r+0x8e>
 8002c34:	6923      	ldr	r3, [r4, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d02f      	beq.n	8002c9a <__swbuf_r+0x8e>
 8002c3a:	6823      	ldr	r3, [r4, #0]
 8002c3c:	6922      	ldr	r2, [r4, #16]
 8002c3e:	b2f7      	uxtb	r7, r6
 8002c40:	1a98      	subs	r0, r3, r2
 8002c42:	6963      	ldr	r3, [r4, #20]
 8002c44:	b2f6      	uxtb	r6, r6
 8002c46:	4283      	cmp	r3, r0
 8002c48:	dc05      	bgt.n	8002c56 <__swbuf_r+0x4a>
 8002c4a:	0021      	movs	r1, r4
 8002c4c:	0028      	movs	r0, r5
 8002c4e:	f000 f95d 	bl	8002f0c <_fflush_r>
 8002c52:	2800      	cmp	r0, #0
 8002c54:	d127      	bne.n	8002ca6 <__swbuf_r+0x9a>
 8002c56:	68a3      	ldr	r3, [r4, #8]
 8002c58:	3001      	adds	r0, #1
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	60a3      	str	r3, [r4, #8]
 8002c5e:	6823      	ldr	r3, [r4, #0]
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	6022      	str	r2, [r4, #0]
 8002c64:	701f      	strb	r7, [r3, #0]
 8002c66:	6963      	ldr	r3, [r4, #20]
 8002c68:	4283      	cmp	r3, r0
 8002c6a:	d004      	beq.n	8002c76 <__swbuf_r+0x6a>
 8002c6c:	89a3      	ldrh	r3, [r4, #12]
 8002c6e:	07db      	lsls	r3, r3, #31
 8002c70:	d507      	bpl.n	8002c82 <__swbuf_r+0x76>
 8002c72:	2e0a      	cmp	r6, #10
 8002c74:	d105      	bne.n	8002c82 <__swbuf_r+0x76>
 8002c76:	0021      	movs	r1, r4
 8002c78:	0028      	movs	r0, r5
 8002c7a:	f000 f947 	bl	8002f0c <_fflush_r>
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	d111      	bne.n	8002ca6 <__swbuf_r+0x9a>
 8002c82:	0030      	movs	r0, r6
 8002c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c86:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <__swbuf_r+0xa4>)
 8002c88:	429c      	cmp	r4, r3
 8002c8a:	d101      	bne.n	8002c90 <__swbuf_r+0x84>
 8002c8c:	68ac      	ldr	r4, [r5, #8]
 8002c8e:	e7cc      	b.n	8002c2a <__swbuf_r+0x1e>
 8002c90:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <__swbuf_r+0xa8>)
 8002c92:	429c      	cmp	r4, r3
 8002c94:	d1c9      	bne.n	8002c2a <__swbuf_r+0x1e>
 8002c96:	68ec      	ldr	r4, [r5, #12]
 8002c98:	e7c7      	b.n	8002c2a <__swbuf_r+0x1e>
 8002c9a:	0021      	movs	r1, r4
 8002c9c:	0028      	movs	r0, r5
 8002c9e:	f000 f81f 	bl	8002ce0 <__swsetup_r>
 8002ca2:	2800      	cmp	r0, #0
 8002ca4:	d0c9      	beq.n	8002c3a <__swbuf_r+0x2e>
 8002ca6:	2601      	movs	r6, #1
 8002ca8:	4276      	negs	r6, r6
 8002caa:	e7ea      	b.n	8002c82 <__swbuf_r+0x76>
 8002cac:	08003270 	.word	0x08003270
 8002cb0:	08003290 	.word	0x08003290
 8002cb4:	08003250 	.word	0x08003250

08002cb8 <_write_r>:
 8002cb8:	b570      	push	{r4, r5, r6, lr}
 8002cba:	0004      	movs	r4, r0
 8002cbc:	0008      	movs	r0, r1
 8002cbe:	0011      	movs	r1, r2
 8002cc0:	001a      	movs	r2, r3
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	4d05      	ldr	r5, [pc, #20]	; (8002cdc <_write_r+0x24>)
 8002cc6:	602b      	str	r3, [r5, #0]
 8002cc8:	f7fd fc8e 	bl	80005e8 <_write>
 8002ccc:	1c43      	adds	r3, r0, #1
 8002cce:	d103      	bne.n	8002cd8 <_write_r+0x20>
 8002cd0:	682b      	ldr	r3, [r5, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d000      	beq.n	8002cd8 <_write_r+0x20>
 8002cd6:	6023      	str	r3, [r4, #0]
 8002cd8:	bd70      	pop	{r4, r5, r6, pc}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	20000124 	.word	0x20000124

08002ce0 <__swsetup_r>:
 8002ce0:	4b37      	ldr	r3, [pc, #220]	; (8002dc0 <__swsetup_r+0xe0>)
 8002ce2:	b570      	push	{r4, r5, r6, lr}
 8002ce4:	681d      	ldr	r5, [r3, #0]
 8002ce6:	0006      	movs	r6, r0
 8002ce8:	000c      	movs	r4, r1
 8002cea:	2d00      	cmp	r5, #0
 8002cec:	d005      	beq.n	8002cfa <__swsetup_r+0x1a>
 8002cee:	69ab      	ldr	r3, [r5, #24]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d102      	bne.n	8002cfa <__swsetup_r+0x1a>
 8002cf4:	0028      	movs	r0, r5
 8002cf6:	f7ff fb0b 	bl	8002310 <__sinit>
 8002cfa:	4b32      	ldr	r3, [pc, #200]	; (8002dc4 <__swsetup_r+0xe4>)
 8002cfc:	429c      	cmp	r4, r3
 8002cfe:	d10f      	bne.n	8002d20 <__swsetup_r+0x40>
 8002d00:	686c      	ldr	r4, [r5, #4]
 8002d02:	230c      	movs	r3, #12
 8002d04:	5ee2      	ldrsh	r2, [r4, r3]
 8002d06:	b293      	uxth	r3, r2
 8002d08:	0711      	lsls	r1, r2, #28
 8002d0a:	d42d      	bmi.n	8002d68 <__swsetup_r+0x88>
 8002d0c:	06d9      	lsls	r1, r3, #27
 8002d0e:	d411      	bmi.n	8002d34 <__swsetup_r+0x54>
 8002d10:	2309      	movs	r3, #9
 8002d12:	2001      	movs	r0, #1
 8002d14:	6033      	str	r3, [r6, #0]
 8002d16:	3337      	adds	r3, #55	; 0x37
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	81a3      	strh	r3, [r4, #12]
 8002d1c:	4240      	negs	r0, r0
 8002d1e:	bd70      	pop	{r4, r5, r6, pc}
 8002d20:	4b29      	ldr	r3, [pc, #164]	; (8002dc8 <__swsetup_r+0xe8>)
 8002d22:	429c      	cmp	r4, r3
 8002d24:	d101      	bne.n	8002d2a <__swsetup_r+0x4a>
 8002d26:	68ac      	ldr	r4, [r5, #8]
 8002d28:	e7eb      	b.n	8002d02 <__swsetup_r+0x22>
 8002d2a:	4b28      	ldr	r3, [pc, #160]	; (8002dcc <__swsetup_r+0xec>)
 8002d2c:	429c      	cmp	r4, r3
 8002d2e:	d1e8      	bne.n	8002d02 <__swsetup_r+0x22>
 8002d30:	68ec      	ldr	r4, [r5, #12]
 8002d32:	e7e6      	b.n	8002d02 <__swsetup_r+0x22>
 8002d34:	075b      	lsls	r3, r3, #29
 8002d36:	d513      	bpl.n	8002d60 <__swsetup_r+0x80>
 8002d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d3a:	2900      	cmp	r1, #0
 8002d3c:	d008      	beq.n	8002d50 <__swsetup_r+0x70>
 8002d3e:	0023      	movs	r3, r4
 8002d40:	3344      	adds	r3, #68	; 0x44
 8002d42:	4299      	cmp	r1, r3
 8002d44:	d002      	beq.n	8002d4c <__swsetup_r+0x6c>
 8002d46:	0030      	movs	r0, r6
 8002d48:	f000 f9bc 	bl	80030c4 <_free_r>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	6363      	str	r3, [r4, #52]	; 0x34
 8002d50:	2224      	movs	r2, #36	; 0x24
 8002d52:	89a3      	ldrh	r3, [r4, #12]
 8002d54:	4393      	bics	r3, r2
 8002d56:	81a3      	strh	r3, [r4, #12]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	6063      	str	r3, [r4, #4]
 8002d5c:	6923      	ldr	r3, [r4, #16]
 8002d5e:	6023      	str	r3, [r4, #0]
 8002d60:	2308      	movs	r3, #8
 8002d62:	89a2      	ldrh	r2, [r4, #12]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	81a3      	strh	r3, [r4, #12]
 8002d68:	6923      	ldr	r3, [r4, #16]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10b      	bne.n	8002d86 <__swsetup_r+0xa6>
 8002d6e:	21a0      	movs	r1, #160	; 0xa0
 8002d70:	2280      	movs	r2, #128	; 0x80
 8002d72:	89a3      	ldrh	r3, [r4, #12]
 8002d74:	0089      	lsls	r1, r1, #2
 8002d76:	0092      	lsls	r2, r2, #2
 8002d78:	400b      	ands	r3, r1
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d003      	beq.n	8002d86 <__swsetup_r+0xa6>
 8002d7e:	0021      	movs	r1, r4
 8002d80:	0030      	movs	r0, r6
 8002d82:	f000 f93f 	bl	8003004 <__smakebuf_r>
 8002d86:	220c      	movs	r2, #12
 8002d88:	5ea3      	ldrsh	r3, [r4, r2]
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	001a      	movs	r2, r3
 8002d8e:	b299      	uxth	r1, r3
 8002d90:	4002      	ands	r2, r0
 8002d92:	4203      	tst	r3, r0
 8002d94:	d00f      	beq.n	8002db6 <__swsetup_r+0xd6>
 8002d96:	2200      	movs	r2, #0
 8002d98:	60a2      	str	r2, [r4, #8]
 8002d9a:	6962      	ldr	r2, [r4, #20]
 8002d9c:	4252      	negs	r2, r2
 8002d9e:	61a2      	str	r2, [r4, #24]
 8002da0:	2000      	movs	r0, #0
 8002da2:	6922      	ldr	r2, [r4, #16]
 8002da4:	4282      	cmp	r2, r0
 8002da6:	d1ba      	bne.n	8002d1e <__swsetup_r+0x3e>
 8002da8:	060a      	lsls	r2, r1, #24
 8002daa:	d5b8      	bpl.n	8002d1e <__swsetup_r+0x3e>
 8002dac:	2240      	movs	r2, #64	; 0x40
 8002dae:	4313      	orrs	r3, r2
 8002db0:	81a3      	strh	r3, [r4, #12]
 8002db2:	3801      	subs	r0, #1
 8002db4:	e7b3      	b.n	8002d1e <__swsetup_r+0x3e>
 8002db6:	0788      	lsls	r0, r1, #30
 8002db8:	d400      	bmi.n	8002dbc <__swsetup_r+0xdc>
 8002dba:	6962      	ldr	r2, [r4, #20]
 8002dbc:	60a2      	str	r2, [r4, #8]
 8002dbe:	e7ef      	b.n	8002da0 <__swsetup_r+0xc0>
 8002dc0:	2000000c 	.word	0x2000000c
 8002dc4:	08003270 	.word	0x08003270
 8002dc8:	08003290 	.word	0x08003290
 8002dcc:	08003250 	.word	0x08003250

08002dd0 <_close_r>:
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	b570      	push	{r4, r5, r6, lr}
 8002dd4:	4d06      	ldr	r5, [pc, #24]	; (8002df0 <_close_r+0x20>)
 8002dd6:	0004      	movs	r4, r0
 8002dd8:	0008      	movs	r0, r1
 8002dda:	602b      	str	r3, [r5, #0]
 8002ddc:	f7fd fc20 	bl	8000620 <_close>
 8002de0:	1c43      	adds	r3, r0, #1
 8002de2:	d103      	bne.n	8002dec <_close_r+0x1c>
 8002de4:	682b      	ldr	r3, [r5, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d000      	beq.n	8002dec <_close_r+0x1c>
 8002dea:	6023      	str	r3, [r4, #0]
 8002dec:	bd70      	pop	{r4, r5, r6, pc}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	20000124 	.word	0x20000124

08002df4 <__sflush_r>:
 8002df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002df6:	898b      	ldrh	r3, [r1, #12]
 8002df8:	0005      	movs	r5, r0
 8002dfa:	000c      	movs	r4, r1
 8002dfc:	071a      	lsls	r2, r3, #28
 8002dfe:	d45f      	bmi.n	8002ec0 <__sflush_r+0xcc>
 8002e00:	684a      	ldr	r2, [r1, #4]
 8002e02:	2a00      	cmp	r2, #0
 8002e04:	dc04      	bgt.n	8002e10 <__sflush_r+0x1c>
 8002e06:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002e08:	2a00      	cmp	r2, #0
 8002e0a:	dc01      	bgt.n	8002e10 <__sflush_r+0x1c>
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e10:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002e12:	2f00      	cmp	r7, #0
 8002e14:	d0fa      	beq.n	8002e0c <__sflush_r+0x18>
 8002e16:	2200      	movs	r2, #0
 8002e18:	2180      	movs	r1, #128	; 0x80
 8002e1a:	682e      	ldr	r6, [r5, #0]
 8002e1c:	602a      	str	r2, [r5, #0]
 8002e1e:	001a      	movs	r2, r3
 8002e20:	0149      	lsls	r1, r1, #5
 8002e22:	400a      	ands	r2, r1
 8002e24:	420b      	tst	r3, r1
 8002e26:	d034      	beq.n	8002e92 <__sflush_r+0x9e>
 8002e28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e2a:	89a3      	ldrh	r3, [r4, #12]
 8002e2c:	075b      	lsls	r3, r3, #29
 8002e2e:	d506      	bpl.n	8002e3e <__sflush_r+0x4a>
 8002e30:	6863      	ldr	r3, [r4, #4]
 8002e32:	1ac0      	subs	r0, r0, r3
 8002e34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <__sflush_r+0x4a>
 8002e3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e3c:	1ac0      	subs	r0, r0, r3
 8002e3e:	0002      	movs	r2, r0
 8002e40:	6a21      	ldr	r1, [r4, #32]
 8002e42:	2300      	movs	r3, #0
 8002e44:	0028      	movs	r0, r5
 8002e46:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002e48:	47b8      	blx	r7
 8002e4a:	89a1      	ldrh	r1, [r4, #12]
 8002e4c:	1c43      	adds	r3, r0, #1
 8002e4e:	d106      	bne.n	8002e5e <__sflush_r+0x6a>
 8002e50:	682b      	ldr	r3, [r5, #0]
 8002e52:	2b1d      	cmp	r3, #29
 8002e54:	d831      	bhi.n	8002eba <__sflush_r+0xc6>
 8002e56:	4a2c      	ldr	r2, [pc, #176]	; (8002f08 <__sflush_r+0x114>)
 8002e58:	40da      	lsrs	r2, r3
 8002e5a:	07d3      	lsls	r3, r2, #31
 8002e5c:	d52d      	bpl.n	8002eba <__sflush_r+0xc6>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	6063      	str	r3, [r4, #4]
 8002e62:	6923      	ldr	r3, [r4, #16]
 8002e64:	6023      	str	r3, [r4, #0]
 8002e66:	04cb      	lsls	r3, r1, #19
 8002e68:	d505      	bpl.n	8002e76 <__sflush_r+0x82>
 8002e6a:	1c43      	adds	r3, r0, #1
 8002e6c:	d102      	bne.n	8002e74 <__sflush_r+0x80>
 8002e6e:	682b      	ldr	r3, [r5, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d100      	bne.n	8002e76 <__sflush_r+0x82>
 8002e74:	6560      	str	r0, [r4, #84]	; 0x54
 8002e76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e78:	602e      	str	r6, [r5, #0]
 8002e7a:	2900      	cmp	r1, #0
 8002e7c:	d0c6      	beq.n	8002e0c <__sflush_r+0x18>
 8002e7e:	0023      	movs	r3, r4
 8002e80:	3344      	adds	r3, #68	; 0x44
 8002e82:	4299      	cmp	r1, r3
 8002e84:	d002      	beq.n	8002e8c <__sflush_r+0x98>
 8002e86:	0028      	movs	r0, r5
 8002e88:	f000 f91c 	bl	80030c4 <_free_r>
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	6360      	str	r0, [r4, #52]	; 0x34
 8002e90:	e7bd      	b.n	8002e0e <__sflush_r+0x1a>
 8002e92:	2301      	movs	r3, #1
 8002e94:	0028      	movs	r0, r5
 8002e96:	6a21      	ldr	r1, [r4, #32]
 8002e98:	47b8      	blx	r7
 8002e9a:	1c43      	adds	r3, r0, #1
 8002e9c:	d1c5      	bne.n	8002e2a <__sflush_r+0x36>
 8002e9e:	682b      	ldr	r3, [r5, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0c2      	beq.n	8002e2a <__sflush_r+0x36>
 8002ea4:	2b1d      	cmp	r3, #29
 8002ea6:	d001      	beq.n	8002eac <__sflush_r+0xb8>
 8002ea8:	2b16      	cmp	r3, #22
 8002eaa:	d101      	bne.n	8002eb0 <__sflush_r+0xbc>
 8002eac:	602e      	str	r6, [r5, #0]
 8002eae:	e7ad      	b.n	8002e0c <__sflush_r+0x18>
 8002eb0:	2340      	movs	r3, #64	; 0x40
 8002eb2:	89a2      	ldrh	r2, [r4, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	81a3      	strh	r3, [r4, #12]
 8002eb8:	e7a9      	b.n	8002e0e <__sflush_r+0x1a>
 8002eba:	2340      	movs	r3, #64	; 0x40
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	e7fa      	b.n	8002eb6 <__sflush_r+0xc2>
 8002ec0:	690f      	ldr	r7, [r1, #16]
 8002ec2:	2f00      	cmp	r7, #0
 8002ec4:	d0a2      	beq.n	8002e0c <__sflush_r+0x18>
 8002ec6:	680a      	ldr	r2, [r1, #0]
 8002ec8:	600f      	str	r7, [r1, #0]
 8002eca:	1bd2      	subs	r2, r2, r7
 8002ecc:	9201      	str	r2, [sp, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	079b      	lsls	r3, r3, #30
 8002ed2:	d100      	bne.n	8002ed6 <__sflush_r+0xe2>
 8002ed4:	694a      	ldr	r2, [r1, #20]
 8002ed6:	60a2      	str	r2, [r4, #8]
 8002ed8:	9b01      	ldr	r3, [sp, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	dc00      	bgt.n	8002ee0 <__sflush_r+0xec>
 8002ede:	e795      	b.n	8002e0c <__sflush_r+0x18>
 8002ee0:	003a      	movs	r2, r7
 8002ee2:	0028      	movs	r0, r5
 8002ee4:	9b01      	ldr	r3, [sp, #4]
 8002ee6:	6a21      	ldr	r1, [r4, #32]
 8002ee8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002eea:	47b0      	blx	r6
 8002eec:	2800      	cmp	r0, #0
 8002eee:	dc06      	bgt.n	8002efe <__sflush_r+0x10a>
 8002ef0:	2340      	movs	r3, #64	; 0x40
 8002ef2:	2001      	movs	r0, #1
 8002ef4:	89a2      	ldrh	r2, [r4, #12]
 8002ef6:	4240      	negs	r0, r0
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	81a3      	strh	r3, [r4, #12]
 8002efc:	e787      	b.n	8002e0e <__sflush_r+0x1a>
 8002efe:	9b01      	ldr	r3, [sp, #4]
 8002f00:	183f      	adds	r7, r7, r0
 8002f02:	1a1b      	subs	r3, r3, r0
 8002f04:	9301      	str	r3, [sp, #4]
 8002f06:	e7e7      	b.n	8002ed8 <__sflush_r+0xe4>
 8002f08:	20400001 	.word	0x20400001

08002f0c <_fflush_r>:
 8002f0c:	690b      	ldr	r3, [r1, #16]
 8002f0e:	b570      	push	{r4, r5, r6, lr}
 8002f10:	0005      	movs	r5, r0
 8002f12:	000c      	movs	r4, r1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d102      	bne.n	8002f1e <_fflush_r+0x12>
 8002f18:	2500      	movs	r5, #0
 8002f1a:	0028      	movs	r0, r5
 8002f1c:	bd70      	pop	{r4, r5, r6, pc}
 8002f1e:	2800      	cmp	r0, #0
 8002f20:	d004      	beq.n	8002f2c <_fflush_r+0x20>
 8002f22:	6983      	ldr	r3, [r0, #24]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <_fflush_r+0x20>
 8002f28:	f7ff f9f2 	bl	8002310 <__sinit>
 8002f2c:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <_fflush_r+0x74>)
 8002f2e:	429c      	cmp	r4, r3
 8002f30:	d11b      	bne.n	8002f6a <_fflush_r+0x5e>
 8002f32:	686c      	ldr	r4, [r5, #4]
 8002f34:	220c      	movs	r2, #12
 8002f36:	5ea3      	ldrsh	r3, [r4, r2]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0ed      	beq.n	8002f18 <_fflush_r+0xc>
 8002f3c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f3e:	07d2      	lsls	r2, r2, #31
 8002f40:	d404      	bmi.n	8002f4c <_fflush_r+0x40>
 8002f42:	059b      	lsls	r3, r3, #22
 8002f44:	d402      	bmi.n	8002f4c <_fflush_r+0x40>
 8002f46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f48:	f7ff fa83 	bl	8002452 <__retarget_lock_acquire_recursive>
 8002f4c:	0028      	movs	r0, r5
 8002f4e:	0021      	movs	r1, r4
 8002f50:	f7ff ff50 	bl	8002df4 <__sflush_r>
 8002f54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f56:	0005      	movs	r5, r0
 8002f58:	07db      	lsls	r3, r3, #31
 8002f5a:	d4de      	bmi.n	8002f1a <_fflush_r+0xe>
 8002f5c:	89a3      	ldrh	r3, [r4, #12]
 8002f5e:	059b      	lsls	r3, r3, #22
 8002f60:	d4db      	bmi.n	8002f1a <_fflush_r+0xe>
 8002f62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f64:	f7ff fa76 	bl	8002454 <__retarget_lock_release_recursive>
 8002f68:	e7d7      	b.n	8002f1a <_fflush_r+0xe>
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <_fflush_r+0x78>)
 8002f6c:	429c      	cmp	r4, r3
 8002f6e:	d101      	bne.n	8002f74 <_fflush_r+0x68>
 8002f70:	68ac      	ldr	r4, [r5, #8]
 8002f72:	e7df      	b.n	8002f34 <_fflush_r+0x28>
 8002f74:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <_fflush_r+0x7c>)
 8002f76:	429c      	cmp	r4, r3
 8002f78:	d1dc      	bne.n	8002f34 <_fflush_r+0x28>
 8002f7a:	68ec      	ldr	r4, [r5, #12]
 8002f7c:	e7da      	b.n	8002f34 <_fflush_r+0x28>
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	08003270 	.word	0x08003270
 8002f84:	08003290 	.word	0x08003290
 8002f88:	08003250 	.word	0x08003250

08002f8c <_lseek_r>:
 8002f8c:	b570      	push	{r4, r5, r6, lr}
 8002f8e:	0004      	movs	r4, r0
 8002f90:	0008      	movs	r0, r1
 8002f92:	0011      	movs	r1, r2
 8002f94:	001a      	movs	r2, r3
 8002f96:	2300      	movs	r3, #0
 8002f98:	4d05      	ldr	r5, [pc, #20]	; (8002fb0 <_lseek_r+0x24>)
 8002f9a:	602b      	str	r3, [r5, #0]
 8002f9c:	f7fd fb61 	bl	8000662 <_lseek>
 8002fa0:	1c43      	adds	r3, r0, #1
 8002fa2:	d103      	bne.n	8002fac <_lseek_r+0x20>
 8002fa4:	682b      	ldr	r3, [r5, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d000      	beq.n	8002fac <_lseek_r+0x20>
 8002faa:	6023      	str	r3, [r4, #0]
 8002fac:	bd70      	pop	{r4, r5, r6, pc}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	20000124 	.word	0x20000124

08002fb4 <__swhatbuf_r>:
 8002fb4:	b570      	push	{r4, r5, r6, lr}
 8002fb6:	000e      	movs	r6, r1
 8002fb8:	001d      	movs	r5, r3
 8002fba:	230e      	movs	r3, #14
 8002fbc:	5ec9      	ldrsh	r1, [r1, r3]
 8002fbe:	0014      	movs	r4, r2
 8002fc0:	b096      	sub	sp, #88	; 0x58
 8002fc2:	2900      	cmp	r1, #0
 8002fc4:	da08      	bge.n	8002fd8 <__swhatbuf_r+0x24>
 8002fc6:	220c      	movs	r2, #12
 8002fc8:	5eb3      	ldrsh	r3, [r6, r2]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	602a      	str	r2, [r5, #0]
 8002fce:	061b      	lsls	r3, r3, #24
 8002fd0:	d411      	bmi.n	8002ff6 <__swhatbuf_r+0x42>
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	e00f      	b.n	8002ff8 <__swhatbuf_r+0x44>
 8002fd8:	466a      	mov	r2, sp
 8002fda:	f000 f8d1 	bl	8003180 <_fstat_r>
 8002fde:	2800      	cmp	r0, #0
 8002fe0:	dbf1      	blt.n	8002fc6 <__swhatbuf_r+0x12>
 8002fe2:	23f0      	movs	r3, #240	; 0xf0
 8002fe4:	9901      	ldr	r1, [sp, #4]
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	4019      	ands	r1, r3
 8002fea:	4b05      	ldr	r3, [pc, #20]	; (8003000 <__swhatbuf_r+0x4c>)
 8002fec:	18c9      	adds	r1, r1, r3
 8002fee:	424b      	negs	r3, r1
 8002ff0:	4159      	adcs	r1, r3
 8002ff2:	6029      	str	r1, [r5, #0]
 8002ff4:	e7ed      	b.n	8002fd2 <__swhatbuf_r+0x1e>
 8002ff6:	2340      	movs	r3, #64	; 0x40
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	6023      	str	r3, [r4, #0]
 8002ffc:	b016      	add	sp, #88	; 0x58
 8002ffe:	bd70      	pop	{r4, r5, r6, pc}
 8003000:	ffffe000 	.word	0xffffe000

08003004 <__smakebuf_r>:
 8003004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003006:	2602      	movs	r6, #2
 8003008:	898b      	ldrh	r3, [r1, #12]
 800300a:	0005      	movs	r5, r0
 800300c:	000c      	movs	r4, r1
 800300e:	4233      	tst	r3, r6
 8003010:	d006      	beq.n	8003020 <__smakebuf_r+0x1c>
 8003012:	0023      	movs	r3, r4
 8003014:	3347      	adds	r3, #71	; 0x47
 8003016:	6023      	str	r3, [r4, #0]
 8003018:	6123      	str	r3, [r4, #16]
 800301a:	2301      	movs	r3, #1
 800301c:	6163      	str	r3, [r4, #20]
 800301e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003020:	466a      	mov	r2, sp
 8003022:	ab01      	add	r3, sp, #4
 8003024:	f7ff ffc6 	bl	8002fb4 <__swhatbuf_r>
 8003028:	9900      	ldr	r1, [sp, #0]
 800302a:	0007      	movs	r7, r0
 800302c:	0028      	movs	r0, r5
 800302e:	f7ff fa35 	bl	800249c <_malloc_r>
 8003032:	2800      	cmp	r0, #0
 8003034:	d108      	bne.n	8003048 <__smakebuf_r+0x44>
 8003036:	220c      	movs	r2, #12
 8003038:	5ea3      	ldrsh	r3, [r4, r2]
 800303a:	059a      	lsls	r2, r3, #22
 800303c:	d4ef      	bmi.n	800301e <__smakebuf_r+0x1a>
 800303e:	2203      	movs	r2, #3
 8003040:	4393      	bics	r3, r2
 8003042:	431e      	orrs	r6, r3
 8003044:	81a6      	strh	r6, [r4, #12]
 8003046:	e7e4      	b.n	8003012 <__smakebuf_r+0xe>
 8003048:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <__smakebuf_r+0x84>)
 800304a:	62ab      	str	r3, [r5, #40]	; 0x28
 800304c:	2380      	movs	r3, #128	; 0x80
 800304e:	89a2      	ldrh	r2, [r4, #12]
 8003050:	6020      	str	r0, [r4, #0]
 8003052:	4313      	orrs	r3, r2
 8003054:	81a3      	strh	r3, [r4, #12]
 8003056:	9b00      	ldr	r3, [sp, #0]
 8003058:	6120      	str	r0, [r4, #16]
 800305a:	6163      	str	r3, [r4, #20]
 800305c:	9b01      	ldr	r3, [sp, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00d      	beq.n	800307e <__smakebuf_r+0x7a>
 8003062:	0028      	movs	r0, r5
 8003064:	230e      	movs	r3, #14
 8003066:	5ee1      	ldrsh	r1, [r4, r3]
 8003068:	f000 f89c 	bl	80031a4 <_isatty_r>
 800306c:	2800      	cmp	r0, #0
 800306e:	d006      	beq.n	800307e <__smakebuf_r+0x7a>
 8003070:	2203      	movs	r2, #3
 8003072:	89a3      	ldrh	r3, [r4, #12]
 8003074:	4393      	bics	r3, r2
 8003076:	001a      	movs	r2, r3
 8003078:	2301      	movs	r3, #1
 800307a:	4313      	orrs	r3, r2
 800307c:	81a3      	strh	r3, [r4, #12]
 800307e:	89a0      	ldrh	r0, [r4, #12]
 8003080:	4307      	orrs	r7, r0
 8003082:	81a7      	strh	r7, [r4, #12]
 8003084:	e7cb      	b.n	800301e <__smakebuf_r+0x1a>
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	08002295 	.word	0x08002295

0800308c <memchr>:
 800308c:	b2c9      	uxtb	r1, r1
 800308e:	1882      	adds	r2, r0, r2
 8003090:	4290      	cmp	r0, r2
 8003092:	d101      	bne.n	8003098 <memchr+0xc>
 8003094:	2000      	movs	r0, #0
 8003096:	4770      	bx	lr
 8003098:	7803      	ldrb	r3, [r0, #0]
 800309a:	428b      	cmp	r3, r1
 800309c:	d0fb      	beq.n	8003096 <memchr+0xa>
 800309e:	3001      	adds	r0, #1
 80030a0:	e7f6      	b.n	8003090 <memchr+0x4>
	...

080030a4 <__malloc_lock>:
 80030a4:	b510      	push	{r4, lr}
 80030a6:	4802      	ldr	r0, [pc, #8]	; (80030b0 <__malloc_lock+0xc>)
 80030a8:	f7ff f9d3 	bl	8002452 <__retarget_lock_acquire_recursive>
 80030ac:	bd10      	pop	{r4, pc}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	20000118 	.word	0x20000118

080030b4 <__malloc_unlock>:
 80030b4:	b510      	push	{r4, lr}
 80030b6:	4802      	ldr	r0, [pc, #8]	; (80030c0 <__malloc_unlock+0xc>)
 80030b8:	f7ff f9cc 	bl	8002454 <__retarget_lock_release_recursive>
 80030bc:	bd10      	pop	{r4, pc}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	20000118 	.word	0x20000118

080030c4 <_free_r>:
 80030c4:	b570      	push	{r4, r5, r6, lr}
 80030c6:	0005      	movs	r5, r0
 80030c8:	2900      	cmp	r1, #0
 80030ca:	d010      	beq.n	80030ee <_free_r+0x2a>
 80030cc:	1f0c      	subs	r4, r1, #4
 80030ce:	6823      	ldr	r3, [r4, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	da00      	bge.n	80030d6 <_free_r+0x12>
 80030d4:	18e4      	adds	r4, r4, r3
 80030d6:	0028      	movs	r0, r5
 80030d8:	f7ff ffe4 	bl	80030a4 <__malloc_lock>
 80030dc:	4a1d      	ldr	r2, [pc, #116]	; (8003154 <_free_r+0x90>)
 80030de:	6813      	ldr	r3, [r2, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d105      	bne.n	80030f0 <_free_r+0x2c>
 80030e4:	6063      	str	r3, [r4, #4]
 80030e6:	6014      	str	r4, [r2, #0]
 80030e8:	0028      	movs	r0, r5
 80030ea:	f7ff ffe3 	bl	80030b4 <__malloc_unlock>
 80030ee:	bd70      	pop	{r4, r5, r6, pc}
 80030f0:	42a3      	cmp	r3, r4
 80030f2:	d908      	bls.n	8003106 <_free_r+0x42>
 80030f4:	6821      	ldr	r1, [r4, #0]
 80030f6:	1860      	adds	r0, r4, r1
 80030f8:	4283      	cmp	r3, r0
 80030fa:	d1f3      	bne.n	80030e4 <_free_r+0x20>
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	1841      	adds	r1, r0, r1
 8003102:	6021      	str	r1, [r4, #0]
 8003104:	e7ee      	b.n	80030e4 <_free_r+0x20>
 8003106:	001a      	movs	r2, r3
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <_free_r+0x4e>
 800310e:	42a3      	cmp	r3, r4
 8003110:	d9f9      	bls.n	8003106 <_free_r+0x42>
 8003112:	6811      	ldr	r1, [r2, #0]
 8003114:	1850      	adds	r0, r2, r1
 8003116:	42a0      	cmp	r0, r4
 8003118:	d10b      	bne.n	8003132 <_free_r+0x6e>
 800311a:	6820      	ldr	r0, [r4, #0]
 800311c:	1809      	adds	r1, r1, r0
 800311e:	1850      	adds	r0, r2, r1
 8003120:	6011      	str	r1, [r2, #0]
 8003122:	4283      	cmp	r3, r0
 8003124:	d1e0      	bne.n	80030e8 <_free_r+0x24>
 8003126:	6818      	ldr	r0, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	1841      	adds	r1, r0, r1
 800312c:	6011      	str	r1, [r2, #0]
 800312e:	6053      	str	r3, [r2, #4]
 8003130:	e7da      	b.n	80030e8 <_free_r+0x24>
 8003132:	42a0      	cmp	r0, r4
 8003134:	d902      	bls.n	800313c <_free_r+0x78>
 8003136:	230c      	movs	r3, #12
 8003138:	602b      	str	r3, [r5, #0]
 800313a:	e7d5      	b.n	80030e8 <_free_r+0x24>
 800313c:	6821      	ldr	r1, [r4, #0]
 800313e:	1860      	adds	r0, r4, r1
 8003140:	4283      	cmp	r3, r0
 8003142:	d103      	bne.n	800314c <_free_r+0x88>
 8003144:	6818      	ldr	r0, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	1841      	adds	r1, r0, r1
 800314a:	6021      	str	r1, [r4, #0]
 800314c:	6063      	str	r3, [r4, #4]
 800314e:	6054      	str	r4, [r2, #4]
 8003150:	e7ca      	b.n	80030e8 <_free_r+0x24>
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	2000011c 	.word	0x2000011c

08003158 <_read_r>:
 8003158:	b570      	push	{r4, r5, r6, lr}
 800315a:	0004      	movs	r4, r0
 800315c:	0008      	movs	r0, r1
 800315e:	0011      	movs	r1, r2
 8003160:	001a      	movs	r2, r3
 8003162:	2300      	movs	r3, #0
 8003164:	4d05      	ldr	r5, [pc, #20]	; (800317c <_read_r+0x24>)
 8003166:	602b      	str	r3, [r5, #0]
 8003168:	f7fd fa21 	bl	80005ae <_read>
 800316c:	1c43      	adds	r3, r0, #1
 800316e:	d103      	bne.n	8003178 <_read_r+0x20>
 8003170:	682b      	ldr	r3, [r5, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d000      	beq.n	8003178 <_read_r+0x20>
 8003176:	6023      	str	r3, [r4, #0]
 8003178:	bd70      	pop	{r4, r5, r6, pc}
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	20000124 	.word	0x20000124

08003180 <_fstat_r>:
 8003180:	2300      	movs	r3, #0
 8003182:	b570      	push	{r4, r5, r6, lr}
 8003184:	4d06      	ldr	r5, [pc, #24]	; (80031a0 <_fstat_r+0x20>)
 8003186:	0004      	movs	r4, r0
 8003188:	0008      	movs	r0, r1
 800318a:	0011      	movs	r1, r2
 800318c:	602b      	str	r3, [r5, #0]
 800318e:	f7fd fa51 	bl	8000634 <_fstat>
 8003192:	1c43      	adds	r3, r0, #1
 8003194:	d103      	bne.n	800319e <_fstat_r+0x1e>
 8003196:	682b      	ldr	r3, [r5, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d000      	beq.n	800319e <_fstat_r+0x1e>
 800319c:	6023      	str	r3, [r4, #0]
 800319e:	bd70      	pop	{r4, r5, r6, pc}
 80031a0:	20000124 	.word	0x20000124

080031a4 <_isatty_r>:
 80031a4:	2300      	movs	r3, #0
 80031a6:	b570      	push	{r4, r5, r6, lr}
 80031a8:	4d06      	ldr	r5, [pc, #24]	; (80031c4 <_isatty_r+0x20>)
 80031aa:	0004      	movs	r4, r0
 80031ac:	0008      	movs	r0, r1
 80031ae:	602b      	str	r3, [r5, #0]
 80031b0:	f7fd fa4e 	bl	8000650 <_isatty>
 80031b4:	1c43      	adds	r3, r0, #1
 80031b6:	d103      	bne.n	80031c0 <_isatty_r+0x1c>
 80031b8:	682b      	ldr	r3, [r5, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d000      	beq.n	80031c0 <_isatty_r+0x1c>
 80031be:	6023      	str	r3, [r4, #0]
 80031c0:	bd70      	pop	{r4, r5, r6, pc}
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	20000124 	.word	0x20000124

080031c8 <_init>:
 80031c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ce:	bc08      	pop	{r3}
 80031d0:	469e      	mov	lr, r3
 80031d2:	4770      	bx	lr

080031d4 <_fini>:
 80031d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031da:	bc08      	pop	{r3}
 80031dc:	469e      	mov	lr, r3
 80031de:	4770      	bx	lr
