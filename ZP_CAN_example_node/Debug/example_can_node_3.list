
example_can_node_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060f0  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080062e8  080062e8  000072e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800637c  0800637c  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800637c  0800637c  0000805c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800637c  0800637c  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800637c  0800637c  0000737c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08006384  08006384  00007384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800638c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001290  20000060  080063e8  00008060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200012f0  080063e8  000082f0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010360  00000000  00000000  00008092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c07  00000000  00000000  000183f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  0001b000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a7b  00000000  00000000  0001be00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b59a  00000000  00000000  0001c87b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135fa  00000000  00000000  00047e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001145ab  00000000  00000000  0005b40f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016f9ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c9c  00000000  00000000  0016fa00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0017369c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000060 	.word	0x20000060
 8000214:	00000000 	.word	0x00000000
 8000218:	080062d0 	.word	0x080062d0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000064 	.word	0x20000064
 8000234:	080062d0 	.word	0x080062d0

08000238 <_uavcan_protocol_NodeStatus_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
static inline bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0
 800023e:	60f8      	str	r0, [r7, #12]
 8000240:	60b9      	str	r1, [r7, #8]
 8000242:	607a      	str	r2, [r7, #4]
 8000244:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->uptime_sec);
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	6819      	ldr	r1, [r3, #0]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2220      	movs	r2, #32
 800024e:	68f8      	ldr	r0, [r7, #12]
 8000250:	f001 fc95 	bl	8001b7e <canardEncodeScalar>

    *bit_ofs += 32;
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	f103 0220 	add.w	r2, r3, #32
 800025c:	68bb      	ldr	r3, [r7, #8]
 800025e:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 2, &msg->health);
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	6819      	ldr	r1, [r3, #0]
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	3304      	adds	r3, #4
 8000268:	2202      	movs	r2, #2
 800026a:	68f8      	ldr	r0, [r7, #12]
 800026c:	f001 fc87 	bl	8001b7e <canardEncodeScalar>

    *bit_ofs += 2;
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	1c9a      	adds	r2, r3, #2
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->mode);
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	6819      	ldr	r1, [r3, #0]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	3305      	adds	r3, #5
 8000282:	2203      	movs	r2, #3
 8000284:	68f8      	ldr	r0, [r7, #12]
 8000286:	f001 fc7a 	bl	8001b7e <canardEncodeScalar>

    *bit_ofs += 3;
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	1cda      	adds	r2, r3, #3
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->sub_mode);
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	6819      	ldr	r1, [r3, #0]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	3306      	adds	r3, #6
 800029c:	2203      	movs	r2, #3
 800029e:	68f8      	ldr	r0, [r7, #12]
 80002a0:	f001 fc6d 	bl	8001b7e <canardEncodeScalar>

    *bit_ofs += 3;
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	1cda      	adds	r2, r3, #3
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->vendor_specific_status_code);
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	6819      	ldr	r1, [r3, #0]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	3308      	adds	r3, #8
 80002b6:	2210      	movs	r2, #16
 80002b8:	68f8      	ldr	r0, [r7, #12]
 80002ba:	f001 fc60 	bl	8001b7e <canardEncodeScalar>

    *bit_ofs += 16;
 80002be:	68bb      	ldr	r3, [r7, #8]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f103 0210 	add.w	r2, r3, #16
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	601a      	str	r2, [r3, #0]





}
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}

080002d2 <_uavcan_protocol_NodeStatus_decode>:

/*
 decode uavcan_protocol_NodeStatus, return true on failure, false on success
*/
bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 80002d2:	b580      	push	{r7, lr}
 80002d4:	b086      	sub	sp, #24
 80002d6:	af02      	add	r7, sp, #8
 80002d8:	60f8      	str	r0, [r7, #12]
 80002da:	60b9      	str	r1, [r7, #8]
 80002dc:	607a      	str	r2, [r7, #4]
 80002de:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 32, false, &msg->uptime_sec);
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	6819      	ldr	r1, [r3, #0]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	9300      	str	r3, [sp, #0]
 80002e8:	2300      	movs	r3, #0
 80002ea:	2220      	movs	r2, #32
 80002ec:	68f8      	ldr	r0, [r7, #12]
 80002ee:	f001 fabd 	bl	800186c <canardDecodeScalar>

    *bit_ofs += 32;
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f103 0220 	add.w	r2, r3, #32
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 2, false, &msg->health);
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	6819      	ldr	r1, [r3, #0]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	3304      	adds	r3, #4
 8000306:	9300      	str	r3, [sp, #0]
 8000308:	2300      	movs	r3, #0
 800030a:	2202      	movs	r2, #2
 800030c:	68f8      	ldr	r0, [r7, #12]
 800030e:	f001 faad 	bl	800186c <canardDecodeScalar>

    *bit_ofs += 2;
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	1c9a      	adds	r2, r3, #2
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->mode);
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	6819      	ldr	r1, [r3, #0]
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	3305      	adds	r3, #5
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	2300      	movs	r3, #0
 8000328:	2203      	movs	r2, #3
 800032a:	68f8      	ldr	r0, [r7, #12]
 800032c:	f001 fa9e 	bl	800186c <canardDecodeScalar>

    *bit_ofs += 3;
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	1cda      	adds	r2, r3, #3
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->sub_mode);
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	6819      	ldr	r1, [r3, #0]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	3306      	adds	r3, #6
 8000342:	9300      	str	r3, [sp, #0]
 8000344:	2300      	movs	r3, #0
 8000346:	2203      	movs	r2, #3
 8000348:	68f8      	ldr	r0, [r7, #12]
 800034a:	f001 fa8f 	bl	800186c <canardDecodeScalar>

    *bit_ofs += 3;
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	1cda      	adds	r2, r3, #3
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 16, false, &msg->vendor_specific_status_code);
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	6819      	ldr	r1, [r3, #0]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	3308      	adds	r3, #8
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	2300      	movs	r3, #0
 8000364:	2210      	movs	r2, #16
 8000366:	68f8      	ldr	r0, [r7, #12]
 8000368:	f001 fa80 	bl	800186c <canardDecodeScalar>

    *bit_ofs += 16;
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f103 0210 	add.w	r2, r3, #16
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	601a      	str	r2, [r3, #0]





    return false; /* success */
 8000378:	2300      	movs	r3, #0

}
 800037a:	4618      	mov	r0, r3
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}

08000382 <uavcan_protocol_NodeStatus_encode>:

uint32_t uavcan_protocol_NodeStatus_encode(struct uavcan_protocol_NodeStatus* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 8000382:	b580      	push	{r7, lr}
 8000384:	b084      	sub	sp, #16
 8000386:	af00      	add	r7, sp, #0
 8000388:	6078      	str	r0, [r7, #4]
 800038a:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 800038c:	2300      	movs	r3, #0
 800038e:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE);
 8000390:	2207      	movs	r2, #7
 8000392:	2100      	movs	r1, #0
 8000394:	6838      	ldr	r0, [r7, #0]
 8000396:	f005 ff15 	bl	80061c4 <memset>
    _uavcan_protocol_NodeStatus_encode(buffer, &bit_ofs, msg, 
 800039a:	f107 010c 	add.w	r1, r7, #12
 800039e:	2301      	movs	r3, #1
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	6838      	ldr	r0, [r7, #0]
 80003a4:	f7ff ff48 	bl	8000238 <_uavcan_protocol_NodeStatus_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	3307      	adds	r3, #7
 80003ac:	08db      	lsrs	r3, r3, #3
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3710      	adds	r7, #16
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <uavcan_protocol_NodeStatus_decode>:

/*
  return true if the decode is invalid
 */
bool uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, struct uavcan_protocol_NodeStatus* msg) {
 80003b6:	b580      	push	{r7, lr}
 80003b8:	b084      	sub	sp, #16
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
 80003be:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60bb      	str	r3, [r7, #8]
    if (_uavcan_protocol_NodeStatus_decode(transfer, &bit_ofs, msg,
 80003c4:	f107 0108 	add.w	r1, r7, #8
 80003c8:	2301      	movs	r3, #1
 80003ca:	683a      	ldr	r2, [r7, #0]
 80003cc:	6878      	ldr	r0, [r7, #4]
 80003ce:	f7ff ff80 	bl	80002d2 <_uavcan_protocol_NodeStatus_decode>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <uavcan_protocol_NodeStatus_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 80003d8:	2301      	movs	r3, #1
 80003da:	e00c      	b.n	80003f6 <uavcan_protocol_NodeStatus_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	3307      	adds	r3, #7
 80003e0:	08db      	lsrs	r3, r3, #3
 80003e2:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	8a9b      	ldrh	r3, [r3, #20]
 80003e8:	461a      	mov	r2, r3
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	4293      	cmp	r3, r2
 80003ee:	bf14      	ite	ne
 80003f0:	2301      	movne	r3, #1
 80003f2:	2300      	moveq	r3, #0
 80003f4:	b2db      	uxtb	r3, r3
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <_uavcan_protocol_dynamic_node_id_Allocation_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_dynamic_node_id_Allocation_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_dynamic_node_id_Allocation* msg, bool tao);
static inline bool _uavcan_protocol_dynamic_node_id_Allocation_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_dynamic_node_id_Allocation* msg, bool tao);
void _uavcan_protocol_dynamic_node_id_Allocation_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_dynamic_node_id_Allocation* msg, bool tao) {
 80003fe:	b580      	push	{r7, lr}
 8000400:	b086      	sub	sp, #24
 8000402:	af00      	add	r7, sp, #0
 8000404:	60f8      	str	r0, [r7, #12]
 8000406:	60b9      	str	r1, [r7, #8]
 8000408:	607a      	str	r2, [r7, #4]
 800040a:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 7, &msg->node_id);
 800040c:	68bb      	ldr	r3, [r7, #8]
 800040e:	6819      	ldr	r1, [r3, #0]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	2207      	movs	r2, #7
 8000414:	68f8      	ldr	r0, [r7, #12]
 8000416:	f001 fbb2 	bl	8001b7e <canardEncodeScalar>

    *bit_ofs += 7;
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	1dda      	adds	r2, r3, #7
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 1, &msg->first_part_of_unique_id);
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	6819      	ldr	r1, [r3, #0]
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	3301      	adds	r3, #1
 800042c:	2201      	movs	r2, #1
 800042e:	68f8      	ldr	r0, [r7, #12]
 8000430:	f001 fba5 	bl	8001b7e <canardEncodeScalar>

    *bit_ofs += 1;
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	1c5a      	adds	r2, r3, #1
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	601a      	str	r2, [r3, #0]





    if (!tao) {
 800043e:	78fb      	ldrb	r3, [r7, #3]
 8000440:	f083 0301 	eor.w	r3, r3, #1
 8000444:	b2db      	uxtb	r3, r3
 8000446:	2b00      	cmp	r3, #0
 8000448:	d00c      	beq.n	8000464 <_uavcan_protocol_dynamic_node_id_Allocation_encode+0x66>


        canardEncodeScalar(buffer, *bit_ofs, 5, &msg->unique_id.len);
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	6819      	ldr	r1, [r3, #0]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	3302      	adds	r3, #2
 8000452:	2205      	movs	r2, #5
 8000454:	68f8      	ldr	r0, [r7, #12]
 8000456:	f001 fb92 	bl	8001b7e <canardEncodeScalar>
        *bit_ofs += 5;
 800045a:	68bb      	ldr	r3, [r7, #8]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	1d5a      	adds	r2, r3, #5
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	601a      	str	r2, [r3, #0]

    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const size_t unique_id_len = msg->unique_id.len > 16 ? 16 : msg->unique_id.len;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	789b      	ldrb	r3, [r3, #2]
 8000468:	2b10      	cmp	r3, #16
 800046a:	bf28      	it	cs
 800046c:	2310      	movcs	r3, #16
 800046e:	b2db      	uxtb	r3, r3
 8000470:	613b      	str	r3, [r7, #16]
#pragma GCC diagnostic pop
    for (size_t i=0; i < unique_id_len; i++) {
 8000472:	2300      	movs	r3, #0
 8000474:	617b      	str	r3, [r7, #20]
 8000476:	e012      	b.n	800049e <_uavcan_protocol_dynamic_node_id_Allocation_encode+0xa0>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->unique_id.data[i]);
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	6819      	ldr	r1, [r3, #0]
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	4413      	add	r3, r2
 8000482:	3303      	adds	r3, #3
 8000484:	2208      	movs	r2, #8
 8000486:	68f8      	ldr	r0, [r7, #12]
 8000488:	f001 fb79 	bl	8001b7e <canardEncodeScalar>

        *bit_ofs += 8;
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f103 0208 	add.w	r2, r3, #8
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < unique_id_len; i++) {
 8000498:	697b      	ldr	r3, [r7, #20]
 800049a:	3301      	adds	r3, #1
 800049c:	617b      	str	r3, [r7, #20]
 800049e:	697a      	ldr	r2, [r7, #20]
 80004a0:	693b      	ldr	r3, [r7, #16]
 80004a2:	429a      	cmp	r2, r3
 80004a4:	d3e8      	bcc.n	8000478 <_uavcan_protocol_dynamic_node_id_Allocation_encode+0x7a>





}
 80004a6:	bf00      	nop
 80004a8:	bf00      	nop
 80004aa:	3718      	adds	r7, #24
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <_uavcan_protocol_dynamic_node_id_Allocation_decode>:

/*
 decode uavcan_protocol_dynamic_node_id_Allocation, return true on failure, false on success
*/
bool _uavcan_protocol_dynamic_node_id_Allocation_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_dynamic_node_id_Allocation* msg, bool tao) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b088      	sub	sp, #32
 80004b4:	af02      	add	r7, sp, #8
 80004b6:	60f8      	str	r0, [r7, #12]
 80004b8:	60b9      	str	r1, [r7, #8]
 80004ba:	607a      	str	r2, [r7, #4]
 80004bc:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 7, false, &msg->node_id);
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	6819      	ldr	r1, [r3, #0]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	9300      	str	r3, [sp, #0]
 80004c6:	2300      	movs	r3, #0
 80004c8:	2207      	movs	r2, #7
 80004ca:	68f8      	ldr	r0, [r7, #12]
 80004cc:	f001 f9ce 	bl	800186c <canardDecodeScalar>

    *bit_ofs += 7;
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	1dda      	adds	r2, r3, #7
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 1, false, &msg->first_part_of_unique_id);
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	6819      	ldr	r1, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	3301      	adds	r3, #1
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	2300      	movs	r3, #0
 80004e6:	2201      	movs	r2, #1
 80004e8:	68f8      	ldr	r0, [r7, #12]
 80004ea:	f001 f9bf 	bl	800186c <canardDecodeScalar>

    *bit_ofs += 1;
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	1c5a      	adds	r2, r3, #1
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	601a      	str	r2, [r3, #0]





    if (!tao) {
 80004f8:	78fb      	ldrb	r3, [r7, #3]
 80004fa:	f083 0301 	eor.w	r3, r3, #1
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	2b00      	cmp	r3, #0
 8000502:	d00f      	beq.n	8000524 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x74>


        canardDecodeScalar(transfer, *bit_ofs, 5, false, &msg->unique_id.len);
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	6819      	ldr	r1, [r3, #0]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	3302      	adds	r3, #2
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	2300      	movs	r3, #0
 8000510:	2205      	movs	r2, #5
 8000512:	68f8      	ldr	r0, [r7, #12]
 8000514:	f001 f9aa 	bl	800186c <canardDecodeScalar>
        *bit_ofs += 5;
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	1d5a      	adds	r2, r3, #5
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	e00a      	b.n	800053a <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x8a>



    } else {

        msg->unique_id.len = ((transfer->payload_len*8)-*bit_ofs)/8;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	8a9b      	ldrh	r3, [r3, #20]
 8000528:	00db      	lsls	r3, r3, #3
 800052a:	461a      	mov	r2, r3
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	1ad3      	subs	r3, r2, r3
 8000532:	08db      	lsrs	r3, r3, #3
 8000534:	b2da      	uxtb	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	709a      	strb	r2, [r3, #2]



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    if (msg->unique_id.len > 16) {
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	789b      	ldrb	r3, [r3, #2]
 800053e:	2b10      	cmp	r3, #16
 8000540:	d901      	bls.n	8000546 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x96>
        return true; /* invalid value */
 8000542:	2301      	movs	r3, #1
 8000544:	e01e      	b.n	8000584 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0xd4>
    }
#pragma GCC diagnostic pop
    for (size_t i=0; i < msg->unique_id.len; i++) {
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
 800054a:	e014      	b.n	8000576 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0xc6>




        canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->unique_id.data[i]);
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	6819      	ldr	r1, [r3, #0]
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	4413      	add	r3, r2
 8000556:	3303      	adds	r3, #3
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	2208      	movs	r2, #8
 800055e:	68f8      	ldr	r0, [r7, #12]
 8000560:	f001 f984 	bl	800186c <canardDecodeScalar>

        *bit_ofs += 8;
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f103 0208 	add.w	r2, r3, #8
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < msg->unique_id.len; i++) {
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	3301      	adds	r3, #1
 8000574:	617b      	str	r3, [r7, #20]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	789b      	ldrb	r3, [r3, #2]
 800057a:	461a      	mov	r2, r3
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	4293      	cmp	r3, r2
 8000580:	d3e4      	bcc.n	800054c <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x9c>





    return false; /* success */
 8000582:	2300      	movs	r3, #0

}
 8000584:	4618      	mov	r0, r3
 8000586:	3718      	adds	r7, #24
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <uavcan_protocol_dynamic_node_id_Allocation_encode>:

uint32_t uavcan_protocol_dynamic_node_id_Allocation_encode(struct uavcan_protocol_dynamic_node_id_Allocation* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MAX_SIZE);
 800059a:	2212      	movs	r2, #18
 800059c:	2100      	movs	r1, #0
 800059e:	6838      	ldr	r0, [r7, #0]
 80005a0:	f005 fe10 	bl	80061c4 <memset>
    _uavcan_protocol_dynamic_node_id_Allocation_encode(buffer, &bit_ofs, msg, 
 80005a4:	f107 010c 	add.w	r1, r7, #12
 80005a8:	2301      	movs	r3, #1
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	6838      	ldr	r0, [r7, #0]
 80005ae:	f7ff ff26 	bl	80003fe <_uavcan_protocol_dynamic_node_id_Allocation_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	3307      	adds	r3, #7
 80005b6:	08db      	lsrs	r3, r3, #3
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <uavcan_protocol_dynamic_node_id_Allocation_decode>:

/*
  return true if the decode is invalid
 */
bool uavcan_protocol_dynamic_node_id_Allocation_decode(const CanardRxTransfer* transfer, struct uavcan_protocol_dynamic_node_id_Allocation* msg) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
    if (_uavcan_protocol_dynamic_node_id_Allocation_decode(transfer, &bit_ofs, msg,
 80005ce:	f107 0108 	add.w	r1, r7, #8
 80005d2:	2301      	movs	r3, #1
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f7ff ff6a 	bl	80004b0 <_uavcan_protocol_dynamic_node_id_Allocation_decode>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <uavcan_protocol_dynamic_node_id_Allocation_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 80005e2:	2301      	movs	r3, #1
 80005e4:	e00c      	b.n	8000600 <uavcan_protocol_dynamic_node_id_Allocation_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	3307      	adds	r3, #7
 80005ea:	08db      	lsrs	r3, r3, #3
 80005ec:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	8a9b      	ldrh	r3, [r3, #20]
 80005f2:	461a      	mov	r2, r3
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	4293      	cmp	r3, r2
 80005f8:	bf14      	ite	ne
 80005fa:	2301      	movne	r3, #1
 80005fc:	2300      	moveq	r3, #0
 80005fe:	b2db      	uxtb	r3, r3
}
 8000600:	4618      	mov	r0, r3
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <_ZL25StaticOnTransferReceptionP14CanardInstanceP16CanardRxTransfer>:

#include "can.hpp"

static void StaticOnTransferReception(CanardInstance* ins, CanardRxTransfer* transfer) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
    CAN* self = static_cast<CAN*>(ins->user_reference);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000616:	60fb      	str	r3, [r7, #12]
    self->CanardOnTransferReception(ins, transfer);
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	68f8      	ldr	r0, [r7, #12]
 800061e:	f000 f8e7 	bl	80007f0 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer>
}
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <_ZL26StaticShouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh>:

static bool StaticShouldAcceptTransfer(const CanardInstance* ins, uint64_t* out_sig, uint16_t id, CanardTransferType type, uint8_t src) {
 800062a:	b580      	push	{r7, lr}
 800062c:	b086      	sub	sp, #24
 800062e:	af02      	add	r7, sp, #8
 8000630:	60f8      	str	r0, [r7, #12]
 8000632:	60b9      	str	r1, [r7, #8]
 8000634:	4611      	mov	r1, r2
 8000636:	461a      	mov	r2, r3
 8000638:	460b      	mov	r3, r1
 800063a:	80fb      	strh	r3, [r7, #6]
 800063c:	4613      	mov	r3, r2
 800063e:	717b      	strb	r3, [r7, #5]

	return static_cast<CAN*>(ins->user_reference)->CanardShouldAcceptTransfer(ins, out_sig, id, type, src);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000644:	88fa      	ldrh	r2, [r7, #6]
 8000646:	7e3b      	ldrb	r3, [r7, #24]
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	797b      	ldrb	r3, [r7, #5]
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	4613      	mov	r3, r2
 8000650:	68ba      	ldr	r2, [r7, #8]
 8000652:	68f9      	ldr	r1, [r7, #12]
 8000654:	f000 f89c 	bl	8000790 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh>
 8000658:	4603      	mov	r3, r0
}
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <_ZN4ICANC1Ev>:
#pragma once

class ICAN {

protected:
	ICAN() = default;
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	4a04      	ldr	r2, [pc, #16]	@ (8000680 <_ZN4ICANC1Ev+0x1c>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4618      	mov	r0, r3
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	08006310 	.word	0x08006310

08000684 <_ZN4ICAND1Ev>:

public:
	virtual ~ICAN() = default;
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	4a04      	ldr	r2, [pc, #16]	@ (80006a0 <_ZN4ICAND1Ev+0x1c>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4618      	mov	r0, r3
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	08006310 	.word	0x08006310

080006a4 <_ZN4ICAND0Ev>:
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff ffe9 	bl	8000684 <_ZN4ICAND1Ev>
 80006b2:	2104      	movs	r1, #4
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f005 fd5d 	bl	8006174 <_ZdlPvj>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4618      	mov	r0, r3
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <_ZN3CANC1EP19FDCAN_HandleTypeDef>:

CAN::CAN(FDCAN_HandleTypeDef *hfdcan) : hfdcan(hfdcan) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af02      	add	r7, sp, #8
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	6039      	str	r1, [r7, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ffc7 	bl	8000664 <_ZN4ICANC1Ev>
 80006d6:	4a18      	ldr	r2, [pc, #96]	@ (8000738 <_ZN3CANC1EP19FDCAN_HandleTypeDef+0x74>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2202      	movs	r2, #2
 80006e0:	f883 2c08 	strb.w	r2, [r3, #3080]	@ 0xc08
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	683a      	ldr	r2, [r7, #0]
 80006e8:	f8c3 2c0c 	str.w	r2, [r3, #3084]	@ 0xc0c
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2200      	movs	r2, #0
 80006f0:	f8c3 2c48 	str.w	r2, [r3, #3144]	@ 0xc48
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	f8c3 2c4c 	str.w	r2, [r3, #3148]	@ 0xc4c
	static uint8_t canardMemoryPool[1024];

	canardInit(&canard,
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f503 6041 	add.w	r0, r3, #3088	@ 0xc10
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	9301      	str	r3, [sp, #4]
 8000706:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <_ZN3CANC1EP19FDCAN_HandleTypeDef+0x78>)
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	4b0d      	ldr	r3, [pc, #52]	@ (8000740 <_ZN3CANC1EP19FDCAN_HandleTypeDef+0x7c>)
 800070c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000710:	490c      	ldr	r1, [pc, #48]	@ (8000744 <_ZN3CANC1EP19FDCAN_HandleTypeDef+0x80>)
 8000712:	f000 fbc9 	bl	8000ea8 <canardInit>
			&StaticOnTransferReception,
			&StaticShouldAcceptTransfer,
			this
	);

	nodeStatus = {0};
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f603 433c 	addw	r3, r3, #3132	@ 0xc3c
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]

	canard.node_id = 0;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2c10 	strb.w	r2, [r3, #3088]	@ 0xc10
}
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	08006300 	.word	0x08006300
 800073c:	0800062b 	.word	0x0800062b
 8000740:	08000609 	.word	0x08000609
 8000744:	2000007c 	.word	0x2000007c

08000748 <_ZN3CAND1Ev>:

CAN::~CAN() {}
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	4a05      	ldr	r2, [pc, #20]	@ (8000768 <_ZN3CAND1Ev+0x20>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff93 	bl	8000684 <_ZN4ICAND1Ev>
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4618      	mov	r0, r3
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	08006300 	.word	0x08006300

0800076c <_ZN3CAND0Ev>:
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ffe7 	bl	8000748 <_ZN3CAND1Ev>
 800077a:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f005 fcf8 	bl	8006174 <_ZdlPvj>
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh>:
    const CanardInstance* ins,
    uint64_t* out_data_type_signature,
    uint16_t data_type_id,
    CanardTransferType transfer_type,
    uint8_t source_node_id)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	807b      	strh	r3, [r7, #2]
    (void)ins;
    (void)source_node_id;

    switch (data_type_id)
 800079e:	887b      	ldrh	r3, [r7, #2]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d004      	beq.n	80007ae <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x1e>
 80007a4:	f240 1255 	movw	r2, #341	@ 0x155
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d008      	beq.n	80007be <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x2e>
 80007ac:	e00f      	b.n	80007ce <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x3e>
    {
        case UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_ID:
            *out_data_type_signature = UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_SIGNATURE;
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	a30b      	add	r3, pc, #44	@ (adr r3, 80007e0 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x50>)
 80007b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007b6:	e9c1 2300 	strd	r2, r3, [r1]
            return true;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e008      	b.n	80007d0 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x40>

        case UAVCAN_PROTOCOL_NODESTATUS_ID:
            *out_data_type_signature = UAVCAN_PROTOCOL_NODESTATUS_SIGNATURE;
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	a309      	add	r3, pc, #36	@ (adr r3, 80007e8 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x58>)
 80007c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007c6:	e9c1 2300 	strd	r2, r3, [r1]
            return true;
 80007ca:	2301      	movs	r3, #1
 80007cc:	e000      	b.n	80007d0 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x40>

        default:
            return false;
 80007ce:	2300      	movs	r3, #0
    }
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	f3af 8000 	nop.w
 80007e0:	20a11d40 	.word	0x20a11d40
 80007e4:	0b2a8126 	.word	0x0b2a8126
 80007e8:	c1a7c6f1 	.word	0xc1a7c6f1
 80007ec:	0f0868d0 	.word	0x0f0868d0

080007f0 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer>:

void CAN::CanardOnTransferReception(CanardInstance* ins, CanardRxTransfer* transfer)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	@ 0x30
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]

	uint8_t unique_id[6] = {
 80007fc:	4a2a      	ldr	r2, [pc, #168]	@ (80008a8 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0xb8>)
 80007fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000802:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000806:	6018      	str	r0, [r3, #0]
 8000808:	3304      	adds	r3, #4
 800080a:	8019      	strh	r1, [r3, #0]
			    0xBA, 0xAD, 0xF0, 0x0D,
			    0x12, 0x34
			};
    switch (transfer->data_type_id)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	8adb      	ldrh	r3, [r3, #22]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d004      	beq.n	800081e <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x2e>
 8000814:	f240 1255 	movw	r2, #341	@ 0x155
 8000818:	4293      	cmp	r3, r2
 800081a:	d03b      	beq.n	8000894 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0xa4>
            break;
        }

        // Add more types if needed (GetNodeInfo, etc.)
        default:
            break;
 800081c:	e040      	b.n	80008a0 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0xb0>
            if (transfer->transfer_type == CanardTransferTypeBroadcast)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	7e1b      	ldrb	r3, [r3, #24]
 8000822:	2b02      	cmp	r3, #2
 8000824:	d13b      	bne.n	800089e <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0xae>
            	if (transfer->source_node_id == 0) {
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	7edb      	ldrb	r3, [r3, #27]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d104      	bne.n	8000838 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x48>
            		handleNodeAllocation(transfer);
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	68f8      	ldr	r0, [r7, #12]
 8000832:	f000 f915 	bl	8000a60 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer>
            break;
 8000836:	e032      	b.n	800089e <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0xae>
            		struct uavcan_protocol_dynamic_node_id_Allocation msg = {};
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	f8c3 200f 	str.w	r2, [r3, #15]
					uavcan_protocol_dynamic_node_id_Allocation_decode(transfer, &msg);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff feb5 	bl	80005c0 <uavcan_protocol_dynamic_node_id_Allocation_decode>
					if (ins->node_id != 0) {
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d120      	bne.n	80008a0 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0xb0>
					if (msg.unique_id.len >= 6 && memcmp(msg.unique_id.data, unique_id, 6) == 0) {
 800085e:	7dbb      	ldrb	r3, [r7, #22]
 8000860:	2b05      	cmp	r3, #5
 8000862:	d91c      	bls.n	800089e <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0xae>
 8000864:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	3303      	adds	r3, #3
 800086e:	2206      	movs	r2, #6
 8000870:	4618      	mov	r0, r3
 8000872:	f005 fc97 	bl	80061a4 <memcmp>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d110      	bne.n	800089e <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0xae>
						if (msg.node_id != 0) {
 800087c:	7d3b      	ldrb	r3, [r7, #20]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d00d      	beq.n	800089e <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0xae>
							ins->node_id = msg.node_id;
 8000882:	7d3a      	ldrb	r2, [r7, #20]
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	701a      	strb	r2, [r3, #0]
							node_id = msg.node_id;
 8000888:	7d3b      	ldrb	r3, [r7, #20]
 800088a:	461a      	mov	r2, r3
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f8c3 2c4c 	str.w	r2, [r3, #3148]	@ 0xc4c
            break;
 8000892:	e004      	b.n	800089e <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0xae>
            handleNodeStatus(transfer);
 8000894:	6879      	ldr	r1, [r7, #4]
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	f000 f89c 	bl	80009d4 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer>
            break;
 800089c:	e000      	b.n	80008a0 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0xb0>
            break;
 800089e:	bf00      	nop
    }
}
 80008a0:	3730      	adds	r7, #48	@ 0x30
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	080062e8 	.word	0x080062e8

080008ac <_Z11dlcToLengthm>:

uint8_t dlcToLength(uint32_t dlc) {
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	switch (dlc) {
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b08      	cmp	r3, #8
 80008b8:	d826      	bhi.n	8000908 <_Z11dlcToLengthm+0x5c>
 80008ba:	a201      	add	r2, pc, #4	@ (adr r2, 80008c0 <_Z11dlcToLengthm+0x14>)
 80008bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c0:	080008e5 	.word	0x080008e5
 80008c4:	080008e9 	.word	0x080008e9
 80008c8:	080008ed 	.word	0x080008ed
 80008cc:	080008f1 	.word	0x080008f1
 80008d0:	080008f5 	.word	0x080008f5
 80008d4:	080008f9 	.word	0x080008f9
 80008d8:	080008fd 	.word	0x080008fd
 80008dc:	08000901 	.word	0x08000901
 80008e0:	08000905 	.word	0x08000905
		case FDCAN_DLC_BYTES_0: return 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	e010      	b.n	800090a <_Z11dlcToLengthm+0x5e>
		case FDCAN_DLC_BYTES_1: return 1;
 80008e8:	2301      	movs	r3, #1
 80008ea:	e00e      	b.n	800090a <_Z11dlcToLengthm+0x5e>
		case FDCAN_DLC_BYTES_2: return 2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	e00c      	b.n	800090a <_Z11dlcToLengthm+0x5e>
		case FDCAN_DLC_BYTES_3: return 3;
 80008f0:	2303      	movs	r3, #3
 80008f2:	e00a      	b.n	800090a <_Z11dlcToLengthm+0x5e>
		case FDCAN_DLC_BYTES_4: return 4;
 80008f4:	2304      	movs	r3, #4
 80008f6:	e008      	b.n	800090a <_Z11dlcToLengthm+0x5e>
		case FDCAN_DLC_BYTES_5: return 5;
 80008f8:	2305      	movs	r3, #5
 80008fa:	e006      	b.n	800090a <_Z11dlcToLengthm+0x5e>
		case FDCAN_DLC_BYTES_6: return 6;
 80008fc:	2306      	movs	r3, #6
 80008fe:	e004      	b.n	800090a <_Z11dlcToLengthm+0x5e>
		case FDCAN_DLC_BYTES_7: return 7;
 8000900:	2307      	movs	r3, #7
 8000902:	e002      	b.n	800090a <_Z11dlcToLengthm+0x5e>
		case FDCAN_DLC_BYTES_8: return 8;
 8000904:	2308      	movs	r3, #8
 8000906:	e000      	b.n	800090a <_Z11dlcToLengthm+0x5e>
		default: return 8; // fallback
 8000908:	2308      	movs	r3, #8
	}
}
 800090a:	4618      	mov	r0, r3
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <_ZN3CAN13handleRxFrameEP21FDCAN_RxHeaderTypeDefPh>:


void CAN::handleRxFrame(FDCAN_RxHeaderTypeDef *rx_header, uint8_t * rx_data) {
 8000918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800091c:	b08a      	sub	sp, #40	@ 0x28
 800091e:	af00      	add	r7, sp, #0
 8000920:	60f8      	str	r0, [r7, #12]
 8000922:	60b9      	str	r1, [r7, #8]
 8000924:	607a      	str	r2, [r7, #4]
	const uint64_t timestamp_usec = HAL_GetTick() * 1000ULL;
 8000926:	f002 fd51 	bl	80033cc <HAL_GetTick>
 800092a:	4603      	mov	r3, r0
 800092c:	2200      	movs	r2, #0
 800092e:	469a      	mov	sl, r3
 8000930:	4693      	mov	fp, r2
 8000932:	4652      	mov	r2, sl
 8000934:	465b      	mov	r3, fp
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	f04f 0100 	mov.w	r1, #0
 800093e:	0159      	lsls	r1, r3, #5
 8000940:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000944:	0150      	lsls	r0, r2, #5
 8000946:	4602      	mov	r2, r0
 8000948:	460b      	mov	r3, r1
 800094a:	ebb2 040a 	subs.w	r4, r2, sl
 800094e:	eb63 050b 	sbc.w	r5, r3, fp
 8000952:	f04f 0200 	mov.w	r2, #0
 8000956:	f04f 0300 	mov.w	r3, #0
 800095a:	00ab      	lsls	r3, r5, #2
 800095c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8000960:	00a2      	lsls	r2, r4, #2
 8000962:	4614      	mov	r4, r2
 8000964:	461d      	mov	r5, r3
 8000966:	eb14 080a 	adds.w	r8, r4, sl
 800096a:	eb45 090b 	adc.w	r9, r5, fp
 800096e:	f04f 0200 	mov.w	r2, #0
 8000972:	f04f 0300 	mov.w	r3, #0
 8000976:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800097a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800097e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000982:	4690      	mov	r8, r2
 8000984:	4699      	mov	r9, r3
 8000986:	e9c7 8908 	strd	r8, r9, [r7, #32]


	CanardCANFrame frame;
	frame.id = rx_header->Identifier;
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	613b      	str	r3, [r7, #16]
	frame.id |= (1UL << 31U); // Add EFF bit
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000996:	613b      	str	r3, [r7, #16]
	frame.data_len = dlcToLength(rx_header->DataLength);
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff ff85 	bl	80008ac <_Z11dlcToLengthm>
 80009a2:	4603      	mov	r3, r0
 80009a4:	773b      	strb	r3, [r7, #28]
	memcpy(frame.data, rx_data, frame.data_len);
 80009a6:	7f3b      	ldrb	r3, [r7, #28]
 80009a8:	461a      	mov	r2, r3
 80009aa:	f107 0310 	add.w	r3, r7, #16
 80009ae:	3304      	adds	r3, #4
 80009b0:	6879      	ldr	r1, [r7, #4]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f005 fc34 	bl	8006220 <memcpy>

	canardHandleRxFrame(&canard, &frame, timestamp_usec);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f503 6041 	add.w	r0, r3, #3088	@ 0xc10
 80009be:	f107 0110 	add.w	r1, r7, #16
 80009c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80009c6:	f000 fbb3 	bl	8001130 <canardHandleRxFrame>
}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	@ 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080009d4 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer>:

void CAN::handleNodeStatus(CanardRxTransfer *transfer) {
 80009d4:	b5b0      	push	{r4, r5, r7, lr}
 80009d6:	b08a      	sub	sp, #40	@ 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
	uint32_t tick = HAL_GetTick();
 80009de:	f002 fcf5 	bl	80033cc <HAL_GetTick>
 80009e2:	6278      	str	r0, [r7, #36]	@ 0x24

	canNode node {0};
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
 80009f4:	615a      	str	r2, [r3, #20]

//	node.lastSeenTick = tick;

	bool invalid = uavcan_protocol_NodeStatus_decode(transfer, &node.status);
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	3308      	adds	r3, #8
 80009fc:	4619      	mov	r1, r3
 80009fe:	6838      	ldr	r0, [r7, #0]
 8000a00:	f7ff fcd9 	bl	80003b6 <uavcan_protocol_NodeStatus_decode>
 8000a04:	4603      	mov	r3, r0
 8000a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	if (invalid) return;
 8000a0a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d11c      	bne.n	8000a4c <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x78>

	// Node ID out of bounds or is anonymous
	if (transfer->source_node_id > CANARD_MAX_NODE_ID) return;
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	7edb      	ldrb	r3, [r3, #27]
 8000a16:	b25b      	sxtb	r3, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	db19      	blt.n	8000a50 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x7c>
	if (transfer->source_node_id == 0) return;
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	7edb      	ldrb	r3, [r3, #27]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d017      	beq.n	8000a54 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x80>

	canNodes[transfer->source_node_id] = node;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	7edb      	ldrb	r3, [r3, #27]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	440b      	add	r3, r1
 8000a32:	00db      	lsls	r3, r3, #3
 8000a34:	4413      	add	r3, r2
 8000a36:	3308      	adds	r3, #8
 8000a38:	461d      	mov	r5, r3
 8000a3a:	f107 0408 	add.w	r4, r7, #8
 8000a3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a46:	e885 0003 	stmia.w	r5, {r0, r1}
 8000a4a:	e004      	b.n	8000a56 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x82>
	if (invalid) return;
 8000a4c:	bf00      	nop
 8000a4e:	e002      	b.n	8000a56 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x82>
	if (transfer->source_node_id > CANARD_MAX_NODE_ID) return;
 8000a50:	bf00      	nop
 8000a52:	e000      	b.n	8000a56 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x82>
	if (transfer->source_node_id == 0) return;
 8000a54:	bf00      	nop
}
 8000a56:	3728      	adds	r7, #40	@ 0x28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a5c:	0000      	movs	r0, r0
	...

08000a60 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer>:

void CAN::handleNodeAllocation(CanardRxTransfer *transfer){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b098      	sub	sp, #96	@ 0x60
 8000a64:	af06      	add	r7, sp, #24
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]

	uint8_t first_half_unique_id[8];

 	if (transfer->source_node_id != 0) // the source node is not 0, it is not anonymous
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	7edb      	ldrb	r3, [r3, #27]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d155      	bne.n	8000b1e <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0xbe>
	{
		return;
	}

    struct uavcan_protocol_dynamic_node_id_Allocation msg = {};
 8000a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	f8c3 200f 	str.w	r2, [r3, #15]
	uavcan_protocol_dynamic_node_id_Allocation_decode(transfer, &msg);
 8000a84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a88:	4619      	mov	r1, r3
 8000a8a:	6838      	ldr	r0, [r7, #0]
 8000a8c:	f7ff fd98 	bl	80005c0 <uavcan_protocol_dynamic_node_id_Allocation_decode>

	if (msg.node_id != 0) // the node id is not 0, it is not anonymous
 8000a90:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d144      	bne.n	8000b22 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0xc2>
	{
		return;
	}

	memcpy(first_half_unique_id, msg.unique_id.data, 6);
 8000a98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a9c:	1cd9      	adds	r1, r3, #3
 8000a9e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000aa2:	2206      	movs	r2, #6
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f005 fbbb 	bl	8006220 <memcpy>
	msg.unique_id.len = 6;
 8000aaa:	2306      	movs	r3, #6
 8000aac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	// Generate the node id and allocate it
	int8_t allocated = allocateNode();
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f000 f841 	bl	8000b38 <_ZN3CAN12allocateNodeEv>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (allocated == -1) {
 8000abc:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8000ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac4:	d02f      	beq.n	8000b26 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0xc6>
		return;
	}
	msg.node_id = allocated;
 8000ac6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000aca:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	// Send message back
	uint8_t decode_buffer[UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MAX_SIZE];
	uint32_t encoded_size = uavcan_protocol_dynamic_node_id_Allocation_encode(&msg, decode_buffer);
 8000ace:	f107 0210 	add.w	r2, r7, #16
 8000ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fd57 	bl	800058c <uavcan_protocol_dynamic_node_id_Allocation_encode>
 8000ade:	6438      	str	r0, [r7, #64]	@ 0x40

	uint8_t transfer_id = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73fb      	strb	r3, [r7, #15]
	canard.node_id = 1;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f883 2c10 	strb.w	r2, [r3, #3088]	@ 0xc10
	broadcast(
 8000aec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	9304      	str	r3, [sp, #16]
 8000af2:	f107 0310 	add.w	r3, r7, #16
 8000af6:	9303      	str	r3, [sp, #12]
 8000af8:	2318      	movs	r3, #24
 8000afa:	9302      	str	r3, [sp, #8]
 8000afc:	f107 030f 	add.w	r3, r7, #15
 8000b00:	9301      	str	r3, [sp, #4]
 8000b02:	2301      	movs	r3, #1
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	a30a      	add	r3, pc, #40	@ (adr r3, 8000b30 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0xd0>)
 8000b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f000 f9a3 	bl	8000e5a <_ZN3CAN9broadcastE18CanardTransferTypeytPhhPKht>
		&transfer_id,
		CANARD_TRANSFER_PRIORITY_LOW,
		decode_buffer,
		encoded_size
	);
	canard.node_id = 0;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	f883 2c10 	strb.w	r2, [r3, #3088]	@ 0xc10
 8000b1c:	e004      	b.n	8000b28 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0xc8>
		return;
 8000b1e:	bf00      	nop
 8000b20:	e002      	b.n	8000b28 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0xc8>
		return;
 8000b22:	bf00      	nop
 8000b24:	e000      	b.n	8000b28 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0xc8>
		return;
 8000b26:	bf00      	nop

}
 8000b28:	3748      	adds	r7, #72	@ 0x48
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20a11d40 	.word	0x20a11d40
 8000b34:	0b2a8126 	.word	0x0b2a8126

08000b38 <_ZN3CAN12allocateNodeEv>:

int8_t CAN::allocateNode() {
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	// check if the node id is already allocated
	int currId = nextAvailableID;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f893 3c08 	ldrb.w	r3, [r3, #3080]	@ 0xc08
 8000b46:	60fb      	str	r3, [r7, #12]

	if (currId > CANARD_MAX_NODE_ID) {
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b4c:	dd02      	ble.n	8000b54 <_ZN3CAN12allocateNodeEv+0x1c>
		return -1; // no more node ids available
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b52:	e009      	b.n	8000b68 <_ZN3CAN12allocateNodeEv+0x30>
	}

	nextAvailableID++;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f893 3c08 	ldrb.w	r3, [r3, #3080]	@ 0xc08
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f883 2c08 	strb.w	r2, [r3, #3080]	@ 0xc08

	return currId;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	b25b      	sxtb	r3, r3
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <_Z11getFDCANDLCh>:

uint32_t getFDCANDLC(uint8_t len) {
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
    switch (len) {
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	2b08      	cmp	r3, #8
 8000b82:	d827      	bhi.n	8000bd4 <_Z11getFDCANDLCh+0x60>
 8000b84:	a201      	add	r2, pc, #4	@ (adr r2, 8000b8c <_Z11getFDCANDLCh+0x18>)
 8000b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8a:	bf00      	nop
 8000b8c:	08000bb1 	.word	0x08000bb1
 8000b90:	08000bb5 	.word	0x08000bb5
 8000b94:	08000bb9 	.word	0x08000bb9
 8000b98:	08000bbd 	.word	0x08000bbd
 8000b9c:	08000bc1 	.word	0x08000bc1
 8000ba0:	08000bc5 	.word	0x08000bc5
 8000ba4:	08000bc9 	.word	0x08000bc9
 8000ba8:	08000bcd 	.word	0x08000bcd
 8000bac:	08000bd1 	.word	0x08000bd1
        case 0: return FDCAN_DLC_BYTES_0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	e010      	b.n	8000bd6 <_Z11getFDCANDLCh+0x62>
        case 1: return FDCAN_DLC_BYTES_1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e00e      	b.n	8000bd6 <_Z11getFDCANDLCh+0x62>
        case 2: return FDCAN_DLC_BYTES_2;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	e00c      	b.n	8000bd6 <_Z11getFDCANDLCh+0x62>
        case 3: return FDCAN_DLC_BYTES_3;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	e00a      	b.n	8000bd6 <_Z11getFDCANDLCh+0x62>
        case 4: return FDCAN_DLC_BYTES_4;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	e008      	b.n	8000bd6 <_Z11getFDCANDLCh+0x62>
        case 5: return FDCAN_DLC_BYTES_5;
 8000bc4:	2305      	movs	r3, #5
 8000bc6:	e006      	b.n	8000bd6 <_Z11getFDCANDLCh+0x62>
        case 6: return FDCAN_DLC_BYTES_6;
 8000bc8:	2306      	movs	r3, #6
 8000bca:	e004      	b.n	8000bd6 <_Z11getFDCANDLCh+0x62>
        case 7: return FDCAN_DLC_BYTES_7;
 8000bcc:	2307      	movs	r3, #7
 8000bce:	e002      	b.n	8000bd6 <_Z11getFDCANDLCh+0x62>
        case 8: return FDCAN_DLC_BYTES_8;
 8000bd0:	2308      	movs	r3, #8
 8000bd2:	e000      	b.n	8000bd6 <_Z11getFDCANDLCh+0x62>
        default: return FDCAN_DLC_BYTES_8; // fallback (or assert)
 8000bd4:	2308      	movs	r3, #8
    }
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <_ZN3CAN9sendCANTxEv>:
/*
Function to convert all canard CAN frames and send them through HAL

Consider removing for loop
*/
void CAN::sendCANTx() {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b090      	sub	sp, #64	@ 0x40
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	CanardCANFrame* frame = canardPeekTxQueue(&canard);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f503 6341 	add.w	r3, r3, #3088	@ 0xc10
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 fa74 	bl	80010e0 <canardPeekTxQueue>
 8000bf8:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (frame == nullptr) return;
 8000bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d048      	beq.n	8000c92 <_ZN3CAN9sendCANTxEv+0xae>

	if (HAL_FDCAN_GetTxFifoFreeLevel(hfdcan) > 0) {
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	@ 0xc0c
 8000c06:	4618      	mov	r0, r3
 8000c08:	f003 f888 	bl	8003d1c <HAL_FDCAN_GetTxFifoFreeLevel>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	bf14      	ite	ne
 8000c12:	2301      	movne	r3, #1
 8000c14:	2300      	moveq	r3, #0
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d03b      	beq.n	8000c94 <_ZN3CAN9sendCANTxEv+0xb0>
		FDCAN_TxHeaderTypeDef txHeader;

		txHeader.Identifier = frame->id;
 8000c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	60fb      	str	r3, [r7, #12]
		txHeader.IdType = FDCAN_EXTENDED_ID;
 8000c22:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c26:	613b      	str	r3, [r7, #16]
		txHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
		txHeader.DataLength = getFDCANDLC(frame->data_len);
 8000c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c2e:	7b1b      	ldrb	r3, [r3, #12]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff9f 	bl	8000b74 <_Z11getFDCANDLCh>
 8000c36:	4603      	mov	r3, r0
 8000c38:	61bb      	str	r3, [r7, #24]
		txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
		txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]
		txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	@ 0x24

		uint8_t txData[8];
		memcpy(txData, frame->data, frame->data_len);
 8000c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c48:	1d19      	adds	r1, r3, #4
 8000c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c4c:	7b1b      	ldrb	r3, [r3, #12]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c54:	4618      	mov	r0, r3
 8000c56:	f005 fae3 	bl	8006220 <memcpy>

		bool success = HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &txHeader, txData) == HAL_OK;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	@ 0xc0c
 8000c60:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000c64:	f107 010c 	add.w	r1, r7, #12
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f002 ff0b 	bl	8003a84 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	bf0c      	ite	eq
 8000c74:	2301      	moveq	r3, #1
 8000c76:	2300      	movne	r3, #0
 8000c78:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

		if (success) {
 8000c7c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d007      	beq.n	8000c94 <_ZN3CAN9sendCANTxEv+0xb0>
			canardPopTxQueue(&canard);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f503 6341 	add.w	r3, r3, #3088	@ 0xc10
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 fa3b 	bl	8001106 <canardPopTxQueue>
 8000c90:	e000      	b.n	8000c94 <_ZN3CAN9sendCANTxEv+0xb0>
	if (frame == nullptr) return;
 8000c92:	bf00      	nop
		}
	}

}
 8000c94:	3740      	adds	r7, #64	@ 0x40
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <_ZN3CAN12routineTasksEv>:

bool CAN::routineTasks() {
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b084      	sub	sp, #16
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
	sendCANTx();
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff ff9e 	bl	8000be4 <_ZN3CAN9sendCANTxEv>

	uint32_t tick = HAL_GetTick();
 8000ca8:	f002 fb90 	bl	80033cc <HAL_GetTick>
 8000cac:	60f8      	str	r0, [r7, #12]

	if (tick > last1HzTick + UAVCAN_PROTOCOL_NODESTATUS_MAX_BROADCASTING_PERIOD_MS/2) {
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f8d3 3c48 	ldr.w	r3, [r3, #3144]	@ 0xc48
 8000cb4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d906      	bls.n	8000ccc <_ZN3CAN12routineTasksEv+0x32>
		last1HzTick = tick;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	f8c3 2c48 	str.w	r2, [r3, #3144]	@ 0xc48
		process1HzTasks();
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f000 f878 	bl	8000dbc <_ZN3CAN15process1HzTasksEv>
	}

	return true;
 8000ccc:	2301      	movs	r3, #1
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <_ZN3CAN14sendNodeStatusEv>:

void CAN::sendNodeStatus() {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b0ea      	sub	sp, #424	@ 0x1a8
 8000cdc:	af06      	add	r7, sp, #24
 8000cde:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000ce2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8000ce6:	6018      	str	r0, [r3, #0]
	uint8_t buffer[UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE];

    nodeStatus.uptime_sec = HAL_GetTick()/1000LL;
 8000ce8:	f002 fb70 	bl	80033cc <HAL_GetTick>
 8000cec:	4603      	mov	r3, r0
 8000cee:	4a32      	ldr	r2, [pc, #200]	@ (8000db8 <_ZN3CAN14sendNodeStatusEv+0xe0>)
 8000cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf4:	099a      	lsrs	r2, r3, #6
 8000cf6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000cfa:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f8c3 2c3c 	str.w	r2, [r3, #3132]	@ 0xc3c
    nodeStatus.health = UAVCAN_PROTOCOL_NODESTATUS_HEALTH_OK;
 8000d04:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000d08:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2c40 	strb.w	r2, [r3, #3136]	@ 0xc40
    nodeStatus.mode = UAVCAN_PROTOCOL_NODESTATUS_MODE_OPERATIONAL;
 8000d14:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000d18:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2c41 	strb.w	r2, [r3, #3137]	@ 0xc41
    nodeStatus.sub_mode = 0;
 8000d24:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000d28:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f883 2c42 	strb.w	r2, [r3, #3138]	@ 0xc42
    // put whatever you like in here for display in GUI
    nodeStatus.vendor_specific_status_code = 1234;
 8000d34:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000d38:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f240 42d2 	movw	r2, #1234	@ 0x4d2
 8000d42:	f8a3 2c44 	strh.w	r2, [r3, #3140]	@ 0xc44

    uint32_t len = uavcan_protocol_NodeStatus_encode(&nodeStatus, buffer);
 8000d46:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000d4a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f603 433c 	addw	r3, r3, #3132	@ 0xc3c
 8000d54:	f107 0210 	add.w	r2, r7, #16
 8000d58:	4611      	mov	r1, r2
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fb11 	bl	8000382 <uavcan_protocol_NodeStatus_encode>
 8000d60:	f8c7 018c 	str.w	r0, [r7, #396]	@ 0x18c

    // we need a static variable for the transfer ID. This is
    // incremeneted on each transfer, allowing for detection of packet
    // loss

    uint8_t transfer_id = 0;
 8000d64:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000d68:	f2a3 1381 	subw	r3, r3, #385	@ 0x181
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
    broadcast(CanardTransferTypeBroadcast,
 8000d70:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 8000d7a:	f5a2 70c6 	sub.w	r0, r2, #396	@ 0x18c
 8000d7e:	9304      	str	r3, [sp, #16]
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	9303      	str	r3, [sp, #12]
 8000d86:	2318      	movs	r3, #24
 8000d88:	9302      	str	r3, [sp, #8]
 8000d8a:	f107 030f 	add.w	r3, r7, #15
 8000d8e:	9301      	str	r3, [sp, #4]
 8000d90:	f240 1355 	movw	r3, #341	@ 0x155
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	a306      	add	r3, pc, #24	@ (adr r3, 8000db0 <_ZN3CAN14sendNodeStatusEv+0xd8>)
 8000d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	6800      	ldr	r0, [r0, #0]
 8000da0:	f000 f85b 	bl	8000e5a <_ZN3CAN9broadcastE18CanardTransferTypeytPhhPKht>
			CANARD_TRANSFER_PRIORITY_LOW,
			buffer,
			len
	);

}
 8000da4:	bf00      	nop
 8000da6:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	c1a7c6f1 	.word	0xc1a7c6f1
 8000db4:	0f0868d0 	.word	0x0f0868d0
 8000db8:	10624dd3 	.word	0x10624dd3

08000dbc <_ZN3CAN15process1HzTasksEv>:

void CAN::process1HzTasks() {
 8000dbc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000dc0:	b084      	sub	sp, #16
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]

	uint32_t timestamp_msec = HAL_GetTick();
 8000dc6:	f002 fb01 	bl	80033cc <HAL_GetTick>
 8000dca:	60b8      	str	r0, [r7, #8]

	// Check if nodes invalid
	for (int i = CANARD_MIN_NODE_ID; i <= CANARD_MAX_NODE_ID; i++) {
 8000dcc:	2301      	movs	r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	e024      	b.n	8000e1c <_ZN3CAN15process1HzTasksEv+0x60>
		// Make copy of status in case it changes

		if (timestamp_msec-canNodes[i].lastSeenTick > UAVCAN_PROTOCOL_NODESTATUS_OFFLINE_TIMEOUT_MS) {
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	4698      	mov	r8, r3
 8000dd8:	4691      	mov	r9, r2
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	4613      	mov	r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	4413      	add	r3, r2
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	440b      	add	r3, r1
 8000de8:	3308      	adds	r3, #8
 8000dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dee:	ebb8 0402 	subs.w	r4, r8, r2
 8000df2:	eb69 0503 	sbc.w	r5, r9, r3
 8000df6:	f640 33b9 	movw	r3, #3001	@ 0xbb9
 8000dfa:	429c      	cmp	r4, r3
 8000dfc:	f175 0300 	sbcs.w	r3, r5, #0
 8000e00:	d309      	bcc.n	8000e16 <_ZN3CAN15process1HzTasksEv+0x5a>
			canNodes[i].status.mode = UAVCAN_PROTOCOL_NODESTATUS_MODE_OFFLINE;
 8000e02:	6879      	ldr	r1, [r7, #4]
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	4613      	mov	r3, r2
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	4413      	add	r3, r2
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	440b      	add	r3, r1
 8000e10:	3315      	adds	r3, #21
 8000e12:	2207      	movs	r2, #7
 8000e14:	701a      	strb	r2, [r3, #0]
	for (int i = CANARD_MIN_NODE_ID; i <= CANARD_MAX_NODE_ID; i++) {
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e20:	ddd7      	ble.n	8000dd2 <_ZN3CAN15process1HzTasksEv+0x16>
		}
	}

	// Transmit NodeStatus
	sendNodeStatus();
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ff58 	bl	8000cd8 <_ZN3CAN14sendNodeStatusEv>
}
 8000e28:	bf00      	nop
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000e32 <_ZN3CAN12broadcastObjEP16CanardTxTransfer>:


/*
Wrapper function with mutex
*/
int16_t CAN::broadcastObj(CanardTxTransfer* transfer) {
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b084      	sub	sp, #16
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	6039      	str	r1, [r7, #0]

//	if (status != osOK){
//		return -1; // handle failure
//	}

	int16_t res = canardBroadcastObj(&canard, transfer);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f503 6341 	add.w	r3, r3, #3088	@ 0xc10
 8000e42:	6839      	ldr	r1, [r7, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 f86f 	bl	8000f28 <canardBroadcastObj>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	81fb      	strh	r3, [r7, #14]
//	osMutexRelease(canBroadcastMutex);

	return res;
 8000e4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <_ZN3CAN9broadcastE18CanardTransferTypeytPhhPKht>:
	#endif
	#if CANARD_ENABLE_TAO_OPTION
		, bool tao; ///< True if tail array optimization is enabled
	#endif
)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b08e      	sub	sp, #56	@ 0x38
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	60f8      	str	r0, [r7, #12]
 8000e62:	e9c7 2300 	strd	r2, r3, [r7]
 8000e66:	460b      	mov	r3, r1
 8000e68:	72fb      	strb	r3, [r7, #11]
			iface_mask = iface_mask, ///< Bitmask of interfaces to send the transfer on
		#endif
		#if CANARD_ENABLE_TAO_OPTION
			tao = tao, ///< True if tail array optimization is enabled
		#endif
	};
 8000e6a:	7afb      	ldrb	r3, [r7, #11]
 8000e6c:	743b      	strb	r3, [r7, #16]
 8000e6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e72:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000e76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000e7a:	843b      	strh	r3, [r7, #32]
 8000e7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e80:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000e84:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000e88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e8c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8000e90:	863b      	strh	r3, [r7, #48]	@ 0x30

	return broadcastObj(&transfer_object);
 8000e92:	f107 0310 	add.w	r3, r7, #16
 8000e96:	4619      	mov	r1, r3
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	f7ff ffca 	bl	8000e32 <_ZN3CAN12broadcastObjEP16CanardTxTransfer>
 8000e9e:	4603      	mov	r3, r0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3738      	adds	r7, #56	@ 0x38
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <canardInit>:
                 void* mem_arena,
                 size_t mem_arena_size,
                 CanardOnTransferReception on_reception,
                 CanardShouldAcceptTransfer should_accept,
                 void* user_reference)
 {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	603b      	str	r3, [r7, #0]
      * If your application fails here, make sure it's not built in 64-bit mode.
      * Refer to the design documentation for more info.
      */
     CANARD_ASSERT(CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE >= 5);

     memset(out_ins, 0, sizeof(*out_ins));
 8000eb6:	222c      	movs	r2, #44	@ 0x2c
 8000eb8:	2100      	movs	r1, #0
 8000eba:	68f8      	ldr	r0, [r7, #12]
 8000ebc:	f005 f982 	bl	80061c4 <memset>

     out_ins->node_id = CANARD_BROADCAST_NODE_ID;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
     out_ins->on_reception = on_reception;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	609a      	str	r2, [r3, #8]
     out_ins->should_accept = should_accept;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6a3a      	ldr	r2, [r7, #32]
 8000ed0:	605a      	str	r2, [r3, #4]
     out_ins->rx_states = NULL;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	621a      	str	r2, [r3, #32]
     out_ins->tx_queue = NULL;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2200      	movs	r2, #0
 8000edc:	625a      	str	r2, [r3, #36]	@ 0x24
     out_ins->user_reference = user_reference;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ee2:	629a      	str	r2, [r3, #40]	@ 0x28
 #if CANARD_ENABLE_TAO_OPTION
     out_ins->tao_disabled = false;
 #endif
     size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	617b      	str	r3, [r7, #20]
     if (pool_capacity > 0xFFFFU)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ef0:	d302      	bcc.n	8000ef8 <canardInit+0x50>
     {
         pool_capacity = 0xFFFFU;
 8000ef2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ef6:	617b      	str	r3, [r7, #20]
     }

     initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	330c      	adds	r3, #12
 8000efc:	697a      	ldr	r2, [r7, #20]
 8000efe:	b292      	uxth	r2, r2
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f001 fdcb 	bl	8002a9e <initPoolAllocator>
 }
 8000f08:	bf00      	nop
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <canardGetLocalNodeID>:
         CANARD_ASSERT(false);
     }
 }

 uint8_t canardGetLocalNodeID(const CanardInstance* ins)
 {
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
     return ins->node_id;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 }
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <canardBroadcastObj>:

     return canardBroadcastObj(ins, &transfer_object);
 }

 int16_t canardBroadcastObj(CanardInstance* ins, CanardTxTransfer* transfer_object)
 {
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
     if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d106      	bne.n	8000f48 <canardBroadcastObj+0x20>
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	8c1b      	ldrh	r3, [r3, #32]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d002      	beq.n	8000f48 <canardBroadcastObj+0x20>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 8000f42:	f06f 0301 	mvn.w	r3, #1
 8000f46:	e070      	b.n	800102a <canardBroadcastObj+0x102>
     }
     if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	7e1b      	ldrb	r3, [r3, #24]
 8000f4c:	2b1f      	cmp	r3, #31
 8000f4e:	d902      	bls.n	8000f56 <canardBroadcastObj+0x2e>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 8000f50:	f06f 0301 	mvn.w	r3, #1
 8000f54:	e069      	b.n	800102a <canardBroadcastObj+0x102>
     }

     uint32_t can_id = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
     uint16_t crc = 0xFFFFU;
 8000f5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f5e:	827b      	strh	r3, [r7, #18]

     if (canardGetLocalNodeID(ins) == 0)
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ffd5 	bl	8000f10 <canardGetLocalNodeID>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d138      	bne.n	8000fde <canardBroadcastObj+0xb6>
     {
         if (transfer_object->payload_len > 7)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	8c1b      	ldrh	r3, [r3, #32]
 8000f70:	2b07      	cmp	r3, #7
 8000f72:	d902      	bls.n	8000f7a <canardBroadcastObj+0x52>
         {
             return -CANARD_ERROR_NODE_ID_NOT_SET;
 8000f74:	f06f 0303 	mvn.w	r3, #3
 8000f78:	e057      	b.n	800102a <canardBroadcastObj+0x102>
         }

         static const uint16_t DTIDMask = (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;

         if ((transfer_object->data_type_id & DTIDMask) != transfer_object->data_type_id)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	8a1a      	ldrh	r2, [r3, #16]
 8000f7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001034 <canardBroadcastObj+0x10c>)
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	4013      	ands	r3, r2
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	8a1b      	ldrh	r3, [r3, #16]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d002      	beq.n	8000f94 <canardBroadcastObj+0x6c>
         {
             return -CANARD_ERROR_INVALID_ARGUMENT;
 8000f8e:	f06f 0301 	mvn.w	r3, #1
 8000f92:	e04a      	b.n	800102a <canardBroadcastObj+0x102>
         }

         // anonymous transfer, random discriminator
         const uint16_t discriminator = (uint16_t)((crcAdd(0xFFFFU, transfer_object->payload, transfer_object->payload_len)) & 0x7FFEU);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	69d9      	ldr	r1, [r3, #28]
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	8c1b      	ldrh	r3, [r3, #32]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000fa2:	f001 fd5f 	bl	8002a64 <crcAdd>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 8000fae:	4013      	ands	r3, r2
 8000fb0:	823b      	strh	r3, [r7, #16]
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	7e1b      	ldrb	r3, [r3, #24]
 8000fb6:	061a      	lsls	r2, r3, #24
 8000fb8:	8a3b      	ldrh	r3, [r7, #16]
 8000fba:	025b      	lsls	r3, r3, #9
 8000fbc:	431a      	orrs	r2, r3
                  ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	8a19      	ldrh	r1, [r3, #16]
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001034 <canardBroadcastObj+0x10c>)
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	400b      	ands	r3, r1
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	021b      	lsls	r3, r3, #8
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000fcc:	ea42 0403 	orr.w	r4, r2, r3
                  ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff9d 	bl	8000f10 <canardGetLocalNodeID>
 8000fd6:	4603      	mov	r3, r0
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000fd8:	4323      	orrs	r3, r4
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	e012      	b.n	8001004 <canardBroadcastObj+0xdc>
     }
     else
     {
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	7e1b      	ldrb	r3, [r3, #24]
 8000fe2:	061a      	lsls	r2, r3, #24
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	8a1b      	ldrh	r3, [r3, #16]
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	ea42 0403 	orr.w	r4, r2, r3
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ff8e 	bl	8000f10 <canardGetLocalNodeID>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4323      	orrs	r3, r4
 8000ff8:	617b      	str	r3, [r7, #20]
         crc = calculateCRC(transfer_object);
 8000ffa:	6838      	ldr	r0, [r7, #0]
 8000ffc:	f000 f84c 	bl	8001098 <calculateCRC>
 8001000:	4603      	mov	r3, r0
 8001002:	827b      	strh	r3, [r7, #18]
     }

     const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 8001004:	8a7a      	ldrh	r2, [r7, #18]
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	6979      	ldr	r1, [r7, #20]
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 fef2 	bl	8001df4 <enqueueTxFrames>
 8001010:	4603      	mov	r3, r0
 8001012:	81fb      	strh	r3, [r7, #14]

     if (result > 0) {
 8001014:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001018:	2b00      	cmp	r3, #0
 800101a:	dd04      	ble.n	8001026 <canardBroadcastObj+0xfe>
         incrementTransferID(transfer_object->inout_transfer_id);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	4618      	mov	r0, r3
 8001022:	f000 fe72 	bl	8001d0a <incrementTransferID>
     }

     return result;
 8001026:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 }
 800102a:	4618      	mov	r0, r3
 800102c:	371c      	adds	r7, #28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd90      	pop	{r4, r7, pc}
 8001032:	bf00      	nop
 8001034:	08006318 	.word	0x08006318

08001038 <canardBufferFromIdx>:
   CanardBufferBlock and CanartRxState structures to have the same size
   on 32 bit and 64 bit platforms, which allows for easier testing in
   simulator environments
  */
 CANARD_INTERNAL CanardBufferBlock *canardBufferFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
 {
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
         return NULL;
     }
     return (CanardBufferBlock *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
 #else
     (void)allocator;
     return (CanardBufferBlock *)idx;
 8001042:	683b      	ldr	r3, [r7, #0]
 #endif
 }
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <canardBufferToIdx>:

 CANARD_INTERNAL canard_buffer_idx_t canardBufferToIdx(CanardPoolAllocator* allocator, const CanardBufferBlock *buf)
 {
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
         return CANARD_BUFFER_IDX_NONE;
     }
     return 1U+((canard_buffer_idx_t)((uint8_t *)buf - (uint8_t *)allocator->arena));
 #else
     (void)allocator;
     return (canard_buffer_idx_t)buf;
 800105a:	683b      	ldr	r3, [r7, #0]
 #endif
 }
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <canardRxFromIdx>:

 CANARD_INTERNAL CanardRxState *canardRxFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
 {
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
         return NULL;
     }
     return (CanardRxState *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
 #else
     (void)allocator;
     return (CanardRxState *)idx;
 8001072:	683b      	ldr	r3, [r7, #0]
 #endif
 }
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <canardRxToIdx>:

 CANARD_INTERNAL canard_buffer_idx_t canardRxToIdx(CanardPoolAllocator* allocator, const CanardRxState *rx)
 {
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
         return CANARD_BUFFER_IDX_NONE;
     }
     return 1U+((canard_buffer_idx_t)((uint8_t *)rx - (uint8_t *)allocator->arena));
 #else
     (void)allocator;
     return (canard_buffer_idx_t)rx;
 800108a:	683b      	ldr	r3, [r7, #0]
 #endif
 }
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <calculateCRC>:

 CANARD_INTERNAL uint16_t calculateCRC(const CanardTxTransfer* transfer_object)
 {
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
     uint16_t crc = 0xFFFFU;
 80010a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010a4:	81fb      	strh	r3, [r7, #14]
 #if CANARD_ENABLE_CANFD
     if ((transfer_object->payload_len > 7 && !transfer_object->canfd) ||
         (transfer_object->payload_len > 63 && transfer_object->canfd))
 #else
     if (transfer_object->payload_len > 7)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	8c1b      	ldrh	r3, [r3, #32]
 80010aa:	2b07      	cmp	r3, #7
 80010ac:	d913      	bls.n	80010d6 <calculateCRC+0x3e>
 #endif
     {
         crc = crcAddSignature(crc, transfer_object->data_type_signature);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80010b4:	89f9      	ldrh	r1, [r7, #14]
 80010b6:	4608      	mov	r0, r1
 80010b8:	f001 fca5 	bl	8002a06 <crcAddSignature>
 80010bc:	4603      	mov	r3, r0
 80010be:	81fb      	strh	r3, [r7, #14]
         crc = crcAdd(crc, transfer_object->payload, transfer_object->payload_len);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69d9      	ldr	r1, [r3, #28]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	8c1b      	ldrh	r3, [r3, #32]
 80010c8:	461a      	mov	r2, r3
 80010ca:	89fb      	ldrh	r3, [r7, #14]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 fcc9 	bl	8002a64 <crcAdd>
 80010d2:	4603      	mov	r3, r0
 80010d4:	81fb      	strh	r3, [r7, #14]
                 crc = crcAddByte(crc, empty);
             }
         }
 #endif
     }
     return crc;
 80010d6:	89fb      	ldrh	r3, [r7, #14]
 }
 80010d8:	4618      	mov	r0, r3
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <canardPeekTxQueue>:

     return result;
 }

 CanardCANFrame* canardPeekTxQueue(const CanardInstance* ins)
 {
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
     if (ins->tx_queue == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <canardPeekTxQueue+0x14>
     {
         return NULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	e002      	b.n	80010fa <canardPeekTxQueue+0x1a>
     }
     return &ins->tx_queue->frame;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f8:	3304      	adds	r3, #4
 }
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <canardPopTxQueue>:

 void canardPopTxQueue(CanardInstance* ins)
 {
 8001106:	b580      	push	{r7, lr}
 8001108:	b084      	sub	sp, #16
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
     CanardTxQueueItem* item = ins->tx_queue;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001112:	60fb      	str	r3, [r7, #12]
     ins->tx_queue = item->next;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	625a      	str	r2, [r3, #36]	@ 0x24
     freeBlock(&ins->allocator, item);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	330c      	adds	r3, #12
 8001120:	68f9      	ldr	r1, [r7, #12]
 8001122:	4618      	mov	r0, r3
 8001124:	f001 fd1b 	bl	8002b5e <freeBlock>
 }
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <canardHandleRxFrame>:

 int16_t canardHandleRxFrame(CanardInstance* ins, const CanardCANFrame* frame, uint64_t timestamp_usec)
 {
 8001130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001134:	b09f      	sub	sp, #124	@ 0x7c
 8001136:	af02      	add	r7, sp, #8
 8001138:	60f8      	str	r0, [r7, #12]
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	e9c7 2300 	strd	r2, r3, [r7]
     const CanardTransferType transfer_type = extractTransferType(frame->id);
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f001 f87f 	bl	8002248 <extractTransferType>
 800114a:	4603      	mov	r3, r0
 800114c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
     const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 8001150:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001154:	2b02      	cmp	r3, #2
 8001156:	d007      	beq.n	8001168 <canardHandleRxFrame+0x38>
                                         (uint8_t)CANARD_BROADCAST_NODE_ID :
                                         DEST_ID_FROM_ID(frame->id);
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	b2db      	uxtb	r3, r3
     const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 8001160:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001164:	b2db      	uxtb	r3, r3
 8001166:	e000      	b.n	800116a <canardHandleRxFrame+0x3a>
 8001168:	2300      	movs	r3, #0
 800116a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

     // TODO: This function should maintain statistics of transfer errors and such.

     if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	da0f      	bge.n	8001196 <canardHandleRxFrame+0x66>
         (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
     if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 800117e:	2b00      	cmp	r3, #0
 8001180:	d109      	bne.n	8001196 <canardHandleRxFrame+0x66>
         (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
         (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 800118a:	2b00      	cmp	r3, #0
 800118c:	d103      	bne.n	8001196 <canardHandleRxFrame+0x66>
         (frame->data_len < 1))
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	7b1b      	ldrb	r3, [r3, #12]
         (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 8001192:	2b00      	cmp	r3, #0
 8001194:	d102      	bne.n	800119c <canardHandleRxFrame+0x6c>
     {
         return -CANARD_ERROR_RX_INCOMPATIBLE_PACKET;
 8001196:	f06f 0309 	mvn.w	r3, #9
 800119a:	e361      	b.n	8001860 <canardHandleRxFrame+0x730>
     }

     if (transfer_type != CanardTransferTypeBroadcast &&
 800119c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d00b      	beq.n	80011bc <canardHandleRxFrame+0x8c>
         destination_node_id != canardGetLocalNodeID(ins))
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f7ff feb3 	bl	8000f10 <canardGetLocalNodeID>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
     if (transfer_type != CanardTransferTypeBroadcast &&
 80011ae:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d002      	beq.n	80011bc <canardHandleRxFrame+0x8c>
     {
         return -CANARD_ERROR_RX_WRONG_ADDRESS;
 80011b6:	f06f 030a 	mvn.w	r3, #10
 80011ba:	e351      	b.n	8001860 <canardHandleRxFrame+0x730>
     }

     const uint8_t priority = PRIORITY_FROM_ID(frame->id);
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	0e1b      	lsrs	r3, r3, #24
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	f003 031f 	and.w	r3, r3, #31
 80011c8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
     const uint8_t source_node_id = SOURCE_ID_FROM_ID(frame->id);
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80011d6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
     const uint16_t data_type_id = extractDataType(frame->id);
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 f812 	bl	8002208 <extractDataType>
 80011e4:	4603      	mov	r3, r0
 80011e6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
     const uint32_t transfer_descriptor =
             MAKE_TRANSFER_DESCRIPTOR(data_type_id, transfer_type, source_node_id, destination_node_id);
 80011ea:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 80011ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80011f2:	041b      	lsls	r3, r3, #16
 80011f4:	431a      	orrs	r2, r3
 80011f6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80011fa:	049b      	lsls	r3, r3, #18
 80011fc:	431a      	orrs	r2, r3
 80011fe:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001202:	065b      	lsls	r3, r3, #25
     const uint32_t transfer_descriptor =
 8001204:	4313      	orrs	r3, r2
 8001206:	64fb      	str	r3, [r7, #76]	@ 0x4c

     const uint8_t tail_byte = frame->data[frame->data_len - 1];
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	7b1b      	ldrb	r3, [r3, #12]
 800120c:	3b01      	subs	r3, #1
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	4413      	add	r3, r2
 8001212:	791b      	ldrb	r3, [r3, #4]
 8001214:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

     uint64_t data_type_signature = 0;
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
     CanardRxState* rx_state = NULL;
 8001224:	2300      	movs	r3, #0
 8001226:	66fb      	str	r3, [r7, #108]	@ 0x6c

     if (IS_START_OF_TRANSFER(tail_byte))
 8001228:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800122c:	09db      	lsrs	r3, r3, #7
 800122e:	b2db      	uxtb	r3, r3
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b00      	cmp	r3, #0
 8001236:	d01e      	beq.n	8001276 <canardHandleRxFrame+0x146>
     {

         if (ins->should_accept(ins, &data_type_signature, data_type_id, transfer_type, source_node_id))
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	685e      	ldr	r6, [r3, #4]
 800123c:	f897 0057 	ldrb.w	r0, [r7, #87]	@ 0x57
 8001240:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8001244:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001248:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	4603      	mov	r3, r0
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	47b0      	blx	r6
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00a      	beq.n	8001270 <canardHandleRxFrame+0x140>
         {
             rx_state = traverseRxStates(ins, transfer_descriptor);
 800125a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f001 f817 	bl	8002290 <traverseRxStates>
 8001262:	66f8      	str	r0, [r7, #108]	@ 0x6c

             if(rx_state == NULL)
 8001264:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001266:	2b00      	cmp	r3, #0
 8001268:	d110      	bne.n	800128c <canardHandleRxFrame+0x15c>
             {
                 return -CANARD_ERROR_OUT_OF_MEMORY;
 800126a:	f06f 0302 	mvn.w	r3, #2
 800126e:	e2f7      	b.n	8001860 <canardHandleRxFrame+0x730>
             }
         }
         else
         {
             return -CANARD_ERROR_RX_NOT_WANTED;
 8001270:	f06f 030b 	mvn.w	r3, #11
 8001274:	e2f4      	b.n	8001860 <canardHandleRxFrame+0x730>
         }
     }
     else
     {
         rx_state = findRxState(ins, transfer_descriptor);
 8001276:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f001 f838 	bl	80022ee <findRxState>
 800127e:	66f8      	str	r0, [r7, #108]	@ 0x6c

         if (rx_state == NULL)
 8001280:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001282:	2b00      	cmp	r3, #0
 8001284:	d102      	bne.n	800128c <canardHandleRxFrame+0x15c>
         {
             return -CANARD_ERROR_RX_MISSED_START;
 8001286:	f06f 030c 	mvn.w	r3, #12
 800128a:	e2e9      	b.n	8001860 <canardHandleRxFrame+0x730>
         }
     }

     CANARD_ASSERT(rx_state != NULL);    // All paths that lead to NULL should be terminated with return above
     // Resolving the state flags:
     const bool not_initialized = rx_state->timestamp_usec == 0;
 800128c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800128e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001292:	4313      	orrs	r3, r2
 8001294:	bf0c      	ite	eq
 8001296:	2301      	moveq	r3, #1
 8001298:	2300      	movne	r3, #0
 800129a:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
     const bool tid_timed_out = (timestamp_usec - rx_state->timestamp_usec) > TRANSFER_TIMEOUT_USEC;
 800129e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80012a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012a8:	ebb0 0802 	subs.w	r8, r0, r2
 80012ac:	eb61 0903 	sbc.w	r9, r1, r3
 80012b0:	4ba9      	ldr	r3, [pc, #676]	@ (8001558 <canardHandleRxFrame+0x428>)
 80012b2:	4598      	cmp	r8, r3
 80012b4:	f179 0300 	sbcs.w	r3, r9, #0
 80012b8:	bf2c      	ite	cs
 80012ba:	2301      	movcs	r3, #1
 80012bc:	2300      	movcc	r3, #0
 80012be:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
     const bool same_iface = frame->iface_id == rx_state->iface_id;
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	7b5a      	ldrb	r2, [r3, #13]
 80012c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012c8:	7e9b      	ldrb	r3, [r3, #26]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	bf0c      	ite	eq
 80012ce:	2301      	moveq	r3, #1
 80012d0:	2300      	movne	r3, #0
 80012d2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
     const bool first_frame = IS_START_OF_TRANSFER(tail_byte);
 80012d6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80012da:	09db      	lsrs	r3, r3, #7
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	bf14      	ite	ne
 80012e6:	2301      	movne	r3, #1
 80012e8:	2300      	moveq	r3, #0
 80012ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
     const bool not_previous_tid =
         computeTransferIDForwardDistance((uint8_t) rx_state->transfer_id, TRANSFER_ID_FROM_TAIL_BYTE(tail_byte)) > 1;
 80012ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012f0:	7ddb      	ldrb	r3, [r3, #23]
 80012f2:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	461a      	mov	r2, r3
 80012fa:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80012fe:	f003 031f 	and.w	r3, r3, #31
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4619      	mov	r1, r3
 8001306:	4610      	mov	r0, r2
 8001308:	f000 fce0 	bl	8001ccc <computeTransferIDForwardDistance>
 800130c:	4603      	mov	r3, r0
     const bool not_previous_tid =
 800130e:	2b01      	cmp	r3, #1
 8001310:	bfcc      	ite	gt
 8001312:	2301      	movgt	r3, #1
 8001314:	2300      	movle	r3, #0
 8001316:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
     const bool iface_switch_allowed = (timestamp_usec - rx_state->timestamp_usec) > IFACE_SWITCH_DELAY_USEC;
 800131a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800131c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001320:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001324:	1a84      	subs	r4, r0, r2
 8001326:	eb61 0503 	sbc.w	r5, r1, r3
 800132a:	4b8c      	ldr	r3, [pc, #560]	@ (800155c <canardHandleRxFrame+0x42c>)
 800132c:	429c      	cmp	r4, r3
 800132e:	f175 0300 	sbcs.w	r3, r5, #0
 8001332:	bf2c      	ite	cs
 8001334:	2301      	movcs	r3, #1
 8001336:	2300      	movcc	r3, #0
 8001338:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
     const bool non_wrapped_tid = computeTransferIDForwardDistance(TRANSFER_ID_FROM_TAIL_BYTE(tail_byte), (uint8_t) rx_state->transfer_id) < (1 << (TRANSFER_ID_BIT_LEN-1));
 800133c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001340:	f003 031f 	and.w	r3, r3, #31
 8001344:	b2da      	uxtb	r2, r3
 8001346:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001348:	7ddb      	ldrb	r3, [r3, #23]
 800134a:	f3c3 0384 	ubfx	r3, r3, #2, #5
 800134e:	b2db      	uxtb	r3, r3
 8001350:	4619      	mov	r1, r3
 8001352:	4610      	mov	r0, r2
 8001354:	f000 fcba 	bl	8001ccc <computeTransferIDForwardDistance>
 8001358:	4603      	mov	r3, r0
 800135a:	2b0f      	cmp	r3, #15
 800135c:	bfd4      	ite	le
 800135e:	2301      	movle	r3, #1
 8001360:	2300      	movgt	r3, #0
 8001362:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
     const bool incomplete_frame = rx_state->buffer_blocks != CANARD_BUFFER_IDX_NONE;
 8001366:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	bf14      	ite	ne
 800136e:	2301      	movne	r3, #1
 8001370:	2300      	moveq	r3, #0
 8001372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

     const bool need_restart =
             (not_initialized) ||
             (tid_timed_out) ||
             (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 8001376:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800137a:	2b00      	cmp	r3, #0
 800137c:	d11f      	bne.n	80013be <canardHandleRxFrame+0x28e>
             (not_initialized) ||
 800137e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001382:	2b00      	cmp	r3, #0
 8001384:	d11b      	bne.n	80013be <canardHandleRxFrame+0x28e>
             (tid_timed_out) ||
 8001386:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00b      	beq.n	80013a6 <canardHandleRxFrame+0x276>
             (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 800138e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001392:	2b00      	cmp	r3, #0
 8001394:	d007      	beq.n	80013a6 <canardHandleRxFrame+0x276>
 8001396:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10f      	bne.n	80013be <canardHandleRxFrame+0x28e>
 800139e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10b      	bne.n	80013be <canardHandleRxFrame+0x28e>
 80013a6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d009      	beq.n	80013c2 <canardHandleRxFrame+0x292>
             (iface_switch_allowed && first_frame && non_wrapped_tid);
 80013ae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d005      	beq.n	80013c2 <canardHandleRxFrame+0x292>
 80013b6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <canardHandleRxFrame+0x292>
             (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <canardHandleRxFrame+0x294>
 80013c2:	2300      	movs	r3, #0
     const bool need_restart =
 80013c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80013c8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

     if (need_restart)
 80013d4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d02f      	beq.n	800143c <canardHandleRxFrame+0x30c>
     {
         rx_state->transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte);
 80013dc:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80013e0:	f003 031f 	and.w	r3, r3, #31
 80013e4:	b2d9      	uxtb	r1, r3
 80013e6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80013e8:	7dd3      	ldrb	r3, [r2, #23]
 80013ea:	f361 0386 	bfi	r3, r1, #2, #5
 80013ee:	75d3      	strb	r3, [r2, #23]
         rx_state->next_toggle = 0;
 80013f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80013f2:	7dd3      	ldrb	r3, [r2, #23]
 80013f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80013f8:	75d3      	strb	r3, [r2, #23]
         releaseStatePayload(ins, rx_state);
 80013fa:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f000 ffe0 	bl	80023c2 <releaseStatePayload>
         rx_state->iface_id = frame->iface_id;
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	7b5a      	ldrb	r2, [r3, #13]
 8001406:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001408:	769a      	strb	r2, [r3, #26]
         if (!IS_START_OF_TRANSFER(tail_byte))
 800140a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800140e:	09db      	lsrs	r3, r3, #7
 8001410:	b2db      	uxtb	r3, r3
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d110      	bne.n	800143c <canardHandleRxFrame+0x30c>
         {
             rx_state->transfer_id++;
 800141a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800141c:	7ddb      	ldrb	r3, [r3, #23]
 800141e:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8001422:	b2db      	uxtb	r3, r3
 8001424:	3301      	adds	r3, #1
 8001426:	f003 031f 	and.w	r3, r3, #31
 800142a:	b2d9      	uxtb	r1, r3
 800142c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800142e:	7dd3      	ldrb	r3, [r2, #23]
 8001430:	f361 0386 	bfi	r3, r1, #2, #5
 8001434:	75d3      	strb	r3, [r2, #23]
             return -CANARD_ERROR_RX_MISSED_START;
 8001436:	f06f 030c 	mvn.w	r3, #12
 800143a:	e211      	b.n	8001860 <canardHandleRxFrame+0x730>
         }
     }

     if (frame->iface_id != rx_state->iface_id)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	7b5a      	ldrb	r2, [r3, #13]
 8001440:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001442:	7e9b      	ldrb	r3, [r3, #26]
 8001444:	429a      	cmp	r2, r3
 8001446:	d001      	beq.n	800144c <canardHandleRxFrame+0x31c>
     {
         // drop frame if coming from unexpected interface
         return CANARD_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	e209      	b.n	8001860 <canardHandleRxFrame+0x730>
     }

     if (IS_START_OF_TRANSFER(tail_byte) && IS_END_OF_TRANSFER(tail_byte)) // single frame transfer
 800144c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001450:	09db      	lsrs	r3, r3, #7
 8001452:	b2db      	uxtb	r3, r3
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b00      	cmp	r3, #0
 800145a:	d041      	beq.n	80014e0 <canardHandleRxFrame+0x3b0>
 800145c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001460:	099b      	lsrs	r3, r3, #6
 8001462:	b2db      	uxtb	r3, r3
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b00      	cmp	r3, #0
 800146a:	d039      	beq.n	80014e0 <canardHandleRxFrame+0x3b0>
     {
         rx_state->timestamp_usec = timestamp_usec;
 800146c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800146e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001472:	e9c1 2302 	strd	r2, r3, [r1, #8]
         CanardRxTransfer rx_transfer = {
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	2220      	movs	r2, #32
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f004 fea0 	bl	80061c4 <memset>
 8001484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001488:	e9c7 2304 	strd	r2, r3, [r7, #16]
             .timestamp_usec = timestamp_usec,
             .payload_head = frame->data,
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	3304      	adds	r3, #4
         CanardRxTransfer rx_transfer = {
 8001490:	61bb      	str	r3, [r7, #24]
             .payload_len = (uint8_t)(frame->data_len - 1U),
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	7b1b      	ldrb	r3, [r3, #12]
 8001496:	3b01      	subs	r3, #1
 8001498:	b2db      	uxtb	r3, r3
         CanardRxTransfer rx_transfer = {
 800149a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800149c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80014a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80014a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80014a6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
             .data_type_id = data_type_id,
             .transfer_type = (uint8_t)transfer_type,
             .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 80014aa:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80014ae:	f003 031f 	and.w	r3, r3, #31
 80014b2:	b2db      	uxtb	r3, r3
         CanardRxTransfer rx_transfer = {
 80014b4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80014b8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80014bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80014c0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80014c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 #elif CANARD_ENABLE_TAO_OPTION
             .tao = !ins->tao_disabled
 #endif
         };

         ins->on_reception(ins, &rx_transfer);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f107 0210 	add.w	r2, r7, #16
 80014d0:	4611      	mov	r1, r2
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	4798      	blx	r3

         prepareForNextTransfer(rx_state);
 80014d6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80014d8:	f000 fe74 	bl	80021c4 <prepareForNextTransfer>
         return CANARD_OK;
 80014dc:	2300      	movs	r3, #0
 80014de:	e1bf      	b.n	8001860 <canardHandleRxFrame+0x730>
     }

     if (TOGGLE_BIT(tail_byte) != rx_state->next_toggle)
 80014e0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80014e4:	095b      	lsrs	r3, r3, #5
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf14      	ite	ne
 80014f0:	2301      	movne	r3, #1
 80014f2:	2300      	moveq	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	461a      	mov	r2, r3
 80014f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014fa:	7ddb      	ldrb	r3, [r3, #23]
 80014fc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001500:	b2db      	uxtb	r3, r3
 8001502:	429a      	cmp	r2, r3
 8001504:	d002      	beq.n	800150c <canardHandleRxFrame+0x3dc>
     {
         return -CANARD_ERROR_RX_WRONG_TOGGLE;
 8001506:	f06f 030d 	mvn.w	r3, #13
 800150a:	e1a9      	b.n	8001860 <canardHandleRxFrame+0x730>
     }

     if (TRANSFER_ID_FROM_TAIL_BYTE(tail_byte) != rx_state->transfer_id)
 800150c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001510:	f003 031f 	and.w	r3, r3, #31
 8001514:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001516:	7dd2      	ldrb	r2, [r2, #23]
 8001518:	f3c2 0284 	ubfx	r2, r2, #2, #5
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	4293      	cmp	r3, r2
 8001520:	d002      	beq.n	8001528 <canardHandleRxFrame+0x3f8>
     {
         return -CANARD_ERROR_RX_UNEXPECTED_TID;
 8001522:	f06f 030e 	mvn.w	r3, #14
 8001526:	e19b      	b.n	8001860 <canardHandleRxFrame+0x730>
     }

     if (IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))      // Beginning of multi frame transfer
 8001528:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800152c:	09db      	lsrs	r3, r3, #7
 800152e:	b2db      	uxtb	r3, r3
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b00      	cmp	r3, #0
 8001536:	d061      	beq.n	80015fc <canardHandleRxFrame+0x4cc>
 8001538:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800153c:	099b      	lsrs	r3, r3, #6
 800153e:	b2db      	uxtb	r3, r3
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b00      	cmp	r3, #0
 8001546:	d159      	bne.n	80015fc <canardHandleRxFrame+0x4cc>
     {
         if (frame->data_len <= 3)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	7b1b      	ldrb	r3, [r3, #12]
 800154c:	2b03      	cmp	r3, #3
 800154e:	d807      	bhi.n	8001560 <canardHandleRxFrame+0x430>
         {
             return -CANARD_ERROR_RX_SHORT_FRAME;
 8001550:	f06f 030f 	mvn.w	r3, #15
 8001554:	e184      	b.n	8001860 <canardHandleRxFrame+0x730>
 8001556:	bf00      	nop
 8001558:	001e8481 	.word	0x001e8481
 800155c:	000f4241 	.word	0x000f4241
         }

         // take off the crc and store the payload
         rx_state->timestamp_usec = timestamp_usec;
 8001560:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001562:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001566:	e9c1 2302 	strd	r2, r3, [r1, #8]
         rx_state->payload_len = 0;
 800156a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800156c:	8ad3      	ldrh	r3, [r2, #22]
 800156e:	f36f 0309 	bfc	r3, #0, #10
 8001572:	82d3      	strh	r3, [r2, #22]
         const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f103 000c 	add.w	r0, r3, #12
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	3304      	adds	r3, #4
 800157e:	1c9a      	adds	r2, r3, #2
                                                  (uint8_t) (frame->data_len - 3));
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	7b1b      	ldrb	r3, [r3, #12]
         const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 8001584:	3b03      	subs	r3, #3
 8001586:	b2db      	uxtb	r3, r3
 8001588:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800158a:	f000 ff4f 	bl	800242c <bufferBlockPushBytes>
 800158e:	4603      	mov	r3, r0
 8001590:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
         if (ret < 0)
 8001594:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8001598:	2b00      	cmp	r3, #0
 800159a:	da09      	bge.n	80015b0 <canardHandleRxFrame+0x480>
         {
             releaseStatePayload(ins, rx_state);
 800159c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f000 ff0f 	bl	80023c2 <releaseStatePayload>
             prepareForNextTransfer(rx_state);
 80015a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80015a6:	f000 fe0d 	bl	80021c4 <prepareForNextTransfer>
             return -CANARD_ERROR_OUT_OF_MEMORY;
 80015aa:	f06f 0302 	mvn.w	r3, #2
 80015ae:	e157      	b.n	8001860 <canardHandleRxFrame+0x730>
         }
         rx_state->payload_crc = (uint16_t)(((uint16_t) frame->data[0]) | (uint16_t)((uint16_t) frame->data[1] << 8U));
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	791b      	ldrb	r3, [r3, #4]
 80015b4:	461a      	mov	r2, r3
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	795b      	ldrb	r3, [r3, #5]
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	b29b      	uxth	r3, r3
 80015be:	4313      	orrs	r3, r2
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015c4:	831a      	strh	r2, [r3, #24]
         rx_state->calculated_crc = crcAddSignature(0xFFFFU, data_type_signature);
 80015c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80015ca:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80015ce:	f001 fa1a 	bl	8002a06 <crcAddSignature>
 80015d2:	4603      	mov	r3, r0
 80015d4:	461a      	mov	r2, r3
 80015d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015d8:	829a      	strh	r2, [r3, #20]
         rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 80015da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015dc:	8a98      	ldrh	r0, [r3, #20]
                                           frame->data + 2, (uint8_t)(frame->data_len - 3));
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	3304      	adds	r3, #4
         rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 80015e2:	1c99      	adds	r1, r3, #2
                                           frame->data + 2, (uint8_t)(frame->data_len - 3));
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	7b1b      	ldrb	r3, [r3, #12]
 80015e8:	3b03      	subs	r3, #3
 80015ea:	b2db      	uxtb	r3, r3
         rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 80015ec:	461a      	mov	r2, r3
 80015ee:	f001 fa39 	bl	8002a64 <crcAdd>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461a      	mov	r2, r3
 80015f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015f8:	829a      	strh	r2, [r3, #20]
     {
 80015fa:	e124      	b.n	8001846 <canardHandleRxFrame+0x716>
     }
     else if (!IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))    // Middle of a multi-frame transfer
 80015fc:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001600:	09db      	lsrs	r3, r3, #7
 8001602:	b2db      	uxtb	r3, r3
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d133      	bne.n	8001674 <canardHandleRxFrame+0x544>
 800160c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001610:	099b      	lsrs	r3, r3, #6
 8001612:	b2db      	uxtb	r3, r3
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	d12b      	bne.n	8001674 <canardHandleRxFrame+0x544>
     {
         const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f103 000c 	add.w	r0, r3, #12
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	1d1a      	adds	r2, r3, #4
                                                  (uint8_t) (frame->data_len - 1));
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	7b1b      	ldrb	r3, [r3, #12]
         const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 800162a:	3b01      	subs	r3, #1
 800162c:	b2db      	uxtb	r3, r3
 800162e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001630:	f000 fefc 	bl	800242c <bufferBlockPushBytes>
 8001634:	4603      	mov	r3, r0
 8001636:	87fb      	strh	r3, [r7, #62]	@ 0x3e
         if (ret < 0)
 8001638:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800163c:	2b00      	cmp	r3, #0
 800163e:	da09      	bge.n	8001654 <canardHandleRxFrame+0x524>
         {
             releaseStatePayload(ins, rx_state);
 8001640:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f000 febd 	bl	80023c2 <releaseStatePayload>
             prepareForNextTransfer(rx_state);
 8001648:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800164a:	f000 fdbb 	bl	80021c4 <prepareForNextTransfer>
             return -CANARD_ERROR_OUT_OF_MEMORY;
 800164e:	f06f 0302 	mvn.w	r3, #2
 8001652:	e105      	b.n	8001860 <canardHandleRxFrame+0x730>
         }
         rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8001654:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001656:	8a98      	ldrh	r0, [r3, #20]
                                           frame->data, (uint8_t)(frame->data_len - 1));
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	1d19      	adds	r1, r3, #4
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	7b1b      	ldrb	r3, [r3, #12]
 8001660:	3b01      	subs	r3, #1
 8001662:	b2db      	uxtb	r3, r3
         rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8001664:	461a      	mov	r2, r3
 8001666:	f001 f9fd 	bl	8002a64 <crcAdd>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001670:	829a      	strh	r2, [r3, #20]
     {
 8001672:	e0e8      	b.n	8001846 <canardHandleRxFrame+0x716>
     }
     else                                                                            // End of a multi-frame transfer
     {
         const uint8_t frame_payload_size = (uint8_t)(frame->data_len - 1);
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	7b1b      	ldrb	r3, [r3, #12]
 8001678:	3b01      	subs	r3, #1
 800167a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

         uint8_t tail_offset = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

         if (rx_state->payload_len < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE)
 8001684:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001686:	8adb      	ldrh	r3, [r3, #22]
 8001688:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800168c:	b29b      	uxth	r3, r3
 800168e:	2b04      	cmp	r3, #4
 8001690:	d823      	bhi.n	80016da <canardHandleRxFrame+0x5aa>
         {
             // Copy the beginning of the frame into the head, point the tail pointer to the remainder
             for (size_t i = rx_state->payload_len;
 8001692:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001694:	8adb      	ldrh	r3, [r3, #22]
 8001696:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800169a:	b29b      	uxth	r3, r3
 800169c:	667b      	str	r3, [r7, #100]	@ 0x64
 800169e:	e012      	b.n	80016c6 <canardHandleRxFrame+0x596>
                  (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
                  i++, tail_offset++)
             {
                 rx_state->buffer_head[i] = frame->data[tail_offset];
 80016a0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	4413      	add	r3, r2
 80016a8:	7919      	ldrb	r1, [r3, #4]
 80016aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80016ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016ae:	4413      	add	r3, r2
 80016b0:	331b      	adds	r3, #27
 80016b2:	460a      	mov	r2, r1
 80016b4:	701a      	strb	r2, [r3, #0]
                  i++, tail_offset++)
 80016b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016b8:	3301      	adds	r3, #1
 80016ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80016bc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80016c0:	3301      	adds	r3, #1
 80016c2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                  (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
 80016c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d848      	bhi.n	800175e <canardHandleRxFrame+0x62e>
 80016cc:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 80016d0:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d3e3      	bcc.n	80016a0 <canardHandleRxFrame+0x570>
 80016d8:	e041      	b.n	800175e <canardHandleRxFrame+0x62e>
             }
         }
         else
         {
             // Like above, except that the beginning goes into the last block of the storage
             CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f103 020c 	add.w	r2, r3, #12
 80016e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	4619      	mov	r1, r3
 80016e6:	4610      	mov	r0, r2
 80016e8:	f7ff fca6 	bl	8001038 <canardBufferFromIdx>
 80016ec:	6638      	str	r0, [r7, #96]	@ 0x60
             if (block != NULL)
 80016ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d034      	beq.n	800175e <canardHandleRxFrame+0x62e>
             {
                 size_t offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE;    // Payload offset of the first block
 80016f4:	2305      	movs	r3, #5
 80016f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
                 while (block->next != NULL)
 80016f8:	e005      	b.n	8001706 <canardHandleRxFrame+0x5d6>
                 {
                     block = block->next;
 80016fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	663b      	str	r3, [r7, #96]	@ 0x60
                     offset += CANARD_BUFFER_BLOCK_DATA_SIZE;
 8001700:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001702:	331c      	adds	r3, #28
 8001704:	65fb      	str	r3, [r7, #92]	@ 0x5c
                 while (block->next != NULL)
 8001706:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f5      	bne.n	80016fa <canardHandleRxFrame+0x5ca>
                 }
                 CANARD_ASSERT(block != NULL);

                 const size_t offset_within_block = rx_state->payload_len - offset;
 800170e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001710:	8adb      	ldrh	r3, [r3, #22]
 8001712:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001716:	b29b      	uxth	r3, r3
 8001718:	461a      	mov	r2, r3
 800171a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	63bb      	str	r3, [r7, #56]	@ 0x38
                 CANARD_ASSERT(offset_within_block <= CANARD_BUFFER_BLOCK_DATA_SIZE);

                 for (size_t i = offset_within_block;
 8001720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001722:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001724:	e012      	b.n	800174c <canardHandleRxFrame+0x61c>
                      (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
                      i++, tail_offset++)
                 {
                     block->data[i] = frame->data[tail_offset];
 8001726:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	4413      	add	r3, r2
 800172e:	7919      	ldrb	r1, [r3, #4]
 8001730:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001732:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001734:	4413      	add	r3, r2
 8001736:	3304      	adds	r3, #4
 8001738:	460a      	mov	r2, r1
 800173a:	701a      	strb	r2, [r3, #0]
                      i++, tail_offset++)
 800173c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800173e:	3301      	adds	r3, #1
 8001740:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001742:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001746:	3301      	adds	r3, #1
 8001748:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                      (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
 800174c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800174e:	2b1b      	cmp	r3, #27
 8001750:	d805      	bhi.n	800175e <canardHandleRxFrame+0x62e>
 8001752:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8001756:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800175a:	429a      	cmp	r2, r3
 800175c:	d3e3      	bcc.n	8001726 <canardHandleRxFrame+0x5f6>
                 }
             }
         }

         CanardRxTransfer rx_transfer = {
 800175e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001762:	e9c7 2304 	strd	r2, r3, [r7, #16]
             .timestamp_usec = timestamp_usec,
             .payload_head = rx_state->buffer_head,
 8001766:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001768:	331b      	adds	r3, #27
         CanardRxTransfer rx_transfer = {
 800176a:	61bb      	str	r3, [r7, #24]
             .payload_middle = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks),
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f103 020c 	add.w	r2, r3, #12
 8001772:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	4619      	mov	r1, r3
 8001778:	4610      	mov	r0, r2
 800177a:	f7ff fc5d 	bl	8001038 <canardBufferFromIdx>
 800177e:	4603      	mov	r3, r0
         CanardRxTransfer rx_transfer = {
 8001780:	61fb      	str	r3, [r7, #28]
             .payload_tail = (tail_offset >= frame_payload_size) ? NULL : (&frame->data[tail_offset]),
 8001782:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8001786:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800178a:	429a      	cmp	r2, r3
 800178c:	d205      	bcs.n	800179a <canardHandleRxFrame+0x66a>
 800178e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	4413      	add	r3, r2
 8001796:	3304      	adds	r3, #4
 8001798:	e000      	b.n	800179c <canardHandleRxFrame+0x66c>
 800179a:	2300      	movs	r3, #0
         CanardRxTransfer rx_transfer = {
 800179c:	623b      	str	r3, [r7, #32]
             .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 800179e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80017a0:	8adb      	ldrh	r3, [r3, #22]
 80017a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	461a      	mov	r2, r3
 80017aa:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	4413      	add	r3, r2
 80017b2:	b29b      	uxth	r3, r3
         CanardRxTransfer rx_transfer = {
 80017b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80017b6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80017ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80017bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80017c0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
             .data_type_id = data_type_id,
             .transfer_type = (uint8_t)transfer_type,
             .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 80017c4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80017c8:	f003 031f 	and.w	r3, r3, #31
 80017cc:	b2db      	uxtb	r3, r3
         CanardRxTransfer rx_transfer = {
 80017ce:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80017d2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80017d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80017da:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80017de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 #elif CANARD_ENABLE_TAO_OPTION
             .tao = !ins->tao_disabled
 #endif
         };

         rx_state->buffer_blocks = CANARD_BUFFER_IDX_NONE;     // Block list ownership has been transferred to rx_transfer!
 80017e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80017e4:	2200      	movs	r2, #0
 80017e6:	605a      	str	r2, [r3, #4]

         // CRC validation
         rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc, frame->data, frame->data_len - 1U);
 80017e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80017ea:	8a98      	ldrh	r0, [r3, #20]
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	1d19      	adds	r1, r3, #4
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	7b1b      	ldrb	r3, [r3, #12]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	461a      	mov	r2, r3
 80017f8:	f001 f934 	bl	8002a64 <crcAdd>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461a      	mov	r2, r3
 8001800:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001802:	829a      	strh	r2, [r3, #20]
         if (rx_state->calculated_crc == rx_state->payload_crc)
 8001804:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001806:	8a9a      	ldrh	r2, [r3, #20]
 8001808:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800180a:	8b1b      	ldrh	r3, [r3, #24]
 800180c:	429a      	cmp	r2, r3
 800180e:	d106      	bne.n	800181e <canardHandleRxFrame+0x6ee>
         {
             ins->on_reception(ins, &rx_transfer);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f107 0210 	add.w	r2, r7, #16
 8001818:	4611      	mov	r1, r2
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	4798      	blx	r3
         }

         // Making sure the payload is released even if the application didn't bother with it
         canardReleaseRxTransferPayload(ins, &rx_transfer);
 800181e:	f107 0310 	add.w	r3, r7, #16
 8001822:	4619      	mov	r1, r3
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f000 fa27 	bl	8001c78 <canardReleaseRxTransferPayload>
         prepareForNextTransfer(rx_state);
 800182a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800182c:	f000 fcca 	bl	80021c4 <prepareForNextTransfer>

         if (rx_state->calculated_crc == rx_state->payload_crc)
 8001830:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001832:	8a9a      	ldrh	r2, [r3, #20]
 8001834:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001836:	8b1b      	ldrh	r3, [r3, #24]
 8001838:	429a      	cmp	r2, r3
 800183a:	d101      	bne.n	8001840 <canardHandleRxFrame+0x710>
         {
             return CANARD_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	e00f      	b.n	8001860 <canardHandleRxFrame+0x730>
         }
         else
         {
             return -CANARD_ERROR_RX_BAD_CRC;
 8001840:	f06f 0310 	mvn.w	r3, #16
 8001844:	e00c      	b.n	8001860 <canardHandleRxFrame+0x730>
         }
     }

     rx_state->next_toggle = rx_state->next_toggle ? 0 : 1;
 8001846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001848:	7ddb      	ldrb	r3, [r3, #23]
 800184a:	b25b      	sxtb	r3, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	09db      	lsrs	r3, r3, #7
 8001852:	b2d9      	uxtb	r1, r3
 8001854:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001856:	7dd3      	ldrb	r3, [r2, #23]
 8001858:	f361 13c7 	bfi	r3, r1, #7, #1
 800185c:	75d3      	strb	r3, [r2, #23]
     return CANARD_OK;
 800185e:	2300      	movs	r3, #0
 }
 8001860:	4618      	mov	r0, r3
 8001862:	3774      	adds	r7, #116	@ 0x74
 8001864:	46bd      	mov	sp, r7
 8001866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800186a:	bf00      	nop

0800186c <canardDecodeScalar>:
 int16_t canardDecodeScalar(const CanardRxTransfer* transfer,
                            uint32_t bit_offset,
                            uint8_t bit_length,
                            bool value_is_signed,
                            void* out_value)
 {
 800186c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001870:	b08d      	sub	sp, #52	@ 0x34
 8001872:	af00      	add	r7, sp, #0
 8001874:	61f8      	str	r0, [r7, #28]
 8001876:	61b9      	str	r1, [r7, #24]
 8001878:	4611      	mov	r1, r2
 800187a:	461a      	mov	r2, r3
 800187c:	460b      	mov	r3, r1
 800187e:	75fb      	strb	r3, [r7, #23]
 8001880:	4613      	mov	r3, r2
 8001882:	75bb      	strb	r3, [r7, #22]
     if (transfer == NULL || out_value == NULL)
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <canardDecodeScalar+0x24>
 800188a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <canardDecodeScalar+0x2a>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 8001890:	f06f 0301 	mvn.w	r3, #1
 8001894:	e16e      	b.n	8001b74 <canardDecodeScalar+0x308>
     }

     if (bit_length < 1 || bit_length > 64)
 8001896:	7dfb      	ldrb	r3, [r7, #23]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d002      	beq.n	80018a2 <canardDecodeScalar+0x36>
 800189c:	7dfb      	ldrb	r3, [r7, #23]
 800189e:	2b40      	cmp	r3, #64	@ 0x40
 80018a0:	d902      	bls.n	80018a8 <canardDecodeScalar+0x3c>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 80018a2:	f06f 0301 	mvn.w	r3, #1
 80018a6:	e165      	b.n	8001b74 <canardDecodeScalar+0x308>
     }

     if (bit_length == 1 && value_is_signed)
 80018a8:	7dfb      	ldrb	r3, [r7, #23]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d105      	bne.n	80018ba <canardDecodeScalar+0x4e>
 80018ae:	7dbb      	ldrb	r3, [r7, #22]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d002      	beq.n	80018ba <canardDecodeScalar+0x4e>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 80018b4:	f06f 0301 	mvn.w	r3, #1
 80018b8:	e15c      	b.n	8001b74 <canardDecodeScalar+0x308>
         uint64_t u64;
         int64_t  s64;           ///< Also double, possibly float, possibly long double (depends on implementation)
         uint8_t bytes[8];
     } storage;

     memset(&storage, 0, sizeof(storage));   // This is important
 80018ba:	f107 0320 	add.w	r3, r7, #32
 80018be:	2208      	movs	r2, #8
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f004 fc7e 	bl	80061c4 <memset>

     const int16_t result = descatterTransferPayload(transfer, bit_offset, bit_length, &storage.bytes[0]);
 80018c8:	f107 0320 	add.w	r3, r7, #32
 80018cc:	7dfa      	ldrb	r2, [r7, #23]
 80018ce:	69b9      	ldr	r1, [r7, #24]
 80018d0:	69f8      	ldr	r0, [r7, #28]
 80018d2:	f000 ff33 	bl	800273c <descatterTransferPayload>
 80018d6:	4603      	mov	r3, r0
 80018d8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
     if (result <= 0)
 80018da:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80018de:	2b00      	cmp	r3, #0
 80018e0:	dc02      	bgt.n	80018e8 <canardDecodeScalar+0x7c>
     {
         return result;
 80018e2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80018e6:	e145      	b.n	8001b74 <canardDecodeScalar+0x308>
      * The bit copy algorithm assumes that more significant bits have lower index, so we need to shift some.
      * Extra most significant bits will be filled with zeroes, which is fine.
      * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
      * not be taken if bit_length == 64, because 64 % 8 == 0.
      */
     if ((bit_length % 8) != 0)
 80018e8:	7dfb      	ldrb	r3, [r7, #23]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d018      	beq.n	8001926 <canardDecodeScalar+0xba>
     {
         // coverity[overrun-local]
         storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] >> ((8U - (bit_length % 8U)) & 7U));
 80018f4:	7dfb      	ldrb	r3, [r7, #23]
 80018f6:	08db      	lsrs	r3, r3, #3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	3320      	adds	r3, #32
 80018fc:	f107 0210 	add.w	r2, r7, #16
 8001900:	4413      	add	r3, r2
 8001902:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001906:	461a      	mov	r2, r3
 8001908:	7dfb      	ldrb	r3, [r7, #23]
 800190a:	425b      	negs	r3, r3
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	411a      	asrs	r2, r3
 8001912:	7dfb      	ldrb	r3, [r7, #23]
 8001914:	08db      	lsrs	r3, r3, #3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	3320      	adds	r3, #32
 800191c:	f107 0110 	add.w	r1, r7, #16
 8001920:	440b      	add	r3, r1
 8001922:	f803 2c10 	strb.w	r2, [r3, #-16]
     }

     /*
      * Determining the closest standard byte length - this will be needed for byte reordering and sign bit extension.
      */
     uint8_t std_byte_length = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
     if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 800192c:	7dfb      	ldrb	r3, [r7, #23]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d103      	bne.n	800193a <canardDecodeScalar+0xce>
 8001932:	2301      	movs	r3, #1
 8001934:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001938:	e01e      	b.n	8001978 <canardDecodeScalar+0x10c>
     else if (bit_length <= 8)   { std_byte_length = 1; }
 800193a:	7dfb      	ldrb	r3, [r7, #23]
 800193c:	2b08      	cmp	r3, #8
 800193e:	d803      	bhi.n	8001948 <canardDecodeScalar+0xdc>
 8001940:	2301      	movs	r3, #1
 8001942:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001946:	e017      	b.n	8001978 <canardDecodeScalar+0x10c>
     else if (bit_length <= 16)  { std_byte_length = 2; }
 8001948:	7dfb      	ldrb	r3, [r7, #23]
 800194a:	2b10      	cmp	r3, #16
 800194c:	d803      	bhi.n	8001956 <canardDecodeScalar+0xea>
 800194e:	2302      	movs	r3, #2
 8001950:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001954:	e010      	b.n	8001978 <canardDecodeScalar+0x10c>
     else if (bit_length <= 32)  { std_byte_length = 4; }
 8001956:	7dfb      	ldrb	r3, [r7, #23]
 8001958:	2b20      	cmp	r3, #32
 800195a:	d803      	bhi.n	8001964 <canardDecodeScalar+0xf8>
 800195c:	2304      	movs	r3, #4
 800195e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001962:	e009      	b.n	8001978 <canardDecodeScalar+0x10c>
     else if (bit_length <= 64)  { std_byte_length = 8; }
 8001964:	7dfb      	ldrb	r3, [r7, #23]
 8001966:	2b40      	cmp	r3, #64	@ 0x40
 8001968:	d803      	bhi.n	8001972 <canardDecodeScalar+0x106>
 800196a:	2308      	movs	r3, #8
 800196c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001970:	e002      	b.n	8001978 <canardDecodeScalar+0x10c>
     else
     {
         CANARD_ASSERT(false);
         return -CANARD_ERROR_INTERNAL;
 8001972:	f06f 0308 	mvn.w	r3, #8
 8001976:	e0fd      	b.n	8001b74 <canardDecodeScalar+0x308>
     CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));

     /*
      * Flipping the byte order if needed.
      */
     if (isBigEndian())
 8001978:	f000 ffd5 	bl	8002926 <isBigEndian>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d007      	beq.n	8001992 <canardDecodeScalar+0x126>
     {
         swapByteOrder(&storage.bytes[0], std_byte_length);
 8001982:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001986:	f107 0320 	add.w	r3, r7, #32
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f000 ffdb 	bl	8002948 <swapByteOrder>

     /*
      * Extending the sign bit if needed. I miss templates.
      * Note that we operate on unsigned values in order to avoid undefined behaviors.
      */
     if (value_is_signed && (std_byte_length * 8 != bit_length))
 8001992:	7dbb      	ldrb	r3, [r7, #22]
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 809b 	beq.w	8001ad0 <canardDecodeScalar+0x264>
 800199a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800199e:	00da      	lsls	r2, r3, #3
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	f000 8094 	beq.w	8001ad0 <canardDecodeScalar+0x264>
     {
         if (bit_length <= 8)
 80019a8:	7dfb      	ldrb	r3, [r7, #23]
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d819      	bhi.n	80019e2 <canardDecodeScalar+0x176>
         {
             if ((storage.u8 & (1U << (bit_length - 1U))) != 0)                           // If the sign bit is set...
 80019ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019b2:	461a      	mov	r2, r3
 80019b4:	7dfb      	ldrb	r3, [r7, #23]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	fa22 f303 	lsr.w	r3, r2, r3
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 8085 	beq.w	8001ad0 <canardDecodeScalar+0x264>
             {
                 storage.u8 |= (uint8_t) 0xFFU & (uint8_t) ~((1U << bit_length) - 1U);   // ...set all bits above it.
 80019c6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80019ca:	7dfb      	ldrb	r3, [r7, #23]
 80019cc:	2101      	movs	r1, #1
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	425b      	negs	r3, r3
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	4313      	orrs	r3, r2
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	f887 3020 	strb.w	r3, [r7, #32]
 80019e0:	e076      	b.n	8001ad0 <canardDecodeScalar+0x264>
             }
         }
         else if (bit_length <= 16)
 80019e2:	7dfb      	ldrb	r3, [r7, #23]
 80019e4:	2b10      	cmp	r3, #16
 80019e6:	d815      	bhi.n	8001a14 <canardDecodeScalar+0x1a8>
         {
             if ((storage.u16 & (1U << (bit_length - 1U))) != 0)
 80019e8:	8c3b      	ldrh	r3, [r7, #32]
 80019ea:	461a      	mov	r2, r3
 80019ec:	7dfb      	ldrb	r3, [r7, #23]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	fa22 f303 	lsr.w	r3, r2, r3
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d069      	beq.n	8001ad0 <canardDecodeScalar+0x264>
             {
                 storage.u16 |= (uint16_t) 0xFFFFU & (uint16_t) ~((1U << bit_length) - 1U);
 80019fc:	8c3a      	ldrh	r2, [r7, #32]
 80019fe:	7dfb      	ldrb	r3, [r7, #23]
 8001a00:	2101      	movs	r1, #1
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	425b      	negs	r3, r3
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	843b      	strh	r3, [r7, #32]
 8001a12:	e05d      	b.n	8001ad0 <canardDecodeScalar+0x264>
             }
         }
         else if (bit_length <= 32)
 8001a14:	7dfb      	ldrb	r3, [r7, #23]
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	d811      	bhi.n	8001a3e <canardDecodeScalar+0x1d2>
         {
             if ((storage.u32 & (((uint32_t) 1) << (bit_length - 1U))) != 0)
 8001a1a:	6a3a      	ldr	r2, [r7, #32]
 8001a1c:	7dfb      	ldrb	r3, [r7, #23]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	fa22 f303 	lsr.w	r3, r2, r3
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d051      	beq.n	8001ad0 <canardDecodeScalar+0x264>
             {
                 storage.u32 |= (uint32_t) 0xFFFFFFFFUL & (uint32_t) ~((((uint32_t) 1) << bit_length) - 1U);
 8001a2c:	6a3a      	ldr	r2, [r7, #32]
 8001a2e:	7dfb      	ldrb	r3, [r7, #23]
 8001a30:	2101      	movs	r1, #1
 8001a32:	fa01 f303 	lsl.w	r3, r1, r3
 8001a36:	425b      	negs	r3, r3
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	623b      	str	r3, [r7, #32]
 8001a3c:	e048      	b.n	8001ad0 <canardDecodeScalar+0x264>
             }
         }
         else if (bit_length < 64)   // Strictly less, this is not a typo
 8001a3e:	7dfb      	ldrb	r3, [r7, #23]
 8001a40:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a42:	d842      	bhi.n	8001aca <canardDecodeScalar+0x25e>
         {
             if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 8001a44:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a48:	7df9      	ldrb	r1, [r7, #23]
 8001a4a:	1e48      	subs	r0, r1, #1
 8001a4c:	f1c0 0620 	rsb	r6, r0, #32
 8001a50:	f1a0 0120 	sub.w	r1, r0, #32
 8001a54:	fa22 f400 	lsr.w	r4, r2, r0
 8001a58:	fa03 f606 	lsl.w	r6, r3, r6
 8001a5c:	4334      	orrs	r4, r6
 8001a5e:	fa23 f101 	lsr.w	r1, r3, r1
 8001a62:	430c      	orrs	r4, r1
 8001a64:	fa23 f500 	lsr.w	r5, r3, r0
 8001a68:	f004 0301 	and.w	r3, r4, #1
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001a76:	460b      	mov	r3, r1
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	d029      	beq.n	8001ad0 <canardDecodeScalar+0x264>
             {
                 storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << bit_length) - 1U);
 8001a7c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001a80:	7df9      	ldrb	r1, [r7, #23]
 8001a82:	f04f 0201 	mov.w	r2, #1
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	f1a1 0620 	sub.w	r6, r1, #32
 8001a8e:	f1c1 0020 	rsb	r0, r1, #32
 8001a92:	fa03 f901 	lsl.w	r9, r3, r1
 8001a96:	fa02 f606 	lsl.w	r6, r2, r6
 8001a9a:	ea49 0906 	orr.w	r9, r9, r6
 8001a9e:	fa22 f000 	lsr.w	r0, r2, r0
 8001aa2:	ea49 0900 	orr.w	r9, r9, r0
 8001aa6:	fa02 f801 	lsl.w	r8, r2, r1
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f1d8 0a00 	rsbs	sl, r8, #0
 8001ab0:	eb63 0b09 	sbc.w	fp, r3, r9
 8001ab4:	ea44 030a 	orr.w	r3, r4, sl
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	ea45 030b 	orr.w	r3, r5, fp
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ac4:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001ac8:	e002      	b.n	8001ad0 <canardDecodeScalar+0x264>
             }
         }
         else
         {
             CANARD_ASSERT(false);
             return -CANARD_ERROR_INTERNAL;
 8001aca:	f06f 0308 	mvn.w	r3, #8
 8001ace:	e051      	b.n	8001b74 <canardDecodeScalar+0x308>
     }

     /*
      * Copying the result out.
      */
     if (value_is_signed)
 8001ad0:	7dbb      	ldrb	r3, [r7, #22]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d022      	beq.n	8001b1c <canardDecodeScalar+0x2b0>
     {
         if      (bit_length <= 8)   { *( (int8_t*) out_value) = storage.s8;  }
 8001ad6:	7dfb      	ldrb	r3, [r7, #23]
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d804      	bhi.n	8001ae6 <canardDecodeScalar+0x27a>
 8001adc:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8001ae0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ae2:	701a      	strb	r2, [r3, #0]
 8001ae4:	e044      	b.n	8001b70 <canardDecodeScalar+0x304>
         else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 8001ae6:	7dfb      	ldrb	r3, [r7, #23]
 8001ae8:	2b10      	cmp	r3, #16
 8001aea:	d804      	bhi.n	8001af6 <canardDecodeScalar+0x28a>
 8001aec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001af0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001af2:	801a      	strh	r2, [r3, #0]
 8001af4:	e03c      	b.n	8001b70 <canardDecodeScalar+0x304>
         else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 8001af6:	7dfb      	ldrb	r3, [r7, #23]
 8001af8:	2b20      	cmp	r3, #32
 8001afa:	d803      	bhi.n	8001b04 <canardDecodeScalar+0x298>
 8001afc:	6a3a      	ldr	r2, [r7, #32]
 8001afe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	e035      	b.n	8001b70 <canardDecodeScalar+0x304>
         else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 8001b04:	7dfb      	ldrb	r3, [r7, #23]
 8001b06:	2b40      	cmp	r3, #64	@ 0x40
 8001b08:	d805      	bhi.n	8001b16 <canardDecodeScalar+0x2aa>
 8001b0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b0e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001b10:	e9c1 2300 	strd	r2, r3, [r1]
 8001b14:	e02c      	b.n	8001b70 <canardDecodeScalar+0x304>
         else
         {
             CANARD_ASSERT(false);
             return -CANARD_ERROR_INTERNAL;
 8001b16:	f06f 0308 	mvn.w	r3, #8
 8001b1a:	e02b      	b.n	8001b74 <canardDecodeScalar+0x308>
         }
     }
     else
     {
         if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 8001b1c:	7dfb      	ldrb	r3, [r7, #23]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d104      	bne.n	8001b2c <canardDecodeScalar+0x2c0>
 8001b22:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b28:	701a      	strb	r2, [r3, #0]
 8001b2a:	e021      	b.n	8001b70 <canardDecodeScalar+0x304>
         else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 8001b2c:	7dfb      	ldrb	r3, [r7, #23]
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d804      	bhi.n	8001b3c <canardDecodeScalar+0x2d0>
 8001b32:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b38:	701a      	strb	r2, [r3, #0]
 8001b3a:	e019      	b.n	8001b70 <canardDecodeScalar+0x304>
         else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
 8001b3e:	2b10      	cmp	r3, #16
 8001b40:	d803      	bhi.n	8001b4a <canardDecodeScalar+0x2de>
 8001b42:	8c3a      	ldrh	r2, [r7, #32]
 8001b44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b46:	801a      	strh	r2, [r3, #0]
 8001b48:	e012      	b.n	8001b70 <canardDecodeScalar+0x304>
         else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
 8001b4c:	2b20      	cmp	r3, #32
 8001b4e:	d803      	bhi.n	8001b58 <canardDecodeScalar+0x2ec>
 8001b50:	6a3a      	ldr	r2, [r7, #32]
 8001b52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	e00b      	b.n	8001b70 <canardDecodeScalar+0x304>
         else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 8001b58:	7dfb      	ldrb	r3, [r7, #23]
 8001b5a:	2b40      	cmp	r3, #64	@ 0x40
 8001b5c:	d805      	bhi.n	8001b6a <canardDecodeScalar+0x2fe>
 8001b5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b62:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001b64:	e9c1 2300 	strd	r2, r3, [r1]
 8001b68:	e002      	b.n	8001b70 <canardDecodeScalar+0x304>
         else
         {
             CANARD_ASSERT(false);
             return -CANARD_ERROR_INTERNAL;
 8001b6a:	f06f 0308 	mvn.w	r3, #8
 8001b6e:	e001      	b.n	8001b74 <canardDecodeScalar+0x308>
         }
     }

     CANARD_ASSERT(result <= bit_length);
     CANARD_ASSERT(result > 0);
     return result;
 8001b70:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 }
 8001b74:	4618      	mov	r0, r3
 8001b76:	3734      	adds	r7, #52	@ 0x34
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001b7e <canardEncodeScalar>:

 void canardEncodeScalar(void* destination,
                         uint32_t bit_offset,
                         uint8_t bit_length,
                         const void* value)
 {
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b08a      	sub	sp, #40	@ 0x28
 8001b82:	af02      	add	r7, sp, #8
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	71fb      	strb	r3, [r7, #7]
      * Maybe not the best solution, but it simplifies the API.
      */
     CANARD_ASSERT(destination != NULL);
     CANARD_ASSERT(value != NULL);

     if (bit_length > 64)
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	2b40      	cmp	r3, #64	@ 0x40
 8001b92:	d901      	bls.n	8001b98 <canardEncodeScalar+0x1a>
     {
         CANARD_ASSERT(false);
         bit_length = 64;
 8001b94:	2340      	movs	r3, #64	@ 0x40
 8001b96:	71fb      	strb	r3, [r7, #7]
     }

     if (bit_length < 1)
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <canardEncodeScalar+0x24>
     {
         CANARD_ASSERT(false);
         bit_length = 1;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	71fb      	strb	r3, [r7, #7]
         uint32_t u32;
         uint64_t u64;
         uint8_t bytes[8];
     } storage;

     memset(&storage, 0, sizeof(storage));
 8001ba2:	f107 0310 	add.w	r3, r7, #16
 8001ba6:	2208      	movs	r2, #8
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f004 fb0a 	bl	80061c4 <memset>

     uint8_t std_byte_length = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	77fb      	strb	r3, [r7, #31]

     // Extra most significant bits can be safely ignored here.
     if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) value) != 0); }
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d105      	bne.n	8001bc6 <canardEncodeScalar+0x48>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	77fb      	strb	r3, [r7, #31]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	743b      	strb	r3, [r7, #16]
 8001bc4:	e024      	b.n	8001c10 <canardEncodeScalar+0x92>
     else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) value);  }
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d805      	bhi.n	8001bd8 <canardEncodeScalar+0x5a>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	77fb      	strb	r3, [r7, #31]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	743b      	strb	r3, [r7, #16]
 8001bd6:	e01b      	b.n	8001c10 <canardEncodeScalar+0x92>
     else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) value); }
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	2b10      	cmp	r3, #16
 8001bdc:	d805      	bhi.n	8001bea <canardEncodeScalar+0x6c>
 8001bde:	2302      	movs	r3, #2
 8001be0:	77fb      	strb	r3, [r7, #31]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	823b      	strh	r3, [r7, #16]
 8001be8:	e012      	b.n	8001c10 <canardEncodeScalar+0x92>
     else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) value); }
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	2b20      	cmp	r3, #32
 8001bee:	d805      	bhi.n	8001bfc <canardEncodeScalar+0x7e>
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	77fb      	strb	r3, [r7, #31]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	e009      	b.n	8001c10 <canardEncodeScalar+0x92>
     else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) value); }
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	2b40      	cmp	r3, #64	@ 0x40
 8001c00:	d806      	bhi.n	8001c10 <canardEncodeScalar+0x92>
 8001c02:	2308      	movs	r3, #8
 8001c04:	77fb      	strb	r3, [r7, #31]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
             storage.bytes[i] = (temp >> (8*i)) & 0xFFU;
         }
     }
 #endif

     if (isBigEndian())
 8001c10:	f000 fe89 	bl	8002926 <isBigEndian>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d006      	beq.n	8001c28 <canardEncodeScalar+0xaa>
     {
         swapByteOrder(&storage.bytes[0], std_byte_length);
 8001c1a:	7ffa      	ldrb	r2, [r7, #31]
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	4611      	mov	r1, r2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 fe90 	bl	8002948 <swapByteOrder>
      * Extra least significant bits will be filled with zeroes, which is fine.
      * Extra most significant bits will be discarded here.
      * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
      * not be taken if bit_length == 64, because 64 % 8 == 0.
      */
     if ((bit_length % 8) != 0)
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d014      	beq.n	8001c5e <canardEncodeScalar+0xe0>
     {
         // coverity[overrun-local]
         storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] << ((8U - (bit_length % 8U)) & 7U));
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	08db      	lsrs	r3, r3, #3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	3320      	adds	r3, #32
 8001c3c:	443b      	add	r3, r7
 8001c3e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001c42:	461a      	mov	r2, r3
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	425b      	negs	r3, r3
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	08db      	lsrs	r3, r3, #3
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	3320      	adds	r3, #32
 8001c58:	443b      	add	r3, r7
 8001c5a:	f803 2c10 	strb.w	r2, [r3, #-16]
     }

     /*
      * Now, the storage contains properly serialized scalar. Copying it out.
      */
     copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
 8001c5e:	79fa      	ldrb	r2, [r7, #7]
 8001c60:	f107 0010 	add.w	r0, r7, #16
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	f000 fcef 	bl	800264e <copyBitArray>
 }
 8001c70:	bf00      	nop
 8001c72:	3720      	adds	r7, #32
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <canardReleaseRxTransferPayload>:

 void canardReleaseRxTransferPayload(CanardInstance* ins, CanardRxTransfer* transfer)
 {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
     while (transfer->payload_middle != NULL)
 8001c82:	e00f      	b.n	8001ca4 <canardReleaseRxTransferPayload+0x2c>
     {
         CanardBufferBlock* const temp = transfer->payload_middle->next;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	60fb      	str	r3, [r7, #12]
         freeBlock(&ins->allocator, transfer->payload_middle);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f103 020c 	add.w	r2, r3, #12
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	4619      	mov	r1, r3
 8001c98:	4610      	mov	r0, r2
 8001c9a:	f000 ff60 	bl	8002b5e <freeBlock>
         transfer->payload_middle = temp;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	60da      	str	r2, [r3, #12]
     while (transfer->payload_middle != NULL)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1eb      	bne.n	8001c84 <canardReleaseRxTransferPayload+0xc>
     }

     transfer->payload_middle = NULL;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]
     transfer->payload_head = NULL;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
     transfer->payload_tail = NULL;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	611a      	str	r2, [r3, #16]
     transfer->payload_len = 0;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	829a      	strh	r2, [r3, #20]
 }
 8001cc4:	bf00      	nop
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <computeTransferIDForwardDistance>:

 /*
  * Internal (static functions)
  */
 CANARD_INTERNAL int16_t computeTransferIDForwardDistance(uint8_t a, uint8_t b)
 {
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	460a      	mov	r2, r1
 8001cd6:	71fb      	strb	r3, [r7, #7]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	71bb      	strb	r3, [r7, #6]
     int16_t d = (int16_t)(a - b);
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	79bb      	ldrb	r3, [r7, #6]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	81fb      	strh	r3, [r7, #14]
     if (d < 0)
 8001cea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	da03      	bge.n	8001cfa <computeTransferIDForwardDistance+0x2e>
     {
         d = (int16_t)(d + (int16_t)(1U << TRANSFER_ID_BIT_LEN));
 8001cf2:	89fb      	ldrh	r3, [r7, #14]
 8001cf4:	3320      	adds	r3, #32
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	81fb      	strh	r3, [r7, #14]
     }
     return d;
 8001cfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 }
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <incrementTransferID>:

 CANARD_INTERNAL void incrementTransferID(uint8_t* transfer_id)
 {
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
     CANARD_ASSERT(transfer_id != NULL);

     (*transfer_id)++;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	3301      	adds	r3, #1
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	701a      	strb	r2, [r3, #0]
     if (*transfer_id >= 32)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b1f      	cmp	r3, #31
 8001d24:	d902      	bls.n	8001d2c <incrementTransferID+0x22>
     {
         *transfer_id = 0;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
     }
 }
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <dlcToDataLength>:

 CANARD_INTERNAL uint16_t dlcToDataLength(uint16_t dlc) {
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	80fb      	strh	r3, [r7, #6]
     /*
     Data Length Code      9  10  11  12  13  14  15
     Number of data bytes 12  16  20  24  32  48  64
     */
     if (dlc <= 8) {
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d801      	bhi.n	8001d4c <dlcToDataLength+0x14>
         return dlc;
 8001d48:	88fb      	ldrh	r3, [r7, #6]
 8001d4a:	e01e      	b.n	8001d8a <dlcToDataLength+0x52>
     } else if (dlc == 9) {
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	2b09      	cmp	r3, #9
 8001d50:	d101      	bne.n	8001d56 <dlcToDataLength+0x1e>
         return 12;
 8001d52:	230c      	movs	r3, #12
 8001d54:	e019      	b.n	8001d8a <dlcToDataLength+0x52>
     } else if (dlc == 10) {
 8001d56:	88fb      	ldrh	r3, [r7, #6]
 8001d58:	2b0a      	cmp	r3, #10
 8001d5a:	d101      	bne.n	8001d60 <dlcToDataLength+0x28>
         return 16;
 8001d5c:	2310      	movs	r3, #16
 8001d5e:	e014      	b.n	8001d8a <dlcToDataLength+0x52>
     } else if (dlc == 11) {
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	2b0b      	cmp	r3, #11
 8001d64:	d101      	bne.n	8001d6a <dlcToDataLength+0x32>
         return 20;
 8001d66:	2314      	movs	r3, #20
 8001d68:	e00f      	b.n	8001d8a <dlcToDataLength+0x52>
     } else if (dlc == 12) {
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	2b0c      	cmp	r3, #12
 8001d6e:	d101      	bne.n	8001d74 <dlcToDataLength+0x3c>
         return 24;
 8001d70:	2318      	movs	r3, #24
 8001d72:	e00a      	b.n	8001d8a <dlcToDataLength+0x52>
     } else if (dlc == 13) {
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	2b0d      	cmp	r3, #13
 8001d78:	d101      	bne.n	8001d7e <dlcToDataLength+0x46>
         return 32;
 8001d7a:	2320      	movs	r3, #32
 8001d7c:	e005      	b.n	8001d8a <dlcToDataLength+0x52>
     } else if (dlc == 14) {
 8001d7e:	88fb      	ldrh	r3, [r7, #6]
 8001d80:	2b0e      	cmp	r3, #14
 8001d82:	d101      	bne.n	8001d88 <dlcToDataLength+0x50>
         return 48;
 8001d84:	2330      	movs	r3, #48	@ 0x30
 8001d86:	e000      	b.n	8001d8a <dlcToDataLength+0x52>
     }
     return 64;
 8001d88:	2340      	movs	r3, #64	@ 0x40
 }
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <dataLengthToDlc>:

 CANARD_INTERNAL uint16_t dataLengthToDlc(uint16_t data_length) {
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	80fb      	strh	r3, [r7, #6]
     if (data_length <= 8) {
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d801      	bhi.n	8001daa <dataLengthToDlc+0x14>
         return data_length;
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	e01e      	b.n	8001de8 <dataLengthToDlc+0x52>
     } else if (data_length <= 12) {
 8001daa:	88fb      	ldrh	r3, [r7, #6]
 8001dac:	2b0c      	cmp	r3, #12
 8001dae:	d801      	bhi.n	8001db4 <dataLengthToDlc+0x1e>
         return 9;
 8001db0:	2309      	movs	r3, #9
 8001db2:	e019      	b.n	8001de8 <dataLengthToDlc+0x52>
     } else if (data_length <= 16) {
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	2b10      	cmp	r3, #16
 8001db8:	d801      	bhi.n	8001dbe <dataLengthToDlc+0x28>
         return 10;
 8001dba:	230a      	movs	r3, #10
 8001dbc:	e014      	b.n	8001de8 <dataLengthToDlc+0x52>
     } else if (data_length <= 20) {
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	2b14      	cmp	r3, #20
 8001dc2:	d801      	bhi.n	8001dc8 <dataLengthToDlc+0x32>
         return 11;
 8001dc4:	230b      	movs	r3, #11
 8001dc6:	e00f      	b.n	8001de8 <dataLengthToDlc+0x52>
     } else if (data_length <= 24) {
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	2b18      	cmp	r3, #24
 8001dcc:	d801      	bhi.n	8001dd2 <dataLengthToDlc+0x3c>
         return 12;
 8001dce:	230c      	movs	r3, #12
 8001dd0:	e00a      	b.n	8001de8 <dataLengthToDlc+0x52>
     } else if (data_length <= 32) {
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	d801      	bhi.n	8001ddc <dataLengthToDlc+0x46>
         return 13;
 8001dd8:	230d      	movs	r3, #13
 8001dda:	e005      	b.n	8001de8 <dataLengthToDlc+0x52>
     } else if (data_length <= 48) {
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	2b30      	cmp	r3, #48	@ 0x30
 8001de0:	d801      	bhi.n	8001de6 <dataLengthToDlc+0x50>
         return 14;
 8001de2:	230e      	movs	r3, #14
 8001de4:	e000      	b.n	8001de8 <dataLengthToDlc+0x52>
     }
     return 15;
 8001de6:	230f      	movs	r3, #15
 }
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <enqueueTxFrames>:
 CANARD_INTERNAL int16_t enqueueTxFrames(CanardInstance* ins,
                                         uint32_t can_id,
                                         uint16_t crc,
                                         CanardTxTransfer* transfer
 )
 {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08c      	sub	sp, #48	@ 0x30
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	4613      	mov	r3, r2
 8001e02:	80fb      	strh	r3, [r7, #6]
     CANARD_ASSERT(ins != NULL);
     CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared

     if (transfer->inout_transfer_id == NULL)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d102      	bne.n	8001e12 <enqueueTxFrames+0x1e>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 8001e0c:	f06f 0301 	mvn.w	r3, #1
 8001e10:	e11c      	b.n	800204c <enqueueTxFrames+0x258>
     }

     if ((transfer->payload_len > 0) && (transfer->payload == NULL))
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	8c1b      	ldrh	r3, [r3, #32]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d006      	beq.n	8001e28 <enqueueTxFrames+0x34>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d102      	bne.n	8001e28 <enqueueTxFrames+0x34>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 8001e22:	f06f 0301 	mvn.w	r3, #1
 8001e26:	e111      	b.n	800204c <enqueueTxFrames+0x258>
     }

     int16_t result = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 #if CANARD_ENABLE_CANFD
     uint8_t frame_max_data_len = transfer->canfd ? CANARD_CANFD_FRAME_MAX_DATA_LEN:CANARD_CAN_FRAME_MAX_DATA_LEN;
 #else
     uint8_t frame_max_data_len = CANARD_CAN_FRAME_MAX_DATA_LEN;
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 #endif
     if (transfer->payload_len < frame_max_data_len)                        // Single frame transfer
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	8c1a      	ldrh	r2, [r3, #32]
 8001e36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d24b      	bcs.n	8001ed8 <enqueueTxFrames+0xe4>
     {
         CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	330c      	adds	r3, #12
 8001e44:	4618      	mov	r0, r3
 8001e46:	f000 f94a 	bl	80020de <createTxItem>
 8001e4a:	6178      	str	r0, [r7, #20]
         if (queue_item == NULL)
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d102      	bne.n	8001e58 <enqueueTxFrames+0x64>
         {
             return -CANARD_ERROR_OUT_OF_MEMORY;
 8001e52:	f06f 0302 	mvn.w	r3, #2
 8001e56:	e0f9      	b.n	800204c <enqueueTxFrames+0x258>
         }

         memcpy(queue_item->frame.data, transfer->payload, transfer->payload_len);
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f103 0008 	add.w	r0, r3, #8
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	69d9      	ldr	r1, [r3, #28]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	8c1b      	ldrh	r3, [r3, #32]
 8001e66:	461a      	mov	r2, r3
 8001e68:	f004 f9da 	bl	8006220 <memcpy>

         transfer->payload_len = dlcToDataLength(dataLengthToDlc(transfer->payload_len+1))-1;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	8c1b      	ldrh	r3, [r3, #32]
 8001e70:	3301      	adds	r3, #1
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff8e 	bl	8001d96 <dataLengthToDlc>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff5b 	bl	8001d38 <dlcToDataLength>
 8001e82:	4603      	mov	r3, r0
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	841a      	strh	r2, [r3, #32]
         queue_item->frame.data_len = (uint8_t)(transfer->payload_len + 1);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	8c1b      	ldrh	r3, [r3, #32]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	3301      	adds	r3, #1
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	741a      	strb	r2, [r3, #16]
         queue_item->frame.data[transfer->payload_len] = (uint8_t)(0xC0U | (*transfer->inout_transfer_id & 31U));
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	f003 031f 	and.w	r3, r3, #31
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	8c12      	ldrh	r2, [r2, #32]
 8001eaa:	4611      	mov	r1, r2
 8001eac:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	440b      	add	r3, r1
 8001eb6:	721a      	strb	r2, [r3, #8]
         queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	605a      	str	r2, [r3, #4]
         queue_item->frame.iface_mask = transfer->iface_mask;
 #endif
 #if CANARD_ENABLE_CANFD
         queue_item->frame.canfd = transfer->canfd;
 #endif
         pushTxQueue(ins, queue_item);
 8001ec2:	6979      	ldr	r1, [r7, #20]
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 f8c5 	bl	8002054 <pushTxQueue>
         result++;
 8001eca:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001ed6:	e0b7      	b.n	8002048 <enqueueTxFrames+0x254>
     }
     else                                                                    // Multi frame transfer
     {
         uint16_t data_index = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	85bb      	strh	r3, [r7, #44]	@ 0x2c
         uint8_t toggle = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
         uint8_t sot_eot = 0x80;
 8001ee2:	2380      	movs	r3, #128	@ 0x80
 8001ee4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
           see if we are going to be able to allocate enough blocks for
           this transfer. If not then stop now, otherwise we will end
           up doing a partial (corrupt) transfer which will just make
           the situation worse as it will waste bus bandwidth
          */
         const uint16_t total_bytes = transfer->payload_len + 2; // including CRC
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	8c1b      	ldrh	r3, [r3, #32]
 8001eec:	3302      	adds	r3, #2
 8001eee:	84bb      	strh	r3, [r7, #36]	@ 0x24
         const uint8_t bytes_per_frame = frame_max_data_len-1; // sot/eot byte consumes one byte
 8001ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
         const uint16_t frames_needed = (total_bytes + (bytes_per_frame-1)) / bytes_per_frame;
 8001efa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001efc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f00:	3b01      	subs	r3, #1
 8001f02:	441a      	add	r2, r3
 8001f04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f08:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f0c:	843b      	strh	r3, [r7, #32]
         const uint16_t blocks_available = ins->allocator.statistics.capacity_blocks - ins->allocator.statistics.current_usage_blocks;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8a9a      	ldrh	r2, [r3, #20]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8adb      	ldrh	r3, [r3, #22]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	83fb      	strh	r3, [r7, #30]
         if (blocks_available < frames_needed) {
 8001f1a:	8bfa      	ldrh	r2, [r7, #30]
 8001f1c:	8c3b      	ldrh	r3, [r7, #32]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d202      	bcs.n	8001f28 <enqueueTxFrames+0x134>
             return -CANARD_ERROR_OUT_OF_MEMORY;
 8001f22:	f06f 0302 	mvn.w	r3, #2
 8001f26:	e091      	b.n	800204c <enqueueTxFrames+0x258>
         }

         CanardTxQueueItem* queue_item = NULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61bb      	str	r3, [r7, #24]

         while (transfer->payload_len - data_index != 0)
 8001f2c:	e086      	b.n	800203c <enqueueTxFrames+0x248>
         {
             queue_item = createTxItem(&ins->allocator);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	330c      	adds	r3, #12
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 f8d3 	bl	80020de <createTxItem>
 8001f38:	61b8      	str	r0, [r7, #24]
             if (queue_item == NULL)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <enqueueTxFrames+0x152>
             {
                 CANARD_ASSERT(false);
                 return -CANARD_ERROR_OUT_OF_MEMORY;
 8001f40:	f06f 0302 	mvn.w	r3, #2
 8001f44:	e082      	b.n	800204c <enqueueTxFrames+0x258>
             }

             uint16_t i = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	853b      	strh	r3, [r7, #40]	@ 0x28
             if (data_index == 0)
 8001f4a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10c      	bne.n	8001f6a <enqueueTxFrames+0x176>
             {
                 // add crc
                 queue_item->frame.data[0] = (uint8_t) (crc);
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	721a      	strb	r2, [r3, #8]
                 queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	0a1b      	lsrs	r3, r3, #8
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	725a      	strb	r2, [r3, #9]
                 i = 2;
 8001f64:	2302      	movs	r3, #2
 8001f66:	853b      	strh	r3, [r7, #40]	@ 0x28
 8001f68:	e012      	b.n	8001f90 <enqueueTxFrames+0x19c>
             }
             else
             {
                 i = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	853b      	strh	r3, [r7, #40]	@ 0x28
             }

             for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 8001f6e:	e00f      	b.n	8001f90 <enqueueTxFrames+0x19c>
             {
                 queue_item->frame.data[i] = transfer->payload[data_index];
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	69da      	ldr	r2, [r3, #28]
 8001f74:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001f76:	441a      	add	r2, r3
 8001f78:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001f7a:	7811      	ldrb	r1, [r2, #0]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4413      	add	r3, r2
 8001f80:	460a      	mov	r2, r1
 8001f82:	721a      	strb	r2, [r3, #8]
             for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 8001f84:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001f86:	3301      	adds	r3, #1
 8001f88:	853b      	strh	r3, [r7, #40]	@ 0x28
 8001f8a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001f90:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001f92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f96:	3b01      	subs	r3, #1
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	da04      	bge.n	8001fa6 <enqueueTxFrames+0x1b2>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	8c1b      	ldrh	r3, [r3, #32]
 8001fa0:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d3e4      	bcc.n	8001f70 <enqueueTxFrames+0x17c>
             }
             // tail byte
             sot_eot = (data_index == transfer->payload_len) ? (uint8_t)0x40 : sot_eot;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	8c1b      	ldrh	r3, [r3, #32]
 8001faa:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d002      	beq.n	8001fb6 <enqueueTxFrames+0x1c2>
 8001fb0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001fb4:	e000      	b.n	8001fb8 <enqueueTxFrames+0x1c4>
 8001fb6:	2340      	movs	r3, #64	@ 0x40
 8001fb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

             i = dlcToDataLength(dataLengthToDlc(i+1))-1;
 8001fbc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fee7 	bl	8001d96 <dataLengthToDlc>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff feb4 	bl	8001d38 <dlcToDataLength>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	853b      	strh	r3, [r7, #40]	@ 0x28
             queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*transfer->inout_transfer_id & 31U));
 8001fd6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001fda:	015b      	lsls	r3, r3, #5
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	b2d9      	uxtb	r1, r3
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	b2d1      	uxtb	r1, r2
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	460a      	mov	r2, r1
 8001ffe:	721a      	strb	r2, [r3, #8]
             queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	605a      	str	r2, [r3, #4]
             queue_item->frame.data_len = (uint8_t)(i + 1);
 800200a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800200c:	b2db      	uxtb	r3, r3
 800200e:	3301      	adds	r3, #1
 8002010:	b2da      	uxtb	r2, r3
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	741a      	strb	r2, [r3, #16]
             queue_item->frame.iface_mask = transfer->iface_mask;
 #endif
 #if CANARD_ENABLE_CANFD
             queue_item->frame.canfd = transfer->canfd;
 #endif
             pushTxQueue(ins, queue_item);
 8002016:	69b9      	ldr	r1, [r7, #24]
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 f81b 	bl	8002054 <pushTxQueue>

             result++;
 800201e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8002022:	b29b      	uxth	r3, r3
 8002024:	3301      	adds	r3, #1
 8002026:	b29b      	uxth	r3, r3
 8002028:	85fb      	strh	r3, [r7, #46]	@ 0x2e
             toggle ^= 1;
 800202a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800202e:	f083 0301 	eor.w	r3, r3, #1
 8002032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
             sot_eot = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
         while (transfer->payload_len - data_index != 0)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	8c1b      	ldrh	r3, [r3, #32]
 8002040:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002042:	429a      	cmp	r2, r3
 8002044:	f47f af73 	bne.w	8001f2e <enqueueTxFrames+0x13a>
         }
     }

     return result;
 8002048:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 }
 800204c:	4618      	mov	r0, r3
 800204e:	3730      	adds	r7, #48	@ 0x30
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <pushTxQueue>:

 /**
  * Puts frame on on the TX queue. Higher priority placed first
  */
 CANARD_INTERNAL void pushTxQueue(CanardInstance* ins, CanardTxQueueItem* item)
 {
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
     CANARD_ASSERT(ins != NULL);
     CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames

     if (ins->tx_queue == NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002062:	2b00      	cmp	r3, #0
 8002064:	d103      	bne.n	800206e <pushTxQueue+0x1a>
     {
         ins->tx_queue = item;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	625a      	str	r2, [r3, #36]	@ 0x24
         return;
 800206c:	e034      	b.n	80020d8 <pushTxQueue+0x84>
     }

     CanardTxQueueItem* queue = ins->tx_queue;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002072:	60fb      	str	r3, [r7, #12]
     CanardTxQueueItem* previous = ins->tx_queue;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002078:	60bb      	str	r3, [r7, #8]

     while (queue != NULL)
 800207a:	e02a      	b.n	80020d2 <pushTxQueue+0x7e>
     {
         if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4619      	mov	r1, r3
 8002086:	4610      	mov	r0, r2
 8002088:	f000 f840 	bl	800210c <isPriorityHigher>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d012      	beq.n	80020b8 <pushTxQueue+0x64>
         {
             if (queue == ins->tx_queue)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	429a      	cmp	r2, r3
 800209a:	d106      	bne.n	80020aa <pushTxQueue+0x56>
             {
                 item->next = queue;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	601a      	str	r2, [r3, #0]
                 ins->tx_queue = item;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	625a      	str	r2, [r3, #36]	@ 0x24
             else
             {
                 previous->next = item;
                 item->next = queue;
             }
             return;
 80020a8:	e016      	b.n	80020d8 <pushTxQueue+0x84>
                 previous->next = item;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	601a      	str	r2, [r3, #0]
                 item->next = queue;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	601a      	str	r2, [r3, #0]
             return;
 80020b6:	e00f      	b.n	80020d8 <pushTxQueue+0x84>
         }
         else
         {
             if (queue->next == NULL)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d103      	bne.n	80020c8 <pushTxQueue+0x74>
             {
                 queue->next = item;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	601a      	str	r2, [r3, #0]
                 return;
 80020c6:	e007      	b.n	80020d8 <pushTxQueue+0x84>
             }
             else
             {
                 previous = queue;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	60bb      	str	r3, [r7, #8]
                 queue = queue->next;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	60fb      	str	r3, [r7, #12]
     while (queue != NULL)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1d1      	bne.n	800207c <pushTxQueue+0x28>
             }
         }
     }
 }
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <createTxItem>:

 /**
  * Creates new tx queue item from allocator
  */
 CANARD_INTERNAL CanardTxQueueItem* createTxItem(CanardPoolAllocator* allocator)
 {
 80020de:	b580      	push	{r7, lr}
 80020e0:	b084      	sub	sp, #16
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
     CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 fd10 	bl	8002b0c <allocateBlock>
 80020ec:	60f8      	str	r0, [r7, #12]
     if (item == NULL)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <createTxItem+0x1a>
     {
         return NULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	e005      	b.n	8002104 <createTxItem+0x26>
     }
     memset(item, 0, sizeof(*item));
 80020f8:	2214      	movs	r2, #20
 80020fa:	2100      	movs	r1, #0
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f004 f861 	bl	80061c4 <memset>
     return item;
 8002102:	68fb      	ldr	r3, [r7, #12]
 }
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <isPriorityHigher>:

 /**
  * Returns true if priority of rhs is higher than id
  */
 CANARD_INTERNAL bool isPriorityHigher(uint32_t rhs, uint32_t id)
 {
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	@ 0x24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
     const uint32_t clean_id = id & CANARD_CAN_EXT_ID_MASK;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800211c:	61fb      	str	r3, [r7, #28]
     const uint32_t rhs_clean_id = rhs & CANARD_CAN_EXT_ID_MASK;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8002124:	61bb      	str	r3, [r7, #24]

     /*
      * STD vs EXT - if 11 most significant bits are the same, EXT loses.
      */
     const bool ext = (id & CANARD_CAN_FRAME_EFF) != 0;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	0fdb      	lsrs	r3, r3, #31
 800212a:	75fb      	strb	r3, [r7, #23]
     const bool rhs_ext = (rhs & CANARD_CAN_FRAME_EFF) != 0;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	0fdb      	lsrs	r3, r3, #31
 8002130:	75bb      	strb	r3, [r7, #22]
     if (ext != rhs_ext)
 8002132:	7dfa      	ldrb	r2, [r7, #23]
 8002134:	7dbb      	ldrb	r3, [r7, #22]
 8002136:	429a      	cmp	r2, r3
 8002138:	d01d      	beq.n	8002176 <isPriorityHigher+0x6a>
     {
         uint32_t arb11 = ext ? (clean_id >> 18U) : clean_id;
 800213a:	7dfb      	ldrb	r3, [r7, #23]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d002      	beq.n	8002146 <isPriorityHigher+0x3a>
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	0c9b      	lsrs	r3, r3, #18
 8002144:	e000      	b.n	8002148 <isPriorityHigher+0x3c>
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	613b      	str	r3, [r7, #16]
         uint32_t rhs_arb11 = rhs_ext ? (rhs_clean_id >> 18U) : rhs_clean_id;
 800214a:	7dbb      	ldrb	r3, [r7, #22]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <isPriorityHigher+0x4a>
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	0c9b      	lsrs	r3, r3, #18
 8002154:	e000      	b.n	8002158 <isPriorityHigher+0x4c>
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	60fb      	str	r3, [r7, #12]
         if (arb11 != rhs_arb11)
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	429a      	cmp	r2, r3
 8002160:	d007      	beq.n	8002172 <isPriorityHigher+0x66>
         {
             return arb11 < rhs_arb11;
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	429a      	cmp	r2, r3
 8002168:	bf34      	ite	cc
 800216a:	2301      	movcc	r3, #1
 800216c:	2300      	movcs	r3, #0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	e022      	b.n	80021b8 <isPriorityHigher+0xac>
         }
         else
         {
             return rhs_ext;
 8002172:	7dbb      	ldrb	r3, [r7, #22]
 8002174:	e020      	b.n	80021b8 <isPriorityHigher+0xac>
     }

     /*
      * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
      */
     const bool rtr = (id & CANARD_CAN_FRAME_RTR) != 0;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	bf14      	ite	ne
 8002180:	2301      	movne	r3, #1
 8002182:	2300      	moveq	r3, #0
 8002184:	757b      	strb	r3, [r7, #21]
     const bool rhs_rtr = (rhs & CANARD_CAN_FRAME_RTR) != 0;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf14      	ite	ne
 8002190:	2301      	movne	r3, #1
 8002192:	2300      	moveq	r3, #0
 8002194:	753b      	strb	r3, [r7, #20]
     if (clean_id == rhs_clean_id && rtr != rhs_rtr)
 8002196:	69fa      	ldr	r2, [r7, #28]
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	429a      	cmp	r2, r3
 800219c:	d105      	bne.n	80021aa <isPriorityHigher+0x9e>
 800219e:	7d7a      	ldrb	r2, [r7, #21]
 80021a0:	7d3b      	ldrb	r3, [r7, #20]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d001      	beq.n	80021aa <isPriorityHigher+0x9e>
     {
         return rhs_rtr;
 80021a6:	7d3b      	ldrb	r3, [r7, #20]
 80021a8:	e006      	b.n	80021b8 <isPriorityHigher+0xac>
     }

     /*
      * Plain ID arbitration - greater value loses.
      */
     return clean_id < rhs_clean_id;
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	bf34      	ite	cc
 80021b2:	2301      	movcc	r3, #1
 80021b4:	2300      	movcs	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 }
 80021b8:	4618      	mov	r0, r3
 80021ba:	3724      	adds	r7, #36	@ 0x24
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <prepareForNextTransfer>:

 /**
  * preps the rx state for the next transfer. does not delete the state
  */
 CANARD_INTERNAL void prepareForNextTransfer(CanardRxState* state)
 {
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
     CANARD_ASSERT(state->buffer_blocks == CANARD_BUFFER_IDX_NONE);
     state->transfer_id++;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	7ddb      	ldrb	r3, [r3, #23]
 80021d0:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	3301      	adds	r3, #1
 80021d8:	f003 031f 	and.w	r3, r3, #31
 80021dc:	b2d9      	uxtb	r1, r3
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	7dd3      	ldrb	r3, [r2, #23]
 80021e2:	f361 0386 	bfi	r3, r1, #2, #5
 80021e6:	75d3      	strb	r3, [r2, #23]
     state->payload_len = 0;
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	8ad3      	ldrh	r3, [r2, #22]
 80021ec:	f36f 0309 	bfc	r3, #0, #10
 80021f0:	82d3      	strh	r3, [r2, #22]
     state->next_toggle = 0;
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	7dd3      	ldrb	r3, [r2, #23]
 80021f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021fa:	75d3      	strb	r3, [r2, #23]
 }
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <extractDataType>:

 /**
  * returns data type from id
  */
 uint16_t extractDataType(uint32_t id)
 {
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
     if (extractTransferType(id) == CanardTransferTypeBroadcast)
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f819 	bl	8002248 <extractTransferType>
 8002216:	4603      	mov	r3, r0
 8002218:	2b02      	cmp	r3, #2
 800221a:	d10e      	bne.n	800223a <extractDataType+0x32>
     {
         uint16_t dtid = MSG_TYPE_FROM_ID(id);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	0a1b      	lsrs	r3, r3, #8
 8002220:	81fb      	strh	r3, [r7, #14]
         if (SOURCE_ID_FROM_ID(id) == CANARD_BROADCAST_NODE_ID)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800222a:	2b00      	cmp	r3, #0
 800222c:	d103      	bne.n	8002236 <extractDataType+0x2e>
         {
             dtid &= (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;
 800222e:	89fb      	ldrh	r3, [r7, #14]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	81fb      	strh	r3, [r7, #14]
         }
         return dtid;
 8002236:	89fb      	ldrh	r3, [r7, #14]
 8002238:	e002      	b.n	8002240 <extractDataType+0x38>
     }
     else
     {
         return (uint16_t) SRV_TYPE_FROM_ID(id);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	0c1b      	lsrs	r3, r3, #16
 800223e:	b2db      	uxtb	r3, r3
     }
 }
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <extractTransferType>:

 /**
  * returns transfer type from id
  */
 CanardTransferType extractTransferType(uint32_t id)
 {
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
     const bool is_service = SERVICE_NOT_MSG_FROM_ID(id);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	09db      	lsrs	r3, r3, #7
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	bf14      	ite	ne
 800225c:	2301      	movne	r3, #1
 800225e:	2300      	moveq	r3, #0
 8002260:	73fb      	strb	r3, [r7, #15]
     if (!is_service)
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	f083 0301 	eor.w	r3, r3, #1
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <extractTransferType+0x2a>
     {
         return CanardTransferTypeBroadcast;
 800226e:	2302      	movs	r3, #2
 8002270:	e008      	b.n	8002284 <extractTransferType+0x3c>
     }
     else if (REQUEST_NOT_RESPONSE_FROM_ID(id) == 1)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	0bdb      	lsrs	r3, r3, #15
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <extractTransferType+0x3a>
     {
         return CanardTransferTypeRequest;
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <extractTransferType+0x3c>
     }
     else
     {
         return CanardTransferTypeResponse;
 8002282:	2300      	movs	r3, #0
     }
 }
 8002284:	4618      	mov	r0, r3
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <traverseRxStates>:
 /**
  * Traverses the list of CanardRxState's and returns a pointer to the CanardRxState
  * with either the Id or a new one at the end
  */
 CANARD_INTERNAL CanardRxState* traverseRxStates(CanardInstance* ins, uint32_t transfer_descriptor)
 {
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
     CanardRxState* states = ins->rx_states;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	60fb      	str	r3, [r7, #12]

     if (states == NULL) // initialize CanardRxStates
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d110      	bne.n	80022c8 <traverseRxStates+0x38>
     {
         states = createRxState(&ins->allocator, transfer_descriptor);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	330c      	adds	r3, #12
 80022aa:	6839      	ldr	r1, [r7, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 f865 	bl	800237c <createRxState>
 80022b2:	60f8      	str	r0, [r7, #12]

         if(states == NULL)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <traverseRxStates+0x2e>
         {
             return NULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	e013      	b.n	80022e6 <traverseRxStates+0x56>
         }

         ins->rx_states = states;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	621a      	str	r2, [r3, #32]
         return states;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	e00e      	b.n	80022e6 <traverseRxStates+0x56>
     }

     states = findRxState(ins, transfer_descriptor);
 80022c8:	6839      	ldr	r1, [r7, #0]
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f80f 	bl	80022ee <findRxState>
 80022d0:	60f8      	str	r0, [r7, #12]
     if (states != NULL)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <traverseRxStates+0x4c>
     {
         return states;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	e004      	b.n	80022e6 <traverseRxStates+0x56>
     }
     else
     {
         return prependRxState(ins, transfer_descriptor);
 80022dc:	6839      	ldr	r1, [r7, #0]
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f827 	bl	8002332 <prependRxState>
 80022e4:	4603      	mov	r3, r0
     }
 }
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <findRxState>:

 /**
  * returns pointer to the rx state of transfer descriptor or null if not found
  */
 CANARD_INTERNAL CanardRxState* findRxState(CanardInstance *ins, uint32_t transfer_descriptor)
 {
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b084      	sub	sp, #16
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	6039      	str	r1, [r7, #0]
     CanardRxState *state = ins->rx_states;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	60fb      	str	r3, [r7, #12]
     while (state != NULL)
 80022fe:	e010      	b.n	8002322 <findRxState+0x34>
     {
         if (state->dtid_tt_snid_dnid == transfer_descriptor)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d101      	bne.n	800230e <findRxState+0x20>
         {
             return state;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	e00d      	b.n	800232a <findRxState+0x3c>
         }
         state = canardRxFromIdx(&ins->allocator, state->next);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f103 020c 	add.w	r2, r3, #12
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4619      	mov	r1, r3
 800231a:	4610      	mov	r0, r2
 800231c:	f7fe fea4 	bl	8001068 <canardRxFromIdx>
 8002320:	60f8      	str	r0, [r7, #12]
     while (state != NULL)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1eb      	bne.n	8002300 <findRxState+0x12>
     }
     return NULL;
 8002328:	2300      	movs	r3, #0
 }
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <prependRxState>:

 /**
  * prepends rx state to the canard instance rx_states
  */
 CANARD_INTERNAL CanardRxState* prependRxState(CanardInstance* ins, uint32_t transfer_descriptor)
 {
 8002332:	b580      	push	{r7, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	6039      	str	r1, [r7, #0]
     CanardRxState* state = createRxState(&ins->allocator, transfer_descriptor);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	330c      	adds	r3, #12
 8002340:	6839      	ldr	r1, [r7, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f000 f81a 	bl	800237c <createRxState>
 8002348:	60f8      	str	r0, [r7, #12]

     if(state == NULL)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <prependRxState+0x22>
     {
         return NULL;
 8002350:	2300      	movs	r3, #0
 8002352:	e00f      	b.n	8002374 <prependRxState+0x42>
     }

     state->next = canardRxToIdx(&ins->allocator, ins->rx_states);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f103 020c 	add.w	r2, r3, #12
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	4619      	mov	r1, r3
 8002360:	4610      	mov	r0, r2
 8002362:	f7fe fe8d 	bl	8001080 <canardRxToIdx>
 8002366:	4602      	mov	r2, r0
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	601a      	str	r2, [r3, #0]
     ins->rx_states = state;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	621a      	str	r2, [r3, #32]
     return state;
 8002372:	68fb      	ldr	r3, [r7, #12]
 }
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <createRxState>:

 CANARD_INTERNAL CanardRxState* createRxState(CanardPoolAllocator* allocator, uint32_t transfer_descriptor)
 {
 800237c:	b580      	push	{r7, lr}
 800237e:	b08c      	sub	sp, #48	@ 0x30
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
     CanardRxState init = {
 8002386:	f107 0308 	add.w	r3, r7, #8
 800238a:	2220      	movs	r2, #32
 800238c:	2100      	movs	r1, #0
 800238e:	4618      	mov	r0, r3
 8002390:	f003 ff18 	bl	80061c4 <memset>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	61bb      	str	r3, [r7, #24]
         .next = CANARD_BUFFER_IDX_NONE,
         .buffer_blocks = CANARD_BUFFER_IDX_NONE,
         .dtid_tt_snid_dnid = transfer_descriptor
     };

     CanardRxState* state = (CanardRxState*) allocateBlock(allocator);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fbb7 	bl	8002b0c <allocateBlock>
 800239e:	62f8      	str	r0, [r7, #44]	@ 0x2c
     if (state == NULL)
 80023a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <createRxState+0x2e>
     {
         return NULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	e007      	b.n	80023ba <createRxState+0x3e>
     }
     memcpy(state, &init, sizeof(*state));
 80023aa:	f107 0308 	add.w	r3, r7, #8
 80023ae:	2220      	movs	r2, #32
 80023b0:	4619      	mov	r1, r3
 80023b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80023b4:	f003 ff34 	bl	8006220 <memcpy>

     return state;
 80023b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 }
 80023ba:	4618      	mov	r0, r3
 80023bc:	3730      	adds	r7, #48	@ 0x30
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <releaseStatePayload>:

 CANARD_INTERNAL uint64_t releaseStatePayload(CanardInstance* ins, CanardRxState* rxstate)
 {
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
     while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 80023cc:	e01b      	b.n	8002406 <releaseStatePayload+0x44>
     {
         CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rxstate->buffer_blocks);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f103 020c 	add.w	r2, r3, #12
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4619      	mov	r1, r3
 80023da:	4610      	mov	r0, r2
 80023dc:	f7fe fe2c 	bl	8001038 <canardBufferFromIdx>
 80023e0:	60f8      	str	r0, [r7, #12]
         CanardBufferBlock* const temp = block->next;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	60bb      	str	r3, [r7, #8]
         freeBlock(&ins->allocator, block);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	330c      	adds	r3, #12
 80023ec:	68f9      	ldr	r1, [r7, #12]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 fbb5 	bl	8002b5e <freeBlock>
         rxstate->buffer_blocks = canardBufferToIdx(&ins->allocator, temp);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	330c      	adds	r3, #12
 80023f8:	68b9      	ldr	r1, [r7, #8]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe fe28 	bl	8001050 <canardBufferToIdx>
 8002400:	4602      	mov	r2, r0
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	605a      	str	r2, [r3, #4]
     while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1df      	bne.n	80023ce <releaseStatePayload+0xc>
     }
     rxstate->payload_len = 0;
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	8ad3      	ldrh	r3, [r2, #22]
 8002412:	f36f 0309 	bfc	r3, #0, #10
 8002416:	82d3      	strh	r3, [r2, #22]
     return CANARD_OK;
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 }
 8002420:	4610      	mov	r0, r2
 8002422:	4619      	mov	r1, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <bufferBlockPushBytes>:
  */
 CANARD_INTERNAL int16_t bufferBlockPushBytes(CanardPoolAllocator* allocator,
                                              CanardRxState* state,
                                              const uint8_t* data,
                                              uint8_t data_len)
 {
 800242c:	b580      	push	{r7, lr}
 800242e:	b08a      	sub	sp, #40	@ 0x28
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
 8002438:	70fb      	strb	r3, [r7, #3]
     uint16_t data_index = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	84fb      	strh	r3, [r7, #38]	@ 0x26

     // if head is not full, add data to head
     if ((CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE - state->payload_len) > 0)
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	8adb      	ldrh	r3, [r3, #22]
 8002442:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b05      	cmp	r3, #5
 800244a:	d036      	beq.n	80024ba <bufferBlockPushBytes+0x8e>
     {
         for (uint16_t i = (uint16_t)state->payload_len;
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	8adb      	ldrh	r3, [r3, #22]
 8002450:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002454:	b29b      	uxth	r3, r3
 8002456:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002458:	e00e      	b.n	8002478 <bufferBlockPushBytes+0x4c>
              i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
              i++, data_index++)
         {
             state->buffer_head[i] = data[data_index];
 800245a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	441a      	add	r2, r3
 8002460:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002462:	7811      	ldrb	r1, [r2, #0]
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	4413      	add	r3, r2
 8002468:	460a      	mov	r2, r1
 800246a:	76da      	strb	r2, [r3, #27]
              i++, data_index++)
 800246c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800246e:	3301      	adds	r3, #1
 8002470:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002472:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002474:	3301      	adds	r3, #1
 8002476:	84fb      	strh	r3, [r7, #38]	@ 0x26
              i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
 8002478:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800247a:	2b04      	cmp	r3, #4
 800247c:	d804      	bhi.n	8002488 <bufferBlockPushBytes+0x5c>
 800247e:	78fb      	ldrb	r3, [r7, #3]
 8002480:	b29b      	uxth	r3, r3
 8002482:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002484:	429a      	cmp	r2, r3
 8002486:	d3e8      	bcc.n	800245a <bufferBlockPushBytes+0x2e>
         }
         if (data_index >= data_len)
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	b29b      	uxth	r3, r3
 800248c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800248e:	429a      	cmp	r2, r3
 8002490:	d313      	bcc.n	80024ba <bufferBlockPushBytes+0x8e>
         {
             state->payload_len =
                 (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	8adb      	ldrh	r3, [r3, #22]
 8002496:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800249a:	b29b      	uxth	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	78fb      	ldrb	r3, [r7, #3]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	4413      	add	r3, r2
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024aa:	b299      	uxth	r1, r3
             state->payload_len =
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	8ad3      	ldrh	r3, [r2, #22]
 80024b0:	f361 0309 	bfi	r3, r1, #0, #10
 80024b4:	82d3      	strh	r3, [r2, #22]
             return 1;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e0ae      	b.n	8002618 <bufferBlockPushBytes+0x1ec>
         }
     } // head is full.

     uint16_t index_at_nth_block =
         (uint16_t)(((state->payload_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) % CANARD_BUFFER_BLOCK_DATA_SIZE);
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	8adb      	ldrh	r3, [r3, #22]
 80024be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	1f5a      	subs	r2, r3, #5
 80024c6:	0893      	lsrs	r3, r2, #2
 80024c8:	4955      	ldr	r1, [pc, #340]	@ (8002620 <bufferBlockPushBytes+0x1f4>)
 80024ca:	fba1 3103 	umull	r3, r1, r1, r3
 80024ce:	460b      	mov	r3, r1
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	1a5b      	subs	r3, r3, r1
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	1ad3      	subs	r3, r2, r3
     uint16_t index_at_nth_block =
 80024d8:	847b      	strh	r3, [r7, #34]	@ 0x22

     // get to current block
     CanardBufferBlock* block = NULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]

     // buffer blocks uninitialized
     if (state->buffer_blocks == CANARD_BUFFER_IDX_NONE)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d113      	bne.n	800250e <bufferBlockPushBytes+0xe2>
     {
         block = createBufferBlock(allocator);
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f89c 	bl	8002624 <createBufferBlock>
 80024ec:	61f8      	str	r0, [r7, #28]
         state->buffer_blocks = canardBufferToIdx(allocator, block);
 80024ee:	69f9      	ldr	r1, [r7, #28]
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f7fe fdad 	bl	8001050 <canardBufferToIdx>
 80024f6:	4602      	mov	r2, r0
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	605a      	str	r2, [r3, #4]
         if (block == NULL)
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d102      	bne.n	8002508 <bufferBlockPushBytes+0xdc>
         {
             return -CANARD_ERROR_OUT_OF_MEMORY;
 8002502:	f06f 0302 	mvn.w	r3, #2
 8002506:	e087      	b.n	8002618 <bufferBlockPushBytes+0x1ec>
         }

         index_at_nth_block = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800250c:	e06c      	b.n	80025e8 <bufferBlockPushBytes+0x1bc>
     }
     else
     {
         uint16_t nth_block = 1;
 800250e:	2301      	movs	r3, #1
 8002510:	837b      	strh	r3, [r7, #26]

         // get to block
         block = canardBufferFromIdx(allocator, state->buffer_blocks);
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4619      	mov	r1, r3
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f7fe fd8d 	bl	8001038 <canardBufferFromIdx>
 800251e:	61f8      	str	r0, [r7, #28]
         while (block->next != NULL)
 8002520:	e005      	b.n	800252e <bufferBlockPushBytes+0x102>
         {
             nth_block++;
 8002522:	8b7b      	ldrh	r3, [r7, #26]
 8002524:	3301      	adds	r3, #1
 8002526:	837b      	strh	r3, [r7, #26]
             block = block->next;
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	61fb      	str	r3, [r7, #28]
         while (block->next != NULL)
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f5      	bne.n	8002522 <bufferBlockPushBytes+0xf6>
         }

         const uint16_t num_buffer_blocks =
             (uint16_t) (((((uint32_t)state->payload_len + data_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) /
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	8adb      	ldrh	r3, [r3, #22]
 800253a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800253e:	b29b      	uxth	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	78fb      	ldrb	r3, [r7, #3]
 8002544:	4413      	add	r3, r2
 8002546:	3b05      	subs	r3, #5
 8002548:	089b      	lsrs	r3, r3, #2
 800254a:	4a35      	ldr	r2, [pc, #212]	@ (8002620 <bufferBlockPushBytes+0x1f4>)
 800254c:	fba2 2303 	umull	r2, r3, r2, r3
 8002550:	b29b      	uxth	r3, r3
         const uint16_t num_buffer_blocks =
 8002552:	3301      	adds	r3, #1
 8002554:	82fb      	strh	r3, [r7, #22]
                          CANARD_BUFFER_BLOCK_DATA_SIZE) + 1U);

         if (num_buffer_blocks > nth_block && index_at_nth_block == 0)
 8002556:	8afa      	ldrh	r2, [r7, #22]
 8002558:	8b7b      	ldrh	r3, [r7, #26]
 800255a:	429a      	cmp	r2, r3
 800255c:	d944      	bls.n	80025e8 <bufferBlockPushBytes+0x1bc>
 800255e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002560:	2b00      	cmp	r3, #0
 8002562:	d141      	bne.n	80025e8 <bufferBlockPushBytes+0x1bc>
         {
             block->next = createBufferBlock(allocator);
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 f85d 	bl	8002624 <createBufferBlock>
 800256a:	4602      	mov	r2, r0
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	601a      	str	r2, [r3, #0]
             if (block->next == NULL)
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d102      	bne.n	800257e <bufferBlockPushBytes+0x152>
             {
                 return -CANARD_ERROR_OUT_OF_MEMORY;
 8002578:	f06f 0302 	mvn.w	r3, #2
 800257c:	e04c      	b.n	8002618 <bufferBlockPushBytes+0x1ec>
             }
             block = block->next;
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	61fb      	str	r3, [r7, #28]
         }
     }

     // add data to current block until it becomes full, add new block if necessary
     while (data_index < data_len)
 8002584:	e030      	b.n	80025e8 <bufferBlockPushBytes+0x1bc>
     {
         for (uint16_t i = index_at_nth_block;
 8002586:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002588:	833b      	strh	r3, [r7, #24]
 800258a:	e00e      	b.n	80025aa <bufferBlockPushBytes+0x17e>
              i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
              i++, data_index++)
         {
             block->data[i] = data[data_index];
 800258c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	441a      	add	r2, r3
 8002592:	8b3b      	ldrh	r3, [r7, #24]
 8002594:	7811      	ldrb	r1, [r2, #0]
 8002596:	69fa      	ldr	r2, [r7, #28]
 8002598:	4413      	add	r3, r2
 800259a:	460a      	mov	r2, r1
 800259c:	711a      	strb	r2, [r3, #4]
              i++, data_index++)
 800259e:	8b3b      	ldrh	r3, [r7, #24]
 80025a0:	3301      	adds	r3, #1
 80025a2:	833b      	strh	r3, [r7, #24]
 80025a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80025a6:	3301      	adds	r3, #1
 80025a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
              i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
 80025aa:	8b3b      	ldrh	r3, [r7, #24]
 80025ac:	2b1b      	cmp	r3, #27
 80025ae:	d804      	bhi.n	80025ba <bufferBlockPushBytes+0x18e>
 80025b0:	78fb      	ldrb	r3, [r7, #3]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d3e8      	bcc.n	800258c <bufferBlockPushBytes+0x160>
         }

         if (data_index < data_len)
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d211      	bcs.n	80025e8 <bufferBlockPushBytes+0x1bc>
         {
             block->next = createBufferBlock(allocator);
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 f82d 	bl	8002624 <createBufferBlock>
 80025ca:	4602      	mov	r2, r0
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	601a      	str	r2, [r3, #0]
             if (block->next == NULL)
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d102      	bne.n	80025de <bufferBlockPushBytes+0x1b2>
             {
                 return -CANARD_ERROR_OUT_OF_MEMORY;
 80025d8:	f06f 0302 	mvn.w	r3, #2
 80025dc:	e01c      	b.n	8002618 <bufferBlockPushBytes+0x1ec>
             }
             block = block->next;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	61fb      	str	r3, [r7, #28]
             index_at_nth_block = 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	847b      	strh	r3, [r7, #34]	@ 0x22
     while (data_index < data_len)
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d3c9      	bcc.n	8002586 <bufferBlockPushBytes+0x15a>
         }
     }

     state->payload_len = (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	8adb      	ldrh	r3, [r3, #22]
 80025f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	b29b      	uxth	r3, r3
 8002602:	4413      	add	r3, r2
 8002604:	b29b      	uxth	r3, r3
 8002606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800260a:	b299      	uxth	r1, r3
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	8ad3      	ldrh	r3, [r2, #22]
 8002610:	f361 0309 	bfi	r3, r1, #0, #10
 8002614:	82d3      	strh	r3, [r2, #22]

     return 1;
 8002616:	2301      	movs	r3, #1
 }
 8002618:	4618      	mov	r0, r3
 800261a:	3728      	adds	r7, #40	@ 0x28
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	24924925 	.word	0x24924925

08002624 <createBufferBlock>:

 CANARD_INTERNAL CanardBufferBlock* createBufferBlock(CanardPoolAllocator* allocator)
 {
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
     CanardBufferBlock* block = (CanardBufferBlock*) allocateBlock(allocator);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 fa6d 	bl	8002b0c <allocateBlock>
 8002632:	60f8      	str	r0, [r7, #12]
     if (block == NULL)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <createBufferBlock+0x1a>
     {
         return NULL;
 800263a:	2300      	movs	r3, #0
 800263c:	e003      	b.n	8002646 <createBufferBlock+0x22>
     }
     block->next = NULL;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
     return block;
 8002644:	68fb      	ldr	r3, [r7, #12]
 }
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <copyBitArray>:
 /**
  * Bit array copy routine, originally developed by Ben Dyer for Libuavcan. Thanks Ben.
  */
 void copyBitArray(const uint8_t* src, uint32_t src_offset, uint32_t src_len,
                         uint8_t* dst, uint32_t dst_offset)
 {
 800264e:	b480      	push	{r7}
 8002650:	b089      	sub	sp, #36	@ 0x24
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
 800265a:	603b      	str	r3, [r7, #0]
     CANARD_ASSERT(src_len > 0U);

     // Normalizing inputs
     src += src_offset / 8U;
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	08db      	lsrs	r3, r3, #3
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4413      	add	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]
     dst += dst_offset / 8U;
 8002666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002668:	08db      	lsrs	r3, r3, #3
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	4413      	add	r3, r2
 800266e:	603b      	str	r3, [r7, #0]

     src_offset %= 8U;
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	60bb      	str	r3, [r7, #8]
     dst_offset %= 8U;
 8002678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	62bb      	str	r3, [r7, #40]	@ 0x28

     const size_t last_bit = src_offset + src_len;
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4413      	add	r3, r2
 8002686:	61fb      	str	r3, [r7, #28]
     while (last_bit - src_offset)
 8002688:	e04d      	b.n	8002726 <copyBitArray+0xd8>
     {
         const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	76fb      	strb	r3, [r7, #27]
         const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 8002694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002696:	b2db      	uxtb	r3, r3
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	76bb      	strb	r3, [r7, #26]

         const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
 800269e:	7eba      	ldrb	r2, [r7, #26]
 80026a0:	7efb      	ldrb	r3, [r7, #27]
 80026a2:	4293      	cmp	r3, r2
 80026a4:	bf38      	it	cc
 80026a6:	4613      	movcc	r3, r2
 80026a8:	767b      	strb	r3, [r7, #25]
         const uint32_t copy_bits = (uint32_t)MIN(last_bit - src_offset, 8U - max_offset);
 80026aa:	7e7b      	ldrb	r3, [r7, #25]
 80026ac:	f1c3 0208 	rsb	r2, r3, #8
 80026b0:	69f9      	ldr	r1, [r7, #28]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	1acb      	subs	r3, r1, r3
 80026b6:	4293      	cmp	r3, r2
 80026b8:	bf28      	it	cs
 80026ba:	4613      	movcs	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]
         const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset)&0xFF;

         dst[dst_offset / 8U] =
             (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask))&0xFF;
 #else
         const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
 80026be:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	fa22 f303 	lsr.w	r3, r2, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	461a      	mov	r2, r3
 80026cc:	7ebb      	ldrb	r3, [r7, #26]
 80026ce:	fa42 f303 	asr.w	r3, r2, r3
 80026d2:	74fb      	strb	r3, [r7, #19]
         const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset);
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	08db      	lsrs	r3, r3, #3
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	4413      	add	r3, r2
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	7efb      	ldrb	r3, [r7, #27]
 80026e2:	409a      	lsls	r2, r3
 80026e4:	7ebb      	ldrb	r3, [r7, #26]
 80026e6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ea:	74bb      	strb	r3, [r7, #18]

         dst[dst_offset / 8U] =
             (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 80026ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ee:	08db      	lsrs	r3, r3, #3
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	4413      	add	r3, r2
 80026f4:	781a      	ldrb	r2, [r3, #0]
 80026f6:	7cfb      	ldrb	r3, [r7, #19]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	4013      	ands	r3, r2
 80026fe:	b2d9      	uxtb	r1, r3
 8002700:	7cba      	ldrb	r2, [r7, #18]
 8002702:	7cfb      	ldrb	r3, [r7, #19]
 8002704:	4013      	ands	r3, r2
 8002706:	b2da      	uxtb	r2, r3
         dst[dst_offset / 8U] =
 8002708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800270a:	08db      	lsrs	r3, r3, #3
 800270c:	6838      	ldr	r0, [r7, #0]
 800270e:	4403      	add	r3, r0
             (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8002710:	430a      	orrs	r2, r1
 8002712:	b2d2      	uxtb	r2, r2
         dst[dst_offset / 8U] =
 8002714:	701a      	strb	r2, [r3, #0]
 #endif

         src_offset += copy_bits;
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	4413      	add	r3, r2
 800271c:	60bb      	str	r3, [r7, #8]
         dst_offset += copy_bits;
 800271e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	4413      	add	r3, r2
 8002724:	62bb      	str	r3, [r7, #40]	@ 0x28
     while (last_bit - src_offset)
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	429a      	cmp	r2, r3
 800272c:	d1ad      	bne.n	800268a <copyBitArray+0x3c>
     }
 }
 800272e:	bf00      	nop
 8002730:	bf00      	nop
 8002732:	3724      	adds	r7, #36	@ 0x24
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <descatterTransferPayload>:

 CANARD_INTERNAL int16_t descatterTransferPayload(const CanardRxTransfer* transfer,
                                                  uint32_t bit_offset,
                                                  uint8_t bit_length,
                                                  void* output)
 {
 800273c:	b580      	push	{r7, lr}
 800273e:	b090      	sub	sp, #64	@ 0x40
 8002740:	af02      	add	r7, sp, #8
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	4613      	mov	r3, r2
 800274a:	71fb      	strb	r3, [r7, #7]
     CANARD_ASSERT(transfer != 0);

     if (bit_offset >= transfer->payload_len * 8)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8a9b      	ldrh	r3, [r3, #20]
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	461a      	mov	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	4293      	cmp	r3, r2
 8002758:	d301      	bcc.n	800275e <descatterTransferPayload+0x22>
     {
         return 0;       // Out of range, reading zero bits
 800275a:	2300      	movs	r3, #0
 800275c:	e0df      	b.n	800291e <descatterTransferPayload+0x1e2>
     }

     if (bit_offset + bit_length > transfer->payload_len * 8)
 800275e:	79fa      	ldrb	r2, [r7, #7]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	4413      	add	r3, r2
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	8a92      	ldrh	r2, [r2, #20]
 8002768:	00d2      	lsls	r2, r2, #3
 800276a:	4293      	cmp	r3, r2
 800276c:	d908      	bls.n	8002780 <descatterTransferPayload+0x44>
     {
         bit_length = (uint8_t)(transfer->payload_len * 8U - bit_offset);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8a9b      	ldrh	r3, [r3, #20]
 8002772:	b2db      	uxtb	r3, r3
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	b2da      	uxtb	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	71fb      	strb	r3, [r7, #7]
     }

     CANARD_ASSERT(bit_length > 0);

     if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d104      	bne.n	8002792 <descatterTransferPayload+0x56>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 80b9 	beq.w	8002904 <descatterTransferPayload+0x1c8>
         /*
          * This part is hideously complicated and probably should be redesigned.
          * The objective here is to copy the requested number of bits from scattered storage into the temporary
          * local storage. We go through great pains to ensure that all corner cases are handled correctly.
          */
         uint32_t input_bit_offset = bit_offset;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	637b      	str	r3, [r7, #52]	@ 0x34
         uint8_t output_bit_offset = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
         uint8_t remaining_bit_length = bit_length;
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

         // Reading head
         if (input_bit_offset < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8)
 80027a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027a4:	2b27      	cmp	r3, #39	@ 0x27
 80027a6:	d82d      	bhi.n	8002804 <descatterTransferPayload+0xc8>
         {
             const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
 80027a8:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80027ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ae:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d305      	bcc.n	80027c2 <descatterTransferPayload+0x86>
 80027b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	e001      	b.n	80027c6 <descatterTransferPayload+0x8a>
 80027c2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80027c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                                 CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input_bit_offset);

             copyBitArray(&transfer->payload_head[0], input_bit_offset, amount, (uint8_t*) output, 0);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6898      	ldr	r0, [r3, #8]
 80027ce:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80027d2:	2300      	movs	r3, #0
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80027da:	f7ff ff38 	bl	800264e <copyBitArray>

             input_bit_offset += amount;
 80027de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80027e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027e4:	4413      	add	r3, r2
 80027e6:	637b      	str	r3, [r7, #52]	@ 0x34
             output_bit_offset = (uint8_t)(output_bit_offset + amount);
 80027e8:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80027ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80027f0:	4413      	add	r3, r2
 80027f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
             remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 80027f6:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80027fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
         }

         // Reading middle
         uint32_t remaining_bits = (uint32_t)(transfer->payload_len * 8U - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8a9b      	ldrh	r3, [r3, #20]
 8002808:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800280c:	3b05      	subs	r3, #5
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	62fb      	str	r3, [r7, #44]	@ 0x2c
         uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 8002812:	2328      	movs	r3, #40	@ 0x28
 8002814:	62bb      	str	r3, [r7, #40]	@ 0x28
         const CanardBufferBlock* block = transfer->payload_middle;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	627b      	str	r3, [r7, #36]	@ 0x24

         while ((block != NULL) && (remaining_bit_length > 0))
 800281c:	e044      	b.n	80028a8 <descatterTransferPayload+0x16c>
         {
             CANARD_ASSERT(remaining_bits > 0);
             const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_SIZE * 8,
 800281e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002820:	2be0      	cmp	r3, #224	@ 0xe0
 8002822:	bf28      	it	cs
 8002824:	23e0      	movcs	r3, #224	@ 0xe0
 8002826:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002828:	4413      	add	r3, r2
 800282a:	61fb      	str	r3, [r7, #28]
                                                                          remaining_bits);

             // Perform copy if we've reached the requested offset, otherwise jump over this block and try next
             if (block_end_bit_offset > input_bit_offset)
 800282c:	69fa      	ldr	r2, [r7, #28]
 800282e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002830:	429a      	cmp	r2, r3
 8002832:	d92e      	bls.n	8002892 <descatterTransferPayload+0x156>
             {
                 const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - input_bit_offset);
 8002834:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002838:	69f9      	ldr	r1, [r7, #28]
 800283a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800283c:	1acb      	subs	r3, r1, r3
 800283e:	429a      	cmp	r2, r3
 8002840:	d306      	bcc.n	8002850 <descatterTransferPayload+0x114>
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	b2da      	uxtb	r2, r3
 8002846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002848:	b2db      	uxtb	r3, r3
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	e001      	b.n	8002854 <descatterTransferPayload+0x118>
 8002850:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002854:	76fb      	strb	r3, [r7, #27]

                 CANARD_ASSERT(input_bit_offset >= block_bit_offset);
                 const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 8002856:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	617b      	str	r3, [r7, #20]

                 copyBitArray(&block->data[0], bit_offset_within_block, amount, (uint8_t*) output, output_bit_offset);
 800285e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002860:	1d18      	adds	r0, r3, #4
 8002862:	7efa      	ldrb	r2, [r7, #27]
 8002864:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6979      	ldr	r1, [r7, #20]
 800286e:	f7ff feee 	bl	800264e <copyBitArray>

                 input_bit_offset += amount;
 8002872:	7efb      	ldrb	r3, [r7, #27]
 8002874:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002876:	4413      	add	r3, r2
 8002878:	637b      	str	r3, [r7, #52]	@ 0x34
                 output_bit_offset = (uint8_t)(output_bit_offset + amount);
 800287a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800287e:	7efb      	ldrb	r3, [r7, #27]
 8002880:	4413      	add	r3, r2
 8002882:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                 remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 8002886:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800288a:	7efb      	ldrb	r3, [r7, #27]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
             }

             CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
             remaining_bits -= block_end_bit_offset - block_bit_offset;
 8002892:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800289a:	4413      	add	r3, r2
 800289c:	62fb      	str	r3, [r7, #44]	@ 0x2c
             block_bit_offset = block_end_bit_offset;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	62bb      	str	r3, [r7, #40]	@ 0x28
             block = block->next;
 80028a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	627b      	str	r3, [r7, #36]	@ 0x24
         while ((block != NULL) && (remaining_bit_length > 0))
 80028a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <descatterTransferPayload+0x17a>
 80028ae:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1b3      	bne.n	800281e <descatterTransferPayload+0xe2>
         }

         CANARD_ASSERT(remaining_bit_length <= remaining_bits);

         // Reading tail
         if ((transfer->payload_tail != NULL) && (remaining_bit_length > 0))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d02c      	beq.n	8002918 <descatterTransferPayload+0x1dc>
 80028be:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d028      	beq.n	8002918 <descatterTransferPayload+0x1dc>
         {
             CANARD_ASSERT(input_bit_offset >= block_bit_offset);
             const uint32_t offset = input_bit_offset - block_bit_offset;
 80028c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	613b      	str	r3, [r7, #16]

             copyBitArray(&transfer->payload_tail[0], offset, remaining_bit_length, (uint8_t*) output,
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6918      	ldr	r0, [r3, #16]
 80028d2:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80028d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	6939      	ldr	r1, [r7, #16]
 80028e0:	f7ff feb5 	bl	800264e <copyBitArray>
                          output_bit_offset);

             input_bit_offset += remaining_bit_length;
 80028e4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80028e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028ea:	4413      	add	r3, r2
 80028ec:	637b      	str	r3, [r7, #52]	@ 0x34
             output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
 80028ee:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80028f2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80028f6:	4413      	add	r3, r2
 80028f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
             remaining_bit_length = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
     {
 8002902:	e009      	b.n	8002918 <descatterTransferPayload+0x1dc>
         CANARD_ASSERT(output_bit_offset <= 64);
         CANARD_ASSERT(remaining_bit_length == 0);
     }
     else                                                                    // Single frame
     {
         copyBitArray(&transfer->payload_head[0], bit_offset, bit_length, (uint8_t*) output, 0);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6898      	ldr	r0, [r3, #8]
 8002908:	79fa      	ldrb	r2, [r7, #7]
 800290a:	2300      	movs	r3, #0
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	f7ff fe9c 	bl	800264e <copyBitArray>
 8002916:	e000      	b.n	800291a <descatterTransferPayload+0x1de>
     {
 8002918:	bf00      	nop
     }

     return bit_length;
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	b21b      	sxth	r3, r3
 }
 800291e:	4618      	mov	r0, r3
 8002920:	3738      	adds	r7, #56	@ 0x38
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <isBigEndian>:

 CANARD_INTERNAL bool isBigEndian(void)
 {
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 #else
         uint16_t a;
         uint8_t b[2];
 #endif
     } u;
     u.a = 1;
 800292c:	2301      	movs	r3, #1
 800292e:	80bb      	strh	r3, [r7, #4]
     return u.b[1] == 1;                             // Some don't...
 8002930:	797b      	ldrb	r3, [r7, #5]
 8002932:	2b01      	cmp	r3, #1
 8002934:	bf0c      	ite	eq
 8002936:	2301      	moveq	r3, #1
 8002938:	2300      	movne	r3, #0
 800293a:	b2db      	uxtb	r3, r3
 #endif
 }
 800293c:	4618      	mov	r0, r3
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <swapByteOrder>:

 CANARD_INTERNAL void swapByteOrder(void* data, unsigned size)
 {
 8002948:	b480      	push	{r7}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
     CANARD_ASSERT(data != NULL);

     uint8_t* const bytes = (uint8_t*) data;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	60fb      	str	r3, [r7, #12]

     size_t fwd = 0;
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]
     size_t rev = size - 1;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	3b01      	subs	r3, #1
 800295e:	613b      	str	r3, [r7, #16]

     while (fwd < rev)
 8002960:	e017      	b.n	8002992 <swapByteOrder+0x4a>
     {
         const uint8_t x = bytes[fwd];
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	4413      	add	r3, r2
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	72fb      	strb	r3, [r7, #11]
         bytes[fwd] = bytes[rev];
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	441a      	add	r2, r3
 8002972:	68f9      	ldr	r1, [r7, #12]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	440b      	add	r3, r1
 8002978:	7812      	ldrb	r2, [r2, #0]
 800297a:	701a      	strb	r2, [r3, #0]
         bytes[rev] = x;
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4413      	add	r3, r2
 8002982:	7afa      	ldrb	r2, [r7, #11]
 8002984:	701a      	strb	r2, [r3, #0]
         fwd++;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	3301      	adds	r3, #1
 800298a:	617b      	str	r3, [r7, #20]
         rev--;
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	3b01      	subs	r3, #1
 8002990:	613b      	str	r3, [r7, #16]
     while (fwd < rev)
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	429a      	cmp	r2, r3
 8002998:	d3e3      	bcc.n	8002962 <swapByteOrder+0x1a>
     }
 }
 800299a:	bf00      	nop
 800299c:	bf00      	nop
 800299e:	371c      	adds	r7, #28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <crcAddByte>:

 /*
  * CRC functions
  */
 CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
 {
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	460a      	mov	r2, r1
 80029b2:	80fb      	strh	r3, [r7, #6]
 80029b4:	4613      	mov	r3, r2
 80029b6:	717b      	strb	r3, [r7, #5]
     crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 80029b8:	797b      	ldrb	r3, [r7, #5]
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	021b      	lsls	r3, r3, #8
 80029be:	b29a      	uxth	r2, r3
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	4053      	eors	r3, r2
 80029c4:	80fb      	strh	r3, [r7, #6]
     for (uint8_t j = 0; j < 8; j++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	73fb      	strb	r3, [r7, #15]
 80029ca:	e012      	b.n	80029f2 <crcAddByte+0x4a>
     {
         if (crc_val & 0x8000U)
 80029cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	da08      	bge.n	80029e6 <crcAddByte+0x3e>
         {
             crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	b29b      	uxth	r3, r3
 80029da:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 80029de:	f083 0301 	eor.w	r3, r3, #1
 80029e2:	80fb      	strh	r3, [r7, #6]
 80029e4:	e002      	b.n	80029ec <crcAddByte+0x44>
         }
         else
         {
             crc_val = (uint16_t) (crc_val << 1U);
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	80fb      	strh	r3, [r7, #6]
     for (uint8_t j = 0; j < 8; j++)
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	3301      	adds	r3, #1
 80029f0:	73fb      	strb	r3, [r7, #15]
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	2b07      	cmp	r3, #7
 80029f6:	d9e9      	bls.n	80029cc <crcAddByte+0x24>
         }
     }
     return crc_val;
 80029f8:	88fb      	ldrh	r3, [r7, #6]
 }
 80029fa:	4618      	mov	r0, r3
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <crcAddSignature>:

 CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
 {
 8002a06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a08:	b087      	sub	sp, #28
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	4601      	mov	r1, r0
 8002a0e:	e9c7 2300 	strd	r2, r3, [r7]
 8002a12:	460b      	mov	r3, r1
 8002a14:	81fb      	strh	r3, [r7, #14]
     for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8002a16:	2300      	movs	r3, #0
 8002a18:	82fb      	strh	r3, [r7, #22]
 8002a1a:	e01b      	b.n	8002a54 <crcAddSignature+0x4e>
     {
         crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 8002a1c:	8af9      	ldrh	r1, [r7, #22]
 8002a1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a22:	f1c1 0620 	rsb	r6, r1, #32
 8002a26:	f1a1 0020 	sub.w	r0, r1, #32
 8002a2a:	fa22 f401 	lsr.w	r4, r2, r1
 8002a2e:	fa03 f606 	lsl.w	r6, r3, r6
 8002a32:	4334      	orrs	r4, r6
 8002a34:	fa23 f000 	lsr.w	r0, r3, r0
 8002a38:	4304      	orrs	r4, r0
 8002a3a:	fa23 f501 	lsr.w	r5, r3, r1
 8002a3e:	b2e2      	uxtb	r2, r4
 8002a40:	89fb      	ldrh	r3, [r7, #14]
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff ffaf 	bl	80029a8 <crcAddByte>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	81fb      	strh	r3, [r7, #14]
     for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8002a4e:	8afb      	ldrh	r3, [r7, #22]
 8002a50:	3308      	adds	r3, #8
 8002a52:	82fb      	strh	r3, [r7, #22]
 8002a54:	8afb      	ldrh	r3, [r7, #22]
 8002a56:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a58:	d9e0      	bls.n	8002a1c <crcAddSignature+0x16>
     }
     return crc_val;
 8002a5a:	89fb      	ldrh	r3, [r7, #14]
 }
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	371c      	adds	r7, #28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a64 <crcAdd>:

 CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
 {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	81fb      	strh	r3, [r7, #14]
     while (len--)
 8002a72:	e00a      	b.n	8002a8a <crcAdd+0x26>
     {
         crc_val = crcAddByte(crc_val, *bytes++);
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	60ba      	str	r2, [r7, #8]
 8002a7a:	781a      	ldrb	r2, [r3, #0]
 8002a7c:	89fb      	ldrh	r3, [r7, #14]
 8002a7e:	4611      	mov	r1, r2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff ff91 	bl	80029a8 <crcAddByte>
 8002a86:	4603      	mov	r3, r0
 8002a88:	81fb      	strh	r3, [r7, #14]
     while (len--)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	1e5a      	subs	r2, r3, #1
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1ef      	bne.n	8002a74 <crcAdd+0x10>
     }
     return crc_val;
 8002a94:	89fb      	ldrh	r3, [r7, #14]
 }
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <initPoolAllocator>:
  *  Pool Allocator functions
  */
 CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
                                        void* buf,
                                        uint16_t buf_len)
 {
 8002a9e:	b480      	push	{r7}
 8002aa0:	b089      	sub	sp, #36	@ 0x24
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	80fb      	strh	r3, [r7, #6]
     size_t current_index = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61fb      	str	r3, [r7, #28]
     CanardPoolAllocatorBlock *abuf = buf;
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	617b      	str	r3, [r7, #20]
     allocator->arena = buf;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	611a      	str	r2, [r3, #16]
     CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	3304      	adds	r3, #4
 8002abe:	61bb      	str	r3, [r7, #24]
     while (current_index < buf_len)
 8002ac0:	e00b      	b.n	8002ada <initPoolAllocator+0x3c>
     {
         *current_block = &abuf[current_index];
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	015b      	lsls	r3, r3, #5
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	441a      	add	r2, r3
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	601a      	str	r2, [r3, #0]
         current_block = &((*current_block)->next);
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	61bb      	str	r3, [r7, #24]
         current_index++;
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	61fb      	str	r3, [r7, #28]
     while (current_index < buf_len)
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	69fa      	ldr	r2, [r7, #28]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d3ef      	bcc.n	8002ac2 <initPoolAllocator+0x24>
     }
     *current_block = NULL;
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]

     allocator->statistics.capacity_blocks = buf_len;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	88fa      	ldrh	r2, [r7, #6]
 8002aec:	811a      	strh	r2, [r3, #8]
     allocator->statistics.current_usage_blocks = 0;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	815a      	strh	r2, [r3, #10]
     allocator->statistics.peak_usage_blocks = 0;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	819a      	strh	r2, [r3, #12]
     // user should initialize semaphore after the canardInit
     // or at first call of canard_allocate_sem_take
     allocator->semaphore = NULL;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 }
 8002b00:	bf00      	nop
 8002b02:	3724      	adds	r7, #36	@ 0x24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <allocateBlock>:

 CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
 {
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_take(allocator);
 #endif
     // Check if there are any blocks available in the free list.
     if (allocator->free_list == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <allocateBlock+0x14>
     {
 #if CANARD_ALLOCATE_SEM
         canard_allocate_sem_give(allocator);
 #endif
         return NULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	e018      	b.n	8002b52 <allocateBlock+0x46>
     }

     // Take first available block and prepares next block for use.
     void* result = allocator->free_list;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	60fb      	str	r3, [r7, #12]
     allocator->free_list = allocator->free_list->next;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	605a      	str	r2, [r3, #4]

     // Update statistics
     allocator->statistics.current_usage_blocks++;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	895b      	ldrh	r3, [r3, #10]
 8002b34:	3301      	adds	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	815a      	strh	r2, [r3, #10]
     if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	899a      	ldrh	r2, [r3, #12]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	895b      	ldrh	r3, [r3, #10]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d203      	bcs.n	8002b50 <allocateBlock+0x44>
     {
         allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	895a      	ldrh	r2, [r3, #10]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	819a      	strh	r2, [r3, #12]
     }
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_give(allocator);
 #endif
     return result;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 }
 8002b52:	4618      	mov	r0, r3
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <freeBlock>:

 CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
 {
 8002b5e:	b480      	push	{r7}
 8002b60:	b085      	sub	sp, #20
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	6039      	str	r1, [r7, #0]
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_take(allocator);
 #endif
     CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	60fb      	str	r3, [r7, #12]

     block->next = allocator->free_list;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	601a      	str	r2, [r3, #0]
     allocator->free_list = block;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	605a      	str	r2, [r3, #4]

     CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
     allocator->statistics.current_usage_blocks--;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	895b      	ldrh	r3, [r3, #10]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	815a      	strh	r2, [r3, #10]
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_give(allocator);
 #endif
 }
 8002b86:	bf00      	nop
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <_Z12FDCAN_Configv>:
uint8_t RxData[8];
CAN can(&hfdcan1);

FDCAN_FilterTypeDef sFilterConfig;

void FDCAN_Config(void) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0


    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8002b98:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <_Z12FDCAN_Configv+0x4c>)
 8002b9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b9e:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIndex = 0;
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8002be0 <_Z12FDCAN_Configv+0x4c>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8002be0 <_Z12FDCAN_Configv+0x4c>)
 8002ba8:	2202      	movs	r2, #2
 8002baa:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002bac:	4b0c      	ldr	r3, [pc, #48]	@ (8002be0 <_Z12FDCAN_Configv+0x4c>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterID1 = 0x0;
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <_Z12FDCAN_Configv+0x4c>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterID2 = 0x0; // receive messages from all ids
 8002bb8:	4b09      	ldr	r3, [pc, #36]	@ (8002be0 <_Z12FDCAN_Configv+0x4c>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	615a      	str	r2, [r3, #20]

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8002bbe:	4908      	ldr	r1, [pc, #32]	@ (8002be0 <_Z12FDCAN_Configv+0x4c>)
 8002bc0:	4808      	ldr	r0, [pc, #32]	@ (8002be4 <_Z12FDCAN_Configv+0x50>)
 8002bc2:	f000 fedd 	bl	8003980 <HAL_FDCAN_ConfigFilter>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	bf14      	ite	ne
 8002bcc:	2301      	movne	r3, #1
 8002bce:	2300      	moveq	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <_Z12FDCAN_Configv+0x46>
        Error_Handler();
 8002bd6:	f000 f99d 	bl	8002f14 <Error_Handler>
    }
}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20001188 	.word	0x20001188
 8002be4:	2000047c 	.word	0x2000047c

08002be8 <_Z14FDCAN_Activatev>:

void FDCAN_Activate(void) {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8002bec:	2200      	movs	r2, #0
 8002bee:	2101      	movs	r1, #1
 8002bf0:	4807      	ldr	r0, [pc, #28]	@ (8002c10 <_Z14FDCAN_Activatev+0x28>)
 8002bf2:	f001 f8a5 	bl	8003d40 <HAL_FDCAN_ActivateNotification>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bf14      	ite	ne
 8002bfc:	2301      	movne	r3, #1
 8002bfe:	2300      	moveq	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <_Z14FDCAN_Activatev+0x22>
        Error_Handler();
 8002c06:	f000 f985 	bl	8002f14 <Error_Handler>
    }
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	2000047c 	.word	0x2000047c

08002c14 <HAL_FDCAN_RxFifo0Callback>:
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
        Error_Handler();
    }
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]

    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d014      	beq.n	8002c52 <HAL_FDCAN_RxFifo0Callback+0x3e>
        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8002c28:	4b0c      	ldr	r3, [pc, #48]	@ (8002c5c <HAL_FDCAN_RxFifo0Callback+0x48>)
 8002c2a:	4a0d      	ldr	r2, [pc, #52]	@ (8002c60 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002c2c:	2140      	movs	r1, #64	@ 0x40
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 ff6c 	bl	8003b0c <HAL_FDCAN_GetRxMessage>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	bf14      	ite	ne
 8002c3a:	2301      	movne	r3, #1
 8002c3c:	2300      	moveq	r3, #0
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_FDCAN_RxFifo0Callback+0x34>
            // Process received data (e.g., print it)
        	Error_Handler();
 8002c44:	f000 f966 	bl	8002f14 <Error_Handler>
//        FDCAN_RxHeaderTypeDef rx_header;

//        FDCAN_Activate(); // test with and without this re-activation
//        const uint64_t timestamp_usec = HAL_GetTick() * 1000ULL;

        can.handleRxFrame(&RxHeader, RxData);
 8002c48:	4a04      	ldr	r2, [pc, #16]	@ (8002c5c <HAL_FDCAN_RxFifo0Callback+0x48>)
 8002c4a:	4905      	ldr	r1, [pc, #20]	@ (8002c60 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002c4c:	4805      	ldr	r0, [pc, #20]	@ (8002c64 <HAL_FDCAN_RxFifo0Callback+0x50>)
 8002c4e:	f7fd fe63 	bl	8000918 <_ZN3CAN13handleRxFrameEP21FDCAN_RxHeaderTypeDefPh>

    }
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	2000052c 	.word	0x2000052c
 8002c60:	20000504 	.word	0x20000504
 8002c64:	20000538 	.word	0x20000538

08002c68 <_Z15request_node_idP3CAN>:




void request_node_id(CAN *can) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b096      	sub	sp, #88	@ 0x58
 8002c6c:	af06      	add	r7, sp, #24
 8002c6e:	6078      	str	r0, [r7, #4]
	uint8_t unique_id[6] = {
 8002c70:	4a21      	ldr	r2, [pc, #132]	@ (8002cf8 <_Z15request_node_idP3CAN+0x90>)
 8002c72:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c7a:	6018      	str	r0, [r3, #0]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	8019      	strh	r1, [r3, #0]
	    0xBA, 0xAD, 0xF0, 0x0D,
	    0x12, 0x34
	};

	struct uavcan_protocol_dynamic_node_id_Allocation req;
    req.node_id = 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	f887 3020 	strb.w	r3, [r7, #32]
    req.first_part_of_unique_id = true;
 8002c86:	2301      	movs	r3, #1
 8002c88:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    req.unique_id.len = 6;
 8002c8c:	2306      	movs	r3, #6
 8002c8e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    memcpy(req.unique_id.data, unique_id, 6);
 8002c92:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8002c96:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002c9a:	6810      	ldr	r0, [r2, #0]
 8002c9c:	6018      	str	r0, [r3, #0]
 8002c9e:	8892      	ldrh	r2, [r2, #4]
 8002ca0:	809a      	strh	r2, [r3, #4]


    uint8_t buffer[UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MAX_SIZE];
    const int size = uavcan_protocol_dynamic_node_id_Allocation_encode(&req, buffer);
 8002ca2:	f107 020c 	add.w	r2, r7, #12
 8002ca6:	f107 0320 	add.w	r3, r7, #32
 8002caa:	4611      	mov	r1, r2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fd fc6d 	bl	800058c <uavcan_protocol_dynamic_node_id_Allocation_encode>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint8_t transfer_id = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	72fb      	strb	r3, [r7, #11]
    can->broadcast(
 8002cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	9304      	str	r3, [sp, #16]
 8002cc0:	f107 030c 	add.w	r3, r7, #12
 8002cc4:	9303      	str	r3, [sp, #12]
 8002cc6:	2308      	movs	r3, #8
 8002cc8:	9302      	str	r3, [sp, #8]
 8002cca:	f107 030b 	add.w	r3, r7, #11
 8002cce:	9301      	str	r3, [sp, #4]
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	a306      	add	r3, pc, #24	@ (adr r3, 8002cf0 <_Z15request_node_idP3CAN+0x88>)
 8002cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cda:	2101      	movs	r1, #1
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7fe f8bc 	bl	8000e5a <_ZN3CAN9broadcastE18CanardTransferTypeytPhhPKht>
			CANARD_TRANSFER_PRIORITY_HIGH,
			buffer,
			size
    );

}
 8002ce2:	bf00      	nop
 8002ce4:	3740      	adds	r7, #64	@ 0x40
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	f3af 8000 	nop.w
 8002cf0:	20a11d40 	.word	0x20a11d40
 8002cf4:	0b2a8126 	.word	0x0b2a8126
 8002cf8:	080062f0 	.word	0x080062f0

08002cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d00:	f000 fafa 	bl	80032f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d04:	f000 f840 	bl	8002d88 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d08:	f000 f8ec 	bl	8002ee4 <_ZL12MX_GPIO_Initv>
  MX_FDCAN1_Init();
 8002d0c:	f000 f89c 	bl	8002e48 <_ZL14MX_FDCAN1_Initv>
  /* USER CODE BEGIN 2 */
  FDCAN_Activate();
 8002d10:	f7ff ff6a 	bl	8002be8 <_Z14FDCAN_Activatev>
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8002d14:	4819      	ldr	r0, [pc, #100]	@ (8002d7c <main+0x80>)
 8002d16:	f000 fe8d 	bl	8003a34 <HAL_FDCAN_Start>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf14      	ite	ne
 8002d20:	2301      	movne	r3, #1
 8002d22:	2300      	moveq	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <main+0x32>
	  Error_Handler();
 8002d2a:	f000 f8f3 	bl	8002f14 <Error_Handler>
  }

  TxHeader.Identifier = NODE_ID;
 8002d2e:	4b14      	ldr	r3, [pc, #80]	@ (8002d80 <main+0x84>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_EXTENDED_ID;
 8002d34:	4b12      	ldr	r3, [pc, #72]	@ (8002d80 <main+0x84>)
 8002d36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d3a:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002d3c:	4b10      	ldr	r3, [pc, #64]	@ (8002d80 <main+0x84>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8002d42:	4b0f      	ldr	r3, [pc, #60]	@ (8002d80 <main+0x84>)
 8002d44:	2208      	movs	r2, #8
 8002d46:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002d48:	4b0d      	ldr	r3, [pc, #52]	@ (8002d80 <main+0x84>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8002d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d80 <main+0x84>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8002d54:	4b0a      	ldr	r3, [pc, #40]	@ (8002d80 <main+0x84>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8002d5a:	4b09      	ldr	r3, [pc, #36]	@ (8002d80 <main+0x84>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8002d60:	4b07      	ldr	r3, [pc, #28]	@ (8002d80 <main+0x84>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	621a      	str	r2, [r3, #32]

  request_node_id(&can);
 8002d66:	4807      	ldr	r0, [pc, #28]	@ (8002d84 <main+0x88>)
 8002d68:	f7ff ff7e 	bl	8002c68 <_Z15request_node_idP3CAN>
    /* USER CODE BEGIN 3 */
//	  for (int i = 0; i < 6; i++) TxData[i] = indx++;
//
//	  FDCAN_Transmit();

	  HAL_Delay(10);
 8002d6c:	200a      	movs	r0, #10
 8002d6e:	f000 fb39 	bl	80033e4 <HAL_Delay>
//			  &transfer_id,
//			  CANARD_TRANSFER_PRIORITY_HIGH,
//			  heartbeat_payload,
//			  sizeof(heartbeat_payload));

	  can.routineTasks();
 8002d72:	4804      	ldr	r0, [pc, #16]	@ (8002d84 <main+0x88>)
 8002d74:	f7fd ff91 	bl	8000c9a <_ZN3CAN12routineTasksEv>
	  HAL_Delay(10);
 8002d78:	bf00      	nop
 8002d7a:	e7f7      	b.n	8002d6c <main+0x70>
 8002d7c:	2000047c 	.word	0x2000047c
 8002d80:	200004e0 	.word	0x200004e0
 8002d84:	20000538 	.word	0x20000538

08002d88 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b098      	sub	sp, #96	@ 0x60
 8002d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d8e:	f107 0318 	add.w	r3, r7, #24
 8002d92:	2248      	movs	r2, #72	@ 0x48
 8002d94:	2100      	movs	r1, #0
 8002d96:	4618      	mov	r0, r3
 8002d98:	f003 fa14 	bl	80061c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d9c:	1d3b      	adds	r3, r7, #4
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	60da      	str	r2, [r3, #12]
 8002da8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8002daa:	2000      	movs	r0, #0
 8002dac:	f001 fcaa 	bl	8004704 <HAL_PWREx_ControlVoltageScaling>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	bf14      	ite	ne
 8002db6:	2301      	movne	r3, #1
 8002db8:	2300      	moveq	r3, #0
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8002dc0:	f000 f8a8 	bl	8002f14 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002dc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002dce:	2340      	movs	r3, #64	@ 0x40
 8002dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002dda:	2304      	movs	r3, #4
 8002ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8002dde:	2337      	movs	r3, #55	@ 0x37
 8002de0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002de2:	2307      	movs	r3, #7
 8002de4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002de6:	2302      	movs	r3, #2
 8002de8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002dea:	2302      	movs	r3, #2
 8002dec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dee:	f107 0318 	add.w	r3, r7, #24
 8002df2:	4618      	mov	r0, r3
 8002df4:	f001 fd16 	bl	8004824 <HAL_RCC_OscConfig>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	bf14      	ite	ne
 8002dfe:	2301      	movne	r3, #1
 8002e00:	2300      	moveq	r3, #0
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <_Z18SystemClock_Configv+0x84>
  {
    Error_Handler();
 8002e08:	f000 f884 	bl	8002f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e0c:	230f      	movs	r3, #15
 8002e0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e10:	2303      	movs	r3, #3
 8002e12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e20:	1d3b      	adds	r3, r7, #4
 8002e22:	2105      	movs	r1, #5
 8002e24:	4618      	mov	r0, r3
 8002e26:	f002 f9d3 	bl	80051d0 <HAL_RCC_ClockConfig>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bf14      	ite	ne
 8002e30:	2301      	movne	r3, #1
 8002e32:	2300      	moveq	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8002e3a:	f000 f86b 	bl	8002f14 <Error_Handler>
  }
}
 8002e3e:	bf00      	nop
 8002e40:	3760      	adds	r7, #96	@ 0x60
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002e4c:	4b23      	ldr	r3, [pc, #140]	@ (8002edc <_ZL14MX_FDCAN1_Initv+0x94>)
 8002e4e:	4a24      	ldr	r2, [pc, #144]	@ (8002ee0 <_ZL14MX_FDCAN1_Initv+0x98>)
 8002e50:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002e52:	4b22      	ldr	r3, [pc, #136]	@ (8002edc <_ZL14MX_FDCAN1_Initv+0x94>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002e58:	4b20      	ldr	r3, [pc, #128]	@ (8002edc <_ZL14MX_FDCAN1_Initv+0x94>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_INTERNAL_LOOPBACK;
 8002e5e:	4b1f      	ldr	r3, [pc, #124]	@ (8002edc <_ZL14MX_FDCAN1_Initv+0x94>)
 8002e60:	2203      	movs	r2, #3
 8002e62:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8002e64:	4b1d      	ldr	r3, [pc, #116]	@ (8002edc <_ZL14MX_FDCAN1_Initv+0x94>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002edc <_ZL14MX_FDCAN1_Initv+0x94>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002e70:	4b1a      	ldr	r3, [pc, #104]	@ (8002edc <_ZL14MX_FDCAN1_Initv+0x94>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8002e76:	4b19      	ldr	r3, [pc, #100]	@ (8002edc <_ZL14MX_FDCAN1_Initv+0x94>)
 8002e78:	2204      	movs	r2, #4
 8002e7a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002e7c:	4b17      	ldr	r3, [pc, #92]	@ (8002edc <_ZL14MX_FDCAN1_Initv+0x94>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 8002e82:	4b16      	ldr	r3, [pc, #88]	@ (8002edc <_ZL14MX_FDCAN1_Initv+0x94>)
 8002e84:	2201      	movs	r2, #1
 8002e86:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8002e88:	4b14      	ldr	r3, [pc, #80]	@ (8002edc <_ZL14MX_FDCAN1_Initv+0x94>)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 8002e8e:	4b13      	ldr	r3, [pc, #76]	@ (8002edc <_ZL14MX_FDCAN1_Initv+0x94>)
 8002e90:	2204      	movs	r2, #4
 8002e92:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002e94:	4b11      	ldr	r3, [pc, #68]	@ (8002edc <_ZL14MX_FDCAN1_Initv+0x94>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002e9a:	4b10      	ldr	r3, [pc, #64]	@ (8002edc <_ZL14MX_FDCAN1_Initv+0x94>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8002edc <_ZL14MX_FDCAN1_Initv+0x94>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8002edc <_ZL14MX_FDCAN1_Initv+0x94>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 8002eac:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <_ZL14MX_FDCAN1_Initv+0x94>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002edc <_ZL14MX_FDCAN1_Initv+0x94>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002eb8:	4808      	ldr	r0, [pc, #32]	@ (8002edc <_ZL14MX_FDCAN1_Initv+0x94>)
 8002eba:	f000 fc0f 	bl	80036dc <HAL_FDCAN_Init>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	bf14      	ite	ne
 8002ec4:	2301      	movne	r3, #1
 8002ec6:	2300      	moveq	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 8002ece:	f000 f821 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_Config();
 8002ed2:	f7ff fe5f 	bl	8002b94 <_Z12FDCAN_Configv>

  /* USER CODE END FDCAN1_Init 2 */

}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	2000047c 	.word	0x2000047c
 8002ee0:	4000a400 	.word	0x4000a400

08002ee4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eea:	4b09      	ldr	r3, [pc, #36]	@ (8002f10 <_ZL12MX_GPIO_Initv+0x2c>)
 8002eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eee:	4a08      	ldr	r2, [pc, #32]	@ (8002f10 <_ZL12MX_GPIO_Initv+0x2c>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ef6:	4b06      	ldr	r3, [pc, #24]	@ (8002f10 <_ZL12MX_GPIO_Initv+0x2c>)
 8002ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	607b      	str	r3, [r7, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000

08002f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f18:	b672      	cpsid	i
}
 8002f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f1c:	bf00      	nop
 8002f1e:	e7fd      	b.n	8002f1c <Error_Handler+0x8>

08002f20 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
CAN can(&hfdcan1);
 8002f24:	4902      	ldr	r1, [pc, #8]	@ (8002f30 <_Z41__static_initialization_and_destruction_0v+0x10>)
 8002f26:	4803      	ldr	r0, [pc, #12]	@ (8002f34 <_Z41__static_initialization_and_destruction_0v+0x14>)
 8002f28:	f7fd fbcc 	bl	80006c4 <_ZN3CANC1EP19FDCAN_HandleTypeDef>
}
 8002f2c:	bf00      	nop
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	2000047c 	.word	0x2000047c
 8002f34:	20000538 	.word	0x20000538

08002f38 <_Z41__static_initialization_and_destruction_1v>:
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
CAN can(&hfdcan1);
 8002f3c:	4802      	ldr	r0, [pc, #8]	@ (8002f48 <_Z41__static_initialization_and_destruction_1v+0x10>)
 8002f3e:	f7fd fc03 	bl	8000748 <_ZN3CAND1Ev>
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000538 	.word	0x20000538

08002f4c <_GLOBAL__sub_I_hfdcan1>:
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	f7ff ffe6 	bl	8002f20 <_Z41__static_initialization_and_destruction_0v>
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <_GLOBAL__sub_D_hfdcan1>:
 8002f56:	b580      	push	{r7, lr}
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	f7ff ffed 	bl	8002f38 <_Z41__static_initialization_and_destruction_1v>
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f66:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa4 <HAL_MspInit+0x44>)
 8002f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f6a:	4a0e      	ldr	r2, [pc, #56]	@ (8002fa4 <HAL_MspInit+0x44>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f72:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa4 <HAL_MspInit+0x44>)
 8002f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	607b      	str	r3, [r7, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f7e:	4b09      	ldr	r3, [pc, #36]	@ (8002fa4 <HAL_MspInit+0x44>)
 8002f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f82:	4a08      	ldr	r2, [pc, #32]	@ (8002fa4 <HAL_MspInit+0x44>)
 8002f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f88:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f8a:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <HAL_MspInit+0x44>)
 8002f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f92:	603b      	str	r3, [r7, #0]
 8002f94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002f96:	f001 fc11 	bl	80047bc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40021000 	.word	0x40021000

08002fa8 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b0ae      	sub	sp, #184	@ 0xb8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	60da      	str	r2, [r3, #12]
 8002fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fc0:	f107 0310 	add.w	r3, r7, #16
 8002fc4:	2294      	movs	r2, #148	@ 0x94
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f003 f8fb 	bl	80061c4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a26      	ldr	r2, [pc, #152]	@ (800306c <HAL_FDCAN_MspInit+0xc4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d144      	bne.n	8003062 <HAL_FDCAN_MspInit+0xba>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002fd8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fdc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002fde:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fe2:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fe4:	f107 0310 	add.w	r3, r7, #16
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f002 fbad 	bl	8005748 <HAL_RCCEx_PeriphCLKConfig>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002ff4:	f7ff ff8e 	bl	8002f14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN1_CLK_ENABLE();
 8002ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8003070 <HAL_FDCAN_MspInit+0xc8>)
 8002ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8003070 <HAL_FDCAN_MspInit+0xc8>)
 8002ffe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003002:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003004:	4b1a      	ldr	r3, [pc, #104]	@ (8003070 <HAL_FDCAN_MspInit+0xc8>)
 8003006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003008:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003010:	4b17      	ldr	r3, [pc, #92]	@ (8003070 <HAL_FDCAN_MspInit+0xc8>)
 8003012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003014:	4a16      	ldr	r2, [pc, #88]	@ (8003070 <HAL_FDCAN_MspInit+0xc8>)
 8003016:	f043 0308 	orr.w	r3, r3, #8
 800301a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800301c:	4b14      	ldr	r3, [pc, #80]	@ (8003070 <HAL_FDCAN_MspInit+0xc8>)
 800301e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003028:	2303      	movs	r3, #3
 800302a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302e:	2302      	movs	r3, #2
 8003030:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003034:	2300      	movs	r3, #0
 8003036:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303a:	2300      	movs	r3, #0
 800303c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003040:	2309      	movs	r3, #9
 8003042:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003046:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800304a:	4619      	mov	r1, r3
 800304c:	4809      	ldr	r0, [pc, #36]	@ (8003074 <HAL_FDCAN_MspInit+0xcc>)
 800304e:	f001 f9cb 	bl	80043e8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003052:	2200      	movs	r2, #0
 8003054:	2100      	movs	r1, #0
 8003056:	2027      	movs	r0, #39	@ 0x27
 8003058:	f000 fac3 	bl	80035e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800305c:	2027      	movs	r0, #39	@ 0x27
 800305e:	f000 fada 	bl	8003616 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8003062:	bf00      	nop
 8003064:	37b8      	adds	r7, #184	@ 0xb8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	4000a400 	.word	0x4000a400
 8003070:	40021000 	.word	0x40021000
 8003074:	42020c00 	.word	0x42020c00

08003078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800307c:	bf00      	nop
 800307e:	e7fd      	b.n	800307c <NMI_Handler+0x4>

08003080 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003084:	bf00      	nop
 8003086:	e7fd      	b.n	8003084 <HardFault_Handler+0x4>

08003088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800308c:	bf00      	nop
 800308e:	e7fd      	b.n	800308c <MemManage_Handler+0x4>

08003090 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003094:	bf00      	nop
 8003096:	e7fd      	b.n	8003094 <BusFault_Handler+0x4>

08003098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800309c:	bf00      	nop
 800309e:	e7fd      	b.n	800309c <UsageFault_Handler+0x4>

080030a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030ce:	f000 f969 	bl	80033a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80030da:	2000      	movs	r0, #0
 80030dc:	f000 f8f6 	bl	80032cc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80030e0:	bf00      	nop
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80030e8:	4802      	ldr	r0, [pc, #8]	@ (80030f4 <FDCAN1_IT0_IRQHandler+0x10>)
 80030ea:	f000 ff0f 	bl	8003f0c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	2000047c 	.word	0x2000047c

080030f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80030fc:	4b06      	ldr	r3, [pc, #24]	@ (8003118 <SystemInit+0x20>)
 80030fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003102:	4a05      	ldr	r2, [pc, #20]	@ (8003118 <SystemInit+0x20>)
 8003104:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003108:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800310c:	bf00      	nop
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	e000ed00 	.word	0xe000ed00

0800311c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8003122:	4b4f      	ldr	r3, [pc, #316]	@ (8003260 <SystemCoreClockUpdate+0x144>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d107      	bne.n	800313e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800312e:	4b4c      	ldr	r3, [pc, #304]	@ (8003260 <SystemCoreClockUpdate+0x144>)
 8003130:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003134:	0a1b      	lsrs	r3, r3, #8
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	e005      	b.n	800314a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800313e:	4b48      	ldr	r3, [pc, #288]	@ (8003260 <SystemCoreClockUpdate+0x144>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	091b      	lsrs	r3, r3, #4
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800314a:	4a46      	ldr	r2, [pc, #280]	@ (8003264 <SystemCoreClockUpdate+0x148>)
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003152:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003154:	4b42      	ldr	r3, [pc, #264]	@ (8003260 <SystemCoreClockUpdate+0x144>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 030c 	and.w	r3, r3, #12
 800315c:	2b0c      	cmp	r3, #12
 800315e:	d866      	bhi.n	800322e <SystemCoreClockUpdate+0x112>
 8003160:	a201      	add	r2, pc, #4	@ (adr r2, 8003168 <SystemCoreClockUpdate+0x4c>)
 8003162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003166:	bf00      	nop
 8003168:	0800319d 	.word	0x0800319d
 800316c:	0800322f 	.word	0x0800322f
 8003170:	0800322f 	.word	0x0800322f
 8003174:	0800322f 	.word	0x0800322f
 8003178:	080031a5 	.word	0x080031a5
 800317c:	0800322f 	.word	0x0800322f
 8003180:	0800322f 	.word	0x0800322f
 8003184:	0800322f 	.word	0x0800322f
 8003188:	080031ad 	.word	0x080031ad
 800318c:	0800322f 	.word	0x0800322f
 8003190:	0800322f 	.word	0x0800322f
 8003194:	0800322f 	.word	0x0800322f
 8003198:	080031b5 	.word	0x080031b5
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800319c:	4a32      	ldr	r2, [pc, #200]	@ (8003268 <SystemCoreClockUpdate+0x14c>)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	6013      	str	r3, [r2, #0]
      break;
 80031a2:	e048      	b.n	8003236 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80031a4:	4b30      	ldr	r3, [pc, #192]	@ (8003268 <SystemCoreClockUpdate+0x14c>)
 80031a6:	4a31      	ldr	r2, [pc, #196]	@ (800326c <SystemCoreClockUpdate+0x150>)
 80031a8:	601a      	str	r2, [r3, #0]
      break;
 80031aa:	e044      	b.n	8003236 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80031ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003268 <SystemCoreClockUpdate+0x14c>)
 80031ae:	4a30      	ldr	r2, [pc, #192]	@ (8003270 <SystemCoreClockUpdate+0x154>)
 80031b0:	601a      	str	r2, [r3, #0]
      break;
 80031b2:	e040      	b.n	8003236 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80031b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003260 <SystemCoreClockUpdate+0x144>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f003 0303 	and.w	r3, r3, #3
 80031bc:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80031be:	4b28      	ldr	r3, [pc, #160]	@ (8003260 <SystemCoreClockUpdate+0x144>)
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	091b      	lsrs	r3, r3, #4
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	3301      	adds	r3, #1
 80031ca:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d003      	beq.n	80031da <SystemCoreClockUpdate+0xbe>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	d006      	beq.n	80031e6 <SystemCoreClockUpdate+0xca>
 80031d8:	e00b      	b.n	80031f2 <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80031da:	4a24      	ldr	r2, [pc, #144]	@ (800326c <SystemCoreClockUpdate+0x150>)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e2:	613b      	str	r3, [r7, #16]
          break;
 80031e4:	e00b      	b.n	80031fe <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80031e6:	4a22      	ldr	r2, [pc, #136]	@ (8003270 <SystemCoreClockUpdate+0x154>)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ee:	613b      	str	r3, [r7, #16]
          break;
 80031f0:	e005      	b.n	80031fe <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fa:	613b      	str	r3, [r7, #16]
          break;
 80031fc:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80031fe:	4b18      	ldr	r3, [pc, #96]	@ (8003260 <SystemCoreClockUpdate+0x144>)
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	0a1b      	lsrs	r3, r3, #8
 8003204:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	fb02 f303 	mul.w	r3, r2, r3
 800320e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8003210:	4b13      	ldr	r3, [pc, #76]	@ (8003260 <SystemCoreClockUpdate+0x144>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	0e5b      	lsrs	r3, r3, #25
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	3301      	adds	r3, #1
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	fbb2 f3f3 	udiv	r3, r2, r3
 8003228:	4a0f      	ldr	r2, [pc, #60]	@ (8003268 <SystemCoreClockUpdate+0x14c>)
 800322a:	6013      	str	r3, [r2, #0]
      break;
 800322c:	e003      	b.n	8003236 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800322e:	4a0e      	ldr	r2, [pc, #56]	@ (8003268 <SystemCoreClockUpdate+0x14c>)
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	6013      	str	r3, [r2, #0]
      break;
 8003234:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8003236:	4b0a      	ldr	r3, [pc, #40]	@ (8003260 <SystemCoreClockUpdate+0x144>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	091b      	lsrs	r3, r3, #4
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	4a0c      	ldr	r2, [pc, #48]	@ (8003274 <SystemCoreClockUpdate+0x158>)
 8003242:	5cd3      	ldrb	r3, [r2, r3]
 8003244:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8003246:	4b08      	ldr	r3, [pc, #32]	@ (8003268 <SystemCoreClockUpdate+0x14c>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	fa22 f303 	lsr.w	r3, r2, r3
 8003250:	4a05      	ldr	r2, [pc, #20]	@ (8003268 <SystemCoreClockUpdate+0x14c>)
 8003252:	6013      	str	r3, [r2, #0]
}
 8003254:	bf00      	nop
 8003256:	371c      	adds	r7, #28
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	40021000 	.word	0x40021000
 8003264:	0800632c 	.word	0x0800632c
 8003268:	20000000 	.word	0x20000000
 800326c:	00f42400 	.word	0x00f42400
 8003270:	007a1200 	.word	0x007a1200
 8003274:	0800631c 	.word	0x0800631c

08003278 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003278:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800327c:	f7ff ff3c 	bl	80030f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003280:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003282:	e003      	b.n	800328c <LoopCopyDataInit>

08003284 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003284:	4b0b      	ldr	r3, [pc, #44]	@ (80032b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003286:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003288:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800328a:	3104      	adds	r1, #4

0800328c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800328c:	480a      	ldr	r0, [pc, #40]	@ (80032b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800328e:	4b0b      	ldr	r3, [pc, #44]	@ (80032bc <LoopForever+0xe>)
	adds	r2, r0, r1
 8003290:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003292:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003294:	d3f6      	bcc.n	8003284 <CopyDataInit>
	ldr	r2, =_sbss
 8003296:	4a0a      	ldr	r2, [pc, #40]	@ (80032c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003298:	e002      	b.n	80032a0 <LoopFillZerobss>

0800329a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800329a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800329c:	f842 3b04 	str.w	r3, [r2], #4

080032a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80032a0:	4b08      	ldr	r3, [pc, #32]	@ (80032c4 <LoopForever+0x16>)
	cmp	r2, r3
 80032a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80032a4:	d3f9      	bcc.n	800329a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80032a6:	f002 ff95 	bl	80061d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032aa:	f7ff fd27 	bl	8002cfc <main>

080032ae <LoopForever>:

LoopForever:
    b LoopForever
 80032ae:	e7fe      	b.n	80032ae <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80032b0:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80032b4:	0800638c 	.word	0x0800638c
	ldr	r0, =_sdata
 80032b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80032bc:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 80032c0:	20000060 	.word	0x20000060
	ldr	r3, = _ebss
 80032c4:	200012f0 	.word	0x200012f0

080032c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80032c8:	e7fe      	b.n	80032c8 <ADC1_2_IRQHandler>
	...

080032cc <BSP_PB_IRQHandler>:
  *   This parameter should be:
  *     @arg BUTTON_USER
  * @retval None.
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80032d6:	79fa      	ldrb	r2, [r7, #7]
 80032d8:	4613      	mov	r3, r2
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	4413      	add	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4a04      	ldr	r2, [pc, #16]	@ (80032f4 <BSP_PB_IRQHandler+0x28>)
 80032e2:	4413      	add	r3, r2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 f9b1 	bl	800364c <HAL_EXTI_IRQHandler>
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	200011a0 	.word	0x200011a0

080032f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003302:	2004      	movs	r0, #4
 8003304:	f000 f962 	bl	80035cc <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8003308:	f7ff ff08 	bl	800311c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800330c:	2000      	movs	r0, #0
 800330e:	f000 f80d 	bl	800332c <HAL_InitTick>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	71fb      	strb	r3, [r7, #7]
 800331c:	e001      	b.n	8003322 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800331e:	f7ff fe1f 	bl	8002f60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003322:	79fb      	ldrb	r3, [r7, #7]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003338:	4b17      	ldr	r3, [pc, #92]	@ (8003398 <HAL_InitTick+0x6c>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d023      	beq.n	8003388 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003340:	4b16      	ldr	r3, [pc, #88]	@ (800339c <HAL_InitTick+0x70>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4b14      	ldr	r3, [pc, #80]	@ (8003398 <HAL_InitTick+0x6c>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	4619      	mov	r1, r3
 800334a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800334e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003352:	fbb2 f3f3 	udiv	r3, r2, r3
 8003356:	4618      	mov	r0, r3
 8003358:	f000 f96b 	bl	8003632 <HAL_SYSTICK_Config>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10f      	bne.n	8003382 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b07      	cmp	r3, #7
 8003366:	d809      	bhi.n	800337c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003368:	2200      	movs	r2, #0
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	f04f 30ff 	mov.w	r0, #4294967295
 8003370:	f000 f937 	bl	80035e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003374:	4a0a      	ldr	r2, [pc, #40]	@ (80033a0 <HAL_InitTick+0x74>)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e007      	b.n	800338c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
 8003380:	e004      	b.n	800338c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	73fb      	strb	r3, [r7, #15]
 8003386:	e001      	b.n	800338c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800338c:	7bfb      	ldrb	r3, [r7, #15]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000008 	.word	0x20000008
 800339c:	20000000 	.word	0x20000000
 80033a0:	20000004 	.word	0x20000004

080033a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033a8:	4b06      	ldr	r3, [pc, #24]	@ (80033c4 <HAL_IncTick+0x20>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	461a      	mov	r2, r3
 80033ae:	4b06      	ldr	r3, [pc, #24]	@ (80033c8 <HAL_IncTick+0x24>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4413      	add	r3, r2
 80033b4:	4a04      	ldr	r2, [pc, #16]	@ (80033c8 <HAL_IncTick+0x24>)
 80033b6:	6013      	str	r3, [r2, #0]
}
 80033b8:	bf00      	nop
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20000008 	.word	0x20000008
 80033c8:	200011ac 	.word	0x200011ac

080033cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return uwTick;
 80033d0:	4b03      	ldr	r3, [pc, #12]	@ (80033e0 <HAL_GetTick+0x14>)
 80033d2:	681b      	ldr	r3, [r3, #0]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	200011ac 	.word	0x200011ac

080033e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033ec:	f7ff ffee 	bl	80033cc <HAL_GetTick>
 80033f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fc:	d005      	beq.n	800340a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80033fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003428 <HAL_Delay+0x44>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	461a      	mov	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4413      	add	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800340a:	bf00      	nop
 800340c:	f7ff ffde 	bl	80033cc <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	429a      	cmp	r2, r3
 800341a:	d8f7      	bhi.n	800340c <HAL_Delay+0x28>
  {
  }
}
 800341c:	bf00      	nop
 800341e:	bf00      	nop
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20000008 	.word	0x20000008

0800342c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800343c:	4b0c      	ldr	r3, [pc, #48]	@ (8003470 <__NVIC_SetPriorityGrouping+0x44>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003448:	4013      	ands	r3, r2
 800344a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003454:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800345c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800345e:	4a04      	ldr	r2, [pc, #16]	@ (8003470 <__NVIC_SetPriorityGrouping+0x44>)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	60d3      	str	r3, [r2, #12]
}
 8003464:	bf00      	nop
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e000ed00 	.word	0xe000ed00

08003474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003478:	4b04      	ldr	r3, [pc, #16]	@ (800348c <__NVIC_GetPriorityGrouping+0x18>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	0a1b      	lsrs	r3, r3, #8
 800347e:	f003 0307 	and.w	r3, r3, #7
}
 8003482:	4618      	mov	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	e000ed00 	.word	0xe000ed00

08003490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800349a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	db0b      	blt.n	80034ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	f003 021f 	and.w	r2, r3, #31
 80034a8:	4907      	ldr	r1, [pc, #28]	@ (80034c8 <__NVIC_EnableIRQ+0x38>)
 80034aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	2001      	movs	r0, #1
 80034b2:	fa00 f202 	lsl.w	r2, r0, r2
 80034b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	e000e100 	.word	0xe000e100

080034cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	6039      	str	r1, [r7, #0]
 80034d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	db0a      	blt.n	80034f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	490c      	ldr	r1, [pc, #48]	@ (8003518 <__NVIC_SetPriority+0x4c>)
 80034e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ea:	0152      	lsls	r2, r2, #5
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	440b      	add	r3, r1
 80034f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034f4:	e00a      	b.n	800350c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	4908      	ldr	r1, [pc, #32]	@ (800351c <__NVIC_SetPriority+0x50>)
 80034fc:	79fb      	ldrb	r3, [r7, #7]
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	3b04      	subs	r3, #4
 8003504:	0152      	lsls	r2, r2, #5
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	440b      	add	r3, r1
 800350a:	761a      	strb	r2, [r3, #24]
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	e000e100 	.word	0xe000e100
 800351c:	e000ed00 	.word	0xe000ed00

08003520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003520:	b480      	push	{r7}
 8003522:	b089      	sub	sp, #36	@ 0x24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f1c3 0307 	rsb	r3, r3, #7
 800353a:	2b03      	cmp	r3, #3
 800353c:	bf28      	it	cs
 800353e:	2303      	movcs	r3, #3
 8003540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	3303      	adds	r3, #3
 8003546:	2b06      	cmp	r3, #6
 8003548:	d902      	bls.n	8003550 <NVIC_EncodePriority+0x30>
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	3b04      	subs	r3, #4
 800354e:	e000      	b.n	8003552 <NVIC_EncodePriority+0x32>
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003554:	f04f 32ff 	mov.w	r2, #4294967295
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43da      	mvns	r2, r3
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	401a      	ands	r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003568:	f04f 31ff 	mov.w	r1, #4294967295
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	fa01 f303 	lsl.w	r3, r1, r3
 8003572:	43d9      	mvns	r1, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003578:	4313      	orrs	r3, r2
         );
}
 800357a:	4618      	mov	r0, r3
 800357c:	3724      	adds	r7, #36	@ 0x24
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
	...

08003588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3b01      	subs	r3, #1
 8003594:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003598:	d301      	bcc.n	800359e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800359a:	2301      	movs	r3, #1
 800359c:	e00f      	b.n	80035be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800359e:	4a0a      	ldr	r2, [pc, #40]	@ (80035c8 <SysTick_Config+0x40>)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035a6:	2107      	movs	r1, #7
 80035a8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ac:	f7ff ff8e 	bl	80034cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035b0:	4b05      	ldr	r3, [pc, #20]	@ (80035c8 <SysTick_Config+0x40>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035b6:	4b04      	ldr	r3, [pc, #16]	@ (80035c8 <SysTick_Config+0x40>)
 80035b8:	2207      	movs	r2, #7
 80035ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	e000e010 	.word	0xe000e010

080035cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff ff29 	bl	800342c <__NVIC_SetPriorityGrouping>
}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b086      	sub	sp, #24
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	4603      	mov	r3, r0
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	607a      	str	r2, [r7, #4]
 80035ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035f0:	f7ff ff40 	bl	8003474 <__NVIC_GetPriorityGrouping>
 80035f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	6978      	ldr	r0, [r7, #20]
 80035fc:	f7ff ff90 	bl	8003520 <NVIC_EncodePriority>
 8003600:	4602      	mov	r2, r0
 8003602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003606:	4611      	mov	r1, r2
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff ff5f 	bl	80034cc <__NVIC_SetPriority>
}
 800360e:	bf00      	nop
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	af00      	add	r7, sp, #0
 800361c:	4603      	mov	r3, r0
 800361e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff ff33 	bl	8003490 <__NVIC_EnableIRQ>
}
 800362a:	bf00      	nop
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b082      	sub	sp, #8
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff ffa4 	bl	8003588 <SysTick_Config>
 8003640:	4603      	mov	r3, r0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	0c1b      	lsrs	r3, r3, #16
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 031f 	and.w	r3, r3, #31
 8003668:	2201      	movs	r2, #1
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	4b17      	ldr	r3, [pc, #92]	@ (80036d4 <HAL_EXTI_IRQHandler+0x88>)
 8003676:	4413      	add	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4013      	ands	r3, r2
 8003682:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d009      	beq.n	800369e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->RisingCallback != NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	4b0d      	ldr	r3, [pc, #52]	@ (80036d8 <HAL_EXTI_IRQHandler+0x8c>)
 80036a4:	4413      	add	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4013      	ands	r3, r2
 80036b0:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d009      	beq.n	80036cc <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->FallingCallback != NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d002      	beq.n	80036cc <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	4798      	blx	r3
    }
  }
}
 80036cc:	bf00      	nop
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	4002f40c 	.word	0x4002f40c
 80036d8:	4002f410 	.word	0x4002f410

080036dc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e142      	b.n	8003974 <HAL_FDCAN_Init+0x298>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff fc50 	bl	8002fa8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0210 	bic.w	r2, r2, #16
 8003716:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003718:	f7ff fe58 	bl	80033cc <HAL_GetTick>
 800371c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800371e:	e012      	b.n	8003746 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003720:	f7ff fe54 	bl	80033cc <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b0a      	cmp	r3, #10
 800372c:	d90b      	bls.n	8003746 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003732:	f043 0201 	orr.w	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2203      	movs	r2, #3
 800373e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e116      	b.n	8003974 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b08      	cmp	r3, #8
 8003752:	d0e5      	beq.n	8003720 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699a      	ldr	r2, [r3, #24]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003764:	f7ff fe32 	bl	80033cc <HAL_GetTick>
 8003768:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800376a:	e012      	b.n	8003792 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800376c:	f7ff fe2e 	bl	80033cc <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b0a      	cmp	r3, #10
 8003778:	d90b      	bls.n	8003792 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800377e:	f043 0201 	orr.w	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2203      	movs	r2, #3
 800378a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e0f0      	b.n	8003974 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0e5      	beq.n	800376c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699a      	ldr	r2, [r3, #24]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0202 	orr.w	r2, r2, #2
 80037ae:	619a      	str	r2, [r3, #24]

  /* Configure Clock divider */
  FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80037b0:	4a72      	ldr	r2, [pc, #456]	@ (800397c <HAL_FDCAN_Init+0x2a0>)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	6013      	str	r3, [r2, #0]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	7c1b      	ldrb	r3, [r3, #16]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d108      	bne.n	80037d2 <HAL_FDCAN_Init+0xf6>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037ce:	619a      	str	r2, [r3, #24]
 80037d0:	e007      	b.n	80037e2 <HAL_FDCAN_Init+0x106>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	699a      	ldr	r2, [r3, #24]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037e0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	7c5b      	ldrb	r3, [r3, #17]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d108      	bne.n	80037fc <HAL_FDCAN_Init+0x120>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	699a      	ldr	r2, [r3, #24]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037f8:	619a      	str	r2, [r3, #24]
 80037fa:	e007      	b.n	800380c <HAL_FDCAN_Init+0x130>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699a      	ldr	r2, [r3, #24]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800380a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	7c9b      	ldrb	r3, [r3, #18]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d108      	bne.n	8003826 <HAL_FDCAN_Init+0x14a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003822:	619a      	str	r2, [r3, #24]
 8003824:	e007      	b.n	8003836 <HAL_FDCAN_Init+0x15a>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	699a      	ldr	r2, [r3, #24]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003834:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800385a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0210 	bic.w	r2, r2, #16
 800386a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d108      	bne.n	8003886 <HAL_FDCAN_Init+0x1aa>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699a      	ldr	r2, [r3, #24]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0204 	orr.w	r2, r2, #4
 8003882:	619a      	str	r2, [r3, #24]
 8003884:	e02c      	b.n	80038e0 <HAL_FDCAN_Init+0x204>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d028      	beq.n	80038e0 <HAL_FDCAN_Init+0x204>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d01c      	beq.n	80038d0 <HAL_FDCAN_Init+0x1f4>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699a      	ldr	r2, [r3, #24]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80038a4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 0210 	orr.w	r2, r2, #16
 80038b4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	2b03      	cmp	r3, #3
 80038bc:	d110      	bne.n	80038e0 <HAL_FDCAN_Init+0x204>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699a      	ldr	r2, [r3, #24]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0220 	orr.w	r2, r2, #32
 80038cc:	619a      	str	r2, [r3, #24]
 80038ce:	e007      	b.n	80038e0 <HAL_FDCAN_Init+0x204>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699a      	ldr	r2, [r3, #24]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0220 	orr.w	r2, r2, #32
 80038de:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80038f0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80038f8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	3b01      	subs	r3, #1
 8003902:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003908:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800390a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003914:	d115      	bne.n	8003942 <HAL_FDCAN_Init+0x266>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003920:	3b01      	subs	r3, #1
 8003922:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003924:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392a:	3b01      	subs	r3, #1
 800392c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800392e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003936:	3b01      	subs	r3, #1
 8003938:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800393e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003940:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fc73 	bl	8004244 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	4000a500 	.word	0x4000a500

08003980 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003990:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003992:	7dfb      	ldrb	r3, [r7, #23]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d002      	beq.n	800399e <HAL_FDCAN_ConfigFilter+0x1e>
 8003998:	7dfb      	ldrb	r3, [r7, #23]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d13d      	bne.n	8003a1a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d119      	bne.n	80039da <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80039b2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80039ba:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	e01d      	b.n	8003a16 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	075a      	lsls	r2, r3, #29
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	079a      	lsls	r2, r3, #30
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e006      	b.n	8003a28 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a1e:	f043 0202 	orr.w	r2, r3, #2
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
  }
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	371c      	adds	r7, #28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d110      	bne.n	8003a6a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0201 	bic.w	r2, r2, #1
 8003a5e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	e006      	b.n	8003a78 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a6e:	f043 0204 	orr.w	r2, r3, #4
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
  }
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d12c      	bne.n	8003af6 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003aa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d007      	beq.n	8003abc <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e023      	b.n	8003b04 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003ac4:	0c1b      	lsrs	r3, r3, #16
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	68b9      	ldr	r1, [r7, #8]
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fc0c 	bl	80042f0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2101      	movs	r1, #1
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003ae8:	2201      	movs	r2, #1
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	409a      	lsls	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	e006      	b.n	8003b04 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003afa:	f043 0208 	orr.w	r2, r3, #8
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
  }
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b08b      	sub	sp, #44	@ 0x2c
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b24:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003b26:	7efb      	ldrb	r3, [r7, #27]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	f040 80e8 	bne.w	8003cfe <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2b40      	cmp	r3, #64	@ 0x40
 8003b32:	d137      	bne.n	8003ba4 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b3c:	f003 030f 	and.w	r3, r3, #15
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d107      	bne.n	8003b54 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b48:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0db      	b.n	8003d0c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b64:	d10a      	bne.n	8003b7c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b76:	d101      	bne.n	8003b7c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b84:	0a1b      	lsrs	r3, r3, #8
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	69fa      	ldr	r2, [r7, #28]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003b94:	69fa      	ldr	r2, [r7, #28]
 8003b96:	4613      	mov	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	440b      	add	r3, r1
 8003ba0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ba2:	e036      	b.n	8003c12 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bac:	f003 030f 	and.w	r3, r3, #15
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d107      	bne.n	8003bc4 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bb8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0a3      	b.n	8003d0c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bd4:	d10a      	bne.n	8003bec <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003be6:	d101      	bne.n	8003bec <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003be8:	2301      	movs	r3, #1
 8003bea:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bf4:	0a1b      	lsrs	r3, r3, #8
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	69fa      	ldr	r2, [r7, #28]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003c04:	69fa      	ldr	r2, [r7, #28]
 8003c06:	4613      	mov	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	440b      	add	r3, r1
 8003c10:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d107      	bne.n	8003c36 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	0c9b      	lsrs	r3, r3, #18
 8003c2c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	e005      	b.n	8003c42 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	0c1b      	lsrs	r3, r3, #16
 8003c70:	f003 020f 	and.w	r2, r3, #15
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	0e1b      	lsrs	r3, r3, #24
 8003c96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	0fda      	lsrs	r2, r3, #31
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003caa:	3304      	adds	r3, #4
 8003cac:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	623b      	str	r3, [r7, #32]
 8003cb6:	e00a      	b.n	8003cce <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	441a      	add	r2, r3
 8003cbe:	6839      	ldr	r1, [r7, #0]
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	440b      	add	r3, r1
 8003cc4:	7812      	ldrb	r2, [r2, #0]
 8003cc6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	623b      	str	r3, [r7, #32]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	4a11      	ldr	r2, [pc, #68]	@ (8003d18 <HAL_FDCAN_GetRxMessage+0x20c>)
 8003cd4:	5cd3      	ldrb	r3, [r2, r3]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d3ec      	bcc.n	8003cb8 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b40      	cmp	r3, #64	@ 0x40
 8003ce2:	d105      	bne.n	8003cf0 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69fa      	ldr	r2, [r7, #28]
 8003cea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8003cee:	e004      	b.n	8003cfa <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	69fa      	ldr	r2, [r7, #28]
 8003cf6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	e006      	b.n	8003d0c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d02:	f043 0208 	orr.w	r2, r3, #8
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
  }
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	372c      	adds	r7, #44	@ 0x2c
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	0800636c 	.word	0x0800636c

08003d1c <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8003d32:	68fb      	ldr	r3, [r7, #12]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d52:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003d54:	7dfb      	ldrb	r3, [r7, #23]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d003      	beq.n	8003d62 <HAL_FDCAN_ActivateNotification+0x22>
 8003d5a:	7dfb      	ldrb	r3, [r7, #23]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	f040 80c8 	bne.w	8003ef2 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d68:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d004      	beq.n	8003d7e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d03b      	beq.n	8003df6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d004      	beq.n	8003d92 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d031      	beq.n	8003df6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d004      	beq.n	8003da6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d027      	beq.n	8003df6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d004      	beq.n	8003dba <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d01d      	beq.n	8003df6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d004      	beq.n	8003dce <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d013      	beq.n	8003df6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d004      	beq.n	8003de2 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f003 0320 	and.w	r3, r3, #32
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d009      	beq.n	8003df6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00c      	beq.n	8003e06 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d107      	bne.n	8003e06 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f042 0201 	orr.w	r2, r2, #1
 8003e04:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d004      	beq.n	8003e1a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d13b      	bne.n	8003e92 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d004      	beq.n	8003e2e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d131      	bne.n	8003e92 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d004      	beq.n	8003e42 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d127      	bne.n	8003e92 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d004      	beq.n	8003e56 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d11d      	bne.n	8003e92 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d004      	beq.n	8003e6a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d113      	bne.n	8003e92 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d004      	beq.n	8003e7e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d109      	bne.n	8003e92 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00c      	beq.n	8003ea2 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d007      	beq.n	8003ea2 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f042 0202 	orr.w	r2, r2, #2
 8003ea0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d009      	beq.n	8003ec0 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d009      	beq.n	8003ede <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e006      	b.n	8003f00 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ef6:	f043 0202 	orr.w	r2, r3, #2
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
  }
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	371c      	adds	r7, #28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08c      	sub	sp, #48	@ 0x30
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f1a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8003f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f28:	4013      	ands	r3, r2
 8003f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f40:	4013      	ands	r3, r2
 8003f42:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f58:	4013      	ands	r3, r2
 8003f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f62:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8003f66:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f6e:	6a3a      	ldr	r2, [r7, #32]
 8003f70:	4013      	ands	r3, r2
 8003f72:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f7a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003f7e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f86:	69fa      	ldr	r2, [r7, #28]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f92:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f9a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	099b      	lsrs	r3, r3, #6
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00c      	beq.n	8003fc2 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	099b      	lsrs	r3, r3, #6
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d006      	beq.n	8003fc2 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2240      	movs	r2, #64	@ 0x40
 8003fba:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f922 	bl	8004206 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	0a1b      	lsrs	r3, r3, #8
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d01a      	beq.n	8004004 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	0a1b      	lsrs	r3, r3, #8
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d014      	beq.n	8004004 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003fe2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ffa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003ffc:	6939      	ldr	r1, [r7, #16]
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f8e2 	bl	80041c8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004006:	2b00      	cmp	r3, #0
 8004008:	d007      	beq.n	800401a <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004010:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004012:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f8ac 	bl	8004172 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800401a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401c:	2b00      	cmp	r3, #0
 800401e:	d007      	beq.n	8004030 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004026:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004028:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fe fdf2 	bl	8002c14 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004032:	2b00      	cmp	r3, #0
 8004034:	d007      	beq.n	8004046 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800403c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800403e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f8a1 	bl	8004188 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	0a5b      	lsrs	r3, r3, #9
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00d      	beq.n	800406e <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	0a5b      	lsrs	r3, r3, #9
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d007      	beq.n	800406e <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004066:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f898 	bl	800419e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	09db      	lsrs	r3, r3, #7
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d019      	beq.n	80040ae <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	09db      	lsrs	r3, r3, #7
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d013      	beq.n	80040ae <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800408e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4013      	ands	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2280      	movs	r2, #128	@ 0x80
 80040a4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80040a6:	68f9      	ldr	r1, [r7, #12]
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f882 	bl	80041b2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	0b5b      	lsrs	r3, r3, #13
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00d      	beq.n	80040d6 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	0b5b      	lsrs	r3, r3, #13
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d007      	beq.n	80040d6 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80040ce:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f884 	bl	80041de <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	0bdb      	lsrs	r3, r3, #15
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00d      	beq.n	80040fe <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	0bdb      	lsrs	r3, r3, #15
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d007      	beq.n	80040fe <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80040f6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f87a 	bl	80041f2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	0b9b      	lsrs	r3, r3, #14
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d010      	beq.n	800412c <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	0b9b      	lsrs	r3, r3, #14
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800411e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004124:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d007      	beq.n	8004142 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800413a:	69f9      	ldr	r1, [r7, #28]
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f876 	bl	800422e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d009      	beq.n	800415c <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6a3a      	ldr	r2, [r7, #32]
 800414e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f858 	bl	800421a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800416a:	bf00      	nop
 800416c:	3730      	adds	r7, #48	@ 0x30
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800424c:	4b27      	ldr	r3, [pc, #156]	@ (80042ec <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800424e:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800425e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004266:	041a      	lsls	r2, r3, #16
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004284:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428c:	061a      	lsls	r2, r3, #24
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	e005      	b.n	80042d2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	3304      	adds	r3, #4
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d3f3      	bcc.n	80042c6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80042de:	bf00      	nop
 80042e0:	bf00      	nop
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	4000ac00 	.word	0x4000ac00

080042f0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b089      	sub	sp, #36	@ 0x24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800430e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004316:	4313      	orrs	r3, r2
 8004318:	61fb      	str	r3, [r7, #28]
 800431a:	e00a      	b.n	8004332 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004324:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800432a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800432c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004330:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800433c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004342:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004348:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	4613      	mov	r3, r2
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	4413      	add	r3, r2
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	440b      	add	r3, r1
 8004364:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	3304      	adds	r3, #4
 8004370:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	3304      	adds	r3, #4
 800437c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800437e:	2300      	movs	r3, #0
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	e020      	b.n	80043c6 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	3303      	adds	r3, #3
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	4413      	add	r3, r2
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	3302      	adds	r3, #2
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	440b      	add	r3, r1
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800439c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	3301      	adds	r3, #1
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	440b      	add	r3, r1
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80043aa:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	440a      	add	r2, r1
 80043b2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80043b4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	3304      	adds	r3, #4
 80043be:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	3304      	adds	r3, #4
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	4a06      	ldr	r2, [pc, #24]	@ (80043e4 <FDCAN_CopyMessageToRAM+0xf4>)
 80043cc:	5cd3      	ldrb	r3, [r2, r3]
 80043ce:	461a      	mov	r2, r3
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d3d6      	bcc.n	8004384 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80043d6:	bf00      	nop
 80043d8:	bf00      	nop
 80043da:	3724      	adds	r7, #36	@ 0x24
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	0800636c 	.word	0x0800636c

080043e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80043f6:	e158      	b.n	80046aa <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	2101      	movs	r1, #1
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	fa01 f303 	lsl.w	r3, r1, r3
 8004404:	4013      	ands	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 814a 	beq.w	80046a4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f003 0303 	and.w	r3, r3, #3
 8004418:	2b01      	cmp	r3, #1
 800441a:	d005      	beq.n	8004428 <HAL_GPIO_Init+0x40>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f003 0303 	and.w	r3, r3, #3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d130      	bne.n	800448a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	2203      	movs	r2, #3
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	43db      	mvns	r3, r3
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4013      	ands	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800445e:	2201      	movs	r2, #1
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	43db      	mvns	r3, r3
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4013      	ands	r3, r2
 800446c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	091b      	lsrs	r3, r3, #4
 8004474:	f003 0201 	and.w	r2, r3, #1
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b03      	cmp	r3, #3
 8004494:	d017      	beq.n	80044c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	2203      	movs	r2, #3
 80044a2:	fa02 f303 	lsl.w	r3, r2, r3
 80044a6:	43db      	mvns	r3, r3
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4013      	ands	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	4313      	orrs	r3, r2
 80044be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d123      	bne.n	800451a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	08da      	lsrs	r2, r3, #3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	3208      	adds	r2, #8
 80044da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	220f      	movs	r2, #15
 80044ea:	fa02 f303 	lsl.w	r3, r2, r3
 80044ee:	43db      	mvns	r3, r3
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4013      	ands	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	08da      	lsrs	r2, r3, #3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3208      	adds	r2, #8
 8004514:	6939      	ldr	r1, [r7, #16]
 8004516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	2203      	movs	r2, #3
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	43db      	mvns	r3, r3
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4013      	ands	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f003 0203 	and.w	r2, r3, #3
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 80a4 	beq.w	80046a4 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 800455c:	4a5a      	ldr	r2, [pc, #360]	@ (80046c8 <HAL_GPIO_Init+0x2e0>)
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	089b      	lsrs	r3, r3, #2
 8004562:	3318      	adds	r3, #24
 8004564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004568:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f003 0303 	and.w	r3, r3, #3
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	220f      	movs	r2, #15
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	43db      	mvns	r3, r3
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4013      	ands	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a52      	ldr	r2, [pc, #328]	@ (80046cc <HAL_GPIO_Init+0x2e4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d025      	beq.n	80045d4 <HAL_GPIO_Init+0x1ec>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a51      	ldr	r2, [pc, #324]	@ (80046d0 <HAL_GPIO_Init+0x2e8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d01f      	beq.n	80045d0 <HAL_GPIO_Init+0x1e8>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a50      	ldr	r2, [pc, #320]	@ (80046d4 <HAL_GPIO_Init+0x2ec>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d019      	beq.n	80045cc <HAL_GPIO_Init+0x1e4>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a4f      	ldr	r2, [pc, #316]	@ (80046d8 <HAL_GPIO_Init+0x2f0>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d013      	beq.n	80045c8 <HAL_GPIO_Init+0x1e0>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a4e      	ldr	r2, [pc, #312]	@ (80046dc <HAL_GPIO_Init+0x2f4>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d00d      	beq.n	80045c4 <HAL_GPIO_Init+0x1dc>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a4d      	ldr	r2, [pc, #308]	@ (80046e0 <HAL_GPIO_Init+0x2f8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d007      	beq.n	80045c0 <HAL_GPIO_Init+0x1d8>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a4c      	ldr	r2, [pc, #304]	@ (80046e4 <HAL_GPIO_Init+0x2fc>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d101      	bne.n	80045bc <HAL_GPIO_Init+0x1d4>
 80045b8:	2306      	movs	r3, #6
 80045ba:	e00c      	b.n	80045d6 <HAL_GPIO_Init+0x1ee>
 80045bc:	2307      	movs	r3, #7
 80045be:	e00a      	b.n	80045d6 <HAL_GPIO_Init+0x1ee>
 80045c0:	2305      	movs	r3, #5
 80045c2:	e008      	b.n	80045d6 <HAL_GPIO_Init+0x1ee>
 80045c4:	2304      	movs	r3, #4
 80045c6:	e006      	b.n	80045d6 <HAL_GPIO_Init+0x1ee>
 80045c8:	2303      	movs	r3, #3
 80045ca:	e004      	b.n	80045d6 <HAL_GPIO_Init+0x1ee>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e002      	b.n	80045d6 <HAL_GPIO_Init+0x1ee>
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <HAL_GPIO_Init+0x1ee>
 80045d4:	2300      	movs	r3, #0
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	f002 0203 	and.w	r2, r2, #3
 80045dc:	00d2      	lsls	r2, r2, #3
 80045de:	4093      	lsls	r3, r2
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80045e6:	4938      	ldr	r1, [pc, #224]	@ (80046c8 <HAL_GPIO_Init+0x2e0>)
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	089b      	lsrs	r3, r3, #2
 80045ec:	3318      	adds	r3, #24
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045f4:	4b34      	ldr	r3, [pc, #208]	@ (80046c8 <HAL_GPIO_Init+0x2e0>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	43db      	mvns	r3, r3
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4013      	ands	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4313      	orrs	r3, r2
 8004616:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004618:	4a2b      	ldr	r2, [pc, #172]	@ (80046c8 <HAL_GPIO_Init+0x2e0>)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800461e:	4b2a      	ldr	r3, [pc, #168]	@ (80046c8 <HAL_GPIO_Init+0x2e0>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	43db      	mvns	r3, r3
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4013      	ands	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4313      	orrs	r3, r2
 8004640:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004642:	4a21      	ldr	r2, [pc, #132]	@ (80046c8 <HAL_GPIO_Init+0x2e0>)
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004648:	4b1f      	ldr	r3, [pc, #124]	@ (80046c8 <HAL_GPIO_Init+0x2e0>)
 800464a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800464e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	43db      	mvns	r3, r3
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4013      	ands	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800466e:	4a16      	ldr	r2, [pc, #88]	@ (80046c8 <HAL_GPIO_Init+0x2e0>)
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8004676:	4b14      	ldr	r3, [pc, #80]	@ (80046c8 <HAL_GPIO_Init+0x2e0>)
 8004678:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800467c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	43db      	mvns	r3, r3
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4013      	ands	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800469c:	4a0a      	ldr	r2, [pc, #40]	@ (80046c8 <HAL_GPIO_Init+0x2e0>)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	3301      	adds	r3, #1
 80046a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	fa22 f303 	lsr.w	r3, r2, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f47f ae9f 	bne.w	80043f8 <HAL_GPIO_Init+0x10>
  }
}
 80046ba:	bf00      	nop
 80046bc:	bf00      	nop
 80046be:	371c      	adds	r7, #28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	4002f400 	.word	0x4002f400
 80046cc:	42020000 	.word	0x42020000
 80046d0:	42020400 	.word	0x42020400
 80046d4:	42020800 	.word	0x42020800
 80046d8:	42020c00 	.word	0x42020c00
 80046dc:	42021000 	.word	0x42021000
 80046e0:	42021400 	.word	0x42021400
 80046e4:	42021800 	.word	0x42021800

080046e8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80046ec:	4b04      	ldr	r3, [pc, #16]	@ (8004700 <HAL_PWREx_GetVoltageRange+0x18>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40007000 	.word	0x40007000

08004704 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 800470c:	4b27      	ldr	r3, [pc, #156]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004714:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8004716:	f000 f861 	bl	80047dc <HAL_PWREx_SMPS_GetEffectiveMode>
 800471a:	4603      	mov	r3, r0
 800471c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004720:	d101      	bne.n	8004726 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e03e      	b.n	80047a4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8004726:	4b21      	ldr	r3, [pc, #132]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800472e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004732:	d101      	bne.n	8004738 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e035      	b.n	80047a4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	429a      	cmp	r2, r3
 800473e:	d101      	bne.n	8004744 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8004740:	2300      	movs	r3, #0
 8004742:	e02f      	b.n	80047a4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004744:	4b19      	ldr	r3, [pc, #100]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800474c:	4917      	ldr	r1, [pc, #92]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4313      	orrs	r3, r2
 8004752:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8004754:	4b16      	ldr	r3, [pc, #88]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	095b      	lsrs	r3, r3, #5
 800475a:	4a16      	ldr	r2, [pc, #88]	@ (80047b4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800475c:	fba2 2303 	umull	r2, r3, r2, r3
 8004760:	09db      	lsrs	r3, r3, #7
 8004762:	2232      	movs	r2, #50	@ 0x32
 8004764:	fb02 f303 	mul.w	r3, r2, r3
 8004768:	4a13      	ldr	r2, [pc, #76]	@ (80047b8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800476a:	fba2 2303 	umull	r2, r3, r2, r3
 800476e:	08db      	lsrs	r3, r3, #3
 8004770:	3301      	adds	r3, #1
 8004772:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004774:	e002      	b.n	800477c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3b01      	subs	r3, #1
 800477a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800477c:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004788:	d102      	bne.n	8004790 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1f2      	bne.n	8004776 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004790:	4b06      	ldr	r3, [pc, #24]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004798:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800479c:	d101      	bne.n	80047a2 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e000      	b.n	80047a4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40007000 	.word	0x40007000
 80047b0:	20000000 	.word	0x20000000
 80047b4:	0a7c5ac5 	.word	0x0a7c5ac5
 80047b8:	cccccccd 	.word	0xcccccccd

080047bc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80047c0:	4b05      	ldr	r3, [pc, #20]	@ (80047d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	4a04      	ldr	r2, [pc, #16]	@ (80047d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047ca:	6093      	str	r3, [r2, #8]
}
 80047cc:	bf00      	nop
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	40007000 	.word	0x40007000

080047dc <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80047e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004820 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80047f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80047f6:	607b      	str	r3, [r7, #4]
 80047f8:	e00a      	b.n	8004810 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d103      	bne.n	800480c <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8004804:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004808:	607b      	str	r3, [r7, #4]
 800480a:	e001      	b.n	8004810 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 800480c:	2300      	movs	r3, #0
 800480e:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8004810:	687b      	ldr	r3, [r7, #4]
}
 8004812:	4618      	mov	r0, r3
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40007000 	.word	0x40007000

08004824 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d102      	bne.n	8004838 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	f000 bcc2 	b.w	80051bc <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004838:	4b99      	ldr	r3, [pc, #612]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 030c 	and.w	r3, r3, #12
 8004840:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004842:	4b97      	ldr	r3, [pc, #604]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0310 	and.w	r3, r3, #16
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 80e9 	beq.w	8004a2c <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d006      	beq.n	800486e <HAL_RCC_OscConfig+0x4a>
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	2b0c      	cmp	r3, #12
 8004864:	f040 8083 	bne.w	800496e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d17f      	bne.n	800496e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800486e:	4b8c      	ldr	r3, [pc, #560]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d006      	beq.n	8004888 <HAL_RCC_OscConfig+0x64>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d102      	bne.n	8004888 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	f000 bc9a 	b.w	80051bc <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800488c:	4b84      	ldr	r3, [pc, #528]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d004      	beq.n	80048a2 <HAL_RCC_OscConfig+0x7e>
 8004898:	4b81      	ldr	r3, [pc, #516]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048a0:	e005      	b.n	80048ae <HAL_RCC_OscConfig+0x8a>
 80048a2:	4b7f      	ldr	r3, [pc, #508]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 80048a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048a8:	091b      	lsrs	r3, r3, #4
 80048aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d224      	bcs.n	80048fc <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fe74 	bl	80055a4 <RCC_SetFlashLatencyFromMSIRange>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	f000 bc7a 	b.w	80051bc <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048c8:	4b75      	ldr	r3, [pc, #468]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a74      	ldr	r2, [pc, #464]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 80048ce:	f043 0308 	orr.w	r3, r3, #8
 80048d2:	6013      	str	r3, [r2, #0]
 80048d4:	4b72      	ldr	r3, [pc, #456]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e0:	496f      	ldr	r1, [pc, #444]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048e6:	4b6e      	ldr	r3, [pc, #440]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	021b      	lsls	r3, r3, #8
 80048f4:	496a      	ldr	r1, [pc, #424]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	604b      	str	r3, [r1, #4]
 80048fa:	e026      	b.n	800494a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048fc:	4b68      	ldr	r3, [pc, #416]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a67      	ldr	r2, [pc, #412]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 8004902:	f043 0308 	orr.w	r3, r3, #8
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	4b65      	ldr	r3, [pc, #404]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004914:	4962      	ldr	r1, [pc, #392]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 8004916:	4313      	orrs	r3, r2
 8004918:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800491a:	4b61      	ldr	r3, [pc, #388]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	021b      	lsls	r3, r3, #8
 8004928:	495d      	ldr	r1, [pc, #372]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 800492a:	4313      	orrs	r3, r2
 800492c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10a      	bne.n	800494a <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004938:	4618      	mov	r0, r3
 800493a:	f000 fe33 	bl	80055a4 <RCC_SetFlashLatencyFromMSIRange>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	f000 bc39 	b.w	80051bc <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800494a:	f000 fe17 	bl	800557c <HAL_RCC_GetHCLKFreq>
 800494e:	4603      	mov	r3, r0
 8004950:	4a54      	ldr	r2, [pc, #336]	@ (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004952:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004954:	4b54      	ldr	r3, [pc, #336]	@ (8004aa8 <HAL_RCC_OscConfig+0x284>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4618      	mov	r0, r3
 800495a:	f7fe fce7 	bl	800332c <HAL_InitTick>
 800495e:	4603      	mov	r3, r0
 8004960:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8004962:	7bfb      	ldrb	r3, [r7, #15]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d060      	beq.n	8004a2a <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8004968:	7bfb      	ldrb	r3, [r7, #15]
 800496a:	f000 bc27 	b.w	80051bc <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d039      	beq.n	80049ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004976:	4b4a      	ldr	r3, [pc, #296]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a49      	ldr	r2, [pc, #292]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004982:	f7fe fd23 	bl	80033cc <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004988:	e00f      	b.n	80049aa <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800498a:	f7fe fd1f 	bl	80033cc <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d908      	bls.n	80049aa <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004998:	4b41      	ldr	r3, [pc, #260]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d102      	bne.n	80049aa <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	f000 bc09 	b.w	80051bc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049aa:	4b3d      	ldr	r3, [pc, #244]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0e9      	beq.n	800498a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049b6:	4b3a      	ldr	r3, [pc, #232]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a39      	ldr	r2, [pc, #228]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 80049bc:	f043 0308 	orr.w	r3, r3, #8
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	4b37      	ldr	r3, [pc, #220]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ce:	4934      	ldr	r1, [pc, #208]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049d4:	4b32      	ldr	r3, [pc, #200]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	021b      	lsls	r3, r3, #8
 80049e2:	492f      	ldr	r1, [pc, #188]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	604b      	str	r3, [r1, #4]
 80049e8:	e020      	b.n	8004a2c <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049ea:	4b2d      	ldr	r3, [pc, #180]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a2c      	ldr	r2, [pc, #176]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 80049f0:	f023 0301 	bic.w	r3, r3, #1
 80049f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049f6:	f7fe fce9 	bl	80033cc <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049fc:	e00e      	b.n	8004a1c <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049fe:	f7fe fce5 	bl	80033cc <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d907      	bls.n	8004a1c <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a0c:	4b24      	ldr	r3, [pc, #144]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e3cf      	b.n	80051bc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a1c:	4b20      	ldr	r3, [pc, #128]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1ea      	bne.n	80049fe <HAL_RCC_OscConfig+0x1da>
 8004a28:	e000      	b.n	8004a2c <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a2a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d07e      	beq.n	8004b36 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d005      	beq.n	8004a4a <HAL_RCC_OscConfig+0x226>
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	2b0c      	cmp	r3, #12
 8004a42:	d10e      	bne.n	8004a62 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d10b      	bne.n	8004a62 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a4a:	4b15      	ldr	r3, [pc, #84]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d06e      	beq.n	8004b34 <HAL_RCC_OscConfig+0x310>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d16a      	bne.n	8004b34 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e3ac      	b.n	80051bc <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a6a:	d106      	bne.n	8004a7a <HAL_RCC_OscConfig+0x256>
 8004a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a0b      	ldr	r2, [pc, #44]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 8004a72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	e024      	b.n	8004ac4 <HAL_RCC_OscConfig+0x2a0>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a82:	d113      	bne.n	8004aac <HAL_RCC_OscConfig+0x288>
 8004a84:	4b06      	ldr	r3, [pc, #24]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a05      	ldr	r2, [pc, #20]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 8004a8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	4b03      	ldr	r3, [pc, #12]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a02      	ldr	r2, [pc, #8]	@ (8004aa0 <HAL_RCC_OscConfig+0x27c>)
 8004a96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	e012      	b.n	8004ac4 <HAL_RCC_OscConfig+0x2a0>
 8004a9e:	bf00      	nop
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	20000000 	.word	0x20000000
 8004aa8:	20000004 	.word	0x20000004
 8004aac:	4b8b      	ldr	r3, [pc, #556]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a8a      	ldr	r2, [pc, #552]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004ab2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	4b88      	ldr	r3, [pc, #544]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a87      	ldr	r2, [pc, #540]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004abe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ac2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d019      	beq.n	8004b00 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004acc:	f7fe fc7e 	bl	80033cc <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ad2:	e00e      	b.n	8004af2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad4:	f7fe fc7a 	bl	80033cc <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b64      	cmp	r3, #100	@ 0x64
 8004ae0:	d907      	bls.n	8004af2 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ae2:	4b7e      	ldr	r3, [pc, #504]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e364      	b.n	80051bc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004af2:	4b7a      	ldr	r3, [pc, #488]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0ea      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x2b0>
 8004afe:	e01a      	b.n	8004b36 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b00:	f7fe fc64 	bl	80033cc <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b06:	e00e      	b.n	8004b26 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b08:	f7fe fc60 	bl	80033cc <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	@ 0x64
 8004b14:	d907      	bls.n	8004b26 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b16:	4b71      	ldr	r3, [pc, #452]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e34a      	b.n	80051bc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b26:	4b6d      	ldr	r3, [pc, #436]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1ea      	bne.n	8004b08 <HAL_RCC_OscConfig+0x2e4>
 8004b32:	e000      	b.n	8004b36 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d06c      	beq.n	8004c1c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d005      	beq.n	8004b54 <HAL_RCC_OscConfig+0x330>
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	2b0c      	cmp	r3, #12
 8004b4c:	d119      	bne.n	8004b82 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d116      	bne.n	8004b82 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b54:	4b61      	ldr	r3, [pc, #388]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d005      	beq.n	8004b6c <HAL_RCC_OscConfig+0x348>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e327      	b.n	80051bc <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6c:	4b5b      	ldr	r3, [pc, #364]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	061b      	lsls	r3, r3, #24
 8004b7a:	4958      	ldr	r1, [pc, #352]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b80:	e04c      	b.n	8004c1c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d029      	beq.n	8004bde <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b8a:	4b54      	ldr	r3, [pc, #336]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a53      	ldr	r2, [pc, #332]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b96:	f7fe fc19 	bl	80033cc <HAL_GetTick>
 8004b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b9c:	e00e      	b.n	8004bbc <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b9e:	f7fe fc15 	bl	80033cc <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d907      	bls.n	8004bbc <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bac:	4b4b      	ldr	r3, [pc, #300]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e2ff      	b.n	80051bc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bbc:	4b47      	ldr	r3, [pc, #284]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0ea      	beq.n	8004b9e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc8:	4b44      	ldr	r3, [pc, #272]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	061b      	lsls	r3, r3, #24
 8004bd6:	4941      	ldr	r1, [pc, #260]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	604b      	str	r3, [r1, #4]
 8004bdc:	e01e      	b.n	8004c1c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bde:	4b3f      	ldr	r3, [pc, #252]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a3e      	ldr	r2, [pc, #248]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004be4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bea:	f7fe fbef 	bl	80033cc <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bf0:	e00e      	b.n	8004c10 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf2:	f7fe fbeb 	bl	80033cc <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d907      	bls.n	8004c10 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c00:	4b36      	ldr	r3, [pc, #216]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e2d5      	b.n	80051bc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c10:	4b32      	ldr	r3, [pc, #200]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1ea      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d062      	beq.n	8004cee <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d038      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d108      	bne.n	8004c4a <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004c38:	4b28      	ldr	r3, [pc, #160]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c3e:	4a27      	ldr	r2, [pc, #156]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004c40:	f023 0310 	bic.w	r3, r3, #16
 8004c44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004c48:	e007      	b.n	8004c5a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004c4a:	4b24      	ldr	r3, [pc, #144]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c50:	4a22      	ldr	r2, [pc, #136]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004c52:	f043 0310 	orr.w	r3, r3, #16
 8004c56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c5a:	4b20      	ldr	r3, [pc, #128]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c60:	4a1e      	ldr	r2, [pc, #120]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004c62:	f043 0301 	orr.w	r3, r3, #1
 8004c66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6a:	f7fe fbaf 	bl	80033cc <HAL_GetTick>
 8004c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c70:	e00f      	b.n	8004c92 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c72:	f7fe fbab 	bl	80033cc <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b07      	cmp	r3, #7
 8004c7e:	d908      	bls.n	8004c92 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c80:	4b16      	ldr	r3, [pc, #88]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e294      	b.n	80051bc <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c92:	4b12      	ldr	r3, [pc, #72]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0e8      	beq.n	8004c72 <HAL_RCC_OscConfig+0x44e>
 8004ca0:	e025      	b.n	8004cee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004caa:	f023 0301 	bic.w	r3, r3, #1
 8004cae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb2:	f7fe fb8b 	bl	80033cc <HAL_GetTick>
 8004cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cb8:	e012      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cba:	f7fe fb87 	bl	80033cc <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b07      	cmp	r3, #7
 8004cc6:	d90b      	bls.n	8004ce0 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cc8:	4b04      	ldr	r3, [pc, #16]	@ (8004cdc <HAL_RCC_OscConfig+0x4b8>)
 8004cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d004      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e270      	b.n	80051bc <HAL_RCC_OscConfig+0x998>
 8004cda:	bf00      	nop
 8004cdc:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ce0:	4ba8      	ldr	r3, [pc, #672]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1e5      	bne.n	8004cba <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 812d 	beq.w	8004f56 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d00:	4ba0      	ldr	r3, [pc, #640]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10d      	bne.n	8004d28 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d0c:	4b9d      	ldr	r3, [pc, #628]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d10:	4a9c      	ldr	r2, [pc, #624]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004d12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d16:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d18:	4b9a      	ldr	r3, [pc, #616]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d20:	60bb      	str	r3, [r7, #8]
 8004d22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d24:	2301      	movs	r3, #1
 8004d26:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d28:	4b97      	ldr	r3, [pc, #604]	@ (8004f88 <HAL_RCC_OscConfig+0x764>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d11e      	bne.n	8004d72 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d34:	4b94      	ldr	r3, [pc, #592]	@ (8004f88 <HAL_RCC_OscConfig+0x764>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a93      	ldr	r2, [pc, #588]	@ (8004f88 <HAL_RCC_OscConfig+0x764>)
 8004d3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d40:	f7fe fb44 	bl	80033cc <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d46:	e00e      	b.n	8004d66 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d48:	f7fe fb40 	bl	80033cc <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d907      	bls.n	8004d66 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d56:	4b8c      	ldr	r3, [pc, #560]	@ (8004f88 <HAL_RCC_OscConfig+0x764>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e22a      	b.n	80051bc <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d66:	4b88      	ldr	r3, [pc, #544]	@ (8004f88 <HAL_RCC_OscConfig+0x764>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0ea      	beq.n	8004d48 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d01f      	beq.n	8004dbe <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 0304 	and.w	r3, r3, #4
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d010      	beq.n	8004dac <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004d8a:	4b7e      	ldr	r3, [pc, #504]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d90:	4a7c      	ldr	r2, [pc, #496]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004d92:	f043 0304 	orr.w	r3, r3, #4
 8004d96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d9a:	4b7a      	ldr	r3, [pc, #488]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da0:	4a78      	ldr	r2, [pc, #480]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004da2:	f043 0301 	orr.w	r3, r3, #1
 8004da6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004daa:	e018      	b.n	8004dde <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004dac:	4b75      	ldr	r3, [pc, #468]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db2:	4a74      	ldr	r2, [pc, #464]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004db4:	f043 0301 	orr.w	r3, r3, #1
 8004db8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dbc:	e00f      	b.n	8004dde <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004dbe:	4b71      	ldr	r3, [pc, #452]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc4:	4a6f      	ldr	r2, [pc, #444]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004dc6:	f023 0301 	bic.w	r3, r3, #1
 8004dca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004dce:	4b6d      	ldr	r3, [pc, #436]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd4:	4a6b      	ldr	r2, [pc, #428]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004dd6:	f023 0304 	bic.w	r3, r3, #4
 8004dda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d068      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de6:	f7fe faf1 	bl	80033cc <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dec:	e011      	b.n	8004e12 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dee:	f7fe faed 	bl	80033cc <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d908      	bls.n	8004e12 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e00:	4b60      	ldr	r3, [pc, #384]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e1d4      	b.n	80051bc <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e12:	4b5c      	ldr	r3, [pc, #368]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0e6      	beq.n	8004dee <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d022      	beq.n	8004e72 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004e2c:	4b55      	ldr	r3, [pc, #340]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e32:	4a54      	ldr	r2, [pc, #336]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004e3c:	e011      	b.n	8004e62 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e3e:	f7fe fac5 	bl	80033cc <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d908      	bls.n	8004e62 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004e50:	4b4c      	ldr	r3, [pc, #304]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e1ac      	b.n	80051bc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004e62:	4b48      	ldr	r3, [pc, #288]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d0e6      	beq.n	8004e3e <HAL_RCC_OscConfig+0x61a>
 8004e70:	e068      	b.n	8004f44 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004e72:	4b44      	ldr	r3, [pc, #272]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e78:	4a42      	ldr	r2, [pc, #264]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004e7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004e82:	e011      	b.n	8004ea8 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e84:	f7fe faa2 	bl	80033cc <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d908      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004e96:	4b3b      	ldr	r3, [pc, #236]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e189      	b.n	80051bc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004ea8:	4b36      	ldr	r3, [pc, #216]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e6      	bne.n	8004e84 <HAL_RCC_OscConfig+0x660>
 8004eb6:	e045      	b.n	8004f44 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb8:	f7fe fa88 	bl	80033cc <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ebe:	e011      	b.n	8004ee4 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec0:	f7fe fa84 	bl	80033cc <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d908      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ed2:	4b2c      	ldr	r3, [pc, #176]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e16b      	b.n	80051bc <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ee4:	4b27      	ldr	r3, [pc, #156]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e6      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004ef2:	4b24      	ldr	r3, [pc, #144]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d021      	beq.n	8004f44 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004f00:	4b20      	ldr	r3, [pc, #128]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f06:	4a1f      	ldr	r2, [pc, #124]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004f08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004f10:	e011      	b.n	8004f36 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f12:	f7fe fa5b 	bl	80033cc <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d908      	bls.n	8004f36 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004f24:	4b17      	ldr	r3, [pc, #92]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e142      	b.n	80051bc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004f36:	4b13      	ldr	r3, [pc, #76]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1e6      	bne.n	8004f12 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f44:	7ffb      	ldrb	r3, [r7, #31]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d105      	bne.n	8004f56 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f4e:	4a0d      	ldr	r2, [pc, #52]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004f50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f54:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d04f      	beq.n	8005002 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d028      	beq.n	8004fbc <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f6a:	4b06      	ldr	r3, [pc, #24]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004f6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f70:	4a04      	ldr	r2, [pc, #16]	@ (8004f84 <HAL_RCC_OscConfig+0x760>)
 8004f72:	f043 0301 	orr.w	r3, r3, #1
 8004f76:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f7a:	f7fe fa27 	bl	80033cc <HAL_GetTick>
 8004f7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f80:	e014      	b.n	8004fac <HAL_RCC_OscConfig+0x788>
 8004f82:	bf00      	nop
 8004f84:	40021000 	.word	0x40021000
 8004f88:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f8c:	f7fe fa1e 	bl	80033cc <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d908      	bls.n	8004fac <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f9a:	4b8a      	ldr	r3, [pc, #552]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 8004f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e107      	b.n	80051bc <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fac:	4b85      	ldr	r3, [pc, #532]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 8004fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0e8      	beq.n	8004f8c <HAL_RCC_OscConfig+0x768>
 8004fba:	e022      	b.n	8005002 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fbc:	4b81      	ldr	r3, [pc, #516]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 8004fbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fc2:	4a80      	ldr	r2, [pc, #512]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 8004fc4:	f023 0301 	bic.w	r3, r3, #1
 8004fc8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fcc:	f7fe f9fe 	bl	80033cc <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fd2:	e00f      	b.n	8004ff4 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fd4:	f7fe f9fa 	bl	80033cc <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d908      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fe2:	4b78      	ldr	r3, [pc, #480]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 8004fe4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e0e3      	b.n	80051bc <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ff4:	4b73      	ldr	r3, [pc, #460]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 8004ff6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1e8      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 80d7 	beq.w	80051ba <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800500c:	4b6d      	ldr	r3, [pc, #436]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f003 030c 	and.w	r3, r3, #12
 8005014:	2b0c      	cmp	r3, #12
 8005016:	f000 8091 	beq.w	800513c <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501e:	2b02      	cmp	r3, #2
 8005020:	d166      	bne.n	80050f0 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005022:	4b68      	ldr	r3, [pc, #416]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a67      	ldr	r2, [pc, #412]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 8005028:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800502c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502e:	f7fe f9cd 	bl	80033cc <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005034:	e00e      	b.n	8005054 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005036:	f7fe f9c9 	bl	80033cc <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d907      	bls.n	8005054 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005044:	4b5f      	ldr	r3, [pc, #380]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d001      	beq.n	8005054 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e0b3      	b.n	80051bc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005054:	4b5b      	ldr	r3, [pc, #364]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1ea      	bne.n	8005036 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005060:	4b58      	ldr	r3, [pc, #352]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	4b58      	ldr	r3, [pc, #352]	@ (80051c8 <HAL_RCC_OscConfig+0x9a4>)
 8005066:	4013      	ands	r3, r2
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005070:	3a01      	subs	r2, #1
 8005072:	0112      	lsls	r2, r2, #4
 8005074:	4311      	orrs	r1, r2
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800507a:	0212      	lsls	r2, r2, #8
 800507c:	4311      	orrs	r1, r2
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005082:	0852      	lsrs	r2, r2, #1
 8005084:	3a01      	subs	r2, #1
 8005086:	0552      	lsls	r2, r2, #21
 8005088:	4311      	orrs	r1, r2
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800508e:	0852      	lsrs	r2, r2, #1
 8005090:	3a01      	subs	r2, #1
 8005092:	0652      	lsls	r2, r2, #25
 8005094:	4311      	orrs	r1, r2
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800509a:	06d2      	lsls	r2, r2, #27
 800509c:	430a      	orrs	r2, r1
 800509e:	4949      	ldr	r1, [pc, #292]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050a4:	4b47      	ldr	r3, [pc, #284]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a46      	ldr	r2, [pc, #280]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 80050aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050b0:	4b44      	ldr	r3, [pc, #272]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	4a43      	ldr	r2, [pc, #268]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 80050b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050bc:	f7fe f986 	bl	80033cc <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050c2:	e00e      	b.n	80050e2 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c4:	f7fe f982 	bl	80033cc <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d907      	bls.n	80050e2 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050d2:	4b3c      	ldr	r3, [pc, #240]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e06c      	b.n	80051bc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050e2:	4b38      	ldr	r3, [pc, #224]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0ea      	beq.n	80050c4 <HAL_RCC_OscConfig+0x8a0>
 80050ee:	e064      	b.n	80051ba <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f0:	4b34      	ldr	r3, [pc, #208]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a33      	ldr	r2, [pc, #204]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 80050f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fc:	f7fe f966 	bl	80033cc <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005102:	e00e      	b.n	8005122 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005104:	f7fe f962 	bl	80033cc <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d907      	bls.n	8005122 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005112:	4b2c      	ldr	r3, [pc, #176]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e04c      	b.n	80051bc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005122:	4b28      	ldr	r3, [pc, #160]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1ea      	bne.n	8005104 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800512e:	4b25      	ldr	r3, [pc, #148]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	4924      	ldr	r1, [pc, #144]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 8005134:	4b25      	ldr	r3, [pc, #148]	@ (80051cc <HAL_RCC_OscConfig+0x9a8>)
 8005136:	4013      	ands	r3, r2
 8005138:	60cb      	str	r3, [r1, #12]
 800513a:	e03e      	b.n	80051ba <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005140:	2b01      	cmp	r3, #1
 8005142:	d101      	bne.n	8005148 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e039      	b.n	80051bc <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8005148:	4b1e      	ldr	r3, [pc, #120]	@ (80051c4 <HAL_RCC_OscConfig+0x9a0>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f003 0203 	and.w	r2, r3, #3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005158:	429a      	cmp	r2, r3
 800515a:	d12c      	bne.n	80051b6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005166:	3b01      	subs	r3, #1
 8005168:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800516a:	429a      	cmp	r2, r3
 800516c:	d123      	bne.n	80051b6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005178:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800517a:	429a      	cmp	r2, r3
 800517c:	d11b      	bne.n	80051b6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005188:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800518a:	429a      	cmp	r2, r3
 800518c:	d113      	bne.n	80051b6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005198:	085b      	lsrs	r3, r3, #1
 800519a:	3b01      	subs	r3, #1
 800519c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800519e:	429a      	cmp	r2, r3
 80051a0:	d109      	bne.n	80051b6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ac:	085b      	lsrs	r3, r3, #1
 80051ae:	3b01      	subs	r3, #1
 80051b0:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d001      	beq.n	80051ba <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e000      	b.n	80051bc <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3720      	adds	r7, #32
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40021000 	.word	0x40021000
 80051c8:	019f800c 	.word	0x019f800c
 80051cc:	feeefffc 	.word	0xfeeefffc

080051d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e11c      	b.n	8005422 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051e8:	4b90      	ldr	r3, [pc, #576]	@ (800542c <HAL_RCC_ClockConfig+0x25c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 030f 	and.w	r3, r3, #15
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d910      	bls.n	8005218 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051f6:	4b8d      	ldr	r3, [pc, #564]	@ (800542c <HAL_RCC_ClockConfig+0x25c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f023 020f 	bic.w	r2, r3, #15
 80051fe:	498b      	ldr	r1, [pc, #556]	@ (800542c <HAL_RCC_ClockConfig+0x25c>)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	4313      	orrs	r3, r2
 8005204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005206:	4b89      	ldr	r3, [pc, #548]	@ (800542c <HAL_RCC_ClockConfig+0x25c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	429a      	cmp	r2, r3
 8005212:	d001      	beq.n	8005218 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e104      	b.n	8005422 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d010      	beq.n	8005246 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	4b81      	ldr	r3, [pc, #516]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005230:	429a      	cmp	r2, r3
 8005232:	d908      	bls.n	8005246 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005234:	4b7e      	ldr	r3, [pc, #504]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	497b      	ldr	r1, [pc, #492]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 8005242:	4313      	orrs	r3, r2
 8005244:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 8085 	beq.w	800535e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b03      	cmp	r3, #3
 800525a:	d11f      	bne.n	800529c <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800525c:	4b74      	ldr	r3, [pc, #464]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e0da      	b.n	8005422 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800526c:	f000 f9fe 	bl	800566c <RCC_GetSysClockFreqFromPLLSource>
 8005270:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	4a6f      	ldr	r2, [pc, #444]	@ (8005434 <HAL_RCC_ClockConfig+0x264>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d947      	bls.n	800530a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800527a:	4b6d      	ldr	r3, [pc, #436]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d141      	bne.n	800530a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005286:	4b6a      	ldr	r3, [pc, #424]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800528e:	4a68      	ldr	r2, [pc, #416]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 8005290:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005294:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005296:	2380      	movs	r3, #128	@ 0x80
 8005298:	617b      	str	r3, [r7, #20]
 800529a:	e036      	b.n	800530a <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d107      	bne.n	80052b4 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052a4:	4b62      	ldr	r3, [pc, #392]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d115      	bne.n	80052dc <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e0b6      	b.n	8005422 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d107      	bne.n	80052cc <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052bc:	4b5c      	ldr	r3, [pc, #368]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d109      	bne.n	80052dc <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e0aa      	b.n	8005422 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052cc:	4b58      	ldr	r3, [pc, #352]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e0a2      	b.n	8005422 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80052dc:	f000 f8b0 	bl	8005440 <HAL_RCC_GetSysClockFreq>
 80052e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	4a53      	ldr	r2, [pc, #332]	@ (8005434 <HAL_RCC_ClockConfig+0x264>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d90f      	bls.n	800530a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80052ea:	4b51      	ldr	r3, [pc, #324]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d109      	bne.n	800530a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052f6:	4b4e      	ldr	r3, [pc, #312]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052fe:	4a4c      	ldr	r2, [pc, #304]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 8005300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005304:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005306:	2380      	movs	r3, #128	@ 0x80
 8005308:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800530a:	4b49      	ldr	r3, [pc, #292]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f023 0203 	bic.w	r2, r3, #3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	4946      	ldr	r1, [pc, #280]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 8005318:	4313      	orrs	r3, r2
 800531a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800531c:	f7fe f856 	bl	80033cc <HAL_GetTick>
 8005320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005322:	e013      	b.n	800534c <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005324:	f7fe f852 	bl	80033cc <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005332:	4293      	cmp	r3, r2
 8005334:	d90a      	bls.n	800534c <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005336:	4b3e      	ldr	r3, [pc, #248]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f003 020c 	and.w	r2, r3, #12
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	429a      	cmp	r2, r3
 8005346:	d001      	beq.n	800534c <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e06a      	b.n	8005422 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800534c:	4b38      	ldr	r3, [pc, #224]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f003 020c 	and.w	r2, r3, #12
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	429a      	cmp	r2, r3
 800535c:	d1e2      	bne.n	8005324 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	2b80      	cmp	r3, #128	@ 0x80
 8005362:	d105      	bne.n	8005370 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005364:	4b32      	ldr	r3, [pc, #200]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	4a31      	ldr	r2, [pc, #196]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 800536a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800536e:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d010      	beq.n	800539e <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	4b2b      	ldr	r3, [pc, #172]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005388:	429a      	cmp	r2, r3
 800538a:	d208      	bcs.n	800539e <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800538c:	4b28      	ldr	r3, [pc, #160]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	4925      	ldr	r1, [pc, #148]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 800539a:	4313      	orrs	r3, r2
 800539c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800539e:	4b23      	ldr	r3, [pc, #140]	@ (800542c <HAL_RCC_ClockConfig+0x25c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d210      	bcs.n	80053ce <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ac:	4b1f      	ldr	r3, [pc, #124]	@ (800542c <HAL_RCC_ClockConfig+0x25c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f023 020f 	bic.w	r2, r3, #15
 80053b4:	491d      	ldr	r1, [pc, #116]	@ (800542c <HAL_RCC_ClockConfig+0x25c>)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053bc:	4b1b      	ldr	r3, [pc, #108]	@ (800542c <HAL_RCC_ClockConfig+0x25c>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 030f 	and.w	r3, r3, #15
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d001      	beq.n	80053ce <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e029      	b.n	8005422 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d008      	beq.n	80053ec <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053da:	4b15      	ldr	r3, [pc, #84]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	4912      	ldr	r1, [pc, #72]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0308 	and.w	r3, r3, #8
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d009      	beq.n	800540c <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	490a      	ldr	r1, [pc, #40]	@ (8005430 <HAL_RCC_ClockConfig+0x260>)
 8005408:	4313      	orrs	r3, r2
 800540a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800540c:	f000 f8b6 	bl	800557c <HAL_RCC_GetHCLKFreq>
 8005410:	4603      	mov	r3, r0
 8005412:	4a09      	ldr	r2, [pc, #36]	@ (8005438 <HAL_RCC_ClockConfig+0x268>)
 8005414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005416:	4b09      	ldr	r3, [pc, #36]	@ (800543c <HAL_RCC_ClockConfig+0x26c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4618      	mov	r0, r3
 800541c:	f7fd ff86 	bl	800332c <HAL_InitTick>
 8005420:	4603      	mov	r3, r0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3718      	adds	r7, #24
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	40022000 	.word	0x40022000
 8005430:	40021000 	.word	0x40021000
 8005434:	04c4b400 	.word	0x04c4b400
 8005438:	20000000 	.word	0x20000000
 800543c:	20000004 	.word	0x20000004

08005440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005440:	b480      	push	{r7}
 8005442:	b089      	sub	sp, #36	@ 0x24
 8005444:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	61fb      	str	r3, [r7, #28]
 800544a:	2300      	movs	r3, #0
 800544c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800544e:	4b47      	ldr	r3, [pc, #284]	@ (800556c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 030c 	and.w	r3, r3, #12
 8005456:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005458:	4b44      	ldr	r3, [pc, #272]	@ (800556c <HAL_RCC_GetSysClockFreq+0x12c>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d005      	beq.n	8005474 <HAL_RCC_GetSysClockFreq+0x34>
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	2b0c      	cmp	r3, #12
 800546c:	d121      	bne.n	80054b2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d11e      	bne.n	80054b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005474:	4b3d      	ldr	r3, [pc, #244]	@ (800556c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b00      	cmp	r3, #0
 800547e:	d107      	bne.n	8005490 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005480:	4b3a      	ldr	r3, [pc, #232]	@ (800556c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005486:	0a1b      	lsrs	r3, r3, #8
 8005488:	f003 030f 	and.w	r3, r3, #15
 800548c:	61fb      	str	r3, [r7, #28]
 800548e:	e005      	b.n	800549c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005490:	4b36      	ldr	r3, [pc, #216]	@ (800556c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	091b      	lsrs	r3, r3, #4
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800549c:	4a34      	ldr	r2, [pc, #208]	@ (8005570 <HAL_RCC_GetSysClockFreq+0x130>)
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054a4:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10d      	bne.n	80054c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80054b0:	e00a      	b.n	80054c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d102      	bne.n	80054be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054b8:	4b2e      	ldr	r3, [pc, #184]	@ (8005574 <HAL_RCC_GetSysClockFreq+0x134>)
 80054ba:	61bb      	str	r3, [r7, #24]
 80054bc:	e004      	b.n	80054c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d101      	bne.n	80054c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054c4:	4b2c      	ldr	r3, [pc, #176]	@ (8005578 <HAL_RCC_GetSysClockFreq+0x138>)
 80054c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	2b0c      	cmp	r3, #12
 80054cc:	d146      	bne.n	800555c <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80054ce:	4b27      	ldr	r3, [pc, #156]	@ (800556c <HAL_RCC_GetSysClockFreq+0x12c>)
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054d8:	4b24      	ldr	r3, [pc, #144]	@ (800556c <HAL_RCC_GetSysClockFreq+0x12c>)
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	091b      	lsrs	r3, r3, #4
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	3301      	adds	r3, #1
 80054e4:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d003      	beq.n	80054f4 <HAL_RCC_GetSysClockFreq+0xb4>
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d00d      	beq.n	800550e <HAL_RCC_GetSysClockFreq+0xce>
 80054f2:	e019      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005574 <HAL_RCC_GetSysClockFreq+0x134>)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fc:	4a1b      	ldr	r2, [pc, #108]	@ (800556c <HAL_RCC_GetSysClockFreq+0x12c>)
 80054fe:	68d2      	ldr	r2, [r2, #12]
 8005500:	0a12      	lsrs	r2, r2, #8
 8005502:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005506:	fb02 f303 	mul.w	r3, r2, r3
 800550a:	617b      	str	r3, [r7, #20]
        break;
 800550c:	e019      	b.n	8005542 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800550e:	4a1a      	ldr	r2, [pc, #104]	@ (8005578 <HAL_RCC_GetSysClockFreq+0x138>)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	fbb2 f3f3 	udiv	r3, r2, r3
 8005516:	4a15      	ldr	r2, [pc, #84]	@ (800556c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005518:	68d2      	ldr	r2, [r2, #12]
 800551a:	0a12      	lsrs	r2, r2, #8
 800551c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005520:	fb02 f303 	mul.w	r3, r2, r3
 8005524:	617b      	str	r3, [r7, #20]
        break;
 8005526:	e00c      	b.n	8005542 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005528:	69fa      	ldr	r2, [r7, #28]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005530:	4a0e      	ldr	r2, [pc, #56]	@ (800556c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005532:	68d2      	ldr	r2, [r2, #12]
 8005534:	0a12      	lsrs	r2, r2, #8
 8005536:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800553a:	fb02 f303 	mul.w	r3, r2, r3
 800553e:	617b      	str	r3, [r7, #20]
        break;
 8005540:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005542:	4b0a      	ldr	r3, [pc, #40]	@ (800556c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	0e5b      	lsrs	r3, r3, #25
 8005548:	f003 0303 	and.w	r3, r3, #3
 800554c:	3301      	adds	r3, #1
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	fbb2 f3f3 	udiv	r3, r2, r3
 800555a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800555c:	69bb      	ldr	r3, [r7, #24]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3724      	adds	r7, #36	@ 0x24
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	40021000 	.word	0x40021000
 8005570:	0800632c 	.word	0x0800632c
 8005574:	00f42400 	.word	0x00f42400
 8005578:	007a1200 	.word	0x007a1200

0800557c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8005580:	f7ff ff5e 	bl	8005440 <HAL_RCC_GetSysClockFreq>
 8005584:	4602      	mov	r2, r0
 8005586:	4b05      	ldr	r3, [pc, #20]	@ (800559c <HAL_RCC_GetHCLKFreq+0x20>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	091b      	lsrs	r3, r3, #4
 800558c:	f003 030f 	and.w	r3, r3, #15
 8005590:	4903      	ldr	r1, [pc, #12]	@ (80055a0 <HAL_RCC_GetHCLKFreq+0x24>)
 8005592:	5ccb      	ldrb	r3, [r1, r3]
 8005594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005598:	4618      	mov	r0, r3
 800559a:	bd80      	pop	{r7, pc}
 800559c:	40021000 	.word	0x40021000
 80055a0:	0800631c 	.word	0x0800631c

080055a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80055b0:	4b2c      	ldr	r3, [pc, #176]	@ (8005664 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80055b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d003      	beq.n	80055c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80055bc:	f7ff f894 	bl	80046e8 <HAL_PWREx_GetVoltageRange>
 80055c0:	6138      	str	r0, [r7, #16]
 80055c2:	e014      	b.n	80055ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80055c4:	4b27      	ldr	r3, [pc, #156]	@ (8005664 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80055c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c8:	4a26      	ldr	r2, [pc, #152]	@ (8005664 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80055ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80055d0:	4b24      	ldr	r3, [pc, #144]	@ (8005664 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80055d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80055dc:	f7ff f884 	bl	80046e8 <HAL_PWREx_GetVoltageRange>
 80055e0:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80055e2:	4b20      	ldr	r3, [pc, #128]	@ (8005664 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80055e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055e6:	4a1f      	ldr	r2, [pc, #124]	@ (8005664 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80055e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <RCC_SetFlashLatencyFromMSIRange+0x58>
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055fa:	d10b      	bne.n	8005614 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b80      	cmp	r3, #128	@ 0x80
 8005600:	d919      	bls.n	8005636 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2ba0      	cmp	r3, #160	@ 0xa0
 8005606:	d902      	bls.n	800560e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005608:	2302      	movs	r3, #2
 800560a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800560c:	e013      	b.n	8005636 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800560e:	2301      	movs	r3, #1
 8005610:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005612:	e010      	b.n	8005636 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b80      	cmp	r3, #128	@ 0x80
 8005618:	d902      	bls.n	8005620 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800561a:	2303      	movs	r3, #3
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	e00a      	b.n	8005636 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b80      	cmp	r3, #128	@ 0x80
 8005624:	d102      	bne.n	800562c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005626:	2302      	movs	r3, #2
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	e004      	b.n	8005636 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b70      	cmp	r3, #112	@ 0x70
 8005630:	d101      	bne.n	8005636 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005632:	2301      	movs	r3, #1
 8005634:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005636:	4b0c      	ldr	r3, [pc, #48]	@ (8005668 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f023 020f 	bic.w	r2, r3, #15
 800563e:	490a      	ldr	r1, [pc, #40]	@ (8005668 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	4313      	orrs	r3, r2
 8005644:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005646:	4b08      	ldr	r3, [pc, #32]	@ (8005668 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	429a      	cmp	r2, r3
 8005652:	d001      	beq.n	8005658 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e000      	b.n	800565a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	40021000 	.word	0x40021000
 8005668:	40022000 	.word	0x40022000

0800566c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005672:	4b31      	ldr	r3, [pc, #196]	@ (8005738 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800567c:	4b2e      	ldr	r3, [pc, #184]	@ (8005738 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	091b      	lsrs	r3, r3, #4
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	3301      	adds	r3, #1
 8005688:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2b03      	cmp	r3, #3
 800568e:	d015      	beq.n	80056bc <RCC_GetSysClockFreqFromPLLSource+0x50>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2b03      	cmp	r3, #3
 8005694:	d839      	bhi.n	800570a <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d01c      	beq.n	80056d6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d133      	bne.n	800570a <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056a2:	4a26      	ldr	r2, [pc, #152]	@ (800573c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056aa:	4a23      	ldr	r2, [pc, #140]	@ (8005738 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80056ac:	68d2      	ldr	r2, [r2, #12]
 80056ae:	0a12      	lsrs	r2, r2, #8
 80056b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056b4:	fb02 f303 	mul.w	r3, r2, r3
 80056b8:	613b      	str	r3, [r7, #16]
      break;
 80056ba:	e029      	b.n	8005710 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056bc:	4a20      	ldr	r2, [pc, #128]	@ (8005740 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005738 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80056c6:	68d2      	ldr	r2, [r2, #12]
 80056c8:	0a12      	lsrs	r2, r2, #8
 80056ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056ce:	fb02 f303 	mul.w	r3, r2, r3
 80056d2:	613b      	str	r3, [r7, #16]
      break;
 80056d4:	e01c      	b.n	8005710 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80056d6:	4b18      	ldr	r3, [pc, #96]	@ (8005738 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d107      	bne.n	80056f2 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80056e2:	4b15      	ldr	r3, [pc, #84]	@ (8005738 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80056e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056e8:	0a1b      	lsrs	r3, r3, #8
 80056ea:	f003 030f 	and.w	r3, r3, #15
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	e005      	b.n	80056fe <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80056f2:	4b11      	ldr	r3, [pc, #68]	@ (8005738 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	091b      	lsrs	r3, r3, #4
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 80056fe:	4a11      	ldr	r2, [pc, #68]	@ (8005744 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005706:	613b      	str	r3, [r7, #16]
        break;
 8005708:	e002      	b.n	8005710 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800570a:	2300      	movs	r3, #0
 800570c:	613b      	str	r3, [r7, #16]
      break;
 800570e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005710:	4b09      	ldr	r3, [pc, #36]	@ (8005738 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	0e5b      	lsrs	r3, r3, #25
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	3301      	adds	r3, #1
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	fbb2 f3f3 	udiv	r3, r2, r3
 8005728:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800572a:	683b      	ldr	r3, [r7, #0]
}
 800572c:	4618      	mov	r0, r3
 800572e:	371c      	adds	r7, #28
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	40021000 	.word	0x40021000
 800573c:	00f42400 	.word	0x00f42400
 8005740:	007a1200 	.word	0x007a1200
 8005744:	0800632c 	.word	0x0800632c

08005748 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b088      	sub	sp, #32
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005750:	2300      	movs	r3, #0
 8005752:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005754:	2300      	movs	r3, #0
 8005756:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005760:	2b00      	cmp	r3, #0
 8005762:	d040      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005768:	2b80      	cmp	r3, #128	@ 0x80
 800576a:	d02a      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800576c:	2b80      	cmp	r3, #128	@ 0x80
 800576e:	d825      	bhi.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005770:	2b60      	cmp	r3, #96	@ 0x60
 8005772:	d026      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005774:	2b60      	cmp	r3, #96	@ 0x60
 8005776:	d821      	bhi.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005778:	2b40      	cmp	r3, #64	@ 0x40
 800577a:	d006      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800577c:	2b40      	cmp	r3, #64	@ 0x40
 800577e:	d81d      	bhi.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005780:	2b00      	cmp	r3, #0
 8005782:	d009      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005784:	2b20      	cmp	r3, #32
 8005786:	d010      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005788:	e018      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800578a:	4b8f      	ldr	r3, [pc, #572]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	4a8e      	ldr	r2, [pc, #568]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005794:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005796:	e015      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3304      	adds	r3, #4
 800579c:	2100      	movs	r1, #0
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 fb56 	bl	8005e50 <RCCEx_PLLSAI1_Config>
 80057a4:	4603      	mov	r3, r0
 80057a6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80057a8:	e00c      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	3320      	adds	r3, #32
 80057ae:	2100      	movs	r1, #0
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 fc33 	bl	800601c <RCCEx_PLLSAI2_Config>
 80057b6:	4603      	mov	r3, r0
 80057b8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80057ba:	e003      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	77fb      	strb	r3, [r7, #31]
        break;
 80057c0:	e000      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80057c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057c4:	7ffb      	ldrb	r3, [r7, #31]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10b      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057ca:	4b7f      	ldr	r3, [pc, #508]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057d0:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057d8:	497b      	ldr	r1, [pc, #492]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80057e0:	e001      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e2:	7ffb      	ldrb	r3, [r7, #31]
 80057e4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d047      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057fa:	d030      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80057fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005800:	d82a      	bhi.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005802:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005806:	d02a      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005808:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800580c:	d824      	bhi.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800580e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005812:	d008      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005818:	d81e      	bhi.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00a      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800581e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005822:	d010      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005824:	e018      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005826:	4b68      	ldr	r3, [pc, #416]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	4a67      	ldr	r2, [pc, #412]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800582c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005830:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005832:	e015      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3304      	adds	r3, #4
 8005838:	2100      	movs	r1, #0
 800583a:	4618      	mov	r0, r3
 800583c:	f000 fb08 	bl	8005e50 <RCCEx_PLLSAI1_Config>
 8005840:	4603      	mov	r3, r0
 8005842:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005844:	e00c      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	3320      	adds	r3, #32
 800584a:	2100      	movs	r1, #0
 800584c:	4618      	mov	r0, r3
 800584e:	f000 fbe5 	bl	800601c <RCCEx_PLLSAI2_Config>
 8005852:	4603      	mov	r3, r0
 8005854:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005856:	e003      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	77fb      	strb	r3, [r7, #31]
        break;
 800585c:	e000      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800585e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005860:	7ffb      	ldrb	r3, [r7, #31]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10b      	bne.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005866:	4b58      	ldr	r3, [pc, #352]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005868:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800586c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005874:	4954      	ldr	r1, [pc, #336]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800587c:	e001      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800587e:	7ffb      	ldrb	r3, [r7, #31]
 8005880:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 80ab 	beq.w	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005890:	2300      	movs	r3, #0
 8005892:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005894:	4b4c      	ldr	r3, [pc, #304]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10d      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058a0:	4b49      	ldr	r3, [pc, #292]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a4:	4a48      	ldr	r2, [pc, #288]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80058ac:	4b46      	ldr	r3, [pc, #280]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80058b8:	2301      	movs	r3, #1
 80058ba:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058bc:	4b43      	ldr	r3, [pc, #268]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a42      	ldr	r2, [pc, #264]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80058c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058c8:	f7fd fd80 	bl	80033cc <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058ce:	e00f      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058d0:	f7fd fd7c 	bl	80033cc <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d908      	bls.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058de:	4b3b      	ldr	r3, [pc, #236]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d109      	bne.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	77fb      	strb	r3, [r7, #31]
        }
        break;
 80058ee:	e006      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058f0:	4b36      	ldr	r3, [pc, #216]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0e9      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80058fc:	e000      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 80058fe:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8005900:	7ffb      	ldrb	r3, [r7, #31]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d164      	bne.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005906:	4b30      	ldr	r3, [pc, #192]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800590c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005910:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d01f      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	429a      	cmp	r2, r3
 8005922:	d019      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005924:	4b28      	ldr	r3, [pc, #160]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800592a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800592e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005930:	4b25      	ldr	r3, [pc, #148]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005936:	4a24      	ldr	r2, [pc, #144]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800593c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005940:	4b21      	ldr	r3, [pc, #132]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005946:	4a20      	ldr	r2, [pc, #128]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005948:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800594c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005950:	4a1d      	ldr	r2, [pc, #116]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	d01f      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005962:	f7fd fd33 	bl	80033cc <HAL_GetTick>
 8005966:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005968:	e012      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800596a:	f7fd fd2f 	bl	80033cc <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005978:	4293      	cmp	r3, r2
 800597a:	d909      	bls.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800597c:	4b12      	ldr	r3, [pc, #72]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800597e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10a      	bne.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800598e:	e007      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005990:	4b0d      	ldr	r3, [pc, #52]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0e5      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x222>
 800599e:	e000      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80059a0:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80059a2:	7ffb      	ldrb	r3, [r7, #31]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10c      	bne.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059a8:	4b07      	ldr	r3, [pc, #28]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059ae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059b8:	4903      	ldr	r1, [pc, #12]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80059c0:	e008      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059c2:	7ffb      	ldrb	r3, [r7, #31]
 80059c4:	77bb      	strb	r3, [r7, #30]
 80059c6:	e005      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80059c8:	40021000 	.word	0x40021000
 80059cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d0:	7ffb      	ldrb	r3, [r7, #31]
 80059d2:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059d4:	7dfb      	ldrb	r3, [r7, #23]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d105      	bne.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059da:	4b9c      	ldr	r3, [pc, #624]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80059dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059de:	4a9b      	ldr	r2, [pc, #620]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80059e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00a      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059f2:	4b96      	ldr	r3, [pc, #600]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80059f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f8:	f023 0203 	bic.w	r2, r3, #3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a00:	4992      	ldr	r1, [pc, #584]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00a      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a14:	4b8d      	ldr	r3, [pc, #564]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a1a:	f023 020c 	bic.w	r2, r3, #12
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a22:	498a      	ldr	r1, [pc, #552]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0304 	and.w	r3, r3, #4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a36:	4b85      	ldr	r3, [pc, #532]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a3c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a44:	4981      	ldr	r1, [pc, #516]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0308 	and.w	r3, r3, #8
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00a      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a58:	4b7c      	ldr	r3, [pc, #496]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a66:	4979      	ldr	r1, [pc, #484]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0310 	and.w	r3, r3, #16
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a7a:	4b74      	ldr	r3, [pc, #464]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a88:	4970      	ldr	r1, [pc, #448]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0320 	and.w	r3, r3, #32
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00a      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a9c:	4b6b      	ldr	r3, [pc, #428]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aa2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aaa:	4968      	ldr	r1, [pc, #416]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005abe:	4b63      	ldr	r3, [pc, #396]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005acc:	495f      	ldr	r1, [pc, #380]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00a      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ae0:	4b5a      	ldr	r3, [pc, #360]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ae6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aee:	4957      	ldr	r1, [pc, #348]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005b02:	4b52      	ldr	r3, [pc, #328]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b08:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b10:	494e      	ldr	r1, [pc, #312]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d031      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b2c:	d00e      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005b2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b32:	d814      	bhi.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d015      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005b38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b3c:	d10f      	bne.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b3e:	4b43      	ldr	r3, [pc, #268]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	4a42      	ldr	r2, [pc, #264]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005b44:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b48:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005b4a:	e00c      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3304      	adds	r3, #4
 8005b50:	2100      	movs	r1, #0
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 f97c 	bl	8005e50 <RCCEx_PLLSAI1_Config>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005b5c:	e003      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	77fb      	strb	r3, [r7, #31]
        break;
 8005b62:	e000      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8005b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b66:	7ffb      	ldrb	r3, [r7, #31]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10b      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b6c:	4b37      	ldr	r3, [pc, #220]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b72:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b7a:	4934      	ldr	r1, [pc, #208]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005b82:	e001      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b84:	7ffb      	ldrb	r3, [r7, #31]
 8005b86:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00a      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b94:	4b2d      	ldr	r3, [pc, #180]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ba2:	492a      	ldr	r1, [pc, #168]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005bb6:	4b25      	ldr	r3, [pc, #148]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bbc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc4:	4921      	ldr	r1, [pc, #132]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00a      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005bd8:	4b1c      	ldr	r3, [pc, #112]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bde:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be6:	4919      	ldr	r1, [pc, #100]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005bfa:	4b14      	ldr	r3, [pc, #80]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005bfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c00:	f023 0203 	bic.w	r2, r3, #3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c08:	4910      	ldr	r1, [pc, #64]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d02b      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c2a:	4908      	ldr	r1, [pc, #32]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c3a:	d109      	bne.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c3c:	4b03      	ldr	r3, [pc, #12]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	4a02      	ldr	r2, [pc, #8]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c46:	60d3      	str	r3, [r2, #12]
 8005c48:	e014      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005c4a:	bf00      	nop
 8005c4c:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c58:	d10c      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	2101      	movs	r1, #1
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 f8f5 	bl	8005e50 <RCCEx_PLLSAI1_Config>
 8005c66:	4603      	mov	r3, r0
 8005c68:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8005c6a:	7ffb      	ldrb	r3, [r7, #31]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8005c70:	7ffb      	ldrb	r3, [r7, #31]
 8005c72:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d04a      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c88:	d108      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x554>
 8005c8a:	4b70      	ldr	r3, [pc, #448]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005c8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c90:	4a6e      	ldr	r2, [pc, #440]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005c92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c96:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005c9a:	e012      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005c9c:	4b6b      	ldr	r3, [pc, #428]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ca2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005caa:	4968      	ldr	r1, [pc, #416]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005cb2:	4b66      	ldr	r3, [pc, #408]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005cb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cb8:	4a64      	ldr	r2, [pc, #400]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005cba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cbe:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cc6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cca:	d10d      	bne.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	3304      	adds	r3, #4
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 f8bc 	bl	8005e50 <RCCEx_PLLSAI1_Config>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005cdc:	7ffb      	ldrb	r3, [r7, #31]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d019      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8005ce2:	7ffb      	ldrb	r3, [r7, #31]
 8005ce4:	77bb      	strb	r3, [r7, #30]
 8005ce6:	e016      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cf0:	d106      	bne.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cf2:	4b56      	ldr	r3, [pc, #344]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	4a55      	ldr	r2, [pc, #340]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005cf8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cfc:	60d3      	str	r3, [r2, #12]
 8005cfe:	e00a      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d08:	d105      	bne.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d0a:	4b50      	ldr	r3, [pc, #320]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	4a4f      	ldr	r2, [pc, #316]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d14:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d028      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d22:	4b4a      	ldr	r3, [pc, #296]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d28:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d30:	4946      	ldr	r1, [pc, #280]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d40:	d106      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d42:	4b42      	ldr	r3, [pc, #264]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	4a41      	ldr	r2, [pc, #260]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d4c:	60d3      	str	r3, [r2, #12]
 8005d4e:	e011      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d58:	d10c      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	2101      	movs	r1, #1
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 f875 	bl	8005e50 <RCCEx_PLLSAI1_Config>
 8005d66:	4603      	mov	r3, r0
 8005d68:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005d6a:	7ffb      	ldrb	r3, [r7, #31]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d001      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8005d70:	7ffb      	ldrb	r3, [r7, #31]
 8005d72:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d01e      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d80:	4b32      	ldr	r3, [pc, #200]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d86:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d90:	492e      	ldr	r1, [pc, #184]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005da2:	d10c      	bne.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3304      	adds	r3, #4
 8005da8:	2102      	movs	r1, #2
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 f850 	bl	8005e50 <RCCEx_PLLSAI1_Config>
 8005db0:	4603      	mov	r3, r0
 8005db2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005db4:	7ffb      	ldrb	r3, [r7, #31]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8005dba:	7ffb      	ldrb	r3, [r7, #31]
 8005dbc:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00b      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005dca:	4b20      	ldr	r3, [pc, #128]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005dcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005dd0:	f023 0204 	bic.w	r2, r3, #4
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dda:	491c      	ldr	r1, [pc, #112]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00b      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005dee:	4b17      	ldr	r3, [pc, #92]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005df0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005df4:	f023 0218 	bic.w	r2, r3, #24
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dfe:	4913      	ldr	r1, [pc, #76]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d017      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005e12:	4b0e      	ldr	r3, [pc, #56]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005e14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e18:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e22:	490a      	ldr	r1, [pc, #40]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e34:	d105      	bne.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e36:	4b05      	ldr	r3, [pc, #20]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	4a04      	ldr	r2, [pc, #16]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005e3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e40:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005e42:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3720      	adds	r7, #32
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	40021000 	.word	0x40021000

08005e50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	d018      	beq.n	8005e98 <RCCEx_PLLSAI1_Config+0x48>
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d81f      	bhi.n	8005eaa <RCCEx_PLLSAI1_Config+0x5a>
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d002      	beq.n	8005e74 <RCCEx_PLLSAI1_Config+0x24>
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d009      	beq.n	8005e86 <RCCEx_PLLSAI1_Config+0x36>
 8005e72:	e01a      	b.n	8005eaa <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e74:	4b65      	ldr	r3, [pc, #404]	@ (800600c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d117      	bne.n	8005eb0 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e84:	e014      	b.n	8005eb0 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e86:	4b61      	ldr	r3, [pc, #388]	@ (800600c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d110      	bne.n	8005eb4 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e96:	e00d      	b.n	8005eb4 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005e98:	4b5c      	ldr	r3, [pc, #368]	@ (800600c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d109      	bne.n	8005eb8 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ea8:	e006      	b.n	8005eb8 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	73fb      	strb	r3, [r7, #15]
      break;
 8005eae:	e004      	b.n	8005eba <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005eb0:	bf00      	nop
 8005eb2:	e002      	b.n	8005eba <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005eb4:	bf00      	nop
 8005eb6:	e000      	b.n	8005eba <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005eb8:	bf00      	nop
  }

  if (status == HAL_OK)
 8005eba:	7bfb      	ldrb	r3, [r7, #15]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f040 809f 	bne.w	8006000 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ec2:	4b52      	ldr	r3, [pc, #328]	@ (800600c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a51      	ldr	r2, [pc, #324]	@ (800600c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005ec8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005ecc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ece:	f7fd fa7d 	bl	80033cc <HAL_GetTick>
 8005ed2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ed4:	e00f      	b.n	8005ef6 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ed6:	f7fd fa79 	bl	80033cc <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d908      	bls.n	8005ef6 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ee4:	4b49      	ldr	r3, [pc, #292]	@ (800600c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d009      	beq.n	8005f04 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ef4:	e006      	b.n	8005f04 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ef6:	4b45      	ldr	r3, [pc, #276]	@ (800600c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1e9      	bne.n	8005ed6 <RCCEx_PLLSAI1_Config+0x86>
 8005f02:	e000      	b.n	8005f06 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8005f04:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d179      	bne.n	8006000 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d116      	bne.n	8005f40 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f12:	4b3e      	ldr	r3, [pc, #248]	@ (800600c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	4b3e      	ldr	r3, [pc, #248]	@ (8006010 <RCCEx_PLLSAI1_Config+0x1c0>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6892      	ldr	r2, [r2, #8]
 8005f1e:	0211      	lsls	r1, r2, #8
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	68d2      	ldr	r2, [r2, #12]
 8005f24:	06d2      	lsls	r2, r2, #27
 8005f26:	4311      	orrs	r1, r2
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	6852      	ldr	r2, [r2, #4]
 8005f2c:	3a01      	subs	r2, #1
 8005f2e:	0112      	lsls	r2, r2, #4
 8005f30:	4311      	orrs	r1, r2
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	6812      	ldr	r2, [r2, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	4934      	ldr	r1, [pc, #208]	@ (800600c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	610b      	str	r3, [r1, #16]
 8005f3e:	e033      	b.n	8005fa8 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d118      	bne.n	8005f78 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f46:	4b31      	ldr	r3, [pc, #196]	@ (800600c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005f48:	691a      	ldr	r2, [r3, #16]
 8005f4a:	4b32      	ldr	r3, [pc, #200]	@ (8006014 <RCCEx_PLLSAI1_Config+0x1c4>)
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	6892      	ldr	r2, [r2, #8]
 8005f52:	0211      	lsls	r1, r2, #8
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	6912      	ldr	r2, [r2, #16]
 8005f58:	0852      	lsrs	r2, r2, #1
 8005f5a:	3a01      	subs	r2, #1
 8005f5c:	0552      	lsls	r2, r2, #21
 8005f5e:	4311      	orrs	r1, r2
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	6852      	ldr	r2, [r2, #4]
 8005f64:	3a01      	subs	r2, #1
 8005f66:	0112      	lsls	r2, r2, #4
 8005f68:	4311      	orrs	r1, r2
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	6812      	ldr	r2, [r2, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	4926      	ldr	r1, [pc, #152]	@ (800600c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	610b      	str	r3, [r1, #16]
 8005f76:	e017      	b.n	8005fa8 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f78:	4b24      	ldr	r3, [pc, #144]	@ (800600c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005f7a:	691a      	ldr	r2, [r3, #16]
 8005f7c:	4b26      	ldr	r3, [pc, #152]	@ (8006018 <RCCEx_PLLSAI1_Config+0x1c8>)
 8005f7e:	4013      	ands	r3, r2
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	6892      	ldr	r2, [r2, #8]
 8005f84:	0211      	lsls	r1, r2, #8
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	6952      	ldr	r2, [r2, #20]
 8005f8a:	0852      	lsrs	r2, r2, #1
 8005f8c:	3a01      	subs	r2, #1
 8005f8e:	0652      	lsls	r2, r2, #25
 8005f90:	4311      	orrs	r1, r2
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	6852      	ldr	r2, [r2, #4]
 8005f96:	3a01      	subs	r2, #1
 8005f98:	0112      	lsls	r2, r2, #4
 8005f9a:	4311      	orrs	r1, r2
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6812      	ldr	r2, [r2, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	491a      	ldr	r1, [pc, #104]	@ (800600c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005fa8:	4b18      	ldr	r3, [pc, #96]	@ (800600c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a17      	ldr	r2, [pc, #92]	@ (800600c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005fae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005fb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb4:	f7fd fa0a 	bl	80033cc <HAL_GetTick>
 8005fb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005fba:	e00f      	b.n	8005fdc <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fbc:	f7fd fa06 	bl	80033cc <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d908      	bls.n	8005fdc <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005fca:	4b10      	ldr	r3, [pc, #64]	@ (800600c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d109      	bne.n	8005fea <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005fda:	e006      	b.n	8005fea <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800600c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d0e9      	beq.n	8005fbc <RCCEx_PLLSAI1_Config+0x16c>
 8005fe8:	e000      	b.n	8005fec <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8005fea:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d106      	bne.n	8006000 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8005ff2:	4b06      	ldr	r3, [pc, #24]	@ (800600c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005ff4:	691a      	ldr	r2, [r3, #16]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	4904      	ldr	r1, [pc, #16]	@ (800600c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006000:	7bfb      	ldrb	r3, [r7, #15]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	40021000 	.word	0x40021000
 8006010:	07ff800c 	.word	0x07ff800c
 8006014:	ff9f800c 	.word	0xff9f800c
 8006018:	f9ff800c 	.word	0xf9ff800c

0800601c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b03      	cmp	r3, #3
 8006030:	d018      	beq.n	8006064 <RCCEx_PLLSAI2_Config+0x48>
 8006032:	2b03      	cmp	r3, #3
 8006034:	d81f      	bhi.n	8006076 <RCCEx_PLLSAI2_Config+0x5a>
 8006036:	2b01      	cmp	r3, #1
 8006038:	d002      	beq.n	8006040 <RCCEx_PLLSAI2_Config+0x24>
 800603a:	2b02      	cmp	r3, #2
 800603c:	d009      	beq.n	8006052 <RCCEx_PLLSAI2_Config+0x36>
 800603e:	e01a      	b.n	8006076 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006040:	4b4a      	ldr	r3, [pc, #296]	@ (800616c <RCCEx_PLLSAI2_Config+0x150>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d117      	bne.n	800607c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006050:	e014      	b.n	800607c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006052:	4b46      	ldr	r3, [pc, #280]	@ (800616c <RCCEx_PLLSAI2_Config+0x150>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800605a:	2b00      	cmp	r3, #0
 800605c:	d110      	bne.n	8006080 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006062:	e00d      	b.n	8006080 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8006064:	4b41      	ldr	r3, [pc, #260]	@ (800616c <RCCEx_PLLSAI2_Config+0x150>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d109      	bne.n	8006084 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006074:	e006      	b.n	8006084 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	73fb      	strb	r3, [r7, #15]
      break;
 800607a:	e004      	b.n	8006086 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800607c:	bf00      	nop
 800607e:	e002      	b.n	8006086 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006080:	bf00      	nop
 8006082:	e000      	b.n	8006086 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006084:	bf00      	nop
  }

  if (status == HAL_OK)
 8006086:	7bfb      	ldrb	r3, [r7, #15]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d169      	bne.n	8006160 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800608c:	4b37      	ldr	r3, [pc, #220]	@ (800616c <RCCEx_PLLSAI2_Config+0x150>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a36      	ldr	r2, [pc, #216]	@ (800616c <RCCEx_PLLSAI2_Config+0x150>)
 8006092:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006096:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006098:	f7fd f998 	bl	80033cc <HAL_GetTick>
 800609c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800609e:	e00f      	b.n	80060c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80060a0:	f7fd f994 	bl	80033cc <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d908      	bls.n	80060c0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060ae:	4b2f      	ldr	r3, [pc, #188]	@ (800616c <RCCEx_PLLSAI2_Config+0x150>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d009      	beq.n	80060ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80060be:	e006      	b.n	80060ce <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060c0:	4b2a      	ldr	r3, [pc, #168]	@ (800616c <RCCEx_PLLSAI2_Config+0x150>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1e9      	bne.n	80060a0 <RCCEx_PLLSAI2_Config+0x84>
 80060cc:	e000      	b.n	80060d0 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80060ce:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d144      	bne.n	8006160 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d115      	bne.n	8006108 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80060dc:	4b23      	ldr	r3, [pc, #140]	@ (800616c <RCCEx_PLLSAI2_Config+0x150>)
 80060de:	695a      	ldr	r2, [r3, #20]
 80060e0:	4b23      	ldr	r3, [pc, #140]	@ (8006170 <RCCEx_PLLSAI2_Config+0x154>)
 80060e2:	4013      	ands	r3, r2
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6892      	ldr	r2, [r2, #8]
 80060e8:	0211      	lsls	r1, r2, #8
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	68d2      	ldr	r2, [r2, #12]
 80060ee:	06d2      	lsls	r2, r2, #27
 80060f0:	4311      	orrs	r1, r2
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	6852      	ldr	r2, [r2, #4]
 80060f6:	3a01      	subs	r2, #1
 80060f8:	0112      	lsls	r2, r2, #4
 80060fa:	4311      	orrs	r1, r2
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	6812      	ldr	r2, [r2, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	491a      	ldr	r1, [pc, #104]	@ (800616c <RCCEx_PLLSAI2_Config+0x150>)
 8006104:	4313      	orrs	r3, r2
 8006106:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006108:	4b18      	ldr	r3, [pc, #96]	@ (800616c <RCCEx_PLLSAI2_Config+0x150>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a17      	ldr	r2, [pc, #92]	@ (800616c <RCCEx_PLLSAI2_Config+0x150>)
 800610e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006112:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006114:	f7fd f95a 	bl	80033cc <HAL_GetTick>
 8006118:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800611a:	e00f      	b.n	800613c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800611c:	f7fd f956 	bl	80033cc <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b02      	cmp	r3, #2
 8006128:	d908      	bls.n	800613c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800612a:	4b10      	ldr	r3, [pc, #64]	@ (800616c <RCCEx_PLLSAI2_Config+0x150>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d109      	bne.n	800614a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800613a:	e006      	b.n	800614a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800613c:	4b0b      	ldr	r3, [pc, #44]	@ (800616c <RCCEx_PLLSAI2_Config+0x150>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d0e9      	beq.n	800611c <RCCEx_PLLSAI2_Config+0x100>
 8006148:	e000      	b.n	800614c <RCCEx_PLLSAI2_Config+0x130>
          break;
 800614a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800614c:	7bfb      	ldrb	r3, [r7, #15]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d106      	bne.n	8006160 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8006152:	4b06      	ldr	r3, [pc, #24]	@ (800616c <RCCEx_PLLSAI2_Config+0x150>)
 8006154:	695a      	ldr	r2, [r3, #20]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	4904      	ldr	r1, [pc, #16]	@ (800616c <RCCEx_PLLSAI2_Config+0x150>)
 800615c:	4313      	orrs	r3, r2
 800615e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006160:	7bfb      	ldrb	r3, [r7, #15]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	40021000 	.word	0x40021000
 8006170:	07ff800c 	.word	0x07ff800c

08006174 <_ZdlPvj>:
 8006174:	f000 b800 	b.w	8006178 <_ZdlPv>

08006178 <_ZdlPv>:
 8006178:	f000 b800 	b.w	800617c <free>

0800617c <free>:
 800617c:	4b02      	ldr	r3, [pc, #8]	@ (8006188 <free+0xc>)
 800617e:	4601      	mov	r1, r0
 8006180:	6818      	ldr	r0, [r3, #0]
 8006182:	f000 b85b 	b.w	800623c <_free_r>
 8006186:	bf00      	nop
 8006188:	2000000c 	.word	0x2000000c

0800618c <__malloc_lock>:
 800618c:	4801      	ldr	r0, [pc, #4]	@ (8006194 <__malloc_lock+0x8>)
 800618e:	f000 b845 	b.w	800621c <__retarget_lock_acquire_recursive>
 8006192:	bf00      	nop
 8006194:	200012ec 	.word	0x200012ec

08006198 <__malloc_unlock>:
 8006198:	4801      	ldr	r0, [pc, #4]	@ (80061a0 <__malloc_unlock+0x8>)
 800619a:	f000 b840 	b.w	800621e <__retarget_lock_release_recursive>
 800619e:	bf00      	nop
 80061a0:	200012ec 	.word	0x200012ec

080061a4 <memcmp>:
 80061a4:	3901      	subs	r1, #1
 80061a6:	4402      	add	r2, r0
 80061a8:	b510      	push	{r4, lr}
 80061aa:	4290      	cmp	r0, r2
 80061ac:	d101      	bne.n	80061b2 <memcmp+0xe>
 80061ae:	2000      	movs	r0, #0
 80061b0:	e005      	b.n	80061be <memcmp+0x1a>
 80061b2:	7803      	ldrb	r3, [r0, #0]
 80061b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80061b8:	42a3      	cmp	r3, r4
 80061ba:	d001      	beq.n	80061c0 <memcmp+0x1c>
 80061bc:	1b18      	subs	r0, r3, r4
 80061be:	bd10      	pop	{r4, pc}
 80061c0:	3001      	adds	r0, #1
 80061c2:	e7f2      	b.n	80061aa <memcmp+0x6>

080061c4 <memset>:
 80061c4:	4402      	add	r2, r0
 80061c6:	4603      	mov	r3, r0
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d100      	bne.n	80061ce <memset+0xa>
 80061cc:	4770      	bx	lr
 80061ce:	f803 1b01 	strb.w	r1, [r3], #1
 80061d2:	e7f9      	b.n	80061c8 <memset+0x4>

080061d4 <__libc_init_array>:
 80061d4:	b570      	push	{r4, r5, r6, lr}
 80061d6:	4d0d      	ldr	r5, [pc, #52]	@ (800620c <__libc_init_array+0x38>)
 80061d8:	2600      	movs	r6, #0
 80061da:	4c0d      	ldr	r4, [pc, #52]	@ (8006210 <__libc_init_array+0x3c>)
 80061dc:	1b64      	subs	r4, r4, r5
 80061de:	10a4      	asrs	r4, r4, #2
 80061e0:	42a6      	cmp	r6, r4
 80061e2:	d109      	bne.n	80061f8 <__libc_init_array+0x24>
 80061e4:	4d0b      	ldr	r5, [pc, #44]	@ (8006214 <__libc_init_array+0x40>)
 80061e6:	2600      	movs	r6, #0
 80061e8:	4c0b      	ldr	r4, [pc, #44]	@ (8006218 <__libc_init_array+0x44>)
 80061ea:	f000 f871 	bl	80062d0 <_init>
 80061ee:	1b64      	subs	r4, r4, r5
 80061f0:	10a4      	asrs	r4, r4, #2
 80061f2:	42a6      	cmp	r6, r4
 80061f4:	d105      	bne.n	8006202 <__libc_init_array+0x2e>
 80061f6:	bd70      	pop	{r4, r5, r6, pc}
 80061f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80061fc:	3601      	adds	r6, #1
 80061fe:	4798      	blx	r3
 8006200:	e7ee      	b.n	80061e0 <__libc_init_array+0xc>
 8006202:	f855 3b04 	ldr.w	r3, [r5], #4
 8006206:	3601      	adds	r6, #1
 8006208:	4798      	blx	r3
 800620a:	e7f2      	b.n	80061f2 <__libc_init_array+0x1e>
 800620c:	0800637c 	.word	0x0800637c
 8006210:	0800637c 	.word	0x0800637c
 8006214:	0800637c 	.word	0x0800637c
 8006218:	08006384 	.word	0x08006384

0800621c <__retarget_lock_acquire_recursive>:
 800621c:	4770      	bx	lr

0800621e <__retarget_lock_release_recursive>:
 800621e:	4770      	bx	lr

08006220 <memcpy>:
 8006220:	440a      	add	r2, r1
 8006222:	1e43      	subs	r3, r0, #1
 8006224:	4291      	cmp	r1, r2
 8006226:	d100      	bne.n	800622a <memcpy+0xa>
 8006228:	4770      	bx	lr
 800622a:	b510      	push	{r4, lr}
 800622c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006230:	4291      	cmp	r1, r2
 8006232:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006236:	d1f9      	bne.n	800622c <memcpy+0xc>
 8006238:	bd10      	pop	{r4, pc}
	...

0800623c <_free_r>:
 800623c:	b538      	push	{r3, r4, r5, lr}
 800623e:	4605      	mov	r5, r0
 8006240:	2900      	cmp	r1, #0
 8006242:	d041      	beq.n	80062c8 <_free_r+0x8c>
 8006244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006248:	1f0c      	subs	r4, r1, #4
 800624a:	2b00      	cmp	r3, #0
 800624c:	bfb8      	it	lt
 800624e:	18e4      	addlt	r4, r4, r3
 8006250:	f7ff ff9c 	bl	800618c <__malloc_lock>
 8006254:	4a1d      	ldr	r2, [pc, #116]	@ (80062cc <_free_r+0x90>)
 8006256:	6813      	ldr	r3, [r2, #0]
 8006258:	b933      	cbnz	r3, 8006268 <_free_r+0x2c>
 800625a:	6063      	str	r3, [r4, #4]
 800625c:	6014      	str	r4, [r2, #0]
 800625e:	4628      	mov	r0, r5
 8006260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006264:	f7ff bf98 	b.w	8006198 <__malloc_unlock>
 8006268:	42a3      	cmp	r3, r4
 800626a:	d908      	bls.n	800627e <_free_r+0x42>
 800626c:	6820      	ldr	r0, [r4, #0]
 800626e:	1821      	adds	r1, r4, r0
 8006270:	428b      	cmp	r3, r1
 8006272:	bf01      	itttt	eq
 8006274:	6819      	ldreq	r1, [r3, #0]
 8006276:	685b      	ldreq	r3, [r3, #4]
 8006278:	1809      	addeq	r1, r1, r0
 800627a:	6021      	streq	r1, [r4, #0]
 800627c:	e7ed      	b.n	800625a <_free_r+0x1e>
 800627e:	461a      	mov	r2, r3
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	b10b      	cbz	r3, 8006288 <_free_r+0x4c>
 8006284:	42a3      	cmp	r3, r4
 8006286:	d9fa      	bls.n	800627e <_free_r+0x42>
 8006288:	6811      	ldr	r1, [r2, #0]
 800628a:	1850      	adds	r0, r2, r1
 800628c:	42a0      	cmp	r0, r4
 800628e:	d10b      	bne.n	80062a8 <_free_r+0x6c>
 8006290:	6820      	ldr	r0, [r4, #0]
 8006292:	4401      	add	r1, r0
 8006294:	1850      	adds	r0, r2, r1
 8006296:	6011      	str	r1, [r2, #0]
 8006298:	4283      	cmp	r3, r0
 800629a:	d1e0      	bne.n	800625e <_free_r+0x22>
 800629c:	6818      	ldr	r0, [r3, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	4408      	add	r0, r1
 80062a2:	6053      	str	r3, [r2, #4]
 80062a4:	6010      	str	r0, [r2, #0]
 80062a6:	e7da      	b.n	800625e <_free_r+0x22>
 80062a8:	d902      	bls.n	80062b0 <_free_r+0x74>
 80062aa:	230c      	movs	r3, #12
 80062ac:	602b      	str	r3, [r5, #0]
 80062ae:	e7d6      	b.n	800625e <_free_r+0x22>
 80062b0:	6820      	ldr	r0, [r4, #0]
 80062b2:	1821      	adds	r1, r4, r0
 80062b4:	428b      	cmp	r3, r1
 80062b6:	bf02      	ittt	eq
 80062b8:	6819      	ldreq	r1, [r3, #0]
 80062ba:	685b      	ldreq	r3, [r3, #4]
 80062bc:	1809      	addeq	r1, r1, r0
 80062be:	6063      	str	r3, [r4, #4]
 80062c0:	bf08      	it	eq
 80062c2:	6021      	streq	r1, [r4, #0]
 80062c4:	6054      	str	r4, [r2, #4]
 80062c6:	e7ca      	b.n	800625e <_free_r+0x22>
 80062c8:	bd38      	pop	{r3, r4, r5, pc}
 80062ca:	bf00      	nop
 80062cc:	200011b0 	.word	0x200011b0

080062d0 <_init>:
 80062d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d2:	bf00      	nop
 80062d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062d6:	bc08      	pop	{r3}
 80062d8:	469e      	mov	lr, r3
 80062da:	4770      	bx	lr

080062dc <_fini>:
 80062dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062de:	bf00      	nop
 80062e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062e2:	bc08      	pop	{r3}
 80062e4:	469e      	mov	lr, r3
 80062e6:	4770      	bx	lr
